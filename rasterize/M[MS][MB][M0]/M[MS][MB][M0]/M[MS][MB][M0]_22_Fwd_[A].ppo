#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1044;
float _3407;
float _3408;
float _3409;
float _3410;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _322 = _318.z;
    float _326 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3419 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))));
    float _339 = _326 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_292.x * 2.0) + (-1.0)));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_292.y * 2.0) + (-1.0)));
    float _343 = fma(_334, _214, fma(_340, _221, _339 * _207));
    float _346 = fma(_334, _215, fma(_340, _222, _339 * _208));
    float _349 = fma(_334, _216, fma(_340, _223, _339 * _209));
    float _353 = inversesqrt(dot(vec3(_343, _346, _349), vec3(_343, _346, _349)));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _391 = _389.x;
    float _392 = 1.0 - _391;
    float _401 = (cbMtdParam._m0[19u].x + dot(vec4(_353 * _343, _353 * _346, _353 * _349, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_391 - _392) * cbMtdParam._m0[24u].z) + _392) * cbMtdParam._m0[21u].z);
    float _3430 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _409 = (_402 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _410 = (_402 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _411 = (_402 * (cbMtdParam._m0[17u].z - _274)) + _274;
    float _416 = (((_292.z - _322) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _322;
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _436 = (_429.x * 2.0) + (-1.0);
    float _437 = (_429.y * 2.0) + (-1.0);
    float _438 = dot(vec2(_436, _437), vec2(_436, _437));
    float _3441 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _446 = ((_429.z - _416) * _402) + _416;
    float _456 = ((sqrt(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) - _334) * _402) + _334;
    float _459 = (((_436 - _339) * _402) + _339) + (cbMtdParam._m0[21u].x * _339);
    float _460 = (((_437 - _340) * _402) + _340) + (cbMtdParam._m0[21u].x * _340);
    float _465 = cbMtdParam._m0[22u].x + _318.w;
    float _468 = fma(_456, _214, fma(_460, _221, _459 * _207));
    float _471 = fma(_456, _215, fma(_460, _222, _459 * _208));
    float _474 = fma(_456, _216, fma(_460, _223, _459 * _209));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    float _479 = _478 * _468;
    float _480 = _478 * _471;
    float _481 = _478 * _474;
    float _3452 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _482 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _3463 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3474 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _3485 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _3496 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _500 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _551 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _541);
    float _552 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _541);
    float _553 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _541);
    float _557 = inversesqrt(dot(vec3(_551, _552, _553), vec3(_551, _552, _553)));
    float _558 = _551 * _557;
    float _559 = _552 * _557;
    float _560 = _553 * _557;
    vec4 _565 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _567 = _565.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _724 = sqrt(((_551 * _551) + (_552 * _552)) + (_553 * _553));
        float _730 = (cbMatDynParam._m0[5u].x * _724) + cbMatDynParam._m0[5u].y;
        float _3507 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _735 = (cbMatDynParam._m0[5u].z * _724) + cbMatDynParam._m0[5u].w;
        float _3518 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) - _731)) + _731) < ((_567 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _579 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _580 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _600 = fma(_481, cbSceneParam._m0[5u].z, fma(_480, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _479));
    float _603 = fma(_481, cbSceneParam._m0[6u].z, fma(_480, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _479));
    float _606 = fma(_481, cbSceneParam._m0[7u].z, fma(_480, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _479));
    uint _619 = _226 + 9u;
    uint _620 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3529 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _579, cbSceneParam._m0[86u].y * _580));
    float _644 = ((isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * TEXCOORD_5.w) * _640.x;
    float _645 = dot(vec3(_479, _480, _481), vec3(_558, _559, _560));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _479) - _558;
    float _653 = (_648 * _480) - _559;
    float _654 = (_648 * _481) - _560;
    float _658 = abs(dot(vec3(_558, _559, _560), vec3(_479, _480, _481)));
    float _3562 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_482);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_713, cbModelParam._m0[26u].z, fma(_709, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _705));
        float _772 = fma(_713, cbModelParam._m0[27u].z, fma(_709, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _705));
        float _776 = fma(_713, cbModelParam._m0[28u].z, fma(_709, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _705));
        float _801 = _705 + _479;
        float _802 = _709 + _480;
        float _803 = _713 + _481;
        float _813 = fma(_803, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801)) - _768;
        float _814 = fma(_803, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801)) - _772;
        float _815 = fma(_803, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801)) - _776;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(_479, _480, _481), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3610 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_479, _480, _481), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3643 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_479, _480, _481), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3676 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_713, cbModelParam._m0[30u].z, fma(_709, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _705));
        float _1090 = fma(_713, cbModelParam._m0[31u].z, fma(_709, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _705));
        float _1094 = fma(_713, cbModelParam._m0[32u].z, fma(_709, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _705));
        float _1117 = _705 + _479;
        float _1118 = _709 + _480;
        float _1119 = _713 + _481;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_479, _480, _481), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3739 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_479, _480, _481), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3772 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_479, _480, _481), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3805 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1044;
        _1356 = _1044;
        _1357 = _1044;
        _1358 = _1044;
        _1359 = _1044;
        _1360 = _1044;
        _1361 = _1044;
        _1362 = _1044;
        _1363 = _1044;
        _1364 = _1044;
        _1365 = _1044;
        _1366 = _1044;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1056)) + _1056;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _652 * 0.5;
    float _1424 = _653 * 0.5;
    float _1425 = _654 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _482);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_713, cbModelParam._m0[13u].z, fma(_709, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _705)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_713, cbModelParam._m0[14u].z, fma(_709, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _705)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_713, cbModelParam._m0[15u].z, fma(_709, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _705)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1554 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1557 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1585 = frontier_phi_17_15_ladder;
        }
        float _1788;
        if (_1554 > 0.0)
        {
            _1788 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1788 = frontier_phi_26_22_ladder;
        }
        float _2031;
        if (_1557 > 0.0)
        {
            _2031 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2031 = frontier_phi_38_33_ladder;
        }
        float _2033 = isnan(_1788) ? _1585 : (isnan(_1585) ? _1788 : min(_1585, _1788));
        float _2034 = isnan(_2031) ? _2033 : (isnan(_2033) ? _2031 : min(_2033, _2031));
        float _2038 = (_2034 * _1551) + _1540;
        float _2039 = (_2034 * _1554) + _1544;
        float _2040 = (_2034 * _1557) + _1548;
        float _2041 = _2034 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2041;
        float _2045 = _2041 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 > _2045) || ((_2039 < _2043) || ((_2038 < _2043) || (_2038 > _2045))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2164 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2040, cbModelParam._m0[9u].z, fma(_2039, cbModelParam._m0[9u].y, _2038 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2040, cbModelParam._m0[10u].z, fma(_2039, cbModelParam._m0[10u].y, _2038 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2040, cbModelParam._m0[11u].z, fma(_2039, cbModelParam._m0[11u].y, _2038 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_16_38_ladder = _2164.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2164.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2164.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_16_38_ladder_2;
        _1575 = frontier_phi_16_38_ladder_1;
        _1577 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1492);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _482);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_713, cbModelParam._m0[21u].z, fma(_709, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _705)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_713, cbModelParam._m0[22u].z, fma(_709, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _705)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_713, cbModelParam._m0[23u].z, fma(_709, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _705)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1650 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1653 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1793;
        if (_1647 > 0.0)
        {
            _1793 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1793 = frontier_phi_28_24_ladder;
        }
        float _2058;
        if (_1650 > 0.0)
        {
            _2058 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2058 = frontier_phi_40_35_ladder;
        }
        float _2263;
        if (_1653 > 0.0)
        {
            _2263 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2263 = frontier_phi_49_46_ladder;
        }
        float _2265 = isnan(_2058) ? _1793 : (isnan(_1793) ? _2058 : min(_1793, _2058));
        float _2266 = isnan(_2263) ? _2265 : (isnan(_2265) ? _2263 : min(_2265, _2263));
        float _2270 = (_2266 * _1647) + _1636;
        float _2271 = (_2266 * _1650) + _1640;
        float _2272 = (_2266 * _1653) + _1644;
        float _2273 = _2266 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2273;
        float _2276 = _2273 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2272 > _2276) || ((_2272 < _2274) || ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 < _2274) || (_2270 > _2276))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2272, cbModelParam._m0[17u].z, fma(_2271, cbModelParam._m0[17u].y, _2270 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2272, cbModelParam._m0[18u].z, fma(_2271, cbModelParam._m0[18u].y, _2270 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2272, cbModelParam._m0[19u].z, fma(_2271, cbModelParam._m0[19u].y, _2270 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_25_49_ladder = _2471.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2471.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2471.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_25_49_ladder_2;
        _1674 = frontier_phi_25_49_ladder_1;
        _1676 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1582);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_673 * _660)) * _644;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    uvec4 _1710 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1712 = _1710.x * 14u;
    uint _1713 = _1712 + 13u;
    float _1720 = _644 + (-1.0);
    float _1725 = (cbLight._m0[_1713].x * _1720) + 1.0;
    float _1726 = (cbLight._m0[_1713].y * _1720) + 1.0;
    float _1727 = (cbLight._m0[_1713].z * _1720) + 1.0;
    float _1728 = (cbLight._m0[_1713].w * _1720) + 1.0;
    uint _1729 = _1712 + 5u;
    float _1735 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
    uint _1739 = _1712 + 4u;
    float _1746 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
    uint _1750 = _1712 | 1u;
    float _1761 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_479, _480, _481));
    float _1764 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_479, _480, _481));
    float _3941 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _3952 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1769 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1771 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1778 = ((cbLight._m0[_1729].x * _1735) * _1771) + ((cbLight._m0[_1739].x * _1746) * _1769);
    float _1779 = ((_1735 * cbLight._m0[_1729].y) * _1771) + ((_1746 * cbLight._m0[_1739].y) * _1769);
    float _1780 = ((_1735 * cbLight._m0[_1729].z) * _1771) + ((_1746 * cbLight._m0[_1739].z) * _1769);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1712 + 12u]);
    bool _1787 = _1785.x == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1787)
    {
        _1798 = _1778;
        _1800 = _1779;
        _1802 = _1780;
    }
    else
    {
        uint _1806 = _1712 + 6u;
        float _1822 = (dot(vec3(cbLight._m0[_1712 + 2u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3963 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1825 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _1798 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1778;
        _1800 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1779;
        _1802 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1780;
    }
    bool _1805 = _1785.y == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1805)
    {
        _1843 = _1798;
        _1845 = _1800;
        _1847 = _1802;
    }
    else
    {
        uint _2002 = _1712 + 7u;
        float _2018 = (dot(vec3(cbLight._m0[_1712 + 3u].xyz), vec3(_479, _480, _481)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _3979 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _2021 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _1843 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1798;
        _1845 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1800;
        _1847 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1802;
    }
    uint _1850 = _1712 + 8u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _482) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1712].x + _558;
    float _1866 = cbLight._m0[_1712].y + _559;
    float _1867 = cbLight._m0[_1712].z + _560;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1712].xyz));
    float _3995 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1879 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1880 = dot(vec3(_479, _480, _481), vec3(_1872, _1873, _1874));
    float _4017 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1872, _1873, _1874));
    float _4028 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1864 * _1864;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1904 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1879 * ((_1878 * _1904) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1904) + _1864) * _1878))) * _1878;
    float _4039 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    uint _1928 = _1712 + 9u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _482) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1750].x + _558;
    float _1942 = cbLight._m0[_1750].y + _559;
    float _1943 = cbLight._m0[_1750].z + _560;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_1750].xyz));
    float _4050 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1955 = dot(vec3(_479, _480, _481), vec3(_1948, _1949, _1950));
    float _4061 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1948, _1949, _1950));
    float _4072 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1940 * _1940;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1940;
    float _1987 = (0.5 / (((_1879 * ((_1954 * _1977) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1977) + _1940) * _1954))) * _1954;
    float _4083 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    float _1999 = (((_1976 * cbLight._m0[_1928].x) * _1989) * _1735) + (((_1903 * cbLight._m0[_1850].x) * _1917) * _1746);
    float _2000 = (((_1976 * cbLight._m0[_1928].y) * _1989) * _1735) + (((_1903 * cbLight._m0[_1850].y) * _1917) * _1746);
    float _2001 = (((_1976 * cbLight._m0[_1928].z) * _1989) * _1735) + (((_1903 * cbLight._m0[_1850].z) * _1917) * _1746);
    float _2063;
    float _2065;
    float _2067;
    if (_1787)
    {
        _2063 = _1999;
        _2065 = _2000;
        _2067 = _2001;
    }
    else
    {
        uint _2069 = _1712 + 2u;
        uint _2073 = _1712 + 10u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _482) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _558;
        float _2090 = cbLight._m0[_2069].y + _559;
        float _2091 = cbLight._m0[_2069].z + _560;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2069].xyz));
        float _4094 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2103 = dot(vec3(_479, _480, _481), vec3(_2096, _2097, _2098));
        float _4105 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4116 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2125 = 1.0 - _2088;
        float _2135 = (0.5 / (((_1879 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2125) + _2088) * _2102))) * _2102;
        float _4127 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2137 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2138 = isnan(1.0) ? _1727 : (isnan(_1727) ? 1.0 : min(_1727, 1.0));
        _2063 = (((_2124 * cbLight._m0[_2073].x) * _2137) * _2138) + _1999;
        _2065 = (((_2124 * cbLight._m0[_2073].y) * _2137) * _2138) + _2000;
        _2067 = (((_2124 * cbLight._m0[_2073].z) * _2137) * _2138) + _2001;
    }
    float _2173;
    float _2175;
    float _2177;
    if (_1805)
    {
        _2173 = _2063;
        _2175 = _2065;
        _2177 = _2067;
    }
    else
    {
        uint _2184 = _1712 + 3u;
        uint _2188 = _1712 + 11u;
        float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _482) * 0.949999988079071044921875);
        float _2203 = _2202 * _2202;
        float _2204 = cbLight._m0[_2184].x + _558;
        float _2205 = cbLight._m0[_2184].y + _559;
        float _2206 = cbLight._m0[_2184].z + _560;
        float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
        float _2211 = _2210 * _2204;
        float _2212 = _2210 * _2205;
        float _2213 = _2210 * _2206;
        float _2214 = dot(vec3(_479, _480, _481), vec3(cbLight._m0[_2184].xyz));
        float _4143 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2218 = dot(vec3(_479, _480, _481), vec3(_2211, _2212, _2213));
        float _4154 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2221 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2222 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2211, _2212, _2213));
        float _4165 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2226 = _2203 * _2203;
        float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
        float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2240 = 1.0 - _2203;
        float _2250 = (0.5 / (((_1879 * ((_2217 * _2240) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2240) + _2203) * _2217))) * _2217;
        float _4176 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2252 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
        float _2253 = isnan(1.0) ? _1728 : (isnan(_1728) ? 1.0 : min(_1728, 1.0));
        _2173 = (((_2239 * cbLight._m0[_2188].x) * _2252) * _2253) + _2063;
        _2175 = (((_2239 * cbLight._m0[_2188].y) * _2252) * _2253) + _2065;
        _2177 = (((_2239 * cbLight._m0[_2188].z) * _2252) * _2253) + _2067;
    }
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_1710.y == 0u)
    {
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2328;
        float _2330 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2328;
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2328;
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.x;
        uint _2355 = uint((float(_2343.y) * floor(float(uint(cbSceneParam._m0[85u].y * _580) / _2344))) + floor(float(uint(cbSceneParam._m0[85u].x * _579) / _2344)));
        float _2365 = (log2(_2331 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2366 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        uint _2369 = uint(isnan(14.0) ? _2366 : (isnan(_2366) ? 14.0 : min(_2366, 14.0)));
        uvec4 _2374 = texelFetch(g_lightClusterGridBuffer, int(((_2369 << 2u) + (_2355 << 6u)) >> 2u));
        uint _2375 = _2374.x;
        uint _2376 = _2343.z;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        if (((((1u << ((_2376 >> 4u) & 15u)) + 4294967295u) & _2375) == 0u) || ((_2376 & 240u) == 0u))
        {
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
            _2486 = 0.0;
        }
        else
        {
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2487;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            uint _2635 = 0u;
            uint _2644;
            bool _2645;
            for (;;)
            {
                _2644 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                _2645 = _2644 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2645)
                {
                    frontier_phi_66_pred = _2629;
                    frontier_phi_66_pred_1 = _2634;
                    frontier_phi_66_pred_2 = _2633;
                    frontier_phi_66_pred_3 = _2632;
                    frontier_phi_66_pred_4 = _2631;
                    frontier_phi_66_pred_5 = _2630;
                }
                else
                {
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    uint _2780;
                    _2774 = _2629;
                    _2775 = _2630;
                    _2776 = _2631;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2644;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    for (;;)
                    {
                        uint _2784 = uint(findLSB(_2780)) + (_2635 << 5u);
                        uint _2781 = (_2780 + 4294967295u) & _2780;
                        uint _2786 = _2784 * 48u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2806 = (_2784 * 48u) + 4u;
                        vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 3u)).x));
                        uint _2825 = (_2784 * 48u) + 8u;
                        vec3 _2836 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2825)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2825 + 2u)).x));
                        float _2840 = _2800.x - _2329;
                        float _2841 = _2800.y - _2330;
                        float _2842 = _2800.z - _2331;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_600, _603, _606), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2800.w);
                        float _4202 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2857 = sqrt(_2843) * _2819.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2864 = ((1.0 - _2861) * _2850) + _2861;
                        float _2867 = _2857 * _2857;
                        float _2871 = ((isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))) * _2856) / ((_2867 * 0.699999988079071044921875) + 1.0);
                        float _2875 = (-0.0) - _2329;
                        float _2876 = (-0.0) - _2330;
                        float _2877 = (-0.0) - _2331;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2892 = exp2(log2(1.0 / ((_2867 * 3.5) + 5.0)) * 0.25);
                        float _2893 = 1.0 - _660;
                        float _2900 = sqrt(1.0 - ((1.0 - (_2893 * _2893)) * (1.0 - (_2892 * _2892))));
                        float _2901 = _2900 * _2900;
                        float _2902 = _2901 * _2901;
                        float _2903 = _2882 + _2847;
                        float _2904 = _2883 + _2848;
                        float _2905 = _2884 + _2849;
                        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
                        float _2913 = dot(vec3(_600, _603, _606), vec3(_2882, _2883, _2884));
                        float _4218 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2917 = dot(vec3(_600, _603, _606), vec3(_2909 * _2903, _2909 * _2904, _2909 * _2905));
                        float _4229 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2920 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2924 = ((_2920 * _2920) * (_2902 + (-1.0))) + 1.0;
                        float _2925 = _2860 * _2901;
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2850) + _2926;
                        float _4240 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2931 = 1.0 - _2901;
                        float _2941 = (0.5 / (((_2930 * ((_2916 * _2931) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2930 * _2931) + _2901) * _2916))) * _2930;
                        float _4251 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2952 = (((_2902 * 3.1415927410125732421875) * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) / ((_2924 * _2924) * ((_2867 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2704 = (_2871 * _2819.x) + _2777;
                        _2705 = (_2871 * _2819.y) + _2778;
                        _2706 = (_2871 * _2819.z) + _2779;
                        _2701 = (_2952 * _2836.x) + _2774;
                        _2702 = (_2952 * _2836.y) + _2775;
                        _2703 = (_2952 * _2836.z) + _2776;
                        if (_2781 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2781;
                        }
                    }
                    frontier_phi_66_pred = _2701;
                    frontier_phi_66_pred_1 = _2706;
                    frontier_phi_66_pred_2 = _2705;
                    frontier_phi_66_pred_3 = _2704;
                    frontier_phi_66_pred_4 = _2703;
                    frontier_phi_66_pred_5 = _2702;
                }
                _2477 = frontier_phi_66_pred;
                _2487 = frontier_phi_66_pred_1;
                _2485 = frontier_phi_66_pred_2;
                _2483 = frontier_phi_66_pred_3;
                _2481 = frontier_phi_66_pred_4;
                _2479 = frontier_phi_66_pred_5;
                uint _2636 = _2635 + 1u;
                if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2629 = _2477;
                    _2630 = _2479;
                    _2631 = _2481;
                    _2632 = _2483;
                    _2633 = _2485;
                    _2634 = _2487;
                    _2635 = _2636;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
            _2486 = _2487;
        }
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.z;
        uint _2493 = (_2491 >> 8u) & 15u;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((4294967295u << _2493) & _2375) == 0u)
        {
            _2597 = _2476;
            _2599 = _2478;
            _2601 = _2480;
            _2603 = _2482;
            _2605 = _2484;
            _2607 = _2486;
        }
        else
        {
            float _2622 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
            float _2623 = _2622 * _2329;
            float _2624 = _2622 * _2330;
            float _2625 = _2622 * _2331;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2493 < ((_2491 >> 12u) & 15u))
            {
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2757 = _2476;
                float _2758 = _2478;
                float _2759 = _2480;
                float _2760 = _2482;
                float _2761 = _2484;
                float _2762 = _2486;
                uint _2763 = _2493;
                uint _2772;
                bool _2773;
                for (;;)
                {
                    _2772 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                    _2773 = _2772 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2773)
                    {
                        frontier_phi_77_pred = _2762;
                        frontier_phi_77_pred_1 = _2761;
                        frontier_phi_77_pred_2 = _2760;
                        frontier_phi_77_pred_3 = _2759;
                        frontier_phi_77_pred_4 = _2758;
                        frontier_phi_77_pred_5 = _2757;
                    }
                    else
                    {
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _2979 = _2757;
                        float _2980 = _2758;
                        float _2981 = _2759;
                        float _2982 = _2760;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        uint _2985 = _2772;
                        uint _2986;
                        vec4 _3011;
                        float _3012;
                        vec4 _3027;
                        vec3 _3039;
                        vec4 _3055;
                        vec4 _3070;
                        float _3116;
                        bool _3117;
                        for (;;)
                        {
                            uint _2996 = ((_2763 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2985));
                            _2986 = (_2985 + 4294967295u) & _2985;
                            uint _2998 = _2996 * 40u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3012 = _3011.w;
                            uint _3014 = (_2996 * 40u) + 4u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3029 = (_2996 * 40u) + 8u;
                            _3039 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x));
                            uint _3042 = (_2996 * 40u) + 16u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_2996 * 40u) + 20u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_2996 * 40u) + 24u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3091 = (_2996 * 40u) + 28u;
                            vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3116 = fma(_2331, _3104.z, fma(_2330, _3104.y, _3104.x * _2329)) + _3104.w;
                            _3117 = !((fma(_2331, _3085.z, fma(_2330, _3085.y, _3085.x * _2329)) + _3085.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3117)
                            {
                                float _3144 = _3011.x - _2329;
                                float _3145 = _3011.y - _2330;
                                float _3146 = _3011.z - _2331;
                                float _3147 = dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146));
                                float _3150 = inversesqrt(_3147);
                                float _3151 = _3150 * _3144;
                                float _3152 = _3150 * _3145;
                                float _3153 = _3150 * _3146;
                                float _3157 = 1.0 - (_3147 / (_3012 * _3012));
                                float _4262 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3158 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3162 = sqrt(_3147) * _3027.w;
                                float _3164 = 1.39999997615814208984375 / (_3162 + 1.39999997615814208984375);
                                float _3165 = _3164 * _3164;
                                float _3168 = ((1.0 - _3165) * dot(vec3(_3151, _3152, _3153), vec3(_600, _603, _606))) + _3165;
                                float _3171 = _3162 * _3162;
                                float _3175 = (fma(_2331, _3055.z, fma(_2330, _3055.y, _3055.x * _2329)) + _3055.w) / _3116;
                                float _3176 = (fma(_2331, _3070.z, fma(_2330, _3070.y, _3070.x * _2329)) + _3070.w) / _3116;
                                float _3180 = 1.0 - dot(vec2(_3175, _3176), vec2(_3175, _3176));
                                float _4278 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3182 = _3181 * (((isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))) * _3158) / ((_3171 * 0.699999988079071044921875) + 1.0));
                                float _3194 = exp2(log2(1.0 / ((_3171 * 3.5) + 5.0)) * 0.25);
                                float _3195 = 1.0 - _660;
                                float _3202 = sqrt(1.0 - ((1.0 - (_3195 * _3195)) * (1.0 - (_3194 * _3194))));
                                float _3203 = _3202 * _3202;
                                float _3204 = _3203 * _3203;
                                float _3205 = _3151 - _2623;
                                float _3206 = _3152 - _2624;
                                float _3207 = _3153 - _2625;
                                float _3211 = inversesqrt(dot(vec3(_3205, _3206, _3207), vec3(_3205, _3206, _3207)));
                                float _3215 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2623, (-0.0) - _2624, (-0.0) - _2625));
                                float _4289 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3219 = dot(vec3(_600, _603, _606), vec3(_3211 * _3205, _3211 * _3206, _3211 * _3207));
                                float _4300 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3226 = ((_3222 * _3222) * (_3204 + (-1.0))) + 1.0;
                                float _3227 = _3164 * _3203;
                                float _3228 = _3227 * _3227;
                                float _3234 = ((1.0 - _3228) * dot(vec3(_600, _603, _606), vec3(_3151, _3152, _3153))) + _3228;
                                float _4311 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3235 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3236 = 1.0 - _3203;
                                float _3246 = (0.5 / (((_3235 * ((_3218 * _3236) + _3203)) + 9.9999999392252902907785028219223e-09) + (((_3235 * _3236) + _3203) * _3218))) * _3235;
                                float _4322 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3256 = (_3181 * _3158) * (((_3204 * 3.1415927410125732421875) * (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0)))) / ((_3226 * _3226) * ((_3171 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3182 * _3027.y;
                                frontier_phi_83_pred_1 = _3182 * _3027.x;
                                frontier_phi_83_pred_2 = _3256 * _3039.z;
                                frontier_phi_83_pred_3 = _3256 * _3039.y;
                                frontier_phi_83_pred_4 = _3256 * _3039.x;
                                frontier_phi_83_pred_5 = _3182 * _3027.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_83_pred;
                            _3263 = frontier_phi_83_pred_1;
                            _3262 = frontier_phi_83_pred_2;
                            _3261 = frontier_phi_83_pred_3;
                            _3260 = frontier_phi_83_pred_4;
                            _3265 = frontier_phi_83_pred_5;
                            _2969 = _3263 + _2982;
                            _2970 = _3264 + _2983;
                            _2971 = _3265 + _2984;
                            _2966 = _3260 + _2979;
                            _2967 = _3261 + _2980;
                            _2968 = _3262 + _2981;
                            if (_2986 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2986;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2971;
                        frontier_phi_77_pred_1 = _2970;
                        frontier_phi_77_pred_2 = _2969;
                        frontier_phi_77_pred_3 = _2968;
                        frontier_phi_77_pred_4 = _2967;
                        frontier_phi_77_pred_5 = _2966;
                    }
                    _2608 = frontier_phi_77_pred;
                    _2606 = frontier_phi_77_pred_1;
                    _2604 = frontier_phi_77_pred_2;
                    _2602 = frontier_phi_77_pred_3;
                    _2600 = frontier_phi_77_pred_4;
                    _2598 = frontier_phi_77_pred_5;
                    uint _2764 = _2763 + 1u;
                    if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2757 = _2598;
                        _2758 = _2600;
                        _2759 = _2602;
                        _2760 = _2604;
                        _2761 = _2606;
                        _2762 = _2608;
                        _2763 = _2764;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2602;
                frontier_phi_58_59_ladder_1 = _2608;
                frontier_phi_58_59_ladder_2 = _2606;
                frontier_phi_58_59_ladder_3 = _2604;
                frontier_phi_58_59_ladder_4 = _2600;
                frontier_phi_58_59_ladder_5 = _2598;
            }
            else
            {
                frontier_phi_58_59_ladder = _2480;
                frontier_phi_58_59_ladder_1 = _2486;
                frontier_phi_58_59_ladder_2 = _2484;
                frontier_phi_58_59_ladder_3 = _2482;
                frontier_phi_58_59_ladder_4 = _2478;
                frontier_phi_58_59_ladder_5 = _2476;
            }
            _2597 = frontier_phi_58_59_ladder_5;
            _2599 = frontier_phi_58_59_ladder_4;
            _2601 = frontier_phi_58_59_ladder;
            _2603 = frontier_phi_58_59_ladder_3;
            _2605 = frontier_phi_58_59_ladder_2;
            _2607 = frontier_phi_58_59_ladder_1;
        }
        float _2612 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2388 = (_2612 * _2603) + _1843;
        _2390 = (_2612 * _2605) + _1845;
        _2392 = (_2612 * _2607) + _1847;
        _2394 = ((_2597 * 0.039999999105930328369140625) * _2612) + _2173;
        _2396 = ((_2599 * 0.039999999105930328369140625) * _2612) + _2175;
        _2398 = ((_2601 * 0.039999999105930328369140625) * _2612) + _2177;
    }
    else
    {
        _2388 = _1843;
        _2390 = _1845;
        _2392 = _1847;
        _2394 = _2173;
        _2396 = _2175;
        _2398 = _2177;
    }
    float _4338 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _4349 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4360 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2415 = ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2388 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _644))) + ((_2394 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2416 = ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2390 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _644))) + ((_2396 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2417 = ((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2392 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _644))) + ((_2398 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    uint _2418 = _226 + 6u;
    float _2426 = _579 / cbSceneParam._m0[86u].x;
    float _2427 = _580 / cbSceneParam._m0[86u].y;
    vec4 _2441 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2426, _2427, (log2((isnan(cbSceneParam._m0[77u].w) ? _500 : (isnan(_500) ? cbSceneParam._m0[77u].w : min(_500, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2443 = _2441.x;
    float _2444 = _2441.y;
    float _2445 = _2441.z;
    float _2446 = _2441.w;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_500 > cbSceneParam._m0[78u].w)
    {
        float _2501 = isnan(_500) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _500 : min(cbSceneParam._m0[80u].w, _500));
        float _2502 = _2501 / _500;
        float _2513 = _2502 * _551;
        float _2514 = _552 * _2502;
        float _2515 = (-0.0) - _2514;
        float _2517 = _2502 * _553;
        float _2519 = (cbSceneParam._m0[77u].w * _2515) / _2501;
        float _2520 = _2519 + cbSceneParam._m0[79u].w;
        float _2521 = cbSceneParam._m0[79u].w - _2514;
        float _2527 = sqrt(((_2513 * _2513) + (_2514 * _2514)) + (_2517 * _2517));
        float _2530 = (1.0 - (cbSceneParam._m0[77u].w / _2501)) * _2527;
        float _2535 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2537 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2714;
        if (abs((_2515 - _2519) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2714 = ((((_2520 > 0.0) ? exp2(_2535 * _2520) : (2.0 - exp2(_2537 * _2520))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2530;
        }
        else
        {
            float _2658 = 1.0 / cbSceneParam._m0[80u].x;
            float _2659 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : max(_2520, _2521));
            float _2660 = isnan(_2521) ? _2520 : (isnan(_2520) ? _2521 : min(_2520, _2521));
            float _2669 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : min(_2659, 0.0));
            float _2670 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : min(_2660, 0.0));
            _2714 = ((abs(_2527 / _2515) * cbSceneParam._m0[80u].y) * ((((_2669 - _2670) * 2.0) - ((exp2(_2535 * (isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0)))) - exp2(_2535 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))))) * _2658)) - ((exp2(_2537 * _2669) - exp2(_2537 * _2670)) * _2658))) + (_2530 * cbSceneParam._m0[80u].z);
        }
        vec4 _2716 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2426, _2427, 1.0), 0.0);
        float _2725 = exp2((_2714 * (-1.44269502162933349609375)) * (1.0 - _2716.w));
        float _2726 = log2(_2725);
        float _2742 = log2(_2446);
        _2539 = (exp2(_2742 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].x)) * _2716.x) / cbSceneParam._m0[78u].x)) + _2443;
        _2541 = (exp2(_2742 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].y)) * _2716.y) / cbSceneParam._m0[78u].y)) + _2444;
        _2543 = (exp2(_2742 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].z)) * _2716.z) / cbSceneParam._m0[78u].z)) + _2445;
        _2545 = _2725 * _2446;
    }
    else
    {
        _2539 = _2443;
        _2541 = _2444;
        _2543 = _2445;
        _2545 = _2446;
    }
    bool _2752;
    vec4 _2555;
    vec4 _2577;
    float _2579;
    float _2583;
    float _2584;
    float _2585;
    float _2586;
    bool _2596;
    for (;;)
    {
        _2555 = cbMatDynParam._m0[0u];
        float _2557 = roundEven(_2555.y);
        bool _2558 = _2557 == 3.0;
        float _2559 = log2(_2545);
        float _2566 = exp2(_2559 * cbSceneParam._m0[78u].x) * _2415;
        float _2567 = exp2(_2559 * cbSceneParam._m0[78u].y) * _2416;
        float _2568 = exp2(_2559 * cbSceneParam._m0[78u].z) * _2417;
        float _2575 = _567 + (-0.5);
        _2577 = cbMtdParam._m0[1u];
        _2579 = _2577.y * _2575;
        float _2582 = (_2557 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2583 = _2582 * (_2558 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2539)));
        _2584 = _2582 * (_2558 ? _2567 : (_2567 + (cbSceneParam._m0[72u].w * _2541)));
        _2585 = _2582 * (_2558 ? _2568 : (_2568 + (cbSceneParam._m0[72u].w * _2543)));
        _2586 = _2575 * 0.999000012874603271484375;
        _2596 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2596)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2586) < 0.5)
            {
                _2752 = true;
                break;
            }
        }
        uint _2693 = _619 + uint(_2555.w);
        if ((cbInstanceData._m0[_2693].w < 1.0) && ((cbInstanceData._m0[_2693].w + _2586) < 0.5))
        {
            _2752 = true;
            break;
        }
        if ((_2579 + 1.0) < _2577.x)
        {
            _2752 = true;
            break;
        }
        _2752 = false;
        break;
    }
    float _2957;
    if (_2752)
    {
        discard_state = true;
        _2957 = 0.0;
    }
    else
    {
        _2957 = cbInstanceData._m0[_2418].w;
    }
    SV_Target.x = _2583;
    SV_Target.y = _2584;
    SV_Target.z = _2585;
    SV_Target.w = _2957;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2418].w;
    discard_exit();
}


