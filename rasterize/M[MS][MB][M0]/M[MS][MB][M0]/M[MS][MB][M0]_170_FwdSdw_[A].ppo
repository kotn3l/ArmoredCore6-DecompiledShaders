#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1185;
float _3829;
float _3830;
float _3831;
float _3832;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _351 = _349.x;
    float _361 = dot(vec4(_351, _349.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_351 - _361) * cbMtdParam._m0[24u].x) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3841 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _386 = (_379 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _387 = (_379 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _388 = (_379 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _437 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _451 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_427 - _437) * cbMtdParam._m0[24u].x) + _437) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3852 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _459 = (_452 * ((_405.x * cbMtdParam._m0[13u].x) - _386)) + _386;
    float _460 = (_452 * ((_405.y * cbMtdParam._m0[13u].y) - _387)) + _387;
    float _461 = (_452 * ((_405.z * cbMtdParam._m0[13u].z) - _388)) + _388;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = _513.x;
    float _516 = _513.y;
    float _517 = _513.z;
    float _524 = ((_496.x - _515) * _379) + _515;
    float _525 = ((_496.y - _516) * _379) + _516;
    float _526 = ((_496.z - _517) * _379) + _517;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _551 = ((_538.z - _526) * _452) + _526;
    float _554 = ((((_538.x - _524) * _452) + _524) * 2.0) + (-1.0);
    float _555 = ((((_538.y - _525) * _452) + _525) * 2.0) + (-1.0);
    float _556 = dot(vec2(_554, _555), vec2(_554, _555));
    float _3863 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _561 = sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))));
    vec4 _581 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _593 = (_554 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_473.x * 2.0) + (-1.0)))) + (((_581.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _594 = (_555 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_473.y * 2.0) + (-1.0)))) + (((_581.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _599 = (((_473.z - _551) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _551;
    float _603 = ((_581.z - _599) * cbMtdParam._m0[19u].w) + _599;
    float _608 = cbMtdParam._m0[22u].x + _581.w;
    float _611 = fma(_561, _229 * NORMAL.x, fma(_594, _236 * TANGENT.x, (_222 * _214) * _593));
    float _614 = fma(_561, _229 * NORMAL.y, fma(_594, _236 * TANGENT.y, (_222 * _215) * _593));
    float _617 = fma(_561, _229 * NORMAL.z, fma(_594, _236 * TANGENT.z, (_222 * _216) * _593));
    float _621 = inversesqrt(dot(vec3(_611, _614, _617), vec3(_611, _614, _617)));
    float _622 = _621 * _611;
    float _623 = _621 * _614;
    float _624 = _621 * _617;
    float _3874 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _625 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3896 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3907 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3918 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _643 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _695 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _685);
    float _696 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _685);
    float _697 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _685);
    float _701 = inversesqrt(dot(vec3(_695, _696, _697), vec3(_695, _696, _697)));
    float _702 = _695 * _701;
    float _703 = _696 * _701;
    float _704 = _697 * _701;
    vec4 _709 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _711 = _709.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _865 = sqrt(((_695 * _695) + (_696 * _696)) + (_697 * _697));
        float _871 = (cbMatDynParam._m0[5u].x * _865) + cbMatDynParam._m0[5u].y;
        float _3929 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _876 = (cbMatDynParam._m0[5u].z * _865) + cbMatDynParam._m0[5u].w;
        float _3940 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) - _872)) + _872) < ((_711 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _741 = fma(_624, cbSceneParam._m0[5u].z, fma(_623, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _622));
    float _744 = fma(_624, cbSceneParam._m0[6u].z, fma(_623, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _622));
    float _747 = fma(_624, cbSceneParam._m0[7u].z, fma(_623, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _622));
    uint _760 = _242 + 9u;
    uint _761 = _760 + uint(cbMatDynParam._m0[0u].w);
    float _767 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_761].x;
    float _768 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_761].y;
    float _769 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_761].z;
    float _3951 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    vec4 _781 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _785 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * TEXCOORD_5.w) * _781.x;
    float _786 = dot(vec3(_622, _623, _624), vec3(_702, _703, _704));
    float _789 = _786 * 2.0;
    float _793 = (_789 * _622) - _702;
    float _794 = (_789 * _623) - _703;
    float _795 = (_789 * _624) - _704;
    float _799 = abs(dot(vec3(_702, _703, _704), vec3(_622, _623, _624)));
    float _3984 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _801 = sqrt(_625);
    float _814 = exp2((_801 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_801 * 3.0));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1184;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _909 = fma(_854, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846));
        float _913 = fma(_854, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846));
        float _917 = fma(_854, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846));
        float _942 = _846 + _622;
        float _943 = _850 + _623;
        float _944 = _854 + _624;
        float _954 = fma(_944, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942)) - _909;
        float _955 = fma(_944, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942)) - _913;
        float _956 = fma(_944, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942)) - _917;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_909 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_913 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[34u].z) + ((((((_917 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1012 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_978.x + (-0.5));
        float _1014 = _1012 * (_978.y + (-0.5));
        float _1015 = _1012 * (_978.z + (-0.5));
        float _1022 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_985.x + (-0.5));
        float _1024 = _1022 * (_985.y + (-0.5));
        float _1025 = _1022 * (_985.z + (-0.5));
        float _1032 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_992.x + (-0.5));
        float _1034 = _1032 * (_992.y + (-0.5));
        float _1035 = _1032 * (_992.z + (-0.5));
        float _1042 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_999.x + (-0.5));
        float _1044 = _1042 * (_999.y + (-0.5));
        float _1045 = _1042 * (_999.z + (-0.5));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = _1013 * 0.5;
        float _1050 = _1023 * 0.5;
        float _1051 = _1033 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1066 = (dot(vec3(_622, _623, _624), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _4010 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1076 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _4021 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _4032 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_1078 + 1.0))) + _1083) * _1046;
        float _1093 = _1014 * 0.5;
        float _1094 = _1024 * 0.5;
        float _1095 = _1034 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(_622, _623, _624), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _4043 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4054 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _4065 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1120 + 1.0))) + _1125) * _1047;
        float _1135 = _1015 * 0.5;
        float _1136 = _1025 * 0.5;
        float _1137 = _1035 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(_622, _623, _624), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _4076 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _4087 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _4098 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_1162 + 1.0))) + _1167) * _1048;
        _1184 = _1015;
        _1186 = _1014;
        _1187 = _1013;
        _1188 = _1025;
        _1189 = _1024;
        _1190 = _1023;
        _1191 = _1035;
        _1192 = _1034;
        _1193 = _1033;
        _1194 = _1048;
        _1195 = _1047;
        _1196 = _1046;
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
    }
    else
    {
        _1184 = _1185;
        _1186 = _1185;
        _1187 = _1185;
        _1188 = _1185;
        _1189 = _1185;
        _1190 = _1185;
        _1191 = _1185;
        _1192 = _1185;
        _1193 = _1185;
        _1194 = _1185;
        _1195 = _1185;
        _1196 = _1185;
        _1197 = 0.0;
        _1198 = 0.0;
        _1199 = 0.0;
    }
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1226 = fma(_854, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _846));
        float _1230 = fma(_854, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _846));
        float _1234 = fma(_854, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _846));
        float _1257 = _846 + _622;
        float _1258 = _850 + _623;
        float _1259 = _854 + _624;
        float _1269 = fma(_1259, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1257)) - _1226;
        float _1270 = fma(_1259, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1257)) - _1230;
        float _1271 = fma(_1259, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1257)) - _1234;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1226 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1230 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[35u].z) + ((((((_1234 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1325 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1292.x + (-0.5));
        float _1327 = _1325 * (_1292.y + (-0.5));
        float _1328 = _1325 * (_1292.z + (-0.5));
        float _1335 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1299.x + (-0.5));
        float _1337 = _1335 * (_1299.y + (-0.5));
        float _1338 = _1335 * (_1299.z + (-0.5));
        float _1345 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1306.x + (-0.5));
        float _1347 = _1345 * (_1306.y + (-0.5));
        float _1348 = _1345 * (_1306.z + (-0.5));
        float _1355 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1313.x + (-0.5));
        float _1357 = _1355 * (_1313.y + (-0.5));
        float _1358 = _1355 * (_1313.z + (-0.5));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = _1326 * 0.5;
        float _1363 = _1336 * 0.5;
        float _1364 = _1346 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_622, _623, _624), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4161 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1389 + 1.0))) + _1394) * _1359;
        float _1404 = _1327 * 0.5;
        float _1405 = _1337 * 0.5;
        float _1406 = _1347 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_622, _623, _624), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4194 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1431 + 1.0))) + _1436) * _1360;
        float _1446 = _1328 * 0.5;
        float _1447 = _1338 * 0.5;
        float _1448 = _1348 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_622, _623, _624), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4227 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1473 + 1.0))) + _1478) * _1361;
        _1495 = _1328;
        _1496 = _1327;
        _1497 = _1326;
        _1498 = _1338;
        _1499 = _1337;
        _1500 = _1336;
        _1501 = _1348;
        _1502 = _1347;
        _1503 = _1346;
        _1504 = _1361;
        _1505 = _1360;
        _1506 = _1359;
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1185;
        _1496 = _1185;
        _1497 = _1185;
        _1498 = _1185;
        _1499 = _1185;
        _1500 = _1185;
        _1501 = _1185;
        _1502 = _1185;
        _1503 = _1185;
        _1504 = _1185;
        _1505 = _1185;
        _1506 = _1185;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1197)) + _1197;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1198)) + _1198;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1199)) + _1199;
    float _1542 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1519));
    float _1563 = _793 * 0.5;
    float _1564 = _794 * 0.5;
    float _1565 = _795 * 0.5;
    float _1566 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1569 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1572 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1606;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1579 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1184, _1188, _1191, _1194));
        float _1583 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1587 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1594 = dot(vec4(cbModelParam._m0[39u]), vec4(_1563, _1564, _1565, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1617;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1608 = dot(vec4(cbModelParam._m0[40u]), vec4(_1563, _1564, _1565, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1621 = (_1617 * cbModelParam._m0[1u].x) + (_1606 * (1.0 - cbModelParam._m0[1u].x));
    float _1631 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _625);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1631 : min(cbModelParam._m0[25u].z, _1631));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1681 = fma(_854, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _846)) + cbModelParam._m0[13u].w;
        float _1685 = fma(_854, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _846)) + cbModelParam._m0[14u].w;
        float _1689 = fma(_854, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _846)) + cbModelParam._m0[15u].w;
        float _1692 = fma(_795, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793));
        float _1695 = fma(_795, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793));
        float _1698 = fma(_795, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793));
        float _1726;
        if (_1692 > 0.0)
        {
            _1726 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1726 = frontier_phi_17_15_ladder;
        }
        float _1897;
        if (_1695 > 0.0)
        {
            _1897 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1897 = frontier_phi_26_22_ladder;
        }
        float _2192;
        if (_1698 > 0.0)
        {
            _2192 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2192 = frontier_phi_38_33_ladder;
        }
        float _2194 = isnan(_1897) ? _1726 : (isnan(_1726) ? _1897 : min(_1726, _1897));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1692) + _1681;
        float _2200 = (_2195 * _1695) + _1685;
        float _2201 = (_2195 * _1698) + _1689;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2202;
        float _2206 = _2202 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 > _2206) || ((_2200 < _2204) || ((_2199 < _2204) || (_2199 > _2206))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2201, cbModelParam._m0[9u].z, fma(_2200, cbModelParam._m0[9u].y, _2199 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2201, cbModelParam._m0[10u].z, fma(_2200, cbModelParam._m0[10u].y, _2199 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2201, cbModelParam._m0[11u].z, fma(_2200, cbModelParam._m0[11u].y, _2199 * cbModelParam._m0[11u].x))), _1632);
            frontier_phi_16_38_ladder = _2346.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2346.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2346.x * cbModelParam._m0[1u].y;
        }
        _1714 = frontier_phi_16_38_ladder_2;
        _1716 = frontier_phi_16_38_ladder_1;
        _1718 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_793, _794, _795), _1632);
        _1714 = _1702.x * cbModelParam._m0[1u].y;
        _1716 = _1702.y * cbModelParam._m0[1u].y;
        _1718 = _1702.z * cbModelParam._m0[1u].y;
    }
    float _1722 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _625);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1722 : min(cbModelParam._m0[25u].w, _1722));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1778 = fma(_854, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _846)) + cbModelParam._m0[21u].w;
        float _1782 = fma(_854, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _846)) + cbModelParam._m0[22u].w;
        float _1786 = fma(_854, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _846)) + cbModelParam._m0[23u].w;
        float _1789 = fma(_795, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793));
        float _1792 = fma(_795, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793));
        float _1795 = fma(_795, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793));
        float _1902;
        if (_1789 > 0.0)
        {
            _1902 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1902 = frontier_phi_28_24_ladder;
        }
        float _2219;
        if (_1792 > 0.0)
        {
            _2219 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2219 = frontier_phi_40_35_ladder;
        }
        float _2546;
        if (_1795 > 0.0)
        {
            _2546 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2546 = frontier_phi_50_47_ladder;
        }
        float _2548 = isnan(_2219) ? _1902 : (isnan(_1902) ? _2219 : min(_1902, _2219));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1789) + _1778;
        float _2554 = (_2549 * _1792) + _1782;
        float _2555 = (_2549 * _1795) + _1786;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1723);
            frontier_phi_25_50_ladder = _2673.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2673.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2673.x * cbModelParam._m0[1u].z;
        }
        _1814 = frontier_phi_25_50_ladder_2;
        _1816 = frontier_phi_25_50_ladder_1;
        _1818 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_793, _794, _795), _1723);
        _1814 = _1798.x * cbModelParam._m0[1u].z;
        _1816 = _1798.y * cbModelParam._m0[1u].z;
        _1818 = _1798.z * cbModelParam._m0[1u].z;
    }
    float _1830 = ((((1.0 - _814) * ((_801 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_814 * _801)) * _785;
    float _1831 = _1830 * ((cbModelParam._m0[1u].w * (_1814 - _1714)) + _1714);
    float _1832 = _1830 * ((cbModelParam._m0[1u].w * (_1816 - _1716)) + _1716);
    float _1833 = _1830 * ((cbModelParam._m0[1u].w * (_1818 - _1718)) + _1718);
    float _1836 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, _1831 * cbSceneParam._m0[91u].x));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1889 = _1876 / _1888;
    float _1890 = _1880 / _1888;
    float _1891 = _1884 / _1888;
    float _2038;
    float _2039;
    float _2040;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1918 = ((uint(_1891 > cbSceneParam._m0[59u].y) + uint(_1891 > cbSceneParam._m0[59u].x)) + uint(_1891 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1919 = _1918 + 43u;
        uint _1927 = _1918 + 44u;
        uint _1935 = _1918 + 45u;
        uint _1943 = _1918 + 46u;
        float _1954 = fma(_1888, cbSceneParam._m0[_1919].w, fma(_1884, cbSceneParam._m0[_1919].z, fma(_1880, cbSceneParam._m0[_1919].y, _1876 * cbSceneParam._m0[_1919].x)));
        float _1958 = fma(_1888, cbSceneParam._m0[_1927].w, fma(_1884, cbSceneParam._m0[_1927].z, fma(_1880, cbSceneParam._m0[_1927].y, _1876 * cbSceneParam._m0[_1927].x)));
        float _1966 = fma(_1888, cbSceneParam._m0[_1943].w, fma(_1884, cbSceneParam._m0[_1943].z, fma(_1880, cbSceneParam._m0[_1943].y, _1876 * cbSceneParam._m0[_1943].x)));
        float _1971 = cbSceneParam._m0[33u].z * _1966;
        float _1973 = cbSceneParam._m0[33u].w * _1966;
        float _1976 = fma(_1888, cbSceneParam._m0[_1935].w, fma(_1884, cbSceneParam._m0[_1935].z, fma(_1880, cbSceneParam._m0[_1935].y, _1876 * cbSceneParam._m0[_1935].x))) / _1966;
        float _2024 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
        float _4353 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2031 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1954) / _1966, (_1973 + _1958) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 + _1954) / _1966, (_1958 - _1971) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1971) / _1966, (_1958 - _1973) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1973) / _1966, (_1971 + _1958) / _1966), _1976), 0.0)).x), vec4(0.25)));
        _2038 = 1.0 - (_2031 * cbSceneParam._m0[34u].x);
        _2039 = 1.0 - (_2031 * cbSceneParam._m0[34u].y);
        _2040 = 1.0 - (_2031 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2038 = 1.0;
        _2039 = 1.0;
        _2040 = 1.0;
    }
    float _2104;
    float _2106;
    float _2108;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2092 = fma(_1888, cbSceneParam._m0[63u].w, fma(_1884, cbSceneParam._m0[63u].z, fma(_1880, cbSceneParam._m0[63u].y, _1876 * cbSceneParam._m0[63u].x)));
        float _2093 = fma(_1888, cbSceneParam._m0[60u].w, fma(_1884, cbSceneParam._m0[60u].z, fma(_1880, cbSceneParam._m0[60u].y, _1876 * cbSceneParam._m0[60u].x))) / _2092;
        float _2094 = fma(_1888, cbSceneParam._m0[61u].w, fma(_1884, cbSceneParam._m0[61u].z, fma(_1880, cbSceneParam._m0[61u].y, _1876 * cbSceneParam._m0[61u].x))) / _2092;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2093 >= cbSceneParam._m0[64u].x) && (_2094 >= cbSceneParam._m0[64u].y)) && (_2093 <= cbSceneParam._m0[64u].z)) && (_2094 <= cbSceneParam._m0[64u].w))
        {
            float _2232 = fma(_1888, cbSceneParam._m0[62u].w, fma(_1884, cbSceneParam._m0[62u].z, fma(_1880, cbSceneParam._m0[62u].y, _1876 * cbSceneParam._m0[62u].x))) / _2092;
            float _2236 = isnan(cbSceneParam._m0[41u].w) ? _2232 : (isnan(_2232) ? cbSceneParam._m0[41u].w : max(_2232, cbSceneParam._m0[41u].w));
            float _2279 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
            float _4369 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
            float _2286 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2093, cbSceneParam._m0[33u].w + _2094), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2093, _2094 - cbSceneParam._m0[33u].z), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].z, _2094 - cbSceneParam._m0[33u].w), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2094), _2236), 0.0)).x), vec4(0.25)));
            float _2290 = 1.0 - (_2286 * cbSceneParam._m0[34u].x);
            float _2291 = 1.0 - (_2286 * cbSceneParam._m0[34u].y);
            float _2292 = 1.0 - (_2286 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2292) ? _2040 : (isnan(_2040) ? _2292 : min(_2040, _2292));
            frontier_phi_37_36_ladder_1 = isnan(_2291) ? _2039 : (isnan(_2039) ? _2291 : min(_2039, _2291));
            frontier_phi_37_36_ladder_2 = isnan(_2290) ? _2038 : (isnan(_2038) ? _2290 : min(_2038, _2290));
        }
        else
        {
            frontier_phi_37_36_ladder = _2040;
            frontier_phi_37_36_ladder_1 = _2039;
            frontier_phi_37_36_ladder_2 = _2038;
        }
        _2104 = frontier_phi_37_36_ladder_2;
        _2106 = frontier_phi_37_36_ladder_1;
        _2108 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2104 = _2038;
        _2106 = _2039;
        _2108 = _2040;
    }
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _785 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2151 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2155 = _2115 | 1u;
    float _2166 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_622, _623, _624));
    float _2169 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_622, _623, _624));
    float _4405 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _4416 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2174 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2176 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * 0.3183098733425140380859375;
    float _2183 = ((cbLight._m0[_2132].x * _2138) * _2176) + (((cbLight._m0[_2142].x * _2104) * _2151) * _2174);
    float _2184 = ((_2138 * cbLight._m0[_2132].y) * _2176) + (((cbLight._m0[_2142].y * _2106) * _2151) * _2174);
    float _2185 = ((_2138 * cbLight._m0[_2132].z) * _2176) + (((cbLight._m0[_2142].z * _2108) * _2151) * _2174);
    uvec4 _2189 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2191 = _2189.x == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2191)
    {
        _2293 = _2183;
        _2295 = _2184;
        _2297 = _2185;
    }
    else
    {
        uint _2301 = _2115 + 6u;
        float _2317 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_622, _623, _624)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4427 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2320 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2293 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2183;
        _2295 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2184;
        _2297 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2185;
    }
    bool _2300 = _2189.y == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2300)
    {
        _2355 = _2293;
        _2357 = _2295;
        _2359 = _2297;
    }
    else
    {
        uint _2517 = _2115 + 7u;
        float _2533 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_622, _623, _624)) * 0.5) + 0.5;
        float _2534 = _2533 * _2533;
        float _4443 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2535 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2536 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2355 = (((cbLight._m0[_2517].x * 0.3183098733425140380859375) * _2535) * _2536) + _2293;
        _2357 = (((cbLight._m0[_2517].y * 0.3183098733425140380859375) * _2535) * _2536) + _2295;
        _2359 = (((cbLight._m0[_2517].z * 0.3183098733425140380859375) * _2535) * _2536) + _2297;
    }
    uint _2362 = _2115 + 8u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _625) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2115].x + _702;
    float _2378 = cbLight._m0[_2115].y + _703;
    float _2379 = cbLight._m0[_2115].z + _704;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2115].xyz));
    float _4459 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _4470 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2391 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2392 = dot(vec3(_622, _623, _624), vec3(_2384, _2385, _2386));
    float _4481 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2384, _2385, _2386));
    float _4492 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2376 * _2376;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2416 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2391 * ((_2390 * _2416) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2416) + _2376) * _2390))) * _2390;
    float _4503 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    uint _2443 = _2115 + 9u;
    float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _625) * 0.949999988079071044921875);
    float _2455 = _2454 * _2454;
    float _2456 = cbLight._m0[_2155].x + _702;
    float _2457 = cbLight._m0[_2155].y + _703;
    float _2458 = cbLight._m0[_2155].z + _704;
    float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
    float _2463 = _2462 * _2456;
    float _2464 = _2462 * _2457;
    float _2465 = _2462 * _2458;
    float _2466 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2155].xyz));
    float _4514 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2470 = dot(vec3(_622, _623, _624), vec3(_2463, _2464, _2465));
    float _4525 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2463, _2464, _2465));
    float _4536 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2455 * _2455;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2491 = (exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2492 = 1.0 - _2455;
    float _2502 = (0.5 / (((_2391 * ((_2469 * _2492) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2492) + _2455) * _2469))) * _2469;
    float _4547 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    float _2514 = (((_2491 * cbLight._m0[_2443].x) * _2504) * _2138) + ((((cbLight._m0[_2362].x * _2104) * _2415) * _2429) * _2151);
    float _2515 = (((_2491 * cbLight._m0[_2443].y) * _2504) * _2138) + ((((cbLight._m0[_2362].y * _2106) * _2415) * _2429) * _2151);
    float _2516 = (((_2491 * cbLight._m0[_2443].z) * _2504) * _2138) + ((((cbLight._m0[_2362].z * _2108) * _2415) * _2429) * _2151);
    float _2572;
    float _2574;
    float _2576;
    if (_2191)
    {
        _2572 = _2514;
        _2574 = _2515;
        _2576 = _2516;
    }
    else
    {
        uint _2578 = _2115 + 2u;
        uint _2582 = _2115 + 10u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _625) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _702;
        float _2599 = cbLight._m0[_2578].y + _703;
        float _2600 = cbLight._m0[_2578].z + _704;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2578].xyz));
        float _4558 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2612 = dot(vec3(_622, _623, _624), vec3(_2605, _2606, _2607));
        float _4569 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4580 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2633 = (exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2634 = 1.0 - _2597;
        float _2644 = (0.5 / (((_2391 * ((_2611 * _2634) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2634) + _2597) * _2611))) * _2611;
        float _4591 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2572 = (((_2633 * cbLight._m0[_2582].x) * _2646) * _2647) + _2514;
        _2574 = (((_2633 * cbLight._m0[_2582].y) * _2646) * _2647) + _2515;
        _2576 = (((_2633 * cbLight._m0[_2582].z) * _2646) * _2647) + _2516;
    }
    float _2678;
    float _2680;
    float _2682;
    if (_2300)
    {
        _2678 = _2572;
        _2680 = _2574;
        _2682 = _2576;
    }
    else
    {
        uint _2689 = _2115 + 3u;
        uint _2693 = _2115 + 11u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _625) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _702;
        float _2710 = cbLight._m0[_2689].y + _703;
        float _2711 = cbLight._m0[_2689].z + _704;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_622, _623, _624), vec3(cbLight._m0[_2689].xyz));
        float _4607 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2723 = dot(vec3(_622, _623, _624), vec3(_2716, _2717, _2718));
        float _4618 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4629 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2744 = (exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2745 = 1.0 - _2708;
        float _2755 = (0.5 / (((_2391 * ((_2722 * _2745) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2391 * _2745) + _2708) * _2722))) * _2722;
        float _4640 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2757 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2758 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2678 = (((_2744 * cbLight._m0[_2693].x) * _2757) * _2758) + _2572;
        _2680 = (((_2744 * cbLight._m0[_2693].y) * _2757) * _2758) + _2574;
        _2682 = (((_2744 * cbLight._m0[_2693].z) * _2757) * _2758) + _2576;
    }
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    float _2834;
    if (_2113.y == 0u)
    {
        uvec4 _2779 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2780 = _2779.x;
        uint _2791 = uint((float(_2779.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _2780))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _2780)));
        float _2801 = (log2(_1891 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2802 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        uint _2805 = uint(isnan(14.0) ? _2802 : (isnan(_2802) ? 14.0 : min(_2802, 14.0)));
        uvec4 _2810 = texelFetch(g_lightClusterGridBuffer, int(((_2805 << 2u) + (_2791 << 6u)) >> 2u));
        uint _2811 = _2810.x;
        uint _2812 = _2779.z;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        if (((((1u << ((_2812 >> 4u) & 15u)) + 4294967295u) & _2811) == 0u) || ((_2812 & 240u) == 0u))
        {
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
            _2901 = 0.0;
        }
        else
        {
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _2902;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            uint _3050 = 0u;
            uint _3059;
            bool _3060;
            for (;;)
            {
                _3059 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3050 << 2u)) >> 2u)).x;
                _3060 = _3059 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3060)
                {
                    frontier_phi_71_pred = _3049;
                    frontier_phi_71_pred_1 = _3048;
                    frontier_phi_71_pred_2 = _3047;
                    frontier_phi_71_pred_3 = _3046;
                    frontier_phi_71_pred_4 = _3045;
                    frontier_phi_71_pred_5 = _3044;
                }
                else
                {
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    uint _3195;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3048;
                    _3194 = _3049;
                    _3195 = _3059;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    for (;;)
                    {
                        uint _3199 = uint(findLSB(_3195)) + (_3050 << 5u);
                        uint _3196 = (_3195 + 4294967295u) & _3195;
                        uint _3201 = _3199 * 48u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3221 = (_3199 * 48u) + 4u;
                        vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 3u)).x));
                        uint _3240 = (_3199 * 48u) + 8u;
                        vec3 _3251 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x));
                        float _3255 = _3215.x - _1889;
                        float _3256 = _3215.y - _1890;
                        float _3257 = _3215.z - _1891;
                        float _3258 = dot(vec3(_3255, _3256, _3257), vec3(_3255, _3256, _3257));
                        float _3261 = inversesqrt(_3258);
                        float _3262 = _3261 * _3255;
                        float _3263 = _3261 * _3256;
                        float _3264 = _3261 * _3257;
                        float _3265 = dot(vec3(_741, _744, _747), vec3(_3262, _3263, _3264));
                        float _3270 = 1.0 - (_3258 * _3215.w);
                        float _4666 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3271 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3272 = sqrt(_3258) * _3234.w;
                        float _3275 = 1.39999997615814208984375 / (_3272 + 1.39999997615814208984375);
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3265) + _3276;
                        float _3282 = _3272 * _3272;
                        float _3286 = ((isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))) * _3271) / ((_3282 * 0.699999988079071044921875) + 1.0);
                        float _3290 = (-0.0) - _1889;
                        float _3291 = (-0.0) - _1890;
                        float _3292 = (-0.0) - _1891;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3306 = exp2(log2(1.0 / ((_3282 * 3.5) + 5.0)) * 0.25);
                        float _3307 = 1.0 - _801;
                        float _3314 = sqrt(1.0 - ((1.0 - (_3307 * _3307)) * (1.0 - (_3306 * _3306))));
                        float _3315 = _3314 * _3314;
                        float _3316 = _3315 * _3315;
                        float _3317 = _3297 + _3262;
                        float _3318 = _3298 + _3263;
                        float _3319 = _3299 + _3264;
                        float _3323 = inversesqrt(dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319)));
                        float _3327 = dot(vec3(_741, _744, _747), vec3(_3297, _3298, _3299));
                        float _4682 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3330 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3331 = dot(vec3(_741, _744, _747), vec3(_3323 * _3317, _3323 * _3318, _3323 * _3319));
                        float _4693 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3338 = ((_3334 * _3334) * (_3316 + (-1.0))) + 1.0;
                        float _3339 = _3275 * _3315;
                        float _3340 = _3339 * _3339;
                        float _3343 = ((1.0 - _3340) * _3265) + _3340;
                        float _4704 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                        float _3345 = 1.0 - _3315;
                        float _3355 = (0.5 / (((_3344 * ((_3330 * _3345) + _3315)) + 9.9999999392252902907785028219223e-09) + (((_3344 * _3345) + _3315) * _3330))) * _3344;
                        float _4715 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3366 = (((_3316 * 3.1415927410125732421875) * (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) / ((_3338 * _3338) * ((_3282 * 2.1991131305694580078125) + 3.141590118408203125))) * _3271;
                        _3119 = (_3286 * _3234.x) + _3192;
                        _3120 = (_3286 * _3234.y) + _3193;
                        _3121 = (_3286 * _3234.z) + _3194;
                        _3116 = (_3366 * _3251.x) + _3189;
                        _3117 = (_3366 * _3251.y) + _3190;
                        _3118 = (_3366 * _3251.z) + _3191;
                        if (_3196 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3120;
                            _3194 = _3121;
                            _3195 = _3196;
                        }
                    }
                    frontier_phi_71_pred = _3121;
                    frontier_phi_71_pred_1 = _3120;
                    frontier_phi_71_pred_2 = _3119;
                    frontier_phi_71_pred_3 = _3118;
                    frontier_phi_71_pred_4 = _3117;
                    frontier_phi_71_pred_5 = _3116;
                }
                _2902 = frontier_phi_71_pred;
                _2900 = frontier_phi_71_pred_1;
                _2898 = frontier_phi_71_pred_2;
                _2896 = frontier_phi_71_pred_3;
                _2894 = frontier_phi_71_pred_4;
                _2892 = frontier_phi_71_pred_5;
                uint _3051 = _3050 + 1u;
                if (_3051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3044 = _2892;
                    _3045 = _2894;
                    _3046 = _2896;
                    _3047 = _2898;
                    _3048 = _2900;
                    _3049 = _2902;
                    _3050 = _3051;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
            _2901 = _2902;
        }
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.z;
        uint _2908 = (_2906 >> 8u) & 15u;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((4294967295u << _2908) & _2811) == 0u)
        {
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
            _3022 = _2901;
        }
        else
        {
            float _3037 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
            float _3038 = _3037 * _1889;
            float _3039 = _3037 * _1890;
            float _3040 = _3037 * _1891;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2908 < ((_2906 >> 12u) & 15u))
            {
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3023;
                float _3172 = _2891;
                float _3173 = _2893;
                float _3174 = _2895;
                float _3175 = _2897;
                float _3176 = _2899;
                float _3177 = _2901;
                uint _3178 = _2908;
                uint _3187;
                bool _3188;
                for (;;)
                {
                    _3187 = texelFetch(g_lightClassification, int((((_2805 << 5u) + (_2791 << 9u)) + (_3178 << 2u)) >> 2u)).x;
                    _3188 = _3187 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3188)
                    {
                        frontier_phi_82_pred = _3177;
                        frontier_phi_82_pred_1 = _3176;
                        frontier_phi_82_pred_2 = _3175;
                        frontier_phi_82_pred_3 = _3174;
                        frontier_phi_82_pred_4 = _3173;
                        frontier_phi_82_pred_5 = _3172;
                    }
                    else
                    {
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3678;
                        float _3393 = _3172;
                        float _3394 = _3173;
                        float _3395 = _3174;
                        float _3396 = _3175;
                        float _3397 = _3176;
                        float _3398 = _3177;
                        uint _3399 = _3187;
                        uint _3400;
                        vec4 _3425;
                        float _3426;
                        vec4 _3441;
                        vec3 _3453;
                        vec4 _3468;
                        vec4 _3483;
                        float _3529;
                        bool _3530;
                        for (;;)
                        {
                            uint _3410 = ((_3178 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3399));
                            _3400 = (_3399 + 4294967295u) & _3399;
                            uint _3412 = _3410 * 40u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3426 = _3425.w;
                            uint _3428 = (_3410 * 40u) + 4u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3410 * 40u) + 8u;
                            _3453 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x));
                            uint _3455 = (_3410 * 40u) + 16u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3410 * 40u) + 20u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3485 = (_3410 * 40u) + 24u;
                            vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3485)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3485 + 3u)).x));
                            uint _3504 = (_3410 * 40u) + 28u;
                            vec4 _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3529 = fma(_1891, _3517.z, fma(_1890, _3517.y, _3517.x * _1889)) + _3517.w;
                            _3530 = !((fma(_1891, _3498.z, fma(_1890, _3498.y, _3498.x * _1889)) + _3498.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3530)
                            {
                                float _3557 = _3425.x - _1889;
                                float _3558 = _3425.y - _1890;
                                float _3559 = _3425.z - _1891;
                                float _3560 = dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559));
                                float _3563 = inversesqrt(_3560);
                                float _3564 = _3563 * _3557;
                                float _3565 = _3563 * _3558;
                                float _3566 = _3563 * _3559;
                                float _3570 = 1.0 - (_3560 / (_3426 * _3426));
                                float _4726 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3571 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3575 = sqrt(_3560) * _3441.w;
                                float _3577 = 1.39999997615814208984375 / (_3575 + 1.39999997615814208984375);
                                float _3578 = _3577 * _3577;
                                float _3581 = ((1.0 - _3578) * dot(vec3(_3564, _3565, _3566), vec3(_741, _744, _747))) + _3578;
                                float _3584 = _3575 * _3575;
                                float _3588 = (fma(_1891, _3468.z, fma(_1890, _3468.y, _3468.x * _1889)) + _3468.w) / _3529;
                                float _3589 = (fma(_1891, _3483.z, fma(_1890, _3483.y, _3483.x * _1889)) + _3483.w) / _3529;
                                float _3593 = 1.0 - dot(vec2(_3588, _3589), vec2(_3588, _3589));
                                float _4742 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3595 = _3594 * (((isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0))) * _3571) / ((_3584 * 0.699999988079071044921875) + 1.0));
                                float _3607 = exp2(log2(1.0 / ((_3584 * 3.5) + 5.0)) * 0.25);
                                float _3608 = 1.0 - _801;
                                float _3615 = sqrt(1.0 - ((1.0 - (_3608 * _3608)) * (1.0 - (_3607 * _3607))));
                                float _3616 = _3615 * _3615;
                                float _3617 = _3616 * _3616;
                                float _3618 = _3564 - _3038;
                                float _3619 = _3565 - _3039;
                                float _3620 = _3566 - _3040;
                                float _3624 = inversesqrt(dot(vec3(_3618, _3619, _3620), vec3(_3618, _3619, _3620)));
                                float _3628 = dot(vec3(_741, _744, _747), vec3((-0.0) - _3038, (-0.0) - _3039, (-0.0) - _3040));
                                float _4753 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3631 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3632 = dot(vec3(_741, _744, _747), vec3(_3624 * _3618, _3624 * _3619, _3624 * _3620));
                                float _4764 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3635 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3639 = ((_3635 * _3635) * (_3617 + (-1.0))) + 1.0;
                                float _3640 = _3577 * _3616;
                                float _3641 = _3640 * _3640;
                                float _3647 = ((1.0 - _3641) * dot(vec3(_741, _744, _747), vec3(_3564, _3565, _3566))) + _3641;
                                float _4775 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                                float _3649 = 1.0 - _3616;
                                float _3659 = (0.5 / (((_3648 * ((_3631 * _3649) + _3616)) + 9.9999999392252902907785028219223e-09) + (((_3648 * _3649) + _3616) * _3631))) * _3648;
                                float _4786 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3669 = (_3594 * _3571) * (((_3617 * 3.1415927410125732421875) * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) / ((_3639 * _3639) * ((_3584 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3595 * _3441.z;
                                frontier_phi_88_pred_1 = _3595 * _3441.y;
                                frontier_phi_88_pred_2 = _3595 * _3441.x;
                                frontier_phi_88_pred_3 = _3669 * _3453.z;
                                frontier_phi_88_pred_4 = _3669 * _3453.y;
                                frontier_phi_88_pred_5 = _3669 * _3453.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3678 = frontier_phi_88_pred;
                            _3677 = frontier_phi_88_pred_1;
                            _3676 = frontier_phi_88_pred_2;
                            _3675 = frontier_phi_88_pred_3;
                            _3674 = frontier_phi_88_pred_4;
                            _3673 = frontier_phi_88_pred_5;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3385 = _3678 + _3398;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            if (_3400 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3400;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3385;
                        frontier_phi_82_pred_1 = _3384;
                        frontier_phi_82_pred_2 = _3383;
                        frontier_phi_82_pred_3 = _3382;
                        frontier_phi_82_pred_4 = _3381;
                        frontier_phi_82_pred_5 = _3380;
                    }
                    _3023 = frontier_phi_82_pred;
                    _3021 = frontier_phi_82_pred_1;
                    _3019 = frontier_phi_82_pred_2;
                    _3017 = frontier_phi_82_pred_3;
                    _3015 = frontier_phi_82_pred_4;
                    _3013 = frontier_phi_82_pred_5;
                    uint _3179 = _3178 + 1u;
                    if (_3179 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3172 = _3013;
                        _3173 = _3015;
                        _3174 = _3017;
                        _3175 = _3019;
                        _3176 = _3021;
                        _3177 = _3023;
                        _3178 = _3179;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3019;
                frontier_phi_63_64_ladder_1 = _3023;
                frontier_phi_63_64_ladder_2 = _3021;
                frontier_phi_63_64_ladder_3 = _3017;
                frontier_phi_63_64_ladder_4 = _3015;
                frontier_phi_63_64_ladder_5 = _3013;
            }
            else
            {
                frontier_phi_63_64_ladder = _2897;
                frontier_phi_63_64_ladder_1 = _2901;
                frontier_phi_63_64_ladder_2 = _2899;
                frontier_phi_63_64_ladder_3 = _2895;
                frontier_phi_63_64_ladder_4 = _2893;
                frontier_phi_63_64_ladder_5 = _2891;
            }
            _3012 = frontier_phi_63_64_ladder_5;
            _3014 = frontier_phi_63_64_ladder_4;
            _3016 = frontier_phi_63_64_ladder_3;
            _3018 = frontier_phi_63_64_ladder;
            _3020 = frontier_phi_63_64_ladder_2;
            _3022 = frontier_phi_63_64_ladder_1;
        }
        float _3027 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
        _2824 = (_3027 * _3018) + _2355;
        _2826 = (_3027 * _3020) + _2357;
        _2828 = (_3027 * _3022) + _2359;
        _2830 = ((_3012 * 0.039999999105930328369140625) * _3027) + _2678;
        _2832 = ((_3014 * 0.039999999105930328369140625) * _3027) + _2680;
        _2834 = ((_3016 * 0.039999999105930328369140625) * _3027) + _2682;
    }
    else
    {
        _2824 = _2355;
        _2826 = _2357;
        _2828 = _2359;
        _2830 = _2678;
        _2832 = _2680;
        _2834 = _2682;
    }
    float _4802 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4813 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4824 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2851 = ((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2824 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _785))) + ((_2830 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1621)) * cbPerFrame._m0[3u].x);
    float _2852 = ((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2826 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _785))) + ((_2832 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1621)) * cbPerFrame._m0[3u].x);
    float _2853 = ((isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2828 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _785))) + ((_2834 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1621)) * cbPerFrame._m0[3u].x);
    uint _2854 = _242 + 6u;
    float _2862 = _722 / cbSceneParam._m0[86u].x;
    float _2863 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2877 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, (log2((isnan(cbSceneParam._m0[77u].w) ? _643 : (isnan(_643) ? cbSceneParam._m0[77u].w : min(_643, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2879 = _2877.x;
    float _2880 = _2877.y;
    float _2881 = _2877.z;
    float _2882 = _2877.w;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_643 > cbSceneParam._m0[78u].w)
    {
        float _2916 = isnan(_643) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _643 : min(cbSceneParam._m0[80u].w, _643));
        float _2917 = _2916 / _643;
        float _2928 = _2917 * _695;
        float _2929 = _696 * _2917;
        float _2930 = (-0.0) - _2929;
        float _2932 = _2917 * _697;
        float _2934 = (cbSceneParam._m0[77u].w * _2930) / _2916;
        float _2935 = _2934 + cbSceneParam._m0[79u].w;
        float _2936 = cbSceneParam._m0[79u].w - _2929;
        float _2942 = sqrt(((_2928 * _2928) + (_2929 * _2929)) + (_2932 * _2932));
        float _2945 = (1.0 - (cbSceneParam._m0[77u].w / _2916)) * _2942;
        float _2950 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2952 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3129;
        if (abs((_2930 - _2934) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3129 = ((((_2935 > 0.0) ? exp2(_2950 * _2935) : (2.0 - exp2(_2952 * _2935))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2945;
        }
        else
        {
            float _3073 = 1.0 / cbSceneParam._m0[80u].x;
            float _3074 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : max(_2935, _2936));
            float _3075 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : min(_2935, _2936));
            float _3084 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : min(_3074, 0.0));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            _3129 = ((abs(_2942 / _2930) * cbSceneParam._m0[80u].y) * ((((_3084 - _3085) * 2.0) - ((exp2(_2950 * (isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0)))) - exp2(_2950 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))))) * _3073)) - ((exp2(_2952 * _3084) - exp2(_2952 * _3085)) * _3073))) + (_2945 * cbSceneParam._m0[80u].z);
        }
        vec4 _3131 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2862, _2863, 1.0), 0.0);
        float _3140 = exp2((_3129 * (-1.44269502162933349609375)) * (1.0 - _3131.w));
        float _3141 = log2(_3140);
        float _3157 = log2(_2882);
        _2954 = (exp2(_3157 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].x)) * _3131.x) / cbSceneParam._m0[78u].x)) + _2879;
        _2956 = (exp2(_3157 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].y)) * _3131.y) / cbSceneParam._m0[78u].y)) + _2880;
        _2958 = (exp2(_3157 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3141 * cbSceneParam._m0[78u].z)) * _3131.z) / cbSceneParam._m0[78u].z)) + _2881;
        _2960 = _3140 * _2882;
    }
    else
    {
        _2954 = _2879;
        _2956 = _2880;
        _2958 = _2881;
        _2960 = _2882;
    }
    bool _3167;
    vec4 _2970;
    vec4 _2992;
    float _2994;
    float _2998;
    float _2999;
    float _3000;
    float _3001;
    bool _3011;
    for (;;)
    {
        _2970 = cbMatDynParam._m0[0u];
        float _2972 = roundEven(_2970.y);
        bool _2973 = _2972 == 3.0;
        float _2974 = log2(_2960);
        float _2981 = exp2(_2974 * cbSceneParam._m0[78u].x) * _2851;
        float _2982 = exp2(_2974 * cbSceneParam._m0[78u].y) * _2852;
        float _2983 = exp2(_2974 * cbSceneParam._m0[78u].z) * _2853;
        float _2990 = _711 + (-0.5);
        _2992 = cbMtdParam._m0[1u];
        _2994 = _2992.y * _2990;
        float _2997 = (_2972 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2998 = _2997 * (_2973 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2954)));
        _2999 = _2997 * (_2973 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2956)));
        _3000 = _2997 * (_2973 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2958)));
        _3001 = _2990 * 0.999000012874603271484375;
        _3011 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3011)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _3001) < 0.5)
            {
                _3167 = true;
                break;
            }
        }
        uint _3108 = _760 + uint(_2970.w);
        if ((cbInstanceData._m0[_3108].w < 1.0) && ((cbInstanceData._m0[_3108].w + _3001) < 0.5))
        {
            _3167 = true;
            break;
        }
        if ((_2994 + 1.0) < _2992.x)
        {
            _3167 = true;
            break;
        }
        _3167 = false;
        break;
    }
    float _3371;
    if (_3167)
    {
        discard_state = true;
        _3371 = 0.0;
    }
    else
    {
        _3371 = cbInstanceData._m0[_2854].w;
    }
    SV_Target.x = _2998;
    SV_Target.y = _2999;
    SV_Target.z = _3000;
    SV_Target.w = _3371;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2854].w;
    discard_exit();
}


