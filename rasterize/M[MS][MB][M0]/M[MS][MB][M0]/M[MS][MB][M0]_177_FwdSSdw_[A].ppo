#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1295;
float _3680;
float _3681;
float _3682;
float _3683;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _373 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _373) * cbMtdParam._m0[24u].x) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3692 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _398 = (_391 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _399 = (_391 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _400 = (_391 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].x) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3703 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _485 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _527 = _525.x;
    float _528 = _525.y;
    float _529 = _525.z;
    float _536 = ((_508.x - _527) * _391) + _527;
    float _537 = ((_508.y - _528) * _391) + _528;
    float _538 = ((_508.z - _529) * _391) + _529;
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _563 = ((_550.z - _538) * _464) + _538;
    float _566 = ((((_550.x - _536) * _464) + _536) * 2.0) + (-1.0);
    float _567 = ((((_550.y - _537) * _464) + _537) * 2.0) + (-1.0);
    float _568 = dot(vec2(_566, _567), vec2(_566, _567));
    float _3714 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _573 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _605 = (_566 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_485.x * 2.0) + (-1.0)))) + (((_593.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _606 = (_567 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_485.y * 2.0) + (-1.0)))) + (((_593.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _649 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_620 - _621) * cbMtdParam._m0[24u].w) + _621) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3725 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _650 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _658 = ((((cbMtdParam._m0[10u].x - _471) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _650) + _471;
    float _659 = ((((cbMtdParam._m0[10u].y - _472) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _650) + _472;
    float _660 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _473)) * _650) + _473;
    float _665 = (((_485.z - _563) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _563;
    float _669 = ((_593.z - _665) * cbMtdParam._m0[19u].w) + _665;
    float _673 = ((cbMtdParam._m0[23u].y - _669) * _650) + _669;
    vec4 _692 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _698 = (_692.x * 2.0) + (-1.0);
    float _699 = (_692.y * 2.0) + (-1.0);
    float _700 = dot(vec2(_698, _699), vec2(_698, _699));
    float _3736 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _716 = (_650 * (((cbMtdParam._m0[22u].z * _605) - _605) + _698)) + _605;
    float _717 = (_650 * (((cbMtdParam._m0[22u].z * _606) - _606) + _699)) + _606;
    float _718 = (_650 * (sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) - _573)) + _573;
    float _720 = cbMtdParam._m0[22u].x + _593.w;
    float _723 = fma(_718, _242 * NORMAL.x, fma(_717, _249 * TANGENT.x, (_235 * _227) * _716));
    float _726 = fma(_718, _242 * NORMAL.y, fma(_717, _249 * TANGENT.y, (_235 * _228) * _716));
    float _729 = fma(_718, _242 * NORMAL.z, fma(_717, _249 * TANGENT.z, (_235 * _229) * _716));
    float _733 = inversesqrt(dot(vec3(_723, _726, _729), vec3(_723, _726, _729)));
    float _734 = _733 * _723;
    float _735 = _733 * _726;
    float _736 = _733 * _729;
    float _3747 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _737 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3769 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3780 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3791 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _806 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _796);
    float _807 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _796);
    float _808 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _796);
    float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
    float _813 = _806 * _812;
    float _814 = _807 * _812;
    float _815 = _808 * _812;
    vec4 _820 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _822 = _820.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _976 = sqrt(((_806 * _806) + (_807 * _807)) + (_808 * _808));
        float _982 = (cbMatDynParam._m0[5u].x * _976) + cbMatDynParam._m0[5u].y;
        float _3802 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _987 = (cbMatDynParam._m0[5u].z * _976) + cbMatDynParam._m0[5u].w;
        float _3813 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) - _983)) + _983) < ((_822 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _833 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _834 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _852 = fma(_736, cbSceneParam._m0[5u].z, fma(_735, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _734));
    float _855 = fma(_736, cbSceneParam._m0[6u].z, fma(_735, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _734));
    float _858 = fma(_736, cbSceneParam._m0[7u].z, fma(_735, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _734));
    uint _871 = _255 + 9u;
    uint _872 = _871 + uint(cbMatDynParam._m0[0u].w);
    float _878 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_872].x;
    float _879 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_872].y;
    float _880 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_872].z;
    float _3824 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    vec4 _892 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _833, cbSceneParam._m0[86u].y * _834));
    float _896 = ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * TEXCOORD_5.w) * _892.x;
    float _897 = dot(vec3(_734, _735, _736), vec3(_813, _814, _815));
    float _900 = _897 * 2.0;
    float _904 = (_900 * _734) - _813;
    float _905 = (_900 * _735) - _814;
    float _906 = (_900 * _736) - _815;
    float _910 = abs(dot(vec3(_813, _814, _815), vec3(_734, _735, _736)));
    float _3857 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _912 = sqrt(_737);
    float _925 = exp2((_912 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_912 * 3.0));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1294;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_965, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957));
        float _1023 = fma(_965, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957));
        float _1027 = fma(_965, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957));
        float _1052 = _957 + _734;
        float _1053 = _961 + _735;
        float _1054 = _965 + _736;
        float _1064 = fma(_1054, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1052)) - _1019;
        float _1065 = fma(_1054, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1052)) - _1023;
        float _1066 = fma(_1054, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1052)) - _1027;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1122 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1088.x + (-0.5));
        float _1124 = _1122 * (_1088.y + (-0.5));
        float _1125 = _1122 * (_1088.z + (-0.5));
        float _1132 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1095.x + (-0.5));
        float _1134 = _1132 * (_1095.y + (-0.5));
        float _1135 = _1132 * (_1095.z + (-0.5));
        float _1142 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1102.x + (-0.5));
        float _1144 = _1142 * (_1102.y + (-0.5));
        float _1145 = _1142 * (_1102.z + (-0.5));
        float _1152 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1109.x + (-0.5));
        float _1154 = _1152 * (_1109.y + (-0.5));
        float _1155 = _1152 * (_1109.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1176 = (dot(vec3(_734, _735, _736), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1186 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3905 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1188 + 1.0))) + _1193) * _1156;
        float _1203 = _1124 * 0.5;
        float _1204 = _1134 * 0.5;
        float _1205 = _1144 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_734, _735, _736), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3938 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1230 + 1.0))) + _1235) * _1157;
        float _1245 = _1125 * 0.5;
        float _1246 = _1135 * 0.5;
        float _1247 = _1145 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_734, _735, _736), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3971 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1272 + 1.0))) + _1277) * _1158;
        _1294 = _1125;
        _1296 = _1124;
        _1297 = _1123;
        _1298 = _1135;
        _1299 = _1134;
        _1300 = _1133;
        _1301 = _1145;
        _1302 = _1144;
        _1303 = _1143;
        _1304 = _1158;
        _1305 = _1157;
        _1306 = _1156;
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
    }
    else
    {
        _1294 = _1295;
        _1296 = _1295;
        _1297 = _1295;
        _1298 = _1295;
        _1299 = _1295;
        _1300 = _1295;
        _1301 = _1295;
        _1302 = _1295;
        _1303 = _1295;
        _1304 = _1295;
        _1305 = _1295;
        _1306 = _1295;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_965, cbModelParam._m0[30u].z, fma(_961, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957));
        float _1340 = fma(_965, cbModelParam._m0[31u].z, fma(_961, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957));
        float _1344 = fma(_965, cbModelParam._m0[32u].z, fma(_961, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957));
        float _1367 = _957 + _734;
        float _1368 = _961 + _735;
        float _1369 = _965 + _736;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_734, _735, _736), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4034 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_734, _735, _736), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4067 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_734, _735, _736), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4100 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1295;
        _1606 = _1295;
        _1607 = _1295;
        _1608 = _1295;
        _1609 = _1295;
        _1610 = _1295;
        _1611 = _1295;
        _1612 = _1295;
        _1613 = _1295;
        _1614 = _1295;
        _1615 = _1295;
        _1616 = _1295;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1307)) + _1307;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1308)) + _1308;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1309)) + _1309;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _904 * 0.5;
    float _1674 = _905 * 0.5;
    float _1675 = _906 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1294, _1298, _1301, _1304));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1297, _1300, _1303, _1306));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1824;
    float _1826;
    float _1828;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1791 = fma(_965, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957)) + cbModelParam._m0[13u].w;
        float _1795 = fma(_965, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957)) + cbModelParam._m0[14u].w;
        float _1799 = fma(_965, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957)) + cbModelParam._m0[15u].w;
        float _1802 = fma(_906, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904));
        float _1805 = fma(_906, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904));
        float _1808 = fma(_906, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904));
        float _1836;
        if (_1802 > 0.0)
        {
            _1836 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1836 = frontier_phi_17_15_ladder;
        }
        float _2059;
        if (_1805 > 0.0)
        {
            _2059 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2059 = frontier_phi_26_22_ladder;
        }
        float _2305;
        if (_1808 > 0.0)
        {
            _2305 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2305 = frontier_phi_38_33_ladder;
        }
        float _2307 = isnan(_2059) ? _1836 : (isnan(_1836) ? _2059 : min(_1836, _2059));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1802) + _1791;
        float _2313 = (_2308 * _1805) + _1795;
        float _2314 = (_2308 * _1808) + _1799;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2315;
        float _2319 = _2315 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 > _2319) || ((_2313 < _2317) || ((_2312 < _2317) || (_2312 > _2319))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2314, cbModelParam._m0[9u].z, fma(_2313, cbModelParam._m0[9u].y, _2312 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2314, cbModelParam._m0[10u].z, fma(_2313, cbModelParam._m0[10u].y, _2312 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2314, cbModelParam._m0[11u].z, fma(_2313, cbModelParam._m0[11u].y, _2312 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_16_38_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1824 = frontier_phi_16_38_ladder_2;
        _1826 = frontier_phi_16_38_ladder_1;
        _1828 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1812 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_904, _905, _906), _1742);
        _1824 = _1812.x * cbModelParam._m0[1u].y;
        _1826 = _1812.y * cbModelParam._m0[1u].y;
        _1828 = _1812.z * cbModelParam._m0[1u].y;
    }
    float _1832 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1833 = isnan(_1832) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1832 : min(cbModelParam._m0[25u].w, _1832));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_965, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_965, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_965, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_906, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904));
        float _1902 = fma(_906, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904));
        float _1905 = fma(_906, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904));
        float _2064;
        if (_1899 > 0.0)
        {
            _2064 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2064 = frontier_phi_28_24_ladder;
        }
        float _2332;
        if (_1902 > 0.0)
        {
            _2332 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2332 = frontier_phi_40_35_ladder;
        }
        float _2537;
        if (_1905 > 0.0)
        {
            _2537 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2537 = frontier_phi_49_46_ladder;
        }
        float _2539 = isnan(_2332) ? _2064 : (isnan(_2064) ? _2332 : min(_2064, _2332));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1899) + _1888;
        float _2545 = (_2540 * _1902) + _1892;
        float _2546 = (_2540 * _1905) + _1896;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1833);
            frontier_phi_25_49_ladder = _2745.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2745.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2745.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_25_49_ladder_2;
        _1926 = frontier_phi_25_49_ladder_1;
        _1928 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_904, _905, _906), _1833);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1940 = ((((1.0 - _925) * ((_912 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_925 * _912)) * _896;
    float _1941 = _1940 * ((cbModelParam._m0[1u].w * (_1924 - _1824)) + _1824);
    float _1942 = _1940 * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1943 = _1940 * ((cbModelParam._m0[1u].w * (_1928 - _1828)) + _1828);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    vec4 _1960 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_833, _834));
    float _1962 = _1960.w;
    float _1974 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1962);
    float _1975 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1962);
    float _1976 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1962);
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1990 = _896 + (-1.0);
    float _1995 = (cbLight._m0[_1983].x * _1990) + 1.0;
    float _1996 = (cbLight._m0[_1983].y * _1990) + 1.0;
    float _1997 = (cbLight._m0[_1983].z * _1990) + 1.0;
    float _1998 = (cbLight._m0[_1983].w * _1990) + 1.0;
    uint _1999 = _1982 + 5u;
    float _2005 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2009 = _1982 + 4u;
    float _2018 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2022 = _1982 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_734, _735, _736));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_734, _735, _736));
    float _4236 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4247 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_1999].x * _2005) * _2043) + (((cbLight._m0[_2009].x * _1974) * _2018) * _2041);
    float _2051 = ((_2005 * cbLight._m0[_1999].y) * _2043) + (((cbLight._m0[_2009].y * _1975) * _2018) * _2041);
    float _2052 = ((_2005 * cbLight._m0[_1999].z) * _2043) + (((cbLight._m0[_2009].z * _1976) * _2018) * _2041);
    uvec4 _2056 = floatBitsToUint(cbLight._m0[_1982 + 12u]);
    bool _2058 = _2056.x == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2058)
    {
        _2069 = _2050;
        _2071 = _2051;
        _2073 = _2052;
    }
    else
    {
        uint _2077 = _1982 + 6u;
        float _2093 = (dot(vec3(cbLight._m0[_1982 + 2u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4258 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2096 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2069 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _2050;
        _2071 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _2051;
        _2073 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _2052;
    }
    bool _2076 = _2056.y == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2076)
    {
        _2114 = _2069;
        _2116 = _2071;
        _2118 = _2073;
    }
    else
    {
        uint _2276 = _1982 + 7u;
        float _2292 = (dot(vec3(cbLight._m0[_1982 + 3u].xyz), vec3(_734, _735, _736)) * 0.5) + 0.5;
        float _2293 = _2292 * _2292;
        float _4274 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2294 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2295 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2114 = (((cbLight._m0[_2276].x * 0.3183098733425140380859375) * _2294) * _2295) + _2069;
        _2116 = (((cbLight._m0[_2276].y * 0.3183098733425140380859375) * _2294) * _2295) + _2071;
        _2118 = (((cbLight._m0[_2276].z * 0.3183098733425140380859375) * _2294) * _2295) + _2073;
    }
    uint _2121 = _1982 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _737) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1982].x + _813;
    float _2137 = cbLight._m0[_1982].y + _814;
    float _2138 = cbLight._m0[_1982].z + _815;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_1982].xyz));
    float _4290 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2150 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2151 = dot(vec3(_734, _735, _736), vec3(_2143, _2144, _2145));
    float _4312 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2143, _2144, _2145));
    float _4323 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2174 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2175 = 1.0 - _2135;
    float _2186 = (0.5 / (((_2150 * ((_2149 * _2175) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2175) + _2135) * _2149))) * _2149;
    float _4334 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    uint _2202 = _1982 + 9u;
    float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _737) * 0.949999988079071044921875);
    float _2214 = _2213 * _2213;
    float _2215 = cbLight._m0[_2022].x + _813;
    float _2216 = cbLight._m0[_2022].y + _814;
    float _2217 = cbLight._m0[_2022].z + _815;
    float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
    float _2222 = _2221 * _2215;
    float _2223 = _2221 * _2216;
    float _2224 = _2221 * _2217;
    float _2225 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2022].xyz));
    float _4345 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2228 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2229 = dot(vec3(_734, _735, _736), vec3(_2222, _2223, _2224));
    float _4356 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2233 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2222, _2223, _2224));
    float _4367 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = _2214 * _2214;
    float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
    float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2251 = 1.0 - _2214;
    float _2261 = (0.5 / (((_2150 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2251) + _2214) * _2228))) * _2228;
    float _4378 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2263 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
    float _2273 = (((_2250 * cbLight._m0[_2202].x) * _2263) * _2005) + ((((cbLight._m0[_2121].x * _1974) * _2174) * _2188) * _2018);
    float _2274 = (((_2250 * cbLight._m0[_2202].y) * _2263) * _2005) + ((((cbLight._m0[_2121].y * _1975) * _2174) * _2188) * _2018);
    float _2275 = (((_2250 * cbLight._m0[_2202].z) * _2263) * _2005) + ((((cbLight._m0[_2121].z * _1976) * _2174) * _2188) * _2018);
    float _2337;
    float _2339;
    float _2341;
    if (_2058)
    {
        _2337 = _2273;
        _2339 = _2274;
        _2341 = _2275;
    }
    else
    {
        uint _2343 = _1982 + 2u;
        uint _2347 = _1982 + 10u;
        float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _737) * 0.949999988079071044921875);
        float _2362 = _2361 * _2361;
        float _2363 = cbLight._m0[_2343].x + _813;
        float _2364 = cbLight._m0[_2343].y + _814;
        float _2365 = cbLight._m0[_2343].z + _815;
        float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
        float _2370 = _2369 * _2363;
        float _2371 = _2369 * _2364;
        float _2372 = _2369 * _2365;
        float _2373 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2343].xyz));
        float _4389 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2377 = dot(vec3(_734, _735, _736), vec3(_2370, _2371, _2372));
        float _4400 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2381 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2370, _2371, _2372));
        float _4411 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2385 = _2362 * _2362;
        float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
        float _2398 = (exp2(log2(1.0 - (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2399 = 1.0 - _2362;
        float _2409 = (0.5 / (((_2150 * ((_2376 * _2399) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2399) + _2362) * _2376))) * _2376;
        float _4422 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2337 = (((_2398 * cbLight._m0[_2347].x) * _2411) * _2412) + _2273;
        _2339 = (((_2398 * cbLight._m0[_2347].y) * _2411) * _2412) + _2274;
        _2341 = (((_2398 * cbLight._m0[_2347].z) * _2411) * _2412) + _2275;
    }
    float _2447;
    float _2449;
    float _2451;
    if (_2076)
    {
        _2447 = _2337;
        _2449 = _2339;
        _2451 = _2341;
    }
    else
    {
        uint _2458 = _1982 + 3u;
        uint _2462 = _1982 + 11u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _737) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _813;
        float _2479 = cbLight._m0[_2458].y + _814;
        float _2480 = cbLight._m0[_2458].z + _815;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_734, _735, _736), vec3(cbLight._m0[_2458].xyz));
        float _4438 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2492 = dot(vec3(_734, _735, _736), vec3(_2485, _2486, _2487));
        float _4449 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4460 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2514 = 1.0 - _2477;
        float _2524 = (0.5 / (((_2150 * ((_2491 * _2514) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2514) + _2477) * _2491))) * _2491;
        float _4471 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2447 = (((_2513 * cbLight._m0[_2462].x) * _2526) * _2527) + _2337;
        _2449 = (((_2513 * cbLight._m0[_2462].y) * _2526) * _2527) + _2339;
        _2451 = (((_2513 * cbLight._m0[_2462].z) * _2526) * _2527) + _2341;
    }
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_1980.y == 0u)
    {
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2603 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2602;
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2602;
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2602;
        uvec4 _2617 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2618 = _2617.x;
        uint _2629 = uint((float(_2617.y) * floor(float(uint(cbSceneParam._m0[85u].y * _834) / _2618))) + floor(float(uint(cbSceneParam._m0[85u].x * _833) / _2618)));
        float _2639 = (log2(_2605 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2640 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        uint _2643 = uint(isnan(14.0) ? _2640 : (isnan(_2640) ? 14.0 : min(_2640, 14.0)));
        uvec4 _2648 = texelFetch(g_lightClusterGridBuffer, int(((_2643 << 2u) + (_2629 << 6u)) >> 2u));
        uint _2649 = _2648.x;
        uint _2650 = _2617.z;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        if (((((1u << ((_2650 >> 4u) & 15u)) + 4294967295u) & _2649) == 0u) || ((_2650 & 240u) == 0u))
        {
            _2750 = 0.0;
            _2752 = 0.0;
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
        }
        else
        {
            float _2751;
            float _2753;
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2919)
                {
                    frontier_phi_66_pred = _2903;
                    frontier_phi_66_pred_1 = _2908;
                    frontier_phi_66_pred_2 = _2907;
                    frontier_phi_66_pred_3 = _2906;
                    frontier_phi_66_pred_4 = _2905;
                    frontier_phi_66_pred_5 = _2904;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2903;
                    _3049 = _2904;
                    _3050 = _2905;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2918;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2909 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _2603;
                        float _3115 = _3074.y - _2604;
                        float _3116 = _3074.z - _2605;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_852, _855, _858), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4497 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2603;
                        float _3150 = (-0.0) - _2604;
                        float _3151 = (-0.0) - _2605;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _912;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_852, _855, _858), vec3(_3156, _3157, _3158));
                        float _4513 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3191 = dot(vec3(_852, _855, _858), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4524 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3134 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3124) + _3200;
                        float _4535 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4546 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) / ((_3198 * _3198) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2978 = (_3145 * _3093.x) + _3051;
                        _2979 = (_3145 * _3093.y) + _3052;
                        _2980 = (_3145 * _3093.z) + _3053;
                        _2975 = (_3226 * _3110.x) + _3048;
                        _2976 = (_3226 * _3110.y) + _3049;
                        _2977 = (_3226 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2975;
                            _3049 = _2976;
                            _3050 = _2977;
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2980;
                    frontier_phi_66_pred_2 = _2979;
                    frontier_phi_66_pred_3 = _2978;
                    frontier_phi_66_pred_4 = _2977;
                    frontier_phi_66_pred_5 = _2976;
                }
                _2751 = frontier_phi_66_pred;
                _2761 = frontier_phi_66_pred_1;
                _2759 = frontier_phi_66_pred_2;
                _2757 = frontier_phi_66_pred_3;
                _2755 = frontier_phi_66_pred_4;
                _2753 = frontier_phi_66_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2751;
                    _2904 = _2753;
                    _2905 = _2755;
                    _2906 = _2757;
                    _2907 = _2759;
                    _2908 = _2761;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2750 = _2751;
            _2752 = _2753;
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
        }
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.z;
        uint _2767 = (_2765 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2767) & _2649) == 0u)
        {
            _2871 = _2750;
            _2873 = _2752;
            _2875 = _2754;
            _2877 = _2756;
            _2879 = _2758;
            _2881 = _2760;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
            float _2897 = _2896 * _2603;
            float _2898 = _2896 * _2604;
            float _2899 = _2896 * _2605;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2767 < ((_2765 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3031 = _2750;
                float _3032 = _2752;
                float _3033 = _2754;
                float _3034 = _2756;
                float _3035 = _2758;
                float _3036 = _2760;
                uint _3037 = _2767;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2643 << 5u) + (_2629 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3047)
                    {
                        frontier_phi_77_pred = _3036;
                        frontier_phi_77_pred_1 = _3035;
                        frontier_phi_77_pred_2 = _3034;
                        frontier_phi_77_pred_3 = _3033;
                        frontier_phi_77_pred_4 = _3032;
                        frontier_phi_77_pred_5 = _3031;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3253 = _3031;
                        float _3254 = _3032;
                        float _3255 = _3033;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        uint _3259 = _3046;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3270 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3270 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3270 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3270 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_2605, _3377.z, fma(_2604, _3377.y, _3377.x * _2603)) + _3377.w;
                            _3390 = !((fma(_2605, _3358.z, fma(_2604, _3358.y, _3358.x * _2603)) + _3358.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3285.x - _2603;
                                float _3418 = _3285.y - _2604;
                                float _3419 = _3285.z - _2605;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3286 * _3286));
                                float _4557 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3435 = sqrt(_3420) * _3301.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_852, _855, _858))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_2605, _3328.z, fma(_2604, _3328.y, _3328.x * _2603)) + _3328.w) / _3389;
                                float _3449 = (fma(_2605, _3343.z, fma(_2604, _3343.y, _3343.x * _2603)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4573 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _912;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2897;
                                float _3479 = _3425 - _2898;
                                float _3480 = _3426 - _2899;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_852, _855, _858), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4584 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3492 = dot(vec3(_852, _855, _858), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4595 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_852, _855, _858), vec3(_3424, _3425, _3426))) + _3501;
                                float _4606 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4617 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3455 * _3301.y;
                                frontier_phi_83_pred_1 = _3455 * _3301.x;
                                frontier_phi_83_pred_2 = _3529 * _3313.z;
                                frontier_phi_83_pred_3 = _3529 * _3313.y;
                                frontier_phi_83_pred_4 = _3529 * _3313.x;
                                frontier_phi_83_pred_5 = _3455 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_83_pred;
                            _3536 = frontier_phi_83_pred_1;
                            _3535 = frontier_phi_83_pred_2;
                            _3534 = frontier_phi_83_pred_3;
                            _3533 = frontier_phi_83_pred_4;
                            _3538 = frontier_phi_83_pred_5;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3245;
                        frontier_phi_77_pred_1 = _3244;
                        frontier_phi_77_pred_2 = _3243;
                        frontier_phi_77_pred_3 = _3242;
                        frontier_phi_77_pred_4 = _3241;
                        frontier_phi_77_pred_5 = _3240;
                    }
                    _2882 = frontier_phi_77_pred;
                    _2880 = frontier_phi_77_pred_1;
                    _2878 = frontier_phi_77_pred_2;
                    _2876 = frontier_phi_77_pred_3;
                    _2874 = frontier_phi_77_pred_4;
                    _2872 = frontier_phi_77_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2872;
                        _3032 = _2874;
                        _3033 = _2876;
                        _3034 = _2878;
                        _3035 = _2880;
                        _3036 = _2882;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2876;
                frontier_phi_58_59_ladder_1 = _2882;
                frontier_phi_58_59_ladder_2 = _2880;
                frontier_phi_58_59_ladder_3 = _2878;
                frontier_phi_58_59_ladder_4 = _2874;
                frontier_phi_58_59_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_58_59_ladder = _2754;
                frontier_phi_58_59_ladder_1 = _2760;
                frontier_phi_58_59_ladder_2 = _2758;
                frontier_phi_58_59_ladder_3 = _2756;
                frontier_phi_58_59_ladder_4 = _2752;
                frontier_phi_58_59_ladder_5 = _2750;
            }
            _2871 = frontier_phi_58_59_ladder_5;
            _2873 = frontier_phi_58_59_ladder_4;
            _2875 = frontier_phi_58_59_ladder;
            _2877 = frontier_phi_58_59_ladder_3;
            _2879 = frontier_phi_58_59_ladder_2;
            _2881 = frontier_phi_58_59_ladder_1;
        }
        float _2886 = isnan(1.0) ? _896 : (isnan(_896) ? 1.0 : min(_896, 1.0));
        _2662 = (_2886 * _2877) + _2114;
        _2664 = (_2886 * _2879) + _2116;
        _2666 = (_2886 * _2881) + _2118;
        _2668 = ((_2871 * 0.039999999105930328369140625) * _2886) + _2447;
        _2670 = ((_2873 * 0.039999999105930328369140625) * _2886) + _2449;
        _2672 = ((_2875 * 0.039999999105930328369140625) * _2886) + _2451;
    }
    else
    {
        _2662 = _2114;
        _2664 = _2116;
        _2666 = _2118;
        _2668 = _2447;
        _2670 = _2449;
        _2672 = _2451;
    }
    float _4633 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4644 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4655 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2689 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2662 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _896))) + ((_2668 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    float _2690 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2664 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _896))) + ((_2670 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    float _2691 = ((isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0))) * (_2666 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _896))) + ((_2672 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    uint _2692 = _255 + 6u;
    float _2700 = _833 / cbSceneParam._m0[86u].x;
    float _2701 = _834 / cbSceneParam._m0[86u].y;
    vec4 _2715 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2717 = _2715.x;
    float _2718 = _2715.y;
    float _2719 = _2715.z;
    float _2720 = _2715.w;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2775 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2776 = _2775 / _755;
        float _2787 = _2776 * _806;
        float _2788 = _807 * _2776;
        float _2789 = (-0.0) - _2788;
        float _2791 = _2776 * _808;
        float _2793 = (cbSceneParam._m0[77u].w * _2789) / _2775;
        float _2794 = _2793 + cbSceneParam._m0[79u].w;
        float _2795 = cbSceneParam._m0[79u].w - _2788;
        float _2801 = sqrt(((_2787 * _2787) + (_2788 * _2788)) + (_2791 * _2791));
        float _2804 = (1.0 - (cbSceneParam._m0[77u].w / _2775)) * _2801;
        float _2809 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2811 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2988;
        if (abs((_2789 - _2793) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2988 = ((((_2794 > 0.0) ? exp2(_2809 * _2794) : (2.0 - exp2(_2811 * _2794))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2804;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : max(_2794, _2795));
            float _2934 = isnan(_2795) ? _2794 : (isnan(_2794) ? _2795 : min(_2794, _2795));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2988 = ((abs(_2801 / _2789) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2809 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2809 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2811 * _2943) - exp2(_2811 * _2944)) * _2932))) + (_2804 * cbSceneParam._m0[80u].z);
        }
        vec4 _2990 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2700, _2701, 1.0), 0.0);
        float _2999 = exp2((_2988 * (-1.44269502162933349609375)) * (1.0 - _2990.w));
        float _3000 = log2(_2999);
        float _3016 = log2(_2720);
        _2813 = (exp2(_3016 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].x)) * _2990.x) / cbSceneParam._m0[78u].x)) + _2717;
        _2815 = (exp2(_3016 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].y)) * _2990.y) / cbSceneParam._m0[78u].y)) + _2718;
        _2817 = (exp2(_3016 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3000 * cbSceneParam._m0[78u].z)) * _2990.z) / cbSceneParam._m0[78u].z)) + _2719;
        _2819 = _2999 * _2720;
    }
    else
    {
        _2813 = _2717;
        _2815 = _2718;
        _2817 = _2719;
        _2819 = _2720;
    }
    bool _3026;
    vec4 _2829;
    vec4 _2851;
    float _2853;
    float _2857;
    float _2858;
    float _2859;
    float _2860;
    bool _2870;
    for (;;)
    {
        _2829 = cbMatDynParam._m0[0u];
        float _2831 = roundEven(_2829.y);
        bool _2832 = _2831 == 3.0;
        float _2833 = log2(_2819);
        float _2840 = exp2(_2833 * cbSceneParam._m0[78u].x) * _2689;
        float _2841 = exp2(_2833 * cbSceneParam._m0[78u].y) * _2690;
        float _2842 = exp2(_2833 * cbSceneParam._m0[78u].z) * _2691;
        float _2849 = _822 + (-0.5);
        _2851 = cbMtdParam._m0[1u];
        _2853 = _2851.y * _2849;
        float _2856 = (_2831 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2857 = _2856 * (_2832 ? _2840 : (_2840 + (cbSceneParam._m0[72u].w * _2813)));
        _2858 = _2856 * (_2832 ? _2841 : (_2841 + (cbSceneParam._m0[72u].w * _2815)));
        _2859 = _2856 * (_2832 ? _2842 : (_2842 + (cbSceneParam._m0[72u].w * _2817)));
        _2860 = _2849 * 0.999000012874603271484375;
        _2870 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2870)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2860) < 0.5)
            {
                _3026 = true;
                break;
            }
        }
        uint _2967 = _871 + uint(_2829.w);
        if ((cbInstanceData._m0[_2967].w < 1.0) && ((cbInstanceData._m0[_2967].w + _2860) < 0.5))
        {
            _3026 = true;
            break;
        }
        if ((_2853 + 1.0) < _2851.x)
        {
            _3026 = true;
            break;
        }
        _3026 = false;
        break;
    }
    float _3231;
    if (_3026)
    {
        discard_state = true;
        _3231 = 0.0;
    }
    else
    {
        _3231 = cbInstanceData._m0[_2692].w;
    }
    SV_Target.x = _2857;
    SV_Target.y = _2858;
    SV_Target.z = _2859;
    SV_Target.w = _3231;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2692].w;
    discard_exit();
}


