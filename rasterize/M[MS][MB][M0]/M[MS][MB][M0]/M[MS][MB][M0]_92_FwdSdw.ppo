#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1291;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3880 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3891 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3902 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3913 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _426) + _518;
    float _530 = ((((_497.x - _516) * _426) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _426) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3924 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))));
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _577 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _580 = ((isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : min(_577, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _589 = (_580 - ((((((_570 - _571) * cbMtdParam._m0[24u].z) + _571) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _580))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3945 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _597 = (_590 * (cbMtdParam._m0[17u].x - _452)) + _452;
    float _598 = (_590 * (cbMtdParam._m0[17u].y - _453)) + _453;
    float _599 = (_590 * (cbMtdParam._m0[17u].z - _454)) + _454;
    vec4 _611 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_613 - _614) * cbMtdParam._m0[24u].w) + _614) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3956 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _597) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _640) + _597;
    float _649 = ((((cbMtdParam._m0[10u].y - _598) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _640) + _598;
    float _650 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _599)) * _640) + _599;
    float _655 = (((_472.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3967 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _686 = (_590 * (_669.z - _655)) + _655;
    float _689 = ((cbMtdParam._m0[23u].y - _686) * _640) + _686;
    vec4 _708 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _714 = (_708.x * 2.0) + (-1.0);
    float _715 = (_708.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _3978 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _726 = _530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_472.x * 2.0) + (-1.0)));
    float _727 = _531 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_472.y * 2.0) + (-1.0)));
    float _739 = (((_676 - _726) + (cbMtdParam._m0[21u].x * _726)) * _590) + _726;
    float _740 = (((_677 - _727) + (cbMtdParam._m0[21u].x * _727)) * _590) + _727;
    float _741 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) - _537)) + _537;
    float _752 = (((_714 - _739) + (_739 * cbMtdParam._m0[22u].z)) * _640) + _739;
    float _753 = (((_715 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _640) + _740;
    float _754 = ((sqrt(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) - _741) * _640) + _741;
    float _756 = cbMtdParam._m0[22u].x + _550.w;
    float _759 = fma(_754, _245 * NORMAL.x, fma(_753, _252 * TANGENT.x, (_238 * _230) * _752));
    float _762 = fma(_754, _245 * NORMAL.y, fma(_753, _252 * TANGENT.y, (_238 * _231) * _752));
    float _765 = fma(_754, _245 * NORMAL.z, fma(_753, _252 * TANGENT.z, (_238 * _232) * _752));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3989 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _773 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4011 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4022 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4033 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _879 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _882 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _896 = (_277 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_896].z;
    float _4044 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _4055 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _920 = ((isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * TEXCOORD_5.w) * _916.x;
    float _921 = dot(vec3(_770, _771, _772), vec3(_849, _850, _851));
    float _924 = _921 * 2.0;
    float _928 = (_924 * _770) - _849;
    float _929 = (_924 * _771) - _850;
    float _930 = (_924 * _772) - _851;
    float _934 = abs(dot(vec3(_849, _850, _851), vec3(_770, _771, _772)));
    float _4077 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _936 = sqrt(_773);
    float _949 = exp2((_936 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_936 * 3.0));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1019 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1023 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1048 = _981 + _770;
        float _1049 = _985 + _771;
        float _1050 = _989 + _772;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_770, _771, _772), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4125 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_770, _771, _772), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4158 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_770, _771, _772), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4191 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1330 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1334 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1338 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1361 = _981 + _770;
        float _1362 = _985 + _771;
        float _1363 = _989 + _772;
        float _1373 = fma(_1363, cbModelParam._m0[30u].z, fma(_1362, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1361)) - _1330;
        float _1374 = fma(_1363, cbModelParam._m0[31u].z, fma(_1362, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1361)) - _1334;
        float _1375 = fma(_1363, cbModelParam._m0[32u].z, fma(_1362, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1361)) - _1338;
        float _1379 = inversesqrt(dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375)));
        float _1392 = ((_1379 * _1373) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1330 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1379 * _1374) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1334 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1379 * _1375) / cbModelParam._m0[35u].z) + ((((((_1338 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1392, _1393, _1394), 0.0);
        float _1429 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1396.x + (-0.5));
        float _1431 = _1429 * (_1396.y + (-0.5));
        float _1432 = _1429 * (_1396.z + (-0.5));
        float _1439 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1403.x + (-0.5));
        float _1441 = _1439 * (_1403.y + (-0.5));
        float _1442 = _1439 * (_1403.z + (-0.5));
        float _1449 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1410.x + (-0.5));
        float _1451 = _1449 * (_1410.y + (-0.5));
        float _1452 = _1449 * (_1410.z + (-0.5));
        float _1459 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1417.x + (-0.5));
        float _1461 = _1459 * (_1417.y + (-0.5));
        float _1462 = _1459 * (_1417.z + (-0.5));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1466 = _1430 * 0.5;
        float _1467 = _1440 * 0.5;
        float _1468 = _1450 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_770, _771, _772), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4254 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1493 + 1.0))) + _1498) * _1463;
        float _1508 = _1431 * 0.5;
        float _1509 = _1441 * 0.5;
        float _1510 = _1451 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_770, _771, _772), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4287 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1535 + 1.0))) + _1540) * _1464;
        float _1550 = _1432 * 0.5;
        float _1551 = _1442 * 0.5;
        float _1552 = _1452 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_770, _771, _772), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4298 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1465 + 9.9999997473787516355514526367188e-06);
        float _4309 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4320 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_1577 + 1.0))) + _1582) * _1465;
        _1599 = _1432;
        _1600 = _1431;
        _1601 = _1430;
        _1602 = _1442;
        _1603 = _1441;
        _1604 = _1440;
        _1605 = _1452;
        _1606 = _1451;
        _1607 = _1450;
        _1608 = _1465;
        _1609 = _1464;
        _1610 = _1463;
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1613 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
    }
    else
    {
        _1599 = _1291;
        _1600 = _1291;
        _1601 = _1291;
        _1602 = _1291;
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1303)) + _1303;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1304)) + _1304;
    float _1625 = (cbModelParam._m0[1u].x * (_1613 - _1305)) + _1305;
    float _1646 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1623));
    float _1667 = _928 * 0.5;
    float _1668 = _929 * 0.5;
    float _1669 = _930 * 0.5;
    float _1670 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1601, _1604, _1607, _1610));
    float _1673 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1676 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1710;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1683 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1687 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1691 = dot(vec4(_1667, _1668, _1669, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1698 = dot(vec4(cbModelParam._m0[39u]), vec4(_1667, _1668, _1669, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1698) ? 0.0 : (isnan(0.0) ? _1698 : max(0.0, _1698))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1721;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1712 = dot(vec4(cbModelParam._m0[40u]), vec4(_1667, _1668, _1669, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1712) ? 0.0 : (isnan(0.0) ? _1712 : max(0.0, _1712))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1725 = (_1721 * cbModelParam._m0[1u].x) + (_1710 * (1.0 - cbModelParam._m0[1u].x));
    float _1735 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1735 : min(cbModelParam._m0[25u].z, _1735));
    float _1817;
    float _1819;
    float _1821;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1784 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1788 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1792 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1795 = fma(_930, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928));
        float _1798 = fma(_930, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928));
        float _1801 = fma(_930, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928));
        float _1829;
        if (_1795 > 0.0)
        {
            _1829 = abs((1.0 - _1784) / _1795);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1784 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1829 = frontier_phi_14_12_ladder;
        }
        float _1999;
        if (_1798 > 0.0)
        {
            _1999 = abs((1.0 - _1788) / _1798);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1788 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1999 = frontier_phi_23_19_ladder;
        }
        float _2294;
        if (_1801 > 0.0)
        {
            _2294 = abs((1.0 - _1792) / _1801);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1792 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2294 = frontier_phi_35_30_ladder;
        }
        float _2296 = isnan(_1999) ? _1829 : (isnan(_1829) ? _1999 : min(_1829, _1999));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1795) + _1784;
        float _2302 = (_2297 * _1798) + _1788;
        float _2303 = (_2297 * _1801) + _1792;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1736);
            frontier_phi_13_35_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1817 = frontier_phi_13_35_ladder_2;
        _1819 = frontier_phi_13_35_ladder_1;
        _1821 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_928, _929, _930), _1736);
        _1817 = _1805.x * cbModelParam._m0[1u].y;
        _1819 = _1805.y * cbModelParam._m0[1u].y;
        _1821 = _1805.z * cbModelParam._m0[1u].y;
    }
    float _1825 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1826 = isnan(_1825) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1825 : min(cbModelParam._m0[25u].w, _1825));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1880 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1884 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1888 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1891 = fma(_930, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928));
        float _1894 = fma(_930, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928));
        float _1897 = fma(_930, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928));
        float _2004;
        if (_1891 > 0.0)
        {
            _2004 = abs((1.0 - _1880) / _1891);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1880 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2004 = frontier_phi_25_21_ladder;
        }
        float _2321;
        if (_1894 > 0.0)
        {
            _2321 = abs((1.0 - _1884) / _1894);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1884 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2321 = frontier_phi_37_32_ladder;
        }
        float _2648;
        if (_1897 > 0.0)
        {
            _2648 = abs((1.0 - _1888) / _1897);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1888 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2648 = frontier_phi_47_44_ladder;
        }
        float _2650 = isnan(_2321) ? _2004 : (isnan(_2004) ? _2321 : min(_2004, _2321));
        float _2651 = isnan(_2648) ? _2650 : (isnan(_2650) ? _2648 : min(_2650, _2648));
        float _2655 = (_2651 * _1891) + _1880;
        float _2656 = (_2651 * _1894) + _1884;
        float _2657 = (_2651 * _1897) + _1888;
        float _2658 = _2651 * 9.9999997473787516355514526367188e-05;
        float _2659 = (-1.0) - _2658;
        float _2661 = _2658 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2657 > _2661) || ((_2657 < _2659) || ((_2656 > _2661) || ((_2656 < _2659) || ((_2655 < _2659) || (_2655 > _2661))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2657, cbModelParam._m0[17u].z, fma(_2656, cbModelParam._m0[17u].y, _2655 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2657, cbModelParam._m0[18u].z, fma(_2656, cbModelParam._m0[18u].y, _2655 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2657, cbModelParam._m0[19u].z, fma(_2656, cbModelParam._m0[19u].y, _2655 * cbModelParam._m0[19u].x))), _1826);
            frontier_phi_22_47_ladder = _2775.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2775.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2775.x * cbModelParam._m0[1u].z;
        }
        _1916 = frontier_phi_22_47_ladder_2;
        _1918 = frontier_phi_22_47_ladder_1;
        _1920 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_928, _929, _930), _1826);
        _1916 = _1900.x * cbModelParam._m0[1u].z;
        _1918 = _1900.y * cbModelParam._m0[1u].z;
        _1920 = _1900.z * cbModelParam._m0[1u].z;
    }
    float _1932 = ((((1.0 - _949) * ((_936 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_949 * _936)) * _920;
    float _1933 = _1932 * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1934 = _1932 * ((cbModelParam._m0[1u].w * (_1918 - _1819)) + _1819);
    float _1935 = _1932 * ((cbModelParam._m0[1u].w * (_1920 - _1821)) + _1821);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1934, cbSceneParam._m0[89u].y, _1933 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1934, cbSceneParam._m0[90u].y, _1933 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1934, cbSceneParam._m0[91u].y, _1933 * cbSceneParam._m0[91u].x));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1991 = _1978 / _1990;
    float _1992 = _1982 / _1990;
    float _1993 = _1986 / _1990;
    float _2140;
    float _2141;
    float _2142;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2020 = ((uint(_1993 > cbSceneParam._m0[59u].y) + uint(_1993 > cbSceneParam._m0[59u].x)) + uint(_1993 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2021 = _2020 + 43u;
        uint _2029 = _2020 + 44u;
        uint _2037 = _2020 + 45u;
        uint _2045 = _2020 + 46u;
        float _2056 = fma(_1990, cbSceneParam._m0[_2021].w, fma(_1986, cbSceneParam._m0[_2021].z, fma(_1982, cbSceneParam._m0[_2021].y, _1978 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1990, cbSceneParam._m0[_2029].w, fma(_1986, cbSceneParam._m0[_2029].z, fma(_1982, cbSceneParam._m0[_2029].y, _1978 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1990, cbSceneParam._m0[_2045].w, fma(_1986, cbSceneParam._m0[_2045].z, fma(_1982, cbSceneParam._m0[_2045].y, _1978 * cbSceneParam._m0[_2045].x)));
        float _2073 = cbSceneParam._m0[33u].z * _2068;
        float _2075 = cbSceneParam._m0[33u].w * _2068;
        float _2078 = fma(_1990, cbSceneParam._m0[_2037].w, fma(_1986, cbSceneParam._m0[_2037].z, fma(_1982, cbSceneParam._m0[_2037].y, _1978 * cbSceneParam._m0[_2037].x))) / _2068;
        float _2126 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
        float _4446 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2133 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 + _2056) / _2068, (_2075 + _2060) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 + _2056) / _2068, (_2060 - _2073) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2073) / _2068, (_2060 - _2075) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2075) / _2068, (_2073 + _2060) / _2068), _2078), 0.0)).x), vec4(0.25)));
        _2140 = 1.0 - (_2133 * cbSceneParam._m0[34u].x);
        _2141 = 1.0 - (_2133 * cbSceneParam._m0[34u].y);
        _2142 = 1.0 - (_2133 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2140 = 1.0;
        _2141 = 1.0;
        _2142 = 1.0;
    }
    float _2206;
    float _2208;
    float _2210;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2194 = fma(_1990, cbSceneParam._m0[63u].w, fma(_1986, cbSceneParam._m0[63u].z, fma(_1982, cbSceneParam._m0[63u].y, _1978 * cbSceneParam._m0[63u].x)));
        float _2195 = fma(_1990, cbSceneParam._m0[60u].w, fma(_1986, cbSceneParam._m0[60u].z, fma(_1982, cbSceneParam._m0[60u].y, _1978 * cbSceneParam._m0[60u].x))) / _2194;
        float _2196 = fma(_1990, cbSceneParam._m0[61u].w, fma(_1986, cbSceneParam._m0[61u].z, fma(_1982, cbSceneParam._m0[61u].y, _1978 * cbSceneParam._m0[61u].x))) / _2194;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2195 >= cbSceneParam._m0[64u].x) && (_2196 >= cbSceneParam._m0[64u].y)) && (_2195 <= cbSceneParam._m0[64u].z)) && (_2196 <= cbSceneParam._m0[64u].w))
        {
            float _2334 = fma(_1990, cbSceneParam._m0[62u].w, fma(_1986, cbSceneParam._m0[62u].z, fma(_1982, cbSceneParam._m0[62u].y, _1978 * cbSceneParam._m0[62u].x))) / _2194;
            float _2338 = isnan(cbSceneParam._m0[41u].w) ? _2334 : (isnan(_2334) ? cbSceneParam._m0[41u].w : max(_2334, cbSceneParam._m0[41u].w));
            float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
            float _4462 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
            float _2388 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2195, cbSceneParam._m0[33u].w + _2196), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2195, _2196 - cbSceneParam._m0[33u].z), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].z, _2196 - cbSceneParam._m0[33u].w), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2196), _2338), 0.0)).x), vec4(0.25)));
            float _2392 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
            float _2393 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
            float _2394 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2394) ? _2142 : (isnan(_2142) ? _2394 : min(_2142, _2394));
            frontier_phi_34_33_ladder_1 = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_34_33_ladder_2 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
        }
        else
        {
            frontier_phi_34_33_ladder = _2142;
            frontier_phi_34_33_ladder_1 = _2141;
            frontier_phi_34_33_ladder_2 = _2140;
        }
        _2206 = frontier_phi_34_33_ladder_2;
        _2208 = frontier_phi_34_33_ladder_1;
        _2210 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2206 = _2140;
        _2208 = _2141;
        _2210 = _2142;
    }
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _920 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2253 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2257 = _2217 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_770, _771, _772));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_770, _771, _772));
    float _4498 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4509 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2234].x * _2240) * _2278) + (((cbLight._m0[_2244].x * _2206) * _2253) * _2276);
    float _2286 = ((_2240 * cbLight._m0[_2234].y) * _2278) + (((cbLight._m0[_2244].y * _2208) * _2253) * _2276);
    float _2287 = ((_2240 * cbLight._m0[_2234].z) * _2278) + (((cbLight._m0[_2244].z * _2210) * _2253) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2293)
    {
        _2395 = _2285;
        _2397 = _2286;
        _2399 = _2287;
    }
    else
    {
        uint _2403 = _2217 + 6u;
        float _2419 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4520 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2422 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2395 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2285;
        _2397 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2286;
        _2399 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2287;
    }
    bool _2402 = _2291.y == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2402)
    {
        _2457 = _2395;
        _2459 = _2397;
        _2461 = _2399;
    }
    else
    {
        uint _2619 = _2217 + 7u;
        float _2635 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2636 = _2635 * _2635;
        float _4536 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2637 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2638 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2457 = (((cbLight._m0[_2619].x * 0.3183098733425140380859375) * _2637) * _2638) + _2395;
        _2459 = (((cbLight._m0[_2619].y * 0.3183098733425140380859375) * _2637) * _2638) + _2397;
        _2461 = (((cbLight._m0[_2619].z * 0.3183098733425140380859375) * _2637) * _2638) + _2399;
    }
    uint _2464 = _2217 + 8u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _773) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2217].x + _849;
    float _2480 = cbLight._m0[_2217].y + _850;
    float _2481 = cbLight._m0[_2217].z + _851;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2217].xyz));
    float _4552 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _4563 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2493 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _2494 = dot(vec3(_770, _771, _772), vec3(_2486, _2487, _2488));
    float _4574 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2486, _2487, _2488));
    float _4585 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2478 * _2478;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2517 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2518 = 1.0 - _2478;
    float _2529 = (0.5 / (((_2493 * ((_2492 * _2518) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2518) + _2478) * _2492))) * _2492;
    float _4596 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    uint _2545 = _2217 + 9u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _773) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2257].x + _849;
    float _2559 = cbLight._m0[_2257].y + _850;
    float _2560 = cbLight._m0[_2257].z + _851;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2257].xyz));
    float _4607 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2572 = dot(vec3(_770, _771, _772), vec3(_2565, _2566, _2567));
    float _4618 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2576 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2565, _2566, _2567));
    float _4629 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2580 = _2557 * _2557;
    float _2584 = ((_2575 * _2575) * (_2580 + (-1.0))) + 1.0;
    float _2593 = (exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2594 = 1.0 - _2557;
    float _2604 = (0.5 / (((_2493 * ((_2571 * _2594) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2594) + _2557) * _2571))) * _2571;
    float _4640 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
    float _2606 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2580 / ((_2584 * _2584) * 3.141590118408203125));
    float _2616 = (((_2593 * cbLight._m0[_2545].x) * _2606) * _2240) + ((((cbLight._m0[_2464].x * _2206) * _2517) * _2531) * _2253);
    float _2617 = (((_2593 * cbLight._m0[_2545].y) * _2606) * _2240) + ((((cbLight._m0[_2464].y * _2208) * _2517) * _2531) * _2253);
    float _2618 = (((_2593 * cbLight._m0[_2545].z) * _2606) * _2240) + ((((cbLight._m0[_2464].z * _2210) * _2517) * _2531) * _2253);
    float _2674;
    float _2676;
    float _2678;
    if (_2293)
    {
        _2674 = _2616;
        _2676 = _2617;
        _2678 = _2618;
    }
    else
    {
        uint _2680 = _2217 + 2u;
        uint _2684 = _2217 + 10u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _773) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _849;
        float _2701 = cbLight._m0[_2680].y + _850;
        float _2702 = cbLight._m0[_2680].z + _851;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2680].xyz));
        float _4651 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _2714 = dot(vec3(_770, _771, _772), vec3(_2707, _2708, _2709));
        float _4662 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4673 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2736 = 1.0 - _2699;
        float _2746 = (0.5 / (((_2493 * ((_2713 * _2736) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2736) + _2699) * _2713))) * _2713;
        float _4684 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2674 = (((_2735 * cbLight._m0[_2684].x) * _2748) * _2749) + _2616;
        _2676 = (((_2735 * cbLight._m0[_2684].y) * _2748) * _2749) + _2617;
        _2678 = (((_2735 * cbLight._m0[_2684].z) * _2748) * _2749) + _2618;
    }
    float _2780;
    float _2782;
    float _2784;
    if (_2402)
    {
        _2780 = _2674;
        _2782 = _2676;
        _2784 = _2678;
    }
    else
    {
        uint _2791 = _2217 + 3u;
        uint _2795 = _2217 + 11u;
        float _2809 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2791].w)) * _773) * 0.949999988079071044921875);
        float _2810 = _2809 * _2809;
        float _2811 = cbLight._m0[_2791].x + _849;
        float _2812 = cbLight._m0[_2791].y + _850;
        float _2813 = cbLight._m0[_2791].z + _851;
        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
        float _2818 = _2817 * _2811;
        float _2819 = _2817 * _2812;
        float _2820 = _2817 * _2813;
        float _2821 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2791].xyz));
        float _4700 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2825 = dot(vec3(_770, _771, _772), vec3(_2818, _2819, _2820));
        float _4711 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2829 = dot(vec3(cbLight._m0[_2791].xyz), vec3(_2818, _2819, _2820));
        float _4722 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2833 = _2810 * _2810;
        float _2837 = ((_2828 * _2828) * (_2833 + (-1.0))) + 1.0;
        float _2846 = (exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2847 = 1.0 - _2810;
        float _2857 = (0.5 / (((_2493 * ((_2824 * _2847) + _2810)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2847) + _2810) * _2824))) * _2824;
        float _4733 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
        float _2859 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2833 / ((_2837 * _2837) * 3.141590118408203125));
        float _2860 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2780 = (((_2846 * cbLight._m0[_2795].x) * _2859) * _2860) + _2674;
        _2782 = (((_2846 * cbLight._m0[_2795].y) * _2859) * _2860) + _2676;
        _2784 = (((_2846 * cbLight._m0[_2795].z) * _2859) * _2860) + _2678;
    }
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_2215.y == 0u)
    {
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.x;
        uint _2893 = uint((float(_2881.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2882))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2882)));
        float _2903 = (log2(_1993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2904 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        uint _2907 = uint(isnan(14.0) ? _2904 : (isnan(_2904) ? 14.0 : min(_2904, 14.0)));
        uvec4 _2912 = texelFetch(g_lightClusterGridBuffer, int(((_2907 << 2u) + (_2893 << 6u)) >> 2u));
        uint _2913 = _2912.x;
        uint _2914 = _2881.z;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((((1u << ((_2914 >> 4u) & 15u)) + 4294967295u) & _2913) == 0u) || ((_2914 & 240u) == 0u))
        {
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
        }
        else
        {
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3154)
                {
                    frontier_phi_66_pred = _3143;
                    frontier_phi_66_pred_1 = _3142;
                    frontier_phi_66_pred_2 = _3141;
                    frontier_phi_66_pred_3 = _3140;
                    frontier_phi_66_pred_4 = _3139;
                    frontier_phi_66_pred_5 = _3138;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3153;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3144 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _1991;
                        float _3329 = _3288.y - _1992;
                        float _3330 = _3288.z - _1993;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_876, _879, _882), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4759 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3359 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _1991;
                        float _3364 = (-0.0) - _1992;
                        float _3365 = (-0.0) - _1993;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3379 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3380 = 1.0 - _936;
                        float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                        float _3388 = _3387 * _3387;
                        float _3389 = _3388 * _3388;
                        float _3390 = _3370 + _3335;
                        float _3391 = _3371 + _3336;
                        float _3392 = _3372 + _3337;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3400 = dot(vec3(_876, _879, _882), vec3(_3370, _3371, _3372));
                        float _4775 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3404 = dot(vec3(_876, _879, _882), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                        float _4786 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
                        float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                        float _3412 = _3348 * _3388;
                        float _3413 = _3412 * _3412;
                        float _3416 = ((1.0 - _3413) * _3338) + _3413;
                        float _4797 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                        float _3417 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                        float _3418 = 1.0 - _3388;
                        float _3428 = (0.5 / (((_3417 * ((_3403 * _3418) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3388) * _3403))) * _3417;
                        float _4808 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3439 = (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) / ((_3411 * _3411) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3197 = (_3359 * _3307.x) + _3265;
                        _3198 = (_3359 * _3307.y) + _3266;
                        _3199 = (_3359 * _3307.z) + _3267;
                        _3194 = (_3439 * _3324.x) + _3262;
                        _3195 = (_3439 * _3324.y) + _3263;
                        _3196 = (_3439 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3198;
                    frontier_phi_66_pred_2 = _3197;
                    frontier_phi_66_pred_3 = _3196;
                    frontier_phi_66_pred_4 = _3195;
                    frontier_phi_66_pred_5 = _3194;
                }
                _3004 = frontier_phi_66_pred;
                _3002 = frontier_phi_66_pred_1;
                _3000 = frontier_phi_66_pred_2;
                _2998 = frontier_phi_66_pred_3;
                _2996 = frontier_phi_66_pred_4;
                _2994 = frontier_phi_66_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2994;
                    _3139 = _2996;
                    _3140 = _2998;
                    _3141 = _3000;
                    _3142 = _3002;
                    _3143 = _3004;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
        }
        uvec4 _3007 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3008 = _3007.z;
        uint _3010 = (_3008 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3010) & _2913) == 0u)
        {
            _3106 = _2993;
            _3108 = _2995;
            _3110 = _2997;
            _3112 = _2999;
            _3114 = _3001;
            _3116 = _3003;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
            float _3132 = _3131 * _1991;
            float _3133 = _3131 * _1992;
            float _3134 = _3131 * _1993;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3010 < ((_3008 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3245 = _2993;
                float _3246 = _2995;
                float _3247 = _2997;
                float _3248 = _2999;
                float _3249 = _3001;
                float _3250 = _3003;
                uint _3251 = _3010;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3261)
                    {
                        frontier_phi_72_pred = _3250;
                        frontier_phi_72_pred_1 = _3249;
                        frontier_phi_72_pred_2 = _3248;
                        frontier_phi_72_pred_3 = _3247;
                        frontier_phi_72_pred_4 = _3246;
                        frontier_phi_72_pred_5 = _3245;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3457 = _3245;
                        float _3458 = _3246;
                        float _3459 = _3247;
                        float _3460 = _3248;
                        float _3461 = _3249;
                        float _3462 = _3250;
                        uint _3463 = _3260;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3547;
                        float _3593;
                        bool _3594;
                        for (;;)
                        {
                            uint _3474 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3474 * 40u) + 20u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3474 * 40u) + 24u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3568 = (_3474 * 40u) + 28u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3593 = fma(_1993, _3581.z, fma(_1992, _3581.y, _3581.x * _1991)) + _3581.w;
                            _3594 = !((fma(_1993, _3562.z, fma(_1992, _3562.y, _3562.x * _1991)) + _3562.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3594)
                            {
                                float _3621 = _3489.x - _1991;
                                float _3622 = _3489.y - _1992;
                                float _3623 = _3489.z - _1993;
                                float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                                float _3627 = inversesqrt(_3624);
                                float _3628 = _3627 * _3621;
                                float _3629 = _3627 * _3622;
                                float _3630 = _3627 * _3623;
                                float _3634 = 1.0 - (_3624 / (_3490 * _3490));
                                float _4819 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3639 = sqrt(_3624) * _3505.w;
                                float _3641 = 1.39999997615814208984375 / (_3639 + 1.39999997615814208984375);
                                float _3642 = _3641 * _3641;
                                float _3645 = ((1.0 - _3642) * dot(vec3(_3628, _3629, _3630), vec3(_876, _879, _882))) + _3642;
                                float _3648 = _3639 * _3639;
                                float _3652 = (fma(_1993, _3532.z, fma(_1992, _3532.y, _3532.x * _1991)) + _3532.w) / _3593;
                                float _3653 = (fma(_1993, _3547.z, fma(_1992, _3547.y, _3547.x * _1991)) + _3547.w) / _3593;
                                float _3657 = 1.0 - dot(vec2(_3652, _3653), vec2(_3652, _3653));
                                float _4835 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3659 = _3658 * (((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3635) / ((_3648 * 0.699999988079071044921875) + 1.0));
                                float _3671 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                                float _3672 = 1.0 - _936;
                                float _3679 = sqrt(1.0 - ((1.0 - (_3672 * _3672)) * (1.0 - (_3671 * _3671))));
                                float _3680 = _3679 * _3679;
                                float _3681 = _3680 * _3680;
                                float _3682 = _3628 - _3132;
                                float _3683 = _3629 - _3133;
                                float _3684 = _3630 - _3134;
                                float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                                float _3692 = dot(vec3(_876, _879, _882), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4846 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3696 = dot(vec3(_876, _879, _882), vec3(_3688 * _3682, _3688 * _3683, _3688 * _3684));
                                float _4857 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                                float _3703 = ((_3699 * _3699) * (_3681 + (-1.0))) + 1.0;
                                float _3704 = _3641 * _3680;
                                float _3705 = _3704 * _3704;
                                float _3711 = ((1.0 - _3705) * dot(vec3(_876, _879, _882), vec3(_3628, _3629, _3630))) + _3705;
                                float _4868 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3713 = 1.0 - _3680;
                                float _3723 = (0.5 / (((_3712 * ((_3695 * _3713) + _3680)) + 9.9999999392252902907785028219223e-09) + (((_3712 * _3713) + _3680) * _3695))) * _3712;
                                float _4879 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3733 = (_3658 * _3635) * (((_3681 * 3.1415927410125732421875) * (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0)))) / ((_3703 * _3703) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3659 * _3505.y;
                                frontier_phi_78_pred_1 = _3659 * _3505.x;
                                frontier_phi_78_pred_2 = _3733 * _3517.z;
                                frontier_phi_78_pred_3 = _3733 * _3517.y;
                                frontier_phi_78_pred_4 = _3733 * _3517.x;
                                frontier_phi_78_pred_5 = _3659 * _3505.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_78_pred;
                            _3740 = frontier_phi_78_pred_1;
                            _3739 = frontier_phi_78_pred_2;
                            _3738 = frontier_phi_78_pred_3;
                            _3737 = frontier_phi_78_pred_4;
                            _3742 = frontier_phi_78_pred_5;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3449;
                        frontier_phi_72_pred_1 = _3448;
                        frontier_phi_72_pred_2 = _3447;
                        frontier_phi_72_pred_3 = _3446;
                        frontier_phi_72_pred_4 = _3445;
                        frontier_phi_72_pred_5 = _3444;
                    }
                    _3117 = frontier_phi_72_pred;
                    _3115 = frontier_phi_72_pred_1;
                    _3113 = frontier_phi_72_pred_2;
                    _3111 = frontier_phi_72_pred_3;
                    _3109 = frontier_phi_72_pred_4;
                    _3107 = frontier_phi_72_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3107;
                        _3246 = _3109;
                        _3247 = _3111;
                        _3248 = _3113;
                        _3249 = _3115;
                        _3250 = _3117;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3117;
                frontier_phi_60_61_ladder_1 = _3115;
                frontier_phi_60_61_ladder_2 = _3111;
                frontier_phi_60_61_ladder_3 = _3109;
                frontier_phi_60_61_ladder_4 = _3107;
                frontier_phi_60_61_ladder_5 = _3113;
            }
            else
            {
                frontier_phi_60_61_ladder = _3003;
                frontier_phi_60_61_ladder_1 = _3001;
                frontier_phi_60_61_ladder_2 = _2997;
                frontier_phi_60_61_ladder_3 = _2995;
                frontier_phi_60_61_ladder_4 = _2993;
                frontier_phi_60_61_ladder_5 = _2999;
            }
            _3106 = frontier_phi_60_61_ladder_4;
            _3108 = frontier_phi_60_61_ladder_3;
            _3110 = frontier_phi_60_61_ladder_2;
            _3112 = frontier_phi_60_61_ladder_5;
            _3114 = frontier_phi_60_61_ladder_1;
            _3116 = frontier_phi_60_61_ladder;
        }
        float _3121 = isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0));
        _2926 = (_3121 * _3112) + _2457;
        _2928 = (_3121 * _3114) + _2459;
        _2930 = (_3121 * _3116) + _2461;
        _2932 = ((_3106 * 0.039999999105930328369140625) * _3121) + _2780;
        _2934 = ((_3108 * 0.039999999105930328369140625) * _3121) + _2782;
        _2936 = ((_3110 * 0.039999999105930328369140625) * _3121) + _2784;
    }
    else
    {
        _2926 = _2457;
        _2928 = _2459;
        _2930 = _2461;
        _2932 = _2780;
        _2934 = _2782;
        _2936 = _2784;
    }
    float _4895 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4906 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4917 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    uint _2956 = _277 + 6u;
    float _2964 = _857 / cbSceneParam._m0[86u].x;
    float _2965 = _858 / cbSceneParam._m0[86u].y;
    vec4 _2979 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2964, _2965, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2981 = _2979.x;
    float _2982 = _2979.y;
    float _2983 = _2979.z;
    float _2984 = _2979.w;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _3018 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _3019 = _3018 / _791;
        float _3030 = _3019 * _842;
        float _3031 = _843 * _3019;
        float _3032 = (-0.0) - _3031;
        float _3034 = _3019 * _844;
        float _3036 = (cbSceneParam._m0[77u].w * _3032) / _3018;
        float _3037 = _3036 + cbSceneParam._m0[79u].w;
        float _3038 = cbSceneParam._m0[79u].w - _3031;
        float _3044 = sqrt(((_3030 * _3030) + (_3031 * _3031)) + (_3034 * _3034));
        float _3047 = (1.0 - (cbSceneParam._m0[77u].w / _3018)) * _3044;
        float _3052 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3054 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3032 - _3036) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3037 > 0.0) ? exp2(_3052 * _3037) : (2.0 - exp2(_3054 * _3037))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3047;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : max(_3037, _3038));
            float _3169 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : min(_3037, _3038));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3207 = ((abs(_3044 / _3032) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3052 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3052 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3054 * _3178) - exp2(_3054 * _3179)) * _3167))) + (_3047 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2964, _2965, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2984);
        _3056 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2981;
        _3058 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2982;
        _3060 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2983;
        _3062 = _3218 * _2984;
    }
    else
    {
        _3056 = _2981;
        _3058 = _2982;
        _3060 = _2983;
        _3062 = _2984;
    }
    float _3074 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3075 = _3074 == 3.0;
    float _3076 = log2(_3062);
    float _3083 = exp2(_3076 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2926 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _920))) + ((_2932 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _3084 = exp2(_3076 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0))) * (_2928 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _920))) + ((_2934 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _3085 = exp2(_3076 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2930 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _920))) + ((_2936 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1725)) * cbPerFrame._m0[3u].x));
    float _3094 = (_3074 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3094 * (_3075 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.y = _3094 * (_3075 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.z = _3094 * (_3075 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.w = cbInstanceData._m0[_2956].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2956].w;
}


