#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1306;
float _3949;
float _3950;
float _3951;
float _3952;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3961 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _434 = _430.z;
    float _443 = ((_413.z - _434) * _386) + _434;
    float _446 = ((((_413.x - _432) * _386) + _432) * 2.0) + (-1.0);
    float _448 = ((((_413.y - _433) * _386) + _433) * 2.0) + (-1.0);
    float _449 = dot(vec2(_446, _448), vec2(_446, _448));
    float _3972 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _454 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _482 = (((_470.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _483 = (((_470.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _448;
    float _486 = fma(_454, _239, fma(_483, _246, _482 * _232));
    float _489 = fma(_454, _240, fma(_483, _247, _482 * _233));
    float _492 = fma(_454, _241, fma(_483, _248, _482 * _234));
    float _496 = inversesqrt(dot(vec3(_486, _489, _492), vec3(_486, _489, _492)));
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _527 = _525.x;
    float _528 = 1.0 - _527;
    float _532 = ((_527 - _528) * cbMtdParam._m0[24u].z) + _528;
    float _534 = (cbMtdParam._m0[19u].x + dot(vec4(_496 * _486, _496 * _489, _496 * _492, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_532 * cbMtdParam._m0[21u].z);
    float _3983 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _537 = (-0.0) - cbMtdParam._m0[24u].y;
    float _539 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _539 : (isnan(_539) ? 1.0 : min(_539, 1.0));
    float _547 = _535 - ((_535 * TEXCOORD_8.x) * _540);
    float _548 = _535 - ((_535 * TEXCOORD_8.y) * _540);
    float _549 = _535 - ((_535 * TEXCOORD_8.z) * _540);
    float _556 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _560 = ((isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : min(_556, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _568 = (_560 - (((_532 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _560))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4014 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _573 = ((_547 * (cbMtdParam._m0[17u].x - _393)) * _569) + _393;
    float _574 = ((_548 * (cbMtdParam._m0[17u].y - _394)) * _569) + _394;
    float _575 = ((_549 * (cbMtdParam._m0[17u].z - _395)) * _569) + _395;
    vec4 _587 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _589 = _587.x;
    float _590 = 1.0 - _589;
    float _617 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_589 - _590) * cbMtdParam._m0[24u].w) + _590) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4025 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _626 = ((((cbMtdParam._m0[10u].x - _573) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _618) + _573;
    float _627 = ((((cbMtdParam._m0[10u].y - _574) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _618) + _574;
    float _628 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _575)) * _618) + _575;
    float _632 = (cbMtdParam._m0[19u].w * (_470.z - _443)) + _443;
    vec4 _646 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _653 = (_646.x * 2.0) + (-1.0);
    float _654 = (_646.y * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _4036 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _664 = (((_646.z - _632) * _547) * _569) + _632;
    float _667 = ((cbMtdParam._m0[23u].y - _664) * _618) + _664;
    vec4 _686 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _692 = (_686.x * 2.0) + (-1.0);
    float _693 = (_686.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _4047 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _714 = (((cbMtdParam._m0[21u].x * _482) + ((_653 - _482) * _547)) * _569) + _482;
    float _715 = (((cbMtdParam._m0[21u].x * _483) + ((_654 - _483) * _548)) * _569) + _483;
    float _716 = (((sqrt(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) - _454) * _549) * _569) + _454;
    float _727 = (((_692 - _714) + (_714 * cbMtdParam._m0[22u].z)) * _618) + _714;
    float _728 = (((_693 - _715) + (_715 * cbMtdParam._m0[22u].z)) * _618) + _715;
    float _729 = ((sqrt(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) - _716) * _618) + _716;
    float _731 = cbMtdParam._m0[22u].x + _470.w;
    float _734 = fma(_729, _239, fma(_728, _246, _727 * _232));
    float _737 = fma(_729, _240, fma(_728, _247, _727 * _233));
    float _740 = fma(_729, _241, fma(_728, _248, _727 * _234));
    float _744 = inversesqrt(dot(vec3(_734, _737, _740), vec3(_734, _737, _740)));
    float _745 = _744 * _734;
    float _746 = _744 * _737;
    float _747 = _744 * _740;
    float _4058 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _748 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4080 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4091 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _4102 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _766 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _817 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _807);
    float _818 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _807);
    float _819 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _807);
    float _823 = inversesqrt(dot(vec3(_817, _818, _819), vec3(_817, _818, _819)));
    float _824 = _817 * _823;
    float _825 = _818 * _823;
    float _826 = _819 * _823;
    vec4 _831 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _833 = _831.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _987 = sqrt(((_817 * _817) + (_818 * _818)) + (_819 * _819));
        float _993 = (cbMatDynParam._m0[5u].x * _987) + cbMatDynParam._m0[5u].y;
        float _4113 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _998 = (cbMatDynParam._m0[5u].z * _987) + cbMatDynParam._m0[5u].w;
        float _4124 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) - _994)) + _994) < ((_833 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_747, cbSceneParam._m0[5u].z, fma(_746, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _745));
    float _866 = fma(_747, cbSceneParam._m0[6u].z, fma(_746, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _745));
    float _869 = fma(_747, cbSceneParam._m0[7u].z, fma(_746, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _745));
    uint _882 = _251 + 9u;
    uint _883 = _882 + uint(cbMatDynParam._m0[0u].w);
    float _889 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * cbInstanceData._m0[_883].x;
    float _890 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) * cbInstanceData._m0[_883].y;
    float _891 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_883].z;
    float _4135 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _892 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _4146 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _4157 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    vec4 _903 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _907 = ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * TEXCOORD_5.w) * _903.x;
    float _908 = dot(vec3(_745, _746, _747), vec3(_824, _825, _826));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _745) - _824;
    float _916 = (_911 * _746) - _825;
    float _917 = (_911 * _747) - _826;
    float _921 = abs(dot(vec3(_824, _825, _826), vec3(_745, _746, _747)));
    float _4168 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _923 = sqrt(_748);
    float _936 = exp2((_923 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_923 * 3.0));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_976, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968));
        float _1034 = fma(_976, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968));
        float _1038 = fma(_976, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968));
        float _1063 = _968 + _745;
        float _1064 = _972 + _746;
        float _1065 = _976 + _747;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1030;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1034;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1038;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_745, _746, _747), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _4216 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_745, _746, _747), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _4227 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4238 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _4249 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_745, _746, _747), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4282 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1348 = fma(_976, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968));
        float _1352 = fma(_976, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968));
        float _1356 = fma(_976, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968));
        float _1379 = _968 + _745;
        float _1380 = _972 + _746;
        float _1381 = _976 + _747;
        float _1391 = fma(_1381, cbModelParam._m0[30u].z, fma(_1380, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1379)) - _1348;
        float _1392 = fma(_1381, cbModelParam._m0[31u].z, fma(_1380, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1379)) - _1352;
        float _1393 = fma(_1381, cbModelParam._m0[32u].z, fma(_1380, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1379)) - _1356;
        float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
        float _1410 = ((_1397 * _1391) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1348 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1397 * _1392) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1352 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1397 * _1393) / cbModelParam._m0[35u].z) + ((((((_1356 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1410, _1411, _1412), 0.0);
        float _1447 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1414.x + (-0.5));
        float _1449 = _1447 * (_1414.y + (-0.5));
        float _1450 = _1447 * (_1414.z + (-0.5));
        float _1457 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1421.x + (-0.5));
        float _1459 = _1457 * (_1421.y + (-0.5));
        float _1460 = _1457 * (_1421.z + (-0.5));
        float _1467 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1428.x + (-0.5));
        float _1469 = _1467 * (_1428.y + (-0.5));
        float _1470 = _1467 * (_1428.z + (-0.5));
        float _1477 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1435.x + (-0.5));
        float _1479 = _1477 * (_1435.y + (-0.5));
        float _1480 = _1477 * (_1435.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_745, _746, _747), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4345 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1511 + 1.0))) + _1516) * _1481;
        float _1526 = _1449 * 0.5;
        float _1527 = _1459 * 0.5;
        float _1528 = _1469 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_745, _746, _747), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4378 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1553 + 1.0))) + _1558) * _1482;
        float _1568 = _1450 * 0.5;
        float _1569 = _1460 * 0.5;
        float _1570 = _1470 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_745, _746, _747), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4411 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1595 + 1.0))) + _1600) * _1483;
        _1617 = _1450;
        _1618 = _1449;
        _1619 = _1448;
        _1620 = _1460;
        _1621 = _1459;
        _1622 = _1458;
        _1623 = _1470;
        _1624 = _1469;
        _1625 = _1468;
        _1626 = _1483;
        _1627 = _1482;
        _1628 = _1481;
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1306;
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = _1306;
        _1627 = _1306;
        _1628 = _1306;
        _1629 = 0.0;
        _1630 = 0.0;
        _1631 = 0.0;
    }
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1318)) + _1318;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1320)) + _1320;
    float _1664 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1641));
    float _1685 = _915 * 0.5;
    float _1686 = _916 * 0.5;
    float _1687 = _917 * 0.5;
    float _1688 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1691 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1694 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1728;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1701 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1705 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1709 = dot(vec4(_1685, _1686, _1687, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1716 = dot(vec4(cbModelParam._m0[39u]), vec4(_1685, _1686, _1687, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1739;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1730 = dot(vec4(cbModelParam._m0[40u]), vec4(_1685, _1686, _1687, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1743 = (_1739 * cbModelParam._m0[1u].x) + (_1728 * (1.0 - cbModelParam._m0[1u].x));
    float _1753 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _748);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1753 : min(cbModelParam._m0[25u].z, _1753));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1802 = fma(_976, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968)) + cbModelParam._m0[13u].w;
        float _1806 = fma(_976, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968)) + cbModelParam._m0[14u].w;
        float _1810 = fma(_976, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968)) + cbModelParam._m0[15u].w;
        float _1813 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1816 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1819 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1847;
        if (_1813 > 0.0)
        {
            _1847 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1847 = frontier_phi_17_15_ladder;
        }
        float _2017;
        if (_1816 > 0.0)
        {
            _2017 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2017 = frontier_phi_26_22_ladder;
        }
        float _2312;
        if (_1819 > 0.0)
        {
            _2312 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2312 = frontier_phi_38_33_ladder;
        }
        float _2314 = isnan(_2017) ? _1847 : (isnan(_1847) ? _2017 : min(_1847, _2017));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1813) + _1802;
        float _2320 = (_2315 * _1816) + _1806;
        float _2321 = (_2315 * _1819) + _1810;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2324 = (-1.0) - _2322;
        float _2326 = _2322 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2321 > _2326) || ((_2321 < _2324) || ((_2320 > _2326) || ((_2320 < _2324) || ((_2319 < _2324) || (_2319 > _2326))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2321, cbModelParam._m0[9u].z, fma(_2320, cbModelParam._m0[9u].y, _2319 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2321, cbModelParam._m0[10u].z, fma(_2320, cbModelParam._m0[10u].y, _2319 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2321, cbModelParam._m0[11u].z, fma(_2320, cbModelParam._m0[11u].y, _2319 * cbModelParam._m0[11u].x))), _1754);
            frontier_phi_16_38_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1835 = frontier_phi_16_38_ladder_2;
        _1837 = frontier_phi_16_38_ladder_1;
        _1839 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1754);
        _1835 = _1823.x * cbModelParam._m0[1u].y;
        _1837 = _1823.y * cbModelParam._m0[1u].y;
        _1839 = _1823.z * cbModelParam._m0[1u].y;
    }
    float _1843 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _748);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1843 : min(cbModelParam._m0[25u].w, _1843));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1898 = fma(_976, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968)) + cbModelParam._m0[21u].w;
        float _1902 = fma(_976, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968)) + cbModelParam._m0[22u].w;
        float _1906 = fma(_976, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968)) + cbModelParam._m0[23u].w;
        float _1909 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1912 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1915 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _2022;
        if (_1909 > 0.0)
        {
            _2022 = abs((1.0 - _1898) / _1909);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1898 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2022 = frontier_phi_28_24_ladder;
        }
        float _2339;
        if (_1912 > 0.0)
        {
            _2339 = abs((1.0 - _1902) / _1912);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1902 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2339 = frontier_phi_40_35_ladder;
        }
        float _2666;
        if (_1915 > 0.0)
        {
            _2666 = abs((1.0 - _1906) / _1915);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1906 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2666 = frontier_phi_50_47_ladder;
        }
        float _2668 = isnan(_2339) ? _2022 : (isnan(_2022) ? _2339 : min(_2022, _2339));
        float _2669 = isnan(_2666) ? _2668 : (isnan(_2668) ? _2666 : min(_2668, _2666));
        float _2673 = (_2669 * _1909) + _1898;
        float _2674 = (_2669 * _1912) + _1902;
        float _2675 = (_2669 * _1915) + _1906;
        float _2676 = _2669 * 9.9999997473787516355514526367188e-05;
        float _2677 = (-1.0) - _2676;
        float _2679 = _2676 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2675 > _2679) || ((_2675 < _2677) || ((_2674 > _2679) || ((_2674 < _2677) || ((_2673 < _2677) || (_2673 > _2679))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2675, cbModelParam._m0[17u].z, fma(_2674, cbModelParam._m0[17u].y, _2673 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2675, cbModelParam._m0[18u].z, fma(_2674, cbModelParam._m0[18u].y, _2673 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2675, cbModelParam._m0[19u].z, fma(_2674, cbModelParam._m0[19u].y, _2673 * cbModelParam._m0[19u].x))), _1844);
            frontier_phi_25_50_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1934 = frontier_phi_25_50_ladder_2;
        _1936 = frontier_phi_25_50_ladder_1;
        _1938 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1844);
        _1934 = _1918.x * cbModelParam._m0[1u].z;
        _1936 = _1918.y * cbModelParam._m0[1u].z;
        _1938 = _1918.z * cbModelParam._m0[1u].z;
    }
    float _1950 = ((((1.0 - _936) * ((_923 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_936 * _923)) * _907;
    float _1951 = _1950 * ((cbModelParam._m0[1u].w * (_1934 - _1835)) + _1835);
    float _1952 = _1950 * ((cbModelParam._m0[1u].w * (_1936 - _1837)) + _1837);
    float _1953 = _1950 * ((cbModelParam._m0[1u].w * (_1938 - _1839)) + _1839);
    float _1956 = fma(_1953, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1951 * cbSceneParam._m0[89u].x));
    float _1959 = fma(_1953, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1951 * cbSceneParam._m0[90u].x));
    float _1962 = fma(_1953, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1951 * cbSceneParam._m0[91u].x));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2004 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2009 = _1996 / _2008;
    float _2010 = _2000 / _2008;
    float _2011 = _2004 / _2008;
    float _2158;
    float _2159;
    float _2160;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2038 = ((uint(_2011 > cbSceneParam._m0[59u].y) + uint(_2011 > cbSceneParam._m0[59u].x)) + uint(_2011 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2039 = _2038 + 43u;
        uint _2047 = _2038 + 44u;
        uint _2055 = _2038 + 45u;
        uint _2063 = _2038 + 46u;
        float _2074 = fma(_2008, cbSceneParam._m0[_2039].w, fma(_2004, cbSceneParam._m0[_2039].z, fma(_2000, cbSceneParam._m0[_2039].y, _1996 * cbSceneParam._m0[_2039].x)));
        float _2078 = fma(_2008, cbSceneParam._m0[_2047].w, fma(_2004, cbSceneParam._m0[_2047].z, fma(_2000, cbSceneParam._m0[_2047].y, _1996 * cbSceneParam._m0[_2047].x)));
        float _2086 = fma(_2008, cbSceneParam._m0[_2063].w, fma(_2004, cbSceneParam._m0[_2063].z, fma(_2000, cbSceneParam._m0[_2063].y, _1996 * cbSceneParam._m0[_2063].x)));
        float _2091 = cbSceneParam._m0[33u].z * _2086;
        float _2093 = cbSceneParam._m0[33u].w * _2086;
        float _2096 = fma(_2008, cbSceneParam._m0[_2055].w, fma(_2004, cbSceneParam._m0[_2055].z, fma(_2000, cbSceneParam._m0[_2055].y, _1996 * cbSceneParam._m0[_2055].x))) / _2086;
        float _2144 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
        float _4537 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2151 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 + _2074) / _2086, (_2093 + _2078) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 + _2074) / _2086, (_2078 - _2091) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2091) / _2086, (_2078 - _2093) / _2086), _2096), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2074 - _2093) / _2086, (_2091 + _2078) / _2086), _2096), 0.0)).x), vec4(0.25)));
        _2158 = 1.0 - (_2151 * cbSceneParam._m0[34u].x);
        _2159 = 1.0 - (_2151 * cbSceneParam._m0[34u].y);
        _2160 = 1.0 - (_2151 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2158 = 1.0;
        _2159 = 1.0;
        _2160 = 1.0;
    }
    float _2224;
    float _2226;
    float _2228;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2212 = fma(_2008, cbSceneParam._m0[63u].w, fma(_2004, cbSceneParam._m0[63u].z, fma(_2000, cbSceneParam._m0[63u].y, _1996 * cbSceneParam._m0[63u].x)));
        float _2213 = fma(_2008, cbSceneParam._m0[60u].w, fma(_2004, cbSceneParam._m0[60u].z, fma(_2000, cbSceneParam._m0[60u].y, _1996 * cbSceneParam._m0[60u].x))) / _2212;
        float _2214 = fma(_2008, cbSceneParam._m0[61u].w, fma(_2004, cbSceneParam._m0[61u].z, fma(_2000, cbSceneParam._m0[61u].y, _1996 * cbSceneParam._m0[61u].x))) / _2212;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2213 >= cbSceneParam._m0[64u].x) && (_2214 >= cbSceneParam._m0[64u].y)) && (_2213 <= cbSceneParam._m0[64u].z)) && (_2214 <= cbSceneParam._m0[64u].w))
        {
            float _2352 = fma(_2008, cbSceneParam._m0[62u].w, fma(_2004, cbSceneParam._m0[62u].z, fma(_2000, cbSceneParam._m0[62u].y, _1996 * cbSceneParam._m0[62u].x))) / _2212;
            float _2356 = isnan(cbSceneParam._m0[41u].w) ? _2352 : (isnan(_2352) ? cbSceneParam._m0[41u].w : max(_2352, cbSceneParam._m0[41u].w));
            float _2399 = (cbSceneParam._m0[33u].x - sqrt(((_2010 * _2010) + (_2009 * _2009)) + (_2011 * _2011))) * cbSceneParam._m0[33u].y;
            float _4553 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
            float _2406 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2213, cbSceneParam._m0[33u].w + _2214), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2213, _2214 - cbSceneParam._m0[33u].z), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].z, _2214 - cbSceneParam._m0[33u].w), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2213 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2214), _2356), 0.0)).x), vec4(0.25)));
            float _2410 = 1.0 - (_2406 * cbSceneParam._m0[34u].x);
            float _2411 = 1.0 - (_2406 * cbSceneParam._m0[34u].y);
            float _2412 = 1.0 - (_2406 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
            frontier_phi_37_36_ladder_1 = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
            frontier_phi_37_36_ladder_2 = isnan(_2410) ? _2158 : (isnan(_2158) ? _2410 : min(_2158, _2410));
        }
        else
        {
            frontier_phi_37_36_ladder = _2160;
            frontier_phi_37_36_ladder_1 = _2159;
            frontier_phi_37_36_ladder_2 = _2158;
        }
        _2224 = frontier_phi_37_36_ladder_2;
        _2226 = frontier_phi_37_36_ladder_1;
        _2228 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2224 = _2158;
        _2226 = _2159;
        _2228 = _2160;
    }
    uvec4 _2233 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2235 = _2233.x * 14u;
    uint _2236 = _2235 + 13u;
    float _2243 = _907 + (-1.0);
    float _2248 = (cbLight._m0[_2236].x * _2243) + 1.0;
    float _2249 = (cbLight._m0[_2236].y * _2243) + 1.0;
    float _2250 = (cbLight._m0[_2236].z * _2243) + 1.0;
    float _2251 = (cbLight._m0[_2236].w * _2243) + 1.0;
    uint _2252 = _2235 + 5u;
    float _2258 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2262 = _2235 + 4u;
    float _2271 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
    uint _2275 = _2235 | 1u;
    float _2286 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_745, _746, _747));
    float _2289 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_745, _746, _747));
    float _4589 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _4600 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2294 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * 0.3183098733425140380859375;
    float _2296 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * 0.3183098733425140380859375;
    float _2303 = ((cbLight._m0[_2252].x * _2258) * _2296) + (((cbLight._m0[_2262].x * _2224) * _2271) * _2294);
    float _2304 = ((_2258 * cbLight._m0[_2252].y) * _2296) + (((cbLight._m0[_2262].y * _2226) * _2271) * _2294);
    float _2305 = ((_2258 * cbLight._m0[_2252].z) * _2296) + (((cbLight._m0[_2262].z * _2228) * _2271) * _2294);
    uvec4 _2309 = floatBitsToUint(cbLight._m0[_2235 + 12u]);
    bool _2311 = _2309.x == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2311)
    {
        _2413 = _2303;
        _2415 = _2304;
        _2417 = _2305;
    }
    else
    {
        uint _2421 = _2235 + 6u;
        float _2437 = (dot(vec3(cbLight._m0[_2235 + 2u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4611 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2440 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2413 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2303;
        _2415 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2304;
        _2417 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2305;
    }
    bool _2420 = _2309.y == 0u;
    float _2475;
    float _2477;
    float _2479;
    if (_2420)
    {
        _2475 = _2413;
        _2477 = _2415;
        _2479 = _2417;
    }
    else
    {
        uint _2637 = _2235 + 7u;
        float _2653 = (dot(vec3(cbLight._m0[_2235 + 3u].xyz), vec3(_745, _746, _747)) * 0.5) + 0.5;
        float _2654 = _2653 * _2653;
        float _4627 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2655 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2656 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2475 = (((cbLight._m0[_2637].x * 0.3183098733425140380859375) * _2655) * _2656) + _2413;
        _2477 = (((cbLight._m0[_2637].y * 0.3183098733425140380859375) * _2655) * _2656) + _2415;
        _2479 = (((cbLight._m0[_2637].z * 0.3183098733425140380859375) * _2655) * _2656) + _2417;
    }
    uint _2482 = _2235 + 8u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2235].w)) * _748) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2235].x + _824;
    float _2498 = cbLight._m0[_2235].y + _825;
    float _2499 = cbLight._m0[_2235].z + _826;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2235].xyz));
    float _4643 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _4654 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2511 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2512 = dot(vec3(_745, _746, _747), vec3(_2504, _2505, _2506));
    float _4665 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2516 = dot(vec3(cbLight._m0[_2235].xyz), vec3(_2504, _2505, _2506));
    float _4676 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2520 = _2496 * _2496;
    float _2524 = ((_2515 * _2515) * (_2520 + (-1.0))) + 1.0;
    float _2535 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2536 = 1.0 - _2496;
    float _2547 = (0.5 / (((_2511 * ((_2510 * _2536) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2536) + _2496) * _2510))) * _2510;
    float _4687 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2520 / ((_2524 * _2524) * 3.141590118408203125));
    uint _2563 = _2235 + 9u;
    float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _748) * 0.949999988079071044921875);
    float _2575 = _2574 * _2574;
    float _2576 = cbLight._m0[_2275].x + _824;
    float _2577 = cbLight._m0[_2275].y + _825;
    float _2578 = cbLight._m0[_2275].z + _826;
    float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
    float _2583 = _2582 * _2576;
    float _2584 = _2582 * _2577;
    float _2585 = _2582 * _2578;
    float _2586 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2275].xyz));
    float _4698 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2590 = dot(vec3(_745, _746, _747), vec3(_2583, _2584, _2585));
    float _4709 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2594 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2583, _2584, _2585));
    float _4720 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2598 = _2575 * _2575;
    float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
    float _2611 = (exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2612 = 1.0 - _2575;
    float _2622 = (0.5 / (((_2511 * ((_2589 * _2612) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2612) + _2575) * _2589))) * _2589;
    float _4731 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
    float _2634 = (((_2611 * cbLight._m0[_2563].x) * _2624) * _2258) + ((((cbLight._m0[_2482].x * _2224) * _2535) * _2549) * _2271);
    float _2635 = (((_2611 * cbLight._m0[_2563].y) * _2624) * _2258) + ((((cbLight._m0[_2482].y * _2226) * _2535) * _2549) * _2271);
    float _2636 = (((_2611 * cbLight._m0[_2563].z) * _2624) * _2258) + ((((cbLight._m0[_2482].z * _2228) * _2535) * _2549) * _2271);
    float _2692;
    float _2694;
    float _2696;
    if (_2311)
    {
        _2692 = _2634;
        _2694 = _2635;
        _2696 = _2636;
    }
    else
    {
        uint _2698 = _2235 + 2u;
        uint _2702 = _2235 + 10u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _748) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _824;
        float _2719 = cbLight._m0[_2698].y + _825;
        float _2720 = cbLight._m0[_2698].z + _826;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2698].xyz));
        float _4742 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2732 = dot(vec3(_745, _746, _747), vec3(_2725, _2726, _2727));
        float _4753 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4764 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2753 = (exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2754 = 1.0 - _2717;
        float _2764 = (0.5 / (((_2511 * ((_2731 * _2754) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2754) + _2717) * _2731))) * _2731;
        float _4775 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2766 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2767 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
        _2692 = (((_2753 * cbLight._m0[_2702].x) * _2766) * _2767) + _2634;
        _2694 = (((_2753 * cbLight._m0[_2702].y) * _2766) * _2767) + _2635;
        _2696 = (((_2753 * cbLight._m0[_2702].z) * _2766) * _2767) + _2636;
    }
    float _2798;
    float _2800;
    float _2802;
    if (_2420)
    {
        _2798 = _2692;
        _2800 = _2694;
        _2802 = _2696;
    }
    else
    {
        uint _2809 = _2235 + 3u;
        uint _2813 = _2235 + 11u;
        float _2827 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2809].w)) * _748) * 0.949999988079071044921875);
        float _2828 = _2827 * _2827;
        float _2829 = cbLight._m0[_2809].x + _824;
        float _2830 = cbLight._m0[_2809].y + _825;
        float _2831 = cbLight._m0[_2809].z + _826;
        float _2835 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
        float _2836 = _2835 * _2829;
        float _2837 = _2835 * _2830;
        float _2838 = _2835 * _2831;
        float _2839 = dot(vec3(_745, _746, _747), vec3(cbLight._m0[_2809].xyz));
        float _4791 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2842 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2843 = dot(vec3(_745, _746, _747), vec3(_2836, _2837, _2838));
        float _4802 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        float _2846 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2847 = dot(vec3(cbLight._m0[_2809].xyz), vec3(_2836, _2837, _2838));
        float _4813 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
        float _2851 = _2828 * _2828;
        float _2855 = ((_2846 * _2846) * (_2851 + (-1.0))) + 1.0;
        float _2864 = (exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2865 = 1.0 - _2828;
        float _2875 = (0.5 / (((_2511 * ((_2842 * _2865) + _2828)) + 9.9999999392252902907785028219223e-09) + (((_2511 * _2865) + _2828) * _2842))) * _2842;
        float _4824 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2877 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2851 / ((_2855 * _2855) * 3.141590118408203125));
        float _2878 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2798 = (((_2864 * cbLight._m0[_2813].x) * _2877) * _2878) + _2692;
        _2800 = (((_2864 * cbLight._m0[_2813].y) * _2877) * _2878) + _2694;
        _2802 = (((_2864 * cbLight._m0[_2813].z) * _2877) * _2878) + _2696;
    }
    float _2944;
    float _2946;
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    if (_2233.y == 0u)
    {
        uvec4 _2899 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2900 = _2899.x;
        uint _2911 = uint((float(_2899.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2900))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2900)));
        float _2921 = (log2(_2011 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2922 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        uint _2925 = uint(isnan(14.0) ? _2922 : (isnan(_2922) ? 14.0 : min(_2922, 14.0)));
        uvec4 _2930 = texelFetch(g_lightClusterGridBuffer, int(((_2925 << 2u) + (_2911 << 6u)) >> 2u));
        uint _2931 = _2930.x;
        uint _2932 = _2899.z;
        float _3011;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        if (((((1u << ((_2932 >> 4u) & 15u)) + 4294967295u) & _2931) == 0u) || ((_2932 & 240u) == 0u))
        {
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
        }
        else
        {
            float _3012;
            float _3014;
            float _3016;
            float _3018;
            float _3020;
            float _3022;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3179)
                {
                    frontier_phi_71_pred = _3168;
                    frontier_phi_71_pred_1 = _3167;
                    frontier_phi_71_pred_2 = _3166;
                    frontier_phi_71_pred_3 = _3165;
                    frontier_phi_71_pred_4 = _3164;
                    frontier_phi_71_pred_5 = _3163;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3178;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3169 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _2009;
                        float _3375 = _3334.y - _2010;
                        float _3376 = _3334.z - _2011;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_863, _866, _869), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4850 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _2009;
                        float _3410 = (-0.0) - _2010;
                        float _3411 = (-0.0) - _2011;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _923;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_863, _866, _869), vec3(_3416, _3417, _3418));
                        float _4866 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3450 = dot(vec3(_863, _866, _869), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4877 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4888 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4899 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3238 = (_3405 * _3353.x) + _3311;
                        _3239 = (_3405 * _3353.y) + _3312;
                        _3240 = (_3405 * _3353.z) + _3313;
                        _3235 = (_3485 * _3370.x) + _3308;
                        _3236 = (_3485 * _3370.y) + _3309;
                        _3237 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_71_pred = _3240;
                    frontier_phi_71_pred_1 = _3239;
                    frontier_phi_71_pred_2 = _3238;
                    frontier_phi_71_pred_3 = _3237;
                    frontier_phi_71_pred_4 = _3236;
                    frontier_phi_71_pred_5 = _3235;
                }
                _3022 = frontier_phi_71_pred;
                _3020 = frontier_phi_71_pred_1;
                _3018 = frontier_phi_71_pred_2;
                _3016 = frontier_phi_71_pred_3;
                _3014 = frontier_phi_71_pred_4;
                _3012 = frontier_phi_71_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3012;
                    _3164 = _3014;
                    _3165 = _3016;
                    _3166 = _3018;
                    _3167 = _3020;
                    _3168 = _3022;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
        }
        uvec4 _3025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3026 = _3025.z;
        uint _3028 = (_3026 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3028) & _2931) == 0u)
        {
            _3131 = _3011;
            _3133 = _3013;
            _3135 = _3015;
            _3137 = _3017;
            _3139 = _3019;
            _3141 = _3021;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
            float _3157 = _3156 * _2009;
            float _3158 = _3156 * _2010;
            float _3159 = _3156 * _2011;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3028 < ((_3026 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3291 = _3011;
                float _3292 = _3013;
                float _3293 = _3015;
                float _3294 = _3017;
                float _3295 = _3019;
                float _3296 = _3021;
                uint _3297 = _3028;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2925 << 5u) + (_2911 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3307)
                    {
                        frontier_phi_82_pred = _3296;
                        frontier_phi_82_pred_1 = _3295;
                        frontier_phi_82_pred_2 = _3294;
                        frontier_phi_82_pred_3 = _3293;
                        frontier_phi_82_pred_4 = _3292;
                        frontier_phi_82_pred_5 = _3291;
                    }
                    else
                    {
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        uint _3518 = _3306;
                        uint _3519;
                        vec4 _3544;
                        float _3545;
                        vec4 _3560;
                        vec3 _3572;
                        vec4 _3587;
                        vec4 _3603;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3529 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3518));
                            _3519 = (_3518 + 4294967295u) & _3518;
                            uint _3531 = _3529 * 40u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3545 = _3544.w;
                            uint _3547 = (_3529 * 40u) + 4u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3529 * 40u) + 8u;
                            _3572 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x));
                            uint _3574 = (_3529 * 40u) + 16u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3590 = (_3529 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3529 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3529 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_2011, _3637.z, fma(_2010, _3637.y, _3637.x * _2009)) + _3637.w;
                            _3650 = !((fma(_2011, _3618.z, fma(_2010, _3618.y, _3618.x * _2009)) + _3618.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3544.x - _2009;
                                float _3678 = _3544.y - _2010;
                                float _3679 = _3544.z - _2011;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3545 * _3545));
                                float _4910 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3695 = sqrt(_3680) * _3560.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_863, _866, _869))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_2011, _3587.z, fma(_2010, _3587.y, _3587.x * _2009)) + _3587.w) / _3649;
                                float _3709 = (fma(_2011, _3603.z, fma(_2010, _3603.y, _3603.x * _2009)) + _3603.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4926 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _923;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3157;
                                float _3739 = _3685 - _3158;
                                float _3740 = _3686 - _3159;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_863, _866, _869), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4937 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3752 = dot(vec3(_863, _866, _869), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4948 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_863, _866, _869), vec3(_3684, _3685, _3686))) + _3761;
                                float _4959 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4970 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3715 * _3560.z;
                                frontier_phi_88_pred_1 = _3715 * _3560.y;
                                frontier_phi_88_pred_2 = _3715 * _3560.x;
                                frontier_phi_88_pred_3 = _3789 * _3572.z;
                                frontier_phi_88_pred_4 = _3789 * _3572.y;
                                frontier_phi_88_pred_5 = _3789 * _3572.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_88_pred;
                            _3797 = frontier_phi_88_pred_1;
                            _3796 = frontier_phi_88_pred_2;
                            _3795 = frontier_phi_88_pred_3;
                            _3794 = frontier_phi_88_pred_4;
                            _3793 = frontier_phi_88_pred_5;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            _3504 = _3798 + _3517;
                            _3499 = _3793 + _3512;
                            _3500 = _3794 + _3513;
                            _3501 = _3795 + _3514;
                            if (_3519 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3519;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3504;
                        frontier_phi_82_pred_1 = _3503;
                        frontier_phi_82_pred_2 = _3502;
                        frontier_phi_82_pred_3 = _3501;
                        frontier_phi_82_pred_4 = _3500;
                        frontier_phi_82_pred_5 = _3499;
                    }
                    _3142 = frontier_phi_82_pred;
                    _3140 = frontier_phi_82_pred_1;
                    _3138 = frontier_phi_82_pred_2;
                    _3136 = frontier_phi_82_pred_3;
                    _3134 = frontier_phi_82_pred_4;
                    _3132 = frontier_phi_82_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3132;
                        _3292 = _3134;
                        _3293 = _3136;
                        _3294 = _3138;
                        _3295 = _3140;
                        _3296 = _3142;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3138;
                frontier_phi_63_64_ladder_1 = _3142;
                frontier_phi_63_64_ladder_2 = _3140;
                frontier_phi_63_64_ladder_3 = _3136;
                frontier_phi_63_64_ladder_4 = _3134;
                frontier_phi_63_64_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_63_64_ladder = _3017;
                frontier_phi_63_64_ladder_1 = _3021;
                frontier_phi_63_64_ladder_2 = _3019;
                frontier_phi_63_64_ladder_3 = _3015;
                frontier_phi_63_64_ladder_4 = _3013;
                frontier_phi_63_64_ladder_5 = _3011;
            }
            _3131 = frontier_phi_63_64_ladder_5;
            _3133 = frontier_phi_63_64_ladder_4;
            _3135 = frontier_phi_63_64_ladder_3;
            _3137 = frontier_phi_63_64_ladder;
            _3139 = frontier_phi_63_64_ladder_2;
            _3141 = frontier_phi_63_64_ladder_1;
        }
        float _3146 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2944 = (_3146 * _3137) + _2475;
        _2946 = (_3146 * _3139) + _2477;
        _2948 = (_3146 * _3141) + _2479;
        _2950 = ((_3131 * 0.039999999105930328369140625) * _3146) + _2798;
        _2952 = ((_3133 * 0.039999999105930328369140625) * _3146) + _2800;
        _2954 = ((_3135 * 0.039999999105930328369140625) * _3146) + _2802;
    }
    else
    {
        _2944 = _2475;
        _2946 = _2477;
        _2948 = _2479;
        _2950 = _2798;
        _2952 = _2800;
        _2954 = _2802;
    }
    float _4986 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _4997 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _5008 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2971 = ((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2944 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _907))) + ((_2950 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    float _2972 = ((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2946 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _907))) + ((_2952 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    float _2973 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2948 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _907))) + ((_2954 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1743)) * cbPerFrame._m0[3u].x);
    uint _2974 = _251 + 6u;
    float _2982 = _844 / cbSceneParam._m0[86u].x;
    float _2983 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2997 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, (log2((isnan(cbSceneParam._m0[77u].w) ? _766 : (isnan(_766) ? cbSceneParam._m0[77u].w : min(_766, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2999 = _2997.x;
    float _3000 = _2997.y;
    float _3001 = _2997.z;
    float _3002 = _2997.w;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_766 > cbSceneParam._m0[78u].w)
    {
        float _3036 = isnan(_766) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _766 : min(cbSceneParam._m0[80u].w, _766));
        float _3037 = _3036 / _766;
        float _3048 = _3037 * _817;
        float _3049 = _818 * _3037;
        float _3050 = (-0.0) - _3049;
        float _3051 = _3037 * _819;
        float _3053 = (cbSceneParam._m0[77u].w * _3050) / _3036;
        float _3054 = _3053 + cbSceneParam._m0[79u].w;
        float _3055 = cbSceneParam._m0[79u].w - _3049;
        float _3061 = sqrt(((_3048 * _3048) + (_3049 * _3049)) + (_3051 * _3051));
        float _3064 = (1.0 - (cbSceneParam._m0[77u].w / _3036)) * _3061;
        float _3069 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3071 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3248;
        if (abs((_3050 - _3053) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3248 = ((((_3054 > 0.0) ? exp2(_3069 * _3054) : (2.0 - exp2(_3071 * _3054))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3064;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : max(_3054, _3055));
            float _3194 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : min(_3054, _3055));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3248 = ((abs(_3061 / _3050) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3069 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3069 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3071 * _3203) - exp2(_3071 * _3204)) * _3192))) + (_3064 * cbSceneParam._m0[80u].z);
        }
        vec4 _3250 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2982, _2983, 1.0), 0.0);
        float _3259 = exp2((_3248 * (-1.44269502162933349609375)) * (1.0 - _3250.w));
        float _3260 = log2(_3259);
        float _3276 = log2(_3002);
        _3073 = (exp2(_3276 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].x)) * _3250.x) / cbSceneParam._m0[78u].x)) + _2999;
        _3075 = (exp2(_3276 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].y)) * _3250.y) / cbSceneParam._m0[78u].y)) + _3000;
        _3077 = (exp2(_3276 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].z)) * _3250.z) / cbSceneParam._m0[78u].z)) + _3001;
        _3079 = _3259 * _3002;
    }
    else
    {
        _3073 = _2999;
        _3075 = _3000;
        _3077 = _3001;
        _3079 = _3002;
    }
    bool _3286;
    vec4 _3089;
    vec4 _3111;
    float _3113;
    float _3117;
    float _3118;
    float _3119;
    float _3120;
    bool _3130;
    for (;;)
    {
        _3089 = cbMatDynParam._m0[0u];
        float _3091 = roundEven(_3089.y);
        bool _3092 = _3091 == 3.0;
        float _3093 = log2(_3079);
        float _3100 = exp2(_3093 * cbSceneParam._m0[78u].x) * _2971;
        float _3101 = exp2(_3093 * cbSceneParam._m0[78u].y) * _2972;
        float _3102 = exp2(_3093 * cbSceneParam._m0[78u].z) * _2973;
        float _3109 = _833 + (-0.5);
        _3111 = cbMtdParam._m0[1u];
        _3113 = _3111.y * _3109;
        float _3116 = (_3091 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3117 = _3116 * (_3092 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3073)));
        _3118 = _3116 * (_3092 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3075)));
        _3119 = _3116 * (_3092 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3077)));
        _3120 = _3109 * 0.999000012874603271484375;
        _3130 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3130)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _3120) < 0.5)
            {
                _3286 = true;
                break;
            }
        }
        uint _3227 = _882 + uint(_3089.w);
        if ((cbInstanceData._m0[_3227].w < 1.0) && ((cbInstanceData._m0[_3227].w + _3120) < 0.5))
        {
            _3286 = true;
            break;
        }
        if ((_3113 + 1.0) < _3111.x)
        {
            _3286 = true;
            break;
        }
        _3286 = false;
        break;
    }
    float _3490;
    if (_3286)
    {
        discard_state = true;
        _3490 = 0.0;
    }
    else
    {
        _3490 = cbInstanceData._m0[_2974].w;
    }
    SV_Target.x = _3117;
    SV_Target.y = _3118;
    SV_Target.z = _3119;
    SV_Target.w = _3490;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2974].w;
    discard_exit();
}


