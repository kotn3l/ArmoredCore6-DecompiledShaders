#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _815;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.x * cbMtdParam._m0[9u].x;
    float _234 = _227.y * cbMtdParam._m0[9u].y;
    float _235 = _227.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _252 = _248.z;
    float _257 = (_248.x * 2.0) + (-1.0);
    float _259 = (_248.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3153 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0))));
    float _271 = cbMtdParam._m0[22u].x + _248.w;
    float _274 = fma(_266, _197 * NORMAL.x, fma(_259, _204 * TANGENT.x, (_190 * _182) * _257));
    float _277 = fma(_266, _197 * NORMAL.y, fma(_259, _204 * TANGENT.y, (_190 * _183) * _257));
    float _280 = fma(_266, _197 * NORMAL.z, fma(_259, _204 * TANGENT.z, (_190 * _184) * _257));
    float _284 = inversesqrt(dot(vec3(_274, _277, _280), vec3(_274, _277, _280)));
    float _285 = _284 * _274;
    float _286 = _284 * _277;
    float _287 = _284 * _280;
    float _3164 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _288 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    float _3175 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3186 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3197 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3208 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _308 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _350 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _360 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _350);
    float _361 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _350);
    float _362 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _350);
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _360 * _366;
    float _368 = _361 * _366;
    float _369 = _362 * _366;
    float _375 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _376 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _397 = fma(_287, cbSceneParam._m0[5u].z, fma(_286, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _285));
    float _400 = fma(_287, cbSceneParam._m0[6u].z, fma(_286, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _285));
    float _403 = fma(_287, cbSceneParam._m0[7u].z, fma(_286, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _285));
    uint _416 = uint(roundEven(NORMAL.w)) * 13u;
    uint _419 = (_416 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _425 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0)))) * cbInstanceData._m0[_419].x;
    float _426 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0)))) * cbInstanceData._m0[_419].y;
    float _427 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * cbInstanceData._m0[_419].z;
    float _3219 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _429 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _430 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    vec4 _439 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _375, cbSceneParam._m0[86u].y * _376));
    float _443 = ((isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) * TEXCOORD_5.w) * _439.x;
    float _444 = dot(vec3(_285, _286, _287), vec3(_367, _368, _369));
    float _447 = _444 * 2.0;
    float _451 = (_447 * _285) - _367;
    float _452 = (_447 * _286) - _368;
    float _453 = (_447 * _287) - _369;
    float _457 = abs(dot(vec3(_367, _368, _369), vec3(_285, _286, _287)));
    float _3252 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _459 = sqrt(_288);
    float _472 = exp2((_459 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_459 * 3.0));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _512 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _814;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _539 = fma(_512, cbModelParam._m0[26u].z, fma(_508, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _504));
        float _543 = fma(_512, cbModelParam._m0[27u].z, fma(_508, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _504));
        float _547 = fma(_512, cbModelParam._m0[28u].z, fma(_508, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _504));
        float _572 = _504 + _285;
        float _573 = _508 + _286;
        float _574 = _512 + _287;
        float _584 = fma(_574, cbModelParam._m0[26u].z, fma(_573, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _572)) - _539;
        float _585 = fma(_574, cbModelParam._m0[27u].z, fma(_573, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _572)) - _543;
        float _586 = fma(_574, cbModelParam._m0[28u].z, fma(_573, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _572)) - _547;
        float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
        float _603 = ((_590 * _584) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_539 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _604 = ((_590 * _585) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_543 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _605 = ((_590 * _586) / cbModelParam._m0[34u].z) + ((((((_547 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_603, _604, _605), 0.0);
        float _642 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _643 = _642 * (_608.x + (-0.5));
        float _644 = _642 * (_608.y + (-0.5));
        float _645 = _642 * (_608.z + (-0.5));
        float _652 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _653 = _652 * (_615.x + (-0.5));
        float _654 = _652 * (_615.y + (-0.5));
        float _655 = _652 * (_615.z + (-0.5));
        float _662 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _663 = _662 * (_622.x + (-0.5));
        float _664 = _662 * (_622.y + (-0.5));
        float _665 = _662 * (_622.z + (-0.5));
        float _672 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_629.x + (-0.5));
        float _674 = _672 * (_629.y + (-0.5));
        float _675 = _672 * (_629.z + (-0.5));
        float _676 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _677 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
        float _678 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _679 = _643 * 0.5;
        float _680 = _653 * 0.5;
        float _681 = _663 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _696 = (dot(vec3(_285, _286, _287), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3278 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _706 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_676 + 9.9999997473787516355514526367188e-06);
        float _3289 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3300 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) * (_708 + 1.0))) + _713) * _676;
        float _723 = _644 * 0.5;
        float _724 = _654 * 0.5;
        float _725 = _664 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_285, _286, _287), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3311 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_677 + 9.9999997473787516355514526367188e-06);
        float _3322 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3333 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))) * (_750 + 1.0))) + _755) * _677;
        float _765 = _645 * 0.5;
        float _766 = _655 * 0.5;
        float _767 = _665 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_285, _286, _287), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_678 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3366 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_792 + 1.0))) + _797) * _678;
        _814 = _645;
        _816 = _644;
        _817 = _643;
        _818 = _655;
        _819 = _654;
        _820 = _653;
        _821 = _665;
        _822 = _664;
        _823 = _663;
        _824 = _678;
        _825 = _677;
        _826 = _676;
        _827 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _828 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _829 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
    }
    else
    {
        _814 = _815;
        _816 = _815;
        _817 = _815;
        _818 = _815;
        _819 = _815;
        _820 = _815;
        _821 = _815;
        _822 = _815;
        _823 = _815;
        _824 = _815;
        _825 = _815;
        _826 = _815;
        _827 = 0.0;
        _828 = 0.0;
        _829 = 0.0;
    }
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _854 = fma(_512, cbModelParam._m0[30u].z, fma(_508, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _504));
        float _858 = fma(_512, cbModelParam._m0[31u].z, fma(_508, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _504));
        float _862 = fma(_512, cbModelParam._m0[32u].z, fma(_508, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _504));
        float _885 = _504 + _285;
        float _886 = _508 + _286;
        float _887 = _512 + _287;
        float _897 = fma(_887, cbModelParam._m0[30u].z, fma(_886, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885)) - _854;
        float _898 = fma(_887, cbModelParam._m0[31u].z, fma(_886, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885)) - _858;
        float _899 = fma(_887, cbModelParam._m0[32u].z, fma(_886, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885)) - _862;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_854 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_858 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[35u].z) + ((((((_862 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _953 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_920.x + (-0.5));
        float _955 = _953 * (_920.y + (-0.5));
        float _956 = _953 * (_920.z + (-0.5));
        float _963 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_927.x + (-0.5));
        float _965 = _963 * (_927.y + (-0.5));
        float _966 = _963 * (_927.z + (-0.5));
        float _973 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_934.x + (-0.5));
        float _975 = _973 * (_934.y + (-0.5));
        float _976 = _973 * (_934.z + (-0.5));
        float _983 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_941.x + (-0.5));
        float _985 = _983 * (_941.y + (-0.5));
        float _986 = _983 * (_941.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_285, _286, _287), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3429 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_1017 + 1.0))) + _1022) * _987;
        float _1032 = _955 * 0.5;
        float _1033 = _965 * 0.5;
        float _1034 = _975 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_285, _286, _287), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3462 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_1059 + 1.0))) + _1064) * _988;
        float _1074 = _956 * 0.5;
        float _1075 = _966 * 0.5;
        float _1076 = _976 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_285, _286, _287), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3495 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1101 + 1.0))) + _1106) * _989;
        _1123 = _956;
        _1124 = _955;
        _1125 = _954;
        _1126 = _966;
        _1127 = _965;
        _1128 = _964;
        _1129 = _976;
        _1130 = _975;
        _1131 = _974;
        _1132 = _989;
        _1133 = _988;
        _1134 = _987;
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1136 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1137 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _815;
        _1124 = _815;
        _1125 = _815;
        _1126 = _815;
        _1127 = _815;
        _1128 = _815;
        _1129 = _815;
        _1130 = _815;
        _1131 = _815;
        _1132 = _815;
        _1133 = _815;
        _1134 = _815;
        _1135 = 0.0;
        _1136 = 0.0;
        _1137 = 0.0;
    }
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _827)) + _827;
    float _1148 = (cbModelParam._m0[1u].x * (_1136 - _828)) + _828;
    float _1149 = (cbModelParam._m0[1u].x * (_1137 - _829)) + _829;
    float _1170 = fma(_1149, cbSceneParam._m0[89u].z, fma(_1148, cbSceneParam._m0[89u].y, _1147 * cbSceneParam._m0[89u].x));
    float _1173 = fma(_1149, cbSceneParam._m0[90u].z, fma(_1148, cbSceneParam._m0[90u].y, _1147 * cbSceneParam._m0[90u].x));
    float _1176 = fma(_1149, cbSceneParam._m0[91u].z, fma(_1148, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1147));
    float _1191 = _451 * 0.5;
    float _1192 = _452 * 0.5;
    float _1193 = _453 * 0.5;
    float _1194 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_1125, _1128, _1131, _1134));
    float _1197 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_1124, _1127, _1130, _1133));
    float _1200 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1234;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1207 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_814, _818, _821, _824));
        float _1211 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_816, _819, _822, _825));
        float _1215 = dot(vec4(_1191, _1192, _1193, 1.0), vec4(_817, _820, _823, _826));
        float _1222 = dot(vec4(cbModelParam._m0[39u]), vec4(_1191, _1192, _1193, 1.0));
        _1234 = dot(vec3(isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1234 = 1.0;
    }
    float _1245;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1236 = dot(vec4(cbModelParam._m0[40u]), vec4(_1191, _1192, _1193, 1.0));
        _1245 = dot(vec3(isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1236) ? 0.0 : (isnan(0.0) ? _1236 : max(0.0, _1236))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1245 = 1.0;
    }
    float _1249 = (_1245 * cbModelParam._m0[1u].x) + (_1234 * (1.0 - cbModelParam._m0[1u].x));
    float _1259 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _288);
    float _1260 = isnan(_1259) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1259 : min(cbModelParam._m0[25u].z, _1259));
    float _1342;
    float _1344;
    float _1346;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1309 = fma(_512, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504)) + cbModelParam._m0[13u].w;
        float _1313 = fma(_512, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504)) + cbModelParam._m0[14u].w;
        float _1317 = fma(_512, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504)) + cbModelParam._m0[15u].w;
        float _1320 = fma(_453, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451));
        float _1323 = fma(_453, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451));
        float _1326 = fma(_453, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451));
        float _1354;
        if (_1320 > 0.0)
        {
            _1354 = abs((1.0 - _1309) / _1320);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1309 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1354 = frontier_phi_14_12_ladder;
        }
        float _1580;
        if (_1323 > 0.0)
        {
            _1580 = abs((1.0 - _1313) / _1323);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1313 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1580 = frontier_phi_23_19_ladder;
        }
        float _1826;
        if (_1326 > 0.0)
        {
            _1826 = abs((1.0 - _1317) / _1326);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1317 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1826 = frontier_phi_35_30_ladder;
        }
        float _1828 = isnan(_1580) ? _1354 : (isnan(_1354) ? _1580 : min(_1354, _1580));
        float _1829 = isnan(_1826) ? _1828 : (isnan(_1828) ? _1826 : min(_1828, _1826));
        float _1833 = (_1829 * _1320) + _1309;
        float _1834 = (_1829 * _1323) + _1313;
        float _1835 = (_1829 * _1326) + _1317;
        float _1836 = _1829 * 9.9999997473787516355514526367188e-05;
        float _1838 = (-1.0) - _1836;
        float _1840 = _1836 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1835 > _1840) || ((_1835 < _1838) || ((_1834 > _1840) || ((_1834 < _1838) || ((_1833 < _1838) || (_1833 > _1840))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1959 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1835, cbModelParam._m0[9u].z, fma(_1834, cbModelParam._m0[9u].y, _1833 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1835, cbModelParam._m0[10u].z, fma(_1834, cbModelParam._m0[10u].y, _1833 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1835, cbModelParam._m0[11u].z, fma(_1834, cbModelParam._m0[11u].y, _1833 * cbModelParam._m0[11u].x))), _1260);
            frontier_phi_13_35_ladder = _1959.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1959.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1959.x * cbModelParam._m0[1u].y;
        }
        _1342 = frontier_phi_13_35_ladder_2;
        _1344 = frontier_phi_13_35_ladder_1;
        _1346 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_451, _452, _453), _1260);
        _1342 = _1330.x * cbModelParam._m0[1u].y;
        _1344 = _1330.y * cbModelParam._m0[1u].y;
        _1346 = _1330.z * cbModelParam._m0[1u].y;
    }
    float _1350 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _288);
    float _1351 = isnan(_1350) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1350 : min(cbModelParam._m0[25u].w, _1350));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1407 = fma(_512, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504)) + cbModelParam._m0[21u].w;
        float _1411 = fma(_512, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504)) + cbModelParam._m0[22u].w;
        float _1415 = fma(_512, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504)) + cbModelParam._m0[23u].w;
        float _1418 = fma(_453, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451));
        float _1421 = fma(_453, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451));
        float _1424 = fma(_453, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451));
        float _1585;
        if (_1418 > 0.0)
        {
            _1585 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_21_ladder;
        }
        float _1853;
        if (_1421 > 0.0)
        {
            _1853 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1853 = frontier_phi_37_32_ladder;
        }
        float _2058;
        if (_1424 > 0.0)
        {
            _2058 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2058 = frontier_phi_46_43_ladder;
        }
        float _2060 = isnan(_1853) ? _1585 : (isnan(_1585) ? _1853 : min(_1585, _1853));
        float _2061 = isnan(_2058) ? _2060 : (isnan(_2060) ? _2058 : min(_2060, _2058));
        float _2065 = (_2061 * _1418) + _1407;
        float _2066 = (_2061 * _1421) + _1411;
        float _2067 = (_2061 * _1424) + _1415;
        float _2068 = _2061 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2068;
        float _2071 = _2068 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2067 > _2071) || ((_2067 < _2069) || ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 < _2069) || (_2065 > _2071))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2067, cbModelParam._m0[17u].z, fma(_2066, cbModelParam._m0[17u].y, _2065 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2067, cbModelParam._m0[18u].z, fma(_2066, cbModelParam._m0[18u].y, _2065 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2067, cbModelParam._m0[19u].z, fma(_2066, cbModelParam._m0[19u].y, _2065 * cbModelParam._m0[19u].x))), _1351);
            frontier_phi_22_46_ladder = _2266.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2266.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2266.x * cbModelParam._m0[1u].z;
        }
        _1443 = frontier_phi_22_46_ladder_2;
        _1445 = frontier_phi_22_46_ladder_1;
        _1447 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_451, _452, _453), _1351);
        _1443 = _1427.x * cbModelParam._m0[1u].z;
        _1445 = _1427.y * cbModelParam._m0[1u].z;
        _1447 = _1427.z * cbModelParam._m0[1u].z;
    }
    float _1459 = ((((1.0 - _472) * ((_459 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_472 * _459)) * _443;
    float _1460 = _1459 * ((cbModelParam._m0[1u].w * (_1443 - _1342)) + _1342);
    float _1461 = _1459 * ((cbModelParam._m0[1u].w * (_1445 - _1344)) + _1344);
    float _1462 = _1459 * ((cbModelParam._m0[1u].w * (_1447 - _1346)) + _1346);
    float _1465 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, _1460 * cbSceneParam._m0[91u].x));
    vec4 _1479 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_375, _376));
    float _1481 = _1479.w;
    float _1493 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1481);
    float _1494 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1481);
    float _1495 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1481);
    uvec4 _1499 = floatBitsToUint(cbInstanceData._m0[_416 + 5u]);
    uint _1501 = _1499.x * 14u;
    uint _1502 = _1501 + 13u;
    float _1509 = _443 + (-1.0);
    float _1514 = (cbLight._m0[_1502].x * _1509) + 1.0;
    float _1515 = (cbLight._m0[_1502].y * _1509) + 1.0;
    float _1516 = (cbLight._m0[_1502].z * _1509) + 1.0;
    float _1517 = (cbLight._m0[_1502].w * _1509) + 1.0;
    uint _1518 = _1501 + 5u;
    float _1524 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
    uint _1528 = _1501 + 4u;
    float _1538 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
    uint _1542 = _1501 | 1u;
    float _1553 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_285, _286, _287));
    float _1556 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_285, _286, _287));
    float _3631 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _3642 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1561 = (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * 0.3183098733425140380859375;
    float _1563 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.3183098733425140380859375;
    float _1570 = ((cbLight._m0[_1518].x * _1524) * _1563) + (((cbLight._m0[_1528].x * _1493) * _1538) * _1561);
    float _1571 = ((_1524 * cbLight._m0[_1518].y) * _1563) + (((cbLight._m0[_1528].y * _1494) * _1538) * _1561);
    float _1572 = ((_1524 * cbLight._m0[_1518].z) * _1563) + (((cbLight._m0[_1528].z * _1495) * _1538) * _1561);
    uvec4 _1577 = floatBitsToUint(cbLight._m0[_1501 + 12u]);
    bool _1579 = _1577.x == 0u;
    float _1590;
    float _1592;
    float _1594;
    if (_1579)
    {
        _1590 = _1570;
        _1592 = _1571;
        _1594 = _1572;
    }
    else
    {
        uint _1598 = _1501 + 6u;
        float _1614 = (dot(vec3(cbLight._m0[_1501 + 2u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1615 = _1614 * _1614;
        float _3653 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1617 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
        _1590 = (((cbLight._m0[_1598].x * 0.3183098733425140380859375) * _1616) * _1617) + _1570;
        _1592 = (((cbLight._m0[_1598].y * 0.3183098733425140380859375) * _1616) * _1617) + _1571;
        _1594 = (((cbLight._m0[_1598].z * 0.3183098733425140380859375) * _1616) * _1617) + _1572;
    }
    bool _1597 = _1577.y == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1597)
    {
        _1635 = _1590;
        _1637 = _1592;
        _1639 = _1594;
    }
    else
    {
        uint _1797 = _1501 + 7u;
        float _1813 = (dot(vec3(cbLight._m0[_1501 + 3u].xyz), vec3(_285, _286, _287)) * 0.5) + 0.5;
        float _1814 = _1813 * _1813;
        float _3669 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1816 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1635 = (((cbLight._m0[_1797].x * 0.3183098733425140380859375) * _1815) * _1816) + _1590;
        _1637 = (((cbLight._m0[_1797].y * 0.3183098733425140380859375) * _1815) * _1816) + _1592;
        _1639 = (((cbLight._m0[_1797].z * 0.3183098733425140380859375) * _1815) * _1816) + _1594;
    }
    uint _1642 = _1501 + 8u;
    float _1655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1501].w)) * _288) * 0.949999988079071044921875);
    float _1656 = _1655 * _1655;
    float _1657 = cbLight._m0[_1501].x + _367;
    float _1658 = cbLight._m0[_1501].y + _368;
    float _1659 = cbLight._m0[_1501].z + _369;
    float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
    float _1664 = _1663 * _1657;
    float _1665 = _1663 * _1658;
    float _1666 = _1663 * _1659;
    float _1667 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1501].xyz));
    float _3685 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _1671 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _1672 = dot(vec3(_285, _286, _287), vec3(_1664, _1665, _1666));
    float _3707 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _1676 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_1664, _1665, _1666));
    float _3718 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1680 = _1656 * _1656;
    float _1684 = ((_1675 * _1675) * (_1680 + (-1.0))) + 1.0;
    float _1695 = (exp2(log2(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1696 = 1.0 - _1656;
    float _1707 = (0.5 / (((_1671 * ((_1670 * _1696) + _1656)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1696) + _1656) * _1670))) * _1670;
    float _3729 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1709 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1680 / ((_1684 * _1684) * 3.141590118408203125));
    uint _1723 = _1501 + 9u;
    float _1734 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _288) * 0.949999988079071044921875);
    float _1735 = _1734 * _1734;
    float _1736 = cbLight._m0[_1542].x + _367;
    float _1737 = cbLight._m0[_1542].y + _368;
    float _1738 = cbLight._m0[_1542].z + _369;
    float _1742 = inversesqrt(dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738)));
    float _1743 = _1742 * _1736;
    float _1744 = _1742 * _1737;
    float _1745 = _1742 * _1738;
    float _1746 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1542].xyz));
    float _3740 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _1750 = dot(vec3(_285, _286, _287), vec3(_1743, _1744, _1745));
    float _3751 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1743, _1744, _1745));
    float _3762 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1735 * _1735;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1771 = (exp2(log2(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1772 = 1.0 - _1735;
    float _1782 = (0.5 / (((_1671 * ((_1749 * _1772) + _1735)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1772) + _1735) * _1749))) * _1749;
    float _3773 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1784 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    float _1794 = (((_1771 * cbLight._m0[_1723].x) * _1784) * _1524) + ((((cbLight._m0[_1642].x * _1493) * _1695) * _1709) * _1538);
    float _1795 = (((_1771 * cbLight._m0[_1723].y) * _1784) * _1524) + ((((cbLight._m0[_1642].y * _1494) * _1695) * _1709) * _1538);
    float _1796 = (((_1771 * cbLight._m0[_1723].z) * _1784) * _1524) + ((((cbLight._m0[_1642].z * _1495) * _1695) * _1709) * _1538);
    float _1858;
    float _1860;
    float _1862;
    if (_1579)
    {
        _1858 = _1794;
        _1860 = _1795;
        _1862 = _1796;
    }
    else
    {
        uint _1864 = _1501 + 2u;
        uint _1868 = _1501 + 10u;
        float _1882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _288) * 0.949999988079071044921875);
        float _1883 = _1882 * _1882;
        float _1884 = cbLight._m0[_1864].x + _367;
        float _1885 = cbLight._m0[_1864].y + _368;
        float _1886 = cbLight._m0[_1864].z + _369;
        float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
        float _1891 = _1890 * _1884;
        float _1892 = _1890 * _1885;
        float _1893 = _1890 * _1886;
        float _1894 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1864].xyz));
        float _3784 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1897 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1898 = dot(vec3(_285, _286, _287), vec3(_1891, _1892, _1893));
        float _3795 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1901 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1902 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_1891, _1892, _1893));
        float _3806 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1906 = _1883 * _1883;
        float _1910 = ((_1901 * _1901) * (_1906 + (-1.0))) + 1.0;
        float _1919 = (exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1920 = 1.0 - _1883;
        float _1930 = (0.5 / (((_1671 * ((_1897 * _1920) + _1883)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1920) + _1883) * _1897))) * _1897;
        float _3817 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1932 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1906 / ((_1910 * _1910) * 3.141590118408203125));
        float _1933 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
        _1858 = (((_1919 * cbLight._m0[_1868].x) * _1932) * _1933) + _1794;
        _1860 = (((_1919 * cbLight._m0[_1868].y) * _1932) * _1933) + _1795;
        _1862 = (((_1919 * cbLight._m0[_1868].z) * _1932) * _1933) + _1796;
    }
    float _1968;
    float _1970;
    float _1972;
    if (_1597)
    {
        _1968 = _1858;
        _1970 = _1860;
        _1972 = _1862;
    }
    else
    {
        uint _1979 = _1501 + 3u;
        uint _1983 = _1501 + 11u;
        float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1979].w)) * _288) * 0.949999988079071044921875);
        float _1998 = _1997 * _1997;
        float _1999 = cbLight._m0[_1979].x + _367;
        float _2000 = cbLight._m0[_1979].y + _368;
        float _2001 = cbLight._m0[_1979].z + _369;
        float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
        float _2006 = _2005 * _1999;
        float _2007 = _2005 * _2000;
        float _2008 = _2005 * _2001;
        float _2009 = dot(vec3(_285, _286, _287), vec3(cbLight._m0[_1979].xyz));
        float _3833 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2012 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _2013 = dot(vec3(_285, _286, _287), vec3(_2006, _2007, _2008));
        float _3844 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        float _2016 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _2017 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2006, _2007, _2008));
        float _3855 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2021 = _1998 * _1998;
        float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
        float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2035 = 1.0 - _1998;
        float _2045 = (0.5 / (((_1671 * ((_2012 * _2035) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _2035) + _1998) * _2012))) * _2012;
        float _3866 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2047 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
        float _2048 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1968 = (((_2034 * cbLight._m0[_1983].x) * _2047) * _2048) + _1858;
        _1970 = (((_2034 * cbLight._m0[_1983].y) * _2047) * _2048) + _1860;
        _1972 = (((_2034 * cbLight._m0[_1983].z) * _2047) * _2048) + _1862;
    }
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    float _2193;
    if (_1499.y == 0u)
    {
        float _2123 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2124 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2123;
        float _2125 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2123;
        float _2126 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2123;
        uvec4 _2138 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2139 = _2138.x;
        uint _2150 = uint((float(_2138.y) * floor(float(uint(cbSceneParam._m0[85u].y * _376) / _2139))) + floor(float(uint(cbSceneParam._m0[85u].x * _375) / _2139)));
        float _2160 = (log2(_2126 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2161 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        uint _2164 = uint(isnan(14.0) ? _2161 : (isnan(_2161) ? 14.0 : min(_2161, 14.0)));
        uvec4 _2169 = texelFetch(g_lightClusterGridBuffer, int(((_2164 << 2u) + (_2150 << 6u)) >> 2u));
        uint _2170 = _2169.x;
        uint _2171 = _2138.z;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        if (((((1u << ((_2171 >> 4u) & 15u)) + 4294967295u) & _2170) == 0u) || ((_2171 & 240u) == 0u))
        {
            _2271 = 0.0;
            _2273 = 0.0;
            _2275 = 0.0;
            _2277 = 0.0;
            _2279 = 0.0;
            _2281 = 0.0;
        }
        else
        {
            float _2272;
            float _2274;
            float _2276;
            float _2278;
            float _2280;
            float _2282;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            uint _2422 = 0u;
            uint _2431;
            bool _2432;
            for (;;)
            {
                _2431 = texelFetch(g_lightClassification, int((((_2164 << 5u) + (_2150 << 9u)) + (_2422 << 2u)) >> 2u)).x;
                _2432 = _2431 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2432)
                {
                    frontier_phi_61_pred = _2416;
                    frontier_phi_61_pred_1 = _2421;
                    frontier_phi_61_pred_2 = _2420;
                    frontier_phi_61_pred_3 = _2419;
                    frontier_phi_61_pred_4 = _2418;
                    frontier_phi_61_pred_5 = _2417;
                }
                else
                {
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    uint _2546;
                    _2540 = _2416;
                    _2541 = _2417;
                    _2542 = _2418;
                    _2543 = _2419;
                    _2544 = _2420;
                    _2545 = _2421;
                    _2546 = _2431;
                    float _2472;
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    for (;;)
                    {
                        uint _2550 = uint(findLSB(_2546)) + (_2422 << 5u);
                        uint _2547 = (_2546 + 4294967295u) & _2546;
                        uint _2552 = _2550 * 48u;
                        vec4 _2566 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 3u)).x));
                        uint _2572 = (_2550 * 48u) + 4u;
                        vec4 _2585 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 3u)).x));
                        uint _2591 = (_2550 * 48u) + 8u;
                        vec3 _2602 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2591)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 2u)).x));
                        float _2606 = _2566.x - _2124;
                        float _2607 = _2566.y - _2125;
                        float _2608 = _2566.z - _2126;
                        float _2609 = dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608));
                        float _2612 = inversesqrt(_2609);
                        float _2613 = _2612 * _2606;
                        float _2614 = _2612 * _2607;
                        float _2615 = _2612 * _2608;
                        float _2616 = dot(vec3(_397, _400, _403), vec3(_2613, _2614, _2615));
                        float _2621 = 1.0 - (_2609 * _2566.w);
                        float _3892 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2622 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2623 = sqrt(_2609) * _2585.w;
                        float _2626 = 1.39999997615814208984375 / (_2623 + 1.39999997615814208984375);
                        float _2627 = _2626 * _2626;
                        float _2630 = ((1.0 - _2627) * _2616) + _2627;
                        float _2633 = _2623 * _2623;
                        float _2637 = ((isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))) * _2622) / ((_2633 * 0.699999988079071044921875) + 1.0);
                        float _2641 = (-0.0) - _2124;
                        float _2642 = (-0.0) - _2125;
                        float _2643 = (-0.0) - _2126;
                        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
                        float _2648 = _2647 * _2641;
                        float _2649 = _2647 * _2642;
                        float _2650 = _2647 * _2643;
                        float _2658 = exp2(log2(1.0 / ((_2633 * 3.5) + 5.0)) * 0.25);
                        float _2659 = 1.0 - _459;
                        float _2666 = sqrt(1.0 - ((1.0 - (_2659 * _2659)) * (1.0 - (_2658 * _2658))));
                        float _2667 = _2666 * _2666;
                        float _2668 = _2667 * _2667;
                        float _2669 = _2648 + _2613;
                        float _2670 = _2649 + _2614;
                        float _2671 = _2650 + _2615;
                        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
                        float _2679 = dot(vec3(_397, _400, _403), vec3(_2648, _2649, _2650));
                        float _3908 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2682 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
                        float _2683 = dot(vec3(_397, _400, _403), vec3(_2675 * _2669, _2675 * _2670, _2675 * _2671));
                        float _3919 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2686 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                        float _2690 = ((_2686 * _2686) * (_2668 + (-1.0))) + 1.0;
                        float _2691 = _2626 * _2667;
                        float _2692 = _2691 * _2691;
                        float _2695 = ((1.0 - _2692) * _2616) + _2692;
                        float _3930 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2696 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
                        float _2697 = 1.0 - _2667;
                        float _2707 = (0.5 / (((_2696 * ((_2682 * _2697) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _2697) + _2667) * _2682))) * _2696;
                        float _3941 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2718 = (((_2668 * 3.1415927410125732421875) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) / ((_2690 * _2690) * ((_2633 * 2.1991131305694580078125) + 3.141590118408203125))) * _2622;
                        _2475 = (_2637 * _2585.x) + _2543;
                        _2476 = (_2637 * _2585.y) + _2544;
                        _2477 = (_2637 * _2585.z) + _2545;
                        _2472 = (_2718 * _2602.x) + _2540;
                        _2473 = (_2718 * _2602.y) + _2541;
                        _2474 = (_2718 * _2602.z) + _2542;
                        if (_2547 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2540 = _2472;
                            _2541 = _2473;
                            _2542 = _2474;
                            _2543 = _2475;
                            _2544 = _2476;
                            _2545 = _2477;
                            _2546 = _2547;
                        }
                    }
                    frontier_phi_61_pred = _2472;
                    frontier_phi_61_pred_1 = _2477;
                    frontier_phi_61_pred_2 = _2476;
                    frontier_phi_61_pred_3 = _2475;
                    frontier_phi_61_pred_4 = _2474;
                    frontier_phi_61_pred_5 = _2473;
                }
                _2272 = frontier_phi_61_pred;
                _2282 = frontier_phi_61_pred_1;
                _2280 = frontier_phi_61_pred_2;
                _2278 = frontier_phi_61_pred_3;
                _2276 = frontier_phi_61_pred_4;
                _2274 = frontier_phi_61_pred_5;
                uint _2423 = _2422 + 1u;
                if (_2423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2416 = _2272;
                    _2417 = _2274;
                    _2418 = _2276;
                    _2419 = _2278;
                    _2420 = _2280;
                    _2421 = _2282;
                    _2422 = _2423;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2271 = _2272;
            _2273 = _2274;
            _2275 = _2276;
            _2277 = _2278;
            _2279 = _2280;
            _2281 = _2282;
        }
        uvec4 _2285 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2286 = _2285.z;
        uint _2288 = (_2286 >> 8u) & 15u;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        if (((4294967295u << _2288) & _2170) == 0u)
        {
            _2384 = _2271;
            _2386 = _2273;
            _2388 = _2275;
            _2390 = _2277;
            _2392 = _2279;
            _2394 = _2281;
        }
        else
        {
            float _2409 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
            float _2410 = _2409 * _2124;
            float _2411 = _2409 * _2125;
            float _2412 = _2409 * _2126;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2288 < ((_2286 >> 12u) & 15u))
            {
                float _2385;
                float _2387;
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2523 = _2271;
                float _2524 = _2273;
                float _2525 = _2275;
                float _2526 = _2277;
                float _2527 = _2279;
                float _2528 = _2281;
                uint _2529 = _2288;
                uint _2538;
                bool _2539;
                for (;;)
                {
                    _2538 = texelFetch(g_lightClassification, int((((_2164 << 5u) + (_2150 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                    _2539 = _2538 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2539)
                    {
                        frontier_phi_67_pred = _2526;
                        frontier_phi_67_pred_1 = _2527;
                        frontier_phi_67_pred_2 = _2528;
                        frontier_phi_67_pred_3 = _2525;
                        frontier_phi_67_pred_4 = _2524;
                        frontier_phi_67_pred_5 = _2523;
                    }
                    else
                    {
                        float _2723;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _2727;
                        float _2728;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _2736 = _2523;
                        float _2737 = _2524;
                        float _2738 = _2525;
                        float _2739 = _2526;
                        float _2740 = _2527;
                        float _2741 = _2528;
                        uint _2742 = _2538;
                        uint _2743;
                        vec4 _2768;
                        float _2769;
                        vec4 _2784;
                        vec3 _2796;
                        vec4 _2812;
                        vec4 _2828;
                        float _2875;
                        bool _2876;
                        for (;;)
                        {
                            uint _2753 = ((_2529 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2742));
                            _2743 = (_2742 + 4294967295u) & _2742;
                            uint _2755 = _2753 * 40u;
                            _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            _2769 = _2768.w;
                            uint _2771 = (_2753 * 40u) + 4u;
                            _2784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 3u)).x));
                            uint _2786 = (_2753 * 40u) + 8u;
                            _2796 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x));
                            uint _2799 = (_2753 * 40u) + 16u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            uint _2815 = (_2753 * 40u) + 20u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2831 = (_2753 * 40u) + 24u;
                            vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 3u)).x));
                            uint _2850 = (_2753 * 40u) + 28u;
                            vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            _2875 = fma(_2126, _2863.z, fma(_2125, _2863.y, _2863.x * _2124)) + _2863.w;
                            _2876 = !((fma(_2126, _2844.z, fma(_2125, _2844.y, _2844.x * _2124)) + _2844.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2876)
                            {
                                float _2903 = _2768.x - _2124;
                                float _2904 = _2768.y - _2125;
                                float _2905 = _2768.z - _2126;
                                float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                                float _2909 = inversesqrt(_2906);
                                float _2910 = _2909 * _2903;
                                float _2911 = _2909 * _2904;
                                float _2912 = _2909 * _2905;
                                float _2916 = 1.0 - (_2906 / (_2769 * _2769));
                                float _3952 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                                float _2917 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _2921 = sqrt(_2906) * _2784.w;
                                float _2923 = 1.39999997615814208984375 / (_2921 + 1.39999997615814208984375);
                                float _2924 = _2923 * _2923;
                                float _2927 = ((1.0 - _2924) * dot(vec3(_2910, _2911, _2912), vec3(_397, _400, _403))) + _2924;
                                float _2930 = _2921 * _2921;
                                float _2934 = (fma(_2126, _2812.z, fma(_2125, _2812.y, _2812.x * _2124)) + _2812.w) / _2875;
                                float _2935 = (fma(_2126, _2828.z, fma(_2125, _2828.y, _2828.x * _2124)) + _2828.w) / _2875;
                                float _2939 = 1.0 - dot(vec2(_2934, _2935), vec2(_2934, _2935));
                                float _3968 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2940 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                                float _2941 = _2940 * (((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2917) / ((_2930 * 0.699999988079071044921875) + 1.0));
                                float _2953 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                                float _2954 = 1.0 - _459;
                                float _2961 = sqrt(1.0 - ((1.0 - (_2954 * _2954)) * (1.0 - (_2953 * _2953))));
                                float _2962 = _2961 * _2961;
                                float _2963 = _2962 * _2962;
                                float _2964 = _2910 - _2410;
                                float _2965 = _2911 - _2411;
                                float _2966 = _2912 - _2412;
                                float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                                float _2974 = dot(vec3(_397, _400, _403), vec3((-0.0) - _2410, (-0.0) - _2411, (-0.0) - _2412));
                                float _3979 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2977 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                                float _2978 = dot(vec3(_397, _400, _403), vec3(_2970 * _2964, _2970 * _2965, _2970 * _2966));
                                float _3990 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2981 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                                float _2985 = ((_2981 * _2981) * (_2963 + (-1.0))) + 1.0;
                                float _2986 = _2923 * _2962;
                                float _2987 = _2986 * _2986;
                                float _2993 = ((1.0 - _2987) * dot(vec3(_397, _400, _403), vec3(_2910, _2911, _2912))) + _2987;
                                float _4001 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                                float _2995 = 1.0 - _2962;
                                float _3005 = (0.5 / (((_2994 * ((_2977 * _2995) + _2962)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2962) * _2977))) * _2994;
                                float _4012 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3015 = (_2940 * _2917) * (((_2963 * 3.1415927410125732421875) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) / ((_2985 * _2985) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3015 * _2796.x;
                                frontier_phi_73_pred_1 = _3015 * _2796.y;
                                frontier_phi_73_pred_2 = _2941 * _2784.z;
                                frontier_phi_73_pred_3 = _2941 * _2784.y;
                                frontier_phi_73_pred_4 = _2941 * _2784.x;
                                frontier_phi_73_pred_5 = _3015 * _2796.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3019 = frontier_phi_73_pred;
                            _3020 = frontier_phi_73_pred_1;
                            _3024 = frontier_phi_73_pred_2;
                            _3023 = frontier_phi_73_pred_3;
                            _3022 = frontier_phi_73_pred_4;
                            _3021 = frontier_phi_73_pred_5;
                            _2726 = _3022 + _2739;
                            _2727 = _3023 + _2740;
                            _2728 = _3024 + _2741;
                            _2723 = _3019 + _2736;
                            _2724 = _3020 + _2737;
                            _2725 = _3021 + _2738;
                            if (_2743 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2743;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2726;
                        frontier_phi_67_pred_1 = _2727;
                        frontier_phi_67_pred_2 = _2728;
                        frontier_phi_67_pred_3 = _2725;
                        frontier_phi_67_pred_4 = _2724;
                        frontier_phi_67_pred_5 = _2723;
                    }
                    _2391 = frontier_phi_67_pred;
                    _2393 = frontier_phi_67_pred_1;
                    _2395 = frontier_phi_67_pred_2;
                    _2389 = frontier_phi_67_pred_3;
                    _2387 = frontier_phi_67_pred_4;
                    _2385 = frontier_phi_67_pred_5;
                    uint _2530 = _2529 + 1u;
                    if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2523 = _2385;
                        _2524 = _2387;
                        _2525 = _2389;
                        _2526 = _2391;
                        _2527 = _2393;
                        _2528 = _2395;
                        _2529 = _2530;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2393;
                frontier_phi_55_56_ladder_1 = _2395;
                frontier_phi_55_56_ladder_2 = _2391;
                frontier_phi_55_56_ladder_3 = _2389;
                frontier_phi_55_56_ladder_4 = _2387;
                frontier_phi_55_56_ladder_5 = _2385;
            }
            else
            {
                frontier_phi_55_56_ladder = _2279;
                frontier_phi_55_56_ladder_1 = _2281;
                frontier_phi_55_56_ladder_2 = _2277;
                frontier_phi_55_56_ladder_3 = _2275;
                frontier_phi_55_56_ladder_4 = _2273;
                frontier_phi_55_56_ladder_5 = _2271;
            }
            _2384 = frontier_phi_55_56_ladder_5;
            _2386 = frontier_phi_55_56_ladder_4;
            _2388 = frontier_phi_55_56_ladder_3;
            _2390 = frontier_phi_55_56_ladder_2;
            _2392 = frontier_phi_55_56_ladder;
            _2394 = frontier_phi_55_56_ladder_1;
        }
        float _2399 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
        _2183 = (_2399 * _2390) + _1635;
        _2185 = (_2399 * _2392) + _1637;
        _2187 = (_2399 * _2394) + _1639;
        _2189 = ((_2384 * 0.039999999105930328369140625) * _2399) + _1968;
        _2191 = ((_2386 * 0.039999999105930328369140625) * _2399) + _1970;
        _2193 = ((_2388 * 0.039999999105930328369140625) * _2399) + _1972;
    }
    else
    {
        _2183 = _1635;
        _2185 = _1637;
        _2187 = _1639;
        _2189 = _1968;
        _2191 = _1970;
        _2193 = _1972;
    }
    float _4028 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4039 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4050 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    uint _2213 = _416 + 6u;
    float _2221 = _375 / cbSceneParam._m0[86u].x;
    float _2222 = _376 / cbSceneParam._m0[86u].y;
    vec4 _2236 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2221, _2222, (log2((isnan(cbSceneParam._m0[77u].w) ? _308 : (isnan(_308) ? cbSceneParam._m0[77u].w : min(_308, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2238 = _2236.x;
    float _2239 = _2236.y;
    float _2240 = _2236.z;
    float _2241 = _2236.w;
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    if (_308 > cbSceneParam._m0[78u].w)
    {
        float _2296 = isnan(_308) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _308 : min(cbSceneParam._m0[80u].w, _308));
        float _2297 = _2296 / _308;
        float _2308 = _2297 * _360;
        float _2309 = _361 * _2297;
        float _2310 = (-0.0) - _2309;
        float _2312 = _2297 * _362;
        float _2314 = (cbSceneParam._m0[77u].w * _2310) / _2296;
        float _2315 = _2314 + cbSceneParam._m0[79u].w;
        float _2316 = cbSceneParam._m0[79u].w - _2309;
        float _2322 = sqrt(((_2308 * _2308) + (_2309 * _2309)) + (_2312 * _2312));
        float _2325 = (1.0 - (cbSceneParam._m0[77u].w / _2296)) * _2322;
        float _2330 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2332 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2485;
        if (abs((_2310 - _2314) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2485 = ((((_2315 > 0.0) ? exp2(_2330 * _2315) : (2.0 - exp2(_2332 * _2315))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2325;
        }
        else
        {
            float _2445 = 1.0 / cbSceneParam._m0[80u].x;
            float _2446 = isnan(_2316) ? _2315 : (isnan(_2315) ? _2316 : max(_2315, _2316));
            float _2447 = isnan(_2316) ? _2315 : (isnan(_2315) ? _2316 : min(_2315, _2316));
            float _2456 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : min(_2446, 0.0));
            float _2457 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : min(_2447, 0.0));
            _2485 = ((abs(_2322 / _2310) * cbSceneParam._m0[80u].y) * ((((_2456 - _2457) * 2.0) - ((exp2(_2330 * (isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0)))) - exp2(_2330 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0))))) * _2445)) - ((exp2(_2332 * _2456) - exp2(_2332 * _2457)) * _2445))) + (_2325 * cbSceneParam._m0[80u].z);
        }
        vec4 _2487 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2221, _2222, 1.0), 0.0);
        float _2496 = exp2((_2485 * (-1.44269502162933349609375)) * (1.0 - _2487.w));
        float _2497 = log2(_2496);
        float _2513 = log2(_2241);
        _2334 = (exp2(_2513 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].x)) * _2487.x) / cbSceneParam._m0[78u].x)) + _2238;
        _2336 = (exp2(_2513 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].y)) * _2487.y) / cbSceneParam._m0[78u].y)) + _2239;
        _2338 = (exp2(_2513 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2497 * cbSceneParam._m0[78u].z)) * _2487.z) / cbSceneParam._m0[78u].z)) + _2240;
        _2340 = _2496 * _2241;
    }
    else
    {
        _2334 = _2238;
        _2336 = _2239;
        _2338 = _2240;
        _2340 = _2241;
    }
    float _2352 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2353 = _2352 == 3.0;
    float _2354 = log2(_2340);
    float _2361 = exp2(_2354 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2183 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _443))) + ((_2189 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1249)) * cbPerFrame._m0[3u].x));
    float _2362 = exp2(_2354 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2185 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _443))) + ((_2191 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1249)) * cbPerFrame._m0[3u].x));
    float _2363 = exp2(_2354 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_2187 + ((isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))) * _443))) + ((_2193 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1249)) * cbPerFrame._m0[3u].x));
    float _2372 = (_2352 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2372 * (_2353 ? _2361 : (_2361 + (cbSceneParam._m0[72u].w * _2334)));
    SV_Target.y = _2372 * (_2353 ? _2362 : (_2362 + (cbSceneParam._m0[72u].w * _2336)));
    SV_Target.z = _2372 * (_2353 ? _2363 : (_2363 + (cbSceneParam._m0[72u].w * _2338)));
    SV_Target.w = cbInstanceData._m0[_2213].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2213].w;
}


