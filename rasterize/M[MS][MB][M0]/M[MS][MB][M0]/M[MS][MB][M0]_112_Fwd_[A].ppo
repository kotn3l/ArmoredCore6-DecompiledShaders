#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1172;
float _3533;
float _3534;
float _3535;
float _3536;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3545 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _425 = ((_395.z - _416) * _368) + _416;
    float _428 = ((((_395.x - _414) * _368) + _414) * 2.0) + (-1.0);
    float _430 = ((((_395.y - _415) * _368) + _415) * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3556 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))));
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _464 = (((_452.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _428;
    float _465 = (((_452.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _430;
    float _468 = fma(_436, _220, fma(_465, _227, _464 * _213));
    float _471 = fma(_436, _221, fma(_465, _228, _464 * _214));
    float _474 = fma(_436, _222, fma(_465, _229, _464 * _215));
    float _478 = inversesqrt(dot(vec3(_468, _471, _474), vec3(_468, _471, _474)));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _509 = _507.x;
    float _510 = 1.0 - _509;
    float _514 = ((_509 - _510) * cbMtdParam._m0[24u].z) + _510;
    float _516 = (cbMtdParam._m0[19u].x + dot(vec4(_478 * _468, _478 * _471, _478 * _474, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_514 * cbMtdParam._m0[21u].z);
    float _3567 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _532 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_514 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3578 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _537 = ((_517 * (cbMtdParam._m0[17u].x - _375)) * _533) + _375;
    float _538 = ((_517 * (cbMtdParam._m0[17u].y - _376)) * _533) + _376;
    float _539 = ((_517 * (cbMtdParam._m0[17u].z - _377)) * _533) + _377;
    float _543 = (cbMtdParam._m0[19u].w * (_452.z - _425)) + _425;
    vec4 _556 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _563 = (_556.x * 2.0) + (-1.0);
    float _564 = (_556.y * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3589 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _574 = (((_556.z - _543) * _517) * _533) + _543;
    float _589 = (((cbMtdParam._m0[21u].x * _464) + ((_563 - _464) * _517)) * _533) + _464;
    float _590 = (((cbMtdParam._m0[21u].x * _465) + ((_564 - _465) * _517)) * _533) + _465;
    float _591 = (((sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) - _436) * _517) * _533) + _436;
    float _596 = cbMtdParam._m0[22u].x + _452.w;
    float _599 = fma(_591, _220, fma(_590, _227, _589 * _213));
    float _602 = fma(_591, _221, fma(_590, _228, _589 * _214));
    float _605 = fma(_591, _222, fma(_590, _229, _589 * _215));
    float _609 = inversesqrt(dot(vec3(_599, _602, _605), vec3(_599, _602, _605)));
    float _610 = _609 * _599;
    float _611 = _609 * _602;
    float _612 = _609 * _605;
    float _3600 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _613 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3622 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3633 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3644 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _683 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _673);
    float _684 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _673);
    float _685 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _673);
    float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
    float _690 = _683 * _689;
    float _691 = _684 * _689;
    float _692 = _685 * _689;
    vec4 _697 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _699 = _697.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _853 = sqrt(((_683 * _683) + (_684 * _684)) + (_685 * _685));
        float _859 = (cbMatDynParam._m0[5u].x * _853) + cbMatDynParam._m0[5u].y;
        float _3655 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _864 = (cbMatDynParam._m0[5u].z * _853) + cbMatDynParam._m0[5u].w;
        float _3666 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) - _860)) + _860) < ((_699 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _710 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _711 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _729 = fma(_612, cbSceneParam._m0[5u].z, fma(_611, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _610));
    float _732 = fma(_612, cbSceneParam._m0[6u].z, fma(_611, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _610));
    float _735 = fma(_612, cbSceneParam._m0[7u].z, fma(_611, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _610));
    uint _748 = _232 + 9u;
    uint _749 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3677 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _710, cbSceneParam._m0[86u].y * _711));
    float _773 = ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * TEXCOORD_5.w) * _769.x;
    float _774 = dot(vec3(_610, _611, _612), vec3(_690, _691, _692));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _610) - _690;
    float _782 = (_777 * _611) - _691;
    float _783 = (_777 * _612) - _692;
    float _787 = abs(dot(vec3(_690, _691, _692), vec3(_610, _611, _612)));
    float _3710 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_613);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_842, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834));
        float _900 = fma(_842, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834));
        float _904 = fma(_842, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834));
        float _929 = _834 + _610;
        float _930 = _838 + _611;
        float _931 = _842 + _612;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_610, _611, _612), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3758 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_610, _611, _612), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3791 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_610, _611, _612), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3824 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_842, cbModelParam._m0[30u].z, fma(_838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834));
        float _1218 = fma(_842, cbModelParam._m0[31u].z, fma(_838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834));
        float _1222 = fma(_842, cbModelParam._m0[32u].z, fma(_838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834));
        float _1245 = _834 + _610;
        float _1246 = _838 + _611;
        float _1247 = _842 + _612;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_610, _611, _612), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3887 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_610, _611, _612), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3920 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_610, _611, _612), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3953 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = _1172;
        _1494 = _1172;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1184)) + _1184;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1185)) + _1185;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1186)) + _1186;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _781 * 0.5;
    float _1552 = _782 * 0.5;
    float _1553 = _783 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _613);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_842, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_842, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_842, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1682 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1685 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1713 = frontier_phi_17_15_ladder;
        }
        float _1914;
        if (_1682 > 0.0)
        {
            _1914 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1914 = frontier_phi_26_22_ladder;
        }
        float _2157;
        if (_1685 > 0.0)
        {
            _2157 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2157 = frontier_phi_38_33_ladder;
        }
        float _2159 = isnan(_1914) ? _1713 : (isnan(_1713) ? _1914 : min(_1713, _1914));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1679) + _1668;
        float _2165 = (_2160 * _1682) + _1672;
        float _2166 = (_2160 * _1685) + _1676;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2290 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_16_38_ladder = _2290.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2290.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2290.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_16_38_ladder_2;
        _1703 = frontier_phi_16_38_ladder_1;
        _1705 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1620);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _613);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_842, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_842, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_842, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1778 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1781 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1919;
        if (_1775 > 0.0)
        {
            _1919 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1919 = frontier_phi_28_24_ladder;
        }
        float _2184;
        if (_1778 > 0.0)
        {
            _2184 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2184 = frontier_phi_40_35_ladder;
        }
        float _2389;
        if (_1781 > 0.0)
        {
            _2389 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2389 = frontier_phi_49_46_ladder;
        }
        float _2391 = isnan(_2184) ? _1919 : (isnan(_1919) ? _2184 : min(_1919, _2184));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1775) + _1764;
        float _2397 = (_2392 * _1778) + _1768;
        float _2398 = (_2392 * _1781) + _1772;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2399;
        float _2402 = _2399 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2398 > _2402) || ((_2398 < _2400) || ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 < _2400) || (_2396 > _2402))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2398, cbModelParam._m0[17u].z, fma(_2397, cbModelParam._m0[17u].y, _2396 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2398, cbModelParam._m0[18u].z, fma(_2397, cbModelParam._m0[18u].y, _2396 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2398, cbModelParam._m0[19u].z, fma(_2397, cbModelParam._m0[19u].y, _2396 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_25_49_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_25_49_ladder_2;
        _1802 = frontier_phi_25_49_ladder_1;
        _1804 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1710);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1816 = ((((1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_802 * _789)) * _773;
    float _1817 = _1816 * ((cbModelParam._m0[1u].w * (_1800 - _1701)) + _1701);
    float _1818 = _1816 * ((cbModelParam._m0[1u].w * (_1802 - _1703)) + _1703);
    float _1819 = _1816 * ((cbModelParam._m0[1u].w * (_1804 - _1705)) + _1705);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _773 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1857 = _1840 + 5u;
    float _1863 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1867 = _1840 + 4u;
    float _1873 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1877 = _1840 | 1u;
    float _1888 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_610, _611, _612));
    float _1891 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_610, _611, _612));
    float _4089 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _4100 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1896 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1898 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1905 = ((cbLight._m0[_1857].x * _1863) * _1898) + ((cbLight._m0[_1867].x * _1873) * _1896);
    float _1906 = ((_1863 * cbLight._m0[_1857].y) * _1898) + ((_1873 * cbLight._m0[_1867].y) * _1896);
    float _1907 = ((_1863 * cbLight._m0[_1857].z) * _1898) + ((_1873 * cbLight._m0[_1867].z) * _1896);
    uvec4 _1911 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _1913 = _1911.x == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1913)
    {
        _1924 = _1905;
        _1926 = _1906;
        _1928 = _1907;
    }
    else
    {
        uint _1932 = _1840 + 6u;
        float _1948 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _4111 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1951 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1924 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1905;
        _1926 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1906;
        _1928 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1907;
    }
    bool _1931 = _1911.y == 0u;
    float _1969;
    float _1971;
    float _1973;
    if (_1931)
    {
        _1969 = _1924;
        _1971 = _1926;
        _1973 = _1928;
    }
    else
    {
        uint _2128 = _1840 + 7u;
        float _2144 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_610, _611, _612)) * 0.5) + 0.5;
        float _2145 = _2144 * _2144;
        float _4127 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2146 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2147 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1969 = (((cbLight._m0[_2128].x * 0.3183098733425140380859375) * _2146) * _2147) + _1924;
        _1971 = (((cbLight._m0[_2128].y * 0.3183098733425140380859375) * _2146) * _2147) + _1926;
        _1973 = (((cbLight._m0[_2128].z * 0.3183098733425140380859375) * _2146) * _2147) + _1928;
    }
    uint _1976 = _1840 + 8u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _613) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1840].x + _690;
    float _1992 = cbLight._m0[_1840].y + _691;
    float _1993 = cbLight._m0[_1840].z + _692;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1840].xyz));
    float _4143 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2005 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2006 = dot(vec3(_610, _611, _612), vec3(_1998, _1999, _2000));
    float _4165 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2010 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_1998, _1999, _2000));
    float _4176 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2014 = _1990 * _1990;
    float _2018 = ((_2009 * _2009) * (_2014 + (-1.0))) + 1.0;
    float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2030 = 1.0 - _1990;
    float _2041 = (0.5 / (((_2005 * ((_2004 * _2030) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2030) + _1990) * _2004))) * _2004;
    float _4187 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2043 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2014 / ((_2018 * _2018) * 3.141590118408203125));
    uint _2054 = _1840 + 9u;
    float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _613) * 0.949999988079071044921875);
    float _2066 = _2065 * _2065;
    float _2067 = cbLight._m0[_1877].x + _690;
    float _2068 = cbLight._m0[_1877].y + _691;
    float _2069 = cbLight._m0[_1877].z + _692;
    float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
    float _2074 = _2073 * _2067;
    float _2075 = _2073 * _2068;
    float _2076 = _2073 * _2069;
    float _2077 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_1877].xyz));
    float _4198 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2080 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2081 = dot(vec3(_610, _611, _612), vec3(_2074, _2075, _2076));
    float _4209 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2085 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2074, _2075, _2076));
    float _4220 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2089 = _2066 * _2066;
    float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
    float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2103 = 1.0 - _2066;
    float _2113 = (0.5 / (((_2005 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2103) + _2066) * _2080))) * _2080;
    float _4231 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
    float _2125 = (((_2102 * cbLight._m0[_2054].x) * _2115) * _1863) + (((_2029 * cbLight._m0[_1976].x) * _2043) * _1873);
    float _2126 = (((_2102 * cbLight._m0[_2054].y) * _2115) * _1863) + (((_2029 * cbLight._m0[_1976].y) * _2043) * _1873);
    float _2127 = (((_2102 * cbLight._m0[_2054].z) * _2115) * _1863) + (((_2029 * cbLight._m0[_1976].z) * _2043) * _1873);
    float _2189;
    float _2191;
    float _2193;
    if (_1913)
    {
        _2189 = _2125;
        _2191 = _2126;
        _2193 = _2127;
    }
    else
    {
        uint _2195 = _1840 + 2u;
        uint _2199 = _1840 + 10u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _613) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _690;
        float _2216 = cbLight._m0[_2195].y + _691;
        float _2217 = cbLight._m0[_2195].z + _692;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2195].xyz));
        float _4242 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2229 = dot(vec3(_610, _611, _612), vec3(_2222, _2223, _2224));
        float _4253 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4264 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2251 = 1.0 - _2214;
        float _2261 = (0.5 / (((_2005 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2251) + _2214) * _2228))) * _2228;
        float _4275 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2189 = (((_2250 * cbLight._m0[_2199].x) * _2263) * _2264) + _2125;
        _2191 = (((_2250 * cbLight._m0[_2199].y) * _2263) * _2264) + _2126;
        _2193 = (((_2250 * cbLight._m0[_2199].z) * _2263) * _2264) + _2127;
    }
    float _2299;
    float _2301;
    float _2303;
    if (_1931)
    {
        _2299 = _2189;
        _2301 = _2191;
        _2303 = _2193;
    }
    else
    {
        uint _2310 = _1840 + 3u;
        uint _2314 = _1840 + 11u;
        float _2328 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _613) * 0.949999988079071044921875);
        float _2329 = _2328 * _2328;
        float _2330 = cbLight._m0[_2310].x + _690;
        float _2331 = cbLight._m0[_2310].y + _691;
        float _2332 = cbLight._m0[_2310].z + _692;
        float _2336 = inversesqrt(dot(vec3(_2330, _2331, _2332), vec3(_2330, _2331, _2332)));
        float _2337 = _2336 * _2330;
        float _2338 = _2336 * _2331;
        float _2339 = _2336 * _2332;
        float _2340 = dot(vec3(_610, _611, _612), vec3(cbLight._m0[_2310].xyz));
        float _4291 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2343 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2344 = dot(vec3(_610, _611, _612), vec3(_2337, _2338, _2339));
        float _4302 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2348 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2337, _2338, _2339));
        float _4313 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2352 = _2329 * _2329;
        float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
        float _2365 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2366 = 1.0 - _2329;
        float _2376 = (0.5 / (((_2005 * ((_2343 * _2366) + _2329)) + 9.9999999392252902907785028219223e-09) + (((_2005 * _2366) + _2329) * _2343))) * _2343;
        float _4324 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2378 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
        float _2379 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2299 = (((_2365 * cbLight._m0[_2314].x) * _2378) * _2379) + _2189;
        _2301 = (((_2365 * cbLight._m0[_2314].y) * _2378) * _2379) + _2191;
        _2303 = (((_2365 * cbLight._m0[_2314].z) * _2378) * _2379) + _2193;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1838.y == 0u)
    {
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2454;
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2454;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2454;
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.x;
        uint _2481 = uint((float(_2469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _711) / _2470))) + floor(float(uint(cbSceneParam._m0[85u].x * _710) / _2470)));
        float _2491 = (log2(_2457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        uint _2495 = uint(isnan(14.0) ? _2492 : (isnan(_2492) ? 14.0 : min(_2492, 14.0)));
        uvec4 _2500 = texelFetch(g_lightClusterGridBuffer, int(((_2495 << 2u) + (_2481 << 6u)) >> 2u));
        uint _2501 = _2500.x;
        uint _2502 = _2469.z;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((((1u << ((_2502 >> 4u) & 15u)) + 4294967295u) & _2501) == 0u) || ((_2502 & 240u) == 0u))
        {
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
        }
        else
        {
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2771)
                {
                    frontier_phi_66_pred = _2755;
                    frontier_phi_66_pred_1 = _2760;
                    frontier_phi_66_pred_2 = _2759;
                    frontier_phi_66_pred_3 = _2758;
                    frontier_phi_66_pred_4 = _2757;
                    frontier_phi_66_pred_5 = _2756;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2770;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2761 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2455;
                        float _2967 = _2926.y - _2456;
                        float _2968 = _2926.z - _2457;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_729, _732, _735), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4350 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2455;
                        float _3002 = (-0.0) - _2456;
                        float _3003 = (-0.0) - _2457;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _789;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_729, _732, _735), vec3(_3008, _3009, _3010));
                        float _4366 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3043 = dot(vec3(_729, _732, _735), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4377 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4388 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4399 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2830 = (_2997 * _2945.x) + _2903;
                        _2831 = (_2997 * _2945.y) + _2904;
                        _2832 = (_2997 * _2945.z) + _2905;
                        _2827 = (_3078 * _2962.x) + _2900;
                        _2828 = (_3078 * _2962.y) + _2901;
                        _2829 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_66_pred = _2827;
                    frontier_phi_66_pred_1 = _2832;
                    frontier_phi_66_pred_2 = _2831;
                    frontier_phi_66_pred_3 = _2830;
                    frontier_phi_66_pred_4 = _2829;
                    frontier_phi_66_pred_5 = _2828;
                }
                _2603 = frontier_phi_66_pred;
                _2613 = frontier_phi_66_pred_1;
                _2611 = frontier_phi_66_pred_2;
                _2609 = frontier_phi_66_pred_3;
                _2607 = frontier_phi_66_pred_4;
                _2605 = frontier_phi_66_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2603;
                    _2756 = _2605;
                    _2757 = _2607;
                    _2758 = _2609;
                    _2759 = _2611;
                    _2760 = _2613;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
        }
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.z;
        uint _2619 = (_2617 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2619) & _2501) == 0u)
        {
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
            _2729 = _2608;
            _2731 = _2610;
            _2733 = _2612;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
            float _2749 = _2748 * _2455;
            float _2750 = _2748 * _2456;
            float _2751 = _2748 * _2457;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2619 < ((_2617 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2883 = _2602;
                float _2884 = _2604;
                float _2885 = _2606;
                float _2886 = _2608;
                float _2887 = _2610;
                float _2888 = _2612;
                uint _2889 = _2619;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2899)
                    {
                        frontier_phi_77_pred = _2888;
                        frontier_phi_77_pred_1 = _2887;
                        frontier_phi_77_pred_2 = _2886;
                        frontier_phi_77_pred_3 = _2885;
                        frontier_phi_77_pred_4 = _2884;
                        frontier_phi_77_pred_5 = _2883;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        uint _3111 = _2898;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3180;
                        vec4 _3196;
                        float _3242;
                        bool _3243;
                        for (;;)
                        {
                            uint _3122 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3167 = (_3122 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3183 = (_3122 * 40u) + 20u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            uint _3198 = (_3122 * 40u) + 24u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3217 = (_3122 * 40u) + 28u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3242 = fma(_2457, _3230.z, fma(_2456, _3230.y, _3230.x * _2455)) + _3230.w;
                            _3243 = !((fma(_2457, _3211.z, fma(_2456, _3211.y, _3211.x * _2455)) + _3211.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3243)
                            {
                                float _3270 = _3137.x - _2455;
                                float _3271 = _3137.y - _2456;
                                float _3272 = _3137.z - _2457;
                                float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                                float _3276 = inversesqrt(_3273);
                                float _3277 = _3276 * _3270;
                                float _3278 = _3276 * _3271;
                                float _3279 = _3276 * _3272;
                                float _3283 = 1.0 - (_3273 / (_3138 * _3138));
                                float _4410 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3288 = sqrt(_3273) * _3153.w;
                                float _3290 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                                float _3291 = _3290 * _3290;
                                float _3294 = ((1.0 - _3291) * dot(vec3(_3277, _3278, _3279), vec3(_729, _732, _735))) + _3291;
                                float _3297 = _3288 * _3288;
                                float _3301 = (fma(_2457, _3180.z, fma(_2456, _3180.y, _3180.x * _2455)) + _3180.w) / _3242;
                                float _3302 = (fma(_2457, _3196.z, fma(_2456, _3196.y, _3196.x * _2455)) + _3196.w) / _3242;
                                float _3306 = 1.0 - dot(vec2(_3301, _3302), vec2(_3301, _3302));
                                float _4426 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3308 = _3307 * (((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3284) / ((_3297 * 0.699999988079071044921875) + 1.0));
                                float _3320 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                                float _3321 = 1.0 - _789;
                                float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                                float _3329 = _3328 * _3328;
                                float _3330 = _3329 * _3329;
                                float _3331 = _3277 - _2749;
                                float _3332 = _3278 - _2750;
                                float _3333 = _3279 - _2751;
                                float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                                float _3341 = dot(vec3(_729, _732, _735), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4437 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3345 = dot(vec3(_729, _732, _735), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                                float _4448 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                                float _3353 = _3290 * _3329;
                                float _3354 = _3353 * _3353;
                                float _3360 = ((1.0 - _3354) * dot(vec3(_729, _732, _735), vec3(_3277, _3278, _3279))) + _3354;
                                float _4459 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3362 = 1.0 - _3329;
                                float _3372 = (0.5 / (((_3361 * ((_3344 * _3362) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3329) * _3344))) * _3361;
                                float _4470 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3382 = (_3307 * _3284) * (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3352 * _3352) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3308 * _3153.y;
                                frontier_phi_83_pred_1 = _3308 * _3153.x;
                                frontier_phi_83_pred_2 = _3382 * _3165.z;
                                frontier_phi_83_pred_3 = _3382 * _3165.y;
                                frontier_phi_83_pred_4 = _3382 * _3165.x;
                                frontier_phi_83_pred_5 = _3308 * _3153.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_83_pred;
                            _3389 = frontier_phi_83_pred_1;
                            _3388 = frontier_phi_83_pred_2;
                            _3387 = frontier_phi_83_pred_3;
                            _3386 = frontier_phi_83_pred_4;
                            _3391 = frontier_phi_83_pred_5;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            _3094 = _3388 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3097;
                        frontier_phi_77_pred_1 = _3096;
                        frontier_phi_77_pred_2 = _3095;
                        frontier_phi_77_pred_3 = _3094;
                        frontier_phi_77_pred_4 = _3093;
                        frontier_phi_77_pred_5 = _3092;
                    }
                    _2734 = frontier_phi_77_pred;
                    _2732 = frontier_phi_77_pred_1;
                    _2730 = frontier_phi_77_pred_2;
                    _2728 = frontier_phi_77_pred_3;
                    _2726 = frontier_phi_77_pred_4;
                    _2724 = frontier_phi_77_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2724;
                        _2884 = _2726;
                        _2885 = _2728;
                        _2886 = _2730;
                        _2887 = _2732;
                        _2888 = _2734;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2728;
                frontier_phi_58_59_ladder_1 = _2734;
                frontier_phi_58_59_ladder_2 = _2732;
                frontier_phi_58_59_ladder_3 = _2730;
                frontier_phi_58_59_ladder_4 = _2726;
                frontier_phi_58_59_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_58_59_ladder = _2606;
                frontier_phi_58_59_ladder_1 = _2612;
                frontier_phi_58_59_ladder_2 = _2610;
                frontier_phi_58_59_ladder_3 = _2608;
                frontier_phi_58_59_ladder_4 = _2604;
                frontier_phi_58_59_ladder_5 = _2602;
            }
            _2723 = frontier_phi_58_59_ladder_5;
            _2725 = frontier_phi_58_59_ladder_4;
            _2727 = frontier_phi_58_59_ladder;
            _2729 = frontier_phi_58_59_ladder_3;
            _2731 = frontier_phi_58_59_ladder_2;
            _2733 = frontier_phi_58_59_ladder_1;
        }
        float _2738 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2514 = (_2738 * _2729) + _1969;
        _2516 = (_2738 * _2731) + _1971;
        _2518 = (_2738 * _2733) + _1973;
        _2520 = ((_2723 * 0.039999999105930328369140625) * _2738) + _2299;
        _2522 = ((_2725 * 0.039999999105930328369140625) * _2738) + _2301;
        _2524 = ((_2727 * 0.039999999105930328369140625) * _2738) + _2303;
    }
    else
    {
        _2514 = _1969;
        _2516 = _1971;
        _2518 = _1973;
        _2520 = _2299;
        _2522 = _2301;
        _2524 = _2303;
    }
    float _4486 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4497 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4508 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2541 = ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2514 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _773))) + ((_2520 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2542 = ((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2516 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _773))) + ((_2522 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2543 = ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2518 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _773))) + ((_2524 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    uint _2544 = _232 + 6u;
    float _2552 = _710 / cbSceneParam._m0[86u].x;
    float _2553 = _711 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2628 = _2627 / _631;
        float _2639 = _2628 * _683;
        float _2640 = _684 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2643 = _2628 * _685;
        float _2645 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2646 = _2645 + cbSceneParam._m0[79u].w;
        float _2647 = cbSceneParam._m0[79u].w - _2640;
        float _2653 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2643 * _2643));
        float _2656 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2653;
        float _2661 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2663 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2840;
        if (abs((_2641 - _2645) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2840 = ((((_2646 > 0.0) ? exp2(_2661 * _2646) : (2.0 - exp2(_2663 * _2646))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2656;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : max(_2646, _2647));
            float _2786 = isnan(_2647) ? _2646 : (isnan(_2646) ? _2647 : min(_2646, _2647));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2840 = ((abs(_2653 / _2641) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2661 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2661 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2663 * _2795) - exp2(_2663 * _2796)) * _2784))) + (_2656 * cbSceneParam._m0[80u].z);
        }
        vec4 _2842 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2851 = exp2((_2840 * (-1.44269502162933349609375)) * (1.0 - _2842.w));
        float _2852 = log2(_2851);
        float _2868 = log2(_2572);
        _2665 = (exp2(_2868 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].x)) * _2842.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2667 = (exp2(_2868 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].y)) * _2842.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2669 = (exp2(_2868 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2852 * cbSceneParam._m0[78u].z)) * _2842.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2671 = _2851 * _2572;
    }
    else
    {
        _2665 = _2569;
        _2667 = _2570;
        _2669 = _2571;
        _2671 = _2572;
    }
    bool _2878;
    vec4 _2681;
    vec4 _2703;
    float _2705;
    float _2709;
    float _2710;
    float _2711;
    float _2712;
    bool _2722;
    for (;;)
    {
        _2681 = cbMatDynParam._m0[0u];
        float _2683 = roundEven(_2681.y);
        bool _2684 = _2683 == 3.0;
        float _2685 = log2(_2671);
        float _2692 = exp2(_2685 * cbSceneParam._m0[78u].x) * _2541;
        float _2693 = exp2(_2685 * cbSceneParam._m0[78u].y) * _2542;
        float _2694 = exp2(_2685 * cbSceneParam._m0[78u].z) * _2543;
        float _2701 = _699 + (-0.5);
        _2703 = cbMtdParam._m0[1u];
        _2705 = _2703.y * _2701;
        float _2708 = (_2683 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2709 = _2708 * (_2684 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2665)));
        _2710 = _2708 * (_2684 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2667)));
        _2711 = _2708 * (_2684 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2669)));
        _2712 = _2701 * 0.999000012874603271484375;
        _2722 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2722)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2712) < 0.5)
            {
                _2878 = true;
                break;
            }
        }
        uint _2819 = _748 + uint(_2681.w);
        if ((cbInstanceData._m0[_2819].w < 1.0) && ((cbInstanceData._m0[_2819].w + _2712) < 0.5))
        {
            _2878 = true;
            break;
        }
        if ((_2705 + 1.0) < _2703.x)
        {
            _2878 = true;
            break;
        }
        _2878 = false;
        break;
    }
    float _3083;
    if (_2878)
    {
        discard_state = true;
        _3083 = 0.0;
    }
    else
    {
        _3083 = cbInstanceData._m0[_2544].w;
    }
    SV_Target.x = _2709;
    SV_Target.y = _2710;
    SV_Target.z = _2711;
    SV_Target.w = _3083;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2544].w;
    discard_exit();
}


