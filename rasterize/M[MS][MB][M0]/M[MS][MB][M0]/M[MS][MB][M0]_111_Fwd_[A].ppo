#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1195;
float _3555;
float _3556;
float _3557;
float _3558;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3567 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _374) + _449;
    float _461 = ((((_428.x - _447) * _374) + _447) * 2.0) + (-1.0);
    float _462 = ((((_428.y - _448) * _374) + _448) * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3578 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _471 = _461 + ((((_401.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _472 = _462 + ((((_401.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _475 = fma(_468, _226, fma(_472, _233, _471 * _219));
    float _478 = fma(_468, _227, fma(_472, _234, _471 * _220));
    float _481 = fma(_468, _228, fma(_472, _235, _471 * _221));
    float _485 = inversesqrt(dot(vec3(_475, _478, _481), vec3(_475, _478, _481)));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _531 = _529.x;
    float _532 = 1.0 - _531;
    float _536 = ((_531 - _532) * cbMtdParam._m0[24u].z) + _532;
    float _538 = (cbMtdParam._m0[19u].x + dot(vec4(_485 * _475, _485 * _478, _485 * _481, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_536 * cbMtdParam._m0[21u].z);
    float _3589 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _554 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_536 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3600 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _559 = ((_539 * (cbMtdParam._m0[17u].x - _381)) * _555) + _381;
    float _560 = ((_539 * (cbMtdParam._m0[17u].y - _382)) * _555) + _382;
    float _561 = ((_539 * (cbMtdParam._m0[17u].z - _383)) * _555) + _383;
    float _566 = (((_401.z - _458) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _458;
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _586 = (_579.x * 2.0) + (-1.0);
    float _587 = (_579.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3611 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _597 = (((_579.z - _566) * _539) * _555) + _566;
    float _612 = (((cbMtdParam._m0[21u].x * _471) + ((_586 - _471) * _539)) * _555) + _471;
    float _613 = (((cbMtdParam._m0[21u].x * _472) + ((_587 - _472) * _539)) * _555) + _472;
    float _614 = (((sqrt(1.0 - (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) - _468) * _539) * _555) + _468;
    float _619 = cbMtdParam._m0[22u].x + _501.w;
    float _622 = fma(_614, _226, fma(_613, _233, _612 * _219));
    float _625 = fma(_614, _227, fma(_613, _234, _612 * _220));
    float _628 = fma(_614, _228, fma(_613, _235, _612 * _221));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3622 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _636 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3644 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3655 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3666 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3677 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3688 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) - _883)) + _883) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _755 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _758 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _771 = _238 + 9u;
    uint _772 = _771 + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3699 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _796 = ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _633) - _713;
    float _805 = (_800 * _634) - _714;
    float _806 = (_800 * _635) - _715;
    float _810 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3732 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_636);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _923 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _927 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _952 = _857 + _633;
        float _953 = _861 + _634;
        float _954 = _865 + _635;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_633, _634, _635), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3780 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_633, _634, _635), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3813 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_633, _634, _635), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3846 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1241 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1245 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1268 = _857 + _633;
        float _1269 = _861 + _634;
        float _1270 = _865 + _635;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_633, _634, _635), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3909 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_633, _634, _635), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3942 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_633, _634, _635), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3975 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = _1195;
        _1515 = _1195;
        _1516 = _1195;
        _1517 = _1195;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1207)) + _1207;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _804 * 0.5;
    float _1575 = _805 * 0.5;
    float _1576 = _806 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1691 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1695 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1699 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1702 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1705 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1708 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1736;
        if (_1702 > 0.0)
        {
            _1736 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1736 = frontier_phi_17_15_ladder;
        }
        float _1937;
        if (_1705 > 0.0)
        {
            _1937 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1937 = frontier_phi_26_22_ladder;
        }
        float _2180;
        if (_1708 > 0.0)
        {
            _2180 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2180 = frontier_phi_38_33_ladder;
        }
        float _2182 = isnan(_1937) ? _1736 : (isnan(_1736) ? _1937 : min(_1736, _1937));
        float _2183 = isnan(_2180) ? _2182 : (isnan(_2182) ? _2180 : min(_2182, _2180));
        float _2187 = (_2183 * _1702) + _1691;
        float _2188 = (_2183 * _1705) + _1695;
        float _2189 = (_2183 * _1708) + _1699;
        float _2190 = _2183 * 9.9999997473787516355514526367188e-05;
        float _2192 = (-1.0) - _2190;
        float _2194 = _2190 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2189 > _2194) || ((_2189 < _2192) || ((_2188 > _2194) || ((_2188 < _2192) || ((_2187 < _2192) || (_2187 > _2194))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2189, cbModelParam._m0[9u].z, fma(_2188, cbModelParam._m0[9u].y, _2187 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2189, cbModelParam._m0[10u].z, fma(_2188, cbModelParam._m0[10u].y, _2187 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2189, cbModelParam._m0[11u].z, fma(_2188, cbModelParam._m0[11u].y, _2187 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_16_38_ladder = _2313.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2313.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2313.x * cbModelParam._m0[1u].y;
        }
        _1724 = frontier_phi_16_38_ladder_2;
        _1726 = frontier_phi_16_38_ladder_1;
        _1728 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1643);
        _1724 = _1712.x * cbModelParam._m0[1u].y;
        _1726 = _1712.y * cbModelParam._m0[1u].y;
        _1728 = _1712.z * cbModelParam._m0[1u].y;
    }
    float _1732 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1732 : min(cbModelParam._m0[25u].w, _1732));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1787 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1791 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1795 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1798 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1801 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1804 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1942;
        if (_1798 > 0.0)
        {
            _1942 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1942 = frontier_phi_28_24_ladder;
        }
        float _2207;
        if (_1801 > 0.0)
        {
            _2207 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2207 = frontier_phi_40_35_ladder;
        }
        float _2412;
        if (_1804 > 0.0)
        {
            _2412 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2412 = frontier_phi_49_46_ladder;
        }
        float _2414 = isnan(_2207) ? _1942 : (isnan(_1942) ? _2207 : min(_1942, _2207));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1798) + _1787;
        float _2420 = (_2415 * _1801) + _1791;
        float _2421 = (_2415 * _1804) + _1795;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2422;
        float _2425 = _2422 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2421 > _2425) || ((_2421 < _2423) || ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 < _2423) || (_2419 > _2425))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2421, cbModelParam._m0[17u].z, fma(_2420, cbModelParam._m0[17u].y, _2419 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2421, cbModelParam._m0[18u].z, fma(_2420, cbModelParam._m0[18u].y, _2419 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2421, cbModelParam._m0[19u].z, fma(_2420, cbModelParam._m0[19u].y, _2419 * cbModelParam._m0[19u].x))), _1733);
            frontier_phi_25_49_ladder = _2620.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2620.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2620.x * cbModelParam._m0[1u].z;
        }
        _1823 = frontier_phi_25_49_ladder_2;
        _1825 = frontier_phi_25_49_ladder_1;
        _1827 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1733);
        _1823 = _1807.x * cbModelParam._m0[1u].z;
        _1825 = _1807.y * cbModelParam._m0[1u].z;
        _1827 = _1807.z * cbModelParam._m0[1u].z;
    }
    float _1839 = ((((1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _812)) * _796;
    float _1840 = _1839 * ((cbModelParam._m0[1u].w * (_1823 - _1724)) + _1724);
    float _1841 = _1839 * ((cbModelParam._m0[1u].w * (_1825 - _1726)) + _1726);
    float _1842 = _1839 * ((cbModelParam._m0[1u].w * (_1827 - _1728)) + _1728);
    float _1845 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1848 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1851 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1840 * cbSceneParam._m0[91u].x));
    uvec4 _1861 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1863 = _1861.x * 14u;
    uint _1864 = _1863 + 13u;
    float _1871 = _796 + (-1.0);
    float _1876 = (cbLight._m0[_1864].x * _1871) + 1.0;
    float _1877 = (cbLight._m0[_1864].y * _1871) + 1.0;
    float _1878 = (cbLight._m0[_1864].z * _1871) + 1.0;
    float _1879 = (cbLight._m0[_1864].w * _1871) + 1.0;
    uint _1880 = _1863 + 5u;
    float _1886 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1890 = _1863 + 4u;
    float _1896 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1900 = _1863 | 1u;
    float _1911 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_633, _634, _635));
    float _1914 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_633, _634, _635));
    float _4111 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _4122 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1919 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1921 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1928 = ((cbLight._m0[_1880].x * _1886) * _1921) + ((cbLight._m0[_1890].x * _1896) * _1919);
    float _1929 = ((_1886 * cbLight._m0[_1880].y) * _1921) + ((_1896 * cbLight._m0[_1890].y) * _1919);
    float _1930 = ((_1886 * cbLight._m0[_1880].z) * _1921) + ((_1896 * cbLight._m0[_1890].z) * _1919);
    uvec4 _1934 = floatBitsToUint(cbLight._m0[_1863 + 12u]);
    bool _1936 = _1934.x == 0u;
    float _1947;
    float _1949;
    float _1951;
    if (_1936)
    {
        _1947 = _1928;
        _1949 = _1929;
        _1951 = _1930;
    }
    else
    {
        uint _1955 = _1863 + 6u;
        float _1971 = (dot(vec3(cbLight._m0[_1863 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1972 = _1971 * _1971;
        float _4133 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1973 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1974 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _1947 = (((cbLight._m0[_1955].x * 0.3183098733425140380859375) * _1973) * _1974) + _1928;
        _1949 = (((cbLight._m0[_1955].y * 0.3183098733425140380859375) * _1973) * _1974) + _1929;
        _1951 = (((cbLight._m0[_1955].z * 0.3183098733425140380859375) * _1973) * _1974) + _1930;
    }
    bool _1954 = _1934.y == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1954)
    {
        _1992 = _1947;
        _1994 = _1949;
        _1996 = _1951;
    }
    else
    {
        uint _2151 = _1863 + 7u;
        float _2167 = (dot(vec3(cbLight._m0[_1863 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2168 = _2167 * _2167;
        float _4149 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2169 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2170 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1992 = (((cbLight._m0[_2151].x * 0.3183098733425140380859375) * _2169) * _2170) + _1947;
        _1994 = (((cbLight._m0[_2151].y * 0.3183098733425140380859375) * _2169) * _2170) + _1949;
        _1996 = (((cbLight._m0[_2151].z * 0.3183098733425140380859375) * _2169) * _2170) + _1951;
    }
    uint _1999 = _1863 + 8u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1863].w)) * _636) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1863].x + _713;
    float _2015 = cbLight._m0[_1863].y + _714;
    float _2016 = cbLight._m0[_1863].z + _715;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1863].xyz));
    float _4165 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2028 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2029 = dot(vec3(_633, _634, _635), vec3(_2021, _2022, _2023));
    float _4187 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_2021, _2022, _2023));
    float _4198 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2013 * _2013;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2053 = 1.0 - _2013;
    float _2064 = (0.5 / (((_2028 * ((_2027 * _2053) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2053) + _2013) * _2027))) * _2027;
    float _4209 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2066 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    uint _2077 = _1863 + 9u;
    float _2088 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _636) * 0.949999988079071044921875);
    float _2089 = _2088 * _2088;
    float _2090 = cbLight._m0[_1900].x + _713;
    float _2091 = cbLight._m0[_1900].y + _714;
    float _2092 = cbLight._m0[_1900].z + _715;
    float _2096 = inversesqrt(dot(vec3(_2090, _2091, _2092), vec3(_2090, _2091, _2092)));
    float _2097 = _2096 * _2090;
    float _2098 = _2096 * _2091;
    float _2099 = _2096 * _2092;
    float _2100 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1900].xyz));
    float _4220 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2104 = dot(vec3(_633, _634, _635), vec3(_2097, _2098, _2099));
    float _4231 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2108 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_2097, _2098, _2099));
    float _4242 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2112 = _2089 * _2089;
    float _2116 = ((_2107 * _2107) * (_2112 + (-1.0))) + 1.0;
    float _2125 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2126 = 1.0 - _2089;
    float _2136 = (0.5 / (((_2028 * ((_2103 * _2126) + _2089)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2126) + _2089) * _2103))) * _2103;
    float _4253 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2138 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2112 / ((_2116 * _2116) * 3.141590118408203125));
    float _2148 = (((_2125 * cbLight._m0[_2077].x) * _2138) * _1886) + (((_2052 * cbLight._m0[_1999].x) * _2066) * _1896);
    float _2149 = (((_2125 * cbLight._m0[_2077].y) * _2138) * _1886) + (((_2052 * cbLight._m0[_1999].y) * _2066) * _1896);
    float _2150 = (((_2125 * cbLight._m0[_2077].z) * _2138) * _1886) + (((_2052 * cbLight._m0[_1999].z) * _2066) * _1896);
    float _2212;
    float _2214;
    float _2216;
    if (_1936)
    {
        _2212 = _2148;
        _2214 = _2149;
        _2216 = _2150;
    }
    else
    {
        uint _2218 = _1863 + 2u;
        uint _2222 = _1863 + 10u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _636) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _713;
        float _2239 = cbLight._m0[_2218].y + _714;
        float _2240 = cbLight._m0[_2218].z + _715;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2218].xyz));
        float _4264 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2252 = dot(vec3(_633, _634, _635), vec3(_2245, _2246, _2247));
        float _4275 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4286 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2274 = 1.0 - _2237;
        float _2284 = (0.5 / (((_2028 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2274) + _2237) * _2251))) * _2251;
        float _4297 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2212 = (((_2273 * cbLight._m0[_2222].x) * _2286) * _2287) + _2148;
        _2214 = (((_2273 * cbLight._m0[_2222].y) * _2286) * _2287) + _2149;
        _2216 = (((_2273 * cbLight._m0[_2222].z) * _2286) * _2287) + _2150;
    }
    float _2322;
    float _2324;
    float _2326;
    if (_1954)
    {
        _2322 = _2212;
        _2324 = _2214;
        _2326 = _2216;
    }
    else
    {
        uint _2333 = _1863 + 3u;
        uint _2337 = _1863 + 11u;
        float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _636) * 0.949999988079071044921875);
        float _2352 = _2351 * _2351;
        float _2353 = cbLight._m0[_2333].x + _713;
        float _2354 = cbLight._m0[_2333].y + _714;
        float _2355 = cbLight._m0[_2333].z + _715;
        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
        float _2360 = _2359 * _2353;
        float _2361 = _2359 * _2354;
        float _2362 = _2359 * _2355;
        float _2363 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2333].xyz));
        float _4313 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2367 = dot(vec3(_633, _634, _635), vec3(_2360, _2361, _2362));
        float _4324 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2371 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2360, _2361, _2362));
        float _4335 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2375 = _2352 * _2352;
        float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
        float _2388 = (exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2389 = 1.0 - _2352;
        float _2399 = (0.5 / (((_2028 * ((_2366 * _2389) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2028 * _2389) + _2352) * _2366))) * _2366;
        float _4346 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2401 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
        float _2402 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2322 = (((_2388 * cbLight._m0[_2337].x) * _2401) * _2402) + _2212;
        _2324 = (((_2388 * cbLight._m0[_2337].y) * _2401) * _2402) + _2214;
        _2326 = (((_2388 * cbLight._m0[_2337].z) * _2401) * _2402) + _2216;
    }
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    if (_1861.y == 0u)
    {
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2477;
        float _2479 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2477;
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2477;
        uvec4 _2492 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2493 = _2492.x;
        uint _2504 = uint((float(_2492.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2493))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2493)));
        float _2514 = (log2(_2480 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2515 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        uint _2518 = uint(isnan(14.0) ? _2515 : (isnan(_2515) ? 14.0 : min(_2515, 14.0)));
        uvec4 _2523 = texelFetch(g_lightClusterGridBuffer, int(((_2518 << 2u) + (_2504 << 6u)) >> 2u));
        uint _2524 = _2523.x;
        uint _2525 = _2492.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2525 >> 4u) & 15u)) + 4294967295u) & _2524) == 0u) || ((_2525 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            uint _2784 = 0u;
            uint _2793;
            bool _2794;
            for (;;)
            {
                _2793 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                _2794 = _2793 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2794)
                {
                    frontier_phi_66_pred = _2778;
                    frontier_phi_66_pred_1 = _2783;
                    frontier_phi_66_pred_2 = _2782;
                    frontier_phi_66_pred_3 = _2781;
                    frontier_phi_66_pred_4 = _2780;
                    frontier_phi_66_pred_5 = _2779;
                }
                else
                {
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    uint _2929;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2793;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    for (;;)
                    {
                        uint _2933 = uint(findLSB(_2929)) + (_2784 << 5u);
                        uint _2930 = (_2929 + 4294967295u) & _2929;
                        uint _2935 = _2933 * 48u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2955 = (_2933 * 48u) + 4u;
                        vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 3u)).x));
                        uint _2974 = (_2933 * 48u) + 8u;
                        vec3 _2985 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2974)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2974 + 2u)).x));
                        float _2989 = _2949.x - _2478;
                        float _2990 = _2949.y - _2479;
                        float _2991 = _2949.z - _2480;
                        float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                        float _2995 = inversesqrt(_2992);
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _2999 = dot(vec3(_752, _755, _758), vec3(_2996, _2997, _2998));
                        float _3004 = 1.0 - (_2992 * _2949.w);
                        float _4372 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3005 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3006 = sqrt(_2992) * _2968.w;
                        float _3009 = 1.39999997615814208984375 / (_3006 + 1.39999997615814208984375);
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2999) + _3010;
                        float _3016 = _3006 * _3006;
                        float _3020 = ((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3005) / ((_3016 * 0.699999988079071044921875) + 1.0);
                        float _3024 = (-0.0) - _2478;
                        float _3025 = (-0.0) - _2479;
                        float _3026 = (-0.0) - _2480;
                        float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
                        float _3031 = _3030 * _3024;
                        float _3032 = _3030 * _3025;
                        float _3033 = _3030 * _3026;
                        float _3041 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                        float _3042 = 1.0 - _812;
                        float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                        float _3050 = _3049 * _3049;
                        float _3051 = _3050 * _3050;
                        float _3052 = _3031 + _2996;
                        float _3053 = _3032 + _2997;
                        float _3054 = _3033 + _2998;
                        float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                        float _3062 = dot(vec3(_752, _755, _758), vec3(_3031, _3032, _3033));
                        float _4388 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3065 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3066 = dot(vec3(_752, _755, _758), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                        float _4399 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                        float _3074 = _3009 * _3050;
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _2999) + _3075;
                        float _4410 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3080 = 1.0 - _3050;
                        float _3090 = (0.5 / (((_3079 * ((_3065 * _3080) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3079 * _3080) + _3050) * _3065))) * _3079;
                        float _4421 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3101 = (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3073 * _3073) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125))) * _3005;
                        _2853 = (_3020 * _2968.x) + _2926;
                        _2854 = (_3020 * _2968.y) + _2927;
                        _2855 = (_3020 * _2968.z) + _2928;
                        _2850 = (_3101 * _2985.x) + _2923;
                        _2851 = (_3101 * _2985.y) + _2924;
                        _2852 = (_3101 * _2985.z) + _2925;
                        if (_2930 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2930;
                        }
                    }
                    frontier_phi_66_pred = _2850;
                    frontier_phi_66_pred_1 = _2855;
                    frontier_phi_66_pred_2 = _2854;
                    frontier_phi_66_pred_3 = _2853;
                    frontier_phi_66_pred_4 = _2852;
                    frontier_phi_66_pred_5 = _2851;
                }
                _2626 = frontier_phi_66_pred;
                _2636 = frontier_phi_66_pred_1;
                _2634 = frontier_phi_66_pred_2;
                _2632 = frontier_phi_66_pred_3;
                _2630 = frontier_phi_66_pred_4;
                _2628 = frontier_phi_66_pred_5;
                uint _2785 = _2784 + 1u;
                if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2778 = _2626;
                    _2779 = _2628;
                    _2780 = _2630;
                    _2781 = _2632;
                    _2782 = _2634;
                    _2783 = _2636;
                    _2784 = _2785;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((4294967295u << _2642) & _2524) == 0u)
        {
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
            _2752 = _2631;
            _2754 = _2633;
            _2756 = _2635;
        }
        else
        {
            float _2771 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
            float _2772 = _2771 * _2478;
            float _2773 = _2771 * _2479;
            float _2774 = _2771 * _2480;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2906 = _2625;
                float _2907 = _2627;
                float _2908 = _2629;
                float _2909 = _2631;
                float _2910 = _2633;
                float _2911 = _2635;
                uint _2912 = _2642;
                uint _2921;
                bool _2922;
                for (;;)
                {
                    _2921 = texelFetch(g_lightClassification, int((((_2518 << 5u) + (_2504 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                    _2922 = _2921 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2922)
                    {
                        frontier_phi_77_pred = _2911;
                        frontier_phi_77_pred_1 = _2910;
                        frontier_phi_77_pred_2 = _2909;
                        frontier_phi_77_pred_3 = _2908;
                        frontier_phi_77_pred_4 = _2907;
                        frontier_phi_77_pred_5 = _2906;
                    }
                    else
                    {
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3128 = _2906;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        float _3131 = _2909;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        uint _3134 = _2921;
                        uint _3135;
                        vec4 _3160;
                        float _3161;
                        vec4 _3176;
                        vec3 _3188;
                        vec4 _3203;
                        vec4 _3218;
                        float _3264;
                        bool _3265;
                        for (;;)
                        {
                            uint _3145 = ((_2912 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3134));
                            _3135 = (_3134 + 4294967295u) & _3134;
                            uint _3147 = _3145 * 40u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3161 = _3160.w;
                            uint _3163 = (_3145 * 40u) + 4u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3145 * 40u) + 8u;
                            _3188 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x));
                            uint _3190 = (_3145 * 40u) + 16u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3205 = (_3145 * 40u) + 20u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3145 * 40u) + 24u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3239 = (_3145 * 40u) + 28u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3264 = fma(_2480, _3252.z, fma(_2479, _3252.y, _3252.x * _2478)) + _3252.w;
                            _3265 = !((fma(_2480, _3233.z, fma(_2479, _3233.y, _3233.x * _2478)) + _3233.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3265)
                            {
                                float _3292 = _3160.x - _2478;
                                float _3293 = _3160.y - _2479;
                                float _3294 = _3160.z - _2480;
                                float _3295 = dot(vec3(_3292, _3293, _3294), vec3(_3292, _3293, _3294));
                                float _3298 = inversesqrt(_3295);
                                float _3299 = _3298 * _3292;
                                float _3300 = _3298 * _3293;
                                float _3301 = _3298 * _3294;
                                float _3305 = 1.0 - (_3295 / (_3161 * _3161));
                                float _4432 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3310 = sqrt(_3295) * _3176.w;
                                float _3312 = 1.39999997615814208984375 / (_3310 + 1.39999997615814208984375);
                                float _3313 = _3312 * _3312;
                                float _3316 = ((1.0 - _3313) * dot(vec3(_3299, _3300, _3301), vec3(_752, _755, _758))) + _3313;
                                float _3319 = _3310 * _3310;
                                float _3323 = (fma(_2480, _3203.z, fma(_2479, _3203.y, _3203.x * _2478)) + _3203.w) / _3264;
                                float _3324 = (fma(_2480, _3218.z, fma(_2479, _3218.y, _3218.x * _2478)) + _3218.w) / _3264;
                                float _3328 = 1.0 - dot(vec2(_3323, _3324), vec2(_3323, _3324));
                                float _4448 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3330 = _3329 * (((isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0))) * _3306) / ((_3319 * 0.699999988079071044921875) + 1.0));
                                float _3342 = exp2(log2(1.0 / ((_3319 * 3.5) + 5.0)) * 0.25);
                                float _3343 = 1.0 - _812;
                                float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                                float _3351 = _3350 * _3350;
                                float _3352 = _3351 * _3351;
                                float _3353 = _3299 - _2772;
                                float _3354 = _3300 - _2773;
                                float _3355 = _3301 - _2774;
                                float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                                float _3363 = dot(vec3(_752, _755, _758), vec3((-0.0) - _2772, (-0.0) - _2773, (-0.0) - _2774));
                                float _4459 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3366 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3367 = dot(vec3(_752, _755, _758), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                                float _4470 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                                float _3375 = _3312 * _3351;
                                float _3376 = _3375 * _3375;
                                float _3382 = ((1.0 - _3376) * dot(vec3(_752, _755, _758), vec3(_3299, _3300, _3301))) + _3376;
                                float _4481 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3383 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3384 = 1.0 - _3351;
                                float _3394 = (0.5 / (((_3383 * ((_3366 * _3384) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3351) * _3366))) * _3383;
                                float _4492 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3404 = (_3329 * _3306) * (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3374 * _3374) * ((_3319 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3330 * _3176.y;
                                frontier_phi_83_pred_1 = _3330 * _3176.x;
                                frontier_phi_83_pred_2 = _3404 * _3188.z;
                                frontier_phi_83_pred_3 = _3404 * _3188.y;
                                frontier_phi_83_pred_4 = _3404 * _3188.x;
                                frontier_phi_83_pred_5 = _3330 * _3176.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3412 = frontier_phi_83_pred;
                            _3411 = frontier_phi_83_pred_1;
                            _3410 = frontier_phi_83_pred_2;
                            _3409 = frontier_phi_83_pred_3;
                            _3408 = frontier_phi_83_pred_4;
                            _3413 = frontier_phi_83_pred_5;
                            _3118 = _3411 + _3131;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            _3115 = _3408 + _3128;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            if (_3135 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3135;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3120;
                        frontier_phi_77_pred_1 = _3119;
                        frontier_phi_77_pred_2 = _3118;
                        frontier_phi_77_pred_3 = _3117;
                        frontier_phi_77_pred_4 = _3116;
                        frontier_phi_77_pred_5 = _3115;
                    }
                    _2757 = frontier_phi_77_pred;
                    _2755 = frontier_phi_77_pred_1;
                    _2753 = frontier_phi_77_pred_2;
                    _2751 = frontier_phi_77_pred_3;
                    _2749 = frontier_phi_77_pred_4;
                    _2747 = frontier_phi_77_pred_5;
                    uint _2913 = _2912 + 1u;
                    if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2906 = _2747;
                        _2907 = _2749;
                        _2908 = _2751;
                        _2909 = _2753;
                        _2910 = _2755;
                        _2911 = _2757;
                        _2912 = _2913;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2751;
                frontier_phi_58_59_ladder_1 = _2757;
                frontier_phi_58_59_ladder_2 = _2755;
                frontier_phi_58_59_ladder_3 = _2753;
                frontier_phi_58_59_ladder_4 = _2749;
                frontier_phi_58_59_ladder_5 = _2747;
            }
            else
            {
                frontier_phi_58_59_ladder = _2629;
                frontier_phi_58_59_ladder_1 = _2635;
                frontier_phi_58_59_ladder_2 = _2633;
                frontier_phi_58_59_ladder_3 = _2631;
                frontier_phi_58_59_ladder_4 = _2627;
                frontier_phi_58_59_ladder_5 = _2625;
            }
            _2746 = frontier_phi_58_59_ladder_5;
            _2748 = frontier_phi_58_59_ladder_4;
            _2750 = frontier_phi_58_59_ladder;
            _2752 = frontier_phi_58_59_ladder_3;
            _2754 = frontier_phi_58_59_ladder_2;
            _2756 = frontier_phi_58_59_ladder_1;
        }
        float _2761 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2537 = (_2761 * _2752) + _1992;
        _2539 = (_2761 * _2754) + _1994;
        _2541 = (_2761 * _2756) + _1996;
        _2543 = ((_2746 * 0.039999999105930328369140625) * _2761) + _2322;
        _2545 = ((_2748 * 0.039999999105930328369140625) * _2761) + _2324;
        _2547 = ((_2750 * 0.039999999105930328369140625) * _2761) + _2326;
    }
    else
    {
        _2537 = _1992;
        _2539 = _1994;
        _2541 = _1996;
        _2543 = _2322;
        _2545 = _2324;
        _2547 = _2326;
    }
    float _4508 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4519 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4530 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2564 = ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2537 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _796))) + ((_2543 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1632)) * cbPerFrame._m0[3u].x);
    float _2565 = ((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2539 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _796))) + ((_2545 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1632)) * cbPerFrame._m0[3u].x);
    float _2566 = ((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2541 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2547 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1632)) * cbPerFrame._m0[3u].x);
    uint _2567 = _238 + 6u;
    float _2575 = _733 / cbSceneParam._m0[86u].x;
    float _2576 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2590 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2592 = _2590.x;
    float _2593 = _2590.y;
    float _2594 = _2590.z;
    float _2595 = _2590.w;
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2650 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2651 = _2650 / _654;
        float _2662 = _2651 * _706;
        float _2663 = _707 * _2651;
        float _2664 = (-0.0) - _2663;
        float _2666 = _2651 * _708;
        float _2668 = (cbSceneParam._m0[77u].w * _2664) / _2650;
        float _2669 = _2668 + cbSceneParam._m0[79u].w;
        float _2670 = cbSceneParam._m0[79u].w - _2663;
        float _2676 = sqrt(((_2662 * _2662) + (_2663 * _2663)) + (_2666 * _2666));
        float _2679 = (1.0 - (cbSceneParam._m0[77u].w / _2650)) * _2676;
        float _2684 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2686 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2863;
        if (abs((_2664 - _2668) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2863 = ((((_2669 > 0.0) ? exp2(_2684 * _2669) : (2.0 - exp2(_2686 * _2669))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2679;
        }
        else
        {
            float _2807 = 1.0 / cbSceneParam._m0[80u].x;
            float _2808 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : max(_2669, _2670));
            float _2809 = isnan(_2670) ? _2669 : (isnan(_2669) ? _2670 : min(_2669, _2670));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            _2863 = ((abs(_2676 / _2664) * cbSceneParam._m0[80u].y) * ((((_2818 - _2819) * 2.0) - ((exp2(_2684 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0)))) - exp2(_2684 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))))) * _2807)) - ((exp2(_2686 * _2818) - exp2(_2686 * _2819)) * _2807))) + (_2679 * cbSceneParam._m0[80u].z);
        }
        vec4 _2865 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2575, _2576, 1.0), 0.0);
        float _2874 = exp2((_2863 * (-1.44269502162933349609375)) * (1.0 - _2865.w));
        float _2875 = log2(_2874);
        float _2891 = log2(_2595);
        _2688 = (exp2(_2891 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].x)) * _2865.x) / cbSceneParam._m0[78u].x)) + _2592;
        _2690 = (exp2(_2891 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].y)) * _2865.y) / cbSceneParam._m0[78u].y)) + _2593;
        _2692 = (exp2(_2891 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2875 * cbSceneParam._m0[78u].z)) * _2865.z) / cbSceneParam._m0[78u].z)) + _2594;
        _2694 = _2874 * _2595;
    }
    else
    {
        _2688 = _2592;
        _2690 = _2593;
        _2692 = _2594;
        _2694 = _2595;
    }
    bool _2901;
    vec4 _2704;
    vec4 _2726;
    float _2728;
    float _2732;
    float _2733;
    float _2734;
    float _2735;
    bool _2745;
    for (;;)
    {
        _2704 = cbMatDynParam._m0[0u];
        float _2706 = roundEven(_2704.y);
        bool _2707 = _2706 == 3.0;
        float _2708 = log2(_2694);
        float _2715 = exp2(_2708 * cbSceneParam._m0[78u].x) * _2564;
        float _2716 = exp2(_2708 * cbSceneParam._m0[78u].y) * _2565;
        float _2717 = exp2(_2708 * cbSceneParam._m0[78u].z) * _2566;
        float _2724 = _722 + (-0.5);
        _2726 = cbMtdParam._m0[1u];
        _2728 = _2726.y * _2724;
        float _2731 = (_2706 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2732 = _2731 * (_2707 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2688)));
        _2733 = _2731 * (_2707 ? _2716 : (_2716 + (cbSceneParam._m0[72u].w * _2690)));
        _2734 = _2731 * (_2707 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2692)));
        _2735 = _2724 * 0.999000012874603271484375;
        _2745 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2745)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2735) < 0.5)
            {
                _2901 = true;
                break;
            }
        }
        uint _2842 = _771 + uint(_2704.w);
        if ((cbInstanceData._m0[_2842].w < 1.0) && ((cbInstanceData._m0[_2842].w + _2735) < 0.5))
        {
            _2901 = true;
            break;
        }
        if ((_2728 + 1.0) < _2726.x)
        {
            _2901 = true;
            break;
        }
        _2901 = false;
        break;
    }
    float _3106;
    if (_2901)
    {
        discard_state = true;
        _3106 = 0.0;
    }
    else
    {
        _3106 = cbInstanceData._m0[_2567].w;
    }
    SV_Target.x = _2732;
    SV_Target.y = _2733;
    SV_Target.z = _2734;
    SV_Target.w = _3106;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2567].w;
    discard_exit();
}


