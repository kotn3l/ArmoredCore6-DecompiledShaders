#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1226;
float _3869;
float _3870;
float _3871;
float _3872;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3881 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3892 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3903 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) + _346;
    vec4 _374 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _424 = _420.z;
    float _428 = (_420.x * 2.0) + (-1.0);
    float _429 = (_420.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3914 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))));
    float _440 = _428 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _441 = _429 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    vec4 _458 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _460 = _458.x;
    float _461 = 1.0 - _460;
    float _470 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _473 = ((isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : min(_470, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _482 = (_473 - ((((((_460 - _461) * cbMtdParam._m0[24u].z) + _461) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _473))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3935 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _483 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _490 = (_483 * ((_374.x * cbMtdParam._m0[18u].x) - _353)) + _353;
    float _491 = (_483 * ((_374.y * cbMtdParam._m0[18u].y) - _354)) + _354;
    float _492 = (_483 * ((_374.z * cbMtdParam._m0[18u].z) - _355)) + _355;
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _535 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_507 - _508) * cbMtdParam._m0[24u].w) + _508) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3946 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _544 = ((((cbMtdParam._m0[10u].x - _490) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _536) + _490;
    float _545 = ((((cbMtdParam._m0[10u].y - _491) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _536) + _491;
    float _546 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _492)) * _536) + _492;
    float _551 = (((_394.z - _424) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _424;
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _572 = (_565.x * 2.0) + (-1.0);
    float _573 = (_565.y * 2.0) + (-1.0);
    float _574 = dot(vec2(_572, _573), vec2(_572, _573));
    float _3957 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _582 = (_483 * (_565.z - _551)) + _551;
    float _585 = ((cbMtdParam._m0[23u].y - _582) * _536) + _582;
    vec4 _607 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _613 = (_607.x * 2.0) + (-1.0);
    float _614 = (_607.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3968 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _632 = (((_572 - _440) + (cbMtdParam._m0[21u].x * _440)) * _483) + _440;
    float _633 = (((_573 - _441) + (cbMtdParam._m0[21u].x * _441)) * _483) + _441;
    float _634 = (_483 * (sqrt(1.0 - (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) - _435)) + _435;
    float _645 = (((_613 - _632) + (_632 * cbMtdParam._m0[22u].z)) * _536) + _632;
    float _646 = (((_614 - _633) + (_633 * cbMtdParam._m0[22u].z)) * _536) + _633;
    float _647 = ((sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) - _634) * _536) + _634;
    float _649 = cbMtdParam._m0[22u].x + _420.w;
    float _652 = fma(_647, _241 * NORMAL.x, fma(_646, _248 * TANGENT.x, (_234 * _226) * _645));
    float _655 = fma(_647, _241 * NORMAL.y, fma(_646, _248 * TANGENT.y, (_234 * _227) * _645));
    float _658 = fma(_647, _241 * NORMAL.z, fma(_646, _248 * TANGENT.z, (_234 * _228) * _645));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _3979 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _666 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4001 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4012 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4023 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _734 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _724);
    float _735 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _724);
    float _736 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _724);
    float _740 = inversesqrt(dot(vec3(_734, _735, _736), vec3(_734, _735, _736)));
    float _741 = _734 * _740;
    float _742 = _735 * _740;
    float _743 = _736 * _740;
    vec4 _748 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _750 = _748.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _907 = sqrt(((_734 * _734) + (_735 * _735)) + (_736 * _736));
        float _913 = (cbMatDynParam._m0[5u].x * _907) + cbMatDynParam._m0[5u].y;
        float _4034 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _918 = (cbMatDynParam._m0[5u].z * _907) + cbMatDynParam._m0[5u].w;
        float _4045 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) - _914)) + _914) < ((_750 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _762 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _763 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _783 = fma(_665, cbSceneParam._m0[5u].z, fma(_664, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _663));
    float _786 = fma(_665, cbSceneParam._m0[6u].z, fma(_664, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _663));
    float _789 = fma(_665, cbSceneParam._m0[7u].z, fma(_664, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _663));
    uint _802 = _273 + 9u;
    uint _803 = _802 + uint(cbMatDynParam._m0[0u].w);
    float _809 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_803].x;
    float _810 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_803].y;
    float _811 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_803].z;
    float _4056 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _812 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _762, cbSceneParam._m0[86u].y * _763));
    float _827 = ((isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * TEXCOORD_5.w) * _823.x;
    float _828 = dot(vec3(_663, _664, _665), vec3(_741, _742, _743));
    float _831 = _828 * 2.0;
    float _835 = (_831 * _663) - _741;
    float _836 = (_831 * _664) - _742;
    float _837 = (_831 * _665) - _743;
    float _841 = abs(dot(vec3(_741, _742, _743), vec3(_663, _664, _665)));
    float _4089 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _843 = sqrt(_666);
    float _856 = exp2((_843 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_843 * 3.0));
    float _888 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _892 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _896 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1225;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _950 = fma(_896, cbModelParam._m0[26u].z, fma(_892, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _888));
        float _954 = fma(_896, cbModelParam._m0[27u].z, fma(_892, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _888));
        float _958 = fma(_896, cbModelParam._m0[28u].z, fma(_892, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _888));
        float _983 = _888 + _663;
        float _984 = _892 + _664;
        float _985 = _896 + _665;
        float _995 = fma(_985, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _983)) - _950;
        float _996 = fma(_985, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _983)) - _954;
        float _997 = fma(_985, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _983)) - _958;
        float _1001 = inversesqrt(dot(vec3(_995, _996, _997), vec3(_995, _996, _997)));
        float _1014 = ((_1001 * _995) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_950 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1001 * _996) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_954 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1001 * _997) / cbModelParam._m0[34u].z) + ((((((_958 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1014, _1015, _1016), 0.0);
        float _1053 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1019.x + (-0.5));
        float _1055 = _1053 * (_1019.y + (-0.5));
        float _1056 = _1053 * (_1019.z + (-0.5));
        float _1063 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1026.x + (-0.5));
        float _1065 = _1063 * (_1026.y + (-0.5));
        float _1066 = _1063 * (_1026.z + (-0.5));
        float _1073 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1033.x + (-0.5));
        float _1075 = _1073 * (_1033.y + (-0.5));
        float _1076 = _1073 * (_1033.z + (-0.5));
        float _1083 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1040.x + (-0.5));
        float _1085 = _1083 * (_1040.y + (-0.5));
        float _1086 = _1083 * (_1040.z + (-0.5));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = _1054 * 0.5;
        float _1091 = _1064 * 0.5;
        float _1092 = _1074 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1107 = (dot(vec3(_663, _664, _665), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1117 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _4137 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1119 + 1.0))) + _1124) * _1087;
        float _1134 = _1055 * 0.5;
        float _1135 = _1065 * 0.5;
        float _1136 = _1075 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_663, _664, _665), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4170 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1161 + 1.0))) + _1166) * _1088;
        float _1176 = _1056 * 0.5;
        float _1177 = _1066 * 0.5;
        float _1178 = _1076 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_663, _664, _665), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4203 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1203 + 1.0))) + _1208) * _1089;
        _1225 = _1056;
        _1227 = _1055;
        _1228 = _1054;
        _1229 = _1066;
        _1230 = _1065;
        _1231 = _1064;
        _1232 = _1076;
        _1233 = _1075;
        _1234 = _1074;
        _1235 = _1089;
        _1236 = _1088;
        _1237 = _1087;
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
    }
    else
    {
        _1225 = _1226;
        _1227 = _1226;
        _1228 = _1226;
        _1229 = _1226;
        _1230 = _1226;
        _1231 = _1226;
        _1232 = _1226;
        _1233 = _1226;
        _1234 = _1226;
        _1235 = _1226;
        _1236 = _1226;
        _1237 = _1226;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1268 = fma(_896, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _888));
        float _1272 = fma(_896, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _888));
        float _1276 = fma(_896, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _888));
        float _1299 = _888 + _663;
        float _1300 = _892 + _664;
        float _1301 = _896 + _665;
        float _1311 = fma(_1301, cbModelParam._m0[30u].z, fma(_1300, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1299)) - _1268;
        float _1312 = fma(_1301, cbModelParam._m0[31u].z, fma(_1300, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1299)) - _1272;
        float _1313 = fma(_1301, cbModelParam._m0[32u].z, fma(_1300, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1299)) - _1276;
        float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
        float _1330 = ((_1317 * _1311) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1268 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1331 = ((_1317 * _1312) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1272 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1332 = ((_1317 * _1313) / cbModelParam._m0[35u].z) + ((((((_1276 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1330, _1331, _1332), 0.0);
        float _1367 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1334.x + (-0.5));
        float _1369 = _1367 * (_1334.y + (-0.5));
        float _1370 = _1367 * (_1334.z + (-0.5));
        float _1377 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1341.x + (-0.5));
        float _1379 = _1377 * (_1341.y + (-0.5));
        float _1380 = _1377 * (_1341.z + (-0.5));
        float _1387 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1348.x + (-0.5));
        float _1389 = _1387 * (_1348.y + (-0.5));
        float _1390 = _1387 * (_1348.z + (-0.5));
        float _1397 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1355.x + (-0.5));
        float _1399 = _1397 * (_1355.y + (-0.5));
        float _1400 = _1397 * (_1355.z + (-0.5));
        float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = _1368 * 0.5;
        float _1405 = _1378 * 0.5;
        float _1406 = _1388 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_663, _664, _665), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1401 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4266 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1431 + 1.0))) + _1436) * _1401;
        float _1446 = _1369 * 0.5;
        float _1447 = _1379 * 0.5;
        float _1448 = _1389 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_663, _664, _665), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1402 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4299 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1473 + 1.0))) + _1478) * _1402;
        float _1488 = _1370 * 0.5;
        float _1489 = _1380 * 0.5;
        float _1490 = _1390 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_663, _664, _665), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4332 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1515 + 1.0))) + _1520) * _1403;
        _1537 = _1370;
        _1538 = _1369;
        _1539 = _1368;
        _1540 = _1380;
        _1541 = _1379;
        _1542 = _1378;
        _1543 = _1390;
        _1544 = _1389;
        _1545 = _1388;
        _1546 = _1403;
        _1547 = _1402;
        _1548 = _1401;
        _1549 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1550 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
    }
    else
    {
        _1537 = _1226;
        _1538 = _1226;
        _1539 = _1226;
        _1540 = _1226;
        _1541 = _1226;
        _1542 = _1226;
        _1543 = _1226;
        _1544 = _1226;
        _1545 = _1226;
        _1546 = _1226;
        _1547 = _1226;
        _1548 = _1226;
        _1549 = 0.0;
        _1550 = 0.0;
        _1551 = 0.0;
    }
    float _1561 = (cbModelParam._m0[1u].x * (_1549 - _1238)) + _1238;
    float _1562 = (cbModelParam._m0[1u].x * (_1550 - _1239)) + _1239;
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1240)) + _1240;
    float _1584 = fma(_1563, cbSceneParam._m0[89u].z, fma(_1562, cbSceneParam._m0[89u].y, _1561 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1563, cbSceneParam._m0[90u].z, fma(_1562, cbSceneParam._m0[90u].y, _1561 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1563, cbSceneParam._m0[91u].z, fma(_1562, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1561));
    float _1605 = _835 * 0.5;
    float _1606 = _836 * 0.5;
    float _1607 = _837 * 0.5;
    float _1608 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1611 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1538, _1541, _1544, _1547));
    float _1614 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1537, _1540, _1543, _1546));
    float _1648;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1621 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1225, _1229, _1232, _1235));
        float _1625 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1629 = dot(vec4(_1605, _1606, _1607, 1.0), vec4(_1228, _1231, _1234, _1237));
        float _1636 = dot(vec4(cbModelParam._m0[39u]), vec4(_1605, _1606, _1607, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1659;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1650 = dot(vec4(cbModelParam._m0[40u]), vec4(_1605, _1606, _1607, 1.0));
        _1659 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1659 = 1.0;
    }
    float _1663 = (_1659 * cbModelParam._m0[1u].x) + (_1648 * (1.0 - cbModelParam._m0[1u].x));
    float _1673 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _666);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1673 : min(cbModelParam._m0[25u].z, _1673));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1721 = fma(_896, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _888)) + cbModelParam._m0[13u].w;
        float _1725 = fma(_896, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _888)) + cbModelParam._m0[14u].w;
        float _1729 = fma(_896, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _888)) + cbModelParam._m0[15u].w;
        float _1732 = fma(_837, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835));
        float _1735 = fma(_837, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835));
        float _1738 = fma(_837, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835));
        float _1766;
        if (_1732 > 0.0)
        {
            _1766 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1766 = frontier_phi_17_15_ladder;
        }
        float _1936;
        if (_1735 > 0.0)
        {
            _1936 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1936 = frontier_phi_26_22_ladder;
        }
        float _2232;
        if (_1738 > 0.0)
        {
            _2232 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2232 = frontier_phi_38_33_ladder;
        }
        float _2234 = isnan(_1936) ? _1766 : (isnan(_1766) ? _1936 : min(_1766, _1936));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1732) + _1721;
        float _2240 = (_2235 * _1735) + _1725;
        float _2241 = (_2235 * _1738) + _1729;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1674);
            frontier_phi_16_38_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1754 = frontier_phi_16_38_ladder_2;
        _1756 = frontier_phi_16_38_ladder_1;
        _1758 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_835, _836, _837), _1674);
        _1754 = _1742.x * cbModelParam._m0[1u].y;
        _1756 = _1742.y * cbModelParam._m0[1u].y;
        _1758 = _1742.z * cbModelParam._m0[1u].y;
    }
    float _1762 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _666);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1762 : min(cbModelParam._m0[25u].w, _1762));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_896, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _888)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_896, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _888)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_896, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _888)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_837, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835));
        float _1830 = fma(_837, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835));
        float _1833 = fma(_837, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835));
        float _1941;
        if (_1827 > 0.0)
        {
            _1941 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1941 = frontier_phi_28_24_ladder;
        }
        float _2259;
        if (_1830 > 0.0)
        {
            _2259 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2259 = frontier_phi_40_35_ladder;
        }
        float _2586;
        if (_1833 > 0.0)
        {
            _2586 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2586 = frontier_phi_50_47_ladder;
        }
        float _2588 = isnan(_2259) ? _1941 : (isnan(_1941) ? _2259 : min(_1941, _2259));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1827) + _1816;
        float _2594 = (_2589 * _1830) + _1820;
        float _2595 = (_2589 * _1833) + _1824;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1763);
            frontier_phi_25_50_ladder = _2713.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2713.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_25_50_ladder_2;
        _1854 = frontier_phi_25_50_ladder_1;
        _1856 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_835, _836, _837), _1763);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1868 = ((((1.0 - _856) * ((_843 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_856 * _843)) * _827;
    float _1869 = _1868 * ((cbModelParam._m0[1u].w * (_1852 - _1754)) + _1754);
    float _1870 = _1868 * ((cbModelParam._m0[1u].w * (_1854 - _1756)) + _1756);
    float _1871 = _1868 * ((cbModelParam._m0[1u].w * (_1856 - _1758)) + _1758);
    float _1874 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1877 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1880 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1928 = _1915 / _1927;
    float _1929 = _1919 / _1927;
    float _1930 = _1923 / _1927;
    float _2077;
    float _2078;
    float _2079;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1957 = ((uint(_1930 > cbSceneParam._m0[59u].y) + uint(_1930 > cbSceneParam._m0[59u].x)) + uint(_1930 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1958 = _1957 + 43u;
        uint _1966 = _1957 + 44u;
        uint _1974 = _1957 + 45u;
        uint _1982 = _1957 + 46u;
        float _1993 = fma(_1927, cbSceneParam._m0[_1958].w, fma(_1923, cbSceneParam._m0[_1958].z, fma(_1919, cbSceneParam._m0[_1958].y, _1915 * cbSceneParam._m0[_1958].x)));
        float _1997 = fma(_1927, cbSceneParam._m0[_1966].w, fma(_1923, cbSceneParam._m0[_1966].z, fma(_1919, cbSceneParam._m0[_1966].y, _1915 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1927, cbSceneParam._m0[_1982].w, fma(_1923, cbSceneParam._m0[_1982].z, fma(_1919, cbSceneParam._m0[_1982].y, _1915 * cbSceneParam._m0[_1982].x)));
        float _2010 = cbSceneParam._m0[33u].z * _2005;
        float _2012 = cbSceneParam._m0[33u].w * _2005;
        float _2015 = fma(_1927, cbSceneParam._m0[_1974].w, fma(_1923, cbSceneParam._m0[_1974].z, fma(_1919, cbSceneParam._m0[_1974].y, _1915 * cbSceneParam._m0[_1974].x))) / _2005;
        float _2063 = (cbSceneParam._m0[33u].x - sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930))) * cbSceneParam._m0[33u].y;
        float _4458 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2070 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1993) / _2005, (_2012 + _1997) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 + _1993) / _2005, (_1997 - _2010) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 - _2010) / _2005, (_1997 - _2012) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 - _2012) / _2005, (_2010 + _1997) / _2005), _2015), 0.0)).x), vec4(0.25)));
        _2077 = 1.0 - (_2070 * cbSceneParam._m0[34u].x);
        _2078 = 1.0 - (_2070 * cbSceneParam._m0[34u].y);
        _2079 = 1.0 - (_2070 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2077 = 1.0;
        _2078 = 1.0;
        _2079 = 1.0;
    }
    float _2143;
    float _2145;
    float _2147;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2131 = fma(_1927, cbSceneParam._m0[63u].w, fma(_1923, cbSceneParam._m0[63u].z, fma(_1919, cbSceneParam._m0[63u].y, _1915 * cbSceneParam._m0[63u].x)));
        float _2132 = fma(_1927, cbSceneParam._m0[60u].w, fma(_1923, cbSceneParam._m0[60u].z, fma(_1919, cbSceneParam._m0[60u].y, _1915 * cbSceneParam._m0[60u].x))) / _2131;
        float _2133 = fma(_1927, cbSceneParam._m0[61u].w, fma(_1923, cbSceneParam._m0[61u].z, fma(_1919, cbSceneParam._m0[61u].y, _1915 * cbSceneParam._m0[61u].x))) / _2131;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2132 >= cbSceneParam._m0[64u].x) && (_2133 >= cbSceneParam._m0[64u].y)) && (_2132 <= cbSceneParam._m0[64u].z)) && (_2133 <= cbSceneParam._m0[64u].w))
        {
            float _2272 = fma(_1927, cbSceneParam._m0[62u].w, fma(_1923, cbSceneParam._m0[62u].z, fma(_1919, cbSceneParam._m0[62u].y, _1915 * cbSceneParam._m0[62u].x))) / _2131;
            float _2276 = isnan(cbSceneParam._m0[41u].w) ? _2272 : (isnan(_2272) ? cbSceneParam._m0[41u].w : max(_2272, cbSceneParam._m0[41u].w));
            float _2319 = (cbSceneParam._m0[33u].x - sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930))) * cbSceneParam._m0[33u].y;
            float _4474 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
            float _2326 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2132, cbSceneParam._m0[33u].w + _2133), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2132, _2133 - cbSceneParam._m0[33u].z), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2132 - cbSceneParam._m0[33u].z, _2133 - cbSceneParam._m0[33u].w), _2276), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2132 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2133), _2276), 0.0)).x), vec4(0.25)));
            float _2330 = 1.0 - (_2326 * cbSceneParam._m0[34u].x);
            float _2331 = 1.0 - (_2326 * cbSceneParam._m0[34u].y);
            float _2332 = 1.0 - (_2326 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2332) ? _2079 : (isnan(_2079) ? _2332 : min(_2079, _2332));
            frontier_phi_37_36_ladder_1 = isnan(_2331) ? _2078 : (isnan(_2078) ? _2331 : min(_2078, _2331));
            frontier_phi_37_36_ladder_2 = isnan(_2330) ? _2077 : (isnan(_2077) ? _2330 : min(_2077, _2330));
        }
        else
        {
            frontier_phi_37_36_ladder = _2079;
            frontier_phi_37_36_ladder_1 = _2078;
            frontier_phi_37_36_ladder_2 = _2077;
        }
        _2143 = frontier_phi_37_36_ladder_2;
        _2145 = frontier_phi_37_36_ladder_1;
        _2147 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2143 = _2077;
        _2145 = _2078;
        _2147 = _2079;
    }
    uvec4 _2152 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2154 = _2152.x * 14u;
    uint _2155 = _2154 + 13u;
    float _2162 = _827 + (-1.0);
    float _2167 = (cbLight._m0[_2155].x * _2162) + 1.0;
    float _2168 = (cbLight._m0[_2155].y * _2162) + 1.0;
    float _2169 = (cbLight._m0[_2155].z * _2162) + 1.0;
    float _2170 = (cbLight._m0[_2155].w * _2162) + 1.0;
    uint _2171 = _2154 + 5u;
    float _2177 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2181 = _2154 + 4u;
    float _2191 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2195 = _2154 | 1u;
    float _2206 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_663, _664, _665));
    float _2209 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_663, _664, _665));
    float _4510 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _4521 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2214 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2216 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2223 = ((cbLight._m0[_2171].x * _2177) * _2216) + (((cbLight._m0[_2181].x * _2143) * _2191) * _2214);
    float _2224 = ((_2177 * cbLight._m0[_2171].y) * _2216) + (((cbLight._m0[_2181].y * _2145) * _2191) * _2214);
    float _2225 = ((_2177 * cbLight._m0[_2171].z) * _2216) + (((cbLight._m0[_2181].z * _2147) * _2191) * _2214);
    uvec4 _2229 = floatBitsToUint(cbLight._m0[_2154 + 12u]);
    bool _2231 = _2229.x == 0u;
    float _2333;
    float _2335;
    float _2337;
    if (_2231)
    {
        _2333 = _2223;
        _2335 = _2224;
        _2337 = _2225;
    }
    else
    {
        uint _2341 = _2154 + 6u;
        float _2357 = (dot(vec3(cbLight._m0[_2154 + 2u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4532 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2360 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2333 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2223;
        _2335 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2224;
        _2337 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2225;
    }
    bool _2340 = _2229.y == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2340)
    {
        _2395 = _2333;
        _2397 = _2335;
        _2399 = _2337;
    }
    else
    {
        uint _2557 = _2154 + 7u;
        float _2573 = (dot(vec3(cbLight._m0[_2154 + 3u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _2574 = _2573 * _2573;
        float _4548 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2575 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2576 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2395 = (((cbLight._m0[_2557].x * 0.3183098733425140380859375) * _2575) * _2576) + _2333;
        _2397 = (((cbLight._m0[_2557].y * 0.3183098733425140380859375) * _2575) * _2576) + _2335;
        _2399 = (((cbLight._m0[_2557].z * 0.3183098733425140380859375) * _2575) * _2576) + _2337;
    }
    uint _2402 = _2154 + 8u;
    float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _666) * 0.949999988079071044921875);
    float _2416 = _2415 * _2415;
    float _2417 = cbLight._m0[_2154].x + _741;
    float _2418 = cbLight._m0[_2154].y + _742;
    float _2419 = cbLight._m0[_2154].z + _743;
    float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
    float _2424 = _2423 * _2417;
    float _2425 = _2423 * _2418;
    float _2426 = _2423 * _2419;
    float _2427 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2154].xyz));
    float _4564 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2430 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _4575 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2431 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2432 = dot(vec3(_663, _664, _665), vec3(_2424, _2425, _2426));
    float _4586 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2436 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2424, _2425, _2426));
    float _4597 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2440 = _2416 * _2416;
    float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2416;
    float _2467 = (0.5 / (((_2431 * ((_2430 * _2456) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2456) + _2416) * _2430))) * _2430;
    float _4608 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
    uint _2483 = _2154 + 9u;
    float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _666) * 0.949999988079071044921875);
    float _2495 = _2494 * _2494;
    float _2496 = cbLight._m0[_2195].x + _741;
    float _2497 = cbLight._m0[_2195].y + _742;
    float _2498 = cbLight._m0[_2195].z + _743;
    float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
    float _2503 = _2502 * _2496;
    float _2504 = _2502 * _2497;
    float _2505 = _2502 * _2498;
    float _2506 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2195].xyz));
    float _4619 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2510 = dot(vec3(_663, _664, _665), vec3(_2503, _2504, _2505));
    float _4630 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2513 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2514 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2503, _2504, _2505));
    float _4641 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2518 = _2495 * _2495;
    float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
    float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2532 = 1.0 - _2495;
    float _2542 = (0.5 / (((_2431 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2532) + _2495) * _2509))) * _2509;
    float _4652 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _2544 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
    float _2554 = (((_2531 * cbLight._m0[_2483].x) * _2544) * _2177) + ((((cbLight._m0[_2402].x * _2143) * _2455) * _2469) * _2191);
    float _2555 = (((_2531 * cbLight._m0[_2483].y) * _2544) * _2177) + ((((cbLight._m0[_2402].y * _2145) * _2455) * _2469) * _2191);
    float _2556 = (((_2531 * cbLight._m0[_2483].z) * _2544) * _2177) + ((((cbLight._m0[_2402].z * _2147) * _2455) * _2469) * _2191);
    float _2612;
    float _2614;
    float _2616;
    if (_2231)
    {
        _2612 = _2554;
        _2614 = _2555;
        _2616 = _2556;
    }
    else
    {
        uint _2618 = _2154 + 2u;
        uint _2622 = _2154 + 10u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _666) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _741;
        float _2639 = cbLight._m0[_2618].y + _742;
        float _2640 = cbLight._m0[_2618].z + _743;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2618].xyz));
        float _4663 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2652 = dot(vec3(_663, _664, _665), vec3(_2645, _2646, _2647));
        float _4674 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4685 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2674 = 1.0 - _2637;
        float _2684 = (0.5 / (((_2431 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2674) + _2637) * _2651))) * _2651;
        float _4696 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2612 = (((_2673 * cbLight._m0[_2622].x) * _2686) * _2687) + _2554;
        _2614 = (((_2673 * cbLight._m0[_2622].y) * _2686) * _2687) + _2555;
        _2616 = (((_2673 * cbLight._m0[_2622].z) * _2686) * _2687) + _2556;
    }
    float _2718;
    float _2720;
    float _2722;
    if (_2340)
    {
        _2718 = _2612;
        _2720 = _2614;
        _2722 = _2616;
    }
    else
    {
        uint _2729 = _2154 + 3u;
        uint _2733 = _2154 + 11u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _666) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _741;
        float _2750 = cbLight._m0[_2729].y + _742;
        float _2751 = cbLight._m0[_2729].z + _743;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2729].xyz));
        float _4712 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2763 = dot(vec3(_663, _664, _665), vec3(_2756, _2757, _2758));
        float _4723 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4734 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2784 = (exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2785 = 1.0 - _2748;
        float _2795 = (0.5 / (((_2431 * ((_2762 * _2785) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2431 * _2785) + _2748) * _2762))) * _2762;
        float _4745 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2718 = (((_2784 * cbLight._m0[_2733].x) * _2797) * _2798) + _2612;
        _2720 = (((_2784 * cbLight._m0[_2733].y) * _2797) * _2798) + _2614;
        _2722 = (((_2784 * cbLight._m0[_2733].z) * _2797) * _2798) + _2616;
    }
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_2152.y == 0u)
    {
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.x;
        uint _2831 = uint((float(_2819.y) * floor(float(uint(cbSceneParam._m0[85u].y * _763) / _2820))) + floor(float(uint(cbSceneParam._m0[85u].x * _762) / _2820)));
        float _2841 = (log2(_1930 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2842 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        uint _2845 = uint(isnan(14.0) ? _2842 : (isnan(_2842) ? 14.0 : min(_2842, 14.0)));
        uvec4 _2850 = texelFetch(g_lightClusterGridBuffer, int(((_2845 << 2u) + (_2831 << 6u)) >> 2u));
        uint _2851 = _2850.x;
        uint _2852 = _2819.z;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        if (((((1u << ((_2852 >> 4u) & 15u)) + 4294967295u) & _2851) == 0u) || ((_2852 & 240u) == 0u))
        {
            _2931 = 0.0;
            _2933 = 0.0;
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
        }
        else
        {
            float _2932;
            float _2934;
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            float _3089 = 0.0;
            uint _3090 = 0u;
            uint _3099;
            bool _3100;
            for (;;)
            {
                _3099 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                _3100 = _3099 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3100)
                {
                    frontier_phi_71_pred = _3089;
                    frontier_phi_71_pred_1 = _3088;
                    frontier_phi_71_pred_2 = _3087;
                    frontier_phi_71_pred_3 = _3086;
                    frontier_phi_71_pred_4 = _3085;
                    frontier_phi_71_pred_5 = _3084;
                }
                else
                {
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    uint _3235;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3089;
                    _3235 = _3099;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3239 = uint(findLSB(_3235)) + (_3090 << 5u);
                        uint _3236 = (_3235 + 4294967295u) & _3235;
                        uint _3241 = _3239 * 48u;
                        vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 3u)).x));
                        uint _3261 = (_3239 * 48u) + 4u;
                        vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3261)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3261 + 3u)).x));
                        uint _3280 = (_3239 * 48u) + 8u;
                        vec3 _3291 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x));
                        float _3295 = _3255.x - _1928;
                        float _3296 = _3255.y - _1929;
                        float _3297 = _3255.z - _1930;
                        float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                        float _3301 = inversesqrt(_3298);
                        float _3302 = _3301 * _3295;
                        float _3303 = _3301 * _3296;
                        float _3304 = _3301 * _3297;
                        float _3305 = dot(vec3(_783, _786, _789), vec3(_3302, _3303, _3304));
                        float _3310 = 1.0 - (_3298 * _3255.w);
                        float _4771 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3311 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3312 = sqrt(_3298) * _3274.w;
                        float _3315 = 1.39999997615814208984375 / (_3312 + 1.39999997615814208984375);
                        float _3316 = _3315 * _3315;
                        float _3319 = ((1.0 - _3316) * _3305) + _3316;
                        float _3322 = _3312 * _3312;
                        float _3326 = ((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3311) / ((_3322 * 0.699999988079071044921875) + 1.0);
                        float _3330 = (-0.0) - _1928;
                        float _3331 = (-0.0) - _1929;
                        float _3332 = (-0.0) - _1930;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3337 = _3336 * _3330;
                        float _3338 = _3336 * _3331;
                        float _3339 = _3336 * _3332;
                        float _3346 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                        float _3347 = 1.0 - _843;
                        float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                        float _3355 = _3354 * _3354;
                        float _3356 = _3355 * _3355;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3359 = _3339 + _3304;
                        float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                        float _3367 = dot(vec3(_783, _786, _789), vec3(_3337, _3338, _3339));
                        float _4787 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3371 = dot(vec3(_783, _786, _789), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                        float _4798 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                        float _3379 = _3315 * _3355;
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3305) + _3380;
                        float _4809 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3385 = 1.0 - _3355;
                        float _3395 = (0.5 / (((_3384 * ((_3370 * _3385) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3355) * _3370))) * _3384;
                        float _4820 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3406 = (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3378 * _3378) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125))) * _3311;
                        _3159 = (_3326 * _3274.x) + _3232;
                        _3160 = (_3326 * _3274.y) + _3233;
                        _3161 = (_3326 * _3274.z) + _3234;
                        _3156 = (_3406 * _3291.x) + _3229;
                        _3157 = (_3406 * _3291.y) + _3230;
                        _3158 = (_3406 * _3291.z) + _3231;
                        if (_3236 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3161;
                            _3235 = _3236;
                        }
                    }
                    frontier_phi_71_pred = _3161;
                    frontier_phi_71_pred_1 = _3160;
                    frontier_phi_71_pred_2 = _3159;
                    frontier_phi_71_pred_3 = _3158;
                    frontier_phi_71_pred_4 = _3157;
                    frontier_phi_71_pred_5 = _3156;
                }
                _2942 = frontier_phi_71_pred;
                _2940 = frontier_phi_71_pred_1;
                _2938 = frontier_phi_71_pred_2;
                _2936 = frontier_phi_71_pred_3;
                _2934 = frontier_phi_71_pred_4;
                _2932 = frontier_phi_71_pred_5;
                uint _3091 = _3090 + 1u;
                if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3084 = _2932;
                    _3085 = _2934;
                    _3086 = _2936;
                    _3087 = _2938;
                    _3088 = _2940;
                    _3089 = _2942;
                    _3090 = _3091;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2931 = _2932;
            _2933 = _2934;
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
        }
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.z;
        uint _2948 = (_2946 >> 8u) & 15u;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        if (((4294967295u << _2948) & _2851) == 0u)
        {
            _3052 = _2931;
            _3054 = _2933;
            _3056 = _2935;
            _3058 = _2937;
            _3060 = _2939;
            _3062 = _2941;
        }
        else
        {
            float _3077 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
            float _3078 = _3077 * _1928;
            float _3079 = _3077 * _1929;
            float _3080 = _3077 * _1930;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2948 < ((_2946 >> 12u) & 15u))
            {
                float _3053;
                float _3055;
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3212 = _2931;
                float _3213 = _2933;
                float _3214 = _2935;
                float _3215 = _2937;
                float _3216 = _2939;
                float _3217 = _2941;
                uint _3218 = _2948;
                uint _3227;
                bool _3228;
                for (;;)
                {
                    _3227 = texelFetch(g_lightClassification, int((((_2845 << 5u) + (_2831 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                    _3228 = _3227 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3228)
                    {
                        frontier_phi_82_pred = _3217;
                        frontier_phi_82_pred_1 = _3216;
                        frontier_phi_82_pred_2 = _3215;
                        frontier_phi_82_pred_3 = _3214;
                        frontier_phi_82_pred_4 = _3213;
                        frontier_phi_82_pred_5 = _3212;
                    }
                    else
                    {
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        float _3438 = _3217;
                        uint _3439 = _3227;
                        uint _3440;
                        vec4 _3465;
                        float _3466;
                        vec4 _3481;
                        vec3 _3493;
                        vec4 _3508;
                        vec4 _3523;
                        float _3569;
                        bool _3570;
                        for (;;)
                        {
                            uint _3450 = ((_3218 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3439));
                            _3440 = (_3439 + 4294967295u) & _3439;
                            uint _3452 = _3450 * 40u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3466 = _3465.w;
                            uint _3468 = (_3450 * 40u) + 4u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3450 * 40u) + 8u;
                            _3493 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x));
                            uint _3495 = (_3450 * 40u) + 16u;
                            _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3510 = (_3450 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3450 * 40u) + 24u;
                            vec4 _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3544 = (_3450 * 40u) + 28u;
                            vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            _3569 = fma(_1930, _3557.z, fma(_1929, _3557.y, _3557.x * _1928)) + _3557.w;
                            _3570 = !((fma(_1930, _3538.z, fma(_1929, _3538.y, _3538.x * _1928)) + _3538.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3570)
                            {
                                float _3597 = _3465.x - _1928;
                                float _3598 = _3465.y - _1929;
                                float _3599 = _3465.z - _1930;
                                float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                                float _3603 = inversesqrt(_3600);
                                float _3604 = _3603 * _3597;
                                float _3605 = _3603 * _3598;
                                float _3606 = _3603 * _3599;
                                float _3610 = 1.0 - (_3600 / (_3466 * _3466));
                                float _4831 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3611 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3615 = sqrt(_3600) * _3481.w;
                                float _3617 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                                float _3618 = _3617 * _3617;
                                float _3621 = ((1.0 - _3618) * dot(vec3(_3604, _3605, _3606), vec3(_783, _786, _789))) + _3618;
                                float _3624 = _3615 * _3615;
                                float _3628 = (fma(_1930, _3508.z, fma(_1929, _3508.y, _3508.x * _1928)) + _3508.w) / _3569;
                                float _3629 = (fma(_1930, _3523.z, fma(_1929, _3523.y, _3523.x * _1928)) + _3523.w) / _3569;
                                float _3633 = 1.0 - dot(vec2(_3628, _3629), vec2(_3628, _3629));
                                float _4847 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3635 = _3634 * (((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3611) / ((_3624 * 0.699999988079071044921875) + 1.0));
                                float _3647 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                                float _3648 = 1.0 - _843;
                                float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                                float _3656 = _3655 * _3655;
                                float _3657 = _3656 * _3656;
                                float _3658 = _3604 - _3078;
                                float _3659 = _3605 - _3079;
                                float _3660 = _3606 - _3080;
                                float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                                float _3668 = dot(vec3(_783, _786, _789), vec3((-0.0) - _3078, (-0.0) - _3079, (-0.0) - _3080));
                                float _4858 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3671 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3672 = dot(vec3(_783, _786, _789), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                                float _4869 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3675 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                                float _3680 = _3617 * _3656;
                                float _3681 = _3680 * _3680;
                                float _3687 = ((1.0 - _3681) * dot(vec3(_783, _786, _789), vec3(_3604, _3605, _3606))) + _3681;
                                float _4880 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3689 = 1.0 - _3656;
                                float _3699 = (0.5 / (((_3688 * ((_3671 * _3689) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3688 * _3689) + _3656) * _3671))) * _3688;
                                float _4891 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3709 = (_3634 * _3611) * (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3679 * _3679) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3635 * _3481.z;
                                frontier_phi_88_pred_1 = _3635 * _3481.y;
                                frontier_phi_88_pred_2 = _3635 * _3481.x;
                                frontier_phi_88_pred_3 = _3709 * _3493.z;
                                frontier_phi_88_pred_4 = _3709 * _3493.y;
                                frontier_phi_88_pred_5 = _3709 * _3493.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3718 = frontier_phi_88_pred;
                            _3717 = frontier_phi_88_pred_1;
                            _3716 = frontier_phi_88_pred_2;
                            _3715 = frontier_phi_88_pred_3;
                            _3714 = frontier_phi_88_pred_4;
                            _3713 = frontier_phi_88_pred_5;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3425 = _3718 + _3438;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            _3422 = _3715 + _3435;
                            if (_3440 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3440;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3425;
                        frontier_phi_82_pred_1 = _3424;
                        frontier_phi_82_pred_2 = _3423;
                        frontier_phi_82_pred_3 = _3422;
                        frontier_phi_82_pred_4 = _3421;
                        frontier_phi_82_pred_5 = _3420;
                    }
                    _3063 = frontier_phi_82_pred;
                    _3061 = frontier_phi_82_pred_1;
                    _3059 = frontier_phi_82_pred_2;
                    _3057 = frontier_phi_82_pred_3;
                    _3055 = frontier_phi_82_pred_4;
                    _3053 = frontier_phi_82_pred_5;
                    uint _3219 = _3218 + 1u;
                    if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3212 = _3053;
                        _3213 = _3055;
                        _3214 = _3057;
                        _3215 = _3059;
                        _3216 = _3061;
                        _3217 = _3063;
                        _3218 = _3219;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3059;
                frontier_phi_63_64_ladder_1 = _3063;
                frontier_phi_63_64_ladder_2 = _3061;
                frontier_phi_63_64_ladder_3 = _3057;
                frontier_phi_63_64_ladder_4 = _3055;
                frontier_phi_63_64_ladder_5 = _3053;
            }
            else
            {
                frontier_phi_63_64_ladder = _2937;
                frontier_phi_63_64_ladder_1 = _2941;
                frontier_phi_63_64_ladder_2 = _2939;
                frontier_phi_63_64_ladder_3 = _2935;
                frontier_phi_63_64_ladder_4 = _2933;
                frontier_phi_63_64_ladder_5 = _2931;
            }
            _3052 = frontier_phi_63_64_ladder_5;
            _3054 = frontier_phi_63_64_ladder_4;
            _3056 = frontier_phi_63_64_ladder_3;
            _3058 = frontier_phi_63_64_ladder;
            _3060 = frontier_phi_63_64_ladder_2;
            _3062 = frontier_phi_63_64_ladder_1;
        }
        float _3067 = isnan(1.0) ? _827 : (isnan(_827) ? 1.0 : min(_827, 1.0));
        _2864 = (_3067 * _3058) + _2395;
        _2866 = (_3067 * _3060) + _2397;
        _2868 = (_3067 * _3062) + _2399;
        _2870 = ((_3052 * 0.039999999105930328369140625) * _3067) + _2718;
        _2872 = ((_3054 * 0.039999999105930328369140625) * _3067) + _2720;
        _2874 = ((_3056 * 0.039999999105930328369140625) * _3067) + _2722;
    }
    else
    {
        _2864 = _2395;
        _2866 = _2397;
        _2868 = _2399;
        _2870 = _2718;
        _2872 = _2720;
        _2874 = _2722;
    }
    float _4907 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4918 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4929 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2891 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2864 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _827))) + ((_2870 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2866 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _827))) + ((_2872 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    float _2893 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2868 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _827))) + ((_2874 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1663)) * cbPerFrame._m0[3u].x);
    uint _2894 = _273 + 6u;
    float _2902 = _762 / cbSceneParam._m0[86u].x;
    float _2903 = _763 / cbSceneParam._m0[86u].y;
    vec4 _2917 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2919 = _2917.x;
    float _2920 = _2917.y;
    float _2921 = _2917.z;
    float _2922 = _2917.w;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2956 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2957 = _2956 / _684;
        float _2968 = _2957 * _734;
        float _2969 = _735 * _2957;
        float _2970 = (-0.0) - _2969;
        float _2972 = _2957 * _736;
        float _2974 = (cbSceneParam._m0[77u].w * _2970) / _2956;
        float _2975 = _2974 + cbSceneParam._m0[79u].w;
        float _2976 = cbSceneParam._m0[79u].w - _2969;
        float _2982 = sqrt(((_2968 * _2968) + (_2969 * _2969)) + (_2972 * _2972));
        float _2985 = (1.0 - (cbSceneParam._m0[77u].w / _2956)) * _2982;
        float _2990 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2992 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2970 - _2974) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2975 > 0.0) ? exp2(_2990 * _2975) : (2.0 - exp2(_2992 * _2975))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2985;
        }
        else
        {
            float _3113 = 1.0 / cbSceneParam._m0[80u].x;
            float _3114 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : max(_2975, _2976));
            float _3115 = isnan(_2976) ? _2975 : (isnan(_2975) ? _2976 : min(_2975, _2976));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            float _3125 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : min(_3115, 0.0));
            _3169 = ((abs(_2982 / _2970) * cbSceneParam._m0[80u].y) * ((((_3124 - _3125) * 2.0) - ((exp2(_2990 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0)))) - exp2(_2990 * (isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))))) * _3113)) - ((exp2(_2992 * _3124) - exp2(_2992 * _3125)) * _3113))) + (_2985 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2902, _2903, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2922);
        _2994 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2919;
        _2996 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2920;
        _2998 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2921;
        _3000 = _3180 * _2922;
    }
    else
    {
        _2994 = _2919;
        _2996 = _2920;
        _2998 = _2921;
        _3000 = _2922;
    }
    bool _3207;
    vec4 _3010;
    vec4 _3032;
    float _3034;
    float _3038;
    float _3039;
    float _3040;
    float _3041;
    bool _3051;
    for (;;)
    {
        _3010 = cbMatDynParam._m0[0u];
        float _3012 = roundEven(_3010.y);
        bool _3013 = _3012 == 3.0;
        float _3014 = log2(_3000);
        float _3021 = exp2(_3014 * cbSceneParam._m0[78u].x) * _2891;
        float _3022 = exp2(_3014 * cbSceneParam._m0[78u].y) * _2892;
        float _3023 = exp2(_3014 * cbSceneParam._m0[78u].z) * _2893;
        float _3030 = _750 + (-0.5);
        _3032 = cbMtdParam._m0[1u];
        _3034 = _3032.y * _3030;
        float _3037 = (_3012 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3038 = _3037 * (_3013 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2994)));
        _3039 = _3037 * (_3013 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2996)));
        _3040 = _3037 * (_3013 ? _3023 : (_3023 + (cbSceneParam._m0[72u].w * _2998)));
        _3041 = _3030 * 0.999000012874603271484375;
        _3051 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3051)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3041) < 0.5)
            {
                _3207 = true;
                break;
            }
        }
        uint _3148 = _802 + uint(_3010.w);
        if ((cbInstanceData._m0[_3148].w < 1.0) && ((cbInstanceData._m0[_3148].w + _3041) < 0.5))
        {
            _3207 = true;
            break;
        }
        if ((_3034 + 1.0) < _3032.x)
        {
            _3207 = true;
            break;
        }
        _3207 = false;
        break;
    }
    float _3411;
    if (_3207)
    {
        discard_state = true;
        _3411 = 0.0;
    }
    else
    {
        _3411 = cbInstanceData._m0[_2894].w;
    }
    SV_Target.x = _3038;
    SV_Target.y = _3039;
    SV_Target.z = _3040;
    SV_Target.w = _3411;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2894].w;
    discard_exit();
}


