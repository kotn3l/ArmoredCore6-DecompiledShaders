#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1332;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3637 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3648 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3659 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _328 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _402 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _402) * cbMtdParam._m0[24u].x) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3670 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _427 = (_420 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _428 = (_420 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _429 = (_420 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    float _433 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _427;
    float _436 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _428;
    float _439 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _429;
    float _446 = ((_427 - _433) * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) + _433;
    float _447 = ((_428 - _436) * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) + _436;
    float _448 = ((_429 - _439) * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) + _439;
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _493 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = _510.x;
    float _513 = _510.y;
    float _514 = _510.z;
    float _523 = ((_493.z - _514) * _420) + _514;
    float _526 = ((((_493.x - _512) * _420) + _512) * 2.0) + (-1.0);
    float _527 = ((((_493.y - _513) * _420) + _513) * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3681 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _533 = sqrt(1.0 - (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))));
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _565 = (_526 + ((((_466.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_553.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _566 = (_527 + ((((_466.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_553.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _569 = fma(_533, _240, fma(_566, _247, _565 * _233));
    float _572 = fma(_533, _241, fma(_566, _248, _565 * _234));
    float _575 = fma(_533, _242, fma(_566, _249, _565 * _235));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    vec4 _608 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _617 = (cbMtdParam._m0[19u].x + dot(vec4(_579 * _569, _579 * _572, _579 * _575, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_610 - _611) * cbMtdParam._m0[24u].z) + _611) * cbMtdParam._m0[21u].z);
    float _3692 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _620 = (-0.0) - cbMtdParam._m0[24u].y;
    float _622 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
    float _630 = _618 - ((_618 * TEXCOORD_8.x) * _623);
    float _631 = _618 - ((_618 * TEXCOORD_8.y) * _623);
    float _632 = _618 - ((_618 * TEXCOORD_8.z) * _623);
    float _639 = (_630 * (cbMtdParam._m0[17u].x - _446)) + _446;
    float _640 = (_631 * (cbMtdParam._m0[17u].y - _447)) + _447;
    float _641 = (_632 * (cbMtdParam._m0[17u].z - _448)) + _448;
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _655 = _653.x;
    float _656 = 1.0 - _655;
    float _682 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_655 - _656) * cbMtdParam._m0[24u].w) + _656) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3713 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _683 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _691 = ((((cbMtdParam._m0[10u].x - _639) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _683) + _639;
    float _692 = ((((cbMtdParam._m0[10u].y - _640) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _683) + _640;
    float _693 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _641)) * _683) + _641;
    float _698 = (((_466.z - _523) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _523;
    float _702 = ((_553.z - _698) * cbMtdParam._m0[19u].w) + _698;
    vec4 _716 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _723 = (_716.x * 2.0) + (-1.0);
    float _724 = (_716.y * 2.0) + (-1.0);
    float _725 = dot(vec2(_723, _724), vec2(_723, _724));
    float _3724 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _733 = ((_716.z - _702) * _630) + _702;
    float _736 = ((cbMtdParam._m0[23u].y - _733) * _683) + _733;
    vec4 _755 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _761 = (_755.x * 2.0) + (-1.0);
    float _762 = (_755.y * 2.0) + (-1.0);
    float _763 = dot(vec2(_761, _762), vec2(_761, _762));
    float _3735 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _778 = ((sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) - _533) * _632) + _533;
    float _781 = (((_723 - _565) * _630) + _565) + (cbMtdParam._m0[21u].x * _565);
    float _782 = (((_724 - _566) * _631) + _566) + (cbMtdParam._m0[21u].x * _566);
    float _793 = (((_761 - _781) + (_781 * cbMtdParam._m0[22u].z)) * _683) + _781;
    float _794 = (((_762 - _782) + (_782 * cbMtdParam._m0[22u].z)) * _683) + _782;
    float _795 = (_683 * (sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _778)) + _778;
    float _797 = cbMtdParam._m0[22u].x + _553.w;
    float _800 = fma(_795, _240, fma(_794, _247, _793 * _233));
    float _803 = fma(_795, _241, fma(_794, _248, _793 * _234));
    float _806 = fma(_795, _242, fma(_794, _249, _793 * _235));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _3746 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _814 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _3757 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _3768 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _3779 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _3790 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _920 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _923 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _937 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_937].z;
    float _3801 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _961 = ((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_811, _812, _813), vec3(_890, _891, _892));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _811) - _890;
    float _970 = (_965 * _812) - _891;
    float _971 = (_965 * _813) - _892;
    float _975 = abs(dot(vec3(_890, _891, _892), vec3(_811, _812, _813)));
    float _3834 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_814);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1060 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1064 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1089 = _1022 + _811;
        float _1090 = _1026 + _812;
        float _1091 = _1030 + _813;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_811, _812, _813), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3882 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_811, _812, _813), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3915 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_811, _812, _813), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3948 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1371 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1375 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1379 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1402 = _1022 + _811;
        float _1403 = _1026 + _812;
        float _1404 = _1030 + _813;
        float _1414 = fma(_1404, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1402)) - _1371;
        float _1415 = fma(_1404, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1402)) - _1375;
        float _1416 = fma(_1404, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1402)) - _1379;
        float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
        float _1433 = ((_1420 * _1414) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1371 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1420 * _1415) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1375 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1420 * _1416) / cbModelParam._m0[35u].z) + ((((((_1379 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        float _1470 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1437.x + (-0.5));
        float _1472 = _1470 * (_1437.y + (-0.5));
        float _1473 = _1470 * (_1437.z + (-0.5));
        float _1480 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1444.x + (-0.5));
        float _1482 = _1480 * (_1444.y + (-0.5));
        float _1483 = _1480 * (_1444.z + (-0.5));
        float _1490 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1451.x + (-0.5));
        float _1492 = _1490 * (_1451.y + (-0.5));
        float _1493 = _1490 * (_1451.z + (-0.5));
        float _1500 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1458.x + (-0.5));
        float _1502 = _1500 * (_1458.y + (-0.5));
        float _1503 = _1500 * (_1458.z + (-0.5));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1471 * 0.5;
        float _1508 = _1481 * 0.5;
        float _1509 = _1491 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_811, _812, _813), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4011 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1534 + 1.0))) + _1539) * _1504;
        float _1549 = _1472 * 0.5;
        float _1550 = _1482 * 0.5;
        float _1551 = _1492 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_811, _812, _813), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4044 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1576 + 1.0))) + _1581) * _1505;
        float _1591 = _1473 * 0.5;
        float _1592 = _1483 * 0.5;
        float _1593 = _1493 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_811, _812, _813), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4077 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1618 + 1.0))) + _1623) * _1506;
        _1640 = _1473;
        _1641 = _1472;
        _1642 = _1471;
        _1643 = _1483;
        _1644 = _1482;
        _1645 = _1481;
        _1646 = _1493;
        _1647 = _1492;
        _1648 = _1491;
        _1649 = _1506;
        _1650 = _1505;
        _1651 = _1504;
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
    }
    else
    {
        _1640 = _1332;
        _1641 = _1332;
        _1642 = _1332;
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = 0.0;
        _1653 = 0.0;
        _1654 = 0.0;
    }
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1344)) + _1344;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1346)) + _1346;
    float _1687 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1664));
    float _1708 = _969 * 0.5;
    float _1709 = _970 * 0.5;
    float _1710 = _971 * 0.5;
    float _1711 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1714 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1717 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1751;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1724 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1728 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1732 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1739 = dot(vec4(cbModelParam._m0[39u]), vec4(_1708, _1709, _1710, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1762;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1753 = dot(vec4(cbModelParam._m0[40u]), vec4(_1708, _1709, _1710, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1766 = (_1762 * cbModelParam._m0[1u].x) + (_1751 * (1.0 - cbModelParam._m0[1u].x));
    float _1776 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1776 : min(cbModelParam._m0[25u].z, _1776));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1839 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1842 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1870 = frontier_phi_14_12_ladder;
        }
        float _2071;
        if (_1839 > 0.0)
        {
            _2071 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2071 = frontier_phi_23_19_ladder;
        }
        float _2314;
        if (_1842 > 0.0)
        {
            _2314 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2314 = frontier_phi_35_30_ladder;
        }
        float _2316 = isnan(_2071) ? _1870 : (isnan(_1870) ? _2071 : min(_1870, _2071));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1836) + _1825;
        float _2322 = (_2317 * _1839) + _1829;
        float _2323 = (_2317 * _1842) + _1833;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2326 = (-1.0) - _2324;
        float _2328 = _2324 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2323 > _2328) || ((_2323 < _2326) || ((_2322 > _2328) || ((_2322 < _2326) || ((_2321 < _2326) || (_2321 > _2328))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2323, cbModelParam._m0[9u].z, fma(_2322, cbModelParam._m0[9u].y, _2321 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2323, cbModelParam._m0[10u].z, fma(_2322, cbModelParam._m0[10u].y, _2321 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2323, cbModelParam._m0[11u].z, fma(_2322, cbModelParam._m0[11u].y, _2321 * cbModelParam._m0[11u].x))), _1777);
            frontier_phi_13_35_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_13_35_ladder_2;
        _1860 = frontier_phi_13_35_ladder_1;
        _1862 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1777);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1935 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1938 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2076;
        if (_1932 > 0.0)
        {
            _2076 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2076 = frontier_phi_25_21_ladder;
        }
        float _2341;
        if (_1935 > 0.0)
        {
            _2341 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2341 = frontier_phi_37_32_ladder;
        }
        float _2546;
        if (_1938 > 0.0)
        {
            _2546 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2546 = frontier_phi_46_43_ladder;
        }
        float _2548 = isnan(_2341) ? _2076 : (isnan(_2076) ? _2341 : min(_2076, _2341));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1932) + _1921;
        float _2554 = (_2549 * _1935) + _1925;
        float _2555 = (_2549 * _1938) + _1929;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_22_46_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_22_46_ladder_2;
        _1959 = frontier_phi_22_46_ladder_1;
        _1961 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1867);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1973 = ((((1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_990 * _977)) * _961;
    float _1974 = _1973 * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1975 = _1973 * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1976 = _1973 * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2005 = _961 + (-1.0);
    float _2010 = (cbLight._m0[_1998].x * _2005) + 1.0;
    float _2011 = (cbLight._m0[_1998].y * _2005) + 1.0;
    float _2012 = (cbLight._m0[_1998].z * _2005) + 1.0;
    float _2013 = (cbLight._m0[_1998].w * _2005) + 1.0;
    uint _2014 = _1997 + 5u;
    float _2020 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2024 = _1997 + 4u;
    float _2030 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2034 = _1997 | 1u;
    float _2045 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_811, _812, _813));
    float _2048 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_811, _812, _813));
    float _4213 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _4224 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2053 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * 0.3183098733425140380859375;
    float _2055 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * 0.3183098733425140380859375;
    float _2062 = ((cbLight._m0[_2014].x * _2020) * _2055) + ((cbLight._m0[_2024].x * _2030) * _2053);
    float _2063 = ((_2020 * cbLight._m0[_2014].y) * _2055) + ((_2030 * cbLight._m0[_2024].y) * _2053);
    float _2064 = ((_2020 * cbLight._m0[_2014].z) * _2055) + ((_2030 * cbLight._m0[_2024].z) * _2053);
    uvec4 _2068 = floatBitsToUint(cbLight._m0[_1997 + 12u]);
    bool _2070 = _2068.x == 0u;
    float _2081;
    float _2083;
    float _2085;
    if (_2070)
    {
        _2081 = _2062;
        _2083 = _2063;
        _2085 = _2064;
    }
    else
    {
        uint _2089 = _1997 + 6u;
        float _2105 = (dot(vec3(cbLight._m0[_1997 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _4235 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2108 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2081 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _2062;
        _2083 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _2063;
        _2085 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _2064;
    }
    bool _2088 = _2068.y == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2088)
    {
        _2126 = _2081;
        _2128 = _2083;
        _2130 = _2085;
    }
    else
    {
        uint _2285 = _1997 + 7u;
        float _2301 = (dot(vec3(cbLight._m0[_1997 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4251 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2304 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2126 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2081;
        _2128 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2083;
        _2130 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2085;
    }
    uint _2133 = _1997 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _814) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1997].x + _890;
    float _2149 = cbLight._m0[_1997].y + _891;
    float _2150 = cbLight._m0[_1997].z + _892;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_1997].xyz));
    float _4267 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _4278 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2162 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2163 = dot(vec3(_811, _812, _813), vec3(_2155, _2156, _2157));
    float _4289 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2155, _2156, _2157));
    float _4300 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2147;
    float _2198 = (0.5 / (((_2162 * ((_2161 * _2187) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2187) + _2147) * _2161))) * _2161;
    float _4311 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2200 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    uint _2211 = _1997 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _814) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2034].x + _890;
    float _2225 = cbLight._m0[_2034].y + _891;
    float _2226 = cbLight._m0[_2034].z + _892;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2034].xyz));
    float _4322 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2238 = dot(vec3(_811, _812, _813), vec3(_2231, _2232, _2233));
    float _4333 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2231, _2232, _2233));
    float _4344 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2223;
    float _2270 = (0.5 / (((_2162 * ((_2237 * _2260) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2260) + _2223) * _2237))) * _2237;
    float _4355 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2272 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2282 = (((_2259 * cbLight._m0[_2211].x) * _2272) * _2020) + (((_2186 * cbLight._m0[_2133].x) * _2200) * _2030);
    float _2283 = (((_2259 * cbLight._m0[_2211].y) * _2272) * _2020) + (((_2186 * cbLight._m0[_2133].y) * _2200) * _2030);
    float _2284 = (((_2259 * cbLight._m0[_2211].z) * _2272) * _2020) + (((_2186 * cbLight._m0[_2133].z) * _2200) * _2030);
    float _2346;
    float _2348;
    float _2350;
    if (_2070)
    {
        _2346 = _2282;
        _2348 = _2283;
        _2350 = _2284;
    }
    else
    {
        uint _2352 = _1997 + 2u;
        uint _2356 = _1997 + 10u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _814) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _890;
        float _2373 = cbLight._m0[_2352].y + _891;
        float _2374 = cbLight._m0[_2352].z + _892;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2352].xyz));
        float _4366 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2386 = dot(vec3(_811, _812, _813), vec3(_2379, _2380, _2381));
        float _4377 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4388 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2408 = 1.0 - _2371;
        float _2418 = (0.5 / (((_2162 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2408) + _2371) * _2385))) * _2385;
        float _4399 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2346 = (((_2407 * cbLight._m0[_2356].x) * _2420) * _2421) + _2282;
        _2348 = (((_2407 * cbLight._m0[_2356].y) * _2420) * _2421) + _2283;
        _2350 = (((_2407 * cbLight._m0[_2356].z) * _2420) * _2421) + _2284;
    }
    float _2456;
    float _2458;
    float _2460;
    if (_2088)
    {
        _2456 = _2346;
        _2458 = _2348;
        _2460 = _2350;
    }
    else
    {
        uint _2467 = _1997 + 3u;
        uint _2471 = _1997 + 11u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _814) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _890;
        float _2488 = cbLight._m0[_2467].y + _891;
        float _2489 = cbLight._m0[_2467].z + _892;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2467].xyz));
        float _4415 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2501 = dot(vec3(_811, _812, _813), vec3(_2494, _2495, _2496));
        float _4426 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4437 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2162 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2523) + _2486) * _2500))) * _2500;
        float _4448 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
        _2456 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2346;
        _2458 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2348;
        _2460 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2350;
    }
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_1995.y == 0u)
    {
        float _2611 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2612 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2611;
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2611;
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2611;
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.x;
        uint _2638 = uint((float(_2626.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2627))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2627)));
        float _2648 = (log2(_2614 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2649 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        uint _2652 = uint(isnan(14.0) ? _2649 : (isnan(_2649) ? 14.0 : min(_2649, 14.0)));
        uvec4 _2657 = texelFetch(g_lightClusterGridBuffer, int(((_2652 << 2u) + (_2638 << 6u)) >> 2u));
        uint _2658 = _2657.x;
        uint _2659 = _2626.z;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((((1u << ((_2659 >> 4u) & 15u)) + 4294967295u) & _2658) == 0u) || ((_2659 & 240u) == 0u))
        {
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
        }
        else
        {
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2919)
                {
                    frontier_phi_61_pred = _2903;
                    frontier_phi_61_pred_1 = _2908;
                    frontier_phi_61_pred_2 = _2907;
                    frontier_phi_61_pred_3 = _2906;
                    frontier_phi_61_pred_4 = _2905;
                    frontier_phi_61_pred_5 = _2904;
                }
                else
                {
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    uint _3033;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2905;
                    _3030 = _2906;
                    _3031 = _2907;
                    _3032 = _2908;
                    _3033 = _2918;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    for (;;)
                    {
                        uint _3037 = uint(findLSB(_3033)) + (_2909 << 5u);
                        uint _3034 = (_3033 + 4294967295u) & _3033;
                        uint _3039 = _3037 * 48u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 3u)).x));
                        uint _3059 = (_3037 * 48u) + 4u;
                        vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 3u)).x));
                        uint _3078 = (_3037 * 48u) + 8u;
                        vec3 _3089 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x));
                        float _3093 = _3053.x - _2612;
                        float _3094 = _3053.y - _2613;
                        float _3095 = _3053.z - _2614;
                        float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                        float _3099 = inversesqrt(_3096);
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3103 = dot(vec3(_917, _920, _923), vec3(_3100, _3101, _3102));
                        float _3108 = 1.0 - (_3096 * _3053.w);
                        float _4474 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3110 = sqrt(_3096) * _3072.w;
                        float _3113 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                        float _3114 = _3113 * _3113;
                        float _3117 = ((1.0 - _3114) * _3103) + _3114;
                        float _3120 = _3110 * _3110;
                        float _3124 = ((isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0))) * _3109) / ((_3120 * 0.699999988079071044921875) + 1.0);
                        float _3128 = (-0.0) - _2612;
                        float _3129 = (-0.0) - _2613;
                        float _3130 = (-0.0) - _2614;
                        float _3134 = inversesqrt(dot(vec3(_3128, _3129, _3130), vec3(_3128, _3129, _3130)));
                        float _3135 = _3134 * _3128;
                        float _3136 = _3134 * _3129;
                        float _3137 = _3134 * _3130;
                        float _3145 = exp2(log2(1.0 / ((_3120 * 3.5) + 5.0)) * 0.25);
                        float _3146 = 1.0 - _977;
                        float _3153 = sqrt(1.0 - ((1.0 - (_3146 * _3146)) * (1.0 - (_3145 * _3145))));
                        float _3154 = _3153 * _3153;
                        float _3155 = _3154 * _3154;
                        float _3156 = _3135 + _3100;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3162 = inversesqrt(dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158)));
                        float _3166 = dot(vec3(_917, _920, _923), vec3(_3135, _3136, _3137));
                        float _4490 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3170 = dot(vec3(_917, _920, _923), vec3(_3162 * _3156, _3162 * _3157, _3162 * _3158));
                        float _4501 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3173 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3177 = ((_3173 * _3173) * (_3155 + (-1.0))) + 1.0;
                        float _3178 = _3113 * _3154;
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3103) + _3179;
                        float _4512 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3184 = 1.0 - _3154;
                        float _3194 = (0.5 / (((_3183 * ((_3169 * _3184) + _3154)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3154) * _3169))) * _3183;
                        float _4523 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3205 = (((_3155 * 3.1415927410125732421875) * (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) / ((_3177 * _3177) * ((_3120 * 2.1991131305694580078125) + 3.141590118408203125))) * _3109;
                        _2962 = (_3124 * _3072.x) + _3030;
                        _2963 = (_3124 * _3072.y) + _3031;
                        _2964 = (_3124 * _3072.z) + _3032;
                        _2959 = (_3205 * _3089.x) + _3027;
                        _2960 = (_3205 * _3089.y) + _3028;
                        _2961 = (_3205 * _3089.z) + _3029;
                        if (_3034 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _3034;
                        }
                    }
                    frontier_phi_61_pred = _2959;
                    frontier_phi_61_pred_1 = _2964;
                    frontier_phi_61_pred_2 = _2963;
                    frontier_phi_61_pred_3 = _2962;
                    frontier_phi_61_pred_4 = _2961;
                    frontier_phi_61_pred_5 = _2960;
                }
                _2760 = frontier_phi_61_pred;
                _2770 = frontier_phi_61_pred_1;
                _2768 = frontier_phi_61_pred_2;
                _2766 = frontier_phi_61_pred_3;
                _2764 = frontier_phi_61_pred_4;
                _2762 = frontier_phi_61_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2760;
                    _2904 = _2762;
                    _2905 = _2764;
                    _2906 = _2766;
                    _2907 = _2768;
                    _2908 = _2770;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
        }
        uvec4 _2773 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2774 = _2773.z;
        uint _2776 = (_2774 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2776) & _2658) == 0u)
        {
            _2871 = _2759;
            _2873 = _2761;
            _2875 = _2763;
            _2877 = _2765;
            _2879 = _2767;
            _2881 = _2769;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
            float _2897 = _2896 * _2612;
            float _2898 = _2896 * _2613;
            float _2899 = _2896 * _2614;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2776 < ((_2774 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3010 = _2759;
                float _3011 = _2761;
                float _3012 = _2763;
                float _3013 = _2765;
                float _3014 = _2767;
                float _3015 = _2769;
                uint _3016 = _2776;
                uint _3025;
                bool _3026;
                for (;;)
                {
                    _3025 = texelFetch(g_lightClassification, int((((_2652 << 5u) + (_2638 << 9u)) + (_3016 << 2u)) >> 2u)).x;
                    _3026 = _3025 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3026)
                    {
                        frontier_phi_67_pred = _3013;
                        frontier_phi_67_pred_1 = _3014;
                        frontier_phi_67_pred_2 = _3015;
                        frontier_phi_67_pred_3 = _3012;
                        frontier_phi_67_pred_4 = _3011;
                        frontier_phi_67_pred_5 = _3010;
                    }
                    else
                    {
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        float _3225 = _3012;
                        float _3226 = _3013;
                        float _3227 = _3014;
                        float _3228 = _3015;
                        uint _3229 = _3025;
                        uint _3230;
                        vec4 _3255;
                        float _3256;
                        vec4 _3271;
                        vec3 _3283;
                        vec4 _3298;
                        vec4 _3313;
                        float _3359;
                        bool _3360;
                        for (;;)
                        {
                            uint _3240 = ((_3016 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3229));
                            _3230 = (_3229 + 4294967295u) & _3229;
                            uint _3242 = _3240 * 40u;
                            _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3256 = _3255.w;
                            uint _3258 = (_3240 * 40u) + 4u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3240 * 40u) + 8u;
                            _3283 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x));
                            uint _3285 = (_3240 * 40u) + 16u;
                            _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3300 = (_3240 * 40u) + 20u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3240 * 40u) + 24u;
                            vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3334 = (_3240 * 40u) + 28u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3359 = fma(_2614, _3347.z, fma(_2613, _3347.y, _3347.x * _2612)) + _3347.w;
                            _3360 = !((fma(_2614, _3328.z, fma(_2613, _3328.y, _3328.x * _2612)) + _3328.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3360)
                            {
                                float _3387 = _3255.x - _2612;
                                float _3388 = _3255.y - _2613;
                                float _3389 = _3255.z - _2614;
                                float _3390 = dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389));
                                float _3393 = inversesqrt(_3390);
                                float _3394 = _3393 * _3387;
                                float _3395 = _3393 * _3388;
                                float _3396 = _3393 * _3389;
                                float _3400 = 1.0 - (_3390 / (_3256 * _3256));
                                float _4534 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3401 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3405 = sqrt(_3390) * _3271.w;
                                float _3407 = 1.39999997615814208984375 / (_3405 + 1.39999997615814208984375);
                                float _3408 = _3407 * _3407;
                                float _3411 = ((1.0 - _3408) * dot(vec3(_3394, _3395, _3396), vec3(_917, _920, _923))) + _3408;
                                float _3414 = _3405 * _3405;
                                float _3418 = (fma(_2614, _3298.z, fma(_2613, _3298.y, _3298.x * _2612)) + _3298.w) / _3359;
                                float _3419 = (fma(_2614, _3313.z, fma(_2613, _3313.y, _3313.x * _2612)) + _3313.w) / _3359;
                                float _3423 = 1.0 - dot(vec2(_3418, _3419), vec2(_3418, _3419));
                                float _4550 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3425 = _3424 * (((isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))) * _3401) / ((_3414 * 0.699999988079071044921875) + 1.0));
                                float _3437 = exp2(log2(1.0 / ((_3414 * 3.5) + 5.0)) * 0.25);
                                float _3438 = 1.0 - _977;
                                float _3445 = sqrt(1.0 - ((1.0 - (_3438 * _3438)) * (1.0 - (_3437 * _3437))));
                                float _3446 = _3445 * _3445;
                                float _3447 = _3446 * _3446;
                                float _3448 = _3394 - _2897;
                                float _3449 = _3395 - _2898;
                                float _3450 = _3396 - _2899;
                                float _3454 = inversesqrt(dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450)));
                                float _3458 = dot(vec3(_917, _920, _923), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4561 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3461 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3462 = dot(vec3(_917, _920, _923), vec3(_3454 * _3448, _3454 * _3449, _3454 * _3450));
                                float _4572 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3469 = ((_3465 * _3465) * (_3447 + (-1.0))) + 1.0;
                                float _3470 = _3407 * _3446;
                                float _3471 = _3470 * _3470;
                                float _3477 = ((1.0 - _3471) * dot(vec3(_917, _920, _923), vec3(_3394, _3395, _3396))) + _3471;
                                float _4583 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3478 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3479 = 1.0 - _3446;
                                float _3489 = (0.5 / (((_3478 * ((_3461 * _3479) + _3446)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3446) * _3461))) * _3478;
                                float _4594 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3499 = (_3424 * _3401) * (((_3447 * 3.1415927410125732421875) * (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) / ((_3469 * _3469) * ((_3414 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3499 * _3283.x;
                                frontier_phi_73_pred_1 = _3499 * _3283.y;
                                frontier_phi_73_pred_2 = _3425 * _3271.z;
                                frontier_phi_73_pred_3 = _3425 * _3271.y;
                                frontier_phi_73_pred_4 = _3425 * _3271.x;
                                frontier_phi_73_pred_5 = _3499 * _3283.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3503 = frontier_phi_73_pred;
                            _3504 = frontier_phi_73_pred_1;
                            _3508 = frontier_phi_73_pred_2;
                            _3507 = frontier_phi_73_pred_3;
                            _3506 = frontier_phi_73_pred_4;
                            _3505 = frontier_phi_73_pred_5;
                            _3213 = _3506 + _3226;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            _3210 = _3503 + _3223;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            if (_3230 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3230;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3213;
                        frontier_phi_67_pred_1 = _3214;
                        frontier_phi_67_pred_2 = _3215;
                        frontier_phi_67_pred_3 = _3212;
                        frontier_phi_67_pred_4 = _3211;
                        frontier_phi_67_pred_5 = _3210;
                    }
                    _2878 = frontier_phi_67_pred;
                    _2880 = frontier_phi_67_pred_1;
                    _2882 = frontier_phi_67_pred_2;
                    _2876 = frontier_phi_67_pred_3;
                    _2874 = frontier_phi_67_pred_4;
                    _2872 = frontier_phi_67_pred_5;
                    uint _3017 = _3016 + 1u;
                    if (_3017 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3010 = _2872;
                        _3011 = _2874;
                        _3012 = _2876;
                        _3013 = _2878;
                        _3014 = _2880;
                        _3015 = _2882;
                        _3016 = _3017;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2880;
                frontier_phi_55_56_ladder_1 = _2882;
                frontier_phi_55_56_ladder_2 = _2878;
                frontier_phi_55_56_ladder_3 = _2876;
                frontier_phi_55_56_ladder_4 = _2874;
                frontier_phi_55_56_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_55_56_ladder = _2767;
                frontier_phi_55_56_ladder_1 = _2769;
                frontier_phi_55_56_ladder_2 = _2765;
                frontier_phi_55_56_ladder_3 = _2763;
                frontier_phi_55_56_ladder_4 = _2761;
                frontier_phi_55_56_ladder_5 = _2759;
            }
            _2871 = frontier_phi_55_56_ladder_5;
            _2873 = frontier_phi_55_56_ladder_4;
            _2875 = frontier_phi_55_56_ladder_3;
            _2877 = frontier_phi_55_56_ladder_2;
            _2879 = frontier_phi_55_56_ladder;
            _2881 = frontier_phi_55_56_ladder_1;
        }
        float _2886 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2671 = (_2886 * _2877) + _2126;
        _2673 = (_2886 * _2879) + _2128;
        _2675 = (_2886 * _2881) + _2130;
        _2677 = ((_2871 * 0.039999999105930328369140625) * _2886) + _2456;
        _2679 = ((_2873 * 0.039999999105930328369140625) * _2886) + _2458;
        _2681 = ((_2875 * 0.039999999105930328369140625) * _2886) + _2460;
    }
    else
    {
        _2671 = _2126;
        _2673 = _2128;
        _2675 = _2130;
        _2677 = _2456;
        _2679 = _2458;
        _2681 = _2460;
    }
    float _4610 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4621 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4632 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    uint _2701 = _271 + 6u;
    float _2709 = _898 / cbSceneParam._m0[86u].x;
    float _2710 = _899 / cbSceneParam._m0[86u].y;
    vec4 _2724 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2726 = _2724.x;
    float _2727 = _2724.y;
    float _2728 = _2724.z;
    float _2729 = _2724.w;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2784 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2785 = _2784 / _832;
        float _2796 = _2785 * _883;
        float _2797 = _884 * _2785;
        float _2798 = (-0.0) - _2797;
        float _2799 = _2785 * _885;
        float _2801 = (cbSceneParam._m0[77u].w * _2798) / _2784;
        float _2802 = _2801 + cbSceneParam._m0[79u].w;
        float _2803 = cbSceneParam._m0[79u].w - _2797;
        float _2809 = sqrt(((_2796 * _2796) + (_2797 * _2797)) + (_2799 * _2799));
        float _2812 = (1.0 - (cbSceneParam._m0[77u].w / _2784)) * _2809;
        float _2817 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2819 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2972;
        if (abs((_2798 - _2801) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2972 = ((((_2802 > 0.0) ? exp2(_2817 * _2802) : (2.0 - exp2(_2819 * _2802))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2812;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : max(_2802, _2803));
            float _2934 = isnan(_2803) ? _2802 : (isnan(_2802) ? _2803 : min(_2802, _2803));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _2972 = ((abs(_2809 / _2798) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2817 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2817 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2819 * _2943) - exp2(_2819 * _2944)) * _2932))) + (_2812 * cbSceneParam._m0[80u].z);
        }
        vec4 _2974 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2709, _2710, 1.0), 0.0);
        float _2983 = exp2((_2972 * (-1.44269502162933349609375)) * (1.0 - _2974.w));
        float _2984 = log2(_2983);
        float _3000 = log2(_2729);
        _2821 = (exp2(_3000 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].x)) * _2974.x) / cbSceneParam._m0[78u].x)) + _2726;
        _2823 = (exp2(_3000 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].y)) * _2974.y) / cbSceneParam._m0[78u].y)) + _2727;
        _2825 = (exp2(_3000 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2984 * cbSceneParam._m0[78u].z)) * _2974.z) / cbSceneParam._m0[78u].z)) + _2728;
        _2827 = _2983 * _2729;
    }
    else
    {
        _2821 = _2726;
        _2823 = _2727;
        _2825 = _2728;
        _2827 = _2729;
    }
    float _2839 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2840 = _2839 == 3.0;
    float _2841 = log2(_2827);
    float _2848 = exp2(_2841 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2671 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _961))) + ((_2677 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _2849 = exp2(_2841 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2673 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _961))) + ((_2679 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _2850 = exp2(_2841 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2675 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _961))) + ((_2681 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _2859 = (_2839 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2859 * (_2840 ? _2848 : (_2848 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.y = _2859 * (_2840 ? _2849 : (_2849 + (cbSceneParam._m0[72u].w * _2823)));
    SV_Target.z = _2859 * (_2840 ? _2850 : (_2850 + (cbSceneParam._m0[72u].w * _2825)));
    SV_Target.w = cbInstanceData._m0[_2701].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2701].w;
}


