#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1210;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3514 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3525 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3536 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3547 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) + _428;
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _279) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _280) + cbTextureTilingScale._m0[14u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _522 = _520.x;
    float _523 = _520.y;
    float _524 = _520.z;
    float _533 = ((_503.z - _524) * _409) + _524;
    float _536 = ((((_503.x - _522) * _409) + _522) * 2.0) + (-1.0);
    float _537 = ((((_503.y - _523) * _409) + _523) * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3558 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))));
    float _546 = _536 + ((((_476.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _547 = _537 + ((((_476.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _550 = fma(_543, _227, fma(_547, _234, _546 * _220));
    float _553 = fma(_543, _228, fma(_547, _235, _546 * _221));
    float _556 = fma(_543, _229, fma(_547, _236, _546 * _222));
    float _560 = inversesqrt(dot(vec3(_550, _553, _556), vec3(_550, _553, _556)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _604 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _606 = _604.x;
    float _607 = 1.0 - _606;
    float _613 = (cbMtdParam._m0[19u].x + dot(vec4(_560 * _550, _560 * _553, _560 * _556, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_606 - _607) * cbMtdParam._m0[24u].z) + _607) * cbMtdParam._m0[21u].z);
    float _3569 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _621 = (_614 * ((_456.x * cbMtdParam._m0[18u].x) - _435)) + _435;
    float _622 = (_614 * ((_456.y * cbMtdParam._m0[18u].y) - _436)) + _436;
    float _623 = (_614 * ((_456.z * cbMtdParam._m0[18u].z) - _437)) + _437;
    float _628 = (((_476.z - _533) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _533;
    vec4 _641 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _648 = (_641.x * 2.0) + (-1.0);
    float _649 = (_641.y * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3580 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _658 = ((_641.z - _628) * _614) + _628;
    float _668 = ((sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) - _543) * _614) + _543;
    float _671 = (((_648 - _546) * _614) + _546) + (cbMtdParam._m0[21u].x * _546);
    float _672 = (((_649 - _547) * _614) + _547) + (cbMtdParam._m0[21u].x * _547);
    float _674 = cbMtdParam._m0[22u].x + _576.w;
    float _677 = fma(_668, _227, fma(_672, _234, _671 * _220));
    float _680 = fma(_668, _228, fma(_672, _235, _671 * _221));
    float _683 = fma(_668, _229, fma(_672, _236, _671 * _222));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3591 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _691 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3613 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3624 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3635 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _709 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _761 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _751);
    float _762 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _751);
    float _763 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _751);
    float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
    float _768 = _761 * _767;
    float _769 = _762 * _767;
    float _770 = _763 * _767;
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _798 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _801 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _815 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_815].z;
    float _3646 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _835 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _839 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * TEXCOORD_5.w) * _835.x;
    float _840 = dot(vec3(_688, _689, _690), vec3(_768, _769, _770));
    float _843 = _840 * 2.0;
    float _847 = (_843 * _688) - _768;
    float _848 = (_843 * _689) - _769;
    float _849 = (_843 * _690) - _770;
    float _853 = abs(dot(vec3(_768, _769, _770), vec3(_688, _689, _690)));
    float _3679 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _855 = sqrt(_691);
    float _868 = exp2((_855 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_855 * 3.0));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1209;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _934 = fma(_908, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900));
        float _938 = fma(_908, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900));
        float _942 = fma(_908, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900));
        float _967 = _900 + _688;
        float _968 = _904 + _689;
        float _969 = _908 + _690;
        float _979 = fma(_969, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _967)) - _934;
        float _980 = fma(_969, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _967)) - _938;
        float _981 = fma(_969, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _967)) - _942;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_934 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_938 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[34u].z) + ((((((_942 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1037 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1003.x + (-0.5));
        float _1039 = _1037 * (_1003.y + (-0.5));
        float _1040 = _1037 * (_1003.z + (-0.5));
        float _1047 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1010.x + (-0.5));
        float _1049 = _1047 * (_1010.y + (-0.5));
        float _1050 = _1047 * (_1010.z + (-0.5));
        float _1057 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1017.x + (-0.5));
        float _1059 = _1057 * (_1017.y + (-0.5));
        float _1060 = _1057 * (_1017.z + (-0.5));
        float _1067 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1024.x + (-0.5));
        float _1069 = _1067 * (_1024.y + (-0.5));
        float _1070 = _1067 * (_1024.z + (-0.5));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = _1038 * 0.5;
        float _1075 = _1048 * 0.5;
        float _1076 = _1058 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1091 = (dot(vec3(_688, _689, _690), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1101 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3727 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1103 + 1.0))) + _1108) * _1071;
        float _1118 = _1039 * 0.5;
        float _1119 = _1049 * 0.5;
        float _1120 = _1059 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_688, _689, _690), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3760 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1145 + 1.0))) + _1150) * _1072;
        float _1160 = _1040 * 0.5;
        float _1161 = _1050 * 0.5;
        float _1162 = _1060 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_688, _689, _690), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3793 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1187 + 1.0))) + _1192) * _1073;
        _1209 = _1040;
        _1211 = _1039;
        _1212 = _1038;
        _1213 = _1050;
        _1214 = _1049;
        _1215 = _1048;
        _1216 = _1060;
        _1217 = _1059;
        _1218 = _1058;
        _1219 = _1073;
        _1220 = _1072;
        _1221 = _1071;
        _1222 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
    }
    else
    {
        _1209 = _1210;
        _1211 = _1210;
        _1212 = _1210;
        _1213 = _1210;
        _1214 = _1210;
        _1215 = _1210;
        _1216 = _1210;
        _1217 = _1210;
        _1218 = _1210;
        _1219 = _1210;
        _1220 = _1210;
        _1221 = _1210;
        _1222 = 0.0;
        _1223 = 0.0;
        _1224 = 0.0;
    }
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1249 = fma(_908, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900));
        float _1253 = fma(_908, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900));
        float _1257 = fma(_908, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900));
        float _1280 = _900 + _688;
        float _1281 = _904 + _689;
        float _1282 = _908 + _690;
        float _1292 = fma(_1282, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1280)) - _1249;
        float _1293 = fma(_1282, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1280)) - _1253;
        float _1294 = fma(_1282, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1280)) - _1257;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1311 = ((_1298 * _1292) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1249 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1293) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1253 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1298 * _1294) / cbModelParam._m0[35u].z) + ((((((_1257 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1311, _1312, _1313), 0.0);
        float _1348 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1315.x + (-0.5));
        float _1350 = _1348 * (_1315.y + (-0.5));
        float _1351 = _1348 * (_1315.z + (-0.5));
        float _1358 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1322.x + (-0.5));
        float _1360 = _1358 * (_1322.y + (-0.5));
        float _1361 = _1358 * (_1322.z + (-0.5));
        float _1368 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1329.x + (-0.5));
        float _1370 = _1368 * (_1329.y + (-0.5));
        float _1371 = _1368 * (_1329.z + (-0.5));
        float _1378 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1336.x + (-0.5));
        float _1380 = _1378 * (_1336.y + (-0.5));
        float _1381 = _1378 * (_1336.z + (-0.5));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = _1349 * 0.5;
        float _1386 = _1359 * 0.5;
        float _1387 = _1369 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_688, _689, _690), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3856 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1412 + 1.0))) + _1417) * _1382;
        float _1427 = _1350 * 0.5;
        float _1428 = _1360 * 0.5;
        float _1429 = _1370 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_688, _689, _690), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _3889 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1454 + 1.0))) + _1459) * _1383;
        float _1469 = _1351 * 0.5;
        float _1470 = _1361 * 0.5;
        float _1471 = _1371 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_688, _689, _690), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _3922 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1496 + 1.0))) + _1501) * _1384;
        _1518 = _1351;
        _1519 = _1350;
        _1520 = _1349;
        _1521 = _1361;
        _1522 = _1360;
        _1523 = _1359;
        _1524 = _1371;
        _1525 = _1370;
        _1526 = _1369;
        _1527 = _1384;
        _1528 = _1383;
        _1529 = _1382;
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1531 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
    }
    else
    {
        _1518 = _1210;
        _1519 = _1210;
        _1520 = _1210;
        _1521 = _1210;
        _1522 = _1210;
        _1523 = _1210;
        _1524 = _1210;
        _1525 = _1210;
        _1526 = _1210;
        _1527 = _1210;
        _1528 = _1210;
        _1529 = _1210;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1222)) + _1222;
    float _1543 = (cbModelParam._m0[1u].x * (_1531 - _1223)) + _1223;
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1224)) + _1224;
    float _1565 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1543, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1543, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1543, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1542));
    float _1586 = _847 * 0.5;
    float _1587 = _848 * 0.5;
    float _1588 = _849 * 0.5;
    float _1589 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1592 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1519, _1522, _1525, _1528));
    float _1595 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1629;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1602 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1209, _1213, _1216, _1219));
        float _1606 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1211, _1214, _1217, _1220));
        float _1610 = dot(vec4(_1586, _1587, _1588, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1617 = dot(vec4(cbModelParam._m0[39u]), vec4(_1586, _1587, _1588, 1.0));
        _1629 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1617) ? 0.0 : (isnan(0.0) ? _1617 : max(0.0, _1617))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1629 = 1.0;
    }
    float _1640;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1631 = dot(vec4(cbModelParam._m0[40u]), vec4(_1586, _1587, _1588, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1644 = (_1640 * cbModelParam._m0[1u].x) + (_1629 * (1.0 - cbModelParam._m0[1u].x));
    float _1654 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1654 : min(cbModelParam._m0[25u].z, _1654));
    float _1735;
    float _1737;
    float _1739;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1702 = fma(_908, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900)) + cbModelParam._m0[13u].w;
        float _1706 = fma(_908, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900)) + cbModelParam._m0[14u].w;
        float _1710 = fma(_908, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900)) + cbModelParam._m0[15u].w;
        float _1713 = fma(_849, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847));
        float _1716 = fma(_849, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847));
        float _1719 = fma(_849, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847));
        float _1747;
        if (_1713 > 0.0)
        {
            _1747 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1747 = frontier_phi_14_12_ladder;
        }
        float _1947;
        if (_1716 > 0.0)
        {
            _1947 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1947 = frontier_phi_23_19_ladder;
        }
        float _2190;
        if (_1719 > 0.0)
        {
            _2190 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2190 = frontier_phi_35_30_ladder;
        }
        float _2192 = isnan(_1947) ? _1747 : (isnan(_1747) ? _1947 : min(_1747, _1947));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1713) + _1702;
        float _2198 = (_2193 * _1716) + _1706;
        float _2199 = (_2193 * _1719) + _1710;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2200;
        float _2204 = _2200 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 > _2204) || ((_2198 < _2202) || ((_2197 < _2202) || (_2197 > _2204))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2199, cbModelParam._m0[9u].z, fma(_2198, cbModelParam._m0[9u].y, _2197 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2199, cbModelParam._m0[10u].z, fma(_2198, cbModelParam._m0[10u].y, _2197 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2199, cbModelParam._m0[11u].z, fma(_2198, cbModelParam._m0[11u].y, _2197 * cbModelParam._m0[11u].x))), _1655);
            frontier_phi_13_35_ladder = _2323.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2323.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2323.x * cbModelParam._m0[1u].y;
        }
        _1735 = frontier_phi_13_35_ladder_2;
        _1737 = frontier_phi_13_35_ladder_1;
        _1739 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_847, _848, _849), _1655);
        _1735 = _1723.x * cbModelParam._m0[1u].y;
        _1737 = _1723.y * cbModelParam._m0[1u].y;
        _1739 = _1723.z * cbModelParam._m0[1u].y;
    }
    float _1743 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1743 : min(cbModelParam._m0[25u].w, _1743));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1797 = fma(_908, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900)) + cbModelParam._m0[21u].w;
        float _1801 = fma(_908, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900)) + cbModelParam._m0[22u].w;
        float _1805 = fma(_908, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900)) + cbModelParam._m0[23u].w;
        float _1808 = fma(_849, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847));
        float _1811 = fma(_849, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847));
        float _1814 = fma(_849, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847));
        float _1952;
        if (_1808 > 0.0)
        {
            _1952 = abs((1.0 - _1797) / _1808);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1797 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1952 = frontier_phi_25_21_ladder;
        }
        float _2217;
        if (_1811 > 0.0)
        {
            _2217 = abs((1.0 - _1801) / _1811);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1801 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2217 = frontier_phi_37_32_ladder;
        }
        float _2422;
        if (_1814 > 0.0)
        {
            _2422 = abs((1.0 - _1805) / _1814);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1805 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2422 = frontier_phi_46_43_ladder;
        }
        float _2424 = isnan(_2217) ? _1952 : (isnan(_1952) ? _2217 : min(_1952, _2217));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1808) + _1797;
        float _2430 = (_2425 * _1811) + _1801;
        float _2431 = (_2425 * _1814) + _1805;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2432;
        float _2435 = _2432 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2431 > _2435) || ((_2431 < _2433) || ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 < _2433) || (_2429 > _2435))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2431, cbModelParam._m0[17u].z, fma(_2430, cbModelParam._m0[17u].y, _2429 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2431, cbModelParam._m0[18u].z, fma(_2430, cbModelParam._m0[18u].y, _2429 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2431, cbModelParam._m0[19u].z, fma(_2430, cbModelParam._m0[19u].y, _2429 * cbModelParam._m0[19u].x))), _1744);
            frontier_phi_22_46_ladder = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2630.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2630.x * cbModelParam._m0[1u].z;
        }
        _1833 = frontier_phi_22_46_ladder_2;
        _1835 = frontier_phi_22_46_ladder_1;
        _1837 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_847, _848, _849), _1744);
        _1833 = _1817.x * cbModelParam._m0[1u].z;
        _1835 = _1817.y * cbModelParam._m0[1u].z;
        _1837 = _1817.z * cbModelParam._m0[1u].z;
    }
    float _1849 = ((((1.0 - _868) * ((_855 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_868 * _855)) * _839;
    float _1850 = _1849 * ((cbModelParam._m0[1u].w * (_1833 - _1735)) + _1735);
    float _1851 = _1849 * ((cbModelParam._m0[1u].w * (_1835 - _1737)) + _1737);
    float _1852 = _1849 * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, _1850 * cbSceneParam._m0[91u].x));
    uvec4 _1871 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1873 = _1871.x * 14u;
    uint _1874 = _1873 + 13u;
    float _1881 = _839 + (-1.0);
    float _1886 = (cbLight._m0[_1874].x * _1881) + 1.0;
    float _1887 = (cbLight._m0[_1874].y * _1881) + 1.0;
    float _1888 = (cbLight._m0[_1874].z * _1881) + 1.0;
    float _1889 = (cbLight._m0[_1874].w * _1881) + 1.0;
    uint _1890 = _1873 + 5u;
    float _1896 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
    uint _1900 = _1873 + 4u;
    float _1906 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1910 = _1873 | 1u;
    float _1921 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_688, _689, _690));
    float _1924 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_688, _689, _690));
    float _4058 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _4069 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1929 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1931 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1938 = ((cbLight._m0[_1890].x * _1896) * _1931) + ((cbLight._m0[_1900].x * _1906) * _1929);
    float _1939 = ((_1896 * cbLight._m0[_1890].y) * _1931) + ((_1906 * cbLight._m0[_1900].y) * _1929);
    float _1940 = ((_1896 * cbLight._m0[_1890].z) * _1931) + ((_1906 * cbLight._m0[_1900].z) * _1929);
    uvec4 _1944 = floatBitsToUint(cbLight._m0[_1873 + 12u]);
    bool _1946 = _1944.x == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1946)
    {
        _1957 = _1938;
        _1959 = _1939;
        _1961 = _1940;
    }
    else
    {
        uint _1965 = _1873 + 6u;
        float _1981 = (dot(vec3(cbLight._m0[_1873 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _4080 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1984 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _1957 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1938;
        _1959 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1939;
        _1961 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1940;
    }
    bool _1964 = _1944.y == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1964)
    {
        _2002 = _1957;
        _2004 = _1959;
        _2006 = _1961;
    }
    else
    {
        uint _2161 = _1873 + 7u;
        float _2177 = (dot(vec3(cbLight._m0[_1873 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _4096 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2180 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2002 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _1957;
        _2004 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _1959;
        _2006 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _1961;
    }
    uint _2009 = _1873 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1873].w)) * _691) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1873].x + _768;
    float _2025 = cbLight._m0[_1873].y + _769;
    float _2026 = cbLight._m0[_1873].z + _770;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1873].xyz));
    float _4112 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2038 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2039 = dot(vec3(_688, _689, _690), vec3(_2031, _2032, _2033));
    float _4134 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1873].xyz), vec3(_2031, _2032, _2033));
    float _4145 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2023;
    float _2074 = (0.5 / (((_2038 * ((_2037 * _2063) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2063) + _2023) * _2037))) * _2037;
    float _4156 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2087 = _1873 + 9u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _691) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1910].x + _768;
    float _2101 = cbLight._m0[_1910].y + _769;
    float _2102 = cbLight._m0[_1910].z + _770;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1910].xyz));
    float _4167 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2114 = dot(vec3(_688, _689, _690), vec3(_2107, _2108, _2109));
    float _4178 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2107, _2108, _2109));
    float _4189 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2099 * _2099;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2136 = 1.0 - _2099;
    float _2146 = (0.5 / (((_2038 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2136) + _2099) * _2113))) * _2113;
    float _4200 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2158 = (((_2135 * cbLight._m0[_2087].x) * _2148) * _1896) + (((_2062 * cbLight._m0[_2009].x) * _2076) * _1906);
    float _2159 = (((_2135 * cbLight._m0[_2087].y) * _2148) * _1896) + (((_2062 * cbLight._m0[_2009].y) * _2076) * _1906);
    float _2160 = (((_2135 * cbLight._m0[_2087].z) * _2148) * _1896) + (((_2062 * cbLight._m0[_2009].z) * _2076) * _1906);
    float _2222;
    float _2224;
    float _2226;
    if (_1946)
    {
        _2222 = _2158;
        _2224 = _2159;
        _2226 = _2160;
    }
    else
    {
        uint _2228 = _1873 + 2u;
        uint _2232 = _1873 + 10u;
        float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _691) * 0.949999988079071044921875);
        float _2247 = _2246 * _2246;
        float _2248 = cbLight._m0[_2228].x + _768;
        float _2249 = cbLight._m0[_2228].y + _769;
        float _2250 = cbLight._m0[_2228].z + _770;
        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
        float _2255 = _2254 * _2248;
        float _2256 = _2254 * _2249;
        float _2257 = _2254 * _2250;
        float _2258 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2228].xyz));
        float _4211 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2262 = dot(vec3(_688, _689, _690), vec3(_2255, _2256, _2257));
        float _4222 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2266 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2255, _2256, _2257));
        float _4233 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2270 = _2247 * _2247;
        float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
        float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2284 = 1.0 - _2247;
        float _2294 = (0.5 / (((_2038 * ((_2261 * _2284) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2284) + _2247) * _2261))) * _2261;
        float _4244 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2296 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
        float _2297 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2222 = (((_2283 * cbLight._m0[_2232].x) * _2296) * _2297) + _2158;
        _2224 = (((_2283 * cbLight._m0[_2232].y) * _2296) * _2297) + _2159;
        _2226 = (((_2283 * cbLight._m0[_2232].z) * _2296) * _2297) + _2160;
    }
    float _2332;
    float _2334;
    float _2336;
    if (_1964)
    {
        _2332 = _2222;
        _2334 = _2224;
        _2336 = _2226;
    }
    else
    {
        uint _2343 = _1873 + 3u;
        uint _2347 = _1873 + 11u;
        float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2343].w)) * _691) * 0.949999988079071044921875);
        float _2362 = _2361 * _2361;
        float _2363 = cbLight._m0[_2343].x + _768;
        float _2364 = cbLight._m0[_2343].y + _769;
        float _2365 = cbLight._m0[_2343].z + _770;
        float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
        float _2370 = _2369 * _2363;
        float _2371 = _2369 * _2364;
        float _2372 = _2369 * _2365;
        float _2373 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2343].xyz));
        float _4260 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2377 = dot(vec3(_688, _689, _690), vec3(_2370, _2371, _2372));
        float _4271 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2381 = dot(vec3(cbLight._m0[_2343].xyz), vec3(_2370, _2371, _2372));
        float _4282 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2385 = _2362 * _2362;
        float _2389 = ((_2380 * _2380) * (_2385 + (-1.0))) + 1.0;
        float _2398 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2399 = 1.0 - _2362;
        float _2409 = (0.5 / (((_2038 * ((_2376 * _2399) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2399) + _2362) * _2376))) * _2376;
        float _4293 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2385 / ((_2389 * _2389) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1889 : (isnan(_1889) ? 1.0 : min(_1889, 1.0));
        _2332 = (((_2398 * cbLight._m0[_2347].x) * _2411) * _2412) + _2222;
        _2334 = (((_2398 * cbLight._m0[_2347].y) * _2411) * _2412) + _2224;
        _2336 = (((_2398 * cbLight._m0[_2347].z) * _2411) * _2412) + _2226;
    }
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_1871.y == 0u)
    {
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2487;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2487;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2487;
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.x;
        uint _2514 = uint((float(_2502.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2503))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2503)));
        float _2524 = (log2(_2490 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        uint _2528 = uint(isnan(14.0) ? _2525 : (isnan(_2525) ? 14.0 : min(_2525, 14.0)));
        uvec4 _2533 = texelFetch(g_lightClusterGridBuffer, int(((_2528 << 2u) + (_2514 << 6u)) >> 2u));
        uint _2534 = _2533.x;
        uint _2535 = _2502.z;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((((1u << ((_2535 >> 4u) & 15u)) + 4294967295u) & _2534) == 0u) || ((_2535 & 240u) == 0u))
        {
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
        }
        else
        {
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2796)
                {
                    frontier_phi_61_pred = _2780;
                    frontier_phi_61_pred_1 = _2785;
                    frontier_phi_61_pred_2 = _2784;
                    frontier_phi_61_pred_3 = _2783;
                    frontier_phi_61_pred_4 = _2782;
                    frontier_phi_61_pred_5 = _2781;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2795;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2786 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _2488;
                        float _2971 = _2930.y - _2489;
                        float _2972 = _2930.z - _2490;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_795, _798, _801), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4319 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _2488;
                        float _3006 = (-0.0) - _2489;
                        float _3007 = (-0.0) - _2490;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3022 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3023 = 1.0 - _855;
                        float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                        float _3031 = _3030 * _3030;
                        float _3032 = _3031 * _3031;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3043 = dot(vec3(_795, _798, _801), vec3(_3012, _3013, _3014));
                        float _4335 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3047 = dot(vec3(_795, _798, _801), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                        float _4346 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                        float _3055 = _2990 * _3031;
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _2980) + _3056;
                        float _4357 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3061 = 1.0 - _3031;
                        float _3071 = (0.5 / (((_3060 * ((_3046 * _3061) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3031) * _3046))) * _3060;
                        float _4368 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3082 = (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3054 * _3054) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2839 = (_3001 * _2949.x) + _2907;
                        _2840 = (_3001 * _2949.y) + _2908;
                        _2841 = (_3001 * _2949.z) + _2909;
                        _2836 = (_3082 * _2966.x) + _2904;
                        _2837 = (_3082 * _2966.y) + _2905;
                        _2838 = (_3082 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_61_pred = _2836;
                    frontier_phi_61_pred_1 = _2841;
                    frontier_phi_61_pred_2 = _2840;
                    frontier_phi_61_pred_3 = _2839;
                    frontier_phi_61_pred_4 = _2838;
                    frontier_phi_61_pred_5 = _2837;
                }
                _2636 = frontier_phi_61_pred;
                _2646 = frontier_phi_61_pred_1;
                _2644 = frontier_phi_61_pred_2;
                _2642 = frontier_phi_61_pred_3;
                _2640 = frontier_phi_61_pred_4;
                _2638 = frontier_phi_61_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2636;
                    _2781 = _2638;
                    _2782 = _2640;
                    _2783 = _2642;
                    _2784 = _2644;
                    _2785 = _2646;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
        }
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.z;
        uint _2652 = (_2650 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2652) & _2534) == 0u)
        {
            _2748 = _2635;
            _2750 = _2637;
            _2752 = _2639;
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
            float _2774 = _2773 * _2488;
            float _2775 = _2773 * _2489;
            float _2776 = _2773 * _2490;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2652 < ((_2650 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2887 = _2635;
                float _2888 = _2637;
                float _2889 = _2639;
                float _2890 = _2641;
                float _2891 = _2643;
                float _2892 = _2645;
                uint _2893 = _2652;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2903)
                    {
                        frontier_phi_67_pred = _2890;
                        frontier_phi_67_pred_1 = _2891;
                        frontier_phi_67_pred_2 = _2892;
                        frontier_phi_67_pred_3 = _2889;
                        frontier_phi_67_pred_4 = _2888;
                        frontier_phi_67_pred_5 = _2887;
                    }
                    else
                    {
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        uint _3106 = _2902;
                        uint _3107;
                        vec4 _3132;
                        float _3133;
                        vec4 _3148;
                        vec3 _3160;
                        vec4 _3175;
                        vec4 _3190;
                        float _3236;
                        bool _3237;
                        for (;;)
                        {
                            uint _3117 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3106));
                            _3107 = (_3106 + 4294967295u) & _3106;
                            uint _3119 = _3117 * 40u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3133 = _3132.w;
                            uint _3135 = (_3117 * 40u) + 4u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3117 * 40u) + 8u;
                            _3160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x));
                            uint _3162 = (_3117 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3177 = (_3117 * 40u) + 20u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3117 * 40u) + 24u;
                            vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3211 = (_3117 * 40u) + 28u;
                            vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3236 = fma(_2490, _3224.z, fma(_2489, _3224.y, _3224.x * _2488)) + _3224.w;
                            _3237 = !((fma(_2490, _3205.z, fma(_2489, _3205.y, _3205.x * _2488)) + _3205.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3237)
                            {
                                float _3264 = _3132.x - _2488;
                                float _3265 = _3132.y - _2489;
                                float _3266 = _3132.z - _2490;
                                float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                                float _3270 = inversesqrt(_3267);
                                float _3271 = _3270 * _3264;
                                float _3272 = _3270 * _3265;
                                float _3273 = _3270 * _3266;
                                float _3277 = 1.0 - (_3267 / (_3133 * _3133));
                                float _4379 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3282 = sqrt(_3267) * _3148.w;
                                float _3284 = 1.39999997615814208984375 / (_3282 + 1.39999997615814208984375);
                                float _3285 = _3284 * _3284;
                                float _3288 = ((1.0 - _3285) * dot(vec3(_3271, _3272, _3273), vec3(_795, _798, _801))) + _3285;
                                float _3291 = _3282 * _3282;
                                float _3295 = (fma(_2490, _3175.z, fma(_2489, _3175.y, _3175.x * _2488)) + _3175.w) / _3236;
                                float _3296 = (fma(_2490, _3190.z, fma(_2489, _3190.y, _3190.x * _2488)) + _3190.w) / _3236;
                                float _3300 = 1.0 - dot(vec2(_3295, _3296), vec2(_3295, _3296));
                                float _4395 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3302 = _3301 * (((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3278) / ((_3291 * 0.699999988079071044921875) + 1.0));
                                float _3314 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                                float _3315 = 1.0 - _855;
                                float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                                float _3323 = _3322 * _3322;
                                float _3324 = _3323 * _3323;
                                float _3325 = _3271 - _2774;
                                float _3326 = _3272 - _2775;
                                float _3327 = _3273 - _2776;
                                float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                                float _3335 = dot(vec3(_795, _798, _801), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4406 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3339 = dot(vec3(_795, _798, _801), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                                float _4417 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3342 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                                float _3347 = _3284 * _3323;
                                float _3348 = _3347 * _3347;
                                float _3354 = ((1.0 - _3348) * dot(vec3(_795, _798, _801), vec3(_3271, _3272, _3273))) + _3348;
                                float _4428 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3356 = 1.0 - _3323;
                                float _3366 = (0.5 / (((_3355 * ((_3338 * _3356) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3323) * _3338))) * _3355;
                                float _4439 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3376 = (_3301 * _3278) * (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3346 * _3346) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3376 * _3160.x;
                                frontier_phi_73_pred_1 = _3376 * _3160.y;
                                frontier_phi_73_pred_2 = _3302 * _3148.z;
                                frontier_phi_73_pred_3 = _3302 * _3148.y;
                                frontier_phi_73_pred_4 = _3302 * _3148.x;
                                frontier_phi_73_pred_5 = _3376 * _3160.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3380 = frontier_phi_73_pred;
                            _3381 = frontier_phi_73_pred_1;
                            _3385 = frontier_phi_73_pred_2;
                            _3384 = frontier_phi_73_pred_3;
                            _3383 = frontier_phi_73_pred_4;
                            _3382 = frontier_phi_73_pred_5;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            if (_3107 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3107;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3090;
                        frontier_phi_67_pred_1 = _3091;
                        frontier_phi_67_pred_2 = _3092;
                        frontier_phi_67_pred_3 = _3089;
                        frontier_phi_67_pred_4 = _3088;
                        frontier_phi_67_pred_5 = _3087;
                    }
                    _2755 = frontier_phi_67_pred;
                    _2757 = frontier_phi_67_pred_1;
                    _2759 = frontier_phi_67_pred_2;
                    _2753 = frontier_phi_67_pred_3;
                    _2751 = frontier_phi_67_pred_4;
                    _2749 = frontier_phi_67_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2749;
                        _2888 = _2751;
                        _2889 = _2753;
                        _2890 = _2755;
                        _2891 = _2757;
                        _2892 = _2759;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2757;
                frontier_phi_55_56_ladder_1 = _2759;
                frontier_phi_55_56_ladder_2 = _2755;
                frontier_phi_55_56_ladder_3 = _2753;
                frontier_phi_55_56_ladder_4 = _2751;
                frontier_phi_55_56_ladder_5 = _2749;
            }
            else
            {
                frontier_phi_55_56_ladder = _2643;
                frontier_phi_55_56_ladder_1 = _2645;
                frontier_phi_55_56_ladder_2 = _2641;
                frontier_phi_55_56_ladder_3 = _2639;
                frontier_phi_55_56_ladder_4 = _2637;
                frontier_phi_55_56_ladder_5 = _2635;
            }
            _2748 = frontier_phi_55_56_ladder_5;
            _2750 = frontier_phi_55_56_ladder_4;
            _2752 = frontier_phi_55_56_ladder_3;
            _2754 = frontier_phi_55_56_ladder_2;
            _2756 = frontier_phi_55_56_ladder;
            _2758 = frontier_phi_55_56_ladder_1;
        }
        float _2763 = isnan(1.0) ? _839 : (isnan(_839) ? 1.0 : min(_839, 1.0));
        _2547 = (_2763 * _2754) + _2002;
        _2549 = (_2763 * _2756) + _2004;
        _2551 = (_2763 * _2758) + _2006;
        _2553 = ((_2748 * 0.039999999105930328369140625) * _2763) + _2332;
        _2555 = ((_2750 * 0.039999999105930328369140625) * _2763) + _2334;
        _2557 = ((_2752 * 0.039999999105930328369140625) * _2763) + _2336;
    }
    else
    {
        _2547 = _2002;
        _2549 = _2004;
        _2551 = _2006;
        _2553 = _2332;
        _2555 = _2334;
        _2557 = _2336;
    }
    float _4455 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4466 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4477 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    uint _2577 = _260 + 6u;
    float _2585 = _776 / cbSceneParam._m0[86u].x;
    float _2586 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2600 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2602 = _2600.x;
    float _2603 = _2600.y;
    float _2604 = _2600.z;
    float _2605 = _2600.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _2660 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _2661 = _2660 / _709;
        float _2672 = _2661 * _761;
        float _2673 = _762 * _2661;
        float _2674 = (-0.0) - _2673;
        float _2676 = _2661 * _763;
        float _2678 = (cbSceneParam._m0[77u].w * _2674) / _2660;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2673;
        float _2686 = sqrt(((_2672 * _2672) + (_2673 * _2673)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2660)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2674 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2811 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2849 = ((abs(_2686 / _2674) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2696 * _2820) - exp2(_2696 * _2821)) * _2809))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2605);
        _2698 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2602;
        _2700 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2603;
        _2702 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2604;
        _2704 = _2860 * _2605;
    }
    else
    {
        _2698 = _2602;
        _2700 = _2603;
        _2702 = _2604;
        _2704 = _2605;
    }
    float _2716 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2717 = _2716 == 3.0;
    float _2718 = log2(_2704);
    float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2547 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _839))) + ((_2553 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2549 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _839))) + ((_2555 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2551 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _839))) + ((_2557 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1644)) * cbPerFrame._m0[3u].x));
    float _2736 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2736 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.y = _2736 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.z = _2736 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.w = cbInstanceData._m0[_2577].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2577].w;
}


