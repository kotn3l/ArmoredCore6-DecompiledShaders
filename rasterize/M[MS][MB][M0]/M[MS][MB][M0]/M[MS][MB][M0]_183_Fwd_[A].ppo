#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1316;
float _3675;
float _3676;
float _3677;
float _3678;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3687 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3698 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3709 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _402 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _402) * cbMtdParam._m0[24u].x) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3720 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _427 = (_420 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _428 = (_420 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _429 = (_420 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _468 = _466.x;
    float _478 = dot(vec4(_468, _466.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _492 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_468 - _478) * cbMtdParam._m0[24u].x) + _478) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3731 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _500 = (_493 * ((_446.x * cbMtdParam._m0[13u].x) - _427)) + _427;
    float _501 = (_493 * ((_446.y * cbMtdParam._m0[13u].y) - _428)) + _428;
    float _502 = (_493 * ((_446.z * cbMtdParam._m0[13u].z) - _429)) + _429;
    float _506 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _500;
    float _509 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _501;
    float _512 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _502;
    float _519 = ((_500 - _506) * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) + _506;
    float _520 = ((_501 - _509) * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) + _509;
    float _521 = ((_502 - _512) * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) + _512;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    float _589 = ((_561.x - _580) * _420) + _580;
    float _590 = ((_561.y - _581) * _420) + _581;
    float _591 = ((_561.z - _582) * _420) + _582;
    vec4 _603 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _616 = ((_603.z - _591) * _493) + _591;
    float _619 = ((((_603.x - _589) * _493) + _589) * 2.0) + (-1.0);
    float _620 = ((((_603.y - _590) * _493) + _590) * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3742 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _626 = sqrt(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))));
    vec4 _639 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _657 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _659 = _657.x;
    float _660 = 1.0 - _659;
    float _673 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_659 - _660) * cbMtdParam._m0[24u].z) + _660) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3753 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _681 = (_674 * (cbMtdParam._m0[17u].x - _519)) + _519;
    float _682 = (_674 * (cbMtdParam._m0[17u].y - _520)) + _520;
    float _683 = (_674 * (cbMtdParam._m0[17u].z - _521)) + _521;
    float _688 = (((_538.z - _616) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _616;
    vec4 _701 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _708 = (_701.x * 2.0) + (-1.0);
    float _709 = (_701.y * 2.0) + (-1.0);
    float _710 = dot(vec2(_708, _709), vec2(_708, _709));
    float _3764 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _718 = (_674 * (_701.z - _688)) + _688;
    float _723 = _619 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_538.x * 2.0) + (-1.0)));
    float _724 = _620 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_538.y * 2.0) + (-1.0)));
    float _736 = (((_708 - _723) + (cbMtdParam._m0[21u].x * _723)) * _674) + _723;
    float _737 = (((_709 - _724) + (cbMtdParam._m0[21u].x * _724)) * _674) + _724;
    float _738 = (_674 * (sqrt(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) - _626)) + _626;
    float _740 = cbMtdParam._m0[22u].x + _639.w;
    float _743 = fma(_738, _236 * NORMAL.x, fma(_737, _243 * TANGENT.x, (_229 * _221) * _736));
    float _746 = fma(_738, _236 * NORMAL.y, fma(_737, _243 * TANGENT.y, (_229 * _222) * _736));
    float _749 = fma(_738, _236 * NORMAL.z, fma(_737, _243 * TANGENT.z, (_229 * _223) * _736));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3775 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _757 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3797 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3808 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3819 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _775 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _827 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _817);
    float _828 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _817);
    float _829 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _817);
    float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
    float _834 = _827 * _833;
    float _835 = _828 * _833;
    float _836 = _829 * _833;
    vec4 _841 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _843 = _841.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _997 = sqrt(((_827 * _827) + (_828 * _828)) + (_829 * _829));
        float _1003 = (cbMatDynParam._m0[5u].x * _997) + cbMatDynParam._m0[5u].y;
        float _3830 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1008 = (cbMatDynParam._m0[5u].z * _997) + cbMatDynParam._m0[5u].w;
        float _3841 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) - _1004)) + _1004) < ((_843 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _876 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _879 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _892 = _270 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3852 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _3874 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _917 = ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_754, _755, _756), vec3(_834, _835, _836));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _754) - _834;
    float _926 = (_921 * _755) - _835;
    float _927 = (_921 * _756) - _836;
    float _931 = abs(dot(vec3(_834, _835, _836), vec3(_754, _755, _756)));
    float _3885 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_757);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1315;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1044 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1048 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1073 = _978 + _754;
        float _1074 = _982 + _755;
        float _1075 = _986 + _756;
        float _1085 = fma(_1075, cbModelParam._m0[26u].z, fma(_1074, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1073)) - _1040;
        float _1086 = fma(_1075, cbModelParam._m0[27u].z, fma(_1074, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1073)) - _1044;
        float _1087 = fma(_1075, cbModelParam._m0[28u].z, fma(_1074, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1073)) - _1048;
        float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
        float _1104 = ((_1091 * _1085) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1091 * _1086) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1091 * _1087) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1104, _1105, _1106), 0.0);
        float _1143 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1109.x + (-0.5));
        float _1145 = _1143 * (_1109.y + (-0.5));
        float _1146 = _1143 * (_1109.z + (-0.5));
        float _1153 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1116.x + (-0.5));
        float _1155 = _1153 * (_1116.y + (-0.5));
        float _1156 = _1153 * (_1116.z + (-0.5));
        float _1163 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1123.x + (-0.5));
        float _1165 = _1163 * (_1123.y + (-0.5));
        float _1166 = _1163 * (_1123.z + (-0.5));
        float _1173 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1130.x + (-0.5));
        float _1175 = _1173 * (_1130.y + (-0.5));
        float _1176 = _1173 * (_1130.z + (-0.5));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = _1144 * 0.5;
        float _1181 = _1154 * 0.5;
        float _1182 = _1164 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1197 = (dot(vec3(_754, _755, _756), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1207 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1209 = _1208 * 2.0;
        float _1213 = (1.0 - _1208) / (_1208 + 1.0);
        float _3933 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1223 = ((((1.0 - _1214) * (_1209 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1209 + 1.0))) + _1214) * _1177;
        float _1224 = _1145 * 0.5;
        float _1225 = _1155 * 0.5;
        float _1226 = _1165 * 0.5;
        float _1227 = dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226));
        float _1232 = (_1227 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1227);
        float _1240 = (dot(vec3(_754, _755, _756), vec3(_1232 * _1224, _1232 * _1225, _1232 * _1226)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1249 = sqrt(((_1225 * _1225) + (_1224 * _1224)) + (_1226 * _1226)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1251 = _1250 * 2.0;
        float _1255 = (1.0 - _1250) / (_1250 + 1.0);
        float _3966 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1265 = ((((1.0 - _1256) * (_1251 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1251 + 1.0))) + _1256) * _1178;
        float _1266 = _1146 * 0.5;
        float _1267 = _1156 * 0.5;
        float _1268 = _1166 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_754, _755, _756), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3977 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3988 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3999 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1293 + 1.0))) + _1298) * _1179;
        _1315 = _1146;
        _1317 = _1145;
        _1318 = _1144;
        _1319 = _1156;
        _1320 = _1155;
        _1321 = _1154;
        _1322 = _1166;
        _1323 = _1165;
        _1324 = _1164;
        _1325 = _1179;
        _1326 = _1178;
        _1327 = _1177;
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
    }
    else
    {
        _1315 = _1316;
        _1317 = _1316;
        _1318 = _1316;
        _1319 = _1316;
        _1320 = _1316;
        _1321 = _1316;
        _1322 = _1316;
        _1323 = _1316;
        _1324 = _1316;
        _1325 = _1316;
        _1326 = _1316;
        _1327 = _1316;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1361 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1365 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1388 = _978 + _754;
        float _1389 = _982 + _755;
        float _1390 = _986 + _756;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_754, _755, _756), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4062 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_754, _755, _756), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4095 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_754, _755, _756), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4128 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1316;
        _1627 = _1316;
        _1628 = _1316;
        _1629 = _1316;
        _1630 = _1316;
        _1631 = _1316;
        _1632 = _1316;
        _1633 = _1316;
        _1634 = _1316;
        _1635 = _1316;
        _1636 = _1316;
        _1637 = _1316;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1328)) + _1328;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1329)) + _1329;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1330)) + _1330;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _925 * 0.5;
    float _1695 = _926 * 0.5;
    float _1696 = _927 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1315, _1319, _1322, _1325));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _757);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1825 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1828 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1856 = frontier_phi_17_15_ladder;
        }
        float _2057;
        if (_1825 > 0.0)
        {
            _2057 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2057 = frontier_phi_26_22_ladder;
        }
        float _2300;
        if (_1828 > 0.0)
        {
            _2300 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2300 = frontier_phi_38_33_ladder;
        }
        float _2302 = isnan(_2057) ? _1856 : (isnan(_1856) ? _2057 : min(_1856, _2057));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1822) + _1811;
        float _2308 = (_2303 * _1825) + _1815;
        float _2309 = (_2303 * _1828) + _1819;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2310;
        float _2314 = _2310 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 > _2314) || ((_2308 < _2312) || ((_2307 < _2312) || (_2307 > _2314))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2309, cbModelParam._m0[9u].z, fma(_2308, cbModelParam._m0[9u].y, _2307 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2309, cbModelParam._m0[10u].z, fma(_2308, cbModelParam._m0[10u].y, _2307 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2309, cbModelParam._m0[11u].z, fma(_2308, cbModelParam._m0[11u].y, _2307 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_16_38_ladder = _2433.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2433.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2433.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_16_38_ladder_2;
        _1846 = frontier_phi_16_38_ladder_1;
        _1848 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1763);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _757);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1921 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1924 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2062;
        if (_1918 > 0.0)
        {
            _2062 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2062 = frontier_phi_28_24_ladder;
        }
        float _2327;
        if (_1921 > 0.0)
        {
            _2327 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2327 = frontier_phi_40_35_ladder;
        }
        float _2532;
        if (_1924 > 0.0)
        {
            _2532 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2532 = frontier_phi_49_46_ladder;
        }
        float _2534 = isnan(_2327) ? _2062 : (isnan(_2062) ? _2327 : min(_2062, _2327));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _1918) + _1907;
        float _2540 = (_2535 * _1921) + _1911;
        float _2541 = (_2535 * _1924) + _1915;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2542;
        float _2545 = _2542 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2541 > _2545) || ((_2541 < _2543) || ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 < _2543) || (_2539 > _2545))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2541, cbModelParam._m0[17u].z, fma(_2540, cbModelParam._m0[17u].y, _2539 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2541, cbModelParam._m0[18u].z, fma(_2540, cbModelParam._m0[18u].y, _2539 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2541, cbModelParam._m0[19u].z, fma(_2540, cbModelParam._m0[19u].y, _2539 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_25_49_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_25_49_ladder_2;
        _1945 = frontier_phi_25_49_ladder_1;
        _1947 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1853);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1959 = ((((1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_946 * _933)) * _917;
    float _1960 = _1959 * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1961 = _1959 * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1962 = _1959 * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _917 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2016 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2020 = _1983 | 1u;
    float _2031 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_754, _755, _756));
    float _2034 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_754, _755, _756));
    float _4264 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _4275 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2039 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * 0.3183098733425140380859375;
    float _2041 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * 0.3183098733425140380859375;
    float _2048 = ((cbLight._m0[_2000].x * _2006) * _2041) + ((cbLight._m0[_2010].x * _2016) * _2039);
    float _2049 = ((_2006 * cbLight._m0[_2000].y) * _2041) + ((_2016 * cbLight._m0[_2010].y) * _2039);
    float _2050 = ((_2006 * cbLight._m0[_2000].z) * _2041) + ((_2016 * cbLight._m0[_2010].z) * _2039);
    uvec4 _2054 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2056 = _2054.x == 0u;
    float _2067;
    float _2069;
    float _2071;
    if (_2056)
    {
        _2067 = _2048;
        _2069 = _2049;
        _2071 = _2050;
    }
    else
    {
        uint _2075 = _1983 + 6u;
        float _2091 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _4286 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2094 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2067 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _2048;
        _2069 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _2049;
        _2071 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _2050;
    }
    bool _2074 = _2054.y == 0u;
    float _2112;
    float _2114;
    float _2116;
    if (_2074)
    {
        _2112 = _2067;
        _2114 = _2069;
        _2116 = _2071;
    }
    else
    {
        uint _2271 = _1983 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_754, _755, _756)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4302 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2290 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2112 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2067;
        _2114 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2069;
        _2116 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2071;
    }
    uint _2119 = _1983 + 8u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _757) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1983].x + _834;
    float _2135 = cbLight._m0[_1983].y + _835;
    float _2136 = cbLight._m0[_1983].z + _836;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_1983].xyz));
    float _4318 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _4329 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2148 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2149 = dot(vec3(_754, _755, _756), vec3(_2141, _2142, _2143));
    float _4340 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2141, _2142, _2143));
    float _4351 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2133 * _2133;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2133;
    float _2184 = (0.5 / (((_2148 * ((_2147 * _2173) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2173) + _2133) * _2147))) * _2147;
    float _4362 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    uint _2197 = _1983 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2020].w)) * _757) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2020].x + _834;
    float _2211 = cbLight._m0[_2020].y + _835;
    float _2212 = cbLight._m0[_2020].z + _836;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2020].xyz));
    float _4373 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2224 = dot(vec3(_754, _755, _756), vec3(_2217, _2218, _2219));
    float _4384 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2020].xyz), vec3(_2217, _2218, _2219));
    float _4395 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2246 = 1.0 - _2209;
    float _2256 = (0.5 / (((_2148 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2246) + _2209) * _2223))) * _2223;
    float _4406 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2268 = (((_2245 * cbLight._m0[_2197].x) * _2258) * _2006) + (((_2172 * cbLight._m0[_2119].x) * _2186) * _2016);
    float _2269 = (((_2245 * cbLight._m0[_2197].y) * _2258) * _2006) + (((_2172 * cbLight._m0[_2119].y) * _2186) * _2016);
    float _2270 = (((_2245 * cbLight._m0[_2197].z) * _2258) * _2006) + (((_2172 * cbLight._m0[_2119].z) * _2186) * _2016);
    float _2332;
    float _2334;
    float _2336;
    if (_2056)
    {
        _2332 = _2268;
        _2334 = _2269;
        _2336 = _2270;
    }
    else
    {
        uint _2338 = _1983 + 2u;
        uint _2342 = _1983 + 10u;
        float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _757) * 0.949999988079071044921875);
        float _2357 = _2356 * _2356;
        float _2358 = cbLight._m0[_2338].x + _834;
        float _2359 = cbLight._m0[_2338].y + _835;
        float _2360 = cbLight._m0[_2338].z + _836;
        float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
        float _2365 = _2364 * _2358;
        float _2366 = _2364 * _2359;
        float _2367 = _2364 * _2360;
        float _2368 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2338].xyz));
        float _4417 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2372 = dot(vec3(_754, _755, _756), vec3(_2365, _2366, _2367));
        float _4428 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2376 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2365, _2366, _2367));
        float _4439 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2380 = _2357 * _2357;
        float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
        float _2393 = (exp2(log2(1.0 - (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2394 = 1.0 - _2357;
        float _2404 = (0.5 / (((_2148 * ((_2371 * _2394) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2394) + _2357) * _2371))) * _2371;
        float _4450 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2332 = (((_2393 * cbLight._m0[_2342].x) * _2406) * _2407) + _2268;
        _2334 = (((_2393 * cbLight._m0[_2342].y) * _2406) * _2407) + _2269;
        _2336 = (((_2393 * cbLight._m0[_2342].z) * _2406) * _2407) + _2270;
    }
    float _2442;
    float _2444;
    float _2446;
    if (_2074)
    {
        _2442 = _2332;
        _2444 = _2334;
        _2446 = _2336;
    }
    else
    {
        uint _2453 = _1983 + 3u;
        uint _2457 = _1983 + 11u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _757) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _834;
        float _2474 = cbLight._m0[_2453].y + _835;
        float _2475 = cbLight._m0[_2453].z + _836;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_2453].xyz));
        float _4466 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2487 = dot(vec3(_754, _755, _756), vec3(_2480, _2481, _2482));
        float _4477 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4488 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2509 = 1.0 - _2472;
        float _2519 = (0.5 / (((_2148 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2148 * _2509) + _2472) * _2486))) * _2486;
        float _4499 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2442 = (((_2508 * cbLight._m0[_2457].x) * _2521) * _2522) + _2332;
        _2444 = (((_2508 * cbLight._m0[_2457].y) * _2521) * _2522) + _2334;
        _2446 = (((_2508 * cbLight._m0[_2457].z) * _2521) * _2522) + _2336;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1981.y == 0u)
    {
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2597;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2597;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2597;
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2613)));
        float _2634 = (log2(_2600 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
        }
        else
        {
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            uint _2904 = 0u;
            uint _2913;
            bool _2914;
            for (;;)
            {
                _2913 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2904 << 2u)) >> 2u)).x;
                _2914 = _2913 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2914)
                {
                    frontier_phi_66_pred = _2898;
                    frontier_phi_66_pred_1 = _2903;
                    frontier_phi_66_pred_2 = _2902;
                    frontier_phi_66_pred_3 = _2901;
                    frontier_phi_66_pred_4 = _2900;
                    frontier_phi_66_pred_5 = _2899;
                }
                else
                {
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    uint _3049;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2901;
                    _3047 = _2902;
                    _3048 = _2903;
                    _3049 = _2913;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    for (;;)
                    {
                        uint _3053 = uint(findLSB(_3049)) + (_2904 << 5u);
                        uint _3050 = (_3049 + 4294967295u) & _3049;
                        uint _3055 = _3053 * 48u;
                        vec4 _3069 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3075 = (_3053 * 48u) + 4u;
                        vec4 _3088 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3094 = (_3053 * 48u) + 8u;
                        vec3 _3105 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3094)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3094 + 2u)).x));
                        float _3109 = _3069.x - _2598;
                        float _3110 = _3069.y - _2599;
                        float _3111 = _3069.z - _2600;
                        float _3112 = dot(vec3(_3109, _3110, _3111), vec3(_3109, _3110, _3111));
                        float _3115 = inversesqrt(_3112);
                        float _3116 = _3115 * _3109;
                        float _3117 = _3115 * _3110;
                        float _3118 = _3115 * _3111;
                        float _3119 = dot(vec3(_873, _876, _879), vec3(_3116, _3117, _3118));
                        float _3124 = 1.0 - (_3112 * _3069.w);
                        float _4525 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3125 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3126 = sqrt(_3112) * _3088.w;
                        float _3129 = 1.39999997615814208984375 / (_3126 + 1.39999997615814208984375);
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3119) + _3130;
                        float _3136 = _3126 * _3126;
                        float _3140 = ((isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))) * _3125) / ((_3136 * 0.699999988079071044921875) + 1.0);
                        float _3144 = (-0.0) - _2598;
                        float _3145 = (-0.0) - _2599;
                        float _3146 = (-0.0) - _2600;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3151 = _3150 * _3144;
                        float _3152 = _3150 * _3145;
                        float _3153 = _3150 * _3146;
                        float _3161 = exp2(log2(1.0 / ((_3136 * 3.5) + 5.0)) * 0.25);
                        float _3162 = 1.0 - _933;
                        float _3169 = sqrt(1.0 - ((1.0 - (_3162 * _3162)) * (1.0 - (_3161 * _3161))));
                        float _3170 = _3169 * _3169;
                        float _3171 = _3170 * _3170;
                        float _3172 = _3151 + _3116;
                        float _3173 = _3152 + _3117;
                        float _3174 = _3153 + _3118;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3182 = dot(vec3(_873, _876, _879), vec3(_3151, _3152, _3153));
                        float _4541 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                        float _3186 = dot(vec3(_873, _876, _879), vec3(_3178 * _3172, _3178 * _3173, _3178 * _3174));
                        float _4552 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3189 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3193 = ((_3189 * _3189) * (_3171 + (-1.0))) + 1.0;
                        float _3194 = _3129 * _3170;
                        float _3195 = _3194 * _3194;
                        float _3198 = ((1.0 - _3195) * _3119) + _3195;
                        float _4563 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3199 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                        float _3200 = 1.0 - _3170;
                        float _3210 = (0.5 / (((_3199 * ((_3185 * _3200) + _3170)) + 9.9999999392252902907785028219223e-09) + (((_3199 * _3200) + _3170) * _3185))) * _3199;
                        float _4574 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3221 = (((_3171 * 3.1415927410125732421875) * (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) / ((_3193 * _3193) * ((_3136 * 2.1991131305694580078125) + 3.141590118408203125))) * _3125;
                        _2973 = (_3140 * _3088.x) + _3046;
                        _2974 = (_3140 * _3088.y) + _3047;
                        _2975 = (_3140 * _3088.z) + _3048;
                        _2970 = (_3221 * _3105.x) + _3043;
                        _2971 = (_3221 * _3105.y) + _3044;
                        _2972 = (_3221 * _3105.z) + _3045;
                        if (_3050 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _2973;
                            _3047 = _2974;
                            _3048 = _2975;
                            _3049 = _3050;
                        }
                    }
                    frontier_phi_66_pred = _2970;
                    frontier_phi_66_pred_1 = _2975;
                    frontier_phi_66_pred_2 = _2974;
                    frontier_phi_66_pred_3 = _2973;
                    frontier_phi_66_pred_4 = _2972;
                    frontier_phi_66_pred_5 = _2971;
                }
                _2746 = frontier_phi_66_pred;
                _2756 = frontier_phi_66_pred_1;
                _2754 = frontier_phi_66_pred_2;
                _2752 = frontier_phi_66_pred_3;
                _2750 = frontier_phi_66_pred_4;
                _2748 = frontier_phi_66_pred_5;
                uint _2905 = _2904 + 1u;
                if (_2905 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2898 = _2746;
                    _2899 = _2748;
                    _2900 = _2750;
                    _2901 = _2752;
                    _2902 = _2754;
                    _2903 = _2756;
                    _2904 = _2905;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
        }
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.z;
        uint _2762 = (_2760 >> 8u) & 15u;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        if (((4294967295u << _2762) & _2644) == 0u)
        {
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
            _2872 = _2751;
            _2874 = _2753;
            _2876 = _2755;
        }
        else
        {
            float _2891 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
            float _2892 = _2891 * _2598;
            float _2893 = _2891 * _2599;
            float _2894 = _2891 * _2600;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2762 < ((_2760 >> 12u) & 15u))
            {
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _3026 = _2745;
                float _3027 = _2747;
                float _3028 = _2749;
                float _3029 = _2751;
                float _3030 = _2753;
                float _3031 = _2755;
                uint _3032 = _2762;
                uint _3041;
                bool _3042;
                for (;;)
                {
                    _3041 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_3032 << 2u)) >> 2u)).x;
                    _3042 = _3041 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3042)
                    {
                        frontier_phi_77_pred = _3031;
                        frontier_phi_77_pred_1 = _3030;
                        frontier_phi_77_pred_2 = _3029;
                        frontier_phi_77_pred_3 = _3028;
                        frontier_phi_77_pred_4 = _3027;
                        frontier_phi_77_pred_5 = _3026;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        float _3251 = _3029;
                        float _3252 = _3030;
                        float _3253 = _3031;
                        uint _3254 = _3041;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3323;
                        vec4 _3338;
                        float _3384;
                        bool _3385;
                        for (;;)
                        {
                            uint _3265 = ((_3032 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3310 = (_3265 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3265 * 40u) + 20u;
                            _3338 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 3u)).x));
                            uint _3340 = (_3265 * 40u) + 24u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3359 = (_3265 * 40u) + 28u;
                            vec4 _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            _3384 = fma(_2600, _3372.z, fma(_2599, _3372.y, _3372.x * _2598)) + _3372.w;
                            _3385 = !((fma(_2600, _3353.z, fma(_2599, _3353.y, _3353.x * _2598)) + _3353.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3385)
                            {
                                float _3412 = _3280.x - _2598;
                                float _3413 = _3280.y - _2599;
                                float _3414 = _3280.z - _2600;
                                float _3415 = dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414));
                                float _3418 = inversesqrt(_3415);
                                float _3419 = _3418 * _3412;
                                float _3420 = _3418 * _3413;
                                float _3421 = _3418 * _3414;
                                float _3425 = 1.0 - (_3415 / (_3281 * _3281));
                                float _4585 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3430 = sqrt(_3415) * _3296.w;
                                float _3432 = 1.39999997615814208984375 / (_3430 + 1.39999997615814208984375);
                                float _3433 = _3432 * _3432;
                                float _3436 = ((1.0 - _3433) * dot(vec3(_3419, _3420, _3421), vec3(_873, _876, _879))) + _3433;
                                float _3439 = _3430 * _3430;
                                float _3443 = (fma(_2600, _3323.z, fma(_2599, _3323.y, _3323.x * _2598)) + _3323.w) / _3384;
                                float _3444 = (fma(_2600, _3338.z, fma(_2599, _3338.y, _3338.x * _2598)) + _3338.w) / _3384;
                                float _3448 = 1.0 - dot(vec2(_3443, _3444), vec2(_3443, _3444));
                                float _4601 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3450 = _3449 * (((isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0))) * _3426) / ((_3439 * 0.699999988079071044921875) + 1.0));
                                float _3462 = exp2(log2(1.0 / ((_3439 * 3.5) + 5.0)) * 0.25);
                                float _3463 = 1.0 - _933;
                                float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                                float _3471 = _3470 * _3470;
                                float _3472 = _3471 * _3471;
                                float _3473 = _3419 - _2892;
                                float _3474 = _3420 - _2893;
                                float _3475 = _3421 - _2894;
                                float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                                float _3483 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2892, (-0.0) - _2893, (-0.0) - _2894));
                                float _4612 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3486 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3487 = dot(vec3(_873, _876, _879), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                                float _4623 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3490 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                                float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                                float _3495 = _3432 * _3471;
                                float _3496 = _3495 * _3495;
                                float _3502 = ((1.0 - _3496) * dot(vec3(_873, _876, _879), vec3(_3419, _3420, _3421))) + _3496;
                                float _4634 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3504 = 1.0 - _3471;
                                float _3514 = (0.5 / (((_3503 * ((_3486 * _3504) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3503 * _3504) + _3471) * _3486))) * _3503;
                                float _4645 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3524 = (_3449 * _3426) * (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3494 * _3494) * ((_3439 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3450 * _3296.y;
                                frontier_phi_83_pred_1 = _3450 * _3296.x;
                                frontier_phi_83_pred_2 = _3524 * _3308.z;
                                frontier_phi_83_pred_3 = _3524 * _3308.y;
                                frontier_phi_83_pred_4 = _3524 * _3308.x;
                                frontier_phi_83_pred_5 = _3450 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3532 = frontier_phi_83_pred;
                            _3531 = frontier_phi_83_pred_1;
                            _3530 = frontier_phi_83_pred_2;
                            _3529 = frontier_phi_83_pred_3;
                            _3528 = frontier_phi_83_pred_4;
                            _3533 = frontier_phi_83_pred_5;
                            _3238 = _3531 + _3251;
                            _3239 = _3532 + _3252;
                            _3240 = _3533 + _3253;
                            _3235 = _3528 + _3248;
                            _3236 = _3529 + _3249;
                            _3237 = _3530 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3240;
                        frontier_phi_77_pred_1 = _3239;
                        frontier_phi_77_pred_2 = _3238;
                        frontier_phi_77_pred_3 = _3237;
                        frontier_phi_77_pred_4 = _3236;
                        frontier_phi_77_pred_5 = _3235;
                    }
                    _2877 = frontier_phi_77_pred;
                    _2875 = frontier_phi_77_pred_1;
                    _2873 = frontier_phi_77_pred_2;
                    _2871 = frontier_phi_77_pred_3;
                    _2869 = frontier_phi_77_pred_4;
                    _2867 = frontier_phi_77_pred_5;
                    uint _3033 = _3032 + 1u;
                    if (_3033 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3026 = _2867;
                        _3027 = _2869;
                        _3028 = _2871;
                        _3029 = _2873;
                        _3030 = _2875;
                        _3031 = _2877;
                        _3032 = _3033;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2871;
                frontier_phi_58_59_ladder_1 = _2877;
                frontier_phi_58_59_ladder_2 = _2875;
                frontier_phi_58_59_ladder_3 = _2873;
                frontier_phi_58_59_ladder_4 = _2869;
                frontier_phi_58_59_ladder_5 = _2867;
            }
            else
            {
                frontier_phi_58_59_ladder = _2749;
                frontier_phi_58_59_ladder_1 = _2755;
                frontier_phi_58_59_ladder_2 = _2753;
                frontier_phi_58_59_ladder_3 = _2751;
                frontier_phi_58_59_ladder_4 = _2747;
                frontier_phi_58_59_ladder_5 = _2745;
            }
            _2866 = frontier_phi_58_59_ladder_5;
            _2868 = frontier_phi_58_59_ladder_4;
            _2870 = frontier_phi_58_59_ladder;
            _2872 = frontier_phi_58_59_ladder_3;
            _2874 = frontier_phi_58_59_ladder_2;
            _2876 = frontier_phi_58_59_ladder_1;
        }
        float _2881 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2657 = (_2881 * _2872) + _2112;
        _2659 = (_2881 * _2874) + _2114;
        _2661 = (_2881 * _2876) + _2116;
        _2663 = ((_2866 * 0.039999999105930328369140625) * _2881) + _2442;
        _2665 = ((_2868 * 0.039999999105930328369140625) * _2881) + _2444;
        _2667 = ((_2870 * 0.039999999105930328369140625) * _2881) + _2446;
    }
    else
    {
        _2657 = _2112;
        _2659 = _2114;
        _2661 = _2116;
        _2663 = _2442;
        _2665 = _2444;
        _2667 = _2446;
    }
    float _4661 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4672 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4683 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2684 = ((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2657 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _917))) + ((_2663 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2685 = ((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * (_2659 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _917))) + ((_2665 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    float _2686 = ((isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2661 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _917))) + ((_2667 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1752)) * cbPerFrame._m0[3u].x);
    uint _2687 = _270 + 6u;
    float _2695 = _854 / cbSceneParam._m0[86u].x;
    float _2696 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2710 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, (log2((isnan(cbSceneParam._m0[77u].w) ? _775 : (isnan(_775) ? cbSceneParam._m0[77u].w : min(_775, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2712 = _2710.x;
    float _2713 = _2710.y;
    float _2714 = _2710.z;
    float _2715 = _2710.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_775 > cbSceneParam._m0[78u].w)
    {
        float _2770 = isnan(_775) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _775 : min(cbSceneParam._m0[80u].w, _775));
        float _2771 = _2770 / _775;
        float _2782 = _2771 * _827;
        float _2783 = _828 * _2771;
        float _2784 = (-0.0) - _2783;
        float _2786 = _2771 * _829;
        float _2788 = (cbSceneParam._m0[77u].w * _2784) / _2770;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2783;
        float _2796 = sqrt(((_2782 * _2782) + (_2783 * _2783)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2770)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2983;
        if (abs((_2784 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2983 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2927 = 1.0 / cbSceneParam._m0[80u].x;
            float _2928 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2929 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2938 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : min(_2928, 0.0));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            _2983 = ((abs(_2796 / _2784) * cbSceneParam._m0[80u].y) * ((((_2938 - _2939) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))))) * _2927)) - ((exp2(_2806 * _2938) - exp2(_2806 * _2939)) * _2927))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2985 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, 1.0), 0.0);
        float _2994 = exp2((_2983 * (-1.44269502162933349609375)) * (1.0 - _2985.w));
        float _2995 = log2(_2994);
        float _3011 = log2(_2715);
        _2808 = (exp2(_3011 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].x)) * _2985.x) / cbSceneParam._m0[78u].x)) + _2712;
        _2810 = (exp2(_3011 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].y)) * _2985.y) / cbSceneParam._m0[78u].y)) + _2713;
        _2812 = (exp2(_3011 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].z)) * _2985.z) / cbSceneParam._m0[78u].z)) + _2714;
        _2814 = _2994 * _2715;
    }
    else
    {
        _2808 = _2712;
        _2810 = _2713;
        _2812 = _2714;
        _2814 = _2715;
    }
    bool _3021;
    vec4 _2824;
    vec4 _2846;
    float _2848;
    float _2852;
    float _2853;
    float _2854;
    float _2855;
    bool _2865;
    for (;;)
    {
        _2824 = cbMatDynParam._m0[0u];
        float _2826 = roundEven(_2824.y);
        bool _2827 = _2826 == 3.0;
        float _2828 = log2(_2814);
        float _2835 = exp2(_2828 * cbSceneParam._m0[78u].x) * _2684;
        float _2836 = exp2(_2828 * cbSceneParam._m0[78u].y) * _2685;
        float _2837 = exp2(_2828 * cbSceneParam._m0[78u].z) * _2686;
        float _2844 = _843 + (-0.5);
        _2846 = cbMtdParam._m0[1u];
        _2848 = _2846.y * _2844;
        float _2851 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2852 = _2851 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
        _2853 = _2851 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
        _2854 = _2851 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
        _2855 = _2844 * 0.999000012874603271484375;
        _2865 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2865)
        {
            if ((cbInstanceData._m0[_270 + 7u].x + _2855) < 0.5)
            {
                _3021 = true;
                break;
            }
        }
        uint _2962 = _892 + uint(_2824.w);
        if ((cbInstanceData._m0[_2962].w < 1.0) && ((cbInstanceData._m0[_2962].w + _2855) < 0.5))
        {
            _3021 = true;
            break;
        }
        if ((_2848 + 1.0) < _2846.x)
        {
            _3021 = true;
            break;
        }
        _3021 = false;
        break;
    }
    float _3226;
    if (_3021)
    {
        discard_state = true;
        _3226 = 0.0;
    }
    else
    {
        _3226 = cbInstanceData._m0[_2687].w;
    }
    SV_Target.x = _2852;
    SV_Target.y = _2853;
    SV_Target.z = _2854;
    SV_Target.w = _3226;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2687].w;
    discard_exit();
}


