#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1345;
float _3728;
float _3729;
float _3730;
float _3731;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3740 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    float _474 = ((_444.z - _465) * _390) + _465;
    float _477 = ((((_444.x - _463) * _390) + _463) * 2.0) + (-1.0);
    float _478 = ((((_444.y - _464) * _390) + _464) * 2.0) + (-1.0);
    float _479 = dot(vec2(_477, _478), vec2(_477, _478));
    float _3751 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _516 = (_477 + ((((_417.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_504.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _517 = (_478 + ((((_417.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_504.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _520 = fma(_484, _243, fma(_517, _250, _516 * _236));
    float _523 = fma(_484, _244, fma(_517, _251, _516 * _237));
    float _526 = fma(_484, _245, fma(_517, _252, _516 * _238));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _566 = ((_561 - _562) * cbMtdParam._m0[24u].z) + _562;
    float _568 = (cbMtdParam._m0[19u].x + dot(vec4(_530 * _520, _530 * _523, _530 * _526, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_566 * cbMtdParam._m0[21u].z);
    float _3762 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _571 = (-0.0) - cbMtdParam._m0[24u].y;
    float _573 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
    float _581 = _569 - ((_569 * TEXCOORD_8.x) * _574);
    float _582 = _569 - ((_569 * TEXCOORD_8.y) * _574);
    float _583 = _569 - ((_569 * TEXCOORD_8.z) * _574);
    float _590 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _594 = ((isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : min(_590, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _602 = (_594 - (((_566 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _594))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3793 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _607 = ((_581 * (cbMtdParam._m0[17u].x - _397)) * _603) + _397;
    float _608 = ((_582 * (cbMtdParam._m0[17u].y - _398)) * _603) + _398;
    float _609 = ((_583 * (cbMtdParam._m0[17u].z - _399)) * _603) + _399;
    vec4 _621 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _651 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_623 - _624) * cbMtdParam._m0[24u].w) + _624) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3804 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _660 = ((((cbMtdParam._m0[10u].x - _607) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _652) + _607;
    float _661 = ((((cbMtdParam._m0[10u].y - _608) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _652) + _608;
    float _662 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _609)) * _652) + _609;
    float _667 = (((_417.z - _474) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _474;
    float _671 = ((_504.z - _667) * cbMtdParam._m0[19u].w) + _667;
    vec4 _685 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _692 = (_685.x * 2.0) + (-1.0);
    float _693 = (_685.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3815 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _703 = (((_685.z - _671) * _581) * _603) + _671;
    float _706 = ((cbMtdParam._m0[23u].y - _703) * _652) + _703;
    vec4 _725 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _731 = (_725.x * 2.0) + (-1.0);
    float _732 = (_725.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3826 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _753 = (((cbMtdParam._m0[21u].x * _516) + ((_692 - _516) * _581)) * _603) + _516;
    float _754 = (((cbMtdParam._m0[21u].x * _517) + ((_693 - _517) * _582)) * _603) + _517;
    float _755 = (((sqrt(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) - _484) * _583) * _603) + _484;
    float _766 = (((_731 - _753) + (_753 * cbMtdParam._m0[22u].z)) * _652) + _753;
    float _767 = (((_732 - _754) + (_754 * cbMtdParam._m0[22u].z)) * _652) + _754;
    float _768 = ((sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _755) * _652) + _755;
    float _770 = cbMtdParam._m0[22u].x + _504.w;
    float _773 = fma(_768, _243, fma(_767, _250, _766 * _236));
    float _776 = fma(_768, _244, fma(_767, _251, _766 * _237));
    float _779 = fma(_768, _245, fma(_767, _252, _766 * _238));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _3837 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _787 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _3859 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3870 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3881 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _856 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _846);
    float _857 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _846);
    float _858 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _846);
    float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
    float _863 = _856 * _862;
    float _864 = _857 * _862;
    float _865 = _858 * _862;
    vec4 _870 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _872 = _870.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1026 = sqrt(((_856 * _856) + (_857 * _857)) + (_858 * _858));
        float _1032 = (cbMatDynParam._m0[5u].x * _1026) + cbMatDynParam._m0[5u].y;
        float _3892 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1037 = (cbMatDynParam._m0[5u].z * _1026) + cbMatDynParam._m0[5u].w;
        float _3903 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) - _1033)) + _1033) < ((_872 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _902 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _905 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _908 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    uint _921 = _255 + 9u;
    uint _922 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_922].z;
    float _3914 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    vec4 _942 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _946 = ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * TEXCOORD_5.w) * _942.x;
    float _947 = dot(vec3(_784, _785, _786), vec3(_863, _864, _865));
    float _950 = _947 * 2.0;
    float _954 = (_950 * _784) - _863;
    float _955 = (_950 * _785) - _864;
    float _956 = (_950 * _786) - _865;
    float _960 = abs(dot(vec3(_863, _864, _865), vec3(_784, _785, _786)));
    float _3947 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _962 = sqrt(_787);
    float _975 = exp2((_962 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_962 * 3.0));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1344;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1069 = fma(_1015, cbModelParam._m0[26u].z, fma(_1011, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007));
        float _1073 = fma(_1015, cbModelParam._m0[27u].z, fma(_1011, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007));
        float _1077 = fma(_1015, cbModelParam._m0[28u].z, fma(_1011, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007));
        float _1102 = _1007 + _784;
        float _1103 = _1011 + _785;
        float _1104 = _1015 + _786;
        float _1114 = fma(_1104, cbModelParam._m0[26u].z, fma(_1103, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1102)) - _1069;
        float _1115 = fma(_1104, cbModelParam._m0[27u].z, fma(_1103, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1102)) - _1073;
        float _1116 = fma(_1104, cbModelParam._m0[28u].z, fma(_1103, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1102)) - _1077;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1069 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1073 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[34u].z) + ((((((_1077 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1172 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1138.x + (-0.5));
        float _1174 = _1172 * (_1138.y + (-0.5));
        float _1175 = _1172 * (_1138.z + (-0.5));
        float _1182 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1145.x + (-0.5));
        float _1184 = _1182 * (_1145.y + (-0.5));
        float _1185 = _1182 * (_1145.z + (-0.5));
        float _1192 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1152.x + (-0.5));
        float _1194 = _1192 * (_1152.y + (-0.5));
        float _1195 = _1192 * (_1152.z + (-0.5));
        float _1202 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1159.x + (-0.5));
        float _1204 = _1202 * (_1159.y + (-0.5));
        float _1205 = _1202 * (_1159.z + (-0.5));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = _1173 * 0.5;
        float _1210 = _1183 * 0.5;
        float _1211 = _1193 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1226 = (dot(vec3(_784, _785, _786), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1236 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _3995 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1238 + 1.0))) + _1243) * _1206;
        float _1253 = _1174 * 0.5;
        float _1254 = _1184 * 0.5;
        float _1255 = _1194 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_784, _785, _786), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4028 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1280 + 1.0))) + _1285) * _1207;
        float _1295 = _1175 * 0.5;
        float _1296 = _1185 * 0.5;
        float _1297 = _1195 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_784, _785, _786), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4061 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1322 + 1.0))) + _1327) * _1208;
        _1344 = _1175;
        _1346 = _1174;
        _1347 = _1173;
        _1348 = _1185;
        _1349 = _1184;
        _1350 = _1183;
        _1351 = _1195;
        _1352 = _1194;
        _1353 = _1193;
        _1354 = _1208;
        _1355 = _1207;
        _1356 = _1206;
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1359 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
    }
    else
    {
        _1344 = _1345;
        _1346 = _1345;
        _1347 = _1345;
        _1348 = _1345;
        _1349 = _1345;
        _1350 = _1345;
        _1351 = _1345;
        _1352 = _1345;
        _1353 = _1345;
        _1354 = _1345;
        _1355 = _1345;
        _1356 = _1345;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1015, cbModelParam._m0[30u].z, fma(_1011, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007));
        float _1391 = fma(_1015, cbModelParam._m0[31u].z, fma(_1011, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007));
        float _1395 = fma(_1015, cbModelParam._m0[32u].z, fma(_1011, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007));
        float _1418 = _1007 + _784;
        float _1419 = _1011 + _785;
        float _1420 = _1015 + _786;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_784, _785, _786), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4124 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_784, _785, _786), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4157 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_784, _785, _786), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4190 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1345;
        _1657 = _1345;
        _1658 = _1345;
        _1659 = _1345;
        _1660 = _1345;
        _1661 = _1345;
        _1662 = _1345;
        _1663 = _1345;
        _1664 = _1345;
        _1665 = _1345;
        _1666 = _1345;
        _1667 = _1345;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1357)) + _1357;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1358)) + _1358;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1359)) + _1359;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _954 * 0.5;
    float _1725 = _955 * 0.5;
    float _1726 = _956 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1344, _1348, _1351, _1354));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1347, _1350, _1353, _1356));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _787);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1874;
    float _1876;
    float _1878;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1841 = fma(_1015, cbModelParam._m0[13u].z, fma(_1011, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1007)) + cbModelParam._m0[13u].w;
        float _1845 = fma(_1015, cbModelParam._m0[14u].z, fma(_1011, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1007)) + cbModelParam._m0[14u].w;
        float _1849 = fma(_1015, cbModelParam._m0[15u].z, fma(_1011, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1007)) + cbModelParam._m0[15u].w;
        float _1852 = fma(_956, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954));
        float _1855 = fma(_956, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954));
        float _1858 = fma(_956, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954));
        float _1886;
        if (_1852 > 0.0)
        {
            _1886 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1886 = frontier_phi_17_15_ladder;
        }
        float _2108;
        if (_1855 > 0.0)
        {
            _2108 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2108 = frontier_phi_26_22_ladder;
        }
        float _2354;
        if (_1858 > 0.0)
        {
            _2354 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2354 = frontier_phi_38_33_ladder;
        }
        float _2356 = isnan(_2108) ? _1886 : (isnan(_1886) ? _2108 : min(_1886, _2108));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1852) + _1841;
        float _2362 = (_2357 * _1855) + _1845;
        float _2363 = (_2357 * _1858) + _1849;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2366 = (-1.0) - _2364;
        float _2368 = _2364 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2363 > _2368) || ((_2363 < _2366) || ((_2362 > _2368) || ((_2362 < _2366) || ((_2361 < _2366) || (_2361 > _2368))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_16_38_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1874 = frontier_phi_16_38_ladder_2;
        _1876 = frontier_phi_16_38_ladder_1;
        _1878 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_954, _955, _956), _1793);
        _1874 = _1862.x * cbModelParam._m0[1u].y;
        _1876 = _1862.y * cbModelParam._m0[1u].y;
        _1878 = _1862.z * cbModelParam._m0[1u].y;
    }
    float _1882 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _787);
    float _1883 = isnan(_1882) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1882 : min(cbModelParam._m0[25u].w, _1882));
    float _1973;
    float _1975;
    float _1977;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1937 = fma(_1015, cbModelParam._m0[21u].z, fma(_1011, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1007)) + cbModelParam._m0[21u].w;
        float _1941 = fma(_1015, cbModelParam._m0[22u].z, fma(_1011, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1007)) + cbModelParam._m0[22u].w;
        float _1945 = fma(_1015, cbModelParam._m0[23u].z, fma(_1011, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1007)) + cbModelParam._m0[23u].w;
        float _1948 = fma(_956, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954));
        float _1951 = fma(_956, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954));
        float _1954 = fma(_956, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954));
        float _2113;
        if (_1948 > 0.0)
        {
            _2113 = abs((1.0 - _1937) / _1948);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1937 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2113 = frontier_phi_28_24_ladder;
        }
        float _2381;
        if (_1951 > 0.0)
        {
            _2381 = abs((1.0 - _1941) / _1951);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1941 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2381 = frontier_phi_40_35_ladder;
        }
        float _2586;
        if (_1954 > 0.0)
        {
            _2586 = abs((1.0 - _1945) / _1954);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1945 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2586 = frontier_phi_49_46_ladder;
        }
        float _2588 = isnan(_2381) ? _2113 : (isnan(_2113) ? _2381 : min(_2113, _2381));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1948) + _1937;
        float _2594 = (_2589 * _1951) + _1941;
        float _2595 = (_2589 * _1954) + _1945;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1883);
            frontier_phi_25_49_ladder = _2794.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2794.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2794.x * cbModelParam._m0[1u].z;
        }
        _1973 = frontier_phi_25_49_ladder_2;
        _1975 = frontier_phi_25_49_ladder_1;
        _1977 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_954, _955, _956), _1883);
        _1973 = _1957.x * cbModelParam._m0[1u].z;
        _1975 = _1957.y * cbModelParam._m0[1u].z;
        _1977 = _1957.z * cbModelParam._m0[1u].z;
    }
    float _1989 = ((((1.0 - _975) * ((_962 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_975 * _962)) * _946;
    float _1990 = _1989 * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1991 = _1989 * ((cbModelParam._m0[1u].w * (_1975 - _1876)) + _1876);
    float _1992 = _1989 * ((cbModelParam._m0[1u].w * (_1977 - _1878)) + _1878);
    float _1995 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _1998 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2001 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, _1990 * cbSceneParam._m0[91u].x));
    vec4 _2009 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_883, _884));
    float _2011 = _2009.w;
    float _2023 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2011);
    float _2024 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2011);
    float _2025 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2011);
    uvec4 _2029 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2031 = _2029.x * 14u;
    uint _2032 = _2031 + 13u;
    float _2039 = _946 + (-1.0);
    float _2044 = (cbLight._m0[_2032].x * _2039) + 1.0;
    float _2045 = (cbLight._m0[_2032].y * _2039) + 1.0;
    float _2046 = (cbLight._m0[_2032].z * _2039) + 1.0;
    float _2047 = (cbLight._m0[_2032].w * _2039) + 1.0;
    uint _2048 = _2031 + 5u;
    float _2054 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
    uint _2058 = _2031 + 4u;
    float _2067 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
    uint _2071 = _2031 | 1u;
    float _2082 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_784, _785, _786));
    float _2085 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_784, _785, _786));
    float _4326 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _4337 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2090 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2092 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _2099 = ((cbLight._m0[_2048].x * _2054) * _2092) + (((cbLight._m0[_2058].x * _2023) * _2067) * _2090);
    float _2100 = ((_2054 * cbLight._m0[_2048].y) * _2092) + (((cbLight._m0[_2058].y * _2024) * _2067) * _2090);
    float _2101 = ((_2054 * cbLight._m0[_2048].z) * _2092) + (((cbLight._m0[_2058].z * _2025) * _2067) * _2090);
    uvec4 _2105 = floatBitsToUint(cbLight._m0[_2031 + 12u]);
    bool _2107 = _2105.x == 0u;
    float _2118;
    float _2120;
    float _2122;
    if (_2107)
    {
        _2118 = _2099;
        _2120 = _2100;
        _2122 = _2101;
    }
    else
    {
        uint _2126 = _2031 + 6u;
        float _2142 = (dot(vec3(cbLight._m0[_2031 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2143 = _2142 * _2142;
        float _4348 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2144 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2145 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2118 = (((cbLight._m0[_2126].x * 0.3183098733425140380859375) * _2144) * _2145) + _2099;
        _2120 = (((cbLight._m0[_2126].y * 0.3183098733425140380859375) * _2144) * _2145) + _2100;
        _2122 = (((cbLight._m0[_2126].z * 0.3183098733425140380859375) * _2144) * _2145) + _2101;
    }
    bool _2125 = _2105.y == 0u;
    float _2163;
    float _2165;
    float _2167;
    if (_2125)
    {
        _2163 = _2118;
        _2165 = _2120;
        _2167 = _2122;
    }
    else
    {
        uint _2325 = _2031 + 7u;
        float _2341 = (dot(vec3(cbLight._m0[_2031 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4364 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2344 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2163 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2118;
        _2165 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2120;
        _2167 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2122;
    }
    uint _2170 = _2031 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2031].w)) * _787) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2031].x + _863;
    float _2186 = cbLight._m0[_2031].y + _864;
    float _2187 = cbLight._m0[_2031].z + _865;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2031].xyz));
    float _4380 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _2199 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2200 = dot(vec3(_784, _785, _786), vec3(_2192, _2193, _2194));
    float _4402 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_2031].xyz), vec3(_2192, _2193, _2194));
    float _4413 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2224 = 1.0 - _2184;
    float _2235 = (0.5 / (((_2199 * ((_2198 * _2224) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2224) + _2184) * _2198))) * _2198;
    float _4424 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    uint _2251 = _2031 + 9u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _787) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2071].x + _863;
    float _2265 = cbLight._m0[_2071].y + _864;
    float _2266 = cbLight._m0[_2071].z + _865;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2071].xyz));
    float _4435 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2278 = dot(vec3(_784, _785, _786), vec3(_2271, _2272, _2273));
    float _4446 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2281 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2282 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2271, _2272, _2273));
    float _4457 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2286 = _2263 * _2263;
    float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
    float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2300 = 1.0 - _2263;
    float _2310 = (0.5 / (((_2199 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2300) + _2263) * _2277))) * _2277;
    float _4468 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2312 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
    float _2322 = (((_2299 * cbLight._m0[_2251].x) * _2312) * _2054) + ((((cbLight._m0[_2170].x * _2023) * _2223) * _2237) * _2067);
    float _2323 = (((_2299 * cbLight._m0[_2251].y) * _2312) * _2054) + ((((cbLight._m0[_2170].y * _2024) * _2223) * _2237) * _2067);
    float _2324 = (((_2299 * cbLight._m0[_2251].z) * _2312) * _2054) + ((((cbLight._m0[_2170].z * _2025) * _2223) * _2237) * _2067);
    float _2386;
    float _2388;
    float _2390;
    if (_2107)
    {
        _2386 = _2322;
        _2388 = _2323;
        _2390 = _2324;
    }
    else
    {
        uint _2392 = _2031 + 2u;
        uint _2396 = _2031 + 10u;
        float _2410 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _787) * 0.949999988079071044921875);
        float _2411 = _2410 * _2410;
        float _2412 = cbLight._m0[_2392].x + _863;
        float _2413 = cbLight._m0[_2392].y + _864;
        float _2414 = cbLight._m0[_2392].z + _865;
        float _2418 = inversesqrt(dot(vec3(_2412, _2413, _2414), vec3(_2412, _2413, _2414)));
        float _2419 = _2418 * _2412;
        float _2420 = _2418 * _2413;
        float _2421 = _2418 * _2414;
        float _2422 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2392].xyz));
        float _4479 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2426 = dot(vec3(_784, _785, _786), vec3(_2419, _2420, _2421));
        float _4490 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2429 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2430 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2419, _2420, _2421));
        float _4501 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2434 = _2411 * _2411;
        float _2438 = ((_2429 * _2429) * (_2434 + (-1.0))) + 1.0;
        float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2448 = 1.0 - _2411;
        float _2458 = (0.5 / (((_2199 * ((_2425 * _2448) + _2411)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2448) + _2411) * _2425))) * _2425;
        float _4512 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2434 / ((_2438 * _2438) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _2046 : (isnan(_2046) ? 1.0 : min(_2046, 1.0));
        _2386 = (((_2447 * cbLight._m0[_2396].x) * _2460) * _2461) + _2322;
        _2388 = (((_2447 * cbLight._m0[_2396].y) * _2460) * _2461) + _2323;
        _2390 = (((_2447 * cbLight._m0[_2396].z) * _2460) * _2461) + _2324;
    }
    float _2496;
    float _2498;
    float _2500;
    if (_2125)
    {
        _2496 = _2386;
        _2498 = _2388;
        _2500 = _2390;
    }
    else
    {
        uint _2507 = _2031 + 3u;
        uint _2511 = _2031 + 11u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _787) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _863;
        float _2528 = cbLight._m0[_2507].y + _864;
        float _2529 = cbLight._m0[_2507].z + _865;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2507].xyz));
        float _4528 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2541 = dot(vec3(_784, _785, _786), vec3(_2534, _2535, _2536));
        float _4539 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4550 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2563 = 1.0 - _2526;
        float _2573 = (0.5 / (((_2199 * ((_2540 * _2563) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2563) + _2526) * _2540))) * _2540;
        float _4561 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
        _2496 = (((_2562 * cbLight._m0[_2511].x) * _2575) * _2576) + _2386;
        _2498 = (((_2562 * cbLight._m0[_2511].y) * _2575) * _2576) + _2388;
        _2500 = (((_2562 * cbLight._m0[_2511].z) * _2575) * _2576) + _2390;
    }
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    if (_2029.y == 0u)
    {
        float _2651 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2652 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2651;
        float _2653 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2651;
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2651;
        uvec4 _2666 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2667 = _2666.x;
        uint _2678 = uint((float(_2666.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2667))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2667)));
        float _2688 = (log2(_2654 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2689 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        uint _2692 = uint(isnan(14.0) ? _2689 : (isnan(_2689) ? 14.0 : min(_2689, 14.0)));
        uvec4 _2697 = texelFetch(g_lightClusterGridBuffer, int(((_2692 << 2u) + (_2678 << 6u)) >> 2u));
        uint _2698 = _2697.x;
        uint _2699 = _2666.z;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((((1u << ((_2699 >> 4u) & 15u)) + 4294967295u) & _2698) == 0u) || ((_2699 & 240u) == 0u))
        {
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
        }
        else
        {
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2810;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            uint _2957 = 0u;
            uint _2966;
            bool _2967;
            for (;;)
            {
                _2966 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                _2967 = _2966 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2967)
                {
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                else
                {
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    uint _3102;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2966;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    for (;;)
                    {
                        uint _3106 = uint(findLSB(_3102)) + (_2957 << 5u);
                        uint _3103 = (_3102 + 4294967295u) & _3102;
                        uint _3108 = _3106 * 48u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3128 = (_3106 * 48u) + 4u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3147 = (_3106 * 48u) + 8u;
                        vec3 _3158 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x));
                        float _3162 = _3122.x - _2652;
                        float _3163 = _3122.y - _2653;
                        float _3164 = _3122.z - _2654;
                        float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                        float _3168 = inversesqrt(_3165);
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3172 = dot(vec3(_902, _905, _908), vec3(_3169, _3170, _3171));
                        float _3177 = 1.0 - (_3165 * _3122.w);
                        float _4587 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3179 = sqrt(_3165) * _3141.w;
                        float _3182 = 1.39999997615814208984375 / (_3179 + 1.39999997615814208984375);
                        float _3183 = _3182 * _3182;
                        float _3186 = ((1.0 - _3183) * _3172) + _3183;
                        float _3189 = _3179 * _3179;
                        float _3193 = ((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3178) / ((_3189 * 0.699999988079071044921875) + 1.0);
                        float _3197 = (-0.0) - _2652;
                        float _3198 = (-0.0) - _2653;
                        float _3199 = (-0.0) - _2654;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3214 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                        float _3215 = 1.0 - _962;
                        float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                        float _3223 = _3222 * _3222;
                        float _3224 = _3223 * _3223;
                        float _3225 = _3204 + _3169;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3235 = dot(vec3(_902, _905, _908), vec3(_3204, _3205, _3206));
                        float _4603 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3239 = dot(vec3(_902, _905, _908), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                        float _4614 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                        float _3247 = _3182 * _3223;
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3172) + _3248;
                        float _4625 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3253 = 1.0 - _3223;
                        float _3263 = (0.5 / (((_3252 * ((_3238 * _3253) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3223) * _3238))) * _3252;
                        float _4636 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3274 = (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3246 * _3246) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125))) * _3178;
                        _3026 = (_3193 * _3141.x) + _3099;
                        _3027 = (_3193 * _3141.y) + _3100;
                        _3028 = (_3193 * _3141.z) + _3101;
                        _3023 = (_3274 * _3158.x) + _3096;
                        _3024 = (_3274 * _3158.y) + _3097;
                        _3025 = (_3274 * _3158.z) + _3098;
                        if (_3103 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3103;
                        }
                    }
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                _2800 = frontier_phi_66_pred;
                _2810 = frontier_phi_66_pred_1;
                _2808 = frontier_phi_66_pred_2;
                _2806 = frontier_phi_66_pred_3;
                _2804 = frontier_phi_66_pred_4;
                _2802 = frontier_phi_66_pred_5;
                uint _2958 = _2957 + 1u;
                if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2951 = _2800;
                    _2952 = _2802;
                    _2953 = _2804;
                    _2954 = _2806;
                    _2955 = _2808;
                    _2956 = _2810;
                    _2957 = _2958;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
        }
        uvec4 _2813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2814 = _2813.z;
        uint _2816 = (_2814 >> 8u) & 15u;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((4294967295u << _2816) & _2698) == 0u)
        {
            _2919 = _2799;
            _2921 = _2801;
            _2923 = _2803;
            _2925 = _2805;
            _2927 = _2807;
            _2929 = _2809;
        }
        else
        {
            float _2944 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
            float _2945 = _2944 * _2652;
            float _2946 = _2944 * _2653;
            float _2947 = _2944 * _2654;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2816 < ((_2814 >> 12u) & 15u))
            {
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _3079 = _2799;
                float _3080 = _2801;
                float _3081 = _2803;
                float _3082 = _2805;
                float _3083 = _2807;
                float _3084 = _2809;
                uint _3085 = _2816;
                uint _3094;
                bool _3095;
                for (;;)
                {
                    _3094 = texelFetch(g_lightClassification, int((((_2692 << 5u) + (_2678 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                    _3095 = _3094 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3095)
                    {
                        frontier_phi_77_pred = _3084;
                        frontier_phi_77_pred_1 = _3083;
                        frontier_phi_77_pred_2 = _3082;
                        frontier_phi_77_pred_3 = _3081;
                        frontier_phi_77_pred_4 = _3080;
                        frontier_phi_77_pred_5 = _3079;
                    }
                    else
                    {
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        uint _3307 = _3094;
                        uint _3308;
                        vec4 _3333;
                        float _3334;
                        vec4 _3349;
                        vec3 _3361;
                        vec4 _3376;
                        vec4 _3391;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3318 = ((_3085 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3307));
                            _3308 = (_3307 + 4294967295u) & _3307;
                            uint _3320 = _3318 * 40u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3334 = _3333.w;
                            uint _3336 = (_3318 * 40u) + 4u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3318 * 40u) + 8u;
                            _3361 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x));
                            uint _3363 = (_3318 * 40u) + 16u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3318 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3318 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3318 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_2654, _3425.z, fma(_2653, _3425.y, _3425.x * _2652)) + _3425.w;
                            _3438 = !((fma(_2654, _3406.z, fma(_2653, _3406.y, _3406.x * _2652)) + _3406.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3333.x - _2652;
                                float _3466 = _3333.y - _2653;
                                float _3467 = _3333.z - _2654;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3334 * _3334));
                                float _4647 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3483 = sqrt(_3468) * _3349.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_902, _905, _908))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_2654, _3376.z, fma(_2653, _3376.y, _3376.x * _2652)) + _3376.w) / _3437;
                                float _3497 = (fma(_2654, _3391.z, fma(_2653, _3391.y, _3391.x * _2652)) + _3391.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4663 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _962;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2945;
                                float _3527 = _3473 - _2946;
                                float _3528 = _3474 - _2947;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_902, _905, _908), vec3((-0.0) - _2945, (-0.0) - _2946, (-0.0) - _2947));
                                float _4674 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3540 = dot(vec3(_902, _905, _908), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4685 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_902, _905, _908), vec3(_3472, _3473, _3474))) + _3549;
                                float _4696 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4707 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3503 * _3349.y;
                                frontier_phi_83_pred_1 = _3503 * _3349.x;
                                frontier_phi_83_pred_2 = _3577 * _3361.z;
                                frontier_phi_83_pred_3 = _3577 * _3361.y;
                                frontier_phi_83_pred_4 = _3577 * _3361.x;
                                frontier_phi_83_pred_5 = _3503 * _3349.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3585 = frontier_phi_83_pred;
                            _3584 = frontier_phi_83_pred_1;
                            _3583 = frontier_phi_83_pred_2;
                            _3582 = frontier_phi_83_pred_3;
                            _3581 = frontier_phi_83_pred_4;
                            _3586 = frontier_phi_83_pred_5;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            if (_3308 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3308;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3293;
                        frontier_phi_77_pred_1 = _3292;
                        frontier_phi_77_pred_2 = _3291;
                        frontier_phi_77_pred_3 = _3290;
                        frontier_phi_77_pred_4 = _3289;
                        frontier_phi_77_pred_5 = _3288;
                    }
                    _2930 = frontier_phi_77_pred;
                    _2928 = frontier_phi_77_pred_1;
                    _2926 = frontier_phi_77_pred_2;
                    _2924 = frontier_phi_77_pred_3;
                    _2922 = frontier_phi_77_pred_4;
                    _2920 = frontier_phi_77_pred_5;
                    uint _3086 = _3085 + 1u;
                    if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3079 = _2920;
                        _3080 = _2922;
                        _3081 = _2924;
                        _3082 = _2926;
                        _3083 = _2928;
                        _3084 = _2930;
                        _3085 = _3086;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2924;
                frontier_phi_58_59_ladder_1 = _2930;
                frontier_phi_58_59_ladder_2 = _2928;
                frontier_phi_58_59_ladder_3 = _2926;
                frontier_phi_58_59_ladder_4 = _2922;
                frontier_phi_58_59_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_58_59_ladder = _2803;
                frontier_phi_58_59_ladder_1 = _2809;
                frontier_phi_58_59_ladder_2 = _2807;
                frontier_phi_58_59_ladder_3 = _2805;
                frontier_phi_58_59_ladder_4 = _2801;
                frontier_phi_58_59_ladder_5 = _2799;
            }
            _2919 = frontier_phi_58_59_ladder_5;
            _2921 = frontier_phi_58_59_ladder_4;
            _2923 = frontier_phi_58_59_ladder;
            _2925 = frontier_phi_58_59_ladder_3;
            _2927 = frontier_phi_58_59_ladder_2;
            _2929 = frontier_phi_58_59_ladder_1;
        }
        float _2934 = isnan(1.0) ? _946 : (isnan(_946) ? 1.0 : min(_946, 1.0));
        _2711 = (_2934 * _2925) + _2163;
        _2713 = (_2934 * _2927) + _2165;
        _2715 = (_2934 * _2929) + _2167;
        _2717 = ((_2919 * 0.039999999105930328369140625) * _2934) + _2496;
        _2719 = ((_2921 * 0.039999999105930328369140625) * _2934) + _2498;
        _2721 = ((_2923 * 0.039999999105930328369140625) * _2934) + _2500;
    }
    else
    {
        _2711 = _2163;
        _2713 = _2165;
        _2715 = _2167;
        _2717 = _2496;
        _2719 = _2498;
        _2721 = _2500;
    }
    float _4723 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4734 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4745 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2738 = ((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2711 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _946))) + ((_2717 + ((isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2739 = ((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2713 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _946))) + ((_2719 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2740 = ((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2715 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _946))) + ((_2721 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    uint _2741 = _255 + 6u;
    float _2749 = _883 / cbSceneParam._m0[86u].x;
    float _2750 = _884 / cbSceneParam._m0[86u].y;
    vec4 _2764 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2766 = _2764.x;
    float _2767 = _2764.y;
    float _2768 = _2764.z;
    float _2769 = _2764.w;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _2824 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _2825 = _2824 / _805;
        float _2836 = _2825 * _856;
        float _2837 = _857 * _2825;
        float _2838 = (-0.0) - _2837;
        float _2839 = _2825 * _858;
        float _2841 = (cbSceneParam._m0[77u].w * _2838) / _2824;
        float _2842 = _2841 + cbSceneParam._m0[79u].w;
        float _2843 = cbSceneParam._m0[79u].w - _2837;
        float _2849 = sqrt(((_2836 * _2836) + (_2837 * _2837)) + (_2839 * _2839));
        float _2852 = (1.0 - (cbSceneParam._m0[77u].w / _2824)) * _2849;
        float _2857 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2859 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3036;
        if (abs((_2838 - _2841) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3036 = ((((_2842 > 0.0) ? exp2(_2857 * _2842) : (2.0 - exp2(_2859 * _2842))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2852;
        }
        else
        {
            float _2980 = 1.0 / cbSceneParam._m0[80u].x;
            float _2981 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : max(_2842, _2843));
            float _2982 = isnan(_2843) ? _2842 : (isnan(_2842) ? _2843 : min(_2842, _2843));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            _3036 = ((abs(_2849 / _2838) * cbSceneParam._m0[80u].y) * ((((_2991 - _2992) * 2.0) - ((exp2(_2857 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)))) - exp2(_2857 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))))) * _2980)) - ((exp2(_2859 * _2991) - exp2(_2859 * _2992)) * _2980))) + (_2852 * cbSceneParam._m0[80u].z);
        }
        vec4 _3038 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2749, _2750, 1.0), 0.0);
        float _3047 = exp2((_3036 * (-1.44269502162933349609375)) * (1.0 - _3038.w));
        float _3048 = log2(_3047);
        float _3064 = log2(_2769);
        _2861 = (exp2(_3064 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].x)) * _3038.x) / cbSceneParam._m0[78u].x)) + _2766;
        _2863 = (exp2(_3064 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].y)) * _3038.y) / cbSceneParam._m0[78u].y)) + _2767;
        _2865 = (exp2(_3064 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].z)) * _3038.z) / cbSceneParam._m0[78u].z)) + _2768;
        _2867 = _3047 * _2769;
    }
    else
    {
        _2861 = _2766;
        _2863 = _2767;
        _2865 = _2768;
        _2867 = _2769;
    }
    bool _3074;
    vec4 _2877;
    vec4 _2899;
    float _2901;
    float _2905;
    float _2906;
    float _2907;
    float _2908;
    bool _2918;
    for (;;)
    {
        _2877 = cbMatDynParam._m0[0u];
        float _2879 = roundEven(_2877.y);
        bool _2880 = _2879 == 3.0;
        float _2881 = log2(_2867);
        float _2888 = exp2(_2881 * cbSceneParam._m0[78u].x) * _2738;
        float _2889 = exp2(_2881 * cbSceneParam._m0[78u].y) * _2739;
        float _2890 = exp2(_2881 * cbSceneParam._m0[78u].z) * _2740;
        float _2897 = _872 + (-0.5);
        _2899 = cbMtdParam._m0[1u];
        _2901 = _2899.y * _2897;
        float _2904 = (_2879 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2905 = _2904 * (_2880 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2861)));
        _2906 = _2904 * (_2880 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2863)));
        _2907 = _2904 * (_2880 ? _2890 : (_2890 + (cbSceneParam._m0[72u].w * _2865)));
        _2908 = _2897 * 0.999000012874603271484375;
        _2918 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2918)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2908) < 0.5)
            {
                _3074 = true;
                break;
            }
        }
        uint _3015 = _921 + uint(_2877.w);
        if ((cbInstanceData._m0[_3015].w < 1.0) && ((cbInstanceData._m0[_3015].w + _2908) < 0.5))
        {
            _3074 = true;
            break;
        }
        if ((_2901 + 1.0) < _2899.x)
        {
            _3074 = true;
            break;
        }
        _3074 = false;
        break;
    }
    float _3279;
    if (_3074)
    {
        discard_state = true;
        _3279 = 0.0;
    }
    else
    {
        _3279 = cbInstanceData._m0[_2741].w;
    }
    SV_Target.x = _2905;
    SV_Target.y = _2906;
    SV_Target.z = _2907;
    SV_Target.w = _3279;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2741].w;
    discard_exit();
}


