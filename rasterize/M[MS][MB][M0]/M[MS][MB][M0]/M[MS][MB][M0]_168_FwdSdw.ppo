#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1102;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _341 = _339.x;
    float _351 = dot(vec4(_341, _339.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _368 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_341 - _351) * cbMtdParam._m0[24u].x) + _351) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3692 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _376 = (_369 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _377 = (_369 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _378 = (_369 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _252) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _427 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _441 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_417 - _427) * cbMtdParam._m0[24u].x) + _427) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3703 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _449 = (_442 * ((_395.x * cbMtdParam._m0[13u].x) - _376)) + _376;
    float _450 = (_442 * ((_395.y * cbMtdParam._m0[13u].y) - _377)) + _377;
    float _451 = (_442 * ((_395.z * cbMtdParam._m0[13u].z) - _378)) + _378;
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    float _492 = ((_464.x - _483) * _369) + _483;
    float _493 = ((_464.y - _484) * _369) + _484;
    float _494 = ((_464.z - _485) * _369) + _485;
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _519 = ((_506.z - _494) * _442) + _494;
    float _522 = ((((_506.x - _492) * _442) + _492) * 2.0) + (-1.0);
    float _524 = ((((_506.y - _493) * _442) + _493) * 2.0) + (-1.0);
    float _525 = dot(vec2(_522, _524), vec2(_522, _524));
    float _3714 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _556 = (((_544.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _522;
    float _557 = (((_544.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _524;
    float _561 = (cbMtdParam._m0[19u].w * (_544.z - _519)) + _519;
    float _566 = cbMtdParam._m0[22u].x + _544.w;
    float _569 = fma(_530, _219 * NORMAL.x, fma(_557, _226 * TANGENT.x, (_212 * _204) * _556));
    float _572 = fma(_530, _219 * NORMAL.y, fma(_557, _226 * TANGENT.y, (_212 * _205) * _556));
    float _575 = fma(_530, _219 * NORMAL.z, fma(_557, _226 * TANGENT.z, (_212 * _206) * _556));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    float _580 = _579 * _569;
    float _581 = _579 * _572;
    float _582 = _579 * _575;
    float _3725 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _583 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3747 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3758 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3769 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _601 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _653 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _643);
    float _654 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _643);
    float _655 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _643);
    float _659 = inversesqrt(dot(vec3(_653, _654, _655), vec3(_653, _654, _655)));
    float _660 = _653 * _659;
    float _661 = _654 * _659;
    float _662 = _655 * _659;
    float _668 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _669 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _687 = fma(_582, cbSceneParam._m0[5u].z, fma(_581, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _580));
    float _690 = fma(_582, cbSceneParam._m0[6u].z, fma(_581, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _580));
    float _693 = fma(_582, cbSceneParam._m0[7u].z, fma(_581, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _580));
    uint _707 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3780 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    vec4 _727 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _668, cbSceneParam._m0[86u].y * _669));
    float _731 = ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * TEXCOORD_5.w) * _727.x;
    float _732 = dot(vec3(_580, _581, _582), vec3(_660, _661, _662));
    float _735 = _732 * 2.0;
    float _739 = (_735 * _580) - _660;
    float _740 = (_735 * _581) - _661;
    float _741 = (_735 * _582) - _662;
    float _745 = abs(dot(vec3(_660, _661, _662), vec3(_580, _581, _582)));
    float _3813 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _747 = sqrt(_583);
    float _760 = exp2((_747 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_747 * 3.0));
    float _792 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_800, cbModelParam._m0[26u].z, fma(_796, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792));
        float _830 = fma(_800, cbModelParam._m0[27u].z, fma(_796, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792));
        float _834 = fma(_800, cbModelParam._m0[28u].z, fma(_796, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792));
        float _859 = _792 + _580;
        float _860 = _796 + _581;
        float _861 = _800 + _582;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_580, _581, _582), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3861 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_580, _581, _582), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3894 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_580, _581, _582), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3927 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_800, cbModelParam._m0[30u].z, fma(_796, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _792));
        float _1144 = fma(_800, cbModelParam._m0[31u].z, fma(_796, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _792));
        float _1148 = fma(_800, cbModelParam._m0[32u].z, fma(_796, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _792));
        float _1171 = _792 + _580;
        float _1172 = _796 + _581;
        float _1173 = _800 + _582;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_580, _581, _582), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3990 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_580, _581, _582), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4023 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_580, _581, _582), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4056 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1102;
        _1410 = _1102;
        _1411 = _1102;
        _1412 = _1102;
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1114)) + _1114;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1115)) + _1115;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1116)) + _1116;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _739 * 0.5;
    float _1478 = _740 * 0.5;
    float _1479 = _741 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1520;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1531;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1522 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1535 = (_1531 * cbModelParam._m0[1u].x) + (_1520 * (1.0 - cbModelParam._m0[1u].x));
    float _1545 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _583);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1545 : min(cbModelParam._m0[25u].z, _1545));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1595 = fma(_800, cbModelParam._m0[13u].z, fma(_796, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792)) + cbModelParam._m0[13u].w;
        float _1599 = fma(_800, cbModelParam._m0[14u].z, fma(_796, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792)) + cbModelParam._m0[14u].w;
        float _1603 = fma(_800, cbModelParam._m0[15u].z, fma(_796, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792)) + cbModelParam._m0[15u].w;
        float _1606 = fma(_741, cbModelParam._m0[13u].z, fma(_740, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739));
        float _1609 = fma(_741, cbModelParam._m0[14u].z, fma(_740, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739));
        float _1612 = fma(_741, cbModelParam._m0[15u].z, fma(_740, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739));
        float _1640;
        if (_1606 > 0.0)
        {
            _1640 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1640 = frontier_phi_14_12_ladder;
        }
        float _1811;
        if (_1609 > 0.0)
        {
            _1811 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1811 = frontier_phi_23_19_ladder;
        }
        float _2106;
        if (_1612 > 0.0)
        {
            _2106 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2106 = frontier_phi_35_30_ladder;
        }
        float _2108 = isnan(_1811) ? _1640 : (isnan(_1640) ? _1811 : min(_1640, _1811));
        float _2109 = isnan(_2106) ? _2108 : (isnan(_2108) ? _2106 : min(_2108, _2106));
        float _2113 = (_2109 * _1606) + _1595;
        float _2114 = (_2109 * _1609) + _1599;
        float _2115 = (_2109 * _1612) + _1603;
        float _2116 = _2109 * 9.9999997473787516355514526367188e-05;
        float _2118 = (-1.0) - _2116;
        float _2120 = _2116 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2115 > _2120) || ((_2115 < _2118) || ((_2114 > _2120) || ((_2114 < _2118) || ((_2113 < _2118) || (_2113 > _2120))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2115, cbModelParam._m0[9u].z, fma(_2114, cbModelParam._m0[9u].y, _2113 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2115, cbModelParam._m0[10u].z, fma(_2114, cbModelParam._m0[10u].y, _2113 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2115, cbModelParam._m0[11u].z, fma(_2114, cbModelParam._m0[11u].y, _2113 * cbModelParam._m0[11u].x))), _1546);
            frontier_phi_13_35_ladder = _2260.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2260.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2260.x * cbModelParam._m0[1u].y;
        }
        _1628 = frontier_phi_13_35_ladder_2;
        _1630 = frontier_phi_13_35_ladder_1;
        _1632 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_739, _740, _741), _1546);
        _1628 = _1616.x * cbModelParam._m0[1u].y;
        _1630 = _1616.y * cbModelParam._m0[1u].y;
        _1632 = _1616.z * cbModelParam._m0[1u].y;
    }
    float _1636 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _583);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1636 : min(cbModelParam._m0[25u].w, _1636));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1692 = fma(_800, cbModelParam._m0[21u].z, fma(_796, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792)) + cbModelParam._m0[21u].w;
        float _1696 = fma(_800, cbModelParam._m0[22u].z, fma(_796, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792)) + cbModelParam._m0[22u].w;
        float _1700 = fma(_800, cbModelParam._m0[23u].z, fma(_796, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792)) + cbModelParam._m0[23u].w;
        float _1703 = fma(_741, cbModelParam._m0[21u].z, fma(_740, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739));
        float _1706 = fma(_741, cbModelParam._m0[22u].z, fma(_740, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739));
        float _1709 = fma(_741, cbModelParam._m0[23u].z, fma(_740, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739));
        float _1816;
        if (_1703 > 0.0)
        {
            _1816 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1816 = frontier_phi_25_21_ladder;
        }
        float _2133;
        if (_1706 > 0.0)
        {
            _2133 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2133 = frontier_phi_37_32_ladder;
        }
        float _2460;
        if (_1709 > 0.0)
        {
            _2460 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2460 = frontier_phi_47_44_ladder;
        }
        float _2462 = isnan(_2133) ? _1816 : (isnan(_1816) ? _2133 : min(_1816, _2133));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1703) + _1692;
        float _2468 = (_2463 * _1706) + _1696;
        float _2469 = (_2463 * _1709) + _1700;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1637);
            frontier_phi_22_47_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1728 = frontier_phi_22_47_ladder_2;
        _1730 = frontier_phi_22_47_ladder_1;
        _1732 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_739, _740, _741), _1637);
        _1728 = _1712.x * cbModelParam._m0[1u].z;
        _1730 = _1712.y * cbModelParam._m0[1u].z;
        _1732 = _1712.z * cbModelParam._m0[1u].z;
    }
    float _1744 = ((((1.0 - _760) * ((_747 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_760 * _747)) * _731;
    float _1745 = _1744 * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1746 = _1744 * ((cbModelParam._m0[1u].w * (_1730 - _1630)) + _1630);
    float _1747 = _1744 * ((cbModelParam._m0[1u].w * (_1732 - _1632)) + _1632);
    float _1750 = fma(_1747, cbSceneParam._m0[89u].z, fma(_1746, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1753 = fma(_1747, cbSceneParam._m0[90u].z, fma(_1746, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1756 = fma(_1747, cbSceneParam._m0[91u].z, fma(_1746, cbSceneParam._m0[91u].y, _1745 * cbSceneParam._m0[91u].x));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1798 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1802 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1803 = _1790 / _1802;
    float _1804 = _1794 / _1802;
    float _1805 = _1798 / _1802;
    float _1952;
    float _1953;
    float _1954;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1832 = ((uint(_1805 > cbSceneParam._m0[59u].y) + uint(_1805 > cbSceneParam._m0[59u].x)) + uint(_1805 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1833 = _1832 + 43u;
        uint _1841 = _1832 + 44u;
        uint _1849 = _1832 + 45u;
        uint _1857 = _1832 + 46u;
        float _1868 = fma(_1802, cbSceneParam._m0[_1833].w, fma(_1798, cbSceneParam._m0[_1833].z, fma(_1794, cbSceneParam._m0[_1833].y, _1790 * cbSceneParam._m0[_1833].x)));
        float _1872 = fma(_1802, cbSceneParam._m0[_1841].w, fma(_1798, cbSceneParam._m0[_1841].z, fma(_1794, cbSceneParam._m0[_1841].y, _1790 * cbSceneParam._m0[_1841].x)));
        float _1880 = fma(_1802, cbSceneParam._m0[_1857].w, fma(_1798, cbSceneParam._m0[_1857].z, fma(_1794, cbSceneParam._m0[_1857].y, _1790 * cbSceneParam._m0[_1857].x)));
        float _1885 = cbSceneParam._m0[33u].z * _1880;
        float _1887 = cbSceneParam._m0[33u].w * _1880;
        float _1890 = fma(_1802, cbSceneParam._m0[_1849].w, fma(_1798, cbSceneParam._m0[_1849].z, fma(_1794, cbSceneParam._m0[_1849].y, _1790 * cbSceneParam._m0[_1849].x))) / _1880;
        float _1938 = (cbSceneParam._m0[33u].x - sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805))) * cbSceneParam._m0[33u].y;
        float _4182 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1945 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 + _1868) / _1880, (_1887 + _1872) / _1880), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1887 + _1868) / _1880, (_1872 - _1885) / _1880), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 - _1885) / _1880, (_1872 - _1887) / _1880), _1890), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1868 - _1887) / _1880, (_1885 + _1872) / _1880), _1890), 0.0)).x), vec4(0.25)));
        _1952 = 1.0 - (_1945 * cbSceneParam._m0[34u].x);
        _1953 = 1.0 - (_1945 * cbSceneParam._m0[34u].y);
        _1954 = 1.0 - (_1945 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1952 = 1.0;
        _1953 = 1.0;
        _1954 = 1.0;
    }
    float _2018;
    float _2020;
    float _2022;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2006 = fma(_1802, cbSceneParam._m0[63u].w, fma(_1798, cbSceneParam._m0[63u].z, fma(_1794, cbSceneParam._m0[63u].y, _1790 * cbSceneParam._m0[63u].x)));
        float _2007 = fma(_1802, cbSceneParam._m0[60u].w, fma(_1798, cbSceneParam._m0[60u].z, fma(_1794, cbSceneParam._m0[60u].y, _1790 * cbSceneParam._m0[60u].x))) / _2006;
        float _2008 = fma(_1802, cbSceneParam._m0[61u].w, fma(_1798, cbSceneParam._m0[61u].z, fma(_1794, cbSceneParam._m0[61u].y, _1790 * cbSceneParam._m0[61u].x))) / _2006;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2007 >= cbSceneParam._m0[64u].x) && (_2008 >= cbSceneParam._m0[64u].y)) && (_2007 <= cbSceneParam._m0[64u].z)) && (_2008 <= cbSceneParam._m0[64u].w))
        {
            float _2146 = fma(_1802, cbSceneParam._m0[62u].w, fma(_1798, cbSceneParam._m0[62u].z, fma(_1794, cbSceneParam._m0[62u].y, _1790 * cbSceneParam._m0[62u].x))) / _2006;
            float _2150 = isnan(cbSceneParam._m0[41u].w) ? _2146 : (isnan(_2146) ? cbSceneParam._m0[41u].w : max(_2146, cbSceneParam._m0[41u].w));
            float _2193 = (cbSceneParam._m0[33u].x - sqrt(((_1804 * _1804) + (_1803 * _1803)) + (_1805 * _1805))) * cbSceneParam._m0[33u].y;
            float _4198 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
            float _2200 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2007, cbSceneParam._m0[33u].w + _2008), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2007, _2008 - cbSceneParam._m0[33u].z), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2007 - cbSceneParam._m0[33u].z, _2008 - cbSceneParam._m0[33u].w), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2007 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2008), _2150), 0.0)).x), vec4(0.25)));
            float _2204 = 1.0 - (_2200 * cbSceneParam._m0[34u].x);
            float _2205 = 1.0 - (_2200 * cbSceneParam._m0[34u].y);
            float _2206 = 1.0 - (_2200 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2206) ? _1954 : (isnan(_1954) ? _2206 : min(_1954, _2206));
            frontier_phi_34_33_ladder_1 = isnan(_2205) ? _1953 : (isnan(_1953) ? _2205 : min(_1953, _2205));
            frontier_phi_34_33_ladder_2 = isnan(_2204) ? _1952 : (isnan(_1952) ? _2204 : min(_1952, _2204));
        }
        else
        {
            frontier_phi_34_33_ladder = _1954;
            frontier_phi_34_33_ladder_1 = _1953;
            frontier_phi_34_33_ladder_2 = _1952;
        }
        _2018 = frontier_phi_34_33_ladder_2;
        _2020 = frontier_phi_34_33_ladder_1;
        _2022 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2018 = _1952;
        _2020 = _1953;
        _2022 = _1954;
    }
    uvec4 _2027 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2029 = _2027.x * 14u;
    uint _2030 = _2029 + 13u;
    float _2037 = _731 + (-1.0);
    float _2042 = (cbLight._m0[_2030].x * _2037) + 1.0;
    float _2043 = (cbLight._m0[_2030].y * _2037) + 1.0;
    float _2044 = (cbLight._m0[_2030].z * _2037) + 1.0;
    float _2045 = (cbLight._m0[_2030].w * _2037) + 1.0;
    uint _2046 = _2029 + 5u;
    float _2052 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
    uint _2056 = _2029 + 4u;
    float _2065 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
    uint _2069 = _2029 | 1u;
    float _2080 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_580, _581, _582));
    float _2083 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_580, _581, _582));
    float _4234 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _4245 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2088 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2090 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2097 = ((cbLight._m0[_2046].x * _2052) * _2090) + (((cbLight._m0[_2056].x * _2018) * _2065) * _2088);
    float _2098 = ((_2052 * cbLight._m0[_2046].y) * _2090) + (((cbLight._m0[_2056].y * _2020) * _2065) * _2088);
    float _2099 = ((_2052 * cbLight._m0[_2046].z) * _2090) + (((cbLight._m0[_2056].z * _2022) * _2065) * _2088);
    uvec4 _2103 = floatBitsToUint(cbLight._m0[_2029 + 12u]);
    bool _2105 = _2103.x == 0u;
    float _2207;
    float _2209;
    float _2211;
    if (_2105)
    {
        _2207 = _2097;
        _2209 = _2098;
        _2211 = _2099;
    }
    else
    {
        uint _2215 = _2029 + 6u;
        float _2231 = (dot(vec3(cbLight._m0[_2029 + 2u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4256 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2234 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2207 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2097;
        _2209 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2098;
        _2211 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2099;
    }
    bool _2214 = _2103.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2214)
    {
        _2269 = _2207;
        _2271 = _2209;
        _2273 = _2211;
    }
    else
    {
        uint _2431 = _2029 + 7u;
        float _2447 = (dot(vec3(cbLight._m0[_2029 + 3u].xyz), vec3(_580, _581, _582)) * 0.5) + 0.5;
        float _2448 = _2447 * _2447;
        float _4272 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2449 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2450 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2269 = (((cbLight._m0[_2431].x * 0.3183098733425140380859375) * _2449) * _2450) + _2207;
        _2271 = (((cbLight._m0[_2431].y * 0.3183098733425140380859375) * _2449) * _2450) + _2209;
        _2273 = (((cbLight._m0[_2431].z * 0.3183098733425140380859375) * _2449) * _2450) + _2211;
    }
    uint _2276 = _2029 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2029].w)) * _583) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2029].x + _660;
    float _2292 = cbLight._m0[_2029].y + _661;
    float _2293 = cbLight._m0[_2029].z + _662;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2029].xyz));
    float _4288 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _4299 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _2305 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2306 = dot(vec3(_580, _581, _582), vec3(_2298, _2299, _2300));
    float _4310 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2029].xyz), vec3(_2298, _2299, _2300));
    float _4321 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2330 = 1.0 - _2290;
    float _2341 = (0.5 / (((_2305 * ((_2304 * _2330) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2330) + _2290) * _2304))) * _2304;
    float _4332 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2357 = _2029 + 9u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _583) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2069].x + _660;
    float _2371 = cbLight._m0[_2069].y + _661;
    float _2372 = cbLight._m0[_2069].z + _662;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2069].xyz));
    float _4343 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2384 = dot(vec3(_580, _581, _582), vec3(_2377, _2378, _2379));
    float _4354 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2388 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2377, _2378, _2379));
    float _4365 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = _2369 * _2369;
    float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
    float _2405 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2406 = 1.0 - _2369;
    float _2416 = (0.5 / (((_2305 * ((_2383 * _2406) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2406) + _2369) * _2383))) * _2383;
    float _4376 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2418 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
    float _2428 = (((_2405 * cbLight._m0[_2357].x) * _2418) * _2052) + ((((cbLight._m0[_2276].x * _2018) * _2329) * _2343) * _2065);
    float _2429 = (((_2405 * cbLight._m0[_2357].y) * _2418) * _2052) + ((((cbLight._m0[_2276].y * _2020) * _2329) * _2343) * _2065);
    float _2430 = (((_2405 * cbLight._m0[_2357].z) * _2418) * _2052) + ((((cbLight._m0[_2276].z * _2022) * _2329) * _2343) * _2065);
    float _2486;
    float _2488;
    float _2490;
    if (_2105)
    {
        _2486 = _2428;
        _2488 = _2429;
        _2490 = _2430;
    }
    else
    {
        uint _2492 = _2029 + 2u;
        uint _2496 = _2029 + 10u;
        float _2510 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2492].w)) * _583) * 0.949999988079071044921875);
        float _2511 = _2510 * _2510;
        float _2512 = cbLight._m0[_2492].x + _660;
        float _2513 = cbLight._m0[_2492].y + _661;
        float _2514 = cbLight._m0[_2492].z + _662;
        float _2518 = inversesqrt(dot(vec3(_2512, _2513, _2514), vec3(_2512, _2513, _2514)));
        float _2519 = _2518 * _2512;
        float _2520 = _2518 * _2513;
        float _2521 = _2518 * _2514;
        float _2522 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2492].xyz));
        float _4387 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2526 = dot(vec3(_580, _581, _582), vec3(_2519, _2520, _2521));
        float _4398 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2529 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2530 = dot(vec3(cbLight._m0[_2492].xyz), vec3(_2519, _2520, _2521));
        float _4409 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2534 = _2511 * _2511;
        float _2538 = ((_2529 * _2529) * (_2534 + (-1.0))) + 1.0;
        float _2547 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2548 = 1.0 - _2511;
        float _2558 = (0.5 / (((_2305 * ((_2525 * _2548) + _2511)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2548) + _2511) * _2525))) * _2525;
        float _4420 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2534 / ((_2538 * _2538) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2044 : (isnan(_2044) ? 1.0 : min(_2044, 1.0));
        _2486 = (((_2547 * cbLight._m0[_2496].x) * _2560) * _2561) + _2428;
        _2488 = (((_2547 * cbLight._m0[_2496].y) * _2560) * _2561) + _2429;
        _2490 = (((_2547 * cbLight._m0[_2496].z) * _2560) * _2561) + _2430;
    }
    float _2592;
    float _2594;
    float _2596;
    if (_2214)
    {
        _2592 = _2486;
        _2594 = _2488;
        _2596 = _2490;
    }
    else
    {
        uint _2603 = _2029 + 3u;
        uint _2607 = _2029 + 11u;
        float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2603].w)) * _583) * 0.949999988079071044921875);
        float _2622 = _2621 * _2621;
        float _2623 = cbLight._m0[_2603].x + _660;
        float _2624 = cbLight._m0[_2603].y + _661;
        float _2625 = cbLight._m0[_2603].z + _662;
        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
        float _2630 = _2629 * _2623;
        float _2631 = _2629 * _2624;
        float _2632 = _2629 * _2625;
        float _2633 = dot(vec3(_580, _581, _582), vec3(cbLight._m0[_2603].xyz));
        float _4436 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2637 = dot(vec3(_580, _581, _582), vec3(_2630, _2631, _2632));
        float _4447 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2641 = dot(vec3(cbLight._m0[_2603].xyz), vec3(_2630, _2631, _2632));
        float _4458 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2645 = _2622 * _2622;
        float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
        float _2658 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2659 = 1.0 - _2622;
        float _2669 = (0.5 / (((_2305 * ((_2636 * _2659) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2659) + _2622) * _2636))) * _2636;
        float _4469 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2045 : (isnan(_2045) ? 1.0 : min(_2045, 1.0));
        _2592 = (((_2658 * cbLight._m0[_2607].x) * _2671) * _2672) + _2486;
        _2594 = (((_2658 * cbLight._m0[_2607].y) * _2671) * _2672) + _2488;
        _2596 = (((_2658 * cbLight._m0[_2607].z) * _2671) * _2672) + _2490;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2027.y == 0u)
    {
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.x;
        uint _2705 = uint((float(_2693.y) * floor(float(uint(cbSceneParam._m0[85u].y * _669) / _2694))) + floor(float(uint(cbSceneParam._m0[85u].x * _668) / _2694)));
        float _2715 = (log2(_1805 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2716 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        uint _2719 = uint(isnan(14.0) ? _2716 : (isnan(_2716) ? 14.0 : min(_2716, 14.0)));
        uvec4 _2724 = texelFetch(g_lightClusterGridBuffer, int(((_2719 << 2u) + (_2705 << 6u)) >> 2u));
        uint _2725 = _2724.x;
        uint _2726 = _2693.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2726 >> 4u) & 15u)) + 4294967295u) & _2725) == 0u) || ((_2726 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            uint _2956 = 0u;
            uint _2965;
            bool _2966;
            for (;;)
            {
                _2965 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                _2966 = _2965 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2966)
                {
                    frontier_phi_66_pred = _2955;
                    frontier_phi_66_pred_1 = _2954;
                    frontier_phi_66_pred_2 = _2953;
                    frontier_phi_66_pred_3 = _2952;
                    frontier_phi_66_pred_4 = _2951;
                    frontier_phi_66_pred_5 = _2950;
                }
                else
                {
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    uint _3080;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2965;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    for (;;)
                    {
                        uint _3084 = uint(findLSB(_3080)) + (_2956 << 5u);
                        uint _3081 = (_3080 + 4294967295u) & _3080;
                        uint _3086 = _3084 * 48u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3106 = (_3084 * 48u) + 4u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3125 = (_3084 * 48u) + 8u;
                        vec3 _3136 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x));
                        float _3140 = _3100.x - _1803;
                        float _3141 = _3100.y - _1804;
                        float _3142 = _3100.z - _1805;
                        float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                        float _3146 = inversesqrt(_3143);
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3150 = dot(vec3(_687, _690, _693), vec3(_3147, _3148, _3149));
                        float _3155 = 1.0 - (_3143 * _3100.w);
                        float _4495 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3157 = sqrt(_3143) * _3119.w;
                        float _3160 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3150) + _3161;
                        float _3167 = _3157 * _3157;
                        float _3171 = ((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3156) / ((_3167 * 0.699999988079071044921875) + 1.0);
                        float _3175 = (-0.0) - _1803;
                        float _3176 = (-0.0) - _1804;
                        float _3177 = (-0.0) - _1805;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3191 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _747;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3182 + _3147;
                        float _3203 = _3183 + _3148;
                        float _3204 = _3184 + _3149;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_687, _690, _693), vec3(_3182, _3183, _3184));
                        float _4511 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3216 = dot(vec3(_687, _690, _693), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4522 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3160 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3150) + _3225;
                        float _4533 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4544 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) / ((_3223 * _3223) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125))) * _3156;
                        _3009 = (_3171 * _3119.x) + _3077;
                        _3010 = (_3171 * _3119.y) + _3078;
                        _3011 = (_3171 * _3119.z) + _3079;
                        _3006 = (_3251 * _3136.x) + _3074;
                        _3007 = (_3251 * _3136.y) + _3075;
                        _3008 = (_3251 * _3136.z) + _3076;
                        if (_3081 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3081;
                        }
                    }
                    frontier_phi_66_pred = _3011;
                    frontier_phi_66_pred_1 = _3010;
                    frontier_phi_66_pred_2 = _3009;
                    frontier_phi_66_pred_3 = _3008;
                    frontier_phi_66_pred_4 = _3007;
                    frontier_phi_66_pred_5 = _3006;
                }
                _2816 = frontier_phi_66_pred;
                _2814 = frontier_phi_66_pred_1;
                _2812 = frontier_phi_66_pred_2;
                _2810 = frontier_phi_66_pred_3;
                _2808 = frontier_phi_66_pred_4;
                _2806 = frontier_phi_66_pred_5;
                uint _2957 = _2956 + 1u;
                if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2950 = _2806;
                    _2951 = _2808;
                    _2952 = _2810;
                    _2953 = _2812;
                    _2954 = _2814;
                    _2955 = _2816;
                    _2956 = _2957;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        if (((4294967295u << _2822) & _2725) == 0u)
        {
            _2918 = _2805;
            _2920 = _2807;
            _2922 = _2809;
            _2924 = _2811;
            _2926 = _2813;
            _2928 = _2815;
        }
        else
        {
            float _2943 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
            float _2944 = _2943 * _1803;
            float _2945 = _2943 * _1804;
            float _2946 = _2943 * _1805;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _3057 = _2805;
                float _3058 = _2807;
                float _3059 = _2809;
                float _3060 = _2811;
                float _3061 = _2813;
                float _3062 = _2815;
                uint _3063 = _2822;
                uint _3072;
                bool _3073;
                for (;;)
                {
                    _3072 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                    _3073 = _3072 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3073)
                    {
                        frontier_phi_72_pred = _3062;
                        frontier_phi_72_pred_1 = _3061;
                        frontier_phi_72_pred_2 = _3060;
                        frontier_phi_72_pred_3 = _3059;
                        frontier_phi_72_pred_4 = _3058;
                        frontier_phi_72_pred_5 = _3057;
                    }
                    else
                    {
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3269 = _3057;
                        float _3270 = _3058;
                        float _3271 = _3059;
                        float _3272 = _3060;
                        float _3273 = _3061;
                        float _3274 = _3062;
                        uint _3275 = _3072;
                        uint _3276;
                        vec4 _3301;
                        float _3302;
                        vec4 _3317;
                        vec3 _3329;
                        vec4 _3344;
                        vec4 _3359;
                        float _3405;
                        bool _3406;
                        for (;;)
                        {
                            uint _3286 = ((_3063 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3275));
                            _3276 = (_3275 + 4294967295u) & _3275;
                            uint _3288 = _3286 * 40u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            _3302 = _3301.w;
                            uint _3304 = (_3286 * 40u) + 4u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3286 * 40u) + 8u;
                            _3329 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x));
                            uint _3331 = (_3286 * 40u) + 16u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3286 * 40u) + 20u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            uint _3361 = (_3286 * 40u) + 24u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3380 = (_3286 * 40u) + 28u;
                            vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3405 = fma(_1805, _3393.z, fma(_1804, _3393.y, _3393.x * _1803)) + _3393.w;
                            _3406 = !((fma(_1805, _3374.z, fma(_1804, _3374.y, _3374.x * _1803)) + _3374.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3406)
                            {
                                float _3433 = _3301.x - _1803;
                                float _3434 = _3301.y - _1804;
                                float _3435 = _3301.z - _1805;
                                float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                                float _3439 = inversesqrt(_3436);
                                float _3440 = _3439 * _3433;
                                float _3441 = _3439 * _3434;
                                float _3442 = _3439 * _3435;
                                float _3446 = 1.0 - (_3436 / (_3302 * _3302));
                                float _4555 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3451 = sqrt(_3436) * _3317.w;
                                float _3453 = 1.39999997615814208984375 / (_3451 + 1.39999997615814208984375);
                                float _3454 = _3453 * _3453;
                                float _3457 = ((1.0 - _3454) * dot(vec3(_3440, _3441, _3442), vec3(_687, _690, _693))) + _3454;
                                float _3460 = _3451 * _3451;
                                float _3464 = (fma(_1805, _3344.z, fma(_1804, _3344.y, _3344.x * _1803)) + _3344.w) / _3405;
                                float _3465 = (fma(_1805, _3359.z, fma(_1804, _3359.y, _3359.x * _1803)) + _3359.w) / _3405;
                                float _3469 = 1.0 - dot(vec2(_3464, _3465), vec2(_3464, _3465));
                                float _4571 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3471 = _3470 * (((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3447) / ((_3460 * 0.699999988079071044921875) + 1.0));
                                float _3483 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                                float _3484 = 1.0 - _747;
                                float _3491 = sqrt(1.0 - ((1.0 - (_3484 * _3484)) * (1.0 - (_3483 * _3483))));
                                float _3492 = _3491 * _3491;
                                float _3493 = _3492 * _3492;
                                float _3494 = _3440 - _2944;
                                float _3495 = _3441 - _2945;
                                float _3496 = _3442 - _2946;
                                float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                                float _3504 = dot(vec3(_687, _690, _693), vec3((-0.0) - _2944, (-0.0) - _2945, (-0.0) - _2946));
                                float _4582 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3507 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3508 = dot(vec3(_687, _690, _693), vec3(_3500 * _3494, _3500 * _3495, _3500 * _3496));
                                float _4593 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3515 = ((_3511 * _3511) * (_3493 + (-1.0))) + 1.0;
                                float _3516 = _3453 * _3492;
                                float _3517 = _3516 * _3516;
                                float _3523 = ((1.0 - _3517) * dot(vec3(_687, _690, _693), vec3(_3440, _3441, _3442))) + _3517;
                                float _4604 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3525 = 1.0 - _3492;
                                float _3535 = (0.5 / (((_3524 * ((_3507 * _3525) + _3492)) + 9.9999999392252902907785028219223e-09) + (((_3524 * _3525) + _3492) * _3507))) * _3524;
                                float _4615 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3545 = (_3470 * _3447) * (((_3493 * 3.1415927410125732421875) * (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) / ((_3515 * _3515) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3471 * _3317.y;
                                frontier_phi_78_pred_1 = _3471 * _3317.x;
                                frontier_phi_78_pred_2 = _3545 * _3329.z;
                                frontier_phi_78_pred_3 = _3545 * _3329.y;
                                frontier_phi_78_pred_4 = _3545 * _3329.x;
                                frontier_phi_78_pred_5 = _3471 * _3317.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3553 = frontier_phi_78_pred;
                            _3552 = frontier_phi_78_pred_1;
                            _3551 = frontier_phi_78_pred_2;
                            _3550 = frontier_phi_78_pred_3;
                            _3549 = frontier_phi_78_pred_4;
                            _3554 = frontier_phi_78_pred_5;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3256 = _3549 + _3269;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            if (_3276 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3276;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3261;
                        frontier_phi_72_pred_1 = _3260;
                        frontier_phi_72_pred_2 = _3259;
                        frontier_phi_72_pred_3 = _3258;
                        frontier_phi_72_pred_4 = _3257;
                        frontier_phi_72_pred_5 = _3256;
                    }
                    _2929 = frontier_phi_72_pred;
                    _2927 = frontier_phi_72_pred_1;
                    _2925 = frontier_phi_72_pred_2;
                    _2923 = frontier_phi_72_pred_3;
                    _2921 = frontier_phi_72_pred_4;
                    _2919 = frontier_phi_72_pred_5;
                    uint _3064 = _3063 + 1u;
                    if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3057 = _2919;
                        _3058 = _2921;
                        _3059 = _2923;
                        _3060 = _2925;
                        _3061 = _2927;
                        _3062 = _2929;
                        _3063 = _3064;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2929;
                frontier_phi_60_61_ladder_1 = _2927;
                frontier_phi_60_61_ladder_2 = _2923;
                frontier_phi_60_61_ladder_3 = _2921;
                frontier_phi_60_61_ladder_4 = _2919;
                frontier_phi_60_61_ladder_5 = _2925;
            }
            else
            {
                frontier_phi_60_61_ladder = _2815;
                frontier_phi_60_61_ladder_1 = _2813;
                frontier_phi_60_61_ladder_2 = _2809;
                frontier_phi_60_61_ladder_3 = _2807;
                frontier_phi_60_61_ladder_4 = _2805;
                frontier_phi_60_61_ladder_5 = _2811;
            }
            _2918 = frontier_phi_60_61_ladder_4;
            _2920 = frontier_phi_60_61_ladder_3;
            _2922 = frontier_phi_60_61_ladder_2;
            _2924 = frontier_phi_60_61_ladder_5;
            _2926 = frontier_phi_60_61_ladder_1;
            _2928 = frontier_phi_60_61_ladder;
        }
        float _2933 = isnan(1.0) ? _731 : (isnan(_731) ? 1.0 : min(_731, 1.0));
        _2738 = (_2933 * _2924) + _2269;
        _2740 = (_2933 * _2926) + _2271;
        _2742 = (_2933 * _2928) + _2273;
        _2744 = ((_2918 * 0.039999999105930328369140625) * _2933) + _2592;
        _2746 = ((_2920 * 0.039999999105930328369140625) * _2933) + _2594;
        _2748 = ((_2922 * 0.039999999105930328369140625) * _2933) + _2596;
    }
    else
    {
        _2738 = _2269;
        _2740 = _2271;
        _2742 = _2273;
        _2744 = _2592;
        _2746 = _2594;
        _2748 = _2596;
    }
    float _4631 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4642 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4653 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    uint _2768 = _232 + 6u;
    float _2776 = _668 / cbSceneParam._m0[86u].x;
    float _2777 = _669 / cbSceneParam._m0[86u].y;
    vec4 _2791 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, (log2((isnan(cbSceneParam._m0[77u].w) ? _601 : (isnan(_601) ? cbSceneParam._m0[77u].w : min(_601, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2793 = _2791.x;
    float _2794 = _2791.y;
    float _2795 = _2791.z;
    float _2796 = _2791.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_601 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_601) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _601 : min(cbSceneParam._m0[80u].w, _601));
        float _2831 = _2830 / _601;
        float _2842 = _2831 * _653;
        float _2843 = _654 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2846 = _2831 * _655;
        float _2848 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2843;
        float _2856 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3019;
        if (abs((_2844 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3019 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2979 = 1.0 / cbSceneParam._m0[80u].x;
            float _2980 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2981 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2990 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : min(_2980, 0.0));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            _3019 = ((abs(_2856 / _2844) * cbSceneParam._m0[80u].y) * ((((_2990 - _2991) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))))) * _2979)) - ((exp2(_2866 * _2990) - exp2(_2866 * _2991)) * _2979))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3021 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, 1.0), 0.0);
        float _3030 = exp2((_3019 * (-1.44269502162933349609375)) * (1.0 - _3021.w));
        float _3031 = log2(_3030);
        float _3047 = log2(_2796);
        _2868 = (exp2(_3047 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].x)) * _3021.x) / cbSceneParam._m0[78u].x)) + _2793;
        _2870 = (exp2(_3047 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].y)) * _3021.y) / cbSceneParam._m0[78u].y)) + _2794;
        _2872 = (exp2(_3047 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3031 * cbSceneParam._m0[78u].z)) * _3021.z) / cbSceneParam._m0[78u].z)) + _2795;
        _2874 = _3030 * _2796;
    }
    else
    {
        _2868 = _2793;
        _2870 = _2794;
        _2872 = _2795;
        _2874 = _2796;
    }
    float _2886 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2887 = _2886 == 3.0;
    float _2888 = log2(_2874);
    float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2738 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _731))) + ((_2744 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2740 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _731))) + ((_2746 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2742 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _731))) + ((_2748 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2906 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2906 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
    SV_Target.y = _2906 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
    SV_Target.z = _2906 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
    SV_Target.w = cbInstanceData._m0[_2768].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2768].w;
}


