#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1181;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _345 = _343.x;
    float _355 = dot(vec4(_345, _343.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _372 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_345 - _355) * cbMtdParam._m0[24u].x) + _355) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3510 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _380 = (_373 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _381 = (_373 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _382 = (_373 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _256) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _431 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _445 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_421 - _431) * cbMtdParam._m0[24u].x) + _431) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3521 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _453 = (_446 * ((_399.x * cbMtdParam._m0[13u].x) - _380)) + _380;
    float _454 = (_446 * ((_399.y * cbMtdParam._m0[13u].y) - _381)) + _381;
    float _455 = (_446 * ((_399.z * cbMtdParam._m0[13u].z) - _382)) + _382;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    float _501 = ((_473.x - _492) * _373) + _492;
    float _502 = ((_473.y - _493) * _373) + _493;
    float _503 = ((_473.z - _494) * _373) + _494;
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _528 = ((_515.z - _503) * _446) + _503;
    float _531 = ((((_515.x - _501) * _446) + _501) * 2.0) + (-1.0);
    float _533 = ((((_515.y - _502) * _446) + _502) * 2.0) + (-1.0);
    float _534 = dot(vec2(_531, _533), vec2(_531, _533));
    float _3532 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))));
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _586 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_572 - _573) * cbMtdParam._m0[24u].z) + _573) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3543 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _594 = (_587 * (cbMtdParam._m0[17u].x - _453)) + _453;
    float _595 = (_587 * (cbMtdParam._m0[17u].y - _454)) + _454;
    float _596 = (_587 * (cbMtdParam._m0[17u].z - _455)) + _455;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _616 = (_609.x * 2.0) + (-1.0);
    float _617 = (_609.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_616, _617), vec2(_616, _617));
    float _3554 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _626 = (_587 * (_609.z - _528)) + _528;
    float _638 = (((_616 - _531) + (cbMtdParam._m0[21u].x * _531)) * _587) + _531;
    float _639 = (((_617 - _533) + (cbMtdParam._m0[21u].x * _533)) * _587) + _533;
    float _640 = (_587 * (sqrt(1.0 - (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) - _539)) + _539;
    float _645 = cbMtdParam._m0[22u].x + _552.w;
    float _648 = fma(_640, _223 * NORMAL.x, fma(_639, _230 * TANGENT.x, (_216 * _208) * _638));
    float _651 = fma(_640, _223 * NORMAL.y, fma(_639, _230 * TANGENT.y, (_216 * _209) * _638));
    float _654 = fma(_640, _223 * NORMAL.z, fma(_639, _230 * TANGENT.z, (_216 * _210) * _638));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3565 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _662 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3587 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3598 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3609 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _680 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _732 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _722);
    float _733 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _722);
    float _734 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _722);
    float _738 = inversesqrt(dot(vec3(_732, _733, _734), vec3(_732, _733, _734)));
    float _739 = _732 * _738;
    float _740 = _733 * _738;
    float _741 = _734 * _738;
    float _747 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _748 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _766 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _769 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _772 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _786 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _792 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) * cbInstanceData._m0[_786].x;
    float _793 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_786].y;
    float _794 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_786].z;
    float _3620 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _3631 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    vec4 _806 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _747, cbSceneParam._m0[86u].y * _748));
    float _810 = ((isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * TEXCOORD_5.w) * _806.x;
    float _811 = dot(vec3(_659, _660, _661), vec3(_739, _740, _741));
    float _814 = _811 * 2.0;
    float _818 = (_814 * _659) - _739;
    float _819 = (_814 * _660) - _740;
    float _820 = (_814 * _661) - _741;
    float _824 = abs(dot(vec3(_739, _740, _741), vec3(_659, _660, _661)));
    float _3653 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _826 = sqrt(_662);
    float _839 = exp2((_826 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_826 * 3.0));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1180;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_879, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871));
        float _909 = fma(_879, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871));
        float _913 = fma(_879, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871));
        float _938 = _871 + _659;
        float _939 = _875 + _660;
        float _940 = _879 + _661;
        float _950 = fma(_940, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938)) - _905;
        float _951 = fma(_940, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938)) - _909;
        float _952 = fma(_940, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938)) - _913;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1008 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_974.x + (-0.5));
        float _1010 = _1008 * (_974.y + (-0.5));
        float _1011 = _1008 * (_974.z + (-0.5));
        float _1018 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_981.x + (-0.5));
        float _1020 = _1018 * (_981.y + (-0.5));
        float _1021 = _1018 * (_981.z + (-0.5));
        float _1028 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_988.x + (-0.5));
        float _1030 = _1028 * (_988.y + (-0.5));
        float _1031 = _1028 * (_988.z + (-0.5));
        float _1038 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_995.x + (-0.5));
        float _1040 = _1038 * (_995.y + (-0.5));
        float _1041 = _1038 * (_995.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1062 = (dot(vec3(_659, _660, _661), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1072 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3701 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1074 + 1.0))) + _1079) * _1042;
        float _1089 = _1010 * 0.5;
        float _1090 = _1020 * 0.5;
        float _1091 = _1030 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_659, _660, _661), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3734 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1116 + 1.0))) + _1121) * _1043;
        float _1131 = _1011 * 0.5;
        float _1132 = _1021 * 0.5;
        float _1133 = _1031 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_659, _660, _661), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3767 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1158 + 1.0))) + _1163) * _1044;
        _1180 = _1011;
        _1182 = _1010;
        _1183 = _1009;
        _1184 = _1021;
        _1185 = _1020;
        _1186 = _1019;
        _1187 = _1031;
        _1188 = _1030;
        _1189 = _1029;
        _1190 = _1044;
        _1191 = _1043;
        _1192 = _1042;
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _1181;
        _1182 = _1181;
        _1183 = _1181;
        _1184 = _1181;
        _1185 = _1181;
        _1186 = _1181;
        _1187 = _1181;
        _1188 = _1181;
        _1189 = _1181;
        _1190 = _1181;
        _1191 = _1181;
        _1192 = _1181;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1219 = fma(_879, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871));
        float _1223 = fma(_879, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871));
        float _1227 = fma(_879, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871));
        float _1250 = _871 + _659;
        float _1251 = _875 + _660;
        float _1252 = _879 + _661;
        float _1262 = fma(_1252, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250)) - _1219;
        float _1263 = fma(_1252, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250)) - _1223;
        float _1264 = fma(_1252, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250)) - _1227;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1219 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1223 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[35u].z) + ((((((_1227 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1318 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1285.x + (-0.5));
        float _1320 = _1318 * (_1285.y + (-0.5));
        float _1321 = _1318 * (_1285.z + (-0.5));
        float _1328 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1292.x + (-0.5));
        float _1330 = _1328 * (_1292.y + (-0.5));
        float _1331 = _1328 * (_1292.z + (-0.5));
        float _1338 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1299.x + (-0.5));
        float _1340 = _1338 * (_1299.y + (-0.5));
        float _1341 = _1338 * (_1299.z + (-0.5));
        float _1348 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1306.x + (-0.5));
        float _1350 = _1348 * (_1306.y + (-0.5));
        float _1351 = _1348 * (_1306.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_659, _660, _661), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3830 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1382 + 1.0))) + _1387) * _1352;
        float _1397 = _1320 * 0.5;
        float _1398 = _1330 * 0.5;
        float _1399 = _1340 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_659, _660, _661), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3863 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1424 + 1.0))) + _1429) * _1353;
        float _1439 = _1321 * 0.5;
        float _1440 = _1331 * 0.5;
        float _1441 = _1341 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_659, _660, _661), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3896 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1466 + 1.0))) + _1471) * _1354;
        _1488 = _1321;
        _1489 = _1320;
        _1490 = _1319;
        _1491 = _1331;
        _1492 = _1330;
        _1493 = _1329;
        _1494 = _1341;
        _1495 = _1340;
        _1496 = _1339;
        _1497 = _1354;
        _1498 = _1353;
        _1499 = _1352;
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1181;
        _1489 = _1181;
        _1490 = _1181;
        _1491 = _1181;
        _1492 = _1181;
        _1493 = _1181;
        _1494 = _1181;
        _1495 = _1181;
        _1496 = _1181;
        _1497 = _1181;
        _1498 = _1181;
        _1499 = _1181;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1193)) + _1193;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1194)) + _1194;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1195)) + _1195;
    float _1535 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1512));
    float _1556 = _818 * 0.5;
    float _1557 = _819 * 0.5;
    float _1558 = _820 * 0.5;
    float _1559 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1562 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1565 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1599;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1572 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1180, _1184, _1187, _1190));
        float _1576 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1580 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1587 = dot(vec4(cbModelParam._m0[39u]), vec4(_1556, _1557, _1558, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1610;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1601 = dot(vec4(cbModelParam._m0[40u]), vec4(_1556, _1557, _1558, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1614 = (_1610 * cbModelParam._m0[1u].x) + (_1599 * (1.0 - cbModelParam._m0[1u].x));
    float _1624 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1624 : min(cbModelParam._m0[25u].z, _1624));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1673 = fma(_879, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871)) + cbModelParam._m0[13u].w;
        float _1677 = fma(_879, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871)) + cbModelParam._m0[14u].w;
        float _1681 = fma(_879, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871)) + cbModelParam._m0[15u].w;
        float _1684 = fma(_820, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818));
        float _1687 = fma(_820, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818));
        float _1690 = fma(_820, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818));
        float _1718;
        if (_1684 > 0.0)
        {
            _1718 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1718 = frontier_phi_14_12_ladder;
        }
        float _1940;
        if (_1687 > 0.0)
        {
            _1940 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1940 = frontier_phi_23_19_ladder;
        }
        float _2186;
        if (_1690 > 0.0)
        {
            _2186 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2186 = frontier_phi_35_30_ladder;
        }
        float _2188 = isnan(_1940) ? _1718 : (isnan(_1718) ? _1940 : min(_1718, _1940));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1684) + _1673;
        float _2194 = (_2189 * _1687) + _1677;
        float _2195 = (_2189 * _1690) + _1681;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1625);
            frontier_phi_13_35_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1706 = frontier_phi_13_35_ladder_2;
        _1708 = frontier_phi_13_35_ladder_1;
        _1710 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_818, _819, _820), _1625);
        _1706 = _1694.x * cbModelParam._m0[1u].y;
        _1708 = _1694.y * cbModelParam._m0[1u].y;
        _1710 = _1694.z * cbModelParam._m0[1u].y;
    }
    float _1714 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1714 : min(cbModelParam._m0[25u].w, _1714));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1769 = fma(_879, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871)) + cbModelParam._m0[21u].w;
        float _1773 = fma(_879, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871)) + cbModelParam._m0[22u].w;
        float _1777 = fma(_879, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871)) + cbModelParam._m0[23u].w;
        float _1780 = fma(_820, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818));
        float _1783 = fma(_820, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818));
        float _1786 = fma(_820, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818));
        float _1945;
        if (_1780 > 0.0)
        {
            _1945 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1945 = frontier_phi_25_21_ladder;
        }
        float _2213;
        if (_1783 > 0.0)
        {
            _2213 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2213 = frontier_phi_37_32_ladder;
        }
        float _2418;
        if (_1786 > 0.0)
        {
            _2418 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2418 = frontier_phi_46_43_ladder;
        }
        float _2420 = isnan(_2213) ? _1945 : (isnan(_1945) ? _2213 : min(_1945, _2213));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1780) + _1769;
        float _2426 = (_2421 * _1783) + _1773;
        float _2427 = (_2421 * _1786) + _1777;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2428;
        float _2431 = _2428 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2427 > _2431) || ((_2427 < _2429) || ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 < _2429) || (_2425 > _2431))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2427, cbModelParam._m0[17u].z, fma(_2426, cbModelParam._m0[17u].y, _2425 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2427, cbModelParam._m0[18u].z, fma(_2426, cbModelParam._m0[18u].y, _2425 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2427, cbModelParam._m0[19u].z, fma(_2426, cbModelParam._m0[19u].y, _2425 * cbModelParam._m0[19u].x))), _1715);
            frontier_phi_22_46_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1805 = frontier_phi_22_46_ladder_2;
        _1807 = frontier_phi_22_46_ladder_1;
        _1809 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_818, _819, _820), _1715);
        _1805 = _1789.x * cbModelParam._m0[1u].z;
        _1807 = _1789.y * cbModelParam._m0[1u].z;
        _1809 = _1789.z * cbModelParam._m0[1u].z;
    }
    float _1821 = ((((1.0 - _839) * ((_826 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_839 * _826)) * _810;
    float _1822 = _1821 * ((cbModelParam._m0[1u].w * (_1805 - _1706)) + _1706);
    float _1823 = _1821 * ((cbModelParam._m0[1u].w * (_1807 - _1708)) + _1708);
    float _1824 = _1821 * ((cbModelParam._m0[1u].w * (_1809 - _1710)) + _1710);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1823, cbSceneParam._m0[89u].y, _1822 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1823, cbSceneParam._m0[90u].y, _1822 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1823, cbSceneParam._m0[91u].y, _1822 * cbSceneParam._m0[91u].x));
    vec4 _1841 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_747, _748));
    float _1843 = _1841.w;
    float _1855 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1843);
    float _1856 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1843);
    float _1857 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1843);
    uvec4 _1861 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1863 = _1861.x * 14u;
    uint _1864 = _1863 + 13u;
    float _1871 = _810 + (-1.0);
    float _1876 = (cbLight._m0[_1864].x * _1871) + 1.0;
    float _1877 = (cbLight._m0[_1864].y * _1871) + 1.0;
    float _1878 = (cbLight._m0[_1864].z * _1871) + 1.0;
    float _1879 = (cbLight._m0[_1864].w * _1871) + 1.0;
    uint _1880 = _1863 + 5u;
    float _1886 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1890 = _1863 + 4u;
    float _1899 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1903 = _1863 | 1u;
    float _1914 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_659, _660, _661));
    float _1917 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_659, _660, _661));
    float _4032 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _4043 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1922 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _1924 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _1931 = ((cbLight._m0[_1880].x * _1886) * _1924) + (((cbLight._m0[_1890].x * _1855) * _1899) * _1922);
    float _1932 = ((_1886 * cbLight._m0[_1880].y) * _1924) + (((cbLight._m0[_1890].y * _1856) * _1899) * _1922);
    float _1933 = ((_1886 * cbLight._m0[_1880].z) * _1924) + (((cbLight._m0[_1890].z * _1857) * _1899) * _1922);
    uvec4 _1937 = floatBitsToUint(cbLight._m0[_1863 + 12u]);
    bool _1939 = _1937.x == 0u;
    float _1950;
    float _1952;
    float _1954;
    if (_1939)
    {
        _1950 = _1931;
        _1952 = _1932;
        _1954 = _1933;
    }
    else
    {
        uint _1958 = _1863 + 6u;
        float _1974 = (dot(vec3(cbLight._m0[_1863 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _4054 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1977 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _1950 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1931;
        _1952 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1932;
        _1954 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1933;
    }
    bool _1957 = _1937.y == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1957)
    {
        _1995 = _1950;
        _1997 = _1952;
        _1999 = _1954;
    }
    else
    {
        uint _2157 = _1863 + 7u;
        float _2173 = (dot(vec3(cbLight._m0[_1863 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4070 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _2176 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _1995 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _1950;
        _1997 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _1952;
        _1999 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _1954;
    }
    uint _2002 = _1863 + 8u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1863].w)) * _662) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1863].x + _739;
    float _2018 = cbLight._m0[_1863].y + _740;
    float _2019 = cbLight._m0[_1863].z + _741;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1863].xyz));
    float _4086 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _2031 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2032 = dot(vec3(_659, _660, _661), vec3(_2024, _2025, _2026));
    float _4108 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1863].xyz), vec3(_2024, _2025, _2026));
    float _4119 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2016 * _2016;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2016;
    float _2067 = (0.5 / (((_2031 * ((_2030 * _2056) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2056) + _2016) * _2030))) * _2030;
    float _4130 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    uint _2083 = _1863 + 9u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _662) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1903].x + _739;
    float _2097 = cbLight._m0[_1903].y + _740;
    float _2098 = cbLight._m0[_1903].z + _741;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1903].xyz));
    float _4141 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2110 = dot(vec3(_659, _660, _661), vec3(_2103, _2104, _2105));
    float _4152 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2103, _2104, _2105));
    float _4163 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2095 * _2095;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2095;
    float _2142 = (0.5 / (((_2031 * ((_2109 * _2132) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2132) + _2095) * _2109))) * _2109;
    float _4174 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    float _2154 = (((_2131 * cbLight._m0[_2083].x) * _2144) * _1886) + ((((cbLight._m0[_2002].x * _1855) * _2055) * _2069) * _1899);
    float _2155 = (((_2131 * cbLight._m0[_2083].y) * _2144) * _1886) + ((((cbLight._m0[_2002].y * _1856) * _2055) * _2069) * _1899);
    float _2156 = (((_2131 * cbLight._m0[_2083].z) * _2144) * _1886) + ((((cbLight._m0[_2002].z * _1857) * _2055) * _2069) * _1899);
    float _2218;
    float _2220;
    float _2222;
    if (_1939)
    {
        _2218 = _2154;
        _2220 = _2155;
        _2222 = _2156;
    }
    else
    {
        uint _2224 = _1863 + 2u;
        uint _2228 = _1863 + 10u;
        float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _662) * 0.949999988079071044921875);
        float _2243 = _2242 * _2242;
        float _2244 = cbLight._m0[_2224].x + _739;
        float _2245 = cbLight._m0[_2224].y + _740;
        float _2246 = cbLight._m0[_2224].z + _741;
        float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
        float _2251 = _2250 * _2244;
        float _2252 = _2250 * _2245;
        float _2253 = _2250 * _2246;
        float _2254 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2224].xyz));
        float _4185 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _2258 = dot(vec3(_659, _660, _661), vec3(_2251, _2252, _2253));
        float _4196 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2262 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2251, _2252, _2253));
        float _4207 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2266 = _2243 * _2243;
        float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
        float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2280 = 1.0 - _2243;
        float _2290 = (0.5 / (((_2031 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2280) + _2243) * _2257))) * _2257;
        float _4218 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2218 = (((_2279 * cbLight._m0[_2228].x) * _2292) * _2293) + _2154;
        _2220 = (((_2279 * cbLight._m0[_2228].y) * _2292) * _2293) + _2155;
        _2222 = (((_2279 * cbLight._m0[_2228].z) * _2292) * _2293) + _2156;
    }
    float _2328;
    float _2330;
    float _2332;
    if (_1957)
    {
        _2328 = _2218;
        _2330 = _2220;
        _2332 = _2222;
    }
    else
    {
        uint _2339 = _1863 + 3u;
        uint _2343 = _1863 + 11u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _662) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _739;
        float _2360 = cbLight._m0[_2339].y + _740;
        float _2361 = cbLight._m0[_2339].z + _741;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2339].xyz));
        float _4234 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _2373 = dot(vec3(_659, _660, _661), vec3(_2366, _2367, _2368));
        float _4245 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4256 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2395 = 1.0 - _2358;
        float _2405 = (0.5 / (((_2031 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2395) + _2358) * _2372))) * _2372;
        float _4267 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
        _2328 = (((_2394 * cbLight._m0[_2343].x) * _2407) * _2408) + _2218;
        _2330 = (((_2394 * cbLight._m0[_2343].y) * _2407) * _2408) + _2220;
        _2332 = (((_2394 * cbLight._m0[_2343].z) * _2407) * _2408) + _2222;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1861.y == 0u)
    {
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2483;
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2483;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2483;
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.x;
        uint _2510 = uint((float(_2498.y) * floor(float(uint(cbSceneParam._m0[85u].y * _748) / _2499))) + floor(float(uint(cbSceneParam._m0[85u].x * _747) / _2499)));
        float _2520 = (log2(_2486 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2521 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        uint _2524 = uint(isnan(14.0) ? _2521 : (isnan(_2521) ? 14.0 : min(_2521, 14.0)));
        uvec4 _2529 = texelFetch(g_lightClusterGridBuffer, int(((_2524 << 2u) + (_2510 << 6u)) >> 2u));
        uint _2530 = _2529.x;
        uint _2531 = _2498.z;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((((1u << ((_2531 >> 4u) & 15u)) + 4294967295u) & _2530) == 0u) || ((_2531 & 240u) == 0u))
        {
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
        }
        else
        {
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            uint _2782 = 0u;
            uint _2791;
            bool _2792;
            for (;;)
            {
                _2791 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                _2792 = _2791 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2792)
                {
                    frontier_phi_61_pred = _2776;
                    frontier_phi_61_pred_1 = _2781;
                    frontier_phi_61_pred_2 = _2780;
                    frontier_phi_61_pred_3 = _2779;
                    frontier_phi_61_pred_4 = _2778;
                    frontier_phi_61_pred_5 = _2777;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2791;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2782 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2484;
                        float _2967 = _2926.y - _2485;
                        float _2968 = _2926.z - _2486;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_766, _769, _772), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4293 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2484;
                        float _3002 = (-0.0) - _2485;
                        float _3003 = (-0.0) - _2486;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _826;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_766, _769, _772), vec3(_3008, _3009, _3010));
                        float _4309 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                        float _3043 = dot(vec3(_766, _769, _772), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4320 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4331 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4342 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2835 = (_2997 * _2945.x) + _2903;
                        _2836 = (_2997 * _2945.y) + _2904;
                        _2837 = (_2997 * _2945.z) + _2905;
                        _2832 = (_3078 * _2962.x) + _2900;
                        _2833 = (_3078 * _2962.y) + _2901;
                        _2834 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_61_pred = _2832;
                    frontier_phi_61_pred_1 = _2837;
                    frontier_phi_61_pred_2 = _2836;
                    frontier_phi_61_pred_3 = _2835;
                    frontier_phi_61_pred_4 = _2834;
                    frontier_phi_61_pred_5 = _2833;
                }
                _2632 = frontier_phi_61_pred;
                _2642 = frontier_phi_61_pred_1;
                _2640 = frontier_phi_61_pred_2;
                _2638 = frontier_phi_61_pred_3;
                _2636 = frontier_phi_61_pred_4;
                _2634 = frontier_phi_61_pred_5;
                uint _2783 = _2782 + 1u;
                if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2776 = _2632;
                    _2777 = _2634;
                    _2778 = _2636;
                    _2779 = _2638;
                    _2780 = _2640;
                    _2781 = _2642;
                    _2782 = _2783;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
        }
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.z;
        uint _2648 = (_2646 >> 8u) & 15u;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((4294967295u << _2648) & _2530) == 0u)
        {
            _2744 = _2631;
            _2746 = _2633;
            _2748 = _2635;
            _2750 = _2637;
            _2752 = _2639;
            _2754 = _2641;
        }
        else
        {
            float _2769 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
            float _2770 = _2769 * _2484;
            float _2771 = _2769 * _2485;
            float _2772 = _2769 * _2486;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2648 < ((_2646 >> 12u) & 15u))
            {
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2883 = _2631;
                float _2884 = _2633;
                float _2885 = _2635;
                float _2886 = _2637;
                float _2887 = _2639;
                float _2888 = _2641;
                uint _2889 = _2648;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2899)
                    {
                        frontier_phi_67_pred = _2886;
                        frontier_phi_67_pred_1 = _2887;
                        frontier_phi_67_pred_2 = _2888;
                        frontier_phi_67_pred_3 = _2885;
                        frontier_phi_67_pred_4 = _2884;
                        frontier_phi_67_pred_5 = _2883;
                    }
                    else
                    {
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        uint _3102 = _2898;
                        uint _3103;
                        vec4 _3128;
                        float _3129;
                        vec4 _3144;
                        vec3 _3156;
                        vec4 _3171;
                        vec4 _3186;
                        float _3232;
                        bool _3233;
                        for (;;)
                        {
                            uint _3113 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3102));
                            _3103 = (_3102 + 4294967295u) & _3102;
                            uint _3115 = _3113 * 40u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3129 = _3128.w;
                            uint _3131 = (_3113 * 40u) + 4u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3113 * 40u) + 8u;
                            _3156 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x));
                            uint _3158 = (_3113 * 40u) + 16u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3113 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3113 * 40u) + 24u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3207 = (_3113 * 40u) + 28u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3232 = fma(_2486, _3220.z, fma(_2485, _3220.y, _3220.x * _2484)) + _3220.w;
                            _3233 = !((fma(_2486, _3201.z, fma(_2485, _3201.y, _3201.x * _2484)) + _3201.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3233)
                            {
                                float _3260 = _3128.x - _2484;
                                float _3261 = _3128.y - _2485;
                                float _3262 = _3128.z - _2486;
                                float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                                float _3266 = inversesqrt(_3263);
                                float _3267 = _3266 * _3260;
                                float _3268 = _3266 * _3261;
                                float _3269 = _3266 * _3262;
                                float _3273 = 1.0 - (_3263 / (_3129 * _3129));
                                float _4353 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3278 = sqrt(_3263) * _3144.w;
                                float _3280 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                                float _3281 = _3280 * _3280;
                                float _3284 = ((1.0 - _3281) * dot(vec3(_3267, _3268, _3269), vec3(_766, _769, _772))) + _3281;
                                float _3287 = _3278 * _3278;
                                float _3291 = (fma(_2486, _3171.z, fma(_2485, _3171.y, _3171.x * _2484)) + _3171.w) / _3232;
                                float _3292 = (fma(_2486, _3186.z, fma(_2485, _3186.y, _3186.x * _2484)) + _3186.w) / _3232;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4369 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3274) / ((_3287 * 0.699999988079071044921875) + 1.0));
                                float _3310 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                                float _3311 = 1.0 - _826;
                                float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                                float _3319 = _3318 * _3318;
                                float _3320 = _3319 * _3319;
                                float _3321 = _3267 - _2770;
                                float _3322 = _3268 - _2771;
                                float _3323 = _3269 - _2772;
                                float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                                float _3331 = dot(vec3(_766, _769, _772), vec3((-0.0) - _2770, (-0.0) - _2771, (-0.0) - _2772));
                                float _4380 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3335 = dot(vec3(_766, _769, _772), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                                float _4391 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                                float _3343 = _3280 * _3319;
                                float _3344 = _3343 * _3343;
                                float _3350 = ((1.0 - _3344) * dot(vec3(_766, _769, _772), vec3(_3267, _3268, _3269))) + _3344;
                                float _4402 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3352 = 1.0 - _3319;
                                float _3362 = (0.5 / (((_3351 * ((_3334 * _3352) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3319) * _3334))) * _3351;
                                float _4413 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3372 = (_3297 * _3274) * (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3342 * _3342) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3372 * _3156.x;
                                frontier_phi_73_pred_1 = _3372 * _3156.y;
                                frontier_phi_73_pred_2 = _3298 * _3144.z;
                                frontier_phi_73_pred_3 = _3298 * _3144.y;
                                frontier_phi_73_pred_4 = _3298 * _3144.x;
                                frontier_phi_73_pred_5 = _3372 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3376 = frontier_phi_73_pred;
                            _3377 = frontier_phi_73_pred_1;
                            _3381 = frontier_phi_73_pred_2;
                            _3380 = frontier_phi_73_pred_3;
                            _3379 = frontier_phi_73_pred_4;
                            _3378 = frontier_phi_73_pred_5;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            _3083 = _3376 + _3096;
                            _3084 = _3377 + _3097;
                            _3085 = _3378 + _3098;
                            if (_3103 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3103;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3086;
                        frontier_phi_67_pred_1 = _3087;
                        frontier_phi_67_pred_2 = _3088;
                        frontier_phi_67_pred_3 = _3085;
                        frontier_phi_67_pred_4 = _3084;
                        frontier_phi_67_pred_5 = _3083;
                    }
                    _2751 = frontier_phi_67_pred;
                    _2753 = frontier_phi_67_pred_1;
                    _2755 = frontier_phi_67_pred_2;
                    _2749 = frontier_phi_67_pred_3;
                    _2747 = frontier_phi_67_pred_4;
                    _2745 = frontier_phi_67_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2745;
                        _2884 = _2747;
                        _2885 = _2749;
                        _2886 = _2751;
                        _2887 = _2753;
                        _2888 = _2755;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2753;
                frontier_phi_55_56_ladder_1 = _2755;
                frontier_phi_55_56_ladder_2 = _2751;
                frontier_phi_55_56_ladder_3 = _2749;
                frontier_phi_55_56_ladder_4 = _2747;
                frontier_phi_55_56_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_55_56_ladder = _2639;
                frontier_phi_55_56_ladder_1 = _2641;
                frontier_phi_55_56_ladder_2 = _2637;
                frontier_phi_55_56_ladder_3 = _2635;
                frontier_phi_55_56_ladder_4 = _2633;
                frontier_phi_55_56_ladder_5 = _2631;
            }
            _2744 = frontier_phi_55_56_ladder_5;
            _2746 = frontier_phi_55_56_ladder_4;
            _2748 = frontier_phi_55_56_ladder_3;
            _2750 = frontier_phi_55_56_ladder_2;
            _2752 = frontier_phi_55_56_ladder;
            _2754 = frontier_phi_55_56_ladder_1;
        }
        float _2759 = isnan(1.0) ? _810 : (isnan(_810) ? 1.0 : min(_810, 1.0));
        _2543 = (_2759 * _2750) + _1995;
        _2545 = (_2759 * _2752) + _1997;
        _2547 = (_2759 * _2754) + _1999;
        _2549 = ((_2744 * 0.039999999105930328369140625) * _2759) + _2328;
        _2551 = ((_2746 * 0.039999999105930328369140625) * _2759) + _2330;
        _2553 = ((_2748 * 0.039999999105930328369140625) * _2759) + _2332;
    }
    else
    {
        _2543 = _1995;
        _2545 = _1997;
        _2547 = _1999;
        _2549 = _2328;
        _2551 = _2330;
        _2553 = _2332;
    }
    float _4429 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4440 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4451 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    uint _2573 = _236 + 6u;
    float _2581 = _747 / cbSceneParam._m0[86u].x;
    float _2582 = _748 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _680 : (isnan(_680) ? cbSceneParam._m0[77u].w : min(_680, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_680 > cbSceneParam._m0[78u].w)
    {
        float _2656 = isnan(_680) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _680 : min(cbSceneParam._m0[80u].w, _680));
        float _2657 = _2656 / _680;
        float _2668 = _2657 * _732;
        float _2669 = _733 * _2657;
        float _2670 = (-0.0) - _2669;
        float _2672 = _2657 * _734;
        float _2674 = (cbSceneParam._m0[77u].w * _2670) / _2656;
        float _2675 = _2674 + cbSceneParam._m0[79u].w;
        float _2676 = cbSceneParam._m0[79u].w - _2669;
        float _2682 = sqrt(((_2668 * _2668) + (_2669 * _2669)) + (_2672 * _2672));
        float _2685 = (1.0 - (cbSceneParam._m0[77u].w / _2656)) * _2682;
        float _2690 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2692 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2845;
        if (abs((_2670 - _2674) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2845 = ((((_2675 > 0.0) ? exp2(_2690 * _2675) : (2.0 - exp2(_2692 * _2675))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2685;
        }
        else
        {
            float _2805 = 1.0 / cbSceneParam._m0[80u].x;
            float _2806 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : max(_2675, _2676));
            float _2807 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : min(_2675, _2676));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            _2845 = ((abs(_2682 / _2670) * cbSceneParam._m0[80u].y) * ((((_2816 - _2817) * 2.0) - ((exp2(_2690 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0)))) - exp2(_2690 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))))) * _2805)) - ((exp2(_2692 * _2816) - exp2(_2692 * _2817)) * _2805))) + (_2685 * cbSceneParam._m0[80u].z);
        }
        vec4 _2847 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2856 = exp2((_2845 * (-1.44269502162933349609375)) * (1.0 - _2847.w));
        float _2857 = log2(_2856);
        float _2873 = log2(_2601);
        _2694 = (exp2(_2873 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].x)) * _2847.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2696 = (exp2(_2873 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].y)) * _2847.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2698 = (exp2(_2873 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].z)) * _2847.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2700 = _2856 * _2601;
    }
    else
    {
        _2694 = _2598;
        _2696 = _2599;
        _2698 = _2600;
        _2700 = _2601;
    }
    float _2712 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2713 = _2712 == 3.0;
    float _2714 = log2(_2700);
    float _2721 = exp2(_2714 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2543 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _810))) + ((_2549 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1614)) * cbPerFrame._m0[3u].x));
    float _2722 = exp2(_2714 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_2545 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _810))) + ((_2551 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1614)) * cbPerFrame._m0[3u].x));
    float _2723 = exp2(_2714 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2547 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _810))) + ((_2553 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1614)) * cbPerFrame._m0[3u].x));
    float _2732 = (_2712 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2732 * (_2713 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.y = _2732 * (_2713 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.z = _2732 * (_2713 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.w = cbInstanceData._m0[_2573].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2573].w;
}


