#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1101;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _341 = (_332.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_340, _341), vec2(_340, _341));
    float _3434 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))));
    float _353 = _340 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_306.x * 2.0) + (-1.0)));
    float _354 = _341 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_306.y * 2.0) + (-1.0)));
    vec4 _371 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _373 = _371.x;
    float _374 = 1.0 - _373;
    float _383 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _386 = ((isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : min(_383, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _395 = (_386 - ((((((_373 - _374) * cbMtdParam._m0[24u].z) + _374) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _386))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3455 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _403 = (_396 * (cbMtdParam._m0[17u].x - _286)) + _286;
    float _404 = (_396 * (cbMtdParam._m0[17u].y - _287)) + _287;
    float _405 = (_396 * (cbMtdParam._m0[17u].z - _288)) + _288;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _450 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_420 - _421) * cbMtdParam._m0[24u].w) + _421) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3466 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _451 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _459 = ((((cbMtdParam._m0[10u].x - _403) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _451) + _403;
    float _460 = ((((cbMtdParam._m0[10u].y - _404) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _451) + _404;
    float _461 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _405)) * _451) + _405;
    float _466 = (((_306.z - _336) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _336;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _487 = (_480.x * 2.0) + (-1.0);
    float _488 = (_480.y * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3477 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _497 = (_396 * (_480.z - _466)) + _466;
    float _500 = ((cbMtdParam._m0[23u].y - _497) * _451) + _497;
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _528 = (_522.x * 2.0) + (-1.0);
    float _529 = (_522.y * 2.0) + (-1.0);
    float _530 = dot(vec2(_528, _529), vec2(_528, _529));
    float _3488 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _547 = (((_487 - _353) + (cbMtdParam._m0[21u].x * _353)) * _396) + _353;
    float _548 = (((_488 - _354) + (cbMtdParam._m0[21u].x * _354)) * _396) + _354;
    float _549 = (_396 * (sqrt(1.0 - (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) - _348)) + _348;
    float _560 = (((_528 - _547) + (_547 * cbMtdParam._m0[22u].z)) * _451) + _547;
    float _561 = (((_529 - _548) + (_548 * cbMtdParam._m0[22u].z)) * _451) + _548;
    float _562 = ((sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) - _549) * _451) + _549;
    float _564 = cbMtdParam._m0[22u].x + _332.w;
    float _567 = fma(_562, _228 * NORMAL.x, fma(_561, _235 * TANGENT.x, (_221 * _213) * _560));
    float _570 = fma(_562, _228 * NORMAL.y, fma(_561, _235 * TANGENT.y, (_221 * _214) * _560));
    float _573 = fma(_562, _228 * NORMAL.z, fma(_561, _235 * TANGENT.z, (_221 * _215) * _560));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    float _578 = _577 * _567;
    float _579 = _577 * _570;
    float _580 = _577 * _573;
    float _3499 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _581 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3521 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3532 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3543 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _649 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _639);
    float _650 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _639);
    float _651 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _639);
    float _655 = inversesqrt(dot(vec3(_649, _650, _651), vec3(_649, _650, _651)));
    float _656 = _649 * _655;
    float _657 = _650 * _655;
    float _658 = _651 * _655;
    float _664 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _665 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _686 = fma(_580, cbSceneParam._m0[5u].z, fma(_579, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _578));
    float _689 = fma(_580, cbSceneParam._m0[6u].z, fma(_579, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _578));
    float _692 = fma(_580, cbSceneParam._m0[7u].z, fma(_579, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _578));
    uint _706 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _712 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_706].x;
    float _713 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_706].y;
    float _714 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_706].z;
    float _3554 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    vec4 _726 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _664, cbSceneParam._m0[86u].y * _665));
    float _730 = ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * TEXCOORD_5.w) * _726.x;
    float _731 = dot(vec3(_578, _579, _580), vec3(_656, _657, _658));
    float _734 = _731 * 2.0;
    float _738 = (_734 * _578) - _656;
    float _739 = (_734 * _579) - _657;
    float _740 = (_734 * _580) - _658;
    float _744 = abs(dot(vec3(_656, _657, _658), vec3(_578, _579, _580)));
    float _3587 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _746 = sqrt(_581);
    float _759 = exp2((_746 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_746 * 3.0));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1100;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _825 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _829 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _833 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _858 = _791 + _578;
        float _859 = _795 + _579;
        float _860 = _799 + _580;
        float _870 = fma(_860, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858)) - _825;
        float _871 = fma(_860, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858)) - _829;
        float _872 = fma(_860, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858)) - _833;
        float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
        float _889 = ((_876 * _870) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_825 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _890 = ((_876 * _871) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_829 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_876 * _872) / cbModelParam._m0[34u].z) + ((((((_833 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_889, _890, _891), 0.0);
        float _928 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_894.x + (-0.5));
        float _930 = _928 * (_894.y + (-0.5));
        float _931 = _928 * (_894.z + (-0.5));
        float _938 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_901.x + (-0.5));
        float _940 = _938 * (_901.y + (-0.5));
        float _941 = _938 * (_901.z + (-0.5));
        float _948 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_908.x + (-0.5));
        float _950 = _948 * (_908.y + (-0.5));
        float _951 = _948 * (_908.z + (-0.5));
        float _958 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_915.x + (-0.5));
        float _960 = _958 * (_915.y + (-0.5));
        float _961 = _958 * (_915.z + (-0.5));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = _929 * 0.5;
        float _966 = _939 * 0.5;
        float _967 = _949 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _982 = (dot(vec3(_578, _579, _580), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _992 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _994 = _993 * 2.0;
        float _998 = (1.0 - _993) / (_993 + 1.0);
        float _3635 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1008 = ((((1.0 - _999) * (_994 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_994 + 1.0))) + _999) * _962;
        float _1009 = _930 * 0.5;
        float _1010 = _940 * 0.5;
        float _1011 = _950 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1025 = (dot(vec3(_578, _579, _580), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1034 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1036 = _1035 * 2.0;
        float _1040 = (1.0 - _1035) / (_1035 + 1.0);
        float _3668 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1050 = ((((1.0 - _1041) * (_1036 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1036 + 1.0))) + _1041) * _963;
        float _1051 = _931 * 0.5;
        float _1052 = _941 * 0.5;
        float _1053 = _951 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1067 = (dot(vec3(_578, _579, _580), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1076 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1078 = _1077 * 2.0;
        float _1082 = (1.0 - _1077) / (_1077 + 1.0);
        float _3701 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1092 = ((((1.0 - _1083) * (_1078 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1078 + 1.0))) + _1083) * _964;
        _1100 = _931;
        _1102 = _930;
        _1103 = _929;
        _1104 = _941;
        _1105 = _940;
        _1106 = _939;
        _1107 = _951;
        _1108 = _950;
        _1109 = _949;
        _1110 = _964;
        _1111 = _963;
        _1112 = _962;
        _1113 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0)));
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0)));
    }
    else
    {
        _1100 = _1101;
        _1102 = _1101;
        _1103 = _1101;
        _1104 = _1101;
        _1105 = _1101;
        _1106 = _1101;
        _1107 = _1101;
        _1108 = _1101;
        _1109 = _1101;
        _1110 = _1101;
        _1111 = _1101;
        _1112 = _1101;
        _1113 = 0.0;
        _1114 = 0.0;
        _1115 = 0.0;
    }
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1140 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1144 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1148 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1171 = _791 + _578;
        float _1172 = _795 + _579;
        float _1173 = _799 + _580;
        float _1183 = fma(_1173, cbModelParam._m0[30u].z, fma(_1172, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1171)) - _1140;
        float _1184 = fma(_1173, cbModelParam._m0[31u].z, fma(_1172, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1171)) - _1144;
        float _1185 = fma(_1173, cbModelParam._m0[32u].z, fma(_1172, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1171)) - _1148;
        float _1189 = inversesqrt(dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185)));
        float _1202 = ((_1189 * _1183) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1140 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1203 = ((_1189 * _1184) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1144 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1204 = ((_1189 * _1185) / cbModelParam._m0[35u].z) + ((((((_1148 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1202, _1203, _1204), 0.0);
        float _1239 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1206.x + (-0.5));
        float _1241 = _1239 * (_1206.y + (-0.5));
        float _1242 = _1239 * (_1206.z + (-0.5));
        float _1249 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1213.x + (-0.5));
        float _1251 = _1249 * (_1213.y + (-0.5));
        float _1252 = _1249 * (_1213.z + (-0.5));
        float _1259 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1220.x + (-0.5));
        float _1261 = _1259 * (_1220.y + (-0.5));
        float _1262 = _1259 * (_1220.z + (-0.5));
        float _1269 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1227.x + (-0.5));
        float _1271 = _1269 * (_1227.y + (-0.5));
        float _1272 = _1269 * (_1227.z + (-0.5));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = _1240 * 0.5;
        float _1277 = _1250 * 0.5;
        float _1278 = _1260 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_578, _579, _580), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3764 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1303 + 1.0))) + _1308) * _1273;
        float _1318 = _1241 * 0.5;
        float _1319 = _1251 * 0.5;
        float _1320 = _1261 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_578, _579, _580), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1274 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3797 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1345 + 1.0))) + _1350) * _1274;
        float _1360 = _1242 * 0.5;
        float _1361 = _1252 * 0.5;
        float _1362 = _1262 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_578, _579, _580), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3830 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1387 + 1.0))) + _1392) * _1275;
        _1409 = _1242;
        _1410 = _1241;
        _1411 = _1240;
        _1412 = _1252;
        _1413 = _1251;
        _1414 = _1250;
        _1415 = _1262;
        _1416 = _1261;
        _1417 = _1260;
        _1418 = _1275;
        _1419 = _1274;
        _1420 = _1273;
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1422 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
    }
    else
    {
        _1409 = _1101;
        _1410 = _1101;
        _1411 = _1101;
        _1412 = _1101;
        _1413 = _1101;
        _1414 = _1101;
        _1415 = _1101;
        _1416 = _1101;
        _1417 = _1101;
        _1418 = _1101;
        _1419 = _1101;
        _1420 = _1101;
        _1421 = 0.0;
        _1422 = 0.0;
        _1423 = 0.0;
    }
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1113)) + _1113;
    float _1434 = (cbModelParam._m0[1u].x * (_1422 - _1114)) + _1114;
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1115)) + _1115;
    float _1456 = fma(_1435, cbSceneParam._m0[89u].z, fma(_1434, cbSceneParam._m0[89u].y, _1433 * cbSceneParam._m0[89u].x));
    float _1459 = fma(_1435, cbSceneParam._m0[90u].z, fma(_1434, cbSceneParam._m0[90u].y, _1433 * cbSceneParam._m0[90u].x));
    float _1462 = fma(_1435, cbSceneParam._m0[91u].z, fma(_1434, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1433));
    float _1477 = _738 * 0.5;
    float _1478 = _739 * 0.5;
    float _1479 = _740 * 0.5;
    float _1480 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1483 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1410, _1413, _1416, _1419));
    float _1486 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1520;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1493 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1100, _1104, _1107, _1110));
        float _1497 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1102, _1105, _1108, _1111));
        float _1501 = dot(vec4(_1477, _1478, _1479, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1508 = dot(vec4(cbModelParam._m0[39u]), vec4(_1477, _1478, _1479, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1531;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1522 = dot(vec4(cbModelParam._m0[40u]), vec4(_1477, _1478, _1479, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1522) ? 0.0 : (isnan(0.0) ? _1522 : max(0.0, _1522))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1535 = (_1531 * cbModelParam._m0[1u].x) + (_1520 * (1.0 - cbModelParam._m0[1u].x));
    float _1545 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _581);
    float _1546 = isnan(_1545) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1545 : min(cbModelParam._m0[25u].z, _1545));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1594 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1598 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1602 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1605 = fma(_740, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738));
        float _1608 = fma(_740, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738));
        float _1611 = fma(_740, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738));
        float _1639;
        if (_1605 > 0.0)
        {
            _1639 = abs((1.0 - _1594) / _1605);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1594 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1639 = frontier_phi_14_12_ladder;
        }
        float _1863;
        if (_1608 > 0.0)
        {
            _1863 = abs((1.0 - _1598) / _1608);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1598 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1863 = frontier_phi_23_19_ladder;
        }
        float _2109;
        if (_1611 > 0.0)
        {
            _2109 = abs((1.0 - _1602) / _1611);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1602 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2109 = frontier_phi_35_30_ladder;
        }
        float _2111 = isnan(_1863) ? _1639 : (isnan(_1639) ? _1863 : min(_1639, _1863));
        float _2112 = isnan(_2109) ? _2111 : (isnan(_2111) ? _2109 : min(_2111, _2109));
        float _2116 = (_2112 * _1605) + _1594;
        float _2117 = (_2112 * _1608) + _1598;
        float _2118 = (_2112 * _1611) + _1602;
        float _2119 = _2112 * 9.9999997473787516355514526367188e-05;
        float _2121 = (-1.0) - _2119;
        float _2123 = _2119 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2118 > _2123) || ((_2118 < _2121) || ((_2117 > _2123) || ((_2117 < _2121) || ((_2116 < _2121) || (_2116 > _2123))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2242 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2118, cbModelParam._m0[9u].z, fma(_2117, cbModelParam._m0[9u].y, _2116 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2118, cbModelParam._m0[10u].z, fma(_2117, cbModelParam._m0[10u].y, _2116 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2118, cbModelParam._m0[11u].z, fma(_2117, cbModelParam._m0[11u].y, _2116 * cbModelParam._m0[11u].x))), _1546);
            frontier_phi_13_35_ladder = _2242.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2242.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2242.x * cbModelParam._m0[1u].y;
        }
        _1627 = frontier_phi_13_35_ladder_2;
        _1629 = frontier_phi_13_35_ladder_1;
        _1631 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_738, _739, _740), _1546);
        _1627 = _1615.x * cbModelParam._m0[1u].y;
        _1629 = _1615.y * cbModelParam._m0[1u].y;
        _1631 = _1615.z * cbModelParam._m0[1u].y;
    }
    float _1635 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _581);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1635 : min(cbModelParam._m0[25u].w, _1635));
    float _1726;
    float _1728;
    float _1730;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1690 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1694 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1698 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1701 = fma(_740, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738));
        float _1704 = fma(_740, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738));
        float _1707 = fma(_740, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738));
        float _1868;
        if (_1701 > 0.0)
        {
            _1868 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1868 = frontier_phi_25_21_ladder;
        }
        float _2136;
        if (_1704 > 0.0)
        {
            _2136 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2136 = frontier_phi_37_32_ladder;
        }
        float _2341;
        if (_1707 > 0.0)
        {
            _2341 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2341 = frontier_phi_46_43_ladder;
        }
        float _2343 = isnan(_2136) ? _1868 : (isnan(_1868) ? _2136 : min(_1868, _2136));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1701) + _1690;
        float _2349 = (_2344 * _1704) + _1694;
        float _2350 = (_2344 * _1707) + _1698;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2352 = (-1.0) - _2351;
        float _2354 = _2351 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2350 > _2354) || ((_2350 < _2352) || ((_2349 > _2354) || ((_2349 < _2352) || ((_2348 < _2352) || (_2348 > _2354))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2350, cbModelParam._m0[17u].z, fma(_2349, cbModelParam._m0[17u].y, _2348 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2350, cbModelParam._m0[18u].z, fma(_2349, cbModelParam._m0[18u].y, _2348 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2350, cbModelParam._m0[19u].z, fma(_2349, cbModelParam._m0[19u].y, _2348 * cbModelParam._m0[19u].x))), _1636);
            frontier_phi_22_46_ladder = _2549.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2549.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2549.x * cbModelParam._m0[1u].z;
        }
        _1726 = frontier_phi_22_46_ladder_2;
        _1728 = frontier_phi_22_46_ladder_1;
        _1730 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1710 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_738, _739, _740), _1636);
        _1726 = _1710.x * cbModelParam._m0[1u].z;
        _1728 = _1710.y * cbModelParam._m0[1u].z;
        _1730 = _1710.z * cbModelParam._m0[1u].z;
    }
    float _1742 = ((((1.0 - _759) * ((_746 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_759 * _746)) * _730;
    float _1743 = _1742 * ((cbModelParam._m0[1u].w * (_1726 - _1627)) + _1627);
    float _1744 = _1742 * ((cbModelParam._m0[1u].w * (_1728 - _1629)) + _1629);
    float _1745 = _1742 * ((cbModelParam._m0[1u].w * (_1730 - _1631)) + _1631);
    float _1748 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1751 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1754 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, _1743 * cbSceneParam._m0[91u].x));
    vec4 _1762 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_664, _665));
    float _1764 = _1762.w;
    float _1776 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1764);
    float _1777 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1764);
    float _1778 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1764);
    uvec4 _1782 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1784 = _1782.x * 14u;
    uint _1785 = _1784 + 13u;
    float _1792 = _730 + (-1.0);
    float _1797 = (cbLight._m0[_1785].x * _1792) + 1.0;
    float _1798 = (cbLight._m0[_1785].y * _1792) + 1.0;
    float _1799 = (cbLight._m0[_1785].z * _1792) + 1.0;
    float _1800 = (cbLight._m0[_1785].w * _1792) + 1.0;
    uint _1801 = _1784 + 5u;
    float _1807 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1811 = _1784 + 4u;
    float _1821 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
    uint _1825 = _1784 | 1u;
    float _1836 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_578, _579, _580));
    float _1839 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_578, _579, _580));
    float _3966 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _3977 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1844 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _1846 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _1853 = ((cbLight._m0[_1801].x * _1807) * _1846) + (((cbLight._m0[_1811].x * _1776) * _1821) * _1844);
    float _1854 = ((_1807 * cbLight._m0[_1801].y) * _1846) + (((cbLight._m0[_1811].y * _1777) * _1821) * _1844);
    float _1855 = ((_1807 * cbLight._m0[_1801].z) * _1846) + (((cbLight._m0[_1811].z * _1778) * _1821) * _1844);
    uvec4 _1860 = floatBitsToUint(cbLight._m0[_1784 + 12u]);
    bool _1862 = _1860.x == 0u;
    float _1873;
    float _1875;
    float _1877;
    if (_1862)
    {
        _1873 = _1853;
        _1875 = _1854;
        _1877 = _1855;
    }
    else
    {
        uint _1881 = _1784 + 6u;
        float _1897 = (dot(vec3(cbLight._m0[_1784 + 2u].xyz), vec3(_578, _579, _580)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _3988 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1900 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _1873 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1853;
        _1875 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1854;
        _1877 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1855;
    }
    bool _1880 = _1860.y == 0u;
    float _1918;
    float _1920;
    float _1922;
    if (_1880)
    {
        _1918 = _1873;
        _1920 = _1875;
        _1922 = _1877;
    }
    else
    {
        uint _2080 = _1784 + 7u;
        float _2096 = (dot(vec3(cbLight._m0[_1784 + 3u].xyz), vec3(_578, _579, _580)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4004 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _2099 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1918 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _1873;
        _1920 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _1875;
        _1922 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _1877;
    }
    uint _1925 = _1784 + 8u;
    float _1938 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _581) * 0.949999988079071044921875);
    float _1939 = _1938 * _1938;
    float _1940 = cbLight._m0[_1784].x + _656;
    float _1941 = cbLight._m0[_1784].y + _657;
    float _1942 = cbLight._m0[_1784].z + _658;
    float _1946 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
    float _1947 = _1946 * _1940;
    float _1948 = _1946 * _1941;
    float _1949 = _1946 * _1942;
    float _1950 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_1784].xyz));
    float _4020 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _1954 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1955 = dot(vec3(_578, _579, _580), vec3(_1947, _1948, _1949));
    float _4042 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1958 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1959 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1947, _1948, _1949));
    float _4053 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1963 = _1939 * _1939;
    float _1967 = ((_1958 * _1958) * (_1963 + (-1.0))) + 1.0;
    float _1978 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1979 = 1.0 - _1939;
    float _1990 = (0.5 / (((_1954 * ((_1953 * _1979) + _1939)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _1979) + _1939) * _1953))) * _1953;
    float _4064 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1963 / ((_1967 * _1967) * 3.141590118408203125));
    uint _2006 = _1784 + 9u;
    float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1825].w)) * _581) * 0.949999988079071044921875);
    float _2018 = _2017 * _2017;
    float _2019 = cbLight._m0[_1825].x + _656;
    float _2020 = cbLight._m0[_1825].y + _657;
    float _2021 = cbLight._m0[_1825].z + _658;
    float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
    float _2026 = _2025 * _2019;
    float _2027 = _2025 * _2020;
    float _2028 = _2025 * _2021;
    float _2029 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_1825].xyz));
    float _4075 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _2033 = dot(vec3(_578, _579, _580), vec3(_2026, _2027, _2028));
    float _4086 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1825].xyz), vec3(_2026, _2027, _2028));
    float _4097 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2018 * _2018;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2054 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2055 = 1.0 - _2018;
    float _2065 = (0.5 / (((_1954 * ((_2032 * _2055) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2055) + _2018) * _2032))) * _2032;
    float _4108 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    float _2077 = (((_2054 * cbLight._m0[_2006].x) * _2067) * _1807) + ((((cbLight._m0[_1925].x * _1776) * _1978) * _1992) * _1821);
    float _2078 = (((_2054 * cbLight._m0[_2006].y) * _2067) * _1807) + ((((cbLight._m0[_1925].y * _1777) * _1978) * _1992) * _1821);
    float _2079 = (((_2054 * cbLight._m0[_2006].z) * _2067) * _1807) + ((((cbLight._m0[_1925].z * _1778) * _1978) * _1992) * _1821);
    float _2141;
    float _2143;
    float _2145;
    if (_1862)
    {
        _2141 = _2077;
        _2143 = _2078;
        _2145 = _2079;
    }
    else
    {
        uint _2147 = _1784 + 2u;
        uint _2151 = _1784 + 10u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _581) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _656;
        float _2168 = cbLight._m0[_2147].y + _657;
        float _2169 = cbLight._m0[_2147].z + _658;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2147].xyz));
        float _4119 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _2181 = dot(vec3(_578, _579, _580), vec3(_2174, _2175, _2176));
        float _4130 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4141 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2203 = 1.0 - _2166;
        float _2213 = (0.5 / (((_1954 * ((_2180 * _2203) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2203) + _2166) * _2180))) * _2180;
        float _4152 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
        _2141 = (((_2202 * cbLight._m0[_2151].x) * _2215) * _2216) + _2077;
        _2143 = (((_2202 * cbLight._m0[_2151].y) * _2215) * _2216) + _2078;
        _2145 = (((_2202 * cbLight._m0[_2151].z) * _2215) * _2216) + _2079;
    }
    float _2251;
    float _2253;
    float _2255;
    if (_1880)
    {
        _2251 = _2141;
        _2253 = _2143;
        _2255 = _2145;
    }
    else
    {
        uint _2262 = _1784 + 3u;
        uint _2266 = _1784 + 11u;
        float _2280 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _581) * 0.949999988079071044921875);
        float _2281 = _2280 * _2280;
        float _2282 = cbLight._m0[_2262].x + _656;
        float _2283 = cbLight._m0[_2262].y + _657;
        float _2284 = cbLight._m0[_2262].z + _658;
        float _2288 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
        float _2289 = _2288 * _2282;
        float _2290 = _2288 * _2283;
        float _2291 = _2288 * _2284;
        float _2292 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2262].xyz));
        float _4168 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2296 = dot(vec3(_578, _579, _580), vec3(_2289, _2290, _2291));
        float _4179 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2299 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2300 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2289, _2290, _2291));
        float _4190 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2304 = _2281 * _2281;
        float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
        float _2317 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2318 = 1.0 - _2281;
        float _2328 = (0.5 / (((_1954 * ((_2295 * _2318) + _2281)) + 9.9999999392252902907785028219223e-09) + (((_1954 * _2318) + _2281) * _2295))) * _2295;
        float _4201 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2330 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
        float _2331 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2251 = (((_2317 * cbLight._m0[_2266].x) * _2330) * _2331) + _2141;
        _2253 = (((_2317 * cbLight._m0[_2266].y) * _2330) * _2331) + _2143;
        _2255 = (((_2317 * cbLight._m0[_2266].z) * _2330) * _2331) + _2145;
    }
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_1782.y == 0u)
    {
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2406;
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2406;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2406;
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.x;
        uint _2433 = uint((float(_2421.y) * floor(float(uint(cbSceneParam._m0[85u].y * _665) / _2422))) + floor(float(uint(cbSceneParam._m0[85u].x * _664) / _2422)));
        float _2443 = (log2(_2409 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2444 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        uint _2447 = uint(isnan(14.0) ? _2444 : (isnan(_2444) ? 14.0 : min(_2444, 14.0)));
        uvec4 _2452 = texelFetch(g_lightClusterGridBuffer, int(((_2447 << 2u) + (_2433 << 6u)) >> 2u));
        uint _2453 = _2452.x;
        uint _2454 = _2421.z;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((((1u << ((_2454 >> 4u) & 15u)) + 4294967295u) & _2453) == 0u) || ((_2454 & 240u) == 0u))
        {
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
        }
        else
        {
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            uint _2705 = 0u;
            uint _2714;
            bool _2715;
            for (;;)
            {
                _2714 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2705 << 2u)) >> 2u)).x;
                _2715 = _2714 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2715)
                {
                    frontier_phi_61_pred = _2699;
                    frontier_phi_61_pred_1 = _2704;
                    frontier_phi_61_pred_2 = _2703;
                    frontier_phi_61_pred_3 = _2702;
                    frontier_phi_61_pred_4 = _2701;
                    frontier_phi_61_pred_5 = _2700;
                }
                else
                {
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    uint _2829;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2704;
                    _2829 = _2714;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    for (;;)
                    {
                        uint _2833 = uint(findLSB(_2829)) + (_2705 << 5u);
                        uint _2830 = (_2829 + 4294967295u) & _2829;
                        uint _2835 = _2833 * 48u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 3u)).x));
                        uint _2855 = (_2833 * 48u) + 4u;
                        vec4 _2868 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2874 = (_2833 * 48u) + 8u;
                        vec3 _2885 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x));
                        float _2889 = _2849.x - _2407;
                        float _2890 = _2849.y - _2408;
                        float _2891 = _2849.z - _2409;
                        float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                        float _2895 = inversesqrt(_2892);
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2899 = dot(vec3(_686, _689, _692), vec3(_2896, _2897, _2898));
                        float _2904 = 1.0 - (_2892 * _2849.w);
                        float _4227 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2906 = sqrt(_2892) * _2868.w;
                        float _2909 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2899) + _2910;
                        float _2916 = _2906 * _2906;
                        float _2920 = ((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2905) / ((_2916 * 0.699999988079071044921875) + 1.0);
                        float _2924 = (-0.0) - _2407;
                        float _2925 = (-0.0) - _2408;
                        float _2926 = (-0.0) - _2409;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2941 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                        float _2942 = 1.0 - _746;
                        float _2949 = sqrt(1.0 - ((1.0 - (_2942 * _2942)) * (1.0 - (_2941 * _2941))));
                        float _2950 = _2949 * _2949;
                        float _2951 = _2950 * _2950;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2954 = _2933 + _2898;
                        float _2958 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
                        float _2962 = dot(vec3(_686, _689, _692), vec3(_2931, _2932, _2933));
                        float _4243 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2965 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                        float _2966 = dot(vec3(_686, _689, _692), vec3(_2958 * _2952, _2958 * _2953, _2958 * _2954));
                        float _4254 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2969 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2973 = ((_2969 * _2969) * (_2951 + (-1.0))) + 1.0;
                        float _2974 = _2909 * _2950;
                        float _2975 = _2974 * _2974;
                        float _2978 = ((1.0 - _2975) * _2899) + _2975;
                        float _4265 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2979 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2980 = 1.0 - _2950;
                        float _2990 = (0.5 / (((_2979 * ((_2965 * _2980) + _2950)) + 9.9999999392252902907785028219223e-09) + (((_2979 * _2980) + _2950) * _2965))) * _2979;
                        float _4276 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _3001 = (((_2951 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_2973 * _2973) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125))) * _2905;
                        _2758 = (_2920 * _2868.x) + _2826;
                        _2759 = (_2920 * _2868.y) + _2827;
                        _2760 = (_2920 * _2868.z) + _2828;
                        _2755 = (_3001 * _2885.x) + _2823;
                        _2756 = (_3001 * _2885.y) + _2824;
                        _2757 = (_3001 * _2885.z) + _2825;
                        if (_2830 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2760;
                            _2829 = _2830;
                        }
                    }
                    frontier_phi_61_pred = _2755;
                    frontier_phi_61_pred_1 = _2760;
                    frontier_phi_61_pred_2 = _2759;
                    frontier_phi_61_pred_3 = _2758;
                    frontier_phi_61_pred_4 = _2757;
                    frontier_phi_61_pred_5 = _2756;
                }
                _2555 = frontier_phi_61_pred;
                _2565 = frontier_phi_61_pred_1;
                _2563 = frontier_phi_61_pred_2;
                _2561 = frontier_phi_61_pred_3;
                _2559 = frontier_phi_61_pred_4;
                _2557 = frontier_phi_61_pred_5;
                uint _2706 = _2705 + 1u;
                if (_2706 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2699 = _2555;
                    _2700 = _2557;
                    _2701 = _2559;
                    _2702 = _2561;
                    _2703 = _2563;
                    _2704 = _2565;
                    _2705 = _2706;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
        }
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.z;
        uint _2571 = (_2569 >> 8u) & 15u;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        if (((4294967295u << _2571) & _2453) == 0u)
        {
            _2667 = _2554;
            _2669 = _2556;
            _2671 = _2558;
            _2673 = _2560;
            _2675 = _2562;
            _2677 = _2564;
        }
        else
        {
            float _2692 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
            float _2693 = _2692 * _2407;
            float _2694 = _2692 * _2408;
            float _2695 = _2692 * _2409;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2571 < ((_2569 >> 12u) & 15u))
            {
                float _2668;
                float _2670;
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2806 = _2554;
                float _2807 = _2556;
                float _2808 = _2558;
                float _2809 = _2560;
                float _2810 = _2562;
                float _2811 = _2564;
                uint _2812 = _2571;
                uint _2821;
                bool _2822;
                for (;;)
                {
                    _2821 = texelFetch(g_lightClassification, int((((_2447 << 5u) + (_2433 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                    _2822 = _2821 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2822)
                    {
                        frontier_phi_67_pred = _2809;
                        frontier_phi_67_pred_1 = _2810;
                        frontier_phi_67_pred_2 = _2811;
                        frontier_phi_67_pred_3 = _2808;
                        frontier_phi_67_pred_4 = _2807;
                        frontier_phi_67_pred_5 = _2806;
                    }
                    else
                    {
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        float _3024 = _2811;
                        uint _3025 = _2821;
                        uint _3026;
                        vec4 _3051;
                        float _3052;
                        vec4 _3067;
                        vec3 _3079;
                        vec4 _3095;
                        vec4 _3110;
                        float _3156;
                        bool _3157;
                        for (;;)
                        {
                            uint _3036 = ((_2812 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3025));
                            _3026 = (_3025 + 4294967295u) & _3025;
                            uint _3038 = _3036 * 40u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3052 = _3051.w;
                            uint _3054 = (_3036 * 40u) + 4u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3069 = (_3036 * 40u) + 8u;
                            _3079 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x));
                            uint _3082 = (_3036 * 40u) + 16u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3097 = (_3036 * 40u) + 20u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3036 * 40u) + 24u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3131 = (_3036 * 40u) + 28u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3156 = fma(_2409, _3144.z, fma(_2408, _3144.y, _3144.x * _2407)) + _3144.w;
                            _3157 = !((fma(_2409, _3125.z, fma(_2408, _3125.y, _3125.x * _2407)) + _3125.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3157)
                            {
                                float _3184 = _3051.x - _2407;
                                float _3185 = _3051.y - _2408;
                                float _3186 = _3051.z - _2409;
                                float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                                float _3190 = inversesqrt(_3187);
                                float _3191 = _3190 * _3184;
                                float _3192 = _3190 * _3185;
                                float _3193 = _3190 * _3186;
                                float _3197 = 1.0 - (_3187 / (_3052 * _3052));
                                float _4287 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3202 = sqrt(_3187) * _3067.w;
                                float _3204 = 1.39999997615814208984375 / (_3202 + 1.39999997615814208984375);
                                float _3205 = _3204 * _3204;
                                float _3208 = ((1.0 - _3205) * dot(vec3(_3191, _3192, _3193), vec3(_686, _689, _692))) + _3205;
                                float _3211 = _3202 * _3202;
                                float _3215 = (fma(_2409, _3095.z, fma(_2408, _3095.y, _3095.x * _2407)) + _3095.w) / _3156;
                                float _3216 = (fma(_2409, _3110.z, fma(_2408, _3110.y, _3110.x * _2407)) + _3110.w) / _3156;
                                float _3220 = 1.0 - dot(vec2(_3215, _3216), vec2(_3215, _3216));
                                float _4303 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                                float _3222 = _3221 * (((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3198) / ((_3211 * 0.699999988079071044921875) + 1.0));
                                float _3234 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                                float _3235 = 1.0 - _746;
                                float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                                float _3243 = _3242 * _3242;
                                float _3244 = _3243 * _3243;
                                float _3245 = _3191 - _2693;
                                float _3246 = _3192 - _2694;
                                float _3247 = _3193 - _2695;
                                float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                                float _3255 = dot(vec3(_686, _689, _692), vec3((-0.0) - _2693, (-0.0) - _2694, (-0.0) - _2695));
                                float _4314 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3259 = dot(vec3(_686, _689, _692), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                                float _4325 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                                float _3267 = _3204 * _3243;
                                float _3268 = _3267 * _3267;
                                float _3274 = ((1.0 - _3268) * dot(vec3(_686, _689, _692), vec3(_3191, _3192, _3193))) + _3268;
                                float _4336 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3276 = 1.0 - _3243;
                                float _3286 = (0.5 / (((_3275 * ((_3258 * _3276) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3275 * _3276) + _3243) * _3258))) * _3275;
                                float _4347 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3296 = (_3221 * _3198) * (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3266 * _3266) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3296 * _3079.x;
                                frontier_phi_73_pred_1 = _3296 * _3079.y;
                                frontier_phi_73_pred_2 = _3222 * _3067.z;
                                frontier_phi_73_pred_3 = _3222 * _3067.y;
                                frontier_phi_73_pred_4 = _3222 * _3067.x;
                                frontier_phi_73_pred_5 = _3296 * _3079.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3300 = frontier_phi_73_pred;
                            _3301 = frontier_phi_73_pred_1;
                            _3305 = frontier_phi_73_pred_2;
                            _3304 = frontier_phi_73_pred_3;
                            _3303 = frontier_phi_73_pred_4;
                            _3302 = frontier_phi_73_pred_5;
                            _3009 = _3303 + _3022;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3006 = _3300 + _3019;
                            _3007 = _3301 + _3020;
                            _3008 = _3302 + _3021;
                            if (_3026 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3026;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3009;
                        frontier_phi_67_pred_1 = _3010;
                        frontier_phi_67_pred_2 = _3011;
                        frontier_phi_67_pred_3 = _3008;
                        frontier_phi_67_pred_4 = _3007;
                        frontier_phi_67_pred_5 = _3006;
                    }
                    _2674 = frontier_phi_67_pred;
                    _2676 = frontier_phi_67_pred_1;
                    _2678 = frontier_phi_67_pred_2;
                    _2672 = frontier_phi_67_pred_3;
                    _2670 = frontier_phi_67_pred_4;
                    _2668 = frontier_phi_67_pred_5;
                    uint _2813 = _2812 + 1u;
                    if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2806 = _2668;
                        _2807 = _2670;
                        _2808 = _2672;
                        _2809 = _2674;
                        _2810 = _2676;
                        _2811 = _2678;
                        _2812 = _2813;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2676;
                frontier_phi_55_56_ladder_1 = _2678;
                frontier_phi_55_56_ladder_2 = _2674;
                frontier_phi_55_56_ladder_3 = _2672;
                frontier_phi_55_56_ladder_4 = _2670;
                frontier_phi_55_56_ladder_5 = _2668;
            }
            else
            {
                frontier_phi_55_56_ladder = _2562;
                frontier_phi_55_56_ladder_1 = _2564;
                frontier_phi_55_56_ladder_2 = _2560;
                frontier_phi_55_56_ladder_3 = _2558;
                frontier_phi_55_56_ladder_4 = _2556;
                frontier_phi_55_56_ladder_5 = _2554;
            }
            _2667 = frontier_phi_55_56_ladder_5;
            _2669 = frontier_phi_55_56_ladder_4;
            _2671 = frontier_phi_55_56_ladder_3;
            _2673 = frontier_phi_55_56_ladder_2;
            _2675 = frontier_phi_55_56_ladder;
            _2677 = frontier_phi_55_56_ladder_1;
        }
        float _2682 = isnan(1.0) ? _730 : (isnan(_730) ? 1.0 : min(_730, 1.0));
        _2466 = (_2682 * _2673) + _1918;
        _2468 = (_2682 * _2675) + _1920;
        _2470 = (_2682 * _2677) + _1922;
        _2472 = ((_2667 * 0.039999999105930328369140625) * _2682) + _2251;
        _2474 = ((_2669 * 0.039999999105930328369140625) * _2682) + _2253;
        _2476 = ((_2671 * 0.039999999105930328369140625) * _2682) + _2255;
    }
    else
    {
        _2466 = _1918;
        _2468 = _1920;
        _2470 = _1922;
        _2472 = _2251;
        _2474 = _2253;
        _2476 = _2255;
    }
    float _4363 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _4374 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4385 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    uint _2496 = _241 + 6u;
    float _2504 = _664 / cbSceneParam._m0[86u].x;
    float _2505 = _665 / cbSceneParam._m0[86u].y;
    vec4 _2519 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2504, _2505, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2521 = _2519.x;
    float _2522 = _2519.y;
    float _2523 = _2519.z;
    float _2524 = _2519.w;
    float _2617;
    float _2619;
    float _2621;
    float _2623;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2579 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2580 = _2579 / _599;
        float _2591 = _2580 * _649;
        float _2592 = _650 * _2580;
        float _2593 = (-0.0) - _2592;
        float _2595 = _2580 * _651;
        float _2597 = (cbSceneParam._m0[77u].w * _2593) / _2579;
        float _2598 = _2597 + cbSceneParam._m0[79u].w;
        float _2599 = cbSceneParam._m0[79u].w - _2592;
        float _2605 = sqrt(((_2591 * _2591) + (_2592 * _2592)) + (_2595 * _2595));
        float _2608 = (1.0 - (cbSceneParam._m0[77u].w / _2579)) * _2605;
        float _2613 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2615 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2768;
        if (abs((_2593 - _2597) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2768 = ((((_2598 > 0.0) ? exp2(_2613 * _2598) : (2.0 - exp2(_2615 * _2598))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2608;
        }
        else
        {
            float _2728 = 1.0 / cbSceneParam._m0[80u].x;
            float _2729 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : max(_2598, _2599));
            float _2730 = isnan(_2599) ? _2598 : (isnan(_2598) ? _2599 : min(_2598, _2599));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            float _2740 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : min(_2730, 0.0));
            _2768 = ((abs(_2605 / _2593) * cbSceneParam._m0[80u].y) * ((((_2739 - _2740) * 2.0) - ((exp2(_2613 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0)))) - exp2(_2613 * (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))))) * _2728)) - ((exp2(_2615 * _2739) - exp2(_2615 * _2740)) * _2728))) + (_2608 * cbSceneParam._m0[80u].z);
        }
        vec4 _2770 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2504, _2505, 1.0), 0.0);
        float _2779 = exp2((_2768 * (-1.44269502162933349609375)) * (1.0 - _2770.w));
        float _2780 = log2(_2779);
        float _2796 = log2(_2524);
        _2617 = (exp2(_2796 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].x)) * _2770.x) / cbSceneParam._m0[78u].x)) + _2521;
        _2619 = (exp2(_2796 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].y)) * _2770.y) / cbSceneParam._m0[78u].y)) + _2522;
        _2621 = (exp2(_2796 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2780 * cbSceneParam._m0[78u].z)) * _2770.z) / cbSceneParam._m0[78u].z)) + _2523;
        _2623 = _2779 * _2524;
    }
    else
    {
        _2617 = _2521;
        _2619 = _2522;
        _2621 = _2523;
        _2623 = _2524;
    }
    float _2635 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2636 = _2635 == 3.0;
    float _2637 = log2(_2623);
    float _2644 = exp2(_2637 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2466 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _730))) + ((_2472 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2637 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2468 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _730))) + ((_2474 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2646 = exp2(_2637 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2470 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _730))) + ((_2476 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1535)) * cbPerFrame._m0[3u].x));
    float _2655 = (_2635 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2655 * (_2636 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2617)));
    SV_Target.y = _2655 * (_2636 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2619)));
    SV_Target.z = _2655 * (_2636 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2621)));
    SV_Target.w = cbInstanceData._m0[_2496].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2496].w;
}


