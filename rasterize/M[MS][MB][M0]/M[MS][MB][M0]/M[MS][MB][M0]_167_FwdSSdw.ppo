#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1122;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _345 = _343.x;
    float _355 = dot(vec4(_345, _343.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _372 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_345 - _355) * cbMtdParam._m0[24u].x) + _355) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3453 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _380 = (_373 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _381 = (_373 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _382 = (_373 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _256) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _257) + cbTextureTilingScale._m0[3u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _421 = _419.x;
    float _431 = dot(vec4(_421, _419.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _445 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_421 - _431) * cbMtdParam._m0[24u].x) + _431) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3464 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _453 = (_446 * ((_399.x * cbMtdParam._m0[13u].x) - _380)) + _380;
    float _454 = (_446 * ((_399.y * cbMtdParam._m0[13u].y) - _381)) + _381;
    float _455 = (_446 * ((_399.z * cbMtdParam._m0[13u].z) - _382)) + _382;
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _518 = ((_490.x - _509) * _373) + _509;
    float _519 = ((_490.y - _510) * _373) + _510;
    float _520 = ((_490.z - _511) * _373) + _511;
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _256) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _257) + cbTextureTilingScale._m0[2u].w));
    float _545 = ((_532.z - _520) * _446) + _520;
    float _548 = ((((_532.x - _518) * _446) + _518) * 2.0) + (-1.0);
    float _549 = ((((_532.y - _519) * _446) + _519) * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3475 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))));
    float _560 = _548 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)));
    float _561 = _549 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)));
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _581 = (((_467.z - _545) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _545;
    float _586 = cbMtdParam._m0[22u].x + _574.w;
    float _589 = fma(_555, _223 * NORMAL.x, fma(_561, _230 * TANGENT.x, (_216 * _208) * _560));
    float _592 = fma(_555, _223 * NORMAL.y, fma(_561, _230 * TANGENT.y, (_216 * _209) * _560));
    float _595 = fma(_555, _223 * NORMAL.z, fma(_561, _230 * TANGENT.z, (_216 * _210) * _560));
    float _599 = inversesqrt(dot(vec3(_589, _592, _595), vec3(_589, _592, _595)));
    float _600 = _599 * _589;
    float _601 = _599 * _592;
    float _602 = _599 * _595;
    float _3486 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _603 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3508 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3519 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3530 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _621 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _673 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _663);
    float _674 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _663);
    float _675 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _663);
    float _679 = inversesqrt(dot(vec3(_673, _674, _675), vec3(_673, _674, _675)));
    float _680 = _673 * _679;
    float _681 = _674 * _679;
    float _682 = _675 * _679;
    float _688 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _689 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _707 = fma(_602, cbSceneParam._m0[5u].z, fma(_601, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _600));
    float _710 = fma(_602, cbSceneParam._m0[6u].z, fma(_601, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _600));
    float _713 = fma(_602, cbSceneParam._m0[7u].z, fma(_601, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _600));
    uint _727 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _733 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_727].x;
    float _734 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_727].y;
    float _735 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_727].z;
    float _3541 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _747 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _688, cbSceneParam._m0[86u].y * _689));
    float _751 = ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * TEXCOORD_5.w) * _747.x;
    float _752 = dot(vec3(_600, _601, _602), vec3(_680, _681, _682));
    float _755 = _752 * 2.0;
    float _759 = (_755 * _600) - _680;
    float _760 = (_755 * _601) - _681;
    float _761 = (_755 * _602) - _682;
    float _765 = abs(dot(vec3(_680, _681, _682), vec3(_600, _601, _602)));
    float _3574 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _767 = sqrt(_603);
    float _780 = exp2((_767 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_767 * 3.0));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1121;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _846 = fma(_820, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812));
        float _850 = fma(_820, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812));
        float _854 = fma(_820, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812));
        float _879 = _812 + _600;
        float _880 = _816 + _601;
        float _881 = _820 + _602;
        float _891 = fma(_881, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879)) - _846;
        float _892 = fma(_881, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879)) - _850;
        float _893 = fma(_881, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879)) - _854;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_846 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_850 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[34u].z) + ((((((_854 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _949 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_915.x + (-0.5));
        float _951 = _949 * (_915.y + (-0.5));
        float _952 = _949 * (_915.z + (-0.5));
        float _959 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_922.x + (-0.5));
        float _961 = _959 * (_922.y + (-0.5));
        float _962 = _959 * (_922.z + (-0.5));
        float _969 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_929.x + (-0.5));
        float _971 = _969 * (_929.y + (-0.5));
        float _972 = _969 * (_929.z + (-0.5));
        float _979 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_936.x + (-0.5));
        float _981 = _979 * (_936.y + (-0.5));
        float _982 = _979 * (_936.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1003 = (dot(vec3(_600, _601, _602), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1013 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3622 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1015 + 1.0))) + _1020) * _983;
        float _1030 = _951 * 0.5;
        float _1031 = _961 * 0.5;
        float _1032 = _971 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_600, _601, _602), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3655 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1057 + 1.0))) + _1062) * _984;
        float _1072 = _952 * 0.5;
        float _1073 = _962 * 0.5;
        float _1074 = _972 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_600, _601, _602), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3688 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1099 + 1.0))) + _1104) * _985;
        _1121 = _952;
        _1123 = _951;
        _1124 = _950;
        _1125 = _962;
        _1126 = _961;
        _1127 = _960;
        _1128 = _972;
        _1129 = _971;
        _1130 = _970;
        _1131 = _985;
        _1132 = _984;
        _1133 = _983;
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _1122;
        _1123 = _1122;
        _1124 = _1122;
        _1125 = _1122;
        _1126 = _1122;
        _1127 = _1122;
        _1128 = _1122;
        _1129 = _1122;
        _1130 = _1122;
        _1131 = _1122;
        _1132 = _1122;
        _1133 = _1122;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_820, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812));
        float _1164 = fma(_820, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812));
        float _1168 = fma(_820, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812));
        float _1191 = _812 + _600;
        float _1192 = _816 + _601;
        float _1193 = _820 + _602;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_600, _601, _602), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3751 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_600, _601, _602), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3784 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_600, _601, _602), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3817 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1122;
        _1430 = _1122;
        _1431 = _1122;
        _1432 = _1122;
        _1433 = _1122;
        _1434 = _1122;
        _1435 = _1122;
        _1436 = _1122;
        _1437 = _1122;
        _1438 = _1122;
        _1439 = _1122;
        _1440 = _1122;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1134)) + _1134;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1135)) + _1135;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1136)) + _1136;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _759 * 0.5;
    float _1498 = _760 * 0.5;
    float _1499 = _761 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1121, _1125, _1128, _1131));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _603);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1648;
    float _1650;
    float _1652;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1615 = fma(_820, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812)) + cbModelParam._m0[13u].w;
        float _1619 = fma(_820, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812)) + cbModelParam._m0[14u].w;
        float _1623 = fma(_820, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812)) + cbModelParam._m0[15u].w;
        float _1626 = fma(_761, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759));
        float _1629 = fma(_761, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759));
        float _1632 = fma(_761, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759));
        float _1660;
        if (_1626 > 0.0)
        {
            _1660 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1660 = frontier_phi_14_12_ladder;
        }
        float _1883;
        if (_1629 > 0.0)
        {
            _1883 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1883 = frontier_phi_23_19_ladder;
        }
        float _2129;
        if (_1632 > 0.0)
        {
            _2129 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2129 = frontier_phi_35_30_ladder;
        }
        float _2131 = isnan(_1883) ? _1660 : (isnan(_1660) ? _1883 : min(_1660, _1883));
        float _2132 = isnan(_2129) ? _2131 : (isnan(_2131) ? _2129 : min(_2131, _2129));
        float _2136 = (_2132 * _1626) + _1615;
        float _2137 = (_2132 * _1629) + _1619;
        float _2138 = (_2132 * _1632) + _1623;
        float _2139 = _2132 * 9.9999997473787516355514526367188e-05;
        float _2141 = (-1.0) - _2139;
        float _2143 = _2139 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2138 > _2143) || ((_2138 < _2141) || ((_2137 > _2143) || ((_2137 < _2141) || ((_2136 < _2141) || (_2136 > _2143))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2138, cbModelParam._m0[9u].z, fma(_2137, cbModelParam._m0[9u].y, _2136 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2138, cbModelParam._m0[10u].z, fma(_2137, cbModelParam._m0[10u].y, _2136 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2138, cbModelParam._m0[11u].z, fma(_2137, cbModelParam._m0[11u].y, _2136 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_13_35_ladder = _2262.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2262.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2262.x * cbModelParam._m0[1u].y;
        }
        _1648 = frontier_phi_13_35_ladder_2;
        _1650 = frontier_phi_13_35_ladder_1;
        _1652 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_759, _760, _761), _1566);
        _1648 = _1636.x * cbModelParam._m0[1u].y;
        _1650 = _1636.y * cbModelParam._m0[1u].y;
        _1652 = _1636.z * cbModelParam._m0[1u].y;
    }
    float _1656 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _603);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1656 : min(cbModelParam._m0[25u].w, _1656));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_820, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_820, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_820, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_761, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759));
        float _1726 = fma(_761, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759));
        float _1729 = fma(_761, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759));
        float _1888;
        if (_1723 > 0.0)
        {
            _1888 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1888 = frontier_phi_25_21_ladder;
        }
        float _2156;
        if (_1726 > 0.0)
        {
            _2156 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2156 = frontier_phi_37_32_ladder;
        }
        float _2361;
        if (_1729 > 0.0)
        {
            _2361 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2361 = frontier_phi_46_43_ladder;
        }
        float _2363 = isnan(_2156) ? _1888 : (isnan(_1888) ? _2156 : min(_1888, _2156));
        float _2364 = isnan(_2361) ? _2363 : (isnan(_2363) ? _2361 : min(_2363, _2361));
        float _2368 = (_2364 * _1723) + _1712;
        float _2369 = (_2364 * _1726) + _1716;
        float _2370 = (_2364 * _1729) + _1720;
        float _2371 = _2364 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2371;
        float _2374 = _2371 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2370 > _2374) || ((_2370 < _2372) || ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 < _2372) || (_2368 > _2374))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2370, cbModelParam._m0[17u].z, fma(_2369, cbModelParam._m0[17u].y, _2368 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2370, cbModelParam._m0[18u].z, fma(_2369, cbModelParam._m0[18u].y, _2368 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2370, cbModelParam._m0[19u].z, fma(_2369, cbModelParam._m0[19u].y, _2368 * cbModelParam._m0[19u].x))), _1657);
            frontier_phi_22_46_ladder = _2569.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2569.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2569.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_22_46_ladder_2;
        _1750 = frontier_phi_22_46_ladder_1;
        _1752 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_759, _760, _761), _1657);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1764 = ((((1.0 - _780) * ((_767 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_780 * _767)) * _751;
    float _1765 = _1764 * ((cbModelParam._m0[1u].w * (_1748 - _1648)) + _1648);
    float _1766 = _1764 * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1767 = _1764 * ((cbModelParam._m0[1u].w * (_1752 - _1652)) + _1652);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    vec4 _1784 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_688, _689));
    float _1786 = _1784.w;
    float _1798 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1786);
    float _1799 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1786);
    float _1800 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1786);
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1814 = _751 + (-1.0);
    float _1819 = (cbLight._m0[_1807].x * _1814) + 1.0;
    float _1820 = (cbLight._m0[_1807].y * _1814) + 1.0;
    float _1821 = (cbLight._m0[_1807].z * _1814) + 1.0;
    float _1822 = (cbLight._m0[_1807].w * _1814) + 1.0;
    uint _1823 = _1806 + 5u;
    float _1829 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1833 = _1806 + 4u;
    float _1842 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1846 = _1806 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_600, _601, _602));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_600, _601, _602));
    float _3953 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3964 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1823].x * _1829) * _1867) + (((cbLight._m0[_1833].x * _1798) * _1842) * _1865);
    float _1875 = ((_1829 * cbLight._m0[_1823].y) * _1867) + (((cbLight._m0[_1833].y * _1799) * _1842) * _1865);
    float _1876 = ((_1829 * cbLight._m0[_1823].z) * _1867) + (((cbLight._m0[_1833].z * _1800) * _1842) * _1865);
    uvec4 _1880 = floatBitsToUint(cbLight._m0[_1806 + 12u]);
    bool _1882 = _1880.x == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1882)
    {
        _1893 = _1874;
        _1895 = _1875;
        _1897 = _1876;
    }
    else
    {
        uint _1901 = _1806 + 6u;
        float _1917 = (dot(vec3(cbLight._m0[_1806 + 2u].xyz), vec3(_600, _601, _602)) * 0.5) + 0.5;
        float _1918 = _1917 * _1917;
        float _3975 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1919 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1920 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1893 = (((cbLight._m0[_1901].x * 0.3183098733425140380859375) * _1919) * _1920) + _1874;
        _1895 = (((cbLight._m0[_1901].y * 0.3183098733425140380859375) * _1919) * _1920) + _1875;
        _1897 = (((cbLight._m0[_1901].z * 0.3183098733425140380859375) * _1919) * _1920) + _1876;
    }
    bool _1900 = _1880.y == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1900)
    {
        _1938 = _1893;
        _1940 = _1895;
        _1942 = _1897;
    }
    else
    {
        uint _2100 = _1806 + 7u;
        float _2116 = (dot(vec3(cbLight._m0[_1806 + 3u].xyz), vec3(_600, _601, _602)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _3991 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2119 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1938 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _1893;
        _1940 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _1895;
        _1942 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _1897;
    }
    uint _1945 = _1806 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _603) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1806].x + _680;
    float _1961 = cbLight._m0[_1806].y + _681;
    float _1962 = cbLight._m0[_1806].z + _682;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_600, _601, _602), vec3(cbLight._m0[_1806].xyz));
    float _4007 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _1974 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1975 = dot(vec3(_600, _601, _602), vec3(_1967, _1968, _1969));
    float _4029 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1967, _1968, _1969));
    float _4040 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1998 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1999 = 1.0 - _1959;
    float _2010 = (0.5 / (((_1974 * ((_1973 * _1999) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _1999) + _1959) * _1973))) * _1973;
    float _4051 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2012 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2026 = _1806 + 9u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _603) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1846].x + _680;
    float _2040 = cbLight._m0[_1846].y + _681;
    float _2041 = cbLight._m0[_1846].z + _682;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_600, _601, _602), vec3(cbLight._m0[_1846].xyz));
    float _4062 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2053 = dot(vec3(_600, _601, _602), vec3(_2046, _2047, _2048));
    float _4073 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2057 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2046, _2047, _2048));
    float _4084 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = _2038 * _2038;
    float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
    float _2074 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2075 = 1.0 - _2038;
    float _2085 = (0.5 / (((_1974 * ((_2052 * _2075) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2075) + _2038) * _2052))) * _2052;
    float _4095 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
    float _2097 = (((_2074 * cbLight._m0[_2026].x) * _2087) * _1829) + ((((cbLight._m0[_1945].x * _1798) * _1998) * _2012) * _1842);
    float _2098 = (((_2074 * cbLight._m0[_2026].y) * _2087) * _1829) + ((((cbLight._m0[_1945].y * _1799) * _1998) * _2012) * _1842);
    float _2099 = (((_2074 * cbLight._m0[_2026].z) * _2087) * _1829) + ((((cbLight._m0[_1945].z * _1800) * _1998) * _2012) * _1842);
    float _2161;
    float _2163;
    float _2165;
    if (_1882)
    {
        _2161 = _2097;
        _2163 = _2098;
        _2165 = _2099;
    }
    else
    {
        uint _2167 = _1806 + 2u;
        uint _2171 = _1806 + 10u;
        float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _603) * 0.949999988079071044921875);
        float _2186 = _2185 * _2185;
        float _2187 = cbLight._m0[_2167].x + _680;
        float _2188 = cbLight._m0[_2167].y + _681;
        float _2189 = cbLight._m0[_2167].z + _682;
        float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
        float _2194 = _2193 * _2187;
        float _2195 = _2193 * _2188;
        float _2196 = _2193 * _2189;
        float _2197 = dot(vec3(_600, _601, _602), vec3(cbLight._m0[_2167].xyz));
        float _4106 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2201 = dot(vec3(_600, _601, _602), vec3(_2194, _2195, _2196));
        float _4117 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2205 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2194, _2195, _2196));
        float _4128 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2209 = _2186 * _2186;
        float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
        float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2223 = 1.0 - _2186;
        float _2233 = (0.5 / (((_1974 * ((_2200 * _2223) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2223) + _2186) * _2200))) * _2200;
        float _4139 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2235 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
        float _2236 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2161 = (((_2222 * cbLight._m0[_2171].x) * _2235) * _2236) + _2097;
        _2163 = (((_2222 * cbLight._m0[_2171].y) * _2235) * _2236) + _2098;
        _2165 = (((_2222 * cbLight._m0[_2171].z) * _2235) * _2236) + _2099;
    }
    float _2271;
    float _2273;
    float _2275;
    if (_1900)
    {
        _2271 = _2161;
        _2273 = _2163;
        _2275 = _2165;
    }
    else
    {
        uint _2282 = _1806 + 3u;
        uint _2286 = _1806 + 11u;
        float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _603) * 0.949999988079071044921875);
        float _2301 = _2300 * _2300;
        float _2302 = cbLight._m0[_2282].x + _680;
        float _2303 = cbLight._m0[_2282].y + _681;
        float _2304 = cbLight._m0[_2282].z + _682;
        float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
        float _2309 = _2308 * _2302;
        float _2310 = _2308 * _2303;
        float _2311 = _2308 * _2304;
        float _2312 = dot(vec3(_600, _601, _602), vec3(cbLight._m0[_2282].xyz));
        float _4155 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2316 = dot(vec3(_600, _601, _602), vec3(_2309, _2310, _2311));
        float _4166 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2320 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2309, _2310, _2311));
        float _4177 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2324 = _2301 * _2301;
        float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
        float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2338 = 1.0 - _2301;
        float _2348 = (0.5 / (((_1974 * ((_2315 * _2338) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2338) + _2301) * _2315))) * _2315;
        float _4188 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2271 = (((_2337 * cbLight._m0[_2286].x) * _2350) * _2351) + _2161;
        _2273 = (((_2337 * cbLight._m0[_2286].y) * _2350) * _2351) + _2163;
        _2275 = (((_2337 * cbLight._m0[_2286].z) * _2350) * _2351) + _2165;
    }
    float _2486;
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    if (_1804.y == 0u)
    {
        float _2426 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2427 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2426;
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2426;
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2426;
        uvec4 _2441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2442 = _2441.x;
        uint _2453 = uint((float(_2441.y) * floor(float(uint(cbSceneParam._m0[85u].y * _689) / _2442))) + floor(float(uint(cbSceneParam._m0[85u].x * _688) / _2442)));
        float _2463 = (log2(_2429 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2464 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        uint _2467 = uint(isnan(14.0) ? _2464 : (isnan(_2464) ? 14.0 : min(_2464, 14.0)));
        uvec4 _2472 = texelFetch(g_lightClusterGridBuffer, int(((_2467 << 2u) + (_2453 << 6u)) >> 2u));
        uint _2473 = _2472.x;
        uint _2474 = _2441.z;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((((1u << ((_2474 >> 4u) & 15u)) + 4294967295u) & _2473) == 0u) || ((_2474 & 240u) == 0u))
        {
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
        }
        else
        {
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            uint _2725 = 0u;
            uint _2734;
            bool _2735;
            for (;;)
            {
                _2734 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                _2735 = _2734 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2735)
                {
                    frontier_phi_61_pred = _2719;
                    frontier_phi_61_pred_1 = _2724;
                    frontier_phi_61_pred_2 = _2723;
                    frontier_phi_61_pred_3 = _2722;
                    frontier_phi_61_pred_4 = _2721;
                    frontier_phi_61_pred_5 = _2720;
                }
                else
                {
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    uint _2849;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2734;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    for (;;)
                    {
                        uint _2853 = uint(findLSB(_2849)) + (_2725 << 5u);
                        uint _2850 = (_2849 + 4294967295u) & _2849;
                        uint _2855 = _2853 * 48u;
                        vec4 _2869 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 3u)).x));
                        uint _2875 = (_2853 * 48u) + 4u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2875)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2875 + 3u)).x));
                        uint _2894 = (_2853 * 48u) + 8u;
                        vec3 _2905 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x));
                        float _2909 = _2869.x - _2427;
                        float _2910 = _2869.y - _2428;
                        float _2911 = _2869.z - _2429;
                        float _2912 = dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911));
                        float _2915 = inversesqrt(_2912);
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2919 = dot(vec3(_707, _710, _713), vec3(_2916, _2917, _2918));
                        float _2924 = 1.0 - (_2912 * _2869.w);
                        float _4214 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2926 = sqrt(_2912) * _2888.w;
                        float _2929 = 1.39999997615814208984375 / (_2926 + 1.39999997615814208984375);
                        float _2930 = _2929 * _2929;
                        float _2933 = ((1.0 - _2930) * _2919) + _2930;
                        float _2936 = _2926 * _2926;
                        float _2940 = ((isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * _2925) / ((_2936 * 0.699999988079071044921875) + 1.0);
                        float _2944 = (-0.0) - _2427;
                        float _2945 = (-0.0) - _2428;
                        float _2946 = (-0.0) - _2429;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2951 = _2950 * _2944;
                        float _2952 = _2950 * _2945;
                        float _2953 = _2950 * _2946;
                        float _2961 = exp2(log2(1.0 / ((_2936 * 3.5) + 5.0)) * 0.25);
                        float _2962 = 1.0 - _767;
                        float _2969 = sqrt(1.0 - ((1.0 - (_2962 * _2962)) * (1.0 - (_2961 * _2961))));
                        float _2970 = _2969 * _2969;
                        float _2971 = _2970 * _2970;
                        float _2972 = _2951 + _2916;
                        float _2973 = _2952 + _2917;
                        float _2974 = _2953 + _2918;
                        float _2978 = inversesqrt(dot(vec3(_2972, _2973, _2974), vec3(_2972, _2973, _2974)));
                        float _2982 = dot(vec3(_707, _710, _713), vec3(_2951, _2952, _2953));
                        float _4230 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2986 = dot(vec3(_707, _710, _713), vec3(_2978 * _2972, _2978 * _2973, _2978 * _2974));
                        float _4241 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2993 = ((_2989 * _2989) * (_2971 + (-1.0))) + 1.0;
                        float _2994 = _2929 * _2970;
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2919) + _2995;
                        float _4252 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _2999 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _3000 = 1.0 - _2970;
                        float _3010 = (0.5 / (((_2999 * ((_2985 * _3000) + _2970)) + 9.9999999392252902907785028219223e-09) + (((_2999 * _3000) + _2970) * _2985))) * _2999;
                        float _4263 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3021 = (((_2971 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2993 * _2993) * ((_2936 * 2.1991131305694580078125) + 3.141590118408203125))) * _2925;
                        _2778 = (_2940 * _2888.x) + _2846;
                        _2779 = (_2940 * _2888.y) + _2847;
                        _2780 = (_2940 * _2888.z) + _2848;
                        _2775 = (_3021 * _2905.x) + _2843;
                        _2776 = (_3021 * _2905.y) + _2844;
                        _2777 = (_3021 * _2905.z) + _2845;
                        if (_2850 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2850;
                        }
                    }
                    frontier_phi_61_pred = _2775;
                    frontier_phi_61_pred_1 = _2780;
                    frontier_phi_61_pred_2 = _2779;
                    frontier_phi_61_pred_3 = _2778;
                    frontier_phi_61_pred_4 = _2777;
                    frontier_phi_61_pred_5 = _2776;
                }
                _2575 = frontier_phi_61_pred;
                _2585 = frontier_phi_61_pred_1;
                _2583 = frontier_phi_61_pred_2;
                _2581 = frontier_phi_61_pred_3;
                _2579 = frontier_phi_61_pred_4;
                _2577 = frontier_phi_61_pred_5;
                uint _2726 = _2725 + 1u;
                if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2719 = _2575;
                    _2720 = _2577;
                    _2721 = _2579;
                    _2722 = _2581;
                    _2723 = _2583;
                    _2724 = _2585;
                    _2725 = _2726;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
        }
        uvec4 _2588 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2589 = _2588.z;
        uint _2591 = (_2589 >> 8u) & 15u;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((4294967295u << _2591) & _2473) == 0u)
        {
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
            _2693 = _2580;
            _2695 = _2582;
            _2697 = _2584;
        }
        else
        {
            float _2712 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
            float _2713 = _2712 * _2427;
            float _2714 = _2712 * _2428;
            float _2715 = _2712 * _2429;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2591 < ((_2589 >> 12u) & 15u))
            {
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2826 = _2574;
                float _2827 = _2576;
                float _2828 = _2578;
                float _2829 = _2580;
                float _2830 = _2582;
                float _2831 = _2584;
                uint _2832 = _2591;
                uint _2841;
                bool _2842;
                for (;;)
                {
                    _2841 = texelFetch(g_lightClassification, int((((_2467 << 5u) + (_2453 << 9u)) + (_2832 << 2u)) >> 2u)).x;
                    _2842 = _2841 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2842)
                    {
                        frontier_phi_67_pred = _2829;
                        frontier_phi_67_pred_1 = _2830;
                        frontier_phi_67_pred_2 = _2831;
                        frontier_phi_67_pred_3 = _2828;
                        frontier_phi_67_pred_4 = _2827;
                        frontier_phi_67_pred_5 = _2826;
                    }
                    else
                    {
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        uint _3045 = _2841;
                        uint _3046;
                        vec4 _3071;
                        float _3072;
                        vec4 _3087;
                        vec3 _3099;
                        vec4 _3114;
                        vec4 _3129;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3056 = ((_2832 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3045));
                            _3046 = (_3045 + 4294967295u) & _3045;
                            uint _3058 = _3056 * 40u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3072 = _3071.w;
                            uint _3074 = (_3056 * 40u) + 4u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3056 * 40u) + 8u;
                            _3099 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x));
                            uint _3101 = (_3056 * 40u) + 16u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3056 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3056 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3056 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2429, _3163.z, fma(_2428, _3163.y, _3163.x * _2427)) + _3163.w;
                            _3176 = !((fma(_2429, _3144.z, fma(_2428, _3144.y, _3144.x * _2427)) + _3144.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3071.x - _2427;
                                float _3204 = _3071.y - _2428;
                                float _3205 = _3071.z - _2429;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3072 * _3072));
                                float _4274 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3221 = sqrt(_3206) * _3087.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_707, _710, _713))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2429, _3114.z, fma(_2428, _3114.y, _3114.x * _2427)) + _3114.w) / _3175;
                                float _3235 = (fma(_2429, _3129.z, fma(_2428, _3129.y, _3129.x * _2427)) + _3129.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4290 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _767;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2713;
                                float _3265 = _3211 - _2714;
                                float _3266 = _3212 - _2715;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_707, _710, _713), vec3((-0.0) - _2713, (-0.0) - _2714, (-0.0) - _2715));
                                float _4301 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3278 = dot(vec3(_707, _710, _713), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4312 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_707, _710, _713), vec3(_3210, _3211, _3212))) + _3287;
                                float _4323 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4334 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3315 * _3099.x;
                                frontier_phi_73_pred_1 = _3315 * _3099.y;
                                frontier_phi_73_pred_2 = _3241 * _3087.z;
                                frontier_phi_73_pred_3 = _3241 * _3087.y;
                                frontier_phi_73_pred_4 = _3241 * _3087.x;
                                frontier_phi_73_pred_5 = _3315 * _3099.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3319 = frontier_phi_73_pred;
                            _3320 = frontier_phi_73_pred_1;
                            _3324 = frontier_phi_73_pred_2;
                            _3323 = frontier_phi_73_pred_3;
                            _3322 = frontier_phi_73_pred_4;
                            _3321 = frontier_phi_73_pred_5;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            _3028 = _3321 + _3041;
                            if (_3046 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3046;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3029;
                        frontier_phi_67_pred_1 = _3030;
                        frontier_phi_67_pred_2 = _3031;
                        frontier_phi_67_pred_3 = _3028;
                        frontier_phi_67_pred_4 = _3027;
                        frontier_phi_67_pred_5 = _3026;
                    }
                    _2694 = frontier_phi_67_pred;
                    _2696 = frontier_phi_67_pred_1;
                    _2698 = frontier_phi_67_pred_2;
                    _2692 = frontier_phi_67_pred_3;
                    _2690 = frontier_phi_67_pred_4;
                    _2688 = frontier_phi_67_pred_5;
                    uint _2833 = _2832 + 1u;
                    if (_2833 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2826 = _2688;
                        _2827 = _2690;
                        _2828 = _2692;
                        _2829 = _2694;
                        _2830 = _2696;
                        _2831 = _2698;
                        _2832 = _2833;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2696;
                frontier_phi_55_56_ladder_1 = _2698;
                frontier_phi_55_56_ladder_2 = _2694;
                frontier_phi_55_56_ladder_3 = _2692;
                frontier_phi_55_56_ladder_4 = _2690;
                frontier_phi_55_56_ladder_5 = _2688;
            }
            else
            {
                frontier_phi_55_56_ladder = _2582;
                frontier_phi_55_56_ladder_1 = _2584;
                frontier_phi_55_56_ladder_2 = _2580;
                frontier_phi_55_56_ladder_3 = _2578;
                frontier_phi_55_56_ladder_4 = _2576;
                frontier_phi_55_56_ladder_5 = _2574;
            }
            _2687 = frontier_phi_55_56_ladder_5;
            _2689 = frontier_phi_55_56_ladder_4;
            _2691 = frontier_phi_55_56_ladder_3;
            _2693 = frontier_phi_55_56_ladder_2;
            _2695 = frontier_phi_55_56_ladder;
            _2697 = frontier_phi_55_56_ladder_1;
        }
        float _2702 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
        _2486 = (_2702 * _2693) + _1938;
        _2488 = (_2702 * _2695) + _1940;
        _2490 = (_2702 * _2697) + _1942;
        _2492 = ((_2687 * 0.039999999105930328369140625) * _2702) + _2271;
        _2494 = ((_2689 * 0.039999999105930328369140625) * _2702) + _2273;
        _2496 = ((_2691 * 0.039999999105930328369140625) * _2702) + _2275;
    }
    else
    {
        _2486 = _1938;
        _2488 = _1940;
        _2490 = _1942;
        _2492 = _2271;
        _2494 = _2273;
        _2496 = _2275;
    }
    float _4350 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4361 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4372 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    uint _2516 = _236 + 6u;
    float _2524 = _688 / cbSceneParam._m0[86u].x;
    float _2525 = _689 / cbSceneParam._m0[86u].y;
    vec4 _2539 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, (log2((isnan(cbSceneParam._m0[77u].w) ? _621 : (isnan(_621) ? cbSceneParam._m0[77u].w : min(_621, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2541 = _2539.x;
    float _2542 = _2539.y;
    float _2543 = _2539.z;
    float _2544 = _2539.w;
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    if (_621 > cbSceneParam._m0[78u].w)
    {
        float _2599 = isnan(_621) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _621 : min(cbSceneParam._m0[80u].w, _621));
        float _2600 = _2599 / _621;
        float _2611 = _2600 * _673;
        float _2612 = _674 * _2600;
        float _2613 = (-0.0) - _2612;
        float _2615 = _2600 * _675;
        float _2617 = (cbSceneParam._m0[77u].w * _2613) / _2599;
        float _2618 = _2617 + cbSceneParam._m0[79u].w;
        float _2619 = cbSceneParam._m0[79u].w - _2612;
        float _2625 = sqrt(((_2611 * _2611) + (_2612 * _2612)) + (_2615 * _2615));
        float _2628 = (1.0 - (cbSceneParam._m0[77u].w / _2599)) * _2625;
        float _2633 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2635 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2788;
        if (abs((_2613 - _2617) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2788 = ((((_2618 > 0.0) ? exp2(_2633 * _2618) : (2.0 - exp2(_2635 * _2618))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2628;
        }
        else
        {
            float _2748 = 1.0 / cbSceneParam._m0[80u].x;
            float _2749 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : max(_2618, _2619));
            float _2750 = isnan(_2619) ? _2618 : (isnan(_2618) ? _2619 : min(_2618, _2619));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            _2788 = ((abs(_2625 / _2613) * cbSceneParam._m0[80u].y) * ((((_2759 - _2760) * 2.0) - ((exp2(_2633 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)))) - exp2(_2633 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))))) * _2748)) - ((exp2(_2635 * _2759) - exp2(_2635 * _2760)) * _2748))) + (_2628 * cbSceneParam._m0[80u].z);
        }
        vec4 _2790 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2524, _2525, 1.0), 0.0);
        float _2799 = exp2((_2788 * (-1.44269502162933349609375)) * (1.0 - _2790.w));
        float _2800 = log2(_2799);
        float _2816 = log2(_2544);
        _2637 = (exp2(_2816 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].x)) * _2790.x) / cbSceneParam._m0[78u].x)) + _2541;
        _2639 = (exp2(_2816 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].y)) * _2790.y) / cbSceneParam._m0[78u].y)) + _2542;
        _2641 = (exp2(_2816 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].z)) * _2790.z) / cbSceneParam._m0[78u].z)) + _2543;
        _2643 = _2799 * _2544;
    }
    else
    {
        _2637 = _2541;
        _2639 = _2542;
        _2641 = _2543;
        _2643 = _2544;
    }
    float _2655 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2656 = _2655 == 3.0;
    float _2657 = log2(_2643);
    float _2664 = exp2(_2657 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2486 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _751))) + ((_2492 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2665 = exp2(_2657 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2488 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _751))) + ((_2494 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2666 = exp2(_2657 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2490 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _751))) + ((_2496 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1555)) * cbPerFrame._m0[3u].x));
    float _2675 = (_2655 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2675 * (_2656 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.y = _2675 * (_2656 ? _2665 : (_2665 + (cbSceneParam._m0[72u].w * _2639)));
    SV_Target.z = _2675 * (_2656 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2641)));
    SV_Target.w = cbInstanceData._m0[_2516].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2516].w;
}


