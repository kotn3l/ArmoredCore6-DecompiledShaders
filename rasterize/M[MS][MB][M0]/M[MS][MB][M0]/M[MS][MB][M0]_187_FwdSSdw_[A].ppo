#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1342;
float _3725;
float _3726;
float _3727;
float _3728;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _363 = _361.x;
    float _373 = dot(vec4(_363, _361.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _390 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_363 - _373) * cbMtdParam._m0[24u].x) + _373) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3737 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _398 = (_391 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _399 = (_391 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _400 = (_391 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _449 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _463 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_439 - _449) * cbMtdParam._m0[24u].x) + _449) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3748 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _471 = (_464 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398;
    float _472 = (_464 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399;
    float _473 = (_464 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400;
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _512 = _508.z;
    float _519 = ((_491.x - _510) * _391) + _510;
    float _520 = ((_491.y - _511) * _391) + _511;
    float _521 = ((_491.z - _512) * _391) + _512;
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _546 = ((_533.z - _521) * _464) + _521;
    float _549 = ((((_533.x - _519) * _464) + _519) * 2.0) + (-1.0);
    float _551 = ((((_533.y - _520) * _464) + _520) * 2.0) + (-1.0);
    float _552 = dot(vec2(_549, _551), vec2(_549, _551));
    float _3759 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))));
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _590 = _588.x;
    float _591 = 1.0 - _590;
    float _597 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _600 = ((isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : min(_597, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _609 = (_600 - ((((((_590 - _591) * cbMtdParam._m0[24u].z) + _591) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _600))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3780 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _617 = (_610 * (cbMtdParam._m0[17u].x - _471)) + _471;
    float _618 = (_610 * (cbMtdParam._m0[17u].y - _472)) + _472;
    float _619 = (_610 * (cbMtdParam._m0[17u].z - _473)) + _473;
    vec4 _631 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _633 = _631.x;
    float _634 = 1.0 - _633;
    float _661 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_633 - _634) * cbMtdParam._m0[24u].w) + _634) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3791 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _662 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _670 = ((((cbMtdParam._m0[10u].x - _617) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _662) + _617;
    float _671 = ((((cbMtdParam._m0[10u].y - _618) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _662) + _618;
    float _672 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _619)) * _662) + _619;
    vec4 _686 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _693 = (_686.x * 2.0) + (-1.0);
    float _694 = (_686.y * 2.0) + (-1.0);
    float _695 = dot(vec2(_693, _694), vec2(_693, _694));
    float _3802 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _703 = (_610 * (_686.z - _546)) + _546;
    float _706 = ((cbMtdParam._m0[23u].y - _703) * _662) + _703;
    vec4 _725 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _731 = (_725.x * 2.0) + (-1.0);
    float _732 = (_725.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3813 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _750 = (((_693 - _549) + (cbMtdParam._m0[21u].x * _549)) * _610) + _549;
    float _751 = (((_694 - _551) + (cbMtdParam._m0[21u].x * _551)) * _610) + _551;
    float _752 = (_610 * (sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) - _557)) + _557;
    float _763 = (((_731 - _750) + (_750 * cbMtdParam._m0[22u].z)) * _662) + _750;
    float _764 = (((_732 - _751) + (_751 * cbMtdParam._m0[22u].z)) * _662) + _751;
    float _765 = ((sqrt(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) - _752) * _662) + _752;
    float _767 = cbMtdParam._m0[22u].x + _570.w;
    float _770 = fma(_765, _242 * NORMAL.x, fma(_764, _249 * TANGENT.x, (_235 * _227) * _763));
    float _773 = fma(_765, _242 * NORMAL.y, fma(_764, _249 * TANGENT.y, (_235 * _228) * _763));
    float _776 = fma(_765, _242 * NORMAL.z, fma(_764, _249 * TANGENT.z, (_235 * _229) * _763));
    float _780 = inversesqrt(dot(vec3(_770, _773, _776), vec3(_770, _773, _776)));
    float _781 = _780 * _770;
    float _782 = _780 * _773;
    float _783 = _780 * _776;
    float _3824 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _784 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _3846 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3857 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3868 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _802 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _853 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _843);
    float _854 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _843);
    float _855 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _843);
    float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
    float _860 = _853 * _859;
    float _861 = _854 * _859;
    float _862 = _855 * _859;
    vec4 _867 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _869 = _867.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1023 = sqrt(((_853 * _853) + (_854 * _854)) + (_855 * _855));
        float _1029 = (cbMatDynParam._m0[5u].x * _1023) + cbMatDynParam._m0[5u].y;
        float _3879 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1034 = (cbMatDynParam._m0[5u].z * _1023) + cbMatDynParam._m0[5u].w;
        float _3890 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) - _1030)) + _1030) < ((_869 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_783, cbSceneParam._m0[5u].z, fma(_782, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _781));
    float _902 = fma(_783, cbSceneParam._m0[6u].z, fma(_782, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _781));
    float _905 = fma(_783, cbSceneParam._m0[7u].z, fma(_782, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _781));
    uint _918 = _255 + 9u;
    uint _919 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_919].z;
    float _3901 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _943 = ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_781, _782, _783), vec3(_860, _861, _862));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _781) - _860;
    float _952 = (_947 * _782) - _861;
    float _953 = (_947 * _783) - _862;
    float _957 = abs(dot(vec3(_860, _861, _862), vec3(_781, _782, _783)));
    float _3934 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_784);
    float _972 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1341;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1066 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1070 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1074 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1099 = _1004 + _781;
        float _1100 = _1008 + _782;
        float _1101 = _1012 + _783;
        float _1111 = fma(_1101, cbModelParam._m0[26u].z, fma(_1100, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1099)) - _1066;
        float _1112 = fma(_1101, cbModelParam._m0[27u].z, fma(_1100, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1099)) - _1070;
        float _1113 = fma(_1101, cbModelParam._m0[28u].z, fma(_1100, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1099)) - _1074;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1066 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1070 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[34u].z) + ((((((_1074 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1169 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1135.x + (-0.5));
        float _1171 = _1169 * (_1135.y + (-0.5));
        float _1172 = _1169 * (_1135.z + (-0.5));
        float _1179 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1142.x + (-0.5));
        float _1181 = _1179 * (_1142.y + (-0.5));
        float _1182 = _1179 * (_1142.z + (-0.5));
        float _1189 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1149.x + (-0.5));
        float _1191 = _1189 * (_1149.y + (-0.5));
        float _1192 = _1189 * (_1149.z + (-0.5));
        float _1199 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1156.x + (-0.5));
        float _1201 = _1199 * (_1156.y + (-0.5));
        float _1202 = _1199 * (_1156.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1223 = (dot(vec3(_781, _782, _783), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1233 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3982 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1235 + 1.0))) + _1240) * _1203;
        float _1250 = _1171 * 0.5;
        float _1251 = _1181 * 0.5;
        float _1252 = _1191 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_781, _782, _783), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4015 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1277 + 1.0))) + _1282) * _1204;
        float _1292 = _1172 * 0.5;
        float _1293 = _1182 * 0.5;
        float _1294 = _1192 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_781, _782, _783), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4048 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1319 + 1.0))) + _1324) * _1205;
        _1341 = _1172;
        _1343 = _1171;
        _1344 = _1170;
        _1345 = _1182;
        _1346 = _1181;
        _1347 = _1180;
        _1348 = _1192;
        _1349 = _1191;
        _1350 = _1190;
        _1351 = _1205;
        _1352 = _1204;
        _1353 = _1203;
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1342;
        _1343 = _1342;
        _1344 = _1342;
        _1345 = _1342;
        _1346 = _1342;
        _1347 = _1342;
        _1348 = _1342;
        _1349 = _1342;
        _1350 = _1342;
        _1351 = _1342;
        _1352 = _1342;
        _1353 = _1342;
        _1354 = 0.0;
        _1355 = 0.0;
        _1356 = 0.0;
    }
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1383 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1387 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1391 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1414 = _1004 + _781;
        float _1415 = _1008 + _782;
        float _1416 = _1012 + _783;
        float _1426 = fma(_1416, cbModelParam._m0[30u].z, fma(_1415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1414)) - _1383;
        float _1427 = fma(_1416, cbModelParam._m0[31u].z, fma(_1415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1414)) - _1387;
        float _1428 = fma(_1416, cbModelParam._m0[32u].z, fma(_1415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1414)) - _1391;
        float _1432 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
        float _1445 = ((_1432 * _1426) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1383 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1432 * _1427) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1387 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1432 * _1428) / cbModelParam._m0[35u].z) + ((((((_1391 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1482 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1449.x + (-0.5));
        float _1484 = _1482 * (_1449.y + (-0.5));
        float _1485 = _1482 * (_1449.z + (-0.5));
        float _1492 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1456.x + (-0.5));
        float _1494 = _1492 * (_1456.y + (-0.5));
        float _1495 = _1492 * (_1456.z + (-0.5));
        float _1502 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1463.x + (-0.5));
        float _1504 = _1502 * (_1463.y + (-0.5));
        float _1505 = _1502 * (_1463.z + (-0.5));
        float _1512 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1470.x + (-0.5));
        float _1514 = _1512 * (_1470.y + (-0.5));
        float _1515 = _1512 * (_1470.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_781, _782, _783), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4111 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1546 + 1.0))) + _1551) * _1516;
        float _1561 = _1484 * 0.5;
        float _1562 = _1494 * 0.5;
        float _1563 = _1504 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_781, _782, _783), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4144 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1588 + 1.0))) + _1593) * _1517;
        float _1603 = _1485 * 0.5;
        float _1604 = _1495 * 0.5;
        float _1605 = _1505 * 0.5;
        float _1606 = dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605));
        float _1611 = (_1606 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1606);
        float _1619 = (dot(vec3(_781, _782, _783), vec3(_1611 * _1603, _1611 * _1604, _1611 * _1605)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1628 = sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1630 = _1629 * 2.0;
        float _1634 = (1.0 - _1629) / (_1629 + 1.0);
        float _4177 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1644 = ((((1.0 - _1635) * (_1630 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1630 + 1.0))) + _1635) * _1518;
        _1652 = _1485;
        _1653 = _1484;
        _1654 = _1483;
        _1655 = _1495;
        _1656 = _1494;
        _1657 = _1493;
        _1658 = _1505;
        _1659 = _1504;
        _1660 = _1503;
        _1661 = _1518;
        _1662 = _1517;
        _1663 = _1516;
        _1664 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    }
    else
    {
        _1652 = _1342;
        _1653 = _1342;
        _1654 = _1342;
        _1655 = _1342;
        _1656 = _1342;
        _1657 = _1342;
        _1658 = _1342;
        _1659 = _1342;
        _1660 = _1342;
        _1661 = _1342;
        _1662 = _1342;
        _1663 = _1342;
        _1664 = 0.0;
        _1665 = 0.0;
        _1666 = 0.0;
    }
    float _1676 = (cbModelParam._m0[1u].x * (_1664 - _1354)) + _1354;
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1355)) + _1355;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1356)) + _1356;
    float _1699 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1702 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1705 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1676));
    float _1720 = _951 * 0.5;
    float _1721 = _952 * 0.5;
    float _1722 = _953 * 0.5;
    float _1723 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1726 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1729 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1652, _1655, _1658, _1661));
    float _1763;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1736 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1341, _1345, _1348, _1351));
        float _1740 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1744 = dot(vec4(_1720, _1721, _1722, 1.0), vec4(_1344, _1347, _1350, _1353));
        float _1751 = dot(vec4(cbModelParam._m0[39u]), vec4(_1720, _1721, _1722, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1751) ? 0.0 : (isnan(0.0) ? _1751 : max(0.0, _1751))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1774;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1765 = dot(vec4(cbModelParam._m0[40u]), vec4(_1720, _1721, _1722, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1778 = (_1774 * cbModelParam._m0[1u].x) + (_1763 * (1.0 - cbModelParam._m0[1u].x));
    float _1788 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _784);
    float _1789 = isnan(_1788) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1788 : min(cbModelParam._m0[25u].z, _1788));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1851 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1854 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1882 = frontier_phi_17_15_ladder;
        }
        float _2104;
        if (_1851 > 0.0)
        {
            _2104 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2104 = frontier_phi_26_22_ladder;
        }
        float _2350;
        if (_1854 > 0.0)
        {
            _2350 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2350 = frontier_phi_38_33_ladder;
        }
        float _2352 = isnan(_2104) ? _1882 : (isnan(_1882) ? _2104 : min(_1882, _2104));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1848) + _1837;
        float _2358 = (_2353 * _1851) + _1841;
        float _2359 = (_2353 * _1854) + _1845;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2360;
        float _2364 = _2360 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 > _2364) || ((_2358 < _2362) || ((_2357 < _2362) || (_2357 > _2364))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2359, cbModelParam._m0[9u].z, fma(_2358, cbModelParam._m0[9u].y, _2357 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2359, cbModelParam._m0[10u].z, fma(_2358, cbModelParam._m0[10u].y, _2357 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2359, cbModelParam._m0[11u].z, fma(_2358, cbModelParam._m0[11u].y, _2357 * cbModelParam._m0[11u].x))), _1789);
            frontier_phi_16_38_ladder = _2483.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2483.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2483.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_16_38_ladder_2;
        _1872 = frontier_phi_16_38_ladder_1;
        _1874 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1789);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _784);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1969;
    float _1971;
    float _1973;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1933 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1937 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1941 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1944 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1947 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1950 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2109;
        if (_1944 > 0.0)
        {
            _2109 = abs((1.0 - _1933) / _1944);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1933 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2109 = frontier_phi_28_24_ladder;
        }
        float _2377;
        if (_1947 > 0.0)
        {
            _2377 = abs((1.0 - _1937) / _1947);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1947 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1937 + 1.0) / _1947);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2377 = frontier_phi_40_35_ladder;
        }
        float _2582;
        if (_1950 > 0.0)
        {
            _2582 = abs((1.0 - _1941) / _1950);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1941 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2582 = frontier_phi_49_46_ladder;
        }
        float _2584 = isnan(_2377) ? _2109 : (isnan(_2109) ? _2377 : min(_2109, _2377));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1944) + _1933;
        float _2590 = (_2585 * _1947) + _1937;
        float _2591 = (_2585 * _1950) + _1941;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_25_49_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1969 = frontier_phi_25_49_ladder_2;
        _1971 = frontier_phi_25_49_ladder_1;
        _1973 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1953 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1879);
        _1969 = _1953.x * cbModelParam._m0[1u].z;
        _1971 = _1953.y * cbModelParam._m0[1u].z;
        _1973 = _1953.z * cbModelParam._m0[1u].z;
    }
    float _1985 = ((((1.0 - _972) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_972 * _959)) * _943;
    float _1986 = _1985 * ((cbModelParam._m0[1u].w * (_1969 - _1870)) + _1870);
    float _1987 = _1985 * ((cbModelParam._m0[1u].w * (_1971 - _1872)) + _1872);
    float _1988 = _1985 * ((cbModelParam._m0[1u].w * (_1973 - _1874)) + _1874);
    float _1991 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _1994 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _1997 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, _1986 * cbSceneParam._m0[91u].x));
    vec4 _2005 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_880, _881));
    float _2007 = _2005.w;
    float _2019 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2007);
    float _2020 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2007);
    float _2021 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2007);
    uvec4 _2025 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2027 = _2025.x * 14u;
    uint _2028 = _2027 + 13u;
    float _2035 = _943 + (-1.0);
    float _2040 = (cbLight._m0[_2028].x * _2035) + 1.0;
    float _2041 = (cbLight._m0[_2028].y * _2035) + 1.0;
    float _2042 = (cbLight._m0[_2028].z * _2035) + 1.0;
    float _2043 = (cbLight._m0[_2028].w * _2035) + 1.0;
    uint _2044 = _2027 + 5u;
    float _2050 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
    uint _2054 = _2027 + 4u;
    float _2063 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
    uint _2067 = _2027 | 1u;
    float _2078 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_781, _782, _783));
    float _2081 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_781, _782, _783));
    float _4313 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _4324 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2086 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * 0.3183098733425140380859375;
    float _2088 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * 0.3183098733425140380859375;
    float _2095 = ((cbLight._m0[_2044].x * _2050) * _2088) + (((cbLight._m0[_2054].x * _2019) * _2063) * _2086);
    float _2096 = ((_2050 * cbLight._m0[_2044].y) * _2088) + (((cbLight._m0[_2054].y * _2020) * _2063) * _2086);
    float _2097 = ((_2050 * cbLight._m0[_2044].z) * _2088) + (((cbLight._m0[_2054].z * _2021) * _2063) * _2086);
    uvec4 _2101 = floatBitsToUint(cbLight._m0[_2027 + 12u]);
    bool _2103 = _2101.x == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2103)
    {
        _2114 = _2095;
        _2116 = _2096;
        _2118 = _2097;
    }
    else
    {
        uint _2122 = _2027 + 6u;
        float _2138 = (dot(vec3(cbLight._m0[_2027 + 2u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4335 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2141 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2114 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _2095;
        _2116 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _2096;
        _2118 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _2097;
    }
    bool _2121 = _2101.y == 0u;
    float _2159;
    float _2161;
    float _2163;
    if (_2121)
    {
        _2159 = _2114;
        _2161 = _2116;
        _2163 = _2118;
    }
    else
    {
        uint _2321 = _2027 + 7u;
        float _2337 = (dot(vec3(cbLight._m0[_2027 + 3u].xyz), vec3(_781, _782, _783)) * 0.5) + 0.5;
        float _2338 = _2337 * _2337;
        float _4351 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2339 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2340 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2159 = (((cbLight._m0[_2321].x * 0.3183098733425140380859375) * _2339) * _2340) + _2114;
        _2161 = (((cbLight._m0[_2321].y * 0.3183098733425140380859375) * _2339) * _2340) + _2116;
        _2163 = (((cbLight._m0[_2321].z * 0.3183098733425140380859375) * _2339) * _2340) + _2118;
    }
    uint _2166 = _2027 + 8u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2027].w)) * _784) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_2027].x + _860;
    float _2182 = cbLight._m0[_2027].y + _861;
    float _2183 = cbLight._m0[_2027].z + _862;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2027].xyz));
    float _4367 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2195 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _2196 = dot(vec3(_781, _782, _783), vec3(_2188, _2189, _2190));
    float _4389 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _2200 = dot(vec3(cbLight._m0[_2027].xyz), vec3(_2188, _2189, _2190));
    float _4400 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2204 = _2180 * _2180;
    float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
    float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2220 = 1.0 - _2180;
    float _2231 = (0.5 / (((_2195 * ((_2194 * _2220) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2220) + _2180) * _2194))) * _2194;
    float _4411 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
    uint _2247 = _2027 + 9u;
    float _2258 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _784) * 0.949999988079071044921875);
    float _2259 = _2258 * _2258;
    float _2260 = cbLight._m0[_2067].x + _860;
    float _2261 = cbLight._m0[_2067].y + _861;
    float _2262 = cbLight._m0[_2067].z + _862;
    float _2266 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
    float _2267 = _2266 * _2260;
    float _2268 = _2266 * _2261;
    float _2269 = _2266 * _2262;
    float _2270 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2067].xyz));
    float _4422 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2274 = dot(vec3(_781, _782, _783), vec3(_2267, _2268, _2269));
    float _4433 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2267, _2268, _2269));
    float _4444 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2259 * _2259;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2295 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2296 = 1.0 - _2259;
    float _2306 = (0.5 / (((_2195 * ((_2273 * _2296) + _2259)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2296) + _2259) * _2273))) * _2273;
    float _4455 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2308 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    float _2318 = (((_2295 * cbLight._m0[_2247].x) * _2308) * _2050) + ((((cbLight._m0[_2166].x * _2019) * _2219) * _2233) * _2063);
    float _2319 = (((_2295 * cbLight._m0[_2247].y) * _2308) * _2050) + ((((cbLight._m0[_2166].y * _2020) * _2219) * _2233) * _2063);
    float _2320 = (((_2295 * cbLight._m0[_2247].z) * _2308) * _2050) + ((((cbLight._m0[_2166].z * _2021) * _2219) * _2233) * _2063);
    float _2382;
    float _2384;
    float _2386;
    if (_2103)
    {
        _2382 = _2318;
        _2384 = _2319;
        _2386 = _2320;
    }
    else
    {
        uint _2388 = _2027 + 2u;
        uint _2392 = _2027 + 10u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _784) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _860;
        float _2409 = cbLight._m0[_2388].y + _861;
        float _2410 = cbLight._m0[_2388].z + _862;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2388].xyz));
        float _4466 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _2422 = dot(vec3(_781, _782, _783), vec3(_2415, _2416, _2417));
        float _4477 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4488 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2443 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2444 = 1.0 - _2407;
        float _2454 = (0.5 / (((_2195 * ((_2421 * _2444) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2444) + _2407) * _2421))) * _2421;
        float _4499 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2456 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2457 = isnan(1.0) ? _2042 : (isnan(_2042) ? 1.0 : min(_2042, 1.0));
        _2382 = (((_2443 * cbLight._m0[_2392].x) * _2456) * _2457) + _2318;
        _2384 = (((_2443 * cbLight._m0[_2392].y) * _2456) * _2457) + _2319;
        _2386 = (((_2443 * cbLight._m0[_2392].z) * _2456) * _2457) + _2320;
    }
    float _2492;
    float _2494;
    float _2496;
    if (_2121)
    {
        _2492 = _2382;
        _2494 = _2384;
        _2496 = _2386;
    }
    else
    {
        uint _2503 = _2027 + 3u;
        uint _2507 = _2027 + 11u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _784) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _860;
        float _2524 = cbLight._m0[_2503].y + _861;
        float _2525 = cbLight._m0[_2503].z + _862;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_781, _782, _783), vec3(cbLight._m0[_2503].xyz));
        float _4515 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2537 = dot(vec3(_781, _782, _783), vec3(_2530, _2531, _2532));
        float _4526 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4537 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2559 = 1.0 - _2522;
        float _2569 = (0.5 / (((_2195 * ((_2536 * _2559) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2195 * _2559) + _2522) * _2536))) * _2536;
        float _4548 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2043 : (isnan(_2043) ? 1.0 : min(_2043, 1.0));
        _2492 = (((_2558 * cbLight._m0[_2507].x) * _2571) * _2572) + _2382;
        _2494 = (((_2558 * cbLight._m0[_2507].y) * _2571) * _2572) + _2384;
        _2496 = (((_2558 * cbLight._m0[_2507].z) * _2571) * _2572) + _2386;
    }
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_2025.y == 0u)
    {
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2647;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2647;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2647;
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2663)));
        float _2684 = (log2(_2650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            uint _2954 = 0u;
            uint _2963;
            bool _2964;
            for (;;)
            {
                _2963 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_2954 << 2u)) >> 2u)).x;
                _2964 = _2963 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2964)
                {
                    frontier_phi_66_pred = _2948;
                    frontier_phi_66_pred_1 = _2953;
                    frontier_phi_66_pred_2 = _2952;
                    frontier_phi_66_pred_3 = _2951;
                    frontier_phi_66_pred_4 = _2950;
                    frontier_phi_66_pred_5 = _2949;
                }
                else
                {
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    uint _3099;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2963;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    for (;;)
                    {
                        uint _3103 = uint(findLSB(_3099)) + (_2954 << 5u);
                        uint _3100 = (_3099 + 4294967295u) & _3099;
                        uint _3105 = _3103 * 48u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3125 = (_3103 * 48u) + 4u;
                        vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 3u)).x));
                        uint _3144 = (_3103 * 48u) + 8u;
                        vec3 _3155 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x));
                        float _3159 = _3119.x - _2648;
                        float _3160 = _3119.y - _2649;
                        float _3161 = _3119.z - _2650;
                        float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                        float _3165 = inversesqrt(_3162);
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3169 = dot(vec3(_899, _902, _905), vec3(_3166, _3167, _3168));
                        float _3174 = 1.0 - (_3162 * _3119.w);
                        float _4574 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                        float _3175 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                        float _3176 = sqrt(_3162) * _3138.w;
                        float _3179 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3169) + _3180;
                        float _3186 = _3176 * _3176;
                        float _3190 = ((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3175) / ((_3186 * 0.699999988079071044921875) + 1.0);
                        float _3194 = (-0.0) - _2648;
                        float _3195 = (-0.0) - _2649;
                        float _3196 = (-0.0) - _2650;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3211 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                        float _3212 = 1.0 - _959;
                        float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                        float _3220 = _3219 * _3219;
                        float _3221 = _3220 * _3220;
                        float _3222 = _3201 + _3166;
                        float _3223 = _3202 + _3167;
                        float _3224 = _3203 + _3168;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3232 = dot(vec3(_899, _902, _905), vec3(_3201, _3202, _3203));
                        float _4590 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3236 = dot(vec3(_899, _902, _905), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                        float _4601 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                        float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                        float _3244 = _3179 * _3220;
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3169) + _3245;
                        float _4612 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3250 = 1.0 - _3220;
                        float _3260 = (0.5 / (((_3249 * ((_3235 * _3250) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3220) * _3235))) * _3249;
                        float _4623 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3271 = (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) / ((_3243 * _3243) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125))) * _3175;
                        _3023 = (_3190 * _3138.x) + _3096;
                        _3024 = (_3190 * _3138.y) + _3097;
                        _3025 = (_3190 * _3138.z) + _3098;
                        _3020 = (_3271 * _3155.x) + _3093;
                        _3021 = (_3271 * _3155.y) + _3094;
                        _3022 = (_3271 * _3155.z) + _3095;
                        if (_3100 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3100;
                        }
                    }
                    frontier_phi_66_pred = _3020;
                    frontier_phi_66_pred_1 = _3025;
                    frontier_phi_66_pred_2 = _3024;
                    frontier_phi_66_pred_3 = _3023;
                    frontier_phi_66_pred_4 = _3022;
                    frontier_phi_66_pred_5 = _3021;
                }
                _2796 = frontier_phi_66_pred;
                _2806 = frontier_phi_66_pred_1;
                _2804 = frontier_phi_66_pred_2;
                _2802 = frontier_phi_66_pred_3;
                _2800 = frontier_phi_66_pred_4;
                _2798 = frontier_phi_66_pred_5;
                uint _2955 = _2954 + 1u;
                if (_2955 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2948 = _2796;
                    _2949 = _2798;
                    _2950 = _2800;
                    _2951 = _2802;
                    _2952 = _2804;
                    _2953 = _2806;
                    _2954 = _2955;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        float _2926;
        if (((4294967295u << _2812) & _2694) == 0u)
        {
            _2916 = _2795;
            _2918 = _2797;
            _2920 = _2799;
            _2922 = _2801;
            _2924 = _2803;
            _2926 = _2805;
        }
        else
        {
            float _2941 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
            float _2942 = _2941 * _2648;
            float _2943 = _2941 * _2649;
            float _2944 = _2941 * _2650;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2917;
                float _2919;
                float _2921;
                float _2923;
                float _2925;
                float _2927;
                float _3076 = _2795;
                float _3077 = _2797;
                float _3078 = _2799;
                float _3079 = _2801;
                float _3080 = _2803;
                float _3081 = _2805;
                uint _3082 = _2812;
                uint _3091;
                bool _3092;
                for (;;)
                {
                    _3091 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3082 << 2u)) >> 2u)).x;
                    _3092 = _3091 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3092)
                    {
                        frontier_phi_77_pred = _3081;
                        frontier_phi_77_pred_1 = _3080;
                        frontier_phi_77_pred_2 = _3079;
                        frontier_phi_77_pred_3 = _3078;
                        frontier_phi_77_pred_4 = _3077;
                        frontier_phi_77_pred_5 = _3076;
                    }
                    else
                    {
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3298 = _3076;
                        float _3299 = _3077;
                        float _3300 = _3078;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        uint _3304 = _3091;
                        uint _3305;
                        vec4 _3330;
                        float _3331;
                        vec4 _3346;
                        vec3 _3358;
                        vec4 _3373;
                        vec4 _3388;
                        float _3434;
                        bool _3435;
                        for (;;)
                        {
                            uint _3315 = ((_3082 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3304));
                            _3305 = (_3304 + 4294967295u) & _3304;
                            uint _3317 = _3315 * 40u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            _3331 = _3330.w;
                            uint _3333 = (_3315 * 40u) + 4u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3315 * 40u) + 8u;
                            _3358 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x));
                            uint _3360 = (_3315 * 40u) + 16u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3375 = (_3315 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3315 * 40u) + 24u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3409 = (_3315 * 40u) + 28u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3434 = fma(_2650, _3422.z, fma(_2649, _3422.y, _3422.x * _2648)) + _3422.w;
                            _3435 = !((fma(_2650, _3403.z, fma(_2649, _3403.y, _3403.x * _2648)) + _3403.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3435)
                            {
                                float _3462 = _3330.x - _2648;
                                float _3463 = _3330.y - _2649;
                                float _3464 = _3330.z - _2650;
                                float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                                float _3468 = inversesqrt(_3465);
                                float _3469 = _3468 * _3462;
                                float _3470 = _3468 * _3463;
                                float _3471 = _3468 * _3464;
                                float _3475 = 1.0 - (_3465 / (_3331 * _3331));
                                float _4634 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                                float _3480 = sqrt(_3465) * _3346.w;
                                float _3482 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                                float _3483 = _3482 * _3482;
                                float _3486 = ((1.0 - _3483) * dot(vec3(_3469, _3470, _3471), vec3(_899, _902, _905))) + _3483;
                                float _3489 = _3480 * _3480;
                                float _3493 = (fma(_2650, _3373.z, fma(_2649, _3373.y, _3373.x * _2648)) + _3373.w) / _3434;
                                float _3494 = (fma(_2650, _3388.z, fma(_2649, _3388.y, _3388.x * _2648)) + _3388.w) / _3434;
                                float _3498 = 1.0 - dot(vec2(_3493, _3494), vec2(_3493, _3494));
                                float _4650 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3500 = _3499 * (((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3476) / ((_3489 * 0.699999988079071044921875) + 1.0));
                                float _3512 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                                float _3513 = 1.0 - _959;
                                float _3520 = sqrt(1.0 - ((1.0 - (_3513 * _3513)) * (1.0 - (_3512 * _3512))));
                                float _3521 = _3520 * _3520;
                                float _3522 = _3521 * _3521;
                                float _3523 = _3469 - _2942;
                                float _3524 = _3470 - _2943;
                                float _3525 = _3471 - _2944;
                                float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                                float _3533 = dot(vec3(_899, _902, _905), vec3((-0.0) - _2942, (-0.0) - _2943, (-0.0) - _2944));
                                float _4661 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3537 = dot(vec3(_899, _902, _905), vec3(_3529 * _3523, _3529 * _3524, _3529 * _3525));
                                float _4672 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3544 = ((_3540 * _3540) * (_3522 + (-1.0))) + 1.0;
                                float _3545 = _3482 * _3521;
                                float _3546 = _3545 * _3545;
                                float _3552 = ((1.0 - _3546) * dot(vec3(_899, _902, _905), vec3(_3469, _3470, _3471))) + _3546;
                                float _4683 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3554 = 1.0 - _3521;
                                float _3564 = (0.5 / (((_3553 * ((_3536 * _3554) + _3521)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3521) * _3536))) * _3553;
                                float _4694 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3574 = (_3499 * _3476) * (((_3522 * 3.1415927410125732421875) * (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) / ((_3544 * _3544) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3500 * _3346.y;
                                frontier_phi_83_pred_1 = _3500 * _3346.x;
                                frontier_phi_83_pred_2 = _3574 * _3358.z;
                                frontier_phi_83_pred_3 = _3574 * _3358.y;
                                frontier_phi_83_pred_4 = _3574 * _3358.x;
                                frontier_phi_83_pred_5 = _3500 * _3346.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3582 = frontier_phi_83_pred;
                            _3581 = frontier_phi_83_pred_1;
                            _3580 = frontier_phi_83_pred_2;
                            _3579 = frontier_phi_83_pred_3;
                            _3578 = frontier_phi_83_pred_4;
                            _3583 = frontier_phi_83_pred_5;
                            _3288 = _3581 + _3301;
                            _3289 = _3582 + _3302;
                            _3290 = _3583 + _3303;
                            _3285 = _3578 + _3298;
                            _3286 = _3579 + _3299;
                            _3287 = _3580 + _3300;
                            if (_3305 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3305;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3290;
                        frontier_phi_77_pred_1 = _3289;
                        frontier_phi_77_pred_2 = _3288;
                        frontier_phi_77_pred_3 = _3287;
                        frontier_phi_77_pred_4 = _3286;
                        frontier_phi_77_pred_5 = _3285;
                    }
                    _2927 = frontier_phi_77_pred;
                    _2925 = frontier_phi_77_pred_1;
                    _2923 = frontier_phi_77_pred_2;
                    _2921 = frontier_phi_77_pred_3;
                    _2919 = frontier_phi_77_pred_4;
                    _2917 = frontier_phi_77_pred_5;
                    uint _3083 = _3082 + 1u;
                    if (_3083 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3076 = _2917;
                        _3077 = _2919;
                        _3078 = _2921;
                        _3079 = _2923;
                        _3080 = _2925;
                        _3081 = _2927;
                        _3082 = _3083;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2921;
                frontier_phi_58_59_ladder_1 = _2927;
                frontier_phi_58_59_ladder_2 = _2925;
                frontier_phi_58_59_ladder_3 = _2923;
                frontier_phi_58_59_ladder_4 = _2919;
                frontier_phi_58_59_ladder_5 = _2917;
            }
            else
            {
                frontier_phi_58_59_ladder = _2799;
                frontier_phi_58_59_ladder_1 = _2805;
                frontier_phi_58_59_ladder_2 = _2803;
                frontier_phi_58_59_ladder_3 = _2801;
                frontier_phi_58_59_ladder_4 = _2797;
                frontier_phi_58_59_ladder_5 = _2795;
            }
            _2916 = frontier_phi_58_59_ladder_5;
            _2918 = frontier_phi_58_59_ladder_4;
            _2920 = frontier_phi_58_59_ladder;
            _2922 = frontier_phi_58_59_ladder_3;
            _2924 = frontier_phi_58_59_ladder_2;
            _2926 = frontier_phi_58_59_ladder_1;
        }
        float _2931 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2707 = (_2931 * _2922) + _2159;
        _2709 = (_2931 * _2924) + _2161;
        _2711 = (_2931 * _2926) + _2163;
        _2713 = ((_2916 * 0.039999999105930328369140625) * _2931) + _2492;
        _2715 = ((_2918 * 0.039999999105930328369140625) * _2931) + _2494;
        _2717 = ((_2920 * 0.039999999105930328369140625) * _2931) + _2496;
    }
    else
    {
        _2707 = _2159;
        _2709 = _2161;
        _2711 = _2163;
        _2713 = _2492;
        _2715 = _2494;
        _2717 = _2496;
    }
    float _4710 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4721 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4732 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2734 = ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2707 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _943))) + ((_2713 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2735 = ((isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_2709 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _943))) + ((_2715 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2711 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _943))) + ((_2717 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1778)) * cbPerFrame._m0[3u].x);
    uint _2737 = _255 + 6u;
    float _2745 = _880 / cbSceneParam._m0[86u].x;
    float _2746 = _881 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _802 : (isnan(_802) ? cbSceneParam._m0[77u].w : min(_802, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_802 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_802) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _802 : min(cbSceneParam._m0[80u].w, _802));
        float _2821 = _2820 / _802;
        float _2832 = _2821 * _853;
        float _2833 = _854 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2836 = _2821 * _855;
        float _2838 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2839 = _2838 + cbSceneParam._m0[79u].w;
        float _2840 = cbSceneParam._m0[79u].w - _2833;
        float _2846 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2836 * _2836));
        float _2849 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2846;
        float _2854 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2856 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3033;
        if (abs((_2834 - _2838) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3033 = ((((_2839 > 0.0) ? exp2(_2854 * _2839) : (2.0 - exp2(_2856 * _2839))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2849;
        }
        else
        {
            float _2977 = 1.0 / cbSceneParam._m0[80u].x;
            float _2978 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : max(_2839, _2840));
            float _2979 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : min(_2839, _2840));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            float _2989 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : min(_2979, 0.0));
            _3033 = ((abs(_2846 / _2834) * cbSceneParam._m0[80u].y) * ((((_2988 - _2989) * 2.0) - ((exp2(_2854 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0)))) - exp2(_2854 * (isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0))))) * _2977)) - ((exp2(_2856 * _2988) - exp2(_2856 * _2989)) * _2977))) + (_2849 * cbSceneParam._m0[80u].z);
        }
        vec4 _3035 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3044 = exp2((_3033 * (-1.44269502162933349609375)) * (1.0 - _3035.w));
        float _3045 = log2(_3044);
        float _3061 = log2(_2765);
        _2858 = (exp2(_3061 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].x)) * _3035.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2860 = (exp2(_3061 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].y)) * _3035.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2862 = (exp2(_3061 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3045 * cbSceneParam._m0[78u].z)) * _3035.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2864 = _3044 * _2765;
    }
    else
    {
        _2858 = _2762;
        _2860 = _2763;
        _2862 = _2764;
        _2864 = _2765;
    }
    bool _3071;
    vec4 _2874;
    vec4 _2896;
    float _2898;
    float _2902;
    float _2903;
    float _2904;
    float _2905;
    bool _2915;
    for (;;)
    {
        _2874 = cbMatDynParam._m0[0u];
        float _2876 = roundEven(_2874.y);
        bool _2877 = _2876 == 3.0;
        float _2878 = log2(_2864);
        float _2885 = exp2(_2878 * cbSceneParam._m0[78u].x) * _2734;
        float _2886 = exp2(_2878 * cbSceneParam._m0[78u].y) * _2735;
        float _2887 = exp2(_2878 * cbSceneParam._m0[78u].z) * _2736;
        float _2894 = _869 + (-0.5);
        _2896 = cbMtdParam._m0[1u];
        _2898 = _2896.y * _2894;
        float _2901 = (_2876 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2902 = _2901 * (_2877 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2858)));
        _2903 = _2901 * (_2877 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2860)));
        _2904 = _2901 * (_2877 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2862)));
        _2905 = _2894 * 0.999000012874603271484375;
        _2915 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2915)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2905) < 0.5)
            {
                _3071 = true;
                break;
            }
        }
        uint _3012 = _918 + uint(_2874.w);
        if ((cbInstanceData._m0[_3012].w < 1.0) && ((cbInstanceData._m0[_3012].w + _2905) < 0.5))
        {
            _3071 = true;
            break;
        }
        if ((_2898 + 1.0) < _2896.x)
        {
            _3071 = true;
            break;
        }
        _3071 = false;
        break;
    }
    float _3276;
    if (_3071)
    {
        discard_state = true;
        _3276 = 0.0;
    }
    else
    {
        _3276 = cbInstanceData._m0[_2737].w;
    }
    SV_Target.x = _2902;
    SV_Target.y = _2903;
    SV_Target.z = _2904;
    SV_Target.w = _3276;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2737].w;
    discard_exit();
}


