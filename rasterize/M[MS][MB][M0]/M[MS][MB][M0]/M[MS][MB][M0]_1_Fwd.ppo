#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _813;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _231 = _225.x * cbMtdParam._m0[9u].x;
    float _232 = _225.y * cbMtdParam._m0[9u].y;
    float _233 = _225.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _250 = _246.z;
    float _255 = (_246.x * 2.0) + (-1.0);
    float _257 = (_246.y * 2.0) + (-1.0);
    float _258 = dot(vec2(_255, _257), vec2(_255, _257));
    float _3127 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _264 = sqrt(1.0 - (isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))));
    float _269 = cbMtdParam._m0[22u].x + _246.w;
    float _272 = fma(_264, _195 * NORMAL.x, fma(_257, _202 * TANGENT.x, (_188 * _180) * _255));
    float _275 = fma(_264, _195 * NORMAL.y, fma(_257, _202 * TANGENT.y, (_188 * _181) * _255));
    float _278 = fma(_264, _195 * NORMAL.z, fma(_257, _202 * TANGENT.z, (_188 * _182) * _255));
    float _282 = inversesqrt(dot(vec3(_272, _275, _278), vec3(_272, _275, _278)));
    float _283 = _282 * _272;
    float _284 = _282 * _275;
    float _285 = _282 * _278;
    float _3138 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _286 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
    float _3149 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3160 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3171 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3182 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _306 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _348 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _358 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _348);
    float _359 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _348);
    float _360 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _348);
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _358 * _364;
    float _366 = _359 * _364;
    float _367 = _360 * _364;
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _395 = fma(_285, cbSceneParam._m0[5u].z, fma(_284, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _283));
    float _398 = fma(_285, cbSceneParam._m0[6u].z, fma(_284, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _283));
    float _401 = fma(_285, cbSceneParam._m0[7u].z, fma(_284, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _283));
    uint _414 = uint(roundEven(NORMAL.w)) * 13u;
    uint _417 = (_414 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _423 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0)))) * cbInstanceData._m0[_417].x;
    float _424 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0)))) * cbInstanceData._m0[_417].y;
    float _425 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0)))) * cbInstanceData._m0[_417].z;
    float _3193 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _3215 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _428 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    vec4 _437 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _441 = ((isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))) * TEXCOORD_5.w) * _437.x;
    float _442 = dot(vec3(_283, _284, _285), vec3(_365, _366, _367));
    float _445 = _442 * 2.0;
    float _449 = (_445 * _283) - _365;
    float _450 = (_445 * _284) - _366;
    float _451 = (_445 * _285) - _367;
    float _455 = abs(dot(vec3(_365, _366, _367), vec3(_283, _284, _285)));
    float _3226 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _457 = sqrt(_286);
    float _470 = exp2((_457 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_457 * 3.0));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _812;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _537 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _541 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _545 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _570 = _502 + _283;
        float _571 = _506 + _284;
        float _572 = _510 + _285;
        float _582 = fma(_572, cbModelParam._m0[26u].z, fma(_571, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570)) - _537;
        float _583 = fma(_572, cbModelParam._m0[27u].z, fma(_571, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570)) - _541;
        float _584 = fma(_572, cbModelParam._m0[28u].z, fma(_571, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570)) - _545;
        float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
        float _601 = ((_588 * _582) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_537 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_588 * _583) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_541 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _603 = ((_588 * _584) / cbModelParam._m0[34u].z) + ((((((_545 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        float _640 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_606.x + (-0.5));
        float _642 = _640 * (_606.y + (-0.5));
        float _643 = _640 * (_606.z + (-0.5));
        float _650 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_613.x + (-0.5));
        float _652 = _650 * (_613.y + (-0.5));
        float _653 = _650 * (_613.z + (-0.5));
        float _660 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_620.x + (-0.5));
        float _662 = _660 * (_620.y + (-0.5));
        float _663 = _660 * (_620.z + (-0.5));
        float _670 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_627.x + (-0.5));
        float _672 = _670 * (_627.y + (-0.5));
        float _673 = _670 * (_627.z + (-0.5));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _677 = _641 * 0.5;
        float _678 = _651 * 0.5;
        float _679 = _661 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _694 = (dot(vec3(_283, _284, _285), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3252 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _704 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3263 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3274 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * (_706 + 1.0))) + _711) * _674;
        float _721 = _642 * 0.5;
        float _722 = _652 * 0.5;
        float _723 = _662 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_283, _284, _285), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3307 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_748 + 1.0))) + _753) * _675;
        float _763 = _643 * 0.5;
        float _764 = _653 * 0.5;
        float _765 = _663 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_283, _284, _285), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_676 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3340 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_790 + 1.0))) + _795) * _676;
        _812 = _643;
        _814 = _642;
        _815 = _641;
        _816 = _653;
        _817 = _652;
        _818 = _651;
        _819 = _663;
        _820 = _662;
        _821 = _661;
        _822 = _676;
        _823 = _675;
        _824 = _674;
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _827 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
    }
    else
    {
        _812 = _813;
        _814 = _813;
        _815 = _813;
        _816 = _813;
        _817 = _813;
        _818 = _813;
        _819 = _813;
        _820 = _813;
        _821 = _813;
        _822 = _813;
        _823 = _813;
        _824 = _813;
        _825 = 0.0;
        _826 = 0.0;
        _827 = 0.0;
    }
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _852 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _856 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _860 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _883 = _502 + _283;
        float _884 = _506 + _284;
        float _885 = _510 + _285;
        float _895 = fma(_885, cbModelParam._m0[30u].z, fma(_884, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[31u].z, fma(_884, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[32u].z, fma(_884, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_852 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_856 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[35u].z) + ((((((_860 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _951 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_918.x + (-0.5));
        float _953 = _951 * (_918.y + (-0.5));
        float _954 = _951 * (_918.z + (-0.5));
        float _961 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_925.x + (-0.5));
        float _963 = _961 * (_925.y + (-0.5));
        float _964 = _961 * (_925.z + (-0.5));
        float _971 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_932.x + (-0.5));
        float _973 = _971 * (_932.y + (-0.5));
        float _974 = _971 * (_932.z + (-0.5));
        float _981 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_939.x + (-0.5));
        float _983 = _981 * (_939.y + (-0.5));
        float _984 = _981 * (_939.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_283, _284, _285), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3403 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_1015 + 1.0))) + _1020) * _985;
        float _1030 = _953 * 0.5;
        float _1031 = _963 * 0.5;
        float _1032 = _973 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_283, _284, _285), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3436 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1057 + 1.0))) + _1062) * _986;
        float _1072 = _954 * 0.5;
        float _1073 = _964 * 0.5;
        float _1074 = _974 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_283, _284, _285), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3469 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1099 + 1.0))) + _1104) * _987;
        _1121 = _954;
        _1122 = _953;
        _1123 = _952;
        _1124 = _964;
        _1125 = _963;
        _1126 = _962;
        _1127 = _974;
        _1128 = _973;
        _1129 = _972;
        _1130 = _987;
        _1131 = _986;
        _1132 = _985;
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _813;
        _1122 = _813;
        _1123 = _813;
        _1124 = _813;
        _1125 = _813;
        _1126 = _813;
        _1127 = _813;
        _1128 = _813;
        _1129 = _813;
        _1130 = _813;
        _1131 = _813;
        _1132 = _813;
        _1133 = 0.0;
        _1134 = 0.0;
        _1135 = 0.0;
    }
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _825)) + _825;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _826)) + _826;
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _827)) + _827;
    float _1168 = fma(_1147, cbSceneParam._m0[89u].z, fma(_1146, cbSceneParam._m0[89u].y, _1145 * cbSceneParam._m0[89u].x));
    float _1171 = fma(_1147, cbSceneParam._m0[90u].z, fma(_1146, cbSceneParam._m0[90u].y, _1145 * cbSceneParam._m0[90u].x));
    float _1174 = fma(_1147, cbSceneParam._m0[91u].z, fma(_1146, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1145));
    float _1189 = _449 * 0.5;
    float _1190 = _450 * 0.5;
    float _1191 = _451 * 0.5;
    float _1192 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1195 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1198 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1232;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1205 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_812, _816, _819, _822));
        float _1209 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_814, _817, _820, _823));
        float _1213 = dot(vec4(_1189, _1190, _1191, 1.0), vec4(_815, _818, _821, _824));
        float _1220 = dot(vec4(cbModelParam._m0[39u]), vec4(_1189, _1190, _1191, 1.0));
        _1232 = dot(vec3(isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)), isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1232 = 1.0;
    }
    float _1243;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1234 = dot(vec4(cbModelParam._m0[40u]), vec4(_1189, _1190, _1191, 1.0));
        _1243 = dot(vec3(isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1234) ? 0.0 : (isnan(0.0) ? _1234 : max(0.0, _1234))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1243 = 1.0;
    }
    float _1247 = (_1243 * cbModelParam._m0[1u].x) + (_1232 * (1.0 - cbModelParam._m0[1u].x));
    float _1257 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _286);
    float _1258 = isnan(_1257) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1257 : min(cbModelParam._m0[25u].z, _1257));
    float _1340;
    float _1342;
    float _1344;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1307 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _1311 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1315 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1318 = fma(_451, cbModelParam._m0[13u].z, fma(_450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449));
        float _1321 = fma(_451, cbModelParam._m0[14u].z, fma(_450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449));
        float _1324 = fma(_451, cbModelParam._m0[15u].z, fma(_450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449));
        float _1352;
        if (_1318 > 0.0)
        {
            _1352 = abs((1.0 - _1307) / _1318);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1307 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1352 = frontier_phi_14_12_ladder;
        }
        float _1557;
        if (_1321 > 0.0)
        {
            _1557 = abs((1.0 - _1311) / _1321);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1311 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1557 = frontier_phi_23_19_ladder;
        }
        float _1800;
        if (_1324 > 0.0)
        {
            _1800 = abs((1.0 - _1315) / _1324);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1315 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1800 = frontier_phi_35_30_ladder;
        }
        float _1802 = isnan(_1557) ? _1352 : (isnan(_1352) ? _1557 : min(_1352, _1557));
        float _1803 = isnan(_1800) ? _1802 : (isnan(_1802) ? _1800 : min(_1802, _1800));
        float _1807 = (_1803 * _1318) + _1307;
        float _1808 = (_1803 * _1321) + _1311;
        float _1809 = (_1803 * _1324) + _1315;
        float _1810 = _1803 * 9.9999997473787516355514526367188e-05;
        float _1812 = (-1.0) - _1810;
        float _1814 = _1810 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1809 > _1814) || ((_1809 < _1812) || ((_1808 > _1814) || ((_1808 < _1812) || ((_1807 < _1812) || (_1807 > _1814))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1809, cbModelParam._m0[9u].z, fma(_1808, cbModelParam._m0[9u].y, _1807 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1809, cbModelParam._m0[10u].z, fma(_1808, cbModelParam._m0[10u].y, _1807 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1809, cbModelParam._m0[11u].z, fma(_1808, cbModelParam._m0[11u].y, _1807 * cbModelParam._m0[11u].x))), _1258);
            frontier_phi_13_35_ladder = _1933.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1933.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1933.x * cbModelParam._m0[1u].y;
        }
        _1340 = frontier_phi_13_35_ladder_2;
        _1342 = frontier_phi_13_35_ladder_1;
        _1344 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_449, _450, _451), _1258);
        _1340 = _1328.x * cbModelParam._m0[1u].y;
        _1342 = _1328.y * cbModelParam._m0[1u].y;
        _1344 = _1328.z * cbModelParam._m0[1u].y;
    }
    float _1348 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _286);
    float _1349 = isnan(_1348) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1348 : min(cbModelParam._m0[25u].w, _1348));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1405 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1409 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1413 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1416 = fma(_451, cbModelParam._m0[21u].z, fma(_450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449));
        float _1419 = fma(_451, cbModelParam._m0[22u].z, fma(_450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449));
        float _1422 = fma(_451, cbModelParam._m0[23u].z, fma(_450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449));
        float _1562;
        if (_1416 > 0.0)
        {
            _1562 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1562 = frontier_phi_25_21_ladder;
        }
        float _1827;
        if (_1419 > 0.0)
        {
            _1827 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1827 = frontier_phi_37_32_ladder;
        }
        float _2032;
        if (_1422 > 0.0)
        {
            _2032 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2032 = frontier_phi_46_43_ladder;
        }
        float _2034 = isnan(_1827) ? _1562 : (isnan(_1562) ? _1827 : min(_1562, _1827));
        float _2035 = isnan(_2032) ? _2034 : (isnan(_2034) ? _2032 : min(_2034, _2032));
        float _2039 = (_2035 * _1416) + _1405;
        float _2040 = (_2035 * _1419) + _1409;
        float _2041 = (_2035 * _1422) + _1413;
        float _2042 = _2035 * 9.9999997473787516355514526367188e-05;
        float _2043 = (-1.0) - _2042;
        float _2045 = _2042 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2041 > _2045) || ((_2041 < _2043) || ((_2040 > _2045) || ((_2040 < _2043) || ((_2039 < _2043) || (_2039 > _2045))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2240 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2041, cbModelParam._m0[17u].z, fma(_2040, cbModelParam._m0[17u].y, _2039 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2041, cbModelParam._m0[18u].z, fma(_2040, cbModelParam._m0[18u].y, _2039 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2041, cbModelParam._m0[19u].z, fma(_2040, cbModelParam._m0[19u].y, _2039 * cbModelParam._m0[19u].x))), _1349);
            frontier_phi_22_46_ladder = _2240.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2240.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2240.x * cbModelParam._m0[1u].z;
        }
        _1441 = frontier_phi_22_46_ladder_2;
        _1443 = frontier_phi_22_46_ladder_1;
        _1445 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_449, _450, _451), _1349);
        _1441 = _1425.x * cbModelParam._m0[1u].z;
        _1443 = _1425.y * cbModelParam._m0[1u].z;
        _1445 = _1425.z * cbModelParam._m0[1u].z;
    }
    float _1457 = ((((1.0 - _470) * ((_457 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_470 * _457)) * _441;
    float _1458 = _1457 * ((cbModelParam._m0[1u].w * (_1441 - _1340)) + _1340);
    float _1459 = _1457 * ((cbModelParam._m0[1u].w * (_1443 - _1342)) + _1342);
    float _1460 = _1457 * ((cbModelParam._m0[1u].w * (_1445 - _1344)) + _1344);
    float _1463 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1459, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1459, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1459, cbSceneParam._m0[91u].y, _1458 * cbSceneParam._m0[91u].x));
    uvec4 _1479 = floatBitsToUint(cbInstanceData._m0[_414 + 5u]);
    uint _1481 = _1479.x * 14u;
    uint _1482 = _1481 + 13u;
    float _1489 = _441 + (-1.0);
    float _1494 = (cbLight._m0[_1482].x * _1489) + 1.0;
    float _1495 = (cbLight._m0[_1482].y * _1489) + 1.0;
    float _1496 = (cbLight._m0[_1482].z * _1489) + 1.0;
    float _1497 = (cbLight._m0[_1482].w * _1489) + 1.0;
    uint _1498 = _1481 + 5u;
    float _1504 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
    uint _1508 = _1481 + 4u;
    float _1515 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    uint _1519 = _1481 | 1u;
    float _1530 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_283, _284, _285));
    float _1533 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_283, _284, _285));
    float _3605 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _3616 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _1538 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * 0.3183098733425140380859375;
    float _1540 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.3183098733425140380859375;
    float _1547 = ((cbLight._m0[_1498].x * _1504) * _1540) + ((cbLight._m0[_1508].x * _1515) * _1538);
    float _1548 = ((_1504 * cbLight._m0[_1498].y) * _1540) + ((_1515 * cbLight._m0[_1508].y) * _1538);
    float _1549 = ((_1504 * cbLight._m0[_1498].z) * _1540) + ((_1515 * cbLight._m0[_1508].z) * _1538);
    uvec4 _1554 = floatBitsToUint(cbLight._m0[_1481 + 12u]);
    bool _1556 = _1554.x == 0u;
    float _1567;
    float _1569;
    float _1571;
    if (_1556)
    {
        _1567 = _1547;
        _1569 = _1548;
        _1571 = _1549;
    }
    else
    {
        uint _1575 = _1481 + 6u;
        float _1591 = (dot(vec3(cbLight._m0[_1481 + 2u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1592 = _1591 * _1591;
        float _3627 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1594 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1567 = (((cbLight._m0[_1575].x * 0.3183098733425140380859375) * _1593) * _1594) + _1547;
        _1569 = (((cbLight._m0[_1575].y * 0.3183098733425140380859375) * _1593) * _1594) + _1548;
        _1571 = (((cbLight._m0[_1575].z * 0.3183098733425140380859375) * _1593) * _1594) + _1549;
    }
    bool _1574 = _1554.y == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1574)
    {
        _1612 = _1567;
        _1614 = _1569;
        _1616 = _1571;
    }
    else
    {
        uint _1771 = _1481 + 7u;
        float _1787 = (dot(vec3(cbLight._m0[_1481 + 3u].xyz), vec3(_283, _284, _285)) * 0.5) + 0.5;
        float _1788 = _1787 * _1787;
        float _3643 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1789 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1790 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1612 = (((cbLight._m0[_1771].x * 0.3183098733425140380859375) * _1789) * _1790) + _1567;
        _1614 = (((cbLight._m0[_1771].y * 0.3183098733425140380859375) * _1789) * _1790) + _1569;
        _1616 = (((cbLight._m0[_1771].z * 0.3183098733425140380859375) * _1789) * _1790) + _1571;
    }
    uint _1619 = _1481 + 8u;
    float _1632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1481].w)) * _286) * 0.949999988079071044921875);
    float _1633 = _1632 * _1632;
    float _1634 = cbLight._m0[_1481].x + _365;
    float _1635 = cbLight._m0[_1481].y + _366;
    float _1636 = cbLight._m0[_1481].z + _367;
    float _1640 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
    float _1641 = _1640 * _1634;
    float _1642 = _1640 * _1635;
    float _1643 = _1640 * _1636;
    float _1644 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1481].xyz));
    float _3659 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1647 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _1648 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _1649 = dot(vec3(_283, _284, _285), vec3(_1641, _1642, _1643));
    float _3681 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1652 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _1653 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1641, _1642, _1643));
    float _3692 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1657 = _1633 * _1633;
    float _1661 = ((_1652 * _1652) * (_1657 + (-1.0))) + 1.0;
    float _1672 = (exp2(log2(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1673 = 1.0 - _1633;
    float _1684 = (0.5 / (((_1648 * ((_1647 * _1673) + _1633)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _1673) + _1633) * _1647))) * _1647;
    float _3703 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1686 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1657 / ((_1661 * _1661) * 3.141590118408203125));
    uint _1697 = _1481 + 9u;
    float _1708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1519].w)) * _286) * 0.949999988079071044921875);
    float _1709 = _1708 * _1708;
    float _1710 = cbLight._m0[_1519].x + _365;
    float _1711 = cbLight._m0[_1519].y + _366;
    float _1712 = cbLight._m0[_1519].z + _367;
    float _1716 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
    float _1717 = _1716 * _1710;
    float _1718 = _1716 * _1711;
    float _1719 = _1716 * _1712;
    float _1720 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1519].xyz));
    float _3714 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _1724 = dot(vec3(_283, _284, _285), vec3(_1717, _1718, _1719));
    float _3725 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1727 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1728 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1717, _1718, _1719));
    float _3736 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1732 = _1709 * _1709;
    float _1736 = ((_1727 * _1727) * (_1732 + (-1.0))) + 1.0;
    float _1745 = (exp2(log2(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1746 = 1.0 - _1709;
    float _1756 = (0.5 / (((_1648 * ((_1723 * _1746) + _1709)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _1746) + _1709) * _1723))) * _1723;
    float _3747 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1758 = (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1732 / ((_1736 * _1736) * 3.141590118408203125));
    float _1768 = (((_1745 * cbLight._m0[_1697].x) * _1758) * _1504) + (((_1672 * cbLight._m0[_1619].x) * _1686) * _1515);
    float _1769 = (((_1745 * cbLight._m0[_1697].y) * _1758) * _1504) + (((_1672 * cbLight._m0[_1619].y) * _1686) * _1515);
    float _1770 = (((_1745 * cbLight._m0[_1697].z) * _1758) * _1504) + (((_1672 * cbLight._m0[_1619].z) * _1686) * _1515);
    float _1832;
    float _1834;
    float _1836;
    if (_1556)
    {
        _1832 = _1768;
        _1834 = _1769;
        _1836 = _1770;
    }
    else
    {
        uint _1838 = _1481 + 2u;
        uint _1842 = _1481 + 10u;
        float _1856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _286) * 0.949999988079071044921875);
        float _1857 = _1856 * _1856;
        float _1858 = cbLight._m0[_1838].x + _365;
        float _1859 = cbLight._m0[_1838].y + _366;
        float _1860 = cbLight._m0[_1838].z + _367;
        float _1864 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
        float _1865 = _1864 * _1858;
        float _1866 = _1864 * _1859;
        float _1867 = _1864 * _1860;
        float _1868 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1838].xyz));
        float _3758 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1871 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1872 = dot(vec3(_283, _284, _285), vec3(_1865, _1866, _1867));
        float _3769 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1875 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1876 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_1865, _1866, _1867));
        float _3780 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1880 = _1857 * _1857;
        float _1884 = ((_1875 * _1875) * (_1880 + (-1.0))) + 1.0;
        float _1893 = (exp2(log2(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1894 = 1.0 - _1857;
        float _1904 = (0.5 / (((_1648 * ((_1871 * _1894) + _1857)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _1894) + _1857) * _1871))) * _1871;
        float _3791 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1906 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1880 / ((_1884 * _1884) * 3.141590118408203125));
        float _1907 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1832 = (((_1893 * cbLight._m0[_1842].x) * _1906) * _1907) + _1768;
        _1834 = (((_1893 * cbLight._m0[_1842].y) * _1906) * _1907) + _1769;
        _1836 = (((_1893 * cbLight._m0[_1842].z) * _1906) * _1907) + _1770;
    }
    float _1942;
    float _1944;
    float _1946;
    if (_1574)
    {
        _1942 = _1832;
        _1944 = _1834;
        _1946 = _1836;
    }
    else
    {
        uint _1953 = _1481 + 3u;
        uint _1957 = _1481 + 11u;
        float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1953].w)) * _286) * 0.949999988079071044921875);
        float _1972 = _1971 * _1971;
        float _1973 = cbLight._m0[_1953].x + _365;
        float _1974 = cbLight._m0[_1953].y + _366;
        float _1975 = cbLight._m0[_1953].z + _367;
        float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
        float _1980 = _1979 * _1973;
        float _1981 = _1979 * _1974;
        float _1982 = _1979 * _1975;
        float _1983 = dot(vec3(_283, _284, _285), vec3(cbLight._m0[_1953].xyz));
        float _3807 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1986 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1987 = dot(vec3(_283, _284, _285), vec3(_1980, _1981, _1982));
        float _3818 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1991 = dot(vec3(cbLight._m0[_1953].xyz), vec3(_1980, _1981, _1982));
        float _3829 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1995 = _1972 * _1972;
        float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
        float _2008 = (exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2009 = 1.0 - _1972;
        float _2019 = (0.5 / (((_1648 * ((_1986 * _2009) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _2009) + _1972) * _1986))) * _1986;
        float _3840 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2021 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
        float _2022 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1942 = (((_2008 * cbLight._m0[_1957].x) * _2021) * _2022) + _1832;
        _1944 = (((_2008 * cbLight._m0[_1957].y) * _2021) * _2022) + _1834;
        _1946 = (((_2008 * cbLight._m0[_1957].z) * _2021) * _2022) + _1836;
    }
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    float _2167;
    if (_1479.y == 0u)
    {
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2097;
        float _2099 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2097;
        float _2100 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2097;
        uvec4 _2112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2113 = _2112.x;
        uint _2124 = uint((float(_2112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2113))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2113)));
        float _2134 = (log2(_2100 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2135 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        uint _2138 = uint(isnan(14.0) ? _2135 : (isnan(_2135) ? 14.0 : min(_2135, 14.0)));
        uvec4 _2143 = texelFetch(g_lightClusterGridBuffer, int(((_2138 << 2u) + (_2124 << 6u)) >> 2u));
        uint _2144 = _2143.x;
        uint _2145 = _2112.z;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        if (((((1u << ((_2145 >> 4u) & 15u)) + 4294967295u) & _2144) == 0u) || ((_2145 & 240u) == 0u))
        {
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
            _2253 = 0.0;
            _2255 = 0.0;
        }
        else
        {
            float _2246;
            float _2248;
            float _2250;
            float _2252;
            float _2254;
            float _2256;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            uint _2396 = 0u;
            uint _2405;
            bool _2406;
            for (;;)
            {
                _2405 = texelFetch(g_lightClassification, int((((_2138 << 5u) + (_2124 << 9u)) + (_2396 << 2u)) >> 2u)).x;
                _2406 = _2405 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2406)
                {
                    frontier_phi_61_pred = _2390;
                    frontier_phi_61_pred_1 = _2395;
                    frontier_phi_61_pred_2 = _2394;
                    frontier_phi_61_pred_3 = _2393;
                    frontier_phi_61_pred_4 = _2392;
                    frontier_phi_61_pred_5 = _2391;
                }
                else
                {
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    uint _2520;
                    _2514 = _2390;
                    _2515 = _2391;
                    _2516 = _2392;
                    _2517 = _2393;
                    _2518 = _2394;
                    _2519 = _2395;
                    _2520 = _2405;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    for (;;)
                    {
                        uint _2524 = uint(findLSB(_2520)) + (_2396 << 5u);
                        uint _2521 = (_2520 + 4294967295u) & _2520;
                        uint _2526 = _2524 * 48u;
                        vec4 _2540 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2526)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 3u)).x));
                        uint _2546 = (_2524 * 48u) + 4u;
                        vec4 _2559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2546)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 3u)).x));
                        uint _2565 = (_2524 * 48u) + 8u;
                        vec3 _2576 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2565)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 2u)).x));
                        float _2580 = _2540.x - _2098;
                        float _2581 = _2540.y - _2099;
                        float _2582 = _2540.z - _2100;
                        float _2583 = dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582));
                        float _2586 = inversesqrt(_2583);
                        float _2587 = _2586 * _2580;
                        float _2588 = _2586 * _2581;
                        float _2589 = _2586 * _2582;
                        float _2590 = dot(vec3(_395, _398, _401), vec3(_2587, _2588, _2589));
                        float _2595 = 1.0 - (_2583 * _2540.w);
                        float _3866 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                        float _2596 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2597 = sqrt(_2583) * _2559.w;
                        float _2600 = 1.39999997615814208984375 / (_2597 + 1.39999997615814208984375);
                        float _2601 = _2600 * _2600;
                        float _2604 = ((1.0 - _2601) * _2590) + _2601;
                        float _2607 = _2597 * _2597;
                        float _2611 = ((isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))) * _2596) / ((_2607 * 0.699999988079071044921875) + 1.0);
                        float _2615 = (-0.0) - _2098;
                        float _2616 = (-0.0) - _2099;
                        float _2617 = (-0.0) - _2100;
                        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
                        float _2622 = _2621 * _2615;
                        float _2623 = _2621 * _2616;
                        float _2624 = _2621 * _2617;
                        float _2632 = exp2(log2(1.0 / ((_2607 * 3.5) + 5.0)) * 0.25);
                        float _2633 = 1.0 - _457;
                        float _2640 = sqrt(1.0 - ((1.0 - (_2633 * _2633)) * (1.0 - (_2632 * _2632))));
                        float _2641 = _2640 * _2640;
                        float _2642 = _2641 * _2641;
                        float _2643 = _2622 + _2587;
                        float _2644 = _2623 + _2588;
                        float _2645 = _2624 + _2589;
                        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
                        float _2653 = dot(vec3(_395, _398, _401), vec3(_2622, _2623, _2624));
                        float _3882 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2656 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2657 = dot(vec3(_395, _398, _401), vec3(_2649 * _2643, _2649 * _2644, _2649 * _2645));
                        float _3893 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2660 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                        float _2664 = ((_2660 * _2660) * (_2642 + (-1.0))) + 1.0;
                        float _2665 = _2600 * _2641;
                        float _2666 = _2665 * _2665;
                        float _2669 = ((1.0 - _2666) * _2590) + _2666;
                        float _3904 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                        float _2671 = 1.0 - _2641;
                        float _2681 = (0.5 / (((_2670 * ((_2656 * _2671) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2671) + _2641) * _2656))) * _2670;
                        float _3915 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2692 = (((_2642 * 3.1415927410125732421875) * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) / ((_2664 * _2664) * ((_2607 * 2.1991131305694580078125) + 3.141590118408203125))) * _2596;
                        _2449 = (_2611 * _2559.x) + _2517;
                        _2450 = (_2611 * _2559.y) + _2518;
                        _2451 = (_2611 * _2559.z) + _2519;
                        _2446 = (_2692 * _2576.x) + _2514;
                        _2447 = (_2692 * _2576.y) + _2515;
                        _2448 = (_2692 * _2576.z) + _2516;
                        if (_2521 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2514 = _2446;
                            _2515 = _2447;
                            _2516 = _2448;
                            _2517 = _2449;
                            _2518 = _2450;
                            _2519 = _2451;
                            _2520 = _2521;
                        }
                    }
                    frontier_phi_61_pred = _2446;
                    frontier_phi_61_pred_1 = _2451;
                    frontier_phi_61_pred_2 = _2450;
                    frontier_phi_61_pred_3 = _2449;
                    frontier_phi_61_pred_4 = _2448;
                    frontier_phi_61_pred_5 = _2447;
                }
                _2246 = frontier_phi_61_pred;
                _2256 = frontier_phi_61_pred_1;
                _2254 = frontier_phi_61_pred_2;
                _2252 = frontier_phi_61_pred_3;
                _2250 = frontier_phi_61_pred_4;
                _2248 = frontier_phi_61_pred_5;
                uint _2397 = _2396 + 1u;
                if (_2397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2390 = _2246;
                    _2391 = _2248;
                    _2392 = _2250;
                    _2393 = _2252;
                    _2394 = _2254;
                    _2395 = _2256;
                    _2396 = _2397;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
            _2253 = _2254;
            _2255 = _2256;
        }
        uvec4 _2259 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2260 = _2259.z;
        uint _2262 = (_2260 >> 8u) & 15u;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        float _2368;
        if (((4294967295u << _2262) & _2144) == 0u)
        {
            _2358 = _2245;
            _2360 = _2247;
            _2362 = _2249;
            _2364 = _2251;
            _2366 = _2253;
            _2368 = _2255;
        }
        else
        {
            float _2383 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
            float _2384 = _2383 * _2098;
            float _2385 = _2383 * _2099;
            float _2386 = _2383 * _2100;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2262 < ((_2260 >> 12u) & 15u))
            {
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2367;
                float _2369;
                float _2497 = _2245;
                float _2498 = _2247;
                float _2499 = _2249;
                float _2500 = _2251;
                float _2501 = _2253;
                float _2502 = _2255;
                uint _2503 = _2262;
                uint _2512;
                bool _2513;
                for (;;)
                {
                    _2512 = texelFetch(g_lightClassification, int((((_2138 << 5u) + (_2124 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                    _2513 = _2512 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2513)
                    {
                        frontier_phi_67_pred = _2500;
                        frontier_phi_67_pred_1 = _2501;
                        frontier_phi_67_pred_2 = _2502;
                        frontier_phi_67_pred_3 = _2499;
                        frontier_phi_67_pred_4 = _2498;
                        frontier_phi_67_pred_5 = _2497;
                    }
                    else
                    {
                        float _2697;
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2710 = _2497;
                        float _2711 = _2498;
                        float _2712 = _2499;
                        float _2713 = _2500;
                        float _2714 = _2501;
                        float _2715 = _2502;
                        uint _2716 = _2512;
                        uint _2717;
                        vec4 _2742;
                        float _2743;
                        vec4 _2758;
                        vec3 _2770;
                        vec4 _2786;
                        vec4 _2802;
                        float _2849;
                        bool _2850;
                        for (;;)
                        {
                            uint _2727 = ((_2503 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2716));
                            _2717 = (_2716 + 4294967295u) & _2716;
                            uint _2729 = _2727 * 40u;
                            _2742 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2729)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2729 + 3u)).x));
                            _2743 = _2742.w;
                            uint _2745 = (_2727 * 40u) + 4u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            uint _2760 = (_2727 * 40u) + 8u;
                            _2770 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x));
                            uint _2773 = (_2727 * 40u) + 16u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            uint _2789 = (_2727 * 40u) + 20u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            uint _2805 = (_2727 * 40u) + 24u;
                            vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2824 = (_2727 * 40u) + 28u;
                            vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            _2849 = fma(_2100, _2837.z, fma(_2099, _2837.y, _2837.x * _2098)) + _2837.w;
                            _2850 = !((fma(_2100, _2818.z, fma(_2099, _2818.y, _2818.x * _2098)) + _2818.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2850)
                            {
                                float _2877 = _2742.x - _2098;
                                float _2878 = _2742.y - _2099;
                                float _2879 = _2742.z - _2100;
                                float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                                float _2883 = inversesqrt(_2880);
                                float _2884 = _2883 * _2877;
                                float _2885 = _2883 * _2878;
                                float _2886 = _2883 * _2879;
                                float _2890 = 1.0 - (_2880 / (_2743 * _2743));
                                float _3926 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                                float _2891 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _2895 = sqrt(_2880) * _2758.w;
                                float _2897 = 1.39999997615814208984375 / (_2895 + 1.39999997615814208984375);
                                float _2898 = _2897 * _2897;
                                float _2901 = ((1.0 - _2898) * dot(vec3(_2884, _2885, _2886), vec3(_395, _398, _401))) + _2898;
                                float _2904 = _2895 * _2895;
                                float _2908 = (fma(_2100, _2786.z, fma(_2099, _2786.y, _2786.x * _2098)) + _2786.w) / _2849;
                                float _2909 = (fma(_2100, _2802.z, fma(_2099, _2802.y, _2802.x * _2098)) + _2802.w) / _2849;
                                float _2913 = 1.0 - dot(vec2(_2908, _2909), vec2(_2908, _2909));
                                float _3942 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                                float _2914 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _2915 = _2914 * (((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2891) / ((_2904 * 0.699999988079071044921875) + 1.0));
                                float _2927 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                                float _2928 = 1.0 - _457;
                                float _2935 = sqrt(1.0 - ((1.0 - (_2928 * _2928)) * (1.0 - (_2927 * _2927))));
                                float _2936 = _2935 * _2935;
                                float _2937 = _2936 * _2936;
                                float _2938 = _2884 - _2384;
                                float _2939 = _2885 - _2385;
                                float _2940 = _2886 - _2386;
                                float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                                float _2948 = dot(vec3(_395, _398, _401), vec3((-0.0) - _2384, (-0.0) - _2385, (-0.0) - _2386));
                                float _3953 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2951 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _2952 = dot(vec3(_395, _398, _401), vec3(_2944 * _2938, _2944 * _2939, _2944 * _2940));
                                float _3964 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2955 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
                                float _2959 = ((_2955 * _2955) * (_2937 + (-1.0))) + 1.0;
                                float _2960 = _2897 * _2936;
                                float _2961 = _2960 * _2960;
                                float _2967 = ((1.0 - _2961) * dot(vec3(_395, _398, _401), vec3(_2884, _2885, _2886))) + _2961;
                                float _3975 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2968 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                                float _2969 = 1.0 - _2936;
                                float _2979 = (0.5 / (((_2968 * ((_2951 * _2969) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2968 * _2969) + _2936) * _2951))) * _2968;
                                float _3986 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2989 = (_2914 * _2891) * (((_2937 * 3.1415927410125732421875) * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) / ((_2959 * _2959) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2989 * _2770.x;
                                frontier_phi_73_pred_1 = _2989 * _2770.y;
                                frontier_phi_73_pred_2 = _2915 * _2758.z;
                                frontier_phi_73_pred_3 = _2915 * _2758.y;
                                frontier_phi_73_pred_4 = _2915 * _2758.x;
                                frontier_phi_73_pred_5 = _2989 * _2770.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2993 = frontier_phi_73_pred;
                            _2994 = frontier_phi_73_pred_1;
                            _2998 = frontier_phi_73_pred_2;
                            _2997 = frontier_phi_73_pred_3;
                            _2996 = frontier_phi_73_pred_4;
                            _2995 = frontier_phi_73_pred_5;
                            _2700 = _2996 + _2713;
                            _2701 = _2997 + _2714;
                            _2702 = _2998 + _2715;
                            _2697 = _2993 + _2710;
                            _2698 = _2994 + _2711;
                            _2699 = _2995 + _2712;
                            if (_2717 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2710 = _2697;
                                _2711 = _2698;
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2702;
                                _2716 = _2717;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2700;
                        frontier_phi_67_pred_1 = _2701;
                        frontier_phi_67_pred_2 = _2702;
                        frontier_phi_67_pred_3 = _2699;
                        frontier_phi_67_pred_4 = _2698;
                        frontier_phi_67_pred_5 = _2697;
                    }
                    _2365 = frontier_phi_67_pred;
                    _2367 = frontier_phi_67_pred_1;
                    _2369 = frontier_phi_67_pred_2;
                    _2363 = frontier_phi_67_pred_3;
                    _2361 = frontier_phi_67_pred_4;
                    _2359 = frontier_phi_67_pred_5;
                    uint _2504 = _2503 + 1u;
                    if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2497 = _2359;
                        _2498 = _2361;
                        _2499 = _2363;
                        _2500 = _2365;
                        _2501 = _2367;
                        _2502 = _2369;
                        _2503 = _2504;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2367;
                frontier_phi_55_56_ladder_1 = _2369;
                frontier_phi_55_56_ladder_2 = _2365;
                frontier_phi_55_56_ladder_3 = _2363;
                frontier_phi_55_56_ladder_4 = _2361;
                frontier_phi_55_56_ladder_5 = _2359;
            }
            else
            {
                frontier_phi_55_56_ladder = _2253;
                frontier_phi_55_56_ladder_1 = _2255;
                frontier_phi_55_56_ladder_2 = _2251;
                frontier_phi_55_56_ladder_3 = _2249;
                frontier_phi_55_56_ladder_4 = _2247;
                frontier_phi_55_56_ladder_5 = _2245;
            }
            _2358 = frontier_phi_55_56_ladder_5;
            _2360 = frontier_phi_55_56_ladder_4;
            _2362 = frontier_phi_55_56_ladder_3;
            _2364 = frontier_phi_55_56_ladder_2;
            _2366 = frontier_phi_55_56_ladder;
            _2368 = frontier_phi_55_56_ladder_1;
        }
        float _2373 = isnan(1.0) ? _441 : (isnan(_441) ? 1.0 : min(_441, 1.0));
        _2157 = (_2373 * _2364) + _1612;
        _2159 = (_2373 * _2366) + _1614;
        _2161 = (_2373 * _2368) + _1616;
        _2163 = ((_2358 * 0.039999999105930328369140625) * _2373) + _1942;
        _2165 = ((_2360 * 0.039999999105930328369140625) * _2373) + _1944;
        _2167 = ((_2362 * 0.039999999105930328369140625) * _2373) + _1946;
    }
    else
    {
        _2157 = _1612;
        _2159 = _1614;
        _2161 = _1616;
        _2163 = _1942;
        _2165 = _1944;
        _2167 = _1946;
    }
    float _4002 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4013 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4024 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    uint _2187 = _414 + 6u;
    float _2195 = _373 / cbSceneParam._m0[86u].x;
    float _2196 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, (log2((isnan(cbSceneParam._m0[77u].w) ? _306 : (isnan(_306) ? cbSceneParam._m0[77u].w : min(_306, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2212 = _2210.x;
    float _2213 = _2210.y;
    float _2214 = _2210.z;
    float _2215 = _2210.w;
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    if (_306 > cbSceneParam._m0[78u].w)
    {
        float _2270 = isnan(_306) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _306 : min(cbSceneParam._m0[80u].w, _306));
        float _2271 = _2270 / _306;
        float _2282 = _2271 * _358;
        float _2283 = _359 * _2271;
        float _2284 = (-0.0) - _2283;
        float _2286 = _2271 * _360;
        float _2288 = (cbSceneParam._m0[77u].w * _2284) / _2270;
        float _2289 = _2288 + cbSceneParam._m0[79u].w;
        float _2290 = cbSceneParam._m0[79u].w - _2283;
        float _2296 = sqrt(((_2282 * _2282) + (_2283 * _2283)) + (_2286 * _2286));
        float _2299 = (1.0 - (cbSceneParam._m0[77u].w / _2270)) * _2296;
        float _2304 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2306 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2459;
        if (abs((_2284 - _2288) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2459 = ((((_2289 > 0.0) ? exp2(_2304 * _2289) : (2.0 - exp2(_2306 * _2289))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2299;
        }
        else
        {
            float _2419 = 1.0 / cbSceneParam._m0[80u].x;
            float _2420 = isnan(_2290) ? _2289 : (isnan(_2289) ? _2290 : max(_2289, _2290));
            float _2421 = isnan(_2290) ? _2289 : (isnan(_2289) ? _2290 : min(_2289, _2290));
            float _2430 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : min(_2420, 0.0));
            float _2431 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : min(_2421, 0.0));
            _2459 = ((abs(_2296 / _2284) * cbSceneParam._m0[80u].y) * ((((_2430 - _2431) * 2.0) - ((exp2(_2304 * (isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0)))) - exp2(_2304 * (isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0))))) * _2419)) - ((exp2(_2306 * _2430) - exp2(_2306 * _2431)) * _2419))) + (_2299 * cbSceneParam._m0[80u].z);
        }
        vec4 _2461 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, 1.0), 0.0);
        float _2470 = exp2((_2459 * (-1.44269502162933349609375)) * (1.0 - _2461.w));
        float _2471 = log2(_2470);
        float _2487 = log2(_2215);
        _2308 = (exp2(_2487 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].x)) * _2461.x) / cbSceneParam._m0[78u].x)) + _2212;
        _2310 = (exp2(_2487 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].y)) * _2461.y) / cbSceneParam._m0[78u].y)) + _2213;
        _2312 = (exp2(_2487 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].z)) * _2461.z) / cbSceneParam._m0[78u].z)) + _2214;
        _2314 = _2470 * _2215;
    }
    else
    {
        _2308 = _2212;
        _2310 = _2213;
        _2312 = _2214;
        _2314 = _2215;
    }
    float _2326 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2327 = _2326 == 3.0;
    float _2328 = log2(_2314);
    float _2335 = exp2(_2328 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2157 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _441))) + ((_2163 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2336 = exp2(_2328 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2159 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _441))) + ((_2165 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2337 = exp2(_2328 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_2161 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _441))) + ((_2167 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1247)) * cbPerFrame._m0[3u].x));
    float _2346 = (_2326 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2346 * (_2327 ? _2335 : (_2335 + (cbSceneParam._m0[72u].w * _2308)));
    SV_Target.y = _2346 * (_2327 ? _2336 : (_2336 + (cbSceneParam._m0[72u].w * _2310)));
    SV_Target.z = _2346 * (_2327 ? _2337 : (_2337 + (cbSceneParam._m0[72u].w * _2312)));
    SV_Target.w = cbInstanceData._m0[_2187].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2187].w;
}


