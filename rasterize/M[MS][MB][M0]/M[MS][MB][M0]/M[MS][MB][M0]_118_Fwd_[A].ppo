#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1325;
float _3684;
float _3685;
float _3686;
float _3687;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3696 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _388) + _463;
    float _475 = ((((_442.x - _461) * _388) + _461) * 2.0) + (-1.0);
    float _476 = ((((_442.y - _462) * _388) + _462) * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3707 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _482 = sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))));
    float _485 = _475 + ((((_415.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _486 = _476 + ((((_415.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _489 = fma(_482, _241, fma(_486, _248, _485 * _234));
    float _492 = fma(_482, _242, fma(_486, _249, _485 * _235));
    float _495 = fma(_482, _243, fma(_486, _250, _485 * _236));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _545 = _543.x;
    float _546 = 1.0 - _545;
    float _550 = ((_545 - _546) * cbMtdParam._m0[24u].z) + _546;
    float _552 = (cbMtdParam._m0[19u].x + dot(vec4(_499 * _489, _499 * _492, _499 * _495, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_550 * cbMtdParam._m0[21u].z);
    float _3718 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _555 = (-0.0) - cbMtdParam._m0[24u].y;
    float _557 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _558 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
    float _565 = _553 - ((_553 * TEXCOORD_8.x) * _558);
    float _566 = _553 - ((_553 * TEXCOORD_8.y) * _558);
    float _567 = _553 - ((_553 * TEXCOORD_8.z) * _558);
    float _574 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _578 = ((isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : min(_574, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _586 = (_578 - (((_550 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _578))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3749 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _591 = ((_565 * (cbMtdParam._m0[17u].x - _395)) * _587) + _395;
    float _592 = ((_566 * (cbMtdParam._m0[17u].y - _396)) * _587) + _396;
    float _593 = ((_567 * (cbMtdParam._m0[17u].z - _397)) * _587) + _397;
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _607 = _605.x;
    float _608 = 1.0 - _607;
    float _635 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_607 - _608) * cbMtdParam._m0[24u].w) + _608) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3760 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _644 = ((((cbMtdParam._m0[10u].x - _591) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _636) + _591;
    float _645 = ((((cbMtdParam._m0[10u].y - _592) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _636) + _592;
    float _646 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _593)) * _636) + _593;
    float _651 = (((_415.z - _472) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _472;
    vec4 _665 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _672 = (_665.x * 2.0) + (-1.0);
    float _673 = (_665.y * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3771 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _683 = (((_665.z - _651) * _565) * _587) + _651;
    float _686 = ((cbMtdParam._m0[23u].y - _683) * _636) + _683;
    vec4 _705 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _711 = (_705.x * 2.0) + (-1.0);
    float _712 = (_705.y * 2.0) + (-1.0);
    float _713 = dot(vec2(_711, _712), vec2(_711, _712));
    float _3782 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _733 = (((cbMtdParam._m0[21u].x * _485) + ((_672 - _485) * _565)) * _587) + _485;
    float _734 = (((cbMtdParam._m0[21u].x * _486) + ((_673 - _486) * _566)) * _587) + _486;
    float _735 = (((sqrt(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) - _482) * _567) * _587) + _482;
    float _746 = (((_711 - _733) + (_733 * cbMtdParam._m0[22u].z)) * _636) + _733;
    float _747 = (((_712 - _734) + (_734 * cbMtdParam._m0[22u].z)) * _636) + _734;
    float _748 = ((sqrt(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) - _735) * _636) + _735;
    float _750 = cbMtdParam._m0[22u].x + _515.w;
    float _753 = fma(_748, _241, fma(_747, _248, _746 * _234));
    float _756 = fma(_748, _242, fma(_747, _249, _746 * _235));
    float _759 = fma(_748, _243, fma(_747, _250, _746 * _236));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3793 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _767 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _3804 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3815 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _3826 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3837 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _836 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _826);
    float _837 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _826);
    float _838 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _826);
    float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
    float _843 = _836 * _842;
    float _844 = _837 * _842;
    float _845 = _838 * _842;
    vec4 _850 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _852 = _850.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1006 = sqrt(((_836 * _836) + (_837 * _837)) + (_838 * _838));
        float _1012 = (cbMatDynParam._m0[5u].x * _1006) + cbMatDynParam._m0[5u].y;
        float _3848 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1017 = (cbMatDynParam._m0[5u].z * _1006) + cbMatDynParam._m0[5u].w;
        float _3859 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) - _1013)) + _1013) < ((_852 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _885 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _888 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _901 = _253 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3870 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _926 = ((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * TEXCOORD_5.w) * _922.x;
    float _927 = dot(vec3(_764, _765, _766), vec3(_843, _844, _845));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _764) - _843;
    float _935 = (_930 * _765) - _844;
    float _936 = (_930 * _766) - _845;
    float _940 = abs(dot(vec3(_843, _844, _845), vec3(_764, _765, _766)));
    float _3903 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_767);
    float _955 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1324;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1053 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1057 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1082 = _987 + _764;
        float _1083 = _991 + _765;
        float _1084 = _995 + _766;
        float _1094 = fma(_1084, cbModelParam._m0[26u].z, fma(_1083, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1082)) - _1049;
        float _1095 = fma(_1084, cbModelParam._m0[27u].z, fma(_1083, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1082)) - _1053;
        float _1096 = fma(_1084, cbModelParam._m0[28u].z, fma(_1083, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1082)) - _1057;
        float _1100 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
        float _1113 = ((_1100 * _1094) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1100 * _1095) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1100 * _1096) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1152 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1118.x + (-0.5));
        float _1154 = _1152 * (_1118.y + (-0.5));
        float _1155 = _1152 * (_1118.z + (-0.5));
        float _1162 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1125.x + (-0.5));
        float _1164 = _1162 * (_1125.y + (-0.5));
        float _1165 = _1162 * (_1125.z + (-0.5));
        float _1172 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1132.x + (-0.5));
        float _1174 = _1172 * (_1132.y + (-0.5));
        float _1175 = _1172 * (_1132.z + (-0.5));
        float _1182 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1139.x + (-0.5));
        float _1184 = _1182 * (_1139.y + (-0.5));
        float _1185 = _1182 * (_1139.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1206 = (dot(vec3(_764, _765, _766), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1216 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3951 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1218 + 1.0))) + _1223) * _1186;
        float _1233 = _1154 * 0.5;
        float _1234 = _1164 * 0.5;
        float _1235 = _1174 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_764, _765, _766), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3984 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1260 + 1.0))) + _1265) * _1187;
        float _1275 = _1155 * 0.5;
        float _1276 = _1165 * 0.5;
        float _1277 = _1175 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_764, _765, _766), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4017 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1302 + 1.0))) + _1307) * _1188;
        _1324 = _1155;
        _1326 = _1154;
        _1327 = _1153;
        _1328 = _1165;
        _1329 = _1164;
        _1330 = _1163;
        _1331 = _1175;
        _1332 = _1174;
        _1333 = _1173;
        _1334 = _1188;
        _1335 = _1187;
        _1336 = _1186;
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1339 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1325;
        _1326 = _1325;
        _1327 = _1325;
        _1328 = _1325;
        _1329 = _1325;
        _1330 = _1325;
        _1331 = _1325;
        _1332 = _1325;
        _1333 = _1325;
        _1334 = _1325;
        _1335 = _1325;
        _1336 = _1325;
        _1337 = 0.0;
        _1338 = 0.0;
        _1339 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1371 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1375 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1398 = _987 + _764;
        float _1399 = _991 + _765;
        float _1400 = _995 + _766;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_764, _765, _766), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4080 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_764, _765, _766), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4113 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_764, _765, _766), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4146 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1325;
        _1637 = _1325;
        _1638 = _1325;
        _1639 = _1325;
        _1640 = _1325;
        _1641 = _1325;
        _1642 = _1325;
        _1643 = _1325;
        _1644 = _1325;
        _1645 = _1325;
        _1646 = _1325;
        _1647 = _1325;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1337)) + _1337;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1339)) + _1339;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _934 * 0.5;
    float _1705 = _935 * 0.5;
    float _1706 = _936 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1324, _1328, _1331, _1334));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1327, _1330, _1333, _1336));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1835 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1838 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1866 = frontier_phi_17_15_ladder;
        }
        float _2067;
        if (_1835 > 0.0)
        {
            _2067 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2067 = frontier_phi_26_22_ladder;
        }
        float _2310;
        if (_1838 > 0.0)
        {
            _2310 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2310 = frontier_phi_38_33_ladder;
        }
        float _2312 = isnan(_2067) ? _1866 : (isnan(_1866) ? _2067 : min(_1866, _2067));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1832) + _1821;
        float _2318 = (_2313 * _1835) + _1825;
        float _2319 = (_2313 * _1838) + _1829;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2322 = (-1.0) - _2320;
        float _2324 = _2320 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2319 > _2324) || ((_2319 < _2322) || ((_2318 > _2324) || ((_2318 < _2322) || ((_2317 < _2322) || (_2317 > _2324))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2443 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2319, cbModelParam._m0[9u].z, fma(_2318, cbModelParam._m0[9u].y, _2317 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2319, cbModelParam._m0[10u].z, fma(_2318, cbModelParam._m0[10u].y, _2317 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2319, cbModelParam._m0[11u].z, fma(_2318, cbModelParam._m0[11u].y, _2317 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_16_38_ladder = _2443.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2443.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2443.x * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_16_38_ladder_2;
        _1856 = frontier_phi_16_38_ladder_1;
        _1858 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1773);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1931 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1934 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2072;
        if (_1928 > 0.0)
        {
            _2072 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2072 = frontier_phi_28_24_ladder;
        }
        float _2337;
        if (_1931 > 0.0)
        {
            _2337 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2337 = frontier_phi_40_35_ladder;
        }
        float _2542;
        if (_1934 > 0.0)
        {
            _2542 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2542 = frontier_phi_49_46_ladder;
        }
        float _2544 = isnan(_2337) ? _2072 : (isnan(_2072) ? _2337 : min(_2072, _2337));
        float _2545 = isnan(_2542) ? _2544 : (isnan(_2544) ? _2542 : min(_2544, _2542));
        float _2549 = (_2545 * _1928) + _1917;
        float _2550 = (_2545 * _1931) + _1921;
        float _2551 = (_2545 * _1934) + _1925;
        float _2552 = _2545 * 9.9999997473787516355514526367188e-05;
        float _2553 = (-1.0) - _2552;
        float _2555 = _2552 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2551 > _2555) || ((_2551 < _2553) || ((_2550 > _2555) || ((_2550 < _2553) || ((_2549 < _2553) || (_2549 > _2555))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2551, cbModelParam._m0[17u].z, fma(_2550, cbModelParam._m0[17u].y, _2549 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2551, cbModelParam._m0[18u].z, fma(_2550, cbModelParam._m0[18u].y, _2549 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2551, cbModelParam._m0[19u].z, fma(_2550, cbModelParam._m0[19u].y, _2549 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_25_49_ladder = _2750.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2750.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2750.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_25_49_ladder_2;
        _1955 = frontier_phi_25_49_ladder_1;
        _1957 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1863);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1969 = ((((1.0 - _955) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_955 * _942)) * _926;
    float _1970 = _1969 * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1971 = _1969 * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1972 = _1969 * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1971, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1971, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1971, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _2001 = _926 + (-1.0);
    float _2006 = (cbLight._m0[_1994].x * _2001) + 1.0;
    float _2007 = (cbLight._m0[_1994].y * _2001) + 1.0;
    float _2008 = (cbLight._m0[_1994].z * _2001) + 1.0;
    float _2009 = (cbLight._m0[_1994].w * _2001) + 1.0;
    uint _2010 = _1993 + 5u;
    float _2016 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2020 = _1993 + 4u;
    float _2026 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2030 = _1993 | 1u;
    float _2041 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_764, _765, _766));
    float _2044 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_764, _765, _766));
    float _4282 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _4293 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2049 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.3183098733425140380859375;
    float _2051 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * 0.3183098733425140380859375;
    float _2058 = ((cbLight._m0[_2010].x * _2016) * _2051) + ((cbLight._m0[_2020].x * _2026) * _2049);
    float _2059 = ((_2016 * cbLight._m0[_2010].y) * _2051) + ((_2026 * cbLight._m0[_2020].y) * _2049);
    float _2060 = ((_2016 * cbLight._m0[_2010].z) * _2051) + ((_2026 * cbLight._m0[_2020].z) * _2049);
    uvec4 _2064 = floatBitsToUint(cbLight._m0[_1993 + 12u]);
    bool _2066 = _2064.x == 0u;
    float _2077;
    float _2079;
    float _2081;
    if (_2066)
    {
        _2077 = _2058;
        _2079 = _2059;
        _2081 = _2060;
    }
    else
    {
        uint _2085 = _1993 + 6u;
        float _2101 = (dot(vec3(cbLight._m0[_1993 + 2u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2102 = _2101 * _2101;
        float _4304 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2103 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2104 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2077 = (((cbLight._m0[_2085].x * 0.3183098733425140380859375) * _2103) * _2104) + _2058;
        _2079 = (((cbLight._m0[_2085].y * 0.3183098733425140380859375) * _2103) * _2104) + _2059;
        _2081 = (((cbLight._m0[_2085].z * 0.3183098733425140380859375) * _2103) * _2104) + _2060;
    }
    bool _2084 = _2064.y == 0u;
    float _2122;
    float _2124;
    float _2126;
    if (_2084)
    {
        _2122 = _2077;
        _2124 = _2079;
        _2126 = _2081;
    }
    else
    {
        uint _2281 = _1993 + 7u;
        float _2297 = (dot(vec3(cbLight._m0[_1993 + 3u].xyz), vec3(_764, _765, _766)) * 0.5) + 0.5;
        float _2298 = _2297 * _2297;
        float _4320 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2299 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2300 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2122 = (((cbLight._m0[_2281].x * 0.3183098733425140380859375) * _2299) * _2300) + _2077;
        _2124 = (((cbLight._m0[_2281].y * 0.3183098733425140380859375) * _2299) * _2300) + _2079;
        _2126 = (((cbLight._m0[_2281].z * 0.3183098733425140380859375) * _2299) * _2300) + _2081;
    }
    uint _2129 = _1993 + 8u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _767) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1993].x + _843;
    float _2145 = cbLight._m0[_1993].y + _844;
    float _2146 = cbLight._m0[_1993].z + _845;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_1993].xyz));
    float _4336 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2158 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2159 = dot(vec3(_764, _765, _766), vec3(_2151, _2152, _2153));
    float _4358 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2162 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2163 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2151, _2152, _2153));
    float _4369 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2167 = _2143 * _2143;
    float _2171 = ((_2162 * _2162) * (_2167 + (-1.0))) + 1.0;
    float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2183 = 1.0 - _2143;
    float _2194 = (0.5 / (((_2158 * ((_2157 * _2183) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2183) + _2143) * _2157))) * _2157;
    float _4380 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2167 / ((_2171 * _2171) * 3.141590118408203125));
    uint _2207 = _1993 + 9u;
    float _2218 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _767) * 0.949999988079071044921875);
    float _2219 = _2218 * _2218;
    float _2220 = cbLight._m0[_2030].x + _843;
    float _2221 = cbLight._m0[_2030].y + _844;
    float _2222 = cbLight._m0[_2030].z + _845;
    float _2226 = inversesqrt(dot(vec3(_2220, _2221, _2222), vec3(_2220, _2221, _2222)));
    float _2227 = _2226 * _2220;
    float _2228 = _2226 * _2221;
    float _2229 = _2226 * _2222;
    float _2230 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2030].xyz));
    float _4391 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2233 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2234 = dot(vec3(_764, _765, _766), vec3(_2227, _2228, _2229));
    float _4402 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2227, _2228, _2229));
    float _4413 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2219 * _2219;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2255 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2256 = 1.0 - _2219;
    float _2266 = (0.5 / (((_2158 * ((_2233 * _2256) + _2219)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2256) + _2219) * _2233))) * _2233;
    float _4424 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    float _2278 = (((_2255 * cbLight._m0[_2207].x) * _2268) * _2016) + (((_2182 * cbLight._m0[_2129].x) * _2196) * _2026);
    float _2279 = (((_2255 * cbLight._m0[_2207].y) * _2268) * _2016) + (((_2182 * cbLight._m0[_2129].y) * _2196) * _2026);
    float _2280 = (((_2255 * cbLight._m0[_2207].z) * _2268) * _2016) + (((_2182 * cbLight._m0[_2129].z) * _2196) * _2026);
    float _2342;
    float _2344;
    float _2346;
    if (_2066)
    {
        _2342 = _2278;
        _2344 = _2279;
        _2346 = _2280;
    }
    else
    {
        uint _2348 = _1993 + 2u;
        uint _2352 = _1993 + 10u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _767) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _843;
        float _2369 = cbLight._m0[_2348].y + _844;
        float _2370 = cbLight._m0[_2348].z + _845;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2348].xyz));
        float _4435 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _2382 = dot(vec3(_764, _765, _766), vec3(_2375, _2376, _2377));
        float _4446 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4457 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2404 = 1.0 - _2367;
        float _2414 = (0.5 / (((_2158 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2404) + _2367) * _2381))) * _2381;
        float _4468 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2342 = (((_2403 * cbLight._m0[_2352].x) * _2416) * _2417) + _2278;
        _2344 = (((_2403 * cbLight._m0[_2352].y) * _2416) * _2417) + _2279;
        _2346 = (((_2403 * cbLight._m0[_2352].z) * _2416) * _2417) + _2280;
    }
    float _2452;
    float _2454;
    float _2456;
    if (_2084)
    {
        _2452 = _2342;
        _2454 = _2344;
        _2456 = _2346;
    }
    else
    {
        uint _2463 = _1993 + 3u;
        uint _2467 = _1993 + 11u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _767) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _843;
        float _2484 = cbLight._m0[_2463].y + _844;
        float _2485 = cbLight._m0[_2463].z + _845;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_2463].xyz));
        float _4484 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2497 = dot(vec3(_764, _765, _766), vec3(_2490, _2491, _2492));
        float _4495 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4506 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2158 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2158 * _2519) + _2482) * _2496))) * _2496;
        float _4517 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2452 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2342;
        _2454 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2344;
        _2456 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2346;
    }
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_1991.y == 0u)
    {
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2607;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2607;
        float _2610 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2607;
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2623)));
        float _2644 = (log2(_2610 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
        }
        else
        {
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2766;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            uint _2913 = 0u;
            uint _2922;
            bool _2923;
            for (;;)
            {
                _2922 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2913 << 2u)) >> 2u)).x;
                _2923 = _2922 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2923)
                {
                    frontier_phi_66_pred = _2907;
                    frontier_phi_66_pred_1 = _2912;
                    frontier_phi_66_pred_2 = _2911;
                    frontier_phi_66_pred_3 = _2910;
                    frontier_phi_66_pred_4 = _2909;
                    frontier_phi_66_pred_5 = _2908;
                }
                else
                {
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    uint _3058;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2912;
                    _3058 = _2922;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    for (;;)
                    {
                        uint _3062 = uint(findLSB(_3058)) + (_2913 << 5u);
                        uint _3059 = (_3058 + 4294967295u) & _3058;
                        uint _3064 = _3062 * 48u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3084 = (_3062 * 48u) + 4u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 3u)).x));
                        uint _3103 = (_3062 * 48u) + 8u;
                        vec3 _3114 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x));
                        float _3118 = _3078.x - _2608;
                        float _3119 = _3078.y - _2609;
                        float _3120 = _3078.z - _2610;
                        float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                        float _3124 = inversesqrt(_3121);
                        float _3125 = _3124 * _3118;
                        float _3126 = _3124 * _3119;
                        float _3127 = _3124 * _3120;
                        float _3128 = dot(vec3(_882, _885, _888), vec3(_3125, _3126, _3127));
                        float _3133 = 1.0 - (_3121 * _3078.w);
                        float _4543 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3135 = sqrt(_3121) * _3097.w;
                        float _3138 = 1.39999997615814208984375 / (_3135 + 1.39999997615814208984375);
                        float _3139 = _3138 * _3138;
                        float _3142 = ((1.0 - _3139) * _3128) + _3139;
                        float _3145 = _3135 * _3135;
                        float _3149 = ((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3134) / ((_3145 * 0.699999988079071044921875) + 1.0);
                        float _3153 = (-0.0) - _2608;
                        float _3154 = (-0.0) - _2609;
                        float _3155 = (-0.0) - _2610;
                        float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                        float _3160 = _3159 * _3153;
                        float _3161 = _3159 * _3154;
                        float _3162 = _3159 * _3155;
                        float _3170 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _942;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3183 = _3162 + _3127;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_882, _885, _888), vec3(_3160, _3161, _3162));
                        float _4559 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3195 = dot(vec3(_882, _885, _888), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4570 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3138 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3128) + _3204;
                        float _4581 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4592 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3202 * _3202) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125))) * _3134;
                        _2982 = (_3149 * _3097.x) + _3055;
                        _2983 = (_3149 * _3097.y) + _3056;
                        _2984 = (_3149 * _3097.z) + _3057;
                        _2979 = (_3230 * _3114.x) + _3052;
                        _2980 = (_3230 * _3114.y) + _3053;
                        _2981 = (_3230 * _3114.z) + _3054;
                        if (_3059 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _2984;
                            _3058 = _3059;
                        }
                    }
                    frontier_phi_66_pred = _2979;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                _2756 = frontier_phi_66_pred;
                _2766 = frontier_phi_66_pred_1;
                _2764 = frontier_phi_66_pred_2;
                _2762 = frontier_phi_66_pred_3;
                _2760 = frontier_phi_66_pred_4;
                _2758 = frontier_phi_66_pred_5;
                uint _2914 = _2913 + 1u;
                if (_2914 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2907 = _2756;
                    _2908 = _2758;
                    _2909 = _2760;
                    _2910 = _2762;
                    _2911 = _2764;
                    _2912 = _2766;
                    _2913 = _2914;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
        }
        uvec4 _2769 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2770 = _2769.z;
        uint _2772 = (_2770 >> 8u) & 15u;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((4294967295u << _2772) & _2654) == 0u)
        {
            _2875 = _2755;
            _2877 = _2757;
            _2879 = _2759;
            _2881 = _2761;
            _2883 = _2763;
            _2885 = _2765;
        }
        else
        {
            float _2900 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
            float _2901 = _2900 * _2608;
            float _2902 = _2900 * _2609;
            float _2903 = _2900 * _2610;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2772 < ((_2770 >> 12u) & 15u))
            {
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _3035 = _2755;
                float _3036 = _2757;
                float _3037 = _2759;
                float _3038 = _2761;
                float _3039 = _2763;
                float _3040 = _2765;
                uint _3041 = _2772;
                uint _3050;
                bool _3051;
                for (;;)
                {
                    _3050 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                    _3051 = _3050 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3051)
                    {
                        frontier_phi_77_pred = _3040;
                        frontier_phi_77_pred_1 = _3039;
                        frontier_phi_77_pred_2 = _3038;
                        frontier_phi_77_pred_3 = _3037;
                        frontier_phi_77_pred_4 = _3036;
                        frontier_phi_77_pred_5 = _3035;
                    }
                    else
                    {
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        float _3262 = _3040;
                        uint _3263 = _3050;
                        uint _3264;
                        vec4 _3289;
                        float _3290;
                        vec4 _3305;
                        vec3 _3317;
                        vec4 _3332;
                        vec4 _3347;
                        float _3393;
                        bool _3394;
                        for (;;)
                        {
                            uint _3274 = ((_3041 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3263));
                            _3264 = (_3263 + 4294967295u) & _3263;
                            uint _3276 = _3274 * 40u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3290 = _3289.w;
                            uint _3292 = (_3274 * 40u) + 4u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3274 * 40u) + 8u;
                            _3317 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x));
                            uint _3319 = (_3274 * 40u) + 16u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3334 = (_3274 * 40u) + 20u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3349 = (_3274 * 40u) + 24u;
                            vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3368 = (_3274 * 40u) + 28u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            _3393 = fma(_2610, _3381.z, fma(_2609, _3381.y, _3381.x * _2608)) + _3381.w;
                            _3394 = !((fma(_2610, _3362.z, fma(_2609, _3362.y, _3362.x * _2608)) + _3362.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3394)
                            {
                                float _3421 = _3289.x - _2608;
                                float _3422 = _3289.y - _2609;
                                float _3423 = _3289.z - _2610;
                                float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                                float _3427 = inversesqrt(_3424);
                                float _3428 = _3427 * _3421;
                                float _3429 = _3427 * _3422;
                                float _3430 = _3427 * _3423;
                                float _3434 = 1.0 - (_3424 / (_3290 * _3290));
                                float _4603 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3439 = sqrt(_3424) * _3305.w;
                                float _3441 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                                float _3442 = _3441 * _3441;
                                float _3445 = ((1.0 - _3442) * dot(vec3(_3428, _3429, _3430), vec3(_882, _885, _888))) + _3442;
                                float _3448 = _3439 * _3439;
                                float _3452 = (fma(_2610, _3332.z, fma(_2609, _3332.y, _3332.x * _2608)) + _3332.w) / _3393;
                                float _3453 = (fma(_2610, _3347.z, fma(_2609, _3347.y, _3347.x * _2608)) + _3347.w) / _3393;
                                float _3457 = 1.0 - dot(vec2(_3452, _3453), vec2(_3452, _3453));
                                float _4619 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3459 = _3458 * (((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3435) / ((_3448 * 0.699999988079071044921875) + 1.0));
                                float _3471 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                                float _3472 = 1.0 - _942;
                                float _3479 = sqrt(1.0 - ((1.0 - (_3472 * _3472)) * (1.0 - (_3471 * _3471))));
                                float _3480 = _3479 * _3479;
                                float _3481 = _3480 * _3480;
                                float _3482 = _3428 - _2901;
                                float _3483 = _3429 - _2902;
                                float _3484 = _3430 - _2903;
                                float _3488 = inversesqrt(dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484)));
                                float _3492 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2901, (-0.0) - _2902, (-0.0) - _2903));
                                float _4630 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3496 = dot(vec3(_882, _885, _888), vec3(_3488 * _3482, _3488 * _3483, _3488 * _3484));
                                float _4641 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3503 = ((_3499 * _3499) * (_3481 + (-1.0))) + 1.0;
                                float _3504 = _3441 * _3480;
                                float _3505 = _3504 * _3504;
                                float _3511 = ((1.0 - _3505) * dot(vec3(_882, _885, _888), vec3(_3428, _3429, _3430))) + _3505;
                                float _4652 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3512 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                                float _3513 = 1.0 - _3480;
                                float _3523 = (0.5 / (((_3512 * ((_3495 * _3513) + _3480)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3480) * _3495))) * _3512;
                                float _4663 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3533 = (_3458 * _3435) * (((_3481 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3503 * _3503) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3459 * _3305.y;
                                frontier_phi_83_pred_1 = _3459 * _3305.x;
                                frontier_phi_83_pred_2 = _3533 * _3317.z;
                                frontier_phi_83_pred_3 = _3533 * _3317.y;
                                frontier_phi_83_pred_4 = _3533 * _3317.x;
                                frontier_phi_83_pred_5 = _3459 * _3305.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_83_pred;
                            _3540 = frontier_phi_83_pred_1;
                            _3539 = frontier_phi_83_pred_2;
                            _3538 = frontier_phi_83_pred_3;
                            _3537 = frontier_phi_83_pred_4;
                            _3542 = frontier_phi_83_pred_5;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3249 = _3542 + _3262;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3246 = _3539 + _3259;
                            if (_3264 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3264;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3249;
                        frontier_phi_77_pred_1 = _3248;
                        frontier_phi_77_pred_2 = _3247;
                        frontier_phi_77_pred_3 = _3246;
                        frontier_phi_77_pred_4 = _3245;
                        frontier_phi_77_pred_5 = _3244;
                    }
                    _2886 = frontier_phi_77_pred;
                    _2884 = frontier_phi_77_pred_1;
                    _2882 = frontier_phi_77_pred_2;
                    _2880 = frontier_phi_77_pred_3;
                    _2878 = frontier_phi_77_pred_4;
                    _2876 = frontier_phi_77_pred_5;
                    uint _3042 = _3041 + 1u;
                    if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3035 = _2876;
                        _3036 = _2878;
                        _3037 = _2880;
                        _3038 = _2882;
                        _3039 = _2884;
                        _3040 = _2886;
                        _3041 = _3042;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2880;
                frontier_phi_58_59_ladder_1 = _2886;
                frontier_phi_58_59_ladder_2 = _2884;
                frontier_phi_58_59_ladder_3 = _2882;
                frontier_phi_58_59_ladder_4 = _2878;
                frontier_phi_58_59_ladder_5 = _2876;
            }
            else
            {
                frontier_phi_58_59_ladder = _2759;
                frontier_phi_58_59_ladder_1 = _2765;
                frontier_phi_58_59_ladder_2 = _2763;
                frontier_phi_58_59_ladder_3 = _2761;
                frontier_phi_58_59_ladder_4 = _2757;
                frontier_phi_58_59_ladder_5 = _2755;
            }
            _2875 = frontier_phi_58_59_ladder_5;
            _2877 = frontier_phi_58_59_ladder_4;
            _2879 = frontier_phi_58_59_ladder;
            _2881 = frontier_phi_58_59_ladder_3;
            _2883 = frontier_phi_58_59_ladder_2;
            _2885 = frontier_phi_58_59_ladder_1;
        }
        float _2890 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2667 = (_2890 * _2881) + _2122;
        _2669 = (_2890 * _2883) + _2124;
        _2671 = (_2890 * _2885) + _2126;
        _2673 = ((_2875 * 0.039999999105930328369140625) * _2890) + _2452;
        _2675 = ((_2877 * 0.039999999105930328369140625) * _2890) + _2454;
        _2677 = ((_2879 * 0.039999999105930328369140625) * _2890) + _2456;
    }
    else
    {
        _2667 = _2122;
        _2669 = _2124;
        _2671 = _2126;
        _2673 = _2452;
        _2675 = _2454;
        _2677 = _2456;
    }
    float _4679 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4690 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4701 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2694 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2667 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _926))) + ((_2673 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2669 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _926))) + ((_2675 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    float _2696 = ((isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * (_2671 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _926))) + ((_2677 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1762)) * cbPerFrame._m0[3u].x);
    uint _2697 = _253 + 6u;
    float _2705 = _863 / cbSceneParam._m0[86u].x;
    float _2706 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2720 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2722 = _2720.x;
    float _2723 = _2720.y;
    float _2724 = _2720.z;
    float _2725 = _2720.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _2780 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _2781 = _2780 / _785;
        float _2792 = _2781 * _836;
        float _2793 = _837 * _2781;
        float _2794 = (-0.0) - _2793;
        float _2795 = _2781 * _838;
        float _2797 = (cbSceneParam._m0[77u].w * _2794) / _2780;
        float _2798 = _2797 + cbSceneParam._m0[79u].w;
        float _2799 = cbSceneParam._m0[79u].w - _2793;
        float _2805 = sqrt(((_2792 * _2792) + (_2793 * _2793)) + (_2795 * _2795));
        float _2808 = (1.0 - (cbSceneParam._m0[77u].w / _2780)) * _2805;
        float _2813 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2992;
        if (abs((_2794 - _2797) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2992 = ((((_2798 > 0.0) ? exp2(_2813 * _2798) : (2.0 - exp2(_2815 * _2798))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2808;
        }
        else
        {
            float _2936 = 1.0 / cbSceneParam._m0[80u].x;
            float _2937 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : max(_2798, _2799));
            float _2938 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : min(_2798, _2799));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            _2992 = ((abs(_2805 / _2794) * cbSceneParam._m0[80u].y) * ((((_2947 - _2948) * 2.0) - ((exp2(_2813 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0)))) - exp2(_2813 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))))) * _2936)) - ((exp2(_2815 * _2947) - exp2(_2815 * _2948)) * _2936))) + (_2808 * cbSceneParam._m0[80u].z);
        }
        vec4 _2994 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2705, _2706, 1.0), 0.0);
        float _3003 = exp2((_2992 * (-1.44269502162933349609375)) * (1.0 - _2994.w));
        float _3004 = log2(_3003);
        float _3020 = log2(_2725);
        _2817 = (exp2(_3020 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].x)) * _2994.x) / cbSceneParam._m0[78u].x)) + _2722;
        _2819 = (exp2(_3020 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].y)) * _2994.y) / cbSceneParam._m0[78u].y)) + _2723;
        _2821 = (exp2(_3020 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3004 * cbSceneParam._m0[78u].z)) * _2994.z) / cbSceneParam._m0[78u].z)) + _2724;
        _2823 = _3003 * _2725;
    }
    else
    {
        _2817 = _2722;
        _2819 = _2723;
        _2821 = _2724;
        _2823 = _2725;
    }
    bool _3030;
    vec4 _2833;
    vec4 _2855;
    float _2857;
    float _2861;
    float _2862;
    float _2863;
    float _2864;
    bool _2874;
    for (;;)
    {
        _2833 = cbMatDynParam._m0[0u];
        float _2835 = roundEven(_2833.y);
        bool _2836 = _2835 == 3.0;
        float _2837 = log2(_2823);
        float _2844 = exp2(_2837 * cbSceneParam._m0[78u].x) * _2694;
        float _2845 = exp2(_2837 * cbSceneParam._m0[78u].y) * _2695;
        float _2846 = exp2(_2837 * cbSceneParam._m0[78u].z) * _2696;
        float _2853 = _852 + (-0.5);
        _2855 = cbMtdParam._m0[1u];
        _2857 = _2855.y * _2853;
        float _2860 = (_2835 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2861 = _2860 * (_2836 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2817)));
        _2862 = _2860 * (_2836 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2819)));
        _2863 = _2860 * (_2836 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2821)));
        _2864 = _2853 * 0.999000012874603271484375;
        _2874 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2874)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2864) < 0.5)
            {
                _3030 = true;
                break;
            }
        }
        uint _2971 = _901 + uint(_2833.w);
        if ((cbInstanceData._m0[_2971].w < 1.0) && ((cbInstanceData._m0[_2971].w + _2864) < 0.5))
        {
            _3030 = true;
            break;
        }
        if ((_2857 + 1.0) < _2855.x)
        {
            _3030 = true;
            break;
        }
        _3030 = false;
        break;
    }
    float _3235;
    if (_3030)
    {
        discard_state = true;
        _3235 = 0.0;
    }
    else
    {
        _3235 = cbInstanceData._m0[_2697].w;
    }
    SV_Target.x = _2861;
    SV_Target.y = _2862;
    SV_Target.z = _2863;
    SV_Target.w = _3235;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2697].w;
    discard_exit();
}


