#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3743 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _370) + _439;
    float _451 = ((((_418.x - _437) * _370) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _370) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3754 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _487 = (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _488 = (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _491 = fma(_459, _222, fma(_488, _229, _487 * _215));
    float _494 = fma(_459, _223, fma(_488, _230, _487 * _216));
    float _497 = fma(_459, _224, fma(_488, _231, _487 * _217));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _537 = ((_532 - _533) * cbMtdParam._m0[24u].z) + _533;
    float _539 = (cbMtdParam._m0[19u].x + dot(vec4(_501 * _491, _501 * _494, _501 * _497, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_537 * cbMtdParam._m0[21u].z);
    float _3765 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _555 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_537 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3776 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _560 = ((_540 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) * _556) + _377;
    float _561 = ((_540 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) * _556) + _378;
    float _562 = ((_540 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) * _556) + _379;
    float _566 = (cbMtdParam._m0[19u].w * (_475.z - _448)) + _448;
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _586 = (_579.x * 2.0) + (-1.0);
    float _587 = (_579.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3787 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _597 = (((_579.z - _566) * _540) * _556) + _566;
    float _612 = (((cbMtdParam._m0[21u].x * _487) + ((_586 - _487) * _540)) * _556) + _487;
    float _613 = (((cbMtdParam._m0[21u].x * _488) + ((_587 - _488) * _540)) * _556) + _488;
    float _614 = (((sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) - _459) * _540) * _556) + _459;
    float _619 = cbMtdParam._m0[22u].x + _475.w;
    float _622 = fma(_614, _222, fma(_613, _229, _612 * _215));
    float _625 = fma(_614, _223, fma(_613, _230, _612 * _216));
    float _628 = fma(_614, _224, fma(_613, _231, _612 * _217));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3798 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _636 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3820 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3831 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3842 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    float _721 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _722 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _743 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _746 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _760 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3853 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _721, cbSceneParam._m0[86u].y * _722));
    float _784 = ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * TEXCOORD_5.w) * _780.x;
    float _785 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _788 = _785 * 2.0;
    float _792 = (_788 * _633) - _713;
    float _793 = (_788 * _634) - _714;
    float _794 = (_788 * _635) - _715;
    float _798 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3886 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = sqrt(_636);
    float _813 = exp2((_800 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_800 * 3.0));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _883 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _887 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _912 = _845 + _633;
        float _913 = _849 + _634;
        float _914 = _853 + _635;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_633, _634, _635), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3934 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_633, _634, _635), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3967 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_633, _634, _635), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3978 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3989 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4000 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1194 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1198 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1202 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1225 = _845 + _633;
        float _1226 = _849 + _634;
        float _1227 = _853 + _635;
        float _1237 = fma(_1227, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1225)) - _1194;
        float _1238 = fma(_1227, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1225)) - _1198;
        float _1239 = fma(_1227, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1225)) - _1202;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1194 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1198 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[35u].z) + ((((((_1202 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1293 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1260.x + (-0.5));
        float _1295 = _1293 * (_1260.y + (-0.5));
        float _1296 = _1293 * (_1260.z + (-0.5));
        float _1303 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1267.x + (-0.5));
        float _1305 = _1303 * (_1267.y + (-0.5));
        float _1306 = _1303 * (_1267.z + (-0.5));
        float _1313 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1274.x + (-0.5));
        float _1315 = _1313 * (_1274.y + (-0.5));
        float _1316 = _1313 * (_1274.z + (-0.5));
        float _1323 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1281.x + (-0.5));
        float _1325 = _1323 * (_1281.y + (-0.5));
        float _1326 = _1323 * (_1281.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_633, _634, _635), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4063 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1357 + 1.0))) + _1362) * _1327;
        float _1372 = _1295 * 0.5;
        float _1373 = _1305 * 0.5;
        float _1374 = _1315 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_633, _634, _635), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4096 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1399 + 1.0))) + _1404) * _1328;
        float _1414 = _1296 * 0.5;
        float _1415 = _1306 * 0.5;
        float _1416 = _1316 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_633, _634, _635), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4129 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1441 + 1.0))) + _1446) * _1329;
        _1463 = _1296;
        _1464 = _1295;
        _1465 = _1294;
        _1466 = _1306;
        _1467 = _1305;
        _1468 = _1304;
        _1469 = _1316;
        _1470 = _1315;
        _1471 = _1314;
        _1472 = _1329;
        _1473 = _1328;
        _1474 = _1327;
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1155;
        _1464 = _1155;
        _1465 = _1155;
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1169)) + _1169;
    float _1510 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1487));
    float _1531 = _792 * 0.5;
    float _1532 = _793 * 0.5;
    float _1533 = _794 * 0.5;
    float _1534 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1537 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1540 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1574;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1547 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1551 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1555 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1562 = dot(vec4(cbModelParam._m0[39u]), vec4(_1531, _1532, _1533, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1585;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1576 = dot(vec4(cbModelParam._m0[40u]), vec4(_1531, _1532, _1533, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1589 = (_1585 * cbModelParam._m0[1u].x) + (_1574 * (1.0 - cbModelParam._m0[1u].x));
    float _1599 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1599 : min(cbModelParam._m0[25u].z, _1599));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_794, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792));
        float _1661 = fma(_794, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792));
        float _1664 = fma(_794, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1861;
        if (_1661 > 0.0)
        {
            _1861 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1861 = frontier_phi_23_19_ladder;
        }
        float _2156;
        if (_1664 > 0.0)
        {
            _2156 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2156 = frontier_phi_35_30_ladder;
        }
        float _2158 = isnan(_1861) ? _1692 : (isnan(_1692) ? _1861 : min(_1692, _1861));
        float _2159 = isnan(_2156) ? _2158 : (isnan(_2158) ? _2156 : min(_2158, _2156));
        float _2163 = (_2159 * _1658) + _1647;
        float _2164 = (_2159 * _1661) + _1651;
        float _2165 = (_2159 * _1664) + _1655;
        float _2166 = _2159 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2166;
        float _2170 = _2166 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 > _2170) || ((_2164 < _2168) || ((_2163 < _2168) || (_2163 > _2170))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2165, cbModelParam._m0[9u].z, fma(_2164, cbModelParam._m0[9u].y, _2163 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2165, cbModelParam._m0[10u].z, fma(_2164, cbModelParam._m0[10u].y, _2163 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2165, cbModelParam._m0[11u].z, fma(_2164, cbModelParam._m0[11u].y, _2163 * cbModelParam._m0[11u].x))), _1600);
            frontier_phi_13_35_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_792, _793, _794), _1600);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1742 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1746 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1750 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1753 = fma(_794, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792));
        float _1756 = fma(_794, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792));
        float _1759 = fma(_794, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792));
        float _1866;
        if (_1753 > 0.0)
        {
            _1866 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1866 = frontier_phi_25_21_ladder;
        }
        float _2183;
        if (_1756 > 0.0)
        {
            _2183 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2183 = frontier_phi_37_32_ladder;
        }
        float _2510;
        if (_1759 > 0.0)
        {
            _2510 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2510 = frontier_phi_47_44_ladder;
        }
        float _2512 = isnan(_2183) ? _1866 : (isnan(_1866) ? _2183 : min(_1866, _2183));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1753) + _1742;
        float _2518 = (_2513 * _1756) + _1746;
        float _2519 = (_2513 * _1759) + _1750;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2519, cbModelParam._m0[17u].z, fma(_2518, cbModelParam._m0[17u].y, _2517 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2519, cbModelParam._m0[18u].z, fma(_2518, cbModelParam._m0[18u].y, _2517 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2519, cbModelParam._m0[19u].z, fma(_2518, cbModelParam._m0[19u].y, _2517 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_47_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1778 = frontier_phi_22_47_ladder_2;
        _1780 = frontier_phi_22_47_ladder_1;
        _1782 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_792, _793, _794), _1689);
        _1778 = _1762.x * cbModelParam._m0[1u].z;
        _1780 = _1762.y * cbModelParam._m0[1u].z;
        _1782 = _1762.z * cbModelParam._m0[1u].z;
    }
    float _1794 = ((((1.0 - _813) * ((_800 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_813 * _800)) * _784;
    float _1795 = _1794 * ((cbModelParam._m0[1u].w * (_1778 - _1680)) + _1680);
    float _1796 = _1794 * ((cbModelParam._m0[1u].w * (_1780 - _1682)) + _1682);
    float _1797 = _1794 * ((cbModelParam._m0[1u].w * (_1782 - _1684)) + _1684);
    float _1800 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1795 * cbSceneParam._m0[91u].x));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1853 = _1840 / _1852;
    float _1854 = _1844 / _1852;
    float _1855 = _1848 / _1852;
    float _2002;
    float _2003;
    float _2004;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1882 = ((uint(_1855 > cbSceneParam._m0[59u].y) + uint(_1855 > cbSceneParam._m0[59u].x)) + uint(_1855 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1883 = _1882 + 43u;
        uint _1891 = _1882 + 44u;
        uint _1899 = _1882 + 45u;
        uint _1907 = _1882 + 46u;
        float _1918 = fma(_1852, cbSceneParam._m0[_1883].w, fma(_1848, cbSceneParam._m0[_1883].z, fma(_1844, cbSceneParam._m0[_1883].y, _1840 * cbSceneParam._m0[_1883].x)));
        float _1922 = fma(_1852, cbSceneParam._m0[_1891].w, fma(_1848, cbSceneParam._m0[_1891].z, fma(_1844, cbSceneParam._m0[_1891].y, _1840 * cbSceneParam._m0[_1891].x)));
        float _1930 = fma(_1852, cbSceneParam._m0[_1907].w, fma(_1848, cbSceneParam._m0[_1907].z, fma(_1844, cbSceneParam._m0[_1907].y, _1840 * cbSceneParam._m0[_1907].x)));
        float _1935 = cbSceneParam._m0[33u].z * _1930;
        float _1937 = cbSceneParam._m0[33u].w * _1930;
        float _1940 = fma(_1852, cbSceneParam._m0[_1899].w, fma(_1848, cbSceneParam._m0[_1899].z, fma(_1844, cbSceneParam._m0[_1899].y, _1840 * cbSceneParam._m0[_1899].x))) / _1930;
        float _1988 = (cbSceneParam._m0[33u].x - sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855))) * cbSceneParam._m0[33u].y;
        float _4255 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1995 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 + _1918) / _1930, (_1937 + _1922) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 + _1918) / _1930, (_1922 - _1935) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 - _1935) / _1930, (_1922 - _1937) / _1930), _1940), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 - _1937) / _1930, (_1935 + _1922) / _1930), _1940), 0.0)).x), vec4(0.25)));
        _2002 = 1.0 - (_1995 * cbSceneParam._m0[34u].x);
        _2003 = 1.0 - (_1995 * cbSceneParam._m0[34u].y);
        _2004 = 1.0 - (_1995 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2002 = 1.0;
        _2003 = 1.0;
        _2004 = 1.0;
    }
    float _2068;
    float _2070;
    float _2072;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2056 = fma(_1852, cbSceneParam._m0[63u].w, fma(_1848, cbSceneParam._m0[63u].z, fma(_1844, cbSceneParam._m0[63u].y, _1840 * cbSceneParam._m0[63u].x)));
        float _2057 = fma(_1852, cbSceneParam._m0[60u].w, fma(_1848, cbSceneParam._m0[60u].z, fma(_1844, cbSceneParam._m0[60u].y, _1840 * cbSceneParam._m0[60u].x))) / _2056;
        float _2058 = fma(_1852, cbSceneParam._m0[61u].w, fma(_1848, cbSceneParam._m0[61u].z, fma(_1844, cbSceneParam._m0[61u].y, _1840 * cbSceneParam._m0[61u].x))) / _2056;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2057 >= cbSceneParam._m0[64u].x) && (_2058 >= cbSceneParam._m0[64u].y)) && (_2057 <= cbSceneParam._m0[64u].z)) && (_2058 <= cbSceneParam._m0[64u].w))
        {
            float _2196 = fma(_1852, cbSceneParam._m0[62u].w, fma(_1848, cbSceneParam._m0[62u].z, fma(_1844, cbSceneParam._m0[62u].y, _1840 * cbSceneParam._m0[62u].x))) / _2056;
            float _2200 = isnan(cbSceneParam._m0[41u].w) ? _2196 : (isnan(_2196) ? cbSceneParam._m0[41u].w : max(_2196, cbSceneParam._m0[41u].w));
            float _2243 = (cbSceneParam._m0[33u].x - sqrt(((_1854 * _1854) + (_1853 * _1853)) + (_1855 * _1855))) * cbSceneParam._m0[33u].y;
            float _4271 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
            float _2250 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2057, cbSceneParam._m0[33u].w + _2058), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2057, _2058 - cbSceneParam._m0[33u].z), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2057 - cbSceneParam._m0[33u].z, _2058 - cbSceneParam._m0[33u].w), _2200), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2057 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2058), _2200), 0.0)).x), vec4(0.25)));
            float _2254 = 1.0 - (_2250 * cbSceneParam._m0[34u].x);
            float _2255 = 1.0 - (_2250 * cbSceneParam._m0[34u].y);
            float _2256 = 1.0 - (_2250 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2256) ? _2004 : (isnan(_2004) ? _2256 : min(_2004, _2256));
            frontier_phi_34_33_ladder_1 = isnan(_2255) ? _2003 : (isnan(_2003) ? _2255 : min(_2003, _2255));
            frontier_phi_34_33_ladder_2 = isnan(_2254) ? _2002 : (isnan(_2002) ? _2254 : min(_2002, _2254));
        }
        else
        {
            frontier_phi_34_33_ladder = _2004;
            frontier_phi_34_33_ladder_1 = _2003;
            frontier_phi_34_33_ladder_2 = _2002;
        }
        _2068 = frontier_phi_34_33_ladder_2;
        _2070 = frontier_phi_34_33_ladder_1;
        _2072 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2068 = _2002;
        _2070 = _2003;
        _2072 = _2004;
    }
    uvec4 _2077 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2079 = _2077.x * 14u;
    uint _2080 = _2079 + 13u;
    float _2087 = _784 + (-1.0);
    float _2092 = (cbLight._m0[_2080].x * _2087) + 1.0;
    float _2093 = (cbLight._m0[_2080].y * _2087) + 1.0;
    float _2094 = (cbLight._m0[_2080].z * _2087) + 1.0;
    float _2095 = (cbLight._m0[_2080].w * _2087) + 1.0;
    uint _2096 = _2079 + 5u;
    float _2102 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2106 = _2079 + 4u;
    float _2115 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
    uint _2119 = _2079 | 1u;
    float _2130 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_633, _634, _635));
    float _2133 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_633, _634, _635));
    float _4307 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _4318 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2138 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2140 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2147 = ((cbLight._m0[_2096].x * _2102) * _2140) + (((cbLight._m0[_2106].x * _2068) * _2115) * _2138);
    float _2148 = ((_2102 * cbLight._m0[_2096].y) * _2140) + (((cbLight._m0[_2106].y * _2070) * _2115) * _2138);
    float _2149 = ((_2102 * cbLight._m0[_2096].z) * _2140) + (((cbLight._m0[_2106].z * _2072) * _2115) * _2138);
    uvec4 _2153 = floatBitsToUint(cbLight._m0[_2079 + 12u]);
    bool _2155 = _2153.x == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2155)
    {
        _2257 = _2147;
        _2259 = _2148;
        _2261 = _2149;
    }
    else
    {
        uint _2265 = _2079 + 6u;
        float _2281 = (dot(vec3(cbLight._m0[_2079 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4329 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2284 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2257 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2147;
        _2259 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2148;
        _2261 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2149;
    }
    bool _2264 = _2153.y == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2264)
    {
        _2319 = _2257;
        _2321 = _2259;
        _2323 = _2261;
    }
    else
    {
        uint _2481 = _2079 + 7u;
        float _2497 = (dot(vec3(cbLight._m0[_2079 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4345 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2500 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2319 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2257;
        _2321 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2259;
        _2323 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2261;
    }
    uint _2326 = _2079 + 8u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _636) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2079].x + _713;
    float _2342 = cbLight._m0[_2079].y + _714;
    float _2343 = cbLight._m0[_2079].z + _715;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2079].xyz));
    float _4361 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2355 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2356 = dot(vec3(_633, _634, _635), vec3(_2348, _2349, _2350));
    float _4383 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2348, _2349, _2350));
    float _4394 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2340 * _2340;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2379 = (exp2(log2(1.0 - (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2380 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2355 * ((_2354 * _2380) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2380) + _2340) * _2354))) * _2354;
    float _4405 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    uint _2407 = _2079 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _636) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2119].x + _713;
    float _2421 = cbLight._m0[_2119].y + _714;
    float _2422 = cbLight._m0[_2119].z + _715;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2119].xyz));
    float _4416 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2434 = dot(vec3(_633, _634, _635), vec3(_2427, _2428, _2429));
    float _4427 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2427, _2428, _2429));
    float _4438 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2456 = 1.0 - _2419;
    float _2466 = (0.5 / (((_2355 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2456) + _2419) * _2433))) * _2433;
    float _4449 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2478 = (((_2455 * cbLight._m0[_2407].x) * _2468) * _2102) + ((((cbLight._m0[_2326].x * _2068) * _2379) * _2393) * _2115);
    float _2479 = (((_2455 * cbLight._m0[_2407].y) * _2468) * _2102) + ((((cbLight._m0[_2326].y * _2070) * _2379) * _2393) * _2115);
    float _2480 = (((_2455 * cbLight._m0[_2407].z) * _2468) * _2102) + ((((cbLight._m0[_2326].z * _2072) * _2379) * _2393) * _2115);
    float _2536;
    float _2538;
    float _2540;
    if (_2155)
    {
        _2536 = _2478;
        _2538 = _2479;
        _2540 = _2480;
    }
    else
    {
        uint _2542 = _2079 + 2u;
        uint _2546 = _2079 + 10u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _636) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _713;
        float _2563 = cbLight._m0[_2542].y + _714;
        float _2564 = cbLight._m0[_2542].z + _715;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2542].xyz));
        float _4460 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2576 = dot(vec3(_633, _634, _635), vec3(_2569, _2570, _2571));
        float _4471 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4482 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2597 = (exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2598 = 1.0 - _2561;
        float _2608 = (0.5 / (((_2355 * ((_2575 * _2598) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2598) + _2561) * _2575))) * _2575;
        float _4493 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2610 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2611 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
        _2536 = (((_2597 * cbLight._m0[_2546].x) * _2610) * _2611) + _2478;
        _2538 = (((_2597 * cbLight._m0[_2546].y) * _2610) * _2611) + _2479;
        _2540 = (((_2597 * cbLight._m0[_2546].z) * _2610) * _2611) + _2480;
    }
    float _2642;
    float _2644;
    float _2646;
    if (_2264)
    {
        _2642 = _2536;
        _2644 = _2538;
        _2646 = _2540;
    }
    else
    {
        uint _2653 = _2079 + 3u;
        uint _2657 = _2079 + 11u;
        float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2653].w)) * _636) * 0.949999988079071044921875);
        float _2672 = _2671 * _2671;
        float _2673 = cbLight._m0[_2653].x + _713;
        float _2674 = cbLight._m0[_2653].y + _714;
        float _2675 = cbLight._m0[_2653].z + _715;
        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
        float _2680 = _2679 * _2673;
        float _2681 = _2679 * _2674;
        float _2682 = _2679 * _2675;
        float _2683 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2653].xyz));
        float _4509 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2687 = dot(vec3(_633, _634, _635), vec3(_2680, _2681, _2682));
        float _4520 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2691 = dot(vec3(cbLight._m0[_2653].xyz), vec3(_2680, _2681, _2682));
        float _4531 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2695 = _2672 * _2672;
        float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
        float _2708 = (exp2(log2(1.0 - (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2709 = 1.0 - _2672;
        float _2719 = (0.5 / (((_2355 * ((_2686 * _2709) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2709) + _2672) * _2686))) * _2686;
        float _4542 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2642 = (((_2708 * cbLight._m0[_2657].x) * _2721) * _2722) + _2536;
        _2644 = (((_2708 * cbLight._m0[_2657].y) * _2721) * _2722) + _2538;
        _2646 = (((_2708 * cbLight._m0[_2657].z) * _2721) * _2722) + _2540;
    }
    float _2788;
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_2077.y == 0u)
    {
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.x;
        uint _2755 = uint((float(_2743.y) * floor(float(uint(cbSceneParam._m0[85u].y * _722) / _2744))) + floor(float(uint(cbSceneParam._m0[85u].x * _721) / _2744)));
        float _2765 = (log2(_1855 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2766 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        uint _2769 = uint(isnan(14.0) ? _2766 : (isnan(_2766) ? 14.0 : min(_2766, 14.0)));
        uvec4 _2774 = texelFetch(g_lightClusterGridBuffer, int(((_2769 << 2u) + (_2755 << 6u)) >> 2u));
        uint _2775 = _2774.x;
        uint _2776 = _2743.z;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((((1u << ((_2776 >> 4u) & 15u)) + 4294967295u) & _2775) == 0u) || ((_2776 & 240u) == 0u))
        {
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
        }
        else
        {
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            uint _3006 = 0u;
            uint _3015;
            bool _3016;
            for (;;)
            {
                _3015 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3006 << 2u)) >> 2u)).x;
                _3016 = _3015 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3016)
                {
                    frontier_phi_66_pred = _3005;
                    frontier_phi_66_pred_1 = _3004;
                    frontier_phi_66_pred_2 = _3003;
                    frontier_phi_66_pred_3 = _3002;
                    frontier_phi_66_pred_4 = _3001;
                    frontier_phi_66_pred_5 = _3000;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _3000;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3015;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_3006 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _1853;
                        float _3191 = _3150.y - _1854;
                        float _3192 = _3150.z - _1855;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_740, _743, _746), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4568 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _1853;
                        float _3226 = (-0.0) - _1854;
                        float _3227 = (-0.0) - _1855;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3241 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3242 = 1.0 - _800;
                        float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                        float _3250 = _3249 * _3249;
                        float _3251 = _3250 * _3250;
                        float _3252 = _3232 + _3197;
                        float _3253 = _3233 + _3198;
                        float _3254 = _3234 + _3199;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3262 = dot(vec3(_740, _743, _746), vec3(_3232, _3233, _3234));
                        float _4584 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3265 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3266 = dot(vec3(_740, _743, _746), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                        float _4595 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                        float _3274 = _3210 * _3250;
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3200) + _3275;
                        float _4606 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3280 = 1.0 - _3250;
                        float _3290 = (0.5 / (((_3279 * ((_3265 * _3280) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3250) * _3265))) * _3279;
                        float _4617 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3301 = (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) / ((_3273 * _3273) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3059 = (_3221 * _3169.x) + _3127;
                        _3060 = (_3221 * _3169.y) + _3128;
                        _3061 = (_3221 * _3169.z) + _3129;
                        _3056 = (_3301 * _3186.x) + _3124;
                        _3057 = (_3301 * _3186.y) + _3125;
                        _3058 = (_3301 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3056;
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_66_pred = _3061;
                    frontier_phi_66_pred_1 = _3060;
                    frontier_phi_66_pred_2 = _3059;
                    frontier_phi_66_pred_3 = _3058;
                    frontier_phi_66_pred_4 = _3057;
                    frontier_phi_66_pred_5 = _3056;
                }
                _2866 = frontier_phi_66_pred;
                _2864 = frontier_phi_66_pred_1;
                _2862 = frontier_phi_66_pred_2;
                _2860 = frontier_phi_66_pred_3;
                _2858 = frontier_phi_66_pred_4;
                _2856 = frontier_phi_66_pred_5;
                uint _3007 = _3006 + 1u;
                if (_3007 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3000 = _2856;
                    _3001 = _2858;
                    _3002 = _2860;
                    _3003 = _2862;
                    _3004 = _2864;
                    _3005 = _2866;
                    _3006 = _3007;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
        }
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.z;
        uint _2872 = (_2870 >> 8u) & 15u;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        if (((4294967295u << _2872) & _2775) == 0u)
        {
            _2968 = _2855;
            _2970 = _2857;
            _2972 = _2859;
            _2974 = _2861;
            _2976 = _2863;
            _2978 = _2865;
        }
        else
        {
            float _2993 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
            float _2994 = _2993 * _1853;
            float _2995 = _2993 * _1854;
            float _2996 = _2993 * _1855;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2872 < ((_2870 >> 12u) & 15u))
            {
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _3107 = _2855;
                float _3108 = _2857;
                float _3109 = _2859;
                float _3110 = _2861;
                float _3111 = _2863;
                float _3112 = _2865;
                uint _3113 = _2872;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2769 << 5u) + (_2755 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3123)
                    {
                        frontier_phi_72_pred = _3112;
                        frontier_phi_72_pred_1 = _3111;
                        frontier_phi_72_pred_2 = _3110;
                        frontier_phi_72_pred_3 = _3109;
                        frontier_phi_72_pred_4 = _3108;
                        frontier_phi_72_pred_5 = _3107;
                    }
                    else
                    {
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3319 = _3107;
                        float _3320 = _3108;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        uint _3325 = _3122;
                        uint _3326;
                        vec4 _3351;
                        float _3352;
                        vec4 _3367;
                        vec3 _3379;
                        vec4 _3394;
                        vec4 _3410;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3336 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3325));
                            _3326 = (_3325 + 4294967295u) & _3325;
                            uint _3338 = _3336 * 40u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3352 = _3351.w;
                            uint _3354 = (_3336 * 40u) + 4u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3336 * 40u) + 8u;
                            _3379 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x));
                            uint _3381 = (_3336 * 40u) + 16u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3397 = (_3336 * 40u) + 20u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3336 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3336 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_1855, _3444.z, fma(_1854, _3444.y, _3444.x * _1853)) + _3444.w;
                            _3457 = !((fma(_1855, _3425.z, fma(_1854, _3425.y, _3425.x * _1853)) + _3425.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3351.x - _1853;
                                float _3485 = _3351.y - _1854;
                                float _3486 = _3351.z - _1855;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3352 * _3352));
                                float _4628 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3502 = sqrt(_3487) * _3367.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_740, _743, _746))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_1855, _3394.z, fma(_1854, _3394.y, _3394.x * _1853)) + _3394.w) / _3456;
                                float _3516 = (fma(_1855, _3410.z, fma(_1854, _3410.y, _3410.x * _1853)) + _3410.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4644 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _800;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2994;
                                float _3546 = _3492 - _2995;
                                float _3547 = _3493 - _2996;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2994, (-0.0) - _2995, (-0.0) - _2996));
                                float _4655 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3559 = dot(vec3(_740, _743, _746), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4666 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_740, _743, _746), vec3(_3491, _3492, _3493))) + _3568;
                                float _4677 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4688 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3522 * _3367.y;
                                frontier_phi_78_pred_1 = _3522 * _3367.x;
                                frontier_phi_78_pred_2 = _3596 * _3379.z;
                                frontier_phi_78_pred_3 = _3596 * _3379.y;
                                frontier_phi_78_pred_4 = _3596 * _3379.x;
                                frontier_phi_78_pred_5 = _3522 * _3367.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_78_pred;
                            _3603 = frontier_phi_78_pred_1;
                            _3602 = frontier_phi_78_pred_2;
                            _3601 = frontier_phi_78_pred_3;
                            _3600 = frontier_phi_78_pred_4;
                            _3605 = frontier_phi_78_pred_5;
                            _3309 = _3603 + _3322;
                            _3310 = _3604 + _3323;
                            _3311 = _3605 + _3324;
                            _3306 = _3600 + _3319;
                            _3307 = _3601 + _3320;
                            _3308 = _3602 + _3321;
                            if (_3326 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3326;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3311;
                        frontier_phi_72_pred_1 = _3310;
                        frontier_phi_72_pred_2 = _3309;
                        frontier_phi_72_pred_3 = _3308;
                        frontier_phi_72_pred_4 = _3307;
                        frontier_phi_72_pred_5 = _3306;
                    }
                    _2979 = frontier_phi_72_pred;
                    _2977 = frontier_phi_72_pred_1;
                    _2975 = frontier_phi_72_pred_2;
                    _2973 = frontier_phi_72_pred_3;
                    _2971 = frontier_phi_72_pred_4;
                    _2969 = frontier_phi_72_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2969;
                        _3108 = _2971;
                        _3109 = _2973;
                        _3110 = _2975;
                        _3111 = _2977;
                        _3112 = _2979;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2979;
                frontier_phi_60_61_ladder_1 = _2977;
                frontier_phi_60_61_ladder_2 = _2973;
                frontier_phi_60_61_ladder_3 = _2971;
                frontier_phi_60_61_ladder_4 = _2969;
                frontier_phi_60_61_ladder_5 = _2975;
            }
            else
            {
                frontier_phi_60_61_ladder = _2865;
                frontier_phi_60_61_ladder_1 = _2863;
                frontier_phi_60_61_ladder_2 = _2859;
                frontier_phi_60_61_ladder_3 = _2857;
                frontier_phi_60_61_ladder_4 = _2855;
                frontier_phi_60_61_ladder_5 = _2861;
            }
            _2968 = frontier_phi_60_61_ladder_4;
            _2970 = frontier_phi_60_61_ladder_3;
            _2972 = frontier_phi_60_61_ladder_2;
            _2974 = frontier_phi_60_61_ladder_5;
            _2976 = frontier_phi_60_61_ladder_1;
            _2978 = frontier_phi_60_61_ladder;
        }
        float _2983 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
        _2788 = (_2983 * _2974) + _2319;
        _2790 = (_2983 * _2976) + _2321;
        _2792 = (_2983 * _2978) + _2323;
        _2794 = ((_2968 * 0.039999999105930328369140625) * _2983) + _2642;
        _2796 = ((_2970 * 0.039999999105930328369140625) * _2983) + _2644;
        _2798 = ((_2972 * 0.039999999105930328369140625) * _2983) + _2646;
    }
    else
    {
        _2788 = _2319;
        _2790 = _2321;
        _2792 = _2323;
        _2794 = _2642;
        _2796 = _2644;
        _2798 = _2646;
    }
    float _4704 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4715 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4726 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    uint _2818 = _234 + 6u;
    float _2826 = _721 / cbSceneParam._m0[86u].x;
    float _2827 = _722 / cbSceneParam._m0[86u].y;
    vec4 _2841 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2843 = _2841.x;
    float _2844 = _2841.y;
    float _2845 = _2841.z;
    float _2846 = _2841.w;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2880 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2881 = _2880 / _654;
        float _2892 = _2881 * _706;
        float _2893 = _707 * _2881;
        float _2894 = (-0.0) - _2893;
        float _2896 = _2881 * _708;
        float _2898 = (cbSceneParam._m0[77u].w * _2894) / _2880;
        float _2899 = _2898 + cbSceneParam._m0[79u].w;
        float _2900 = cbSceneParam._m0[79u].w - _2893;
        float _2906 = sqrt(((_2892 * _2892) + (_2893 * _2893)) + (_2896 * _2896));
        float _2909 = (1.0 - (cbSceneParam._m0[77u].w / _2880)) * _2906;
        float _2914 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2916 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2894 - _2898) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2899 > 0.0) ? exp2(_2914 * _2899) : (2.0 - exp2(_2916 * _2899))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2909;
        }
        else
        {
            float _3029 = 1.0 / cbSceneParam._m0[80u].x;
            float _3030 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : max(_2899, _2900));
            float _3031 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : min(_2899, _2900));
            float _3040 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : min(_3030, 0.0));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            _3069 = ((abs(_2906 / _2894) * cbSceneParam._m0[80u].y) * ((((_3040 - _3041) * 2.0) - ((exp2(_2914 * (isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0)))) - exp2(_2914 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))))) * _3029)) - ((exp2(_2916 * _3040) - exp2(_2916 * _3041)) * _3029))) + (_2909 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2826, _2827, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2846);
        _2918 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2843;
        _2920 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2844;
        _2922 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2845;
        _2924 = _3080 * _2846;
    }
    else
    {
        _2918 = _2843;
        _2920 = _2844;
        _2922 = _2845;
        _2924 = _2846;
    }
    float _2936 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2937 = _2936 == 3.0;
    float _2938 = log2(_2924);
    float _2945 = exp2(_2938 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2788 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _784))) + ((_2794 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2946 = exp2(_2938 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2790 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _784))) + ((_2796 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2947 = exp2(_2938 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2792 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _784))) + ((_2798 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2956 = (_2936 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2956 * (_2937 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.y = _2956 * (_2937 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.z = _2956 * (_2937 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.w = cbInstanceData._m0[_2818].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2818].w;
}


