#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1077;
float _3440;
float _3441;
float _3442;
float _3443;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3452 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3463 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3474 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) + _327;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3485 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _437 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_420 - _421) * cbMtdParam._m0[24u].z) + _421) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3496 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _438 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _445 = (_438 * (cbMtdParam._m0[17u].x - _334)) + _334;
    float _446 = (_438 * (cbMtdParam._m0[17u].y - _335)) + _335;
    float _447 = (_438 * (cbMtdParam._m0[17u].z - _336)) + _336;
    float _452 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _472 = (_465.x * 2.0) + (-1.0);
    float _473 = (_465.y * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3507 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _482 = (_438 * (_465.z - _452)) + _452;
    float _494 = (((_472 - _400) + (cbMtdParam._m0[21u].x * _400)) * _438) + _400;
    float _495 = (((_473 - _401) + (cbMtdParam._m0[21u].x * _401)) * _438) + _401;
    float _496 = (_438 * (sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) - _395)) + _395;
    float _498 = cbMtdParam._m0[22u].x + _380.w;
    float _501 = fma(_496, _220 * NORMAL.x, fma(_495, _227 * TANGENT.x, (_213 * _205) * _494));
    float _504 = fma(_496, _220 * NORMAL.y, fma(_495, _227 * TANGENT.y, (_213 * _206) * _494));
    float _507 = fma(_496, _220 * NORMAL.z, fma(_495, _227 * TANGENT.z, (_213 * _207) * _494));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _3518 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _515 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3540 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3551 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3562 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _533 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _584 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _574);
    float _585 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _574);
    float _586 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _574);
    float _590 = inversesqrt(dot(vec3(_584, _585, _586), vec3(_584, _585, _586)));
    float _591 = _584 * _590;
    float _592 = _585 * _590;
    float _593 = _586 * _590;
    vec4 _598 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _600 = _598.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _757 = sqrt(((_584 * _584) + (_585 * _585)) + (_586 * _586));
        float _763 = (cbMatDynParam._m0[5u].x * _757) + cbMatDynParam._m0[5u].y;
        float _3573 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _768 = (cbMatDynParam._m0[5u].z * _757) + cbMatDynParam._m0[5u].w;
        float _3584 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) - _764)) + _764) < ((_600 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _612 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _613 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _633 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _636 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _639 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _652 = _254 + 9u;
    uint _653 = _652 + uint(cbMatDynParam._m0[0u].w);
    float _659 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_653].x;
    float _660 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_653].y;
    float _661 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_653].z;
    float _3595 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    vec4 _673 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _612, cbSceneParam._m0[86u].y * _613));
    float _677 = ((isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * TEXCOORD_5.w) * _673.x;
    float _678 = dot(vec3(_512, _513, _514), vec3(_591, _592, _593));
    float _681 = _678 * 2.0;
    float _685 = (_681 * _512) - _591;
    float _686 = (_681 * _513) - _592;
    float _687 = (_681 * _514) - _593;
    float _691 = abs(dot(vec3(_591, _592, _593), vec3(_512, _513, _514)));
    float _3628 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _693 = sqrt(_515);
    float _706 = exp2((_693 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_693 * 3.0));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1076;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _801 = fma(_746, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738));
        float _805 = fma(_746, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738));
        float _809 = fma(_746, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738));
        float _834 = _738 + _512;
        float _835 = _742 + _513;
        float _836 = _746 + _514;
        float _846 = fma(_836, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834)) - _801;
        float _847 = fma(_836, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834)) - _805;
        float _848 = fma(_836, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834)) - _809;
        float _852 = inversesqrt(dot(vec3(_846, _847, _848), vec3(_846, _847, _848)));
        float _865 = ((_852 * _846) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_801 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_852 * _847) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_805 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_852 * _848) / cbModelParam._m0[34u].z) + ((((((_809 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_865, _866, _867), 0.0);
        float _904 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_870.x + (-0.5));
        float _906 = _904 * (_870.y + (-0.5));
        float _907 = _904 * (_870.z + (-0.5));
        float _914 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_877.x + (-0.5));
        float _916 = _914 * (_877.y + (-0.5));
        float _917 = _914 * (_877.z + (-0.5));
        float _924 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_884.x + (-0.5));
        float _926 = _924 * (_884.y + (-0.5));
        float _927 = _924 * (_884.z + (-0.5));
        float _934 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_891.x + (-0.5));
        float _936 = _934 * (_891.y + (-0.5));
        float _937 = _934 * (_891.z + (-0.5));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = _905 * 0.5;
        float _942 = _915 * 0.5;
        float _943 = _925 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _958 = (dot(vec3(_512, _513, _514), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _968 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3676 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_970 + 1.0))) + _975) * _938;
        float _985 = _906 * 0.5;
        float _986 = _916 * 0.5;
        float _987 = _926 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_512, _513, _514), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3709 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1012 + 1.0))) + _1017) * _939;
        float _1027 = _907 * 0.5;
        float _1028 = _917 * 0.5;
        float _1029 = _927 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_512, _513, _514), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3742 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1054 + 1.0))) + _1059) * _940;
        _1076 = _907;
        _1078 = _906;
        _1079 = _905;
        _1080 = _917;
        _1081 = _916;
        _1082 = _915;
        _1083 = _927;
        _1084 = _926;
        _1085 = _925;
        _1086 = _940;
        _1087 = _939;
        _1088 = _938;
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
    }
    else
    {
        _1076 = _1077;
        _1078 = _1077;
        _1079 = _1077;
        _1080 = _1077;
        _1081 = _1077;
        _1082 = _1077;
        _1083 = _1077;
        _1084 = _1077;
        _1085 = _1077;
        _1086 = _1077;
        _1087 = _1077;
        _1088 = _1077;
        _1089 = 0.0;
        _1090 = 0.0;
        _1091 = 0.0;
    }
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = fma(_746, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _738));
        float _1123 = fma(_746, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _738));
        float _1127 = fma(_746, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _738));
        float _1150 = _738 + _512;
        float _1151 = _742 + _513;
        float _1152 = _746 + _514;
        float _1162 = fma(_1152, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150)) - _1119;
        float _1163 = fma(_1152, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150)) - _1123;
        float _1164 = fma(_1152, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150)) - _1127;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1119 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1123 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[35u].z) + ((((((_1127 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1218 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1185.x + (-0.5));
        float _1220 = _1218 * (_1185.y + (-0.5));
        float _1221 = _1218 * (_1185.z + (-0.5));
        float _1228 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1192.x + (-0.5));
        float _1230 = _1228 * (_1192.y + (-0.5));
        float _1231 = _1228 * (_1192.z + (-0.5));
        float _1238 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1199.x + (-0.5));
        float _1240 = _1238 * (_1199.y + (-0.5));
        float _1241 = _1238 * (_1199.z + (-0.5));
        float _1248 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1206.x + (-0.5));
        float _1250 = _1248 * (_1206.y + (-0.5));
        float _1251 = _1248 * (_1206.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_512, _513, _514), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3805 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1282 + 1.0))) + _1287) * _1252;
        float _1297 = _1220 * 0.5;
        float _1298 = _1230 * 0.5;
        float _1299 = _1240 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_512, _513, _514), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3838 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1324 + 1.0))) + _1329) * _1253;
        float _1339 = _1221 * 0.5;
        float _1340 = _1231 * 0.5;
        float _1341 = _1241 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_512, _513, _514), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3871 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1366 + 1.0))) + _1371) * _1254;
        _1388 = _1221;
        _1389 = _1220;
        _1390 = _1219;
        _1391 = _1231;
        _1392 = _1230;
        _1393 = _1229;
        _1394 = _1241;
        _1395 = _1240;
        _1396 = _1239;
        _1397 = _1254;
        _1398 = _1253;
        _1399 = _1252;
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1077;
        _1389 = _1077;
        _1390 = _1077;
        _1391 = _1077;
        _1392 = _1077;
        _1393 = _1077;
        _1394 = _1077;
        _1395 = _1077;
        _1396 = _1077;
        _1397 = _1077;
        _1398 = _1077;
        _1399 = _1077;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1089)) + _1089;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1090)) + _1090;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1091)) + _1091;
    float _1435 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1412));
    float _1456 = _685 * 0.5;
    float _1457 = _686 * 0.5;
    float _1458 = _687 * 0.5;
    float _1459 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1462 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1465 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1499;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1472 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1076, _1080, _1083, _1086));
        float _1476 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1480 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1487 = dot(vec4(cbModelParam._m0[39u]), vec4(_1456, _1457, _1458, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1510;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1501 = dot(vec4(cbModelParam._m0[40u]), vec4(_1456, _1457, _1458, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1514 = (_1510 * cbModelParam._m0[1u].x) + (_1499 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _515);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1524 : min(cbModelParam._m0[25u].z, _1524));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_746, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_746, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_746, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_687, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685));
        float _1587 = fma(_687, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685));
        float _1590 = fma(_687, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1618 = frontier_phi_17_15_ladder;
        }
        float _1822;
        if (_1587 > 0.0)
        {
            _1822 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1822 = frontier_phi_26_22_ladder;
        }
        float _2065;
        if (_1590 > 0.0)
        {
            _2065 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2065 = frontier_phi_38_33_ladder;
        }
        float _2067 = isnan(_1822) ? _1618 : (isnan(_1618) ? _1822 : min(_1618, _1822));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1584) + _1573;
        float _2073 = (_2068 * _1587) + _1577;
        float _2074 = (_2068 * _1590) + _1581;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1525);
            frontier_phi_16_38_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_16_38_ladder_2;
        _1608 = frontier_phi_16_38_ladder_1;
        _1610 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_685, _686, _687), _1525);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _515);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1670 = fma(_746, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738)) + cbModelParam._m0[21u].w;
        float _1674 = fma(_746, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738)) + cbModelParam._m0[22u].w;
        float _1678 = fma(_746, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738)) + cbModelParam._m0[23u].w;
        float _1681 = fma(_687, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685));
        float _1684 = fma(_687, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685));
        float _1687 = fma(_687, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685));
        float _1827;
        if (_1681 > 0.0)
        {
            _1827 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1827 = frontier_phi_28_24_ladder;
        }
        float _2092;
        if (_1684 > 0.0)
        {
            _2092 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2092 = frontier_phi_40_35_ladder;
        }
        float _2297;
        if (_1687 > 0.0)
        {
            _2297 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2297 = frontier_phi_49_46_ladder;
        }
        float _2299 = isnan(_2092) ? _1827 : (isnan(_1827) ? _2092 : min(_1827, _2092));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1681) + _1670;
        float _2305 = (_2300 * _1684) + _1674;
        float _2306 = (_2300 * _1687) + _1678;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_25_49_ladder = _2505.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2505.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2505.x * cbModelParam._m0[1u].z;
        }
        _1706 = frontier_phi_25_49_ladder_2;
        _1708 = frontier_phi_25_49_ladder_1;
        _1710 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_685, _686, _687), _1615);
        _1706 = _1690.x * cbModelParam._m0[1u].z;
        _1708 = _1690.y * cbModelParam._m0[1u].z;
        _1710 = _1690.z * cbModelParam._m0[1u].z;
    }
    float _1722 = ((((1.0 - _706) * ((_693 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_706 * _693)) * _677;
    float _1723 = _1722 * ((cbModelParam._m0[1u].w * (_1706 - _1606)) + _1606);
    float _1724 = _1722 * ((cbModelParam._m0[1u].w * (_1708 - _1608)) + _1608);
    float _1725 = _1722 * ((cbModelParam._m0[1u].w * (_1710 - _1610)) + _1610);
    float _1728 = fma(_1725, cbSceneParam._m0[89u].z, fma(_1724, cbSceneParam._m0[89u].y, _1723 * cbSceneParam._m0[89u].x));
    float _1731 = fma(_1725, cbSceneParam._m0[90u].z, fma(_1724, cbSceneParam._m0[90u].y, _1723 * cbSceneParam._m0[90u].x));
    float _1734 = fma(_1725, cbSceneParam._m0[91u].z, fma(_1724, cbSceneParam._m0[91u].y, _1723 * cbSceneParam._m0[91u].x));
    uvec4 _1744 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1746 = _1744.x * 14u;
    uint _1747 = _1746 + 13u;
    float _1754 = _677 + (-1.0);
    float _1759 = (cbLight._m0[_1747].x * _1754) + 1.0;
    float _1760 = (cbLight._m0[_1747].y * _1754) + 1.0;
    float _1761 = (cbLight._m0[_1747].z * _1754) + 1.0;
    float _1762 = (cbLight._m0[_1747].w * _1754) + 1.0;
    uint _1763 = _1746 + 5u;
    float _1769 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1773 = _1746 + 4u;
    float _1780 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1784 = _1746 | 1u;
    float _1795 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_512, _513, _514));
    float _1798 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_512, _513, _514));
    float _4007 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _4018 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1803 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _1805 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1812 = ((cbLight._m0[_1763].x * _1769) * _1805) + ((cbLight._m0[_1773].x * _1780) * _1803);
    float _1813 = ((_1769 * cbLight._m0[_1763].y) * _1805) + ((_1780 * cbLight._m0[_1773].y) * _1803);
    float _1814 = ((_1769 * cbLight._m0[_1763].z) * _1805) + ((_1780 * cbLight._m0[_1773].z) * _1803);
    uvec4 _1819 = floatBitsToUint(cbLight._m0[_1746 + 12u]);
    bool _1821 = _1819.x == 0u;
    float _1832;
    float _1834;
    float _1836;
    if (_1821)
    {
        _1832 = _1812;
        _1834 = _1813;
        _1836 = _1814;
    }
    else
    {
        uint _1840 = _1746 + 6u;
        float _1856 = (dot(vec3(cbLight._m0[_1746 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _1857 = _1856 * _1856;
        float _4029 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1859 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1832 = (((cbLight._m0[_1840].x * 0.3183098733425140380859375) * _1858) * _1859) + _1812;
        _1834 = (((cbLight._m0[_1840].y * 0.3183098733425140380859375) * _1858) * _1859) + _1813;
        _1836 = (((cbLight._m0[_1840].z * 0.3183098733425140380859375) * _1858) * _1859) + _1814;
    }
    bool _1839 = _1819.y == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1839)
    {
        _1877 = _1832;
        _1879 = _1834;
        _1881 = _1836;
    }
    else
    {
        uint _2036 = _1746 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1746 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _4045 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2055 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _1877 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1832;
        _1879 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1834;
        _1881 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1836;
    }
    uint _1884 = _1746 + 8u;
    float _1897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1746].w)) * _515) * 0.949999988079071044921875);
    float _1898 = _1897 * _1897;
    float _1899 = cbLight._m0[_1746].x + _591;
    float _1900 = cbLight._m0[_1746].y + _592;
    float _1901 = cbLight._m0[_1746].z + _593;
    float _1905 = inversesqrt(dot(vec3(_1899, _1900, _1901), vec3(_1899, _1900, _1901)));
    float _1906 = _1905 * _1899;
    float _1907 = _1905 * _1900;
    float _1908 = _1905 * _1901;
    float _1909 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1746].xyz));
    float _4061 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1912 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _1913 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1914 = dot(vec3(_512, _513, _514), vec3(_1906, _1907, _1908));
    float _4083 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1746].xyz), vec3(_1906, _1907, _1908));
    float _4094 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1898 * _1898;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1937 = (exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1938 = 1.0 - _1898;
    float _1949 = (0.5 / (((_1913 * ((_1912 * _1938) + _1898)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _1938) + _1898) * _1912))) * _1912;
    float _4105 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    uint _1962 = _1746 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1784].w)) * _515) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1784].x + _591;
    float _1976 = cbLight._m0[_1784].y + _592;
    float _1977 = cbLight._m0[_1784].z + _593;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1784].xyz));
    float _4116 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1989 = dot(vec3(_512, _513, _514), vec3(_1982, _1983, _1984));
    float _4127 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1784].xyz), vec3(_1982, _1983, _1984));
    float _4138 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1913 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2011) + _1974) * _1988))) * _1988;
    float _4149 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1962].x) * _2023) * _1769) + (((_1937 * cbLight._m0[_1884].x) * _1951) * _1780);
    float _2034 = (((_2010 * cbLight._m0[_1962].y) * _2023) * _1769) + (((_1937 * cbLight._m0[_1884].y) * _1951) * _1780);
    float _2035 = (((_2010 * cbLight._m0[_1962].z) * _2023) * _1769) + (((_1937 * cbLight._m0[_1884].z) * _1951) * _1780);
    float _2097;
    float _2099;
    float _2101;
    if (_1821)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1746 + 2u;
        uint _2107 = _1746 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _515) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _591;
        float _2124 = cbLight._m0[_2103].y + _592;
        float _2125 = cbLight._m0[_2103].z + _593;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2103].xyz));
        float _4160 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2137 = dot(vec3(_512, _513, _514), vec3(_2130, _2131, _2132));
        float _4171 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4182 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2159 = 1.0 - _2122;
        float _2169 = (0.5 / (((_1913 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2159) + _2122) * _2136))) * _2136;
        float _4193 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2097 = (((_2158 * cbLight._m0[_2107].x) * _2171) * _2172) + _2033;
        _2099 = (((_2158 * cbLight._m0[_2107].y) * _2171) * _2172) + _2034;
        _2101 = (((_2158 * cbLight._m0[_2107].z) * _2171) * _2172) + _2035;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1839)
    {
        _2207 = _2097;
        _2209 = _2099;
        _2211 = _2101;
    }
    else
    {
        uint _2218 = _1746 + 3u;
        uint _2222 = _1746 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _515) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _591;
        float _2239 = cbLight._m0[_2218].y + _592;
        float _2240 = cbLight._m0[_2218].z + _593;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2218].xyz));
        float _4209 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2252 = dot(vec3(_512, _513, _514), vec3(_2245, _2246, _2247));
        float _4220 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4231 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2274 = 1.0 - _2237;
        float _2284 = (0.5 / (((_1913 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1913 * _2274) + _2237) * _2251))) * _2251;
        float _4242 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _2207 = (((_2273 * cbLight._m0[_2222].x) * _2286) * _2287) + _2097;
        _2209 = (((_2273 * cbLight._m0[_2222].y) * _2286) * _2287) + _2099;
        _2211 = (((_2273 * cbLight._m0[_2222].z) * _2286) * _2287) + _2101;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1744.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _613) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _612) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
        }
        else
        {
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            uint _2669 = 0u;
            uint _2678;
            bool _2679;
            for (;;)
            {
                _2678 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2669 << 2u)) >> 2u)).x;
                _2679 = _2678 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2679)
                {
                    frontier_phi_66_pred = _2663;
                    frontier_phi_66_pred_1 = _2668;
                    frontier_phi_66_pred_2 = _2667;
                    frontier_phi_66_pred_3 = _2666;
                    frontier_phi_66_pred_4 = _2665;
                    frontier_phi_66_pred_5 = _2664;
                }
                else
                {
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    uint _2814;
                    _2808 = _2663;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2678;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    for (;;)
                    {
                        uint _2818 = uint(findLSB(_2814)) + (_2669 << 5u);
                        uint _2815 = (_2814 + 4294967295u) & _2814;
                        uint _2820 = _2818 * 48u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2840 = (_2818 * 48u) + 4u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2859 = (_2818 * 48u) + 8u;
                        vec3 _2870 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x));
                        float _2874 = _2834.x - _2363;
                        float _2875 = _2834.y - _2364;
                        float _2876 = _2834.z - _2365;
                        float _2877 = dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876));
                        float _2880 = inversesqrt(_2877);
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2884 = dot(vec3(_633, _636, _639), vec3(_2881, _2882, _2883));
                        float _2889 = 1.0 - (_2877 * _2834.w);
                        float _4268 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2891 = sqrt(_2877) * _2853.w;
                        float _2894 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                        float _2895 = _2894 * _2894;
                        float _2898 = ((1.0 - _2895) * _2884) + _2895;
                        float _2901 = _2891 * _2891;
                        float _2905 = ((isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))) * _2890) / ((_2901 * 0.699999988079071044921875) + 1.0);
                        float _2909 = (-0.0) - _2363;
                        float _2910 = (-0.0) - _2364;
                        float _2911 = (-0.0) - _2365;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2926 = exp2(log2(1.0 / ((_2901 * 3.5) + 5.0)) * 0.25);
                        float _2927 = 1.0 - _693;
                        float _2934 = sqrt(1.0 - ((1.0 - (_2927 * _2927)) * (1.0 - (_2926 * _2926))));
                        float _2935 = _2934 * _2934;
                        float _2936 = _2935 * _2935;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2939 = _2918 + _2883;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2947 = dot(vec3(_633, _636, _639), vec3(_2916, _2917, _2918));
                        float _4284 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2951 = dot(vec3(_633, _636, _639), vec3(_2943 * _2937, _2943 * _2938, _2943 * _2939));
                        float _4295 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2958 = ((_2954 * _2954) * (_2936 + (-1.0))) + 1.0;
                        float _2959 = _2894 * _2935;
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2884) + _2960;
                        float _4306 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _2965 = 1.0 - _2935;
                        float _2975 = (0.5 / (((_2964 * ((_2950 * _2965) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2935) * _2950))) * _2964;
                        float _4317 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2986 = (((_2936 * 3.1415927410125732421875) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) / ((_2958 * _2958) * ((_2901 * 2.1991131305694580078125) + 3.141590118408203125))) * _2890;
                        _2738 = (_2905 * _2853.x) + _2811;
                        _2739 = (_2905 * _2853.y) + _2812;
                        _2740 = (_2905 * _2853.z) + _2813;
                        _2735 = (_2986 * _2870.x) + _2808;
                        _2736 = (_2986 * _2870.y) + _2809;
                        _2737 = (_2986 * _2870.z) + _2810;
                        if (_2815 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2815;
                        }
                    }
                    frontier_phi_66_pred = _2735;
                    frontier_phi_66_pred_1 = _2740;
                    frontier_phi_66_pred_2 = _2739;
                    frontier_phi_66_pred_3 = _2738;
                    frontier_phi_66_pred_4 = _2737;
                    frontier_phi_66_pred_5 = _2736;
                }
                _2511 = frontier_phi_66_pred;
                _2521 = frontier_phi_66_pred_1;
                _2519 = frontier_phi_66_pred_2;
                _2517 = frontier_phi_66_pred_3;
                _2515 = frontier_phi_66_pred_4;
                _2513 = frontier_phi_66_pred_5;
                uint _2670 = _2669 + 1u;
                if (_2670 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2663 = _2511;
                    _2664 = _2513;
                    _2665 = _2515;
                    _2666 = _2517;
                    _2667 = _2519;
                    _2668 = _2521;
                    _2669 = _2670;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
        }
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.z;
        uint _2527 = (_2525 >> 8u) & 15u;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((4294967295u << _2527) & _2409) == 0u)
        {
            _2631 = _2510;
            _2633 = _2512;
            _2635 = _2514;
            _2637 = _2516;
            _2639 = _2518;
            _2641 = _2520;
        }
        else
        {
            float _2656 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2657 = _2656 * _2363;
            float _2658 = _2656 * _2364;
            float _2659 = _2656 * _2365;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2527 < ((_2525 >> 12u) & 15u))
            {
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2791 = _2510;
                float _2792 = _2512;
                float _2793 = _2514;
                float _2794 = _2516;
                float _2795 = _2518;
                float _2796 = _2520;
                uint _2797 = _2527;
                uint _2806;
                bool _2807;
                for (;;)
                {
                    _2806 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                    _2807 = _2806 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2807)
                    {
                        frontier_phi_77_pred = _2796;
                        frontier_phi_77_pred_1 = _2795;
                        frontier_phi_77_pred_2 = _2794;
                        frontier_phi_77_pred_3 = _2793;
                        frontier_phi_77_pred_4 = _2792;
                        frontier_phi_77_pred_5 = _2791;
                    }
                    else
                    {
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3013 = _2791;
                        float _3014 = _2792;
                        float _3015 = _2793;
                        float _3016 = _2794;
                        float _3017 = _2795;
                        float _3018 = _2796;
                        uint _3019 = _2806;
                        uint _3020;
                        vec4 _3045;
                        float _3046;
                        vec4 _3061;
                        vec3 _3073;
                        vec4 _3088;
                        vec4 _3103;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3030 = ((_2797 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3019));
                            _3020 = (_3019 + 4294967295u) & _3019;
                            uint _3032 = _3030 * 40u;
                            _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3046 = _3045.w;
                            uint _3048 = (_3030 * 40u) + 4u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            uint _3063 = (_3030 * 40u) + 8u;
                            _3073 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x));
                            uint _3075 = (_3030 * 40u) + 16u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            uint _3090 = (_3030 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3030 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3030 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_2365, _3137.z, fma(_2364, _3137.y, _3137.x * _2363)) + _3137.w;
                            _3150 = !((fma(_2365, _3118.z, fma(_2364, _3118.y, _3118.x * _2363)) + _3118.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3045.x - _2363;
                                float _3178 = _3045.y - _2364;
                                float _3179 = _3045.z - _2365;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3046 * _3046));
                                float _4328 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3195 = sqrt(_3180) * _3061.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_633, _636, _639))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_2365, _3088.z, fma(_2364, _3088.y, _3088.x * _2363)) + _3088.w) / _3149;
                                float _3209 = (fma(_2365, _3103.z, fma(_2364, _3103.y, _3103.x * _2363)) + _3103.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4344 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _693;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2657;
                                float _3239 = _3185 - _2658;
                                float _3240 = _3186 - _2659;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_633, _636, _639), vec3((-0.0) - _2657, (-0.0) - _2658, (-0.0) - _2659));
                                float _4355 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3252 = dot(vec3(_633, _636, _639), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4366 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_633, _636, _639), vec3(_3184, _3185, _3186))) + _3261;
                                float _4377 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4388 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3215 * _3061.y;
                                frontier_phi_83_pred_1 = _3215 * _3061.x;
                                frontier_phi_83_pred_2 = _3289 * _3073.z;
                                frontier_phi_83_pred_3 = _3289 * _3073.y;
                                frontier_phi_83_pred_4 = _3289 * _3073.x;
                                frontier_phi_83_pred_5 = _3215 * _3061.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3297 = frontier_phi_83_pred;
                            _3296 = frontier_phi_83_pred_1;
                            _3295 = frontier_phi_83_pred_2;
                            _3294 = frontier_phi_83_pred_3;
                            _3293 = frontier_phi_83_pred_4;
                            _3298 = frontier_phi_83_pred_5;
                            _3003 = _3296 + _3016;
                            _3004 = _3297 + _3017;
                            _3005 = _3298 + _3018;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            _3002 = _3295 + _3015;
                            if (_3020 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3020;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3005;
                        frontier_phi_77_pred_1 = _3004;
                        frontier_phi_77_pred_2 = _3003;
                        frontier_phi_77_pred_3 = _3002;
                        frontier_phi_77_pred_4 = _3001;
                        frontier_phi_77_pred_5 = _3000;
                    }
                    _2642 = frontier_phi_77_pred;
                    _2640 = frontier_phi_77_pred_1;
                    _2638 = frontier_phi_77_pred_2;
                    _2636 = frontier_phi_77_pred_3;
                    _2634 = frontier_phi_77_pred_4;
                    _2632 = frontier_phi_77_pred_5;
                    uint _2798 = _2797 + 1u;
                    if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2791 = _2632;
                        _2792 = _2634;
                        _2793 = _2636;
                        _2794 = _2638;
                        _2795 = _2640;
                        _2796 = _2642;
                        _2797 = _2798;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2636;
                frontier_phi_58_59_ladder_1 = _2642;
                frontier_phi_58_59_ladder_2 = _2640;
                frontier_phi_58_59_ladder_3 = _2638;
                frontier_phi_58_59_ladder_4 = _2634;
                frontier_phi_58_59_ladder_5 = _2632;
            }
            else
            {
                frontier_phi_58_59_ladder = _2514;
                frontier_phi_58_59_ladder_1 = _2520;
                frontier_phi_58_59_ladder_2 = _2518;
                frontier_phi_58_59_ladder_3 = _2516;
                frontier_phi_58_59_ladder_4 = _2512;
                frontier_phi_58_59_ladder_5 = _2510;
            }
            _2631 = frontier_phi_58_59_ladder_5;
            _2633 = frontier_phi_58_59_ladder_4;
            _2635 = frontier_phi_58_59_ladder;
            _2637 = frontier_phi_58_59_ladder_3;
            _2639 = frontier_phi_58_59_ladder_2;
            _2641 = frontier_phi_58_59_ladder_1;
        }
        float _2646 = isnan(1.0) ? _677 : (isnan(_677) ? 1.0 : min(_677, 1.0));
        _2422 = (_2646 * _2637) + _1877;
        _2424 = (_2646 * _2639) + _1879;
        _2426 = (_2646 * _2641) + _1881;
        _2428 = ((_2631 * 0.039999999105930328369140625) * _2646) + _2207;
        _2430 = ((_2633 * 0.039999999105930328369140625) * _2646) + _2209;
        _2432 = ((_2635 * 0.039999999105930328369140625) * _2646) + _2211;
    }
    else
    {
        _2422 = _1877;
        _2424 = _1879;
        _2426 = _1881;
        _2428 = _2207;
        _2430 = _2209;
        _2432 = _2211;
    }
    float _4404 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4415 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4426 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _2449 = ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2422 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _677))) + ((_2428 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    float _2450 = ((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2424 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _677))) + ((_2430 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    float _2451 = ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2426 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _677))) + ((_2432 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1514)) * cbPerFrame._m0[3u].x);
    uint _2452 = _254 + 6u;
    float _2460 = _612 / cbSceneParam._m0[86u].x;
    float _2461 = _613 / cbSceneParam._m0[86u].y;
    vec4 _2475 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, (log2((isnan(cbSceneParam._m0[77u].w) ? _533 : (isnan(_533) ? cbSceneParam._m0[77u].w : min(_533, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2477 = _2475.x;
    float _2478 = _2475.y;
    float _2479 = _2475.z;
    float _2480 = _2475.w;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_533 > cbSceneParam._m0[78u].w)
    {
        float _2535 = isnan(_533) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _533 : min(cbSceneParam._m0[80u].w, _533));
        float _2536 = _2535 / _533;
        float _2547 = _2536 * _584;
        float _2548 = _585 * _2536;
        float _2549 = (-0.0) - _2548;
        float _2551 = _2536 * _586;
        float _2553 = (cbSceneParam._m0[77u].w * _2549) / _2535;
        float _2554 = _2553 + cbSceneParam._m0[79u].w;
        float _2555 = cbSceneParam._m0[79u].w - _2548;
        float _2561 = sqrt(((_2547 * _2547) + (_2548 * _2548)) + (_2551 * _2551));
        float _2564 = (1.0 - (cbSceneParam._m0[77u].w / _2535)) * _2561;
        float _2569 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2571 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2748;
        if (abs((_2549 - _2553) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2748 = ((((_2554 > 0.0) ? exp2(_2569 * _2554) : (2.0 - exp2(_2571 * _2554))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2564;
        }
        else
        {
            float _2692 = 1.0 / cbSceneParam._m0[80u].x;
            float _2693 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : max(_2554, _2555));
            float _2694 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : min(_2554, _2555));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            _2748 = ((abs(_2561 / _2549) * cbSceneParam._m0[80u].y) * ((((_2703 - _2704) * 2.0) - ((exp2(_2569 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0)))) - exp2(_2569 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))))) * _2692)) - ((exp2(_2571 * _2703) - exp2(_2571 * _2704)) * _2692))) + (_2564 * cbSceneParam._m0[80u].z);
        }
        vec4 _2750 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, 1.0), 0.0);
        float _2759 = exp2((_2748 * (-1.44269502162933349609375)) * (1.0 - _2750.w));
        float _2760 = log2(_2759);
        float _2776 = log2(_2480);
        _2573 = (exp2(_2776 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].x)) * _2750.x) / cbSceneParam._m0[78u].x)) + _2477;
        _2575 = (exp2(_2776 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].y)) * _2750.y) / cbSceneParam._m0[78u].y)) + _2478;
        _2577 = (exp2(_2776 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].z)) * _2750.z) / cbSceneParam._m0[78u].z)) + _2479;
        _2579 = _2759 * _2480;
    }
    else
    {
        _2573 = _2477;
        _2575 = _2478;
        _2577 = _2479;
        _2579 = _2480;
    }
    bool _2786;
    vec4 _2589;
    vec4 _2611;
    float _2613;
    float _2617;
    float _2618;
    float _2619;
    float _2620;
    bool _2630;
    for (;;)
    {
        _2589 = cbMatDynParam._m0[0u];
        float _2591 = roundEven(_2589.y);
        bool _2592 = _2591 == 3.0;
        float _2593 = log2(_2579);
        float _2600 = exp2(_2593 * cbSceneParam._m0[78u].x) * _2449;
        float _2601 = exp2(_2593 * cbSceneParam._m0[78u].y) * _2450;
        float _2602 = exp2(_2593 * cbSceneParam._m0[78u].z) * _2451;
        float _2609 = _600 + (-0.5);
        _2611 = cbMtdParam._m0[1u];
        _2613 = _2611.y * _2609;
        float _2616 = (_2591 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2617 = _2616 * (_2592 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2573)));
        _2618 = _2616 * (_2592 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2575)));
        _2619 = _2616 * (_2592 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2577)));
        _2620 = _2609 * 0.999000012874603271484375;
        _2630 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2630)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2620) < 0.5)
            {
                _2786 = true;
                break;
            }
        }
        uint _2727 = _652 + uint(_2589.w);
        if ((cbInstanceData._m0[_2727].w < 1.0) && ((cbInstanceData._m0[_2727].w + _2620) < 0.5))
        {
            _2786 = true;
            break;
        }
        if ((_2613 + 1.0) < _2611.x)
        {
            _2786 = true;
            break;
        }
        _2786 = false;
        break;
    }
    float _2991;
    if (_2786)
    {
        discard_state = true;
        _2991 = 0.0;
    }
    else
    {
        _2991 = cbInstanceData._m0[_2452].w;
    }
    SV_Target.x = _2617;
    SV_Target.y = _2618;
    SV_Target.z = _2619;
    SV_Target.w = _2991;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2452].w;
    discard_exit();
}


