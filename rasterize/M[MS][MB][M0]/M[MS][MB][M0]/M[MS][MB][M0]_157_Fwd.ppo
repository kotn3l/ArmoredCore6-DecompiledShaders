#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3551 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3562 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3573 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _393 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _393) * cbMtdParam._m0[24u].x) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3584 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _418 = (_411 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _419 = (_411 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _420 = (_411 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) + _430;
    vec4 _458 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _281) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _282) + cbTextureTilingScale._m0[14u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _524 = _522.x;
    float _525 = _522.y;
    float _526 = _522.z;
    float _535 = ((_505.z - _526) * _411) + _526;
    float _538 = ((((_505.x - _524) * _411) + _524) * 2.0) + (-1.0);
    float _539 = ((((_505.y - _525) * _411) + _525) * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3595 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _577 = (_538 + ((((_478.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_565.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _578 = (_539 + ((((_478.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_565.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _581 = fma(_545, _229, fma(_578, _236, _577 * _222));
    float _584 = fma(_545, _230, fma(_578, _237, _577 * _223));
    float _587 = fma(_545, _231, fma(_578, _238, _577 * _224));
    float _591 = inversesqrt(dot(vec3(_581, _584, _587), vec3(_581, _584, _587)));
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _627 = ((_622 - _623) * cbMtdParam._m0[24u].z) + _623;
    float _629 = (cbMtdParam._m0[19u].x + dot(vec4(_591 * _581, _591 * _584, _591 * _587, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_627 * cbMtdParam._m0[21u].z);
    float _3606 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _645 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_627 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3617 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _646 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _650 = ((_630 * ((_458.x * cbMtdParam._m0[18u].x) - _437)) * _646) + _437;
    float _651 = ((_630 * ((_458.y * cbMtdParam._m0[18u].y) - _438)) * _646) + _438;
    float _652 = ((_630 * ((_458.z * cbMtdParam._m0[18u].z) - _439)) * _646) + _439;
    float _657 = (((_478.z - _535) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _535;
    float _661 = ((_565.z - _657) * cbMtdParam._m0[19u].w) + _657;
    vec4 _674 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _681 = (_674.x * 2.0) + (-1.0);
    float _682 = (_674.y * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _3628 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _692 = (((_674.z - _661) * _630) * _646) + _661;
    float _707 = (((cbMtdParam._m0[21u].x * _577) + ((_681 - _577) * _630)) * _646) + _577;
    float _708 = (((cbMtdParam._m0[21u].x * _578) + ((_682 - _578) * _630)) * _646) + _578;
    float _709 = (((sqrt(1.0 - (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) - _545) * _630) * _646) + _545;
    float _711 = cbMtdParam._m0[22u].x + _565.w;
    float _714 = fma(_709, _229, fma(_708, _236, _707 * _222));
    float _717 = fma(_709, _230, fma(_708, _237, _707 * _223));
    float _720 = fma(_709, _231, fma(_708, _238, _707 * _224));
    float _724 = inversesqrt(dot(vec3(_714, _717, _720), vec3(_714, _717, _720)));
    float _725 = _724 * _714;
    float _726 = _724 * _717;
    float _727 = _724 * _720;
    float _3639 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _728 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3661 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3672 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3683 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _746 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _798 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _788);
    float _799 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _788);
    float _800 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _788);
    float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
    float _805 = _798 * _804;
    float _806 = _799 * _804;
    float _807 = _800 * _804;
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _832 = fma(_727, cbSceneParam._m0[5u].z, fma(_726, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _725));
    float _835 = fma(_727, cbSceneParam._m0[6u].z, fma(_726, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _725));
    float _838 = fma(_727, cbSceneParam._m0[7u].z, fma(_726, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _725));
    uint _852 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _858 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_852].x;
    float _859 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_852].y;
    float _860 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_852].z;
    float _3694 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    vec4 _872 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _876 = ((isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * TEXCOORD_5.w) * _872.x;
    float _877 = dot(vec3(_725, _726, _727), vec3(_805, _806, _807));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _725) - _805;
    float _885 = (_880 * _726) - _806;
    float _886 = (_880 * _727) - _807;
    float _890 = abs(dot(vec3(_805, _806, _807), vec3(_725, _726, _727)));
    float _3727 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_728);
    float _905 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _937 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_945, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937));
        float _975 = fma(_945, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937));
        float _979 = fma(_945, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937));
        float _1004 = _937 + _725;
        float _1005 = _941 + _726;
        float _1006 = _945 + _727;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_725, _726, _727), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3775 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_725, _726, _727), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3808 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_725, _726, _727), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3841 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_945, cbModelParam._m0[30u].z, fma(_941, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _937));
        float _1290 = fma(_945, cbModelParam._m0[31u].z, fma(_941, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _937));
        float _1294 = fma(_945, cbModelParam._m0[32u].z, fma(_941, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _937));
        float _1317 = _937 + _725;
        float _1318 = _941 + _726;
        float _1319 = _945 + _727;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_725, _726, _727), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3904 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_725, _726, _727), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3937 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_725, _726, _727), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _3970 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1247;
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1259)) + _1259;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1260)) + _1260;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1261)) + _1261;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _884 * 0.5;
    float _1624 = _885 * 0.5;
    float _1625 = _886 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _728);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_945, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_945, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_945, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1753 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1756 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1784 = frontier_phi_14_12_ladder;
        }
        float _1984;
        if (_1753 > 0.0)
        {
            _1984 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1984 = frontier_phi_23_19_ladder;
        }
        float _2227;
        if (_1756 > 0.0)
        {
            _2227 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2227 = frontier_phi_35_30_ladder;
        }
        float _2229 = isnan(_1984) ? _1784 : (isnan(_1784) ? _1984 : min(_1784, _1984));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1750) + _1739;
        float _2235 = (_2230 * _1753) + _1743;
        float _2236 = (_2230 * _1756) + _1747;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2237;
        float _2241 = _2237 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 > _2241) || ((_2235 < _2239) || ((_2234 < _2239) || (_2234 > _2241))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2236, cbModelParam._m0[9u].z, fma(_2235, cbModelParam._m0[9u].y, _2234 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2236, cbModelParam._m0[10u].z, fma(_2235, cbModelParam._m0[10u].y, _2234 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2236, cbModelParam._m0[11u].z, fma(_2235, cbModelParam._m0[11u].y, _2234 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_13_35_ladder = _2360.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2360.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2360.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_13_35_ladder_2;
        _1774 = frontier_phi_13_35_ladder_1;
        _1776 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1692);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _728);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1834 = fma(_945, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937)) + cbModelParam._m0[21u].w;
        float _1838 = fma(_945, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937)) + cbModelParam._m0[22u].w;
        float _1842 = fma(_945, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937)) + cbModelParam._m0[23u].w;
        float _1845 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1848 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1851 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _1989;
        if (_1845 > 0.0)
        {
            _1989 = abs((1.0 - _1834) / _1845);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1834 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1989 = frontier_phi_25_21_ladder;
        }
        float _2254;
        if (_1848 > 0.0)
        {
            _2254 = abs((1.0 - _1838) / _1848);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1838 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2254 = frontier_phi_37_32_ladder;
        }
        float _2459;
        if (_1851 > 0.0)
        {
            _2459 = abs((1.0 - _1842) / _1851);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1842 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2459 = frontier_phi_46_43_ladder;
        }
        float _2461 = isnan(_2254) ? _1989 : (isnan(_1989) ? _2254 : min(_1989, _2254));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1845) + _1834;
        float _2467 = (_2462 * _1848) + _1838;
        float _2468 = (_2462 * _1851) + _1842;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2468, cbModelParam._m0[17u].z, fma(_2467, cbModelParam._m0[17u].y, _2466 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2468, cbModelParam._m0[18u].z, fma(_2467, cbModelParam._m0[18u].y, _2466 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2468, cbModelParam._m0[19u].z, fma(_2467, cbModelParam._m0[19u].y, _2466 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_22_46_ladder = _2667.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2667.x * cbModelParam._m0[1u].z;
        }
        _1870 = frontier_phi_22_46_ladder_2;
        _1872 = frontier_phi_22_46_ladder_1;
        _1874 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1781);
        _1870 = _1854.x * cbModelParam._m0[1u].z;
        _1872 = _1854.y * cbModelParam._m0[1u].z;
        _1874 = _1854.z * cbModelParam._m0[1u].z;
    }
    float _1886 = ((((1.0 - _905) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_905 * _892)) * _876;
    float _1887 = _1886 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1888 = _1886 * ((cbModelParam._m0[1u].w * (_1872 - _1774)) + _1774);
    float _1889 = _1886 * ((cbModelParam._m0[1u].w * (_1874 - _1776)) + _1776);
    float _1892 = fma(_1889, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1887 * cbSceneParam._m0[89u].x));
    float _1895 = fma(_1889, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1887 * cbSceneParam._m0[90u].x));
    float _1898 = fma(_1889, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1887 * cbSceneParam._m0[91u].x));
    uvec4 _1908 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1910 = _1908.x * 14u;
    uint _1911 = _1910 + 13u;
    float _1918 = _876 + (-1.0);
    float _1923 = (cbLight._m0[_1911].x * _1918) + 1.0;
    float _1924 = (cbLight._m0[_1911].y * _1918) + 1.0;
    float _1925 = (cbLight._m0[_1911].z * _1918) + 1.0;
    float _1926 = (cbLight._m0[_1911].w * _1918) + 1.0;
    uint _1927 = _1910 + 5u;
    float _1933 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1937 = _1910 + 4u;
    float _1943 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1947 = _1910 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_725, _726, _727));
    float _1961 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_725, _726, _727));
    float _4106 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _4117 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1966 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.3183098733425140380859375;
    float _1968 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.3183098733425140380859375;
    float _1975 = ((cbLight._m0[_1927].x * _1933) * _1968) + ((cbLight._m0[_1937].x * _1943) * _1966);
    float _1976 = ((_1933 * cbLight._m0[_1927].y) * _1968) + ((_1943 * cbLight._m0[_1937].y) * _1966);
    float _1977 = ((_1933 * cbLight._m0[_1927].z) * _1968) + ((_1943 * cbLight._m0[_1937].z) * _1966);
    uvec4 _1981 = floatBitsToUint(cbLight._m0[_1910 + 12u]);
    bool _1983 = _1981.x == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1983)
    {
        _1994 = _1975;
        _1996 = _1976;
        _1998 = _1977;
    }
    else
    {
        uint _2002 = _1910 + 6u;
        float _2018 = (dot(vec3(cbLight._m0[_1910 + 2u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4128 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2021 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _1994 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1975;
        _1996 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1976;
        _1998 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1977;
    }
    bool _2001 = _1981.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_2001)
    {
        _2039 = _1994;
        _2041 = _1996;
        _2043 = _1998;
    }
    else
    {
        uint _2198 = _1910 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1910 + 3u].xyz), vec3(_725, _726, _727)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4144 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2217 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2039 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1994;
        _2041 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1996;
        _2043 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1998;
    }
    uint _2046 = _1910 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _728) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1910].x + _805;
    float _2062 = cbLight._m0[_1910].y + _806;
    float _2063 = cbLight._m0[_1910].z + _807;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1910].xyz));
    float _4160 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2075 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2076 = dot(vec3(_725, _726, _727), vec3(_2068, _2069, _2070));
    float _4182 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2068, _2069, _2070));
    float _4193 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = 1.0 - _2060;
    float _2111 = (0.5 / (((_2075 * ((_2074 * _2100) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2100) + _2060) * _2074))) * _2074;
    float _4204 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2124 = _1910 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _728) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1947].x + _805;
    float _2138 = cbLight._m0[_1947].y + _806;
    float _2139 = cbLight._m0[_1947].z + _807;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_1947].xyz));
    float _4215 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2151 = dot(vec3(_725, _726, _727), vec3(_2144, _2145, _2146));
    float _4226 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2144, _2145, _2146));
    float _4237 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2136;
    float _2183 = (0.5 / (((_2075 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2173) + _2136) * _2150))) * _2150;
    float _4248 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2195 = (((_2172 * cbLight._m0[_2124].x) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].x) * _2113) * _1943);
    float _2196 = (((_2172 * cbLight._m0[_2124].y) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].y) * _2113) * _1943);
    float _2197 = (((_2172 * cbLight._m0[_2124].z) * _2185) * _1933) + (((_2099 * cbLight._m0[_2046].z) * _2113) * _1943);
    float _2259;
    float _2261;
    float _2263;
    if (_1983)
    {
        _2259 = _2195;
        _2261 = _2196;
        _2263 = _2197;
    }
    else
    {
        uint _2265 = _1910 + 2u;
        uint _2269 = _1910 + 10u;
        float _2283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2265].w)) * _728) * 0.949999988079071044921875);
        float _2284 = _2283 * _2283;
        float _2285 = cbLight._m0[_2265].x + _805;
        float _2286 = cbLight._m0[_2265].y + _806;
        float _2287 = cbLight._m0[_2265].z + _807;
        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
        float _2292 = _2291 * _2285;
        float _2293 = _2291 * _2286;
        float _2294 = _2291 * _2287;
        float _2295 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2265].xyz));
        float _4259 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2299 = dot(vec3(_725, _726, _727), vec3(_2292, _2293, _2294));
        float _4270 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2302 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2303 = dot(vec3(cbLight._m0[_2265].xyz), vec3(_2292, _2293, _2294));
        float _4281 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2307 = _2284 * _2284;
        float _2311 = ((_2302 * _2302) * (_2307 + (-1.0))) + 1.0;
        float _2320 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2321 = 1.0 - _2284;
        float _2331 = (0.5 / (((_2075 * ((_2298 * _2321) + _2284)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2321) + _2284) * _2298))) * _2298;
        float _4292 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2333 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2307 / ((_2311 * _2311) * 3.141590118408203125));
        float _2334 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2259 = (((_2320 * cbLight._m0[_2269].x) * _2333) * _2334) + _2195;
        _2261 = (((_2320 * cbLight._m0[_2269].y) * _2333) * _2334) + _2196;
        _2263 = (((_2320 * cbLight._m0[_2269].z) * _2333) * _2334) + _2197;
    }
    float _2369;
    float _2371;
    float _2373;
    if (_2001)
    {
        _2369 = _2259;
        _2371 = _2261;
        _2373 = _2263;
    }
    else
    {
        uint _2380 = _1910 + 3u;
        uint _2384 = _1910 + 11u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _728) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _805;
        float _2401 = cbLight._m0[_2380].y + _806;
        float _2402 = cbLight._m0[_2380].z + _807;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_725, _726, _727), vec3(cbLight._m0[_2380].xyz));
        float _4308 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2414 = dot(vec3(_725, _726, _727), vec3(_2407, _2408, _2409));
        float _4319 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4330 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2435 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2436 = 1.0 - _2399;
        float _2446 = (0.5 / (((_2075 * ((_2413 * _2436) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2436) + _2399) * _2413))) * _2413;
        float _4341 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2448 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2449 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2369 = (((_2435 * cbLight._m0[_2384].x) * _2448) * _2449) + _2259;
        _2371 = (((_2435 * cbLight._m0[_2384].y) * _2448) * _2449) + _2261;
        _2373 = (((_2435 * cbLight._m0[_2384].z) * _2448) * _2449) + _2263;
    }
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    float _2594;
    if (_1908.y == 0u)
    {
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2524;
        float _2526 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2524;
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2524;
        uvec4 _2539 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2540 = _2539.x;
        uint _2551 = uint((float(_2539.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2540))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2540)));
        float _2561 = (log2(_2527 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2562 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        uint _2565 = uint(isnan(14.0) ? _2562 : (isnan(_2562) ? 14.0 : min(_2562, 14.0)));
        uvec4 _2570 = texelFetch(g_lightClusterGridBuffer, int(((_2565 << 2u) + (_2551 << 6u)) >> 2u));
        uint _2571 = _2570.x;
        uint _2572 = _2539.z;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        if (((((1u << ((_2572 >> 4u) & 15u)) + 4294967295u) & _2571) == 0u) || ((_2572 & 240u) == 0u))
        {
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
            _2682 = 0.0;
        }
        else
        {
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2683;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            uint _2823 = 0u;
            uint _2832;
            bool _2833;
            for (;;)
            {
                _2832 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                _2833 = _2832 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2833)
                {
                    frontier_phi_61_pred = _2817;
                    frontier_phi_61_pred_1 = _2822;
                    frontier_phi_61_pred_2 = _2821;
                    frontier_phi_61_pred_3 = _2820;
                    frontier_phi_61_pred_4 = _2819;
                    frontier_phi_61_pred_5 = _2818;
                }
                else
                {
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    uint _2947;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2819;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2832;
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    for (;;)
                    {
                        uint _2951 = uint(findLSB(_2947)) + (_2823 << 5u);
                        uint _2948 = (_2947 + 4294967295u) & _2947;
                        uint _2953 = _2951 * 48u;
                        vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2973 = (_2951 * 48u) + 4u;
                        vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2973)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2973 + 3u)).x));
                        uint _2992 = (_2951 * 48u) + 8u;
                        vec3 _3003 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x));
                        float _3007 = _2967.x - _2525;
                        float _3008 = _2967.y - _2526;
                        float _3009 = _2967.z - _2527;
                        float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                        float _3013 = inversesqrt(_3010);
                        float _3014 = _3013 * _3007;
                        float _3015 = _3013 * _3008;
                        float _3016 = _3013 * _3009;
                        float _3017 = dot(vec3(_832, _835, _838), vec3(_3014, _3015, _3016));
                        float _3022 = 1.0 - (_3010 * _2967.w);
                        float _4367 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3024 = sqrt(_3010) * _2986.w;
                        float _3027 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _3017) + _3028;
                        float _3034 = _3024 * _3024;
                        float _3038 = ((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3023) / ((_3034 * 0.699999988079071044921875) + 1.0);
                        float _3042 = (-0.0) - _2525;
                        float _3043 = (-0.0) - _2526;
                        float _3044 = (-0.0) - _2527;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3049 = _3048 * _3042;
                        float _3050 = _3048 * _3043;
                        float _3051 = _3048 * _3044;
                        float _3059 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                        float _3060 = 1.0 - _892;
                        float _3067 = sqrt(1.0 - ((1.0 - (_3060 * _3060)) * (1.0 - (_3059 * _3059))));
                        float _3068 = _3067 * _3067;
                        float _3069 = _3068 * _3068;
                        float _3070 = _3049 + _3014;
                        float _3071 = _3050 + _3015;
                        float _3072 = _3051 + _3016;
                        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
                        float _3080 = dot(vec3(_832, _835, _838), vec3(_3049, _3050, _3051));
                        float _4383 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3084 = dot(vec3(_832, _835, _838), vec3(_3076 * _3070, _3076 * _3071, _3076 * _3072));
                        float _4394 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3087 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3091 = ((_3087 * _3087) * (_3069 + (-1.0))) + 1.0;
                        float _3092 = _3027 * _3068;
                        float _3093 = _3092 * _3092;
                        float _3096 = ((1.0 - _3093) * _3017) + _3093;
                        float _4405 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                        float _3098 = 1.0 - _3068;
                        float _3108 = (0.5 / (((_3097 * ((_3083 * _3098) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3068) * _3083))) * _3097;
                        float _4416 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3119 = (((_3069 * 3.1415927410125732421875) * (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) / ((_3091 * _3091) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125))) * _3023;
                        _2876 = (_3038 * _2986.x) + _2944;
                        _2877 = (_3038 * _2986.y) + _2945;
                        _2878 = (_3038 * _2986.z) + _2946;
                        _2873 = (_3119 * _3003.x) + _2941;
                        _2874 = (_3119 * _3003.y) + _2942;
                        _2875 = (_3119 * _3003.z) + _2943;
                        if (_2948 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2875;
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2948;
                        }
                    }
                    frontier_phi_61_pred = _2873;
                    frontier_phi_61_pred_1 = _2878;
                    frontier_phi_61_pred_2 = _2877;
                    frontier_phi_61_pred_3 = _2876;
                    frontier_phi_61_pred_4 = _2875;
                    frontier_phi_61_pred_5 = _2874;
                }
                _2673 = frontier_phi_61_pred;
                _2683 = frontier_phi_61_pred_1;
                _2681 = frontier_phi_61_pred_2;
                _2679 = frontier_phi_61_pred_3;
                _2677 = frontier_phi_61_pred_4;
                _2675 = frontier_phi_61_pred_5;
                uint _2824 = _2823 + 1u;
                if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2817 = _2673;
                    _2818 = _2675;
                    _2819 = _2677;
                    _2820 = _2679;
                    _2821 = _2681;
                    _2822 = _2683;
                    _2823 = _2824;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
            _2682 = _2683;
        }
        uvec4 _2686 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2687 = _2686.z;
        uint _2689 = (_2687 >> 8u) & 15u;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        if (((4294967295u << _2689) & _2571) == 0u)
        {
            _2785 = _2672;
            _2787 = _2674;
            _2789 = _2676;
            _2791 = _2678;
            _2793 = _2680;
            _2795 = _2682;
        }
        else
        {
            float _2810 = inversesqrt(dot(vec3(_2525, _2526, _2527), vec3(_2525, _2526, _2527)));
            float _2811 = _2810 * _2525;
            float _2812 = _2810 * _2526;
            float _2813 = _2810 * _2527;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2689 < ((_2687 >> 12u) & 15u))
            {
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2924 = _2672;
                float _2925 = _2674;
                float _2926 = _2676;
                float _2927 = _2678;
                float _2928 = _2680;
                float _2929 = _2682;
                uint _2930 = _2689;
                uint _2939;
                bool _2940;
                for (;;)
                {
                    _2939 = texelFetch(g_lightClassification, int((((_2565 << 5u) + (_2551 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                    _2940 = _2939 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2940)
                    {
                        frontier_phi_67_pred = _2927;
                        frontier_phi_67_pred_1 = _2928;
                        frontier_phi_67_pred_2 = _2929;
                        frontier_phi_67_pred_3 = _2926;
                        frontier_phi_67_pred_4 = _2925;
                        frontier_phi_67_pred_5 = _2924;
                    }
                    else
                    {
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        float _3139 = _2926;
                        float _3140 = _2927;
                        float _3141 = _2928;
                        float _3142 = _2929;
                        uint _3143 = _2939;
                        uint _3144;
                        vec4 _3169;
                        float _3170;
                        vec4 _3185;
                        vec3 _3197;
                        vec4 _3212;
                        vec4 _3227;
                        float _3273;
                        bool _3274;
                        for (;;)
                        {
                            uint _3154 = ((_2930 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3143));
                            _3144 = (_3143 + 4294967295u) & _3143;
                            uint _3156 = _3154 * 40u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3170 = _3169.w;
                            uint _3172 = (_3154 * 40u) + 4u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3154 * 40u) + 8u;
                            _3197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x));
                            uint _3199 = (_3154 * 40u) + 16u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3154 * 40u) + 20u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3229 = (_3154 * 40u) + 24u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3248 = (_3154 * 40u) + 28u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3273 = fma(_2527, _3261.z, fma(_2526, _3261.y, _3261.x * _2525)) + _3261.w;
                            _3274 = !((fma(_2527, _3242.z, fma(_2526, _3242.y, _3242.x * _2525)) + _3242.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3274)
                            {
                                float _3301 = _3169.x - _2525;
                                float _3302 = _3169.y - _2526;
                                float _3303 = _3169.z - _2527;
                                float _3304 = dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303));
                                float _3307 = inversesqrt(_3304);
                                float _3308 = _3307 * _3301;
                                float _3309 = _3307 * _3302;
                                float _3310 = _3307 * _3303;
                                float _3314 = 1.0 - (_3304 / (_3170 * _3170));
                                float _4427 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3319 = sqrt(_3304) * _3185.w;
                                float _3321 = 1.39999997615814208984375 / (_3319 + 1.39999997615814208984375);
                                float _3322 = _3321 * _3321;
                                float _3325 = ((1.0 - _3322) * dot(vec3(_3308, _3309, _3310), vec3(_832, _835, _838))) + _3322;
                                float _3328 = _3319 * _3319;
                                float _3332 = (fma(_2527, _3212.z, fma(_2526, _3212.y, _3212.x * _2525)) + _3212.w) / _3273;
                                float _3333 = (fma(_2527, _3227.z, fma(_2526, _3227.y, _3227.x * _2525)) + _3227.w) / _3273;
                                float _3337 = 1.0 - dot(vec2(_3332, _3333), vec2(_3332, _3333));
                                float _4443 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3339 = _3338 * (((isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0))) * _3315) / ((_3328 * 0.699999988079071044921875) + 1.0));
                                float _3351 = exp2(log2(1.0 / ((_3328 * 3.5) + 5.0)) * 0.25);
                                float _3352 = 1.0 - _892;
                                float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                                float _3360 = _3359 * _3359;
                                float _3361 = _3360 * _3360;
                                float _3362 = _3308 - _2811;
                                float _3363 = _3309 - _2812;
                                float _3364 = _3310 - _2813;
                                float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                                float _3372 = dot(vec3(_832, _835, _838), vec3((-0.0) - _2811, (-0.0) - _2812, (-0.0) - _2813));
                                float _4454 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3375 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3376 = dot(vec3(_832, _835, _838), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                                float _4465 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                                float _3384 = _3321 * _3360;
                                float _3385 = _3384 * _3384;
                                float _3391 = ((1.0 - _3385) * dot(vec3(_832, _835, _838), vec3(_3308, _3309, _3310))) + _3385;
                                float _4476 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3393 = 1.0 - _3360;
                                float _3403 = (0.5 / (((_3392 * ((_3375 * _3393) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3392 * _3393) + _3360) * _3375))) * _3392;
                                float _4487 = isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0));
                                float _3413 = (_3338 * _3315) * (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0)))) / ((_3383 * _3383) * ((_3328 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3413 * _3197.x;
                                frontier_phi_73_pred_1 = _3413 * _3197.y;
                                frontier_phi_73_pred_2 = _3339 * _3185.z;
                                frontier_phi_73_pred_3 = _3339 * _3185.y;
                                frontier_phi_73_pred_4 = _3339 * _3185.x;
                                frontier_phi_73_pred_5 = _3413 * _3197.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_73_pred;
                            _3418 = frontier_phi_73_pred_1;
                            _3422 = frontier_phi_73_pred_2;
                            _3421 = frontier_phi_73_pred_3;
                            _3420 = frontier_phi_73_pred_4;
                            _3419 = frontier_phi_73_pred_5;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            _3124 = _3417 + _3137;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            if (_3144 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3144;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3127;
                        frontier_phi_67_pred_1 = _3128;
                        frontier_phi_67_pred_2 = _3129;
                        frontier_phi_67_pred_3 = _3126;
                        frontier_phi_67_pred_4 = _3125;
                        frontier_phi_67_pred_5 = _3124;
                    }
                    _2792 = frontier_phi_67_pred;
                    _2794 = frontier_phi_67_pred_1;
                    _2796 = frontier_phi_67_pred_2;
                    _2790 = frontier_phi_67_pred_3;
                    _2788 = frontier_phi_67_pred_4;
                    _2786 = frontier_phi_67_pred_5;
                    uint _2931 = _2930 + 1u;
                    if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2924 = _2786;
                        _2925 = _2788;
                        _2926 = _2790;
                        _2927 = _2792;
                        _2928 = _2794;
                        _2929 = _2796;
                        _2930 = _2931;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2794;
                frontier_phi_55_56_ladder_1 = _2796;
                frontier_phi_55_56_ladder_2 = _2792;
                frontier_phi_55_56_ladder_3 = _2790;
                frontier_phi_55_56_ladder_4 = _2788;
                frontier_phi_55_56_ladder_5 = _2786;
            }
            else
            {
                frontier_phi_55_56_ladder = _2680;
                frontier_phi_55_56_ladder_1 = _2682;
                frontier_phi_55_56_ladder_2 = _2678;
                frontier_phi_55_56_ladder_3 = _2676;
                frontier_phi_55_56_ladder_4 = _2674;
                frontier_phi_55_56_ladder_5 = _2672;
            }
            _2785 = frontier_phi_55_56_ladder_5;
            _2787 = frontier_phi_55_56_ladder_4;
            _2789 = frontier_phi_55_56_ladder_3;
            _2791 = frontier_phi_55_56_ladder_2;
            _2793 = frontier_phi_55_56_ladder;
            _2795 = frontier_phi_55_56_ladder_1;
        }
        float _2800 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2584 = (_2800 * _2791) + _2039;
        _2586 = (_2800 * _2793) + _2041;
        _2588 = (_2800 * _2795) + _2043;
        _2590 = ((_2785 * 0.039999999105930328369140625) * _2800) + _2369;
        _2592 = ((_2787 * 0.039999999105930328369140625) * _2800) + _2371;
        _2594 = ((_2789 * 0.039999999105930328369140625) * _2800) + _2373;
    }
    else
    {
        _2584 = _2039;
        _2586 = _2041;
        _2588 = _2043;
        _2590 = _2369;
        _2592 = _2371;
        _2594 = _2373;
    }
    float _4503 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4514 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4525 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    uint _2614 = _262 + 6u;
    float _2622 = _813 / cbSceneParam._m0[86u].x;
    float _2623 = _814 / cbSceneParam._m0[86u].y;
    vec4 _2637 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, (log2((isnan(cbSceneParam._m0[77u].w) ? _746 : (isnan(_746) ? cbSceneParam._m0[77u].w : min(_746, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2639 = _2637.x;
    float _2640 = _2637.y;
    float _2641 = _2637.z;
    float _2642 = _2637.w;
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    if (_746 > cbSceneParam._m0[78u].w)
    {
        float _2697 = isnan(_746) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _746 : min(cbSceneParam._m0[80u].w, _746));
        float _2698 = _2697 / _746;
        float _2709 = _2698 * _798;
        float _2710 = _799 * _2698;
        float _2711 = (-0.0) - _2710;
        float _2713 = _2698 * _800;
        float _2715 = (cbSceneParam._m0[77u].w * _2711) / _2697;
        float _2716 = _2715 + cbSceneParam._m0[79u].w;
        float _2717 = cbSceneParam._m0[79u].w - _2710;
        float _2723 = sqrt(((_2709 * _2709) + (_2710 * _2710)) + (_2713 * _2713));
        float _2726 = (1.0 - (cbSceneParam._m0[77u].w / _2697)) * _2723;
        float _2731 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2733 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2886;
        if (abs((_2711 - _2715) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2886 = ((((_2716 > 0.0) ? exp2(_2731 * _2716) : (2.0 - exp2(_2733 * _2716))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2726;
        }
        else
        {
            float _2846 = 1.0 / cbSceneParam._m0[80u].x;
            float _2847 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : max(_2716, _2717));
            float _2848 = isnan(_2717) ? _2716 : (isnan(_2716) ? _2717 : min(_2716, _2717));
            float _2857 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : min(_2847, 0.0));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            _2886 = ((abs(_2723 / _2711) * cbSceneParam._m0[80u].y) * ((((_2857 - _2858) * 2.0) - ((exp2(_2731 * (isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0)))) - exp2(_2731 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))))) * _2846)) - ((exp2(_2733 * _2857) - exp2(_2733 * _2858)) * _2846))) + (_2726 * cbSceneParam._m0[80u].z);
        }
        vec4 _2888 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2622, _2623, 1.0), 0.0);
        float _2897 = exp2((_2886 * (-1.44269502162933349609375)) * (1.0 - _2888.w));
        float _2898 = log2(_2897);
        float _2914 = log2(_2642);
        _2735 = (exp2(_2914 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].x)) * _2888.x) / cbSceneParam._m0[78u].x)) + _2639;
        _2737 = (exp2(_2914 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].y)) * _2888.y) / cbSceneParam._m0[78u].y)) + _2640;
        _2739 = (exp2(_2914 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2898 * cbSceneParam._m0[78u].z)) * _2888.z) / cbSceneParam._m0[78u].z)) + _2641;
        _2741 = _2897 * _2642;
    }
    else
    {
        _2735 = _2639;
        _2737 = _2640;
        _2739 = _2641;
        _2741 = _2642;
    }
    float _2753 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2754 = _2753 == 3.0;
    float _2755 = log2(_2741);
    float _2762 = exp2(_2755 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2584 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _876))) + ((_2590 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _2763 = exp2(_2755 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2586 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _876))) + ((_2592 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _2764 = exp2(_2755 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2588 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _876))) + ((_2594 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1681)) * cbPerFrame._m0[3u].x));
    float _2773 = (_2753 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2773 * (_2754 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.y = _2773 * (_2754 ? _2763 : (_2763 + (cbSceneParam._m0[72u].w * _2737)));
    SV_Target.z = _2773 * (_2754 ? _2764 : (_2764 + (cbSceneParam._m0[72u].w * _2739)));
    SV_Target.w = cbInstanceData._m0[_2614].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2614].w;
}


