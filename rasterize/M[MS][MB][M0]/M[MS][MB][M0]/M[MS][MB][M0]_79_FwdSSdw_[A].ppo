#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3651;
float _3652;
float _3653;
float _3654;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3663 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _463 = ((_433.z - _454) * _386) + _454;
    float _466 = ((((_433.x - _452) * _386) + _452) * 2.0) + (-1.0);
    float _467 = ((((_433.y - _453) * _386) + _453) * 2.0) + (-1.0);
    float _468 = dot(vec2(_466, _467), vec2(_466, _467));
    float _3674 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _507 = (_466 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_408.x * 2.0) + (-1.0)))) + (((_495.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _508 = (_467 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_408.y * 2.0) + (-1.0)))) + (((_495.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _522 = _520.x;
    float _523 = 1.0 - _522;
    float _551 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_522 - _523) * cbMtdParam._m0[24u].w) + _523) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3685 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _552 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _560 = ((((cbMtdParam._m0[10u].x - _393) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _552) + _393;
    float _561 = ((((cbMtdParam._m0[10u].y - _394) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _552) + _394;
    float _562 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _395)) * _552) + _395;
    float _567 = (((_408.z - _463) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _463;
    float _571 = ((_495.z - _567) * cbMtdParam._m0[19u].w) + _567;
    float _575 = ((cbMtdParam._m0[23u].y - _571) * _552) + _571;
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _596 = _594.x;
    float _597 = _594.y;
    float _603 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_239, _240, _241, 0.0));
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _270) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _271) + cbTextureTilingScale._m0[18u].w));
    float _620 = _618.x;
    float _625 = fract(_618.w + cbPerFrame._m0[22u].x);
    float _627 = (1.0 - _625) * _620;
    float _632 = ((_625 + (-1.0)) + _620) * 9.0;
    float _634 = ((_620 + (-1.0)) + _625) * 9.0;
    float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _636 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _650 = (_627 * ((_618.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _635 : (isnan(_635) ? 3.0 : min(_635, 3.0))) * 3.1415927410125732421875);
    float _652 = (_627 * ((_618.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _636 : (isnan(_636) ? 3.0 : min(_636, 3.0))) * 3.1415927410125732421875);
    float _656 = inversesqrt(dot(vec3(_650, _652, 1.0), vec3(_650, _652, 1.0)));
    float _672 = (((((0.5 - _596) + ((_650 * 0.5) * _656)) * _603) + _596) * 2.0) + (-1.0);
    float _673 = (((((0.5 - _597) + ((_656 * 0.5) * _652)) * _603) + _597) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _3716 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _690 = ((((cbMtdParam._m0[22u].z * _507) - _507) + _672) * _552) + _507;
    float _691 = ((((cbMtdParam._m0[22u].z * _508) - _508) + _673) * _552) + _508;
    float _692 = (_552 * (sqrt(1.0 - (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) - _473)) + _473;
    float _694 = cbMtdParam._m0[22u].x + _495.w;
    float _697 = fma(_692, _239, fma(_691, _245 * TANGENT.x, (_231 * _223) * _690));
    float _700 = fma(_692, _240, fma(_691, _245 * TANGENT.y, (_231 * _224) * _690));
    float _703 = fma(_692, _241, fma(_691, _245 * TANGENT.z, (_231 * _225) * _690));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _3727 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _711 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _3749 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3760 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3771 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    vec4 _794 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _796 = _794.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _949 = sqrt(((_780 * _780) + (_781 * _781)) + (_782 * _782));
        float _955 = (cbMatDynParam._m0[5u].x * _949) + cbMatDynParam._m0[5u].y;
        float _3782 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _960 = (cbMatDynParam._m0[5u].z * _949) + cbMatDynParam._m0[5u].w;
        float _3793 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) - _956)) + _956) < ((_796 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _807 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _808 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _829 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _832 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _845 = _251 + 9u;
    uint _846 = _845 + uint(cbMatDynParam._m0[0u].w);
    float _852 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) * cbInstanceData._m0[_846].x;
    float _853 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) * cbInstanceData._m0[_846].y;
    float _854 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_846].z;
    float _3804 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _3815 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    vec4 _866 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _807, cbSceneParam._m0[86u].y * _808));
    float _870 = ((isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * TEXCOORD_5.w) * _866.x;
    float _871 = dot(vec3(_708, _709, _710), vec3(_787, _788, _789));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _708) - _787;
    float _879 = (_874 * _709) - _788;
    float _880 = (_874 * _710) - _789;
    float _884 = abs(dot(vec3(_787, _788, _789), vec3(_708, _709, _710)));
    float _3837 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_711);
    float _898 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _992 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _996 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _1000 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _1024 = _930 + _708;
        float _1025 = _934 + _709;
        float _1026 = _938 + _710;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _992;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _996;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _1000;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_992 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_996 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_1000 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_708, _709, _710), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3885 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_708, _709, _710), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3918 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_708, _709, _710), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3951 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1309 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1313 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1317 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1340 = _930 + _708;
        float _1341 = _934 + _709;
        float _1342 = _938 + _710;
        float _1352 = fma(_1342, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1340)) - _1309;
        float _1353 = fma(_1342, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1340)) - _1313;
        float _1354 = fma(_1342, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1340)) - _1317;
        float _1358 = inversesqrt(dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354)));
        float _1371 = ((_1358 * _1352) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1309 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1358 * _1353) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1313 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1358 * _1354) / cbModelParam._m0[35u].z) + ((((((_1317 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1371, _1372, _1373), 0.0);
        float _1408 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1375.x + (-0.5));
        float _1410 = _1408 * (_1375.y + (-0.5));
        float _1411 = _1408 * (_1375.z + (-0.5));
        float _1418 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1382.x + (-0.5));
        float _1420 = _1418 * (_1382.y + (-0.5));
        float _1421 = _1418 * (_1382.z + (-0.5));
        float _1428 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1389.x + (-0.5));
        float _1430 = _1428 * (_1389.y + (-0.5));
        float _1431 = _1428 * (_1389.z + (-0.5));
        float _1438 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1396.x + (-0.5));
        float _1440 = _1438 * (_1396.y + (-0.5));
        float _1441 = _1438 * (_1396.z + (-0.5));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = _1409 * 0.5;
        float _1446 = _1419 * 0.5;
        float _1447 = _1429 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_708, _709, _710), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4014 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1472 + 1.0))) + _1477) * _1442;
        float _1487 = _1410 * 0.5;
        float _1488 = _1420 * 0.5;
        float _1489 = _1430 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_708, _709, _710), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4047 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1514 + 1.0))) + _1519) * _1443;
        float _1529 = _1411 * 0.5;
        float _1530 = _1421 * 0.5;
        float _1531 = _1431 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_708, _709, _710), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4080 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1556 + 1.0))) + _1561) * _1444;
        _1578 = _1411;
        _1579 = _1410;
        _1580 = _1409;
        _1581 = _1421;
        _1582 = _1420;
        _1583 = _1419;
        _1584 = _1431;
        _1585 = _1430;
        _1586 = _1429;
        _1587 = _1444;
        _1588 = _1443;
        _1589 = _1442;
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1267;
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = _1267;
        _1589 = _1267;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1279)) + _1279;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1280)) + _1280;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1281)) + _1281;
    float _1625 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1602));
    float _1646 = _878 * 0.5;
    float _1647 = _879 * 0.5;
    float _1648 = _880 * 0.5;
    float _1649 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1652 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1655 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1689;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1662 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1666 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1670 = dot(vec4(_1646, _1647, _1648, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1677 = dot(vec4(cbModelParam._m0[39u]), vec4(_1646, _1647, _1648, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1700;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1691 = dot(vec4(cbModelParam._m0[40u]), vec4(_1646, _1647, _1648, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1691) ? 0.0 : (isnan(0.0) ? _1691 : max(0.0, _1691))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1704 = (_1700 * cbModelParam._m0[1u].x) + (_1689 * (1.0 - cbModelParam._m0[1u].x));
    float _1714 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1714 : min(cbModelParam._m0[25u].z, _1714));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1778 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1781 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1809 = frontier_phi_17_15_ladder;
        }
        float _2031;
        if (_1778 > 0.0)
        {
            _2031 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2031 = frontier_phi_26_22_ladder;
        }
        float _2277;
        if (_1781 > 0.0)
        {
            _2277 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2277 = frontier_phi_38_33_ladder;
        }
        float _2279 = isnan(_2031) ? _1809 : (isnan(_1809) ? _2031 : min(_1809, _2031));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1775) + _1764;
        float _2285 = (_2280 * _1778) + _1768;
        float _2286 = (_2280 * _1781) + _1772;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2287;
        float _2291 = _2287 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 > _2291) || ((_2285 < _2289) || ((_2284 < _2289) || (_2284 > _2291))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2286, cbModelParam._m0[9u].z, fma(_2285, cbModelParam._m0[9u].y, _2284 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2286, cbModelParam._m0[10u].z, fma(_2285, cbModelParam._m0[10u].y, _2284 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2286, cbModelParam._m0[11u].z, fma(_2285, cbModelParam._m0[11u].y, _2284 * cbModelParam._m0[11u].x))), _1715);
            frontier_phi_16_38_ladder = _2410.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2410.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2410.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_16_38_ladder_2;
        _1799 = frontier_phi_16_38_ladder_1;
        _1801 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1715);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1874 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1877 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2036;
        if (_1871 > 0.0)
        {
            _2036 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2036 = frontier_phi_28_24_ladder;
        }
        float _2304;
        if (_1874 > 0.0)
        {
            _2304 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2304 = frontier_phi_40_35_ladder;
        }
        float _2509;
        if (_1877 > 0.0)
        {
            _2509 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2509 = frontier_phi_49_46_ladder;
        }
        float _2511 = isnan(_2304) ? _2036 : (isnan(_2036) ? _2304 : min(_2036, _2304));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _1871) + _1860;
        float _2517 = (_2512 * _1874) + _1864;
        float _2518 = (_2512 * _1877) + _1868;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2519;
        float _2522 = _2519 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2518 > _2522) || ((_2518 < _2520) || ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 < _2520) || (_2516 > _2522))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2518, cbModelParam._m0[17u].z, fma(_2517, cbModelParam._m0[17u].y, _2516 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2518, cbModelParam._m0[18u].z, fma(_2517, cbModelParam._m0[18u].y, _2516 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2518, cbModelParam._m0[19u].z, fma(_2517, cbModelParam._m0[19u].y, _2516 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_25_49_ladder = _2717.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2717.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2717.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_25_49_ladder_2;
        _1898 = frontier_phi_25_49_ladder_1;
        _1900 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1806);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1912 = ((((1.0 - _898) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_898 * _886)) * _870;
    float _1913 = _1912 * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1914 = _1912 * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1915 = _1912 * ((cbModelParam._m0[1u].w * (_1900 - _1801)) + _1801);
    float _1918 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    vec4 _1932 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_807, _808));
    float _1934 = _1932.w;
    float _1946 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1934);
    float _1947 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1934);
    float _1948 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1934);
    uvec4 _1952 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1954 = _1952.x * 14u;
    uint _1955 = _1954 + 13u;
    float _1962 = _870 + (-1.0);
    float _1967 = (cbLight._m0[_1955].x * _1962) + 1.0;
    float _1968 = (cbLight._m0[_1955].y * _1962) + 1.0;
    float _1969 = (cbLight._m0[_1955].z * _1962) + 1.0;
    float _1970 = (cbLight._m0[_1955].w * _1962) + 1.0;
    uint _1971 = _1954 + 5u;
    float _1977 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1981 = _1954 + 4u;
    float _1990 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1994 = _1954 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_708, _709, _710));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_708, _709, _710));
    float _4216 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _4227 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1971].x * _1977) * _2015) + (((cbLight._m0[_1981].x * _1946) * _1990) * _2013);
    float _2023 = ((_1977 * cbLight._m0[_1971].y) * _2015) + (((cbLight._m0[_1981].y * _1947) * _1990) * _2013);
    float _2024 = ((_1977 * cbLight._m0[_1971].z) * _2015) + (((cbLight._m0[_1981].z * _1948) * _1990) * _2013);
    uvec4 _2028 = floatBitsToUint(cbLight._m0[_1954 + 12u]);
    bool _2030 = _2028.x == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2030)
    {
        _2041 = _2022;
        _2043 = _2023;
        _2045 = _2024;
    }
    else
    {
        uint _2049 = _1954 + 6u;
        float _2065 = (dot(vec3(cbLight._m0[_1954 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4238 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2068 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2041 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _2022;
        _2043 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _2023;
        _2045 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _2024;
    }
    bool _2048 = _2028.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2048)
    {
        _2086 = _2041;
        _2088 = _2043;
        _2090 = _2045;
    }
    else
    {
        uint _2248 = _1954 + 7u;
        float _2264 = (dot(vec3(cbLight._m0[_1954 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2265 = _2264 * _2264;
        float _4254 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2266 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2267 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2086 = (((cbLight._m0[_2248].x * 0.3183098733425140380859375) * _2266) * _2267) + _2041;
        _2088 = (((cbLight._m0[_2248].y * 0.3183098733425140380859375) * _2266) * _2267) + _2043;
        _2090 = (((cbLight._m0[_2248].z * 0.3183098733425140380859375) * _2266) * _2267) + _2045;
    }
    uint _2093 = _1954 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _711) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1954].x + _787;
    float _2109 = cbLight._m0[_1954].y + _788;
    float _2110 = cbLight._m0[_1954].z + _789;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1954].xyz));
    float _4270 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2122 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _2123 = dot(vec3(_708, _709, _710), vec3(_2115, _2116, _2117));
    float _4292 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2115, _2116, _2117));
    float _4303 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2107;
    float _2158 = (0.5 / (((_2122 * ((_2121 * _2147) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2147) + _2107) * _2121))) * _2121;
    float _4314 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2160 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2174 = _1954 + 9u;
    float _2185 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _711) * 0.949999988079071044921875);
    float _2186 = _2185 * _2185;
    float _2187 = cbLight._m0[_1994].x + _787;
    float _2188 = cbLight._m0[_1994].y + _788;
    float _2189 = cbLight._m0[_1994].z + _789;
    float _2193 = inversesqrt(dot(vec3(_2187, _2188, _2189), vec3(_2187, _2188, _2189)));
    float _2194 = _2193 * _2187;
    float _2195 = _2193 * _2188;
    float _2196 = _2193 * _2189;
    float _2197 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1994].xyz));
    float _4325 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2201 = dot(vec3(_708, _709, _710), vec3(_2194, _2195, _2196));
    float _4336 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2194, _2195, _2196));
    float _4347 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2186 * _2186;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2222 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2223 = 1.0 - _2186;
    float _2233 = (0.5 / (((_2122 * ((_2200 * _2223) + _2186)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2223) + _2186) * _2200))) * _2200;
    float _4358 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    float _2245 = (((_2222 * cbLight._m0[_2174].x) * _2235) * _1977) + ((((cbLight._m0[_2093].x * _1946) * _2146) * _2160) * _1990);
    float _2246 = (((_2222 * cbLight._m0[_2174].y) * _2235) * _1977) + ((((cbLight._m0[_2093].y * _1947) * _2146) * _2160) * _1990);
    float _2247 = (((_2222 * cbLight._m0[_2174].z) * _2235) * _1977) + ((((cbLight._m0[_2093].z * _1948) * _2146) * _2160) * _1990);
    float _2309;
    float _2311;
    float _2313;
    if (_2030)
    {
        _2309 = _2245;
        _2311 = _2246;
        _2313 = _2247;
    }
    else
    {
        uint _2315 = _1954 + 2u;
        uint _2319 = _1954 + 10u;
        float _2333 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2315].w)) * _711) * 0.949999988079071044921875);
        float _2334 = _2333 * _2333;
        float _2335 = cbLight._m0[_2315].x + _787;
        float _2336 = cbLight._m0[_2315].y + _788;
        float _2337 = cbLight._m0[_2315].z + _789;
        float _2341 = inversesqrt(dot(vec3(_2335, _2336, _2337), vec3(_2335, _2336, _2337)));
        float _2342 = _2341 * _2335;
        float _2343 = _2341 * _2336;
        float _2344 = _2341 * _2337;
        float _2345 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2315].xyz));
        float _4369 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2349 = dot(vec3(_708, _709, _710), vec3(_2342, _2343, _2344));
        float _4380 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2353 = dot(vec3(cbLight._m0[_2315].xyz), vec3(_2342, _2343, _2344));
        float _4391 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2357 = _2334 * _2334;
        float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
        float _2370 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2371 = 1.0 - _2334;
        float _2381 = (0.5 / (((_2122 * ((_2348 * _2371) + _2334)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2371) + _2334) * _2348))) * _2348;
        float _4402 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2383 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
        float _2384 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2309 = (((_2370 * cbLight._m0[_2319].x) * _2383) * _2384) + _2245;
        _2311 = (((_2370 * cbLight._m0[_2319].y) * _2383) * _2384) + _2246;
        _2313 = (((_2370 * cbLight._m0[_2319].z) * _2383) * _2384) + _2247;
    }
    float _2419;
    float _2421;
    float _2423;
    if (_2048)
    {
        _2419 = _2309;
        _2421 = _2311;
        _2423 = _2313;
    }
    else
    {
        uint _2430 = _1954 + 3u;
        uint _2434 = _1954 + 11u;
        float _2448 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _711) * 0.949999988079071044921875);
        float _2449 = _2448 * _2448;
        float _2450 = cbLight._m0[_2430].x + _787;
        float _2451 = cbLight._m0[_2430].y + _788;
        float _2452 = cbLight._m0[_2430].z + _789;
        float _2456 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
        float _2457 = _2456 * _2450;
        float _2458 = _2456 * _2451;
        float _2459 = _2456 * _2452;
        float _2460 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2430].xyz));
        float _4418 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2464 = dot(vec3(_708, _709, _710), vec3(_2457, _2458, _2459));
        float _4429 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2468 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2457, _2458, _2459));
        float _4440 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2472 = _2449 * _2449;
        float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
        float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2486 = 1.0 - _2449;
        float _2496 = (0.5 / (((_2122 * ((_2463 * _2486) + _2449)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2486) + _2449) * _2463))) * _2463;
        float _4451 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2498 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
        float _2499 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2419 = (((_2485 * cbLight._m0[_2434].x) * _2498) * _2499) + _2309;
        _2421 = (((_2485 * cbLight._m0[_2434].y) * _2498) * _2499) + _2311;
        _2423 = (((_2485 * cbLight._m0[_2434].z) * _2498) * _2499) + _2313;
    }
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    if (_1952.y == 0u)
    {
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2574;
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2574;
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2574;
        uvec4 _2589 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2590 = _2589.x;
        uint _2601 = uint((float(_2589.y) * floor(float(uint(cbSceneParam._m0[85u].y * _808) / _2590))) + floor(float(uint(cbSceneParam._m0[85u].x * _807) / _2590)));
        float _2611 = (log2(_2577 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2612 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        uint _2615 = uint(isnan(14.0) ? _2612 : (isnan(_2612) ? 14.0 : min(_2612, 14.0)));
        uvec4 _2620 = texelFetch(g_lightClusterGridBuffer, int(((_2615 << 2u) + (_2601 << 6u)) >> 2u));
        uint _2621 = _2620.x;
        uint _2622 = _2589.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2622 >> 4u) & 15u)) + 4294967295u) & _2621) == 0u) || ((_2622 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            uint _2881 = 0u;
            uint _2890;
            bool _2891;
            for (;;)
            {
                _2890 = texelFetch(g_lightClassification, int((((_2615 << 5u) + (_2601 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                _2891 = _2890 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2891)
                {
                    frontier_phi_66_pred = _2875;
                    frontier_phi_66_pred_1 = _2880;
                    frontier_phi_66_pred_2 = _2879;
                    frontier_phi_66_pred_3 = _2878;
                    frontier_phi_66_pred_4 = _2877;
                    frontier_phi_66_pred_5 = _2876;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2875;
                    _3021 = _2876;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2890;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2881 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        float _3086 = _3046.x - _2575;
                        float _3087 = _3046.y - _2576;
                        float _3088 = _3046.z - _2577;
                        float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                        float _3092 = inversesqrt(_3089);
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3096 = dot(vec3(_826, _829, _832), vec3(_3093, _3094, _3095));
                        float _3101 = 1.0 - (_3089 * _3046.w);
                        float _4477 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3103 = sqrt(_3089) * _3065.w;
                        float _3106 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3096) + _3107;
                        float _3113 = _3103 * _3103;
                        float _3117 = ((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3102) / ((_3113 * 0.699999988079071044921875) + 1.0);
                        float _3121 = (-0.0) - _2575;
                        float _3122 = (-0.0) - _2576;
                        float _3123 = (-0.0) - _2577;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3138 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                        float _3139 = 1.0 - _886;
                        float _3146 = sqrt(1.0 - ((1.0 - (_3139 * _3139)) * (1.0 - (_3138 * _3138))));
                        float _3147 = _3146 * _3146;
                        float _3148 = _3147 * _3147;
                        float _3149 = _3128 + _3093;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3159 = dot(vec3(_826, _829, _832), vec3(_3128, _3129, _3130));
                        float _4493 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3163 = dot(vec3(_826, _829, _832), vec3(_3155 * _3149, _3155 * _3150, _3155 * _3151));
                        float _4504 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3170 = ((_3166 * _3166) * (_3148 + (-1.0))) + 1.0;
                        float _3171 = _3106 * _3147;
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3096) + _3172;
                        float _4515 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3177 = 1.0 - _3147;
                        float _3187 = (0.5 / (((_3176 * ((_3162 * _3177) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3147) * _3162))) * _3176;
                        float _4526 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3197 = (((_3148 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3170 * _3170) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125))) * _3102;
                        _2950 = (_3117 * _3065.x) + _3023;
                        _2951 = (_3117 * _3065.y) + _3024;
                        _2952 = (_3117 * _3065.z) + _3025;
                        _2947 = (_3197 * _3082.x) + _3020;
                        _2948 = (_3197 * _3082.y) + _3021;
                        _2949 = (_3197 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2947;
                            _3021 = _2948;
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_66_pred = _2947;
                    frontier_phi_66_pred_1 = _2952;
                    frontier_phi_66_pred_2 = _2951;
                    frontier_phi_66_pred_3 = _2950;
                    frontier_phi_66_pred_4 = _2949;
                    frontier_phi_66_pred_5 = _2948;
                }
                _2723 = frontier_phi_66_pred;
                _2733 = frontier_phi_66_pred_1;
                _2731 = frontier_phi_66_pred_2;
                _2729 = frontier_phi_66_pred_3;
                _2727 = frontier_phi_66_pred_4;
                _2725 = frontier_phi_66_pred_5;
                uint _2882 = _2881 + 1u;
                if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2875 = _2723;
                    _2876 = _2725;
                    _2877 = _2727;
                    _2878 = _2729;
                    _2879 = _2731;
                    _2880 = _2733;
                    _2881 = _2882;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((4294967295u << _2739) & _2621) == 0u)
        {
            _2843 = _2722;
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
        }
        else
        {
            float _2868 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
            float _2869 = _2868 * _2575;
            float _2870 = _2868 * _2576;
            float _2871 = _2868 * _2577;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _3003 = _2722;
                float _3004 = _2724;
                float _3005 = _2726;
                float _3006 = _2728;
                float _3007 = _2730;
                float _3008 = _2732;
                uint _3009 = _2739;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2615 << 5u) + (_2601 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3019)
                    {
                        frontier_phi_77_pred = _3008;
                        frontier_phi_77_pred_1 = _3007;
                        frontier_phi_77_pred_2 = _3006;
                        frontier_phi_77_pred_3 = _3005;
                        frontier_phi_77_pred_4 = _3004;
                        frontier_phi_77_pred_5 = _3003;
                    }
                    else
                    {
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3224 = _3003;
                        float _3225 = _3004;
                        float _3226 = _3005;
                        float _3227 = _3006;
                        float _3228 = _3007;
                        float _3229 = _3008;
                        uint _3230 = _3018;
                        uint _3231;
                        vec4 _3256;
                        float _3257;
                        vec4 _3272;
                        vec3 _3284;
                        vec4 _3299;
                        vec4 _3314;
                        float _3360;
                        bool _3361;
                        for (;;)
                        {
                            uint _3241 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3230));
                            _3231 = (_3230 + 4294967295u) & _3230;
                            uint _3243 = _3241 * 40u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3257 = _3256.w;
                            uint _3259 = (_3241 * 40u) + 4u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3241 * 40u) + 8u;
                            _3284 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x));
                            uint _3286 = (_3241 * 40u) + 16u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3241 * 40u) + 20u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3316 = (_3241 * 40u) + 24u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3335 = (_3241 * 40u) + 28u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            _3360 = fma(_2577, _3348.z, fma(_2576, _3348.y, _3348.x * _2575)) + _3348.w;
                            _3361 = !((fma(_2577, _3329.z, fma(_2576, _3329.y, _3329.x * _2575)) + _3329.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3361)
                            {
                                float _3388 = _3256.x - _2575;
                                float _3389 = _3256.y - _2576;
                                float _3390 = _3256.z - _2577;
                                float _3391 = dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390));
                                float _3394 = inversesqrt(_3391);
                                float _3395 = _3394 * _3388;
                                float _3396 = _3394 * _3389;
                                float _3397 = _3394 * _3390;
                                float _3401 = 1.0 - (_3391 / (_3257 * _3257));
                                float _4537 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3406 = sqrt(_3391) * _3272.w;
                                float _3408 = 1.39999997615814208984375 / (_3406 + 1.39999997615814208984375);
                                float _3409 = _3408 * _3408;
                                float _3412 = ((1.0 - _3409) * dot(vec3(_3395, _3396, _3397), vec3(_826, _829, _832))) + _3409;
                                float _3415 = _3406 * _3406;
                                float _3419 = (fma(_2577, _3299.z, fma(_2576, _3299.y, _3299.x * _2575)) + _3299.w) / _3360;
                                float _3420 = (fma(_2577, _3314.z, fma(_2576, _3314.y, _3314.x * _2575)) + _3314.w) / _3360;
                                float _3424 = 1.0 - dot(vec2(_3419, _3420), vec2(_3419, _3420));
                                float _4553 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3426 = _3425 * (((isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))) * _3402) / ((_3415 * 0.699999988079071044921875) + 1.0));
                                float _3438 = exp2(log2(1.0 / ((_3415 * 3.5) + 5.0)) * 0.25);
                                float _3439 = 1.0 - _886;
                                float _3446 = sqrt(1.0 - ((1.0 - (_3439 * _3439)) * (1.0 - (_3438 * _3438))));
                                float _3447 = _3446 * _3446;
                                float _3448 = _3447 * _3447;
                                float _3449 = _3395 - _2869;
                                float _3450 = _3396 - _2870;
                                float _3451 = _3397 - _2871;
                                float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                                float _3459 = dot(vec3(_826, _829, _832), vec3((-0.0) - _2869, (-0.0) - _2870, (-0.0) - _2871));
                                float _4564 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3463 = dot(vec3(_826, _829, _832), vec3(_3455 * _3449, _3455 * _3450, _3455 * _3451));
                                float _4575 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3466 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3470 = ((_3466 * _3466) * (_3448 + (-1.0))) + 1.0;
                                float _3471 = _3408 * _3447;
                                float _3472 = _3471 * _3471;
                                float _3478 = ((1.0 - _3472) * dot(vec3(_826, _829, _832), vec3(_3395, _3396, _3397))) + _3472;
                                float _4586 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3480 = 1.0 - _3447;
                                float _3490 = (0.5 / (((_3479 * ((_3462 * _3480) + _3447)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3447) * _3462))) * _3479;
                                float _4597 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3500 = (_3425 * _3402) * (((_3448 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3470 * _3470) * ((_3415 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3426 * _3272.y;
                                frontier_phi_83_pred_1 = _3426 * _3272.x;
                                frontier_phi_83_pred_2 = _3500 * _3284.z;
                                frontier_phi_83_pred_3 = _3500 * _3284.y;
                                frontier_phi_83_pred_4 = _3500 * _3284.x;
                                frontier_phi_83_pred_5 = _3426 * _3272.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3508 = frontier_phi_83_pred;
                            _3507 = frontier_phi_83_pred_1;
                            _3506 = frontier_phi_83_pred_2;
                            _3505 = frontier_phi_83_pred_3;
                            _3504 = frontier_phi_83_pred_4;
                            _3509 = frontier_phi_83_pred_5;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            if (_3231 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3231;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3216;
                        frontier_phi_77_pred_1 = _3215;
                        frontier_phi_77_pred_2 = _3214;
                        frontier_phi_77_pred_3 = _3213;
                        frontier_phi_77_pred_4 = _3212;
                        frontier_phi_77_pred_5 = _3211;
                    }
                    _2854 = frontier_phi_77_pred;
                    _2852 = frontier_phi_77_pred_1;
                    _2850 = frontier_phi_77_pred_2;
                    _2848 = frontier_phi_77_pred_3;
                    _2846 = frontier_phi_77_pred_4;
                    _2844 = frontier_phi_77_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2844;
                        _3004 = _2846;
                        _3005 = _2848;
                        _3006 = _2850;
                        _3007 = _2852;
                        _3008 = _2854;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2848;
                frontier_phi_58_59_ladder_1 = _2854;
                frontier_phi_58_59_ladder_2 = _2852;
                frontier_phi_58_59_ladder_3 = _2850;
                frontier_phi_58_59_ladder_4 = _2846;
                frontier_phi_58_59_ladder_5 = _2844;
            }
            else
            {
                frontier_phi_58_59_ladder = _2726;
                frontier_phi_58_59_ladder_1 = _2732;
                frontier_phi_58_59_ladder_2 = _2730;
                frontier_phi_58_59_ladder_3 = _2728;
                frontier_phi_58_59_ladder_4 = _2724;
                frontier_phi_58_59_ladder_5 = _2722;
            }
            _2843 = frontier_phi_58_59_ladder_5;
            _2845 = frontier_phi_58_59_ladder_4;
            _2847 = frontier_phi_58_59_ladder;
            _2849 = frontier_phi_58_59_ladder_3;
            _2851 = frontier_phi_58_59_ladder_2;
            _2853 = frontier_phi_58_59_ladder_1;
        }
        float _2858 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2634 = (_2858 * _2849) + _2086;
        _2636 = (_2858 * _2851) + _2088;
        _2638 = (_2858 * _2853) + _2090;
        _2640 = ((_2843 * 0.039999999105930328369140625) * _2858) + _2419;
        _2642 = ((_2845 * 0.039999999105930328369140625) * _2858) + _2421;
        _2644 = ((_2847 * 0.039999999105930328369140625) * _2858) + _2423;
    }
    else
    {
        _2634 = _2086;
        _2636 = _2088;
        _2638 = _2090;
        _2640 = _2419;
        _2642 = _2421;
        _2644 = _2423;
    }
    float _4613 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4624 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4635 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2661 = ((isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2634 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _870))) + ((_2640 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    float _2662 = ((isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2636 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _870))) + ((_2642 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    float _2663 = ((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2638 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _870))) + ((_2644 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1704)) * cbPerFrame._m0[3u].x);
    uint _2664 = _251 + 6u;
    float _2672 = _807 / cbSceneParam._m0[86u].x;
    float _2673 = _808 / cbSceneParam._m0[86u].y;
    vec4 _2687 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2689 = _2687.x;
    float _2690 = _2687.y;
    float _2691 = _2687.z;
    float _2692 = _2687.w;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2748 = _2747 / _729;
        float _2759 = _2748 * _780;
        float _2760 = _781 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2763 = _2748 * _782;
        float _2765 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2766 = _2765 + cbSceneParam._m0[79u].w;
        float _2767 = cbSceneParam._m0[79u].w - _2760;
        float _2773 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2763 * _2763));
        float _2776 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2773;
        float _2781 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2783 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2960;
        if (abs((_2761 - _2765) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2960 = ((((_2766 > 0.0) ? exp2(_2781 * _2766) : (2.0 - exp2(_2783 * _2766))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2776;
        }
        else
        {
            float _2904 = 1.0 / cbSceneParam._m0[80u].x;
            float _2905 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : max(_2766, _2767));
            float _2906 = isnan(_2767) ? _2766 : (isnan(_2766) ? _2767 : min(_2766, _2767));
            float _2915 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : min(_2905, 0.0));
            float _2916 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : min(_2906, 0.0));
            _2960 = ((abs(_2773 / _2761) * cbSceneParam._m0[80u].y) * ((((_2915 - _2916) * 2.0) - ((exp2(_2781 * (isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0)))) - exp2(_2781 * (isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0))))) * _2904)) - ((exp2(_2783 * _2915) - exp2(_2783 * _2916)) * _2904))) + (_2776 * cbSceneParam._m0[80u].z);
        }
        vec4 _2962 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2672, _2673, 1.0), 0.0);
        float _2971 = exp2((_2960 * (-1.44269502162933349609375)) * (1.0 - _2962.w));
        float _2972 = log2(_2971);
        float _2988 = log2(_2692);
        _2785 = (exp2(_2988 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].x)) * _2962.x) / cbSceneParam._m0[78u].x)) + _2689;
        _2787 = (exp2(_2988 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].y)) * _2962.y) / cbSceneParam._m0[78u].y)) + _2690;
        _2789 = (exp2(_2988 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].z)) * _2962.z) / cbSceneParam._m0[78u].z)) + _2691;
        _2791 = _2971 * _2692;
    }
    else
    {
        _2785 = _2689;
        _2787 = _2690;
        _2789 = _2691;
        _2791 = _2692;
    }
    bool _2998;
    vec4 _2801;
    vec4 _2823;
    float _2825;
    float _2829;
    float _2830;
    float _2831;
    float _2832;
    bool _2842;
    for (;;)
    {
        _2801 = cbMatDynParam._m0[0u];
        float _2803 = roundEven(_2801.y);
        bool _2804 = _2803 == 3.0;
        float _2805 = log2(_2791);
        float _2812 = exp2(_2805 * cbSceneParam._m0[78u].x) * _2661;
        float _2813 = exp2(_2805 * cbSceneParam._m0[78u].y) * _2662;
        float _2814 = exp2(_2805 * cbSceneParam._m0[78u].z) * _2663;
        float _2821 = _796 + (-0.5);
        _2823 = cbMtdParam._m0[1u];
        _2825 = _2823.y * _2821;
        float _2828 = (_2803 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2829 = _2828 * (_2804 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2785)));
        _2830 = _2828 * (_2804 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2787)));
        _2831 = _2828 * (_2804 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2789)));
        _2832 = _2821 * 0.999000012874603271484375;
        _2842 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2842)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2832) < 0.5)
            {
                _2998 = true;
                break;
            }
        }
        uint _2939 = _845 + uint(_2801.w);
        if ((cbInstanceData._m0[_2939].w < 1.0) && ((cbInstanceData._m0[_2939].w + _2832) < 0.5))
        {
            _2998 = true;
            break;
        }
        if ((_2825 + 1.0) < _2823.x)
        {
            _2998 = true;
            break;
        }
        _2998 = false;
        break;
    }
    float _3202;
    if (_2998)
    {
        discard_state = true;
        _3202 = 0.0;
    }
    else
    {
        _3202 = cbInstanceData._m0[_2664].w;
    }
    SV_Target.x = _2829;
    SV_Target.y = _2830;
    SV_Target.z = _2831;
    SV_Target.w = _3202;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2664].w;
    discard_exit();
}


