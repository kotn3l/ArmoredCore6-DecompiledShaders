#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1178;
float _3563;
float _3564;
float _3565;
float _3566;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _331 = _327.z;
    float _336 = (_327.x * 2.0) + (-1.0);
    float _338 = (_327.y * 2.0) + (-1.0);
    float _339 = dot(vec2(_336, _338), vec2(_336, _338));
    float _3575 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _345 = sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))));
    float _348 = fma(_345, _229, fma(_338, _236, _336 * _222));
    float _351 = fma(_345, _230, fma(_338, _237, _336 * _223));
    float _354 = fma(_345, _231, fma(_338, _238, _336 * _224));
    float _358 = inversesqrt(dot(vec3(_348, _351, _354), vec3(_348, _351, _354)));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _396 = _394.x;
    float _397 = 1.0 - _396;
    float _404 = ((_396 - _397) * cbMtdParam._m0[24u].z) + _397;
    float _406 = (cbMtdParam._m0[19u].x + dot(vec4(_358 * _348, _358 * _351, _358 * _354, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_404 * cbMtdParam._m0[21u].z);
    float _3586 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _409 = (-0.0) - cbMtdParam._m0[24u].y;
    float _411 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _419 = _407 - ((_407 * TEXCOORD_8.x) * _412);
    float _420 = _407 - ((_407 * TEXCOORD_8.y) * _412);
    float _421 = _407 - ((_407 * TEXCOORD_8.z) * _412);
    float _428 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _432 = ((isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : min(_428, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _440 = (_432 - (((_404 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _432))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3617 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _445 = ((_419 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) * _441) + _286;
    float _446 = ((_420 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) * _441) + _287;
    float _447 = ((_421 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) * _441) + _288;
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _461 = _459.x;
    float _462 = 1.0 - _461;
    float _491 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_461 - _462) * cbMtdParam._m0[24u].w) + _462) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3628 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _500 = ((((cbMtdParam._m0[10u].x - _445) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _492) + _445;
    float _501 = ((((cbMtdParam._m0[10u].y - _446) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _492) + _446;
    float _502 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _447)) * _492) + _447;
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _523 = (_516.x * 2.0) + (-1.0);
    float _524 = (_516.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3639 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _534 = (((_516.z - _331) * _419) * _441) + _331;
    float _537 = ((cbMtdParam._m0[23u].y - _534) * _492) + _534;
    vec4 _556 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _562 = (_556.x * 2.0) + (-1.0);
    float _563 = (_556.y * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3650 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _584 = (((cbMtdParam._m0[21u].x * _336) + ((_523 - _336) * _419)) * _441) + _336;
    float _585 = (((cbMtdParam._m0[21u].x * _338) + ((_524 - _338) * _420)) * _441) + _338;
    float _586 = (((sqrt(1.0 - (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) - _345) * _421) * _441) + _345;
    float _597 = (((_562 - _584) + (_584 * cbMtdParam._m0[22u].z)) * _492) + _584;
    float _598 = (((_563 - _585) + (_585 * cbMtdParam._m0[22u].z)) * _492) + _585;
    float _599 = ((sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) - _586) * _492) + _586;
    float _601 = cbMtdParam._m0[22u].x + _327.w;
    float _604 = fma(_599, _229, fma(_598, _236, _597 * _222));
    float _607 = fma(_599, _230, fma(_598, _237, _597 * _223));
    float _610 = fma(_599, _231, fma(_598, _238, _597 * _224));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _3661 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _618 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3683 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3694 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3705 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _686 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _676);
    float _687 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _676);
    float _688 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _676);
    float _692 = inversesqrt(dot(vec3(_686, _687, _688), vec3(_686, _687, _688)));
    float _693 = _686 * _692;
    float _694 = _687 * _692;
    float _695 = _688 * _692;
    vec4 _700 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _702 = _700.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _859 = sqrt(((_686 * _686) + (_687 * _687)) + (_688 * _688));
        float _865 = (cbMatDynParam._m0[5u].x * _859) + cbMatDynParam._m0[5u].y;
        float _3716 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _870 = (cbMatDynParam._m0[5u].z * _859) + cbMatDynParam._m0[5u].w;
        float _3727 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) - _866)) + _866) < ((_702 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _714 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _715 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _738 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _741 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    uint _754 = _241 + 9u;
    uint _755 = _754 + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3738 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _714, cbSceneParam._m0[86u].y * _715));
    float _779 = ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * TEXCOORD_5.w) * _775.x;
    float _780 = dot(vec3(_615, _616, _617), vec3(_693, _694, _695));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _615) - _693;
    float _788 = (_783 * _616) - _694;
    float _789 = (_783 * _617) - _695;
    float _793 = abs(dot(vec3(_693, _694, _695), vec3(_615, _616, _617)));
    float _3771 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_618);
    float _808 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1177;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _902 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _906 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _910 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _935 = _840 + _615;
        float _936 = _844 + _616;
        float _937 = _848 + _617;
        float _947 = fma(_937, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935)) - _902;
        float _948 = fma(_937, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935)) - _906;
        float _949 = fma(_937, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935)) - _910;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_902 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_906 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[34u].z) + ((((((_910 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1005 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_971.x + (-0.5));
        float _1007 = _1005 * (_971.y + (-0.5));
        float _1008 = _1005 * (_971.z + (-0.5));
        float _1015 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_978.x + (-0.5));
        float _1017 = _1015 * (_978.y + (-0.5));
        float _1018 = _1015 * (_978.z + (-0.5));
        float _1025 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_985.x + (-0.5));
        float _1027 = _1025 * (_985.y + (-0.5));
        float _1028 = _1025 * (_985.z + (-0.5));
        float _1035 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_992.x + (-0.5));
        float _1037 = _1035 * (_992.y + (-0.5));
        float _1038 = _1035 * (_992.z + (-0.5));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = _1006 * 0.5;
        float _1043 = _1016 * 0.5;
        float _1044 = _1026 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1059 = (dot(vec3(_615, _616, _617), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1069 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3819 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1071 + 1.0))) + _1076) * _1039;
        float _1086 = _1007 * 0.5;
        float _1087 = _1017 * 0.5;
        float _1088 = _1027 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_615, _616, _617), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3852 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1113 + 1.0))) + _1118) * _1040;
        float _1128 = _1008 * 0.5;
        float _1129 = _1018 * 0.5;
        float _1130 = _1028 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_615, _616, _617), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3885 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1155 + 1.0))) + _1160) * _1041;
        _1177 = _1008;
        _1179 = _1007;
        _1180 = _1006;
        _1181 = _1018;
        _1182 = _1017;
        _1183 = _1016;
        _1184 = _1028;
        _1185 = _1027;
        _1186 = _1026;
        _1187 = _1041;
        _1188 = _1040;
        _1189 = _1039;
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _1178;
        _1179 = _1178;
        _1180 = _1178;
        _1181 = _1178;
        _1182 = _1178;
        _1183 = _1178;
        _1184 = _1178;
        _1185 = _1178;
        _1186 = _1178;
        _1187 = _1178;
        _1188 = _1178;
        _1189 = _1178;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1220 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1224 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1228 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1251 = _840 + _615;
        float _1252 = _844 + _616;
        float _1253 = _848 + _617;
        float _1263 = fma(_1253, cbModelParam._m0[30u].z, fma(_1252, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251)) - _1220;
        float _1264 = fma(_1253, cbModelParam._m0[31u].z, fma(_1252, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251)) - _1224;
        float _1265 = fma(_1253, cbModelParam._m0[32u].z, fma(_1252, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251)) - _1228;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1220 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1224 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[35u].z) + ((((((_1228 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1319 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1286.x + (-0.5));
        float _1321 = _1319 * (_1286.y + (-0.5));
        float _1322 = _1319 * (_1286.z + (-0.5));
        float _1329 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1293.x + (-0.5));
        float _1331 = _1329 * (_1293.y + (-0.5));
        float _1332 = _1329 * (_1293.z + (-0.5));
        float _1339 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1300.x + (-0.5));
        float _1341 = _1339 * (_1300.y + (-0.5));
        float _1342 = _1339 * (_1300.z + (-0.5));
        float _1349 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1307.x + (-0.5));
        float _1351 = _1349 * (_1307.y + (-0.5));
        float _1352 = _1349 * (_1307.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_615, _616, _617), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3948 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1383 + 1.0))) + _1388) * _1353;
        float _1398 = _1321 * 0.5;
        float _1399 = _1331 * 0.5;
        float _1400 = _1341 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_615, _616, _617), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3981 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1425 + 1.0))) + _1430) * _1354;
        float _1440 = _1322 * 0.5;
        float _1441 = _1332 * 0.5;
        float _1442 = _1342 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_615, _616, _617), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4014 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1467 + 1.0))) + _1472) * _1355;
        _1489 = _1322;
        _1490 = _1321;
        _1491 = _1320;
        _1492 = _1332;
        _1493 = _1331;
        _1494 = _1330;
        _1495 = _1342;
        _1496 = _1341;
        _1497 = _1340;
        _1498 = _1355;
        _1499 = _1354;
        _1500 = _1353;
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1178;
        _1490 = _1178;
        _1491 = _1178;
        _1492 = _1178;
        _1493 = _1178;
        _1494 = _1178;
        _1495 = _1178;
        _1496 = _1178;
        _1497 = _1178;
        _1498 = _1178;
        _1499 = _1178;
        _1500 = _1178;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1190)) + _1190;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1191)) + _1191;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1192)) + _1192;
    float _1536 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1513));
    float _1557 = _787 * 0.5;
    float _1558 = _788 * 0.5;
    float _1559 = _789 * 0.5;
    float _1560 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1563 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1566 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1600;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1573 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1177, _1181, _1184, _1187));
        float _1577 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1581 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1588 = dot(vec4(cbModelParam._m0[39u]), vec4(_1557, _1558, _1559, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1611;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1602 = dot(vec4(cbModelParam._m0[40u]), vec4(_1557, _1558, _1559, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1615 = (_1611 * cbModelParam._m0[1u].x) + (_1600 * (1.0 - cbModelParam._m0[1u].x));
    float _1625 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _618);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1625 : min(cbModelParam._m0[25u].z, _1625));
    float _1706;
    float _1708;
    float _1710;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1673 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1677 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1681 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1684 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1687 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1690 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1718;
        if (_1684 > 0.0)
        {
            _1718 = abs((1.0 - _1673) / _1684);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1673 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1718 = frontier_phi_17_15_ladder;
        }
        float _1941;
        if (_1687 > 0.0)
        {
            _1941 = abs((1.0 - _1677) / _1687);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1677 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1941 = frontier_phi_26_22_ladder;
        }
        float _2187;
        if (_1690 > 0.0)
        {
            _2187 = abs((1.0 - _1681) / _1690);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1681 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2187 = frontier_phi_38_33_ladder;
        }
        float _2189 = isnan(_1941) ? _1718 : (isnan(_1718) ? _1941 : min(_1718, _1941));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1684) + _1673;
        float _2195 = (_2190 * _1687) + _1677;
        float _2196 = (_2190 * _1690) + _1681;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1626);
            frontier_phi_16_38_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1706 = frontier_phi_16_38_ladder_2;
        _1708 = frontier_phi_16_38_ladder_1;
        _1710 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1626);
        _1706 = _1694.x * cbModelParam._m0[1u].y;
        _1708 = _1694.y * cbModelParam._m0[1u].y;
        _1710 = _1694.z * cbModelParam._m0[1u].y;
    }
    float _1714 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _618);
    float _1715 = isnan(_1714) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1714 : min(cbModelParam._m0[25u].w, _1714));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1768 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1772 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1776 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1779 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1782 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1785 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1946;
        if (_1779 > 0.0)
        {
            _1946 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1946 = frontier_phi_28_24_ladder;
        }
        float _2214;
        if (_1782 > 0.0)
        {
            _2214 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2214 = frontier_phi_40_35_ladder;
        }
        float _2419;
        if (_1785 > 0.0)
        {
            _2419 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2419 = frontier_phi_49_46_ladder;
        }
        float _2421 = isnan(_2214) ? _1946 : (isnan(_1946) ? _2214 : min(_1946, _2214));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1779) + _1768;
        float _2427 = (_2422 * _1782) + _1772;
        float _2428 = (_2422 * _1785) + _1776;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1715);
            frontier_phi_25_49_ladder = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2627.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2627.x * cbModelParam._m0[1u].z;
        }
        _1804 = frontier_phi_25_49_ladder_2;
        _1806 = frontier_phi_25_49_ladder_1;
        _1808 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1715);
        _1804 = _1788.x * cbModelParam._m0[1u].z;
        _1806 = _1788.y * cbModelParam._m0[1u].z;
        _1808 = _1788.z * cbModelParam._m0[1u].z;
    }
    float _1820 = ((((1.0 - _808) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_808 * _795)) * _779;
    float _1821 = _1820 * ((cbModelParam._m0[1u].w * (_1804 - _1706)) + _1706);
    float _1822 = _1820 * ((cbModelParam._m0[1u].w * (_1806 - _1708)) + _1708);
    float _1823 = _1820 * ((cbModelParam._m0[1u].w * (_1808 - _1710)) + _1710);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, _1821 * cbSceneParam._m0[91u].x));
    vec4 _1840 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_714, _715));
    float _1842 = _1840.w;
    float _1854 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1842);
    float _1855 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1842);
    float _1856 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1842);
    uvec4 _1860 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1862 = _1860.x * 14u;
    uint _1863 = _1862 + 13u;
    float _1870 = _779 + (-1.0);
    float _1875 = (cbLight._m0[_1863].x * _1870) + 1.0;
    float _1876 = (cbLight._m0[_1863].y * _1870) + 1.0;
    float _1877 = (cbLight._m0[_1863].z * _1870) + 1.0;
    float _1878 = (cbLight._m0[_1863].w * _1870) + 1.0;
    uint _1879 = _1862 + 5u;
    float _1885 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1889 = _1862 + 4u;
    float _1899 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1903 = _1862 | 1u;
    float _1914 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_615, _616, _617));
    float _1917 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_615, _616, _617));
    float _4150 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _4161 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1922 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1924 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _1931 = ((cbLight._m0[_1879].x * _1885) * _1924) + (((cbLight._m0[_1889].x * _1854) * _1899) * _1922);
    float _1932 = ((_1885 * cbLight._m0[_1879].y) * _1924) + (((cbLight._m0[_1889].y * _1855) * _1899) * _1922);
    float _1933 = ((_1885 * cbLight._m0[_1879].z) * _1924) + (((cbLight._m0[_1889].z * _1856) * _1899) * _1922);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1862 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1940)
    {
        _1951 = _1931;
        _1953 = _1932;
        _1955 = _1933;
    }
    else
    {
        uint _1959 = _1862 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1862 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4172 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1978 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1931;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1932;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1933;
    }
    bool _1958 = _1938.y == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1958)
    {
        _1996 = _1951;
        _1998 = _1953;
        _2000 = _1955;
    }
    else
    {
        uint _2158 = _1862 + 7u;
        float _2174 = (dot(vec3(cbLight._m0[_1862 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4188 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2177 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _1996 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _1951;
        _1998 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _1953;
        _2000 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _1955;
    }
    uint _2003 = _1862 + 8u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _618) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1862].x + _693;
    float _2019 = cbLight._m0[_1862].y + _694;
    float _2020 = cbLight._m0[_1862].z + _695;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_1862].xyz));
    float _4204 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _2032 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2033 = dot(vec3(_615, _616, _617), vec3(_2025, _2026, _2027));
    float _4226 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2025, _2026, _2027));
    float _4237 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2017 * _2017;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2057 = 1.0 - _2017;
    float _2068 = (0.5 / (((_2032 * ((_2031 * _2057) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2057) + _2017) * _2031))) * _2031;
    float _4248 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    uint _2084 = _1862 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _618) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1903].x + _693;
    float _2098 = cbLight._m0[_1903].y + _694;
    float _2099 = cbLight._m0[_1903].z + _695;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_1903].xyz));
    float _4259 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2111 = dot(vec3(_615, _616, _617), vec3(_2104, _2105, _2106));
    float _4270 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2104, _2105, _2106));
    float _4281 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2133 = 1.0 - _2096;
    float _2143 = (0.5 / (((_2032 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2133) + _2096) * _2110))) * _2110;
    float _4292 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2155 = (((_2132 * cbLight._m0[_2084].x) * _2145) * _1885) + ((((cbLight._m0[_2003].x * _1854) * _2056) * _2070) * _1899);
    float _2156 = (((_2132 * cbLight._m0[_2084].y) * _2145) * _1885) + ((((cbLight._m0[_2003].y * _1855) * _2056) * _2070) * _1899);
    float _2157 = (((_2132 * cbLight._m0[_2084].z) * _2145) * _1885) + ((((cbLight._m0[_2003].z * _1856) * _2056) * _2070) * _1899);
    float _2219;
    float _2221;
    float _2223;
    if (_1940)
    {
        _2219 = _2155;
        _2221 = _2156;
        _2223 = _2157;
    }
    else
    {
        uint _2225 = _1862 + 2u;
        uint _2229 = _1862 + 10u;
        float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _618) * 0.949999988079071044921875);
        float _2244 = _2243 * _2243;
        float _2245 = cbLight._m0[_2225].x + _693;
        float _2246 = cbLight._m0[_2225].y + _694;
        float _2247 = cbLight._m0[_2225].z + _695;
        float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
        float _2252 = _2251 * _2245;
        float _2253 = _2251 * _2246;
        float _2254 = _2251 * _2247;
        float _2255 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2225].xyz));
        float _4303 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2259 = dot(vec3(_615, _616, _617), vec3(_2252, _2253, _2254));
        float _4314 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2263 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2252, _2253, _2254));
        float _4325 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2267 = _2244 * _2244;
        float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
        float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2281 = 1.0 - _2244;
        float _2291 = (0.5 / (((_2032 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2281) + _2244) * _2258))) * _2258;
        float _4336 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2293 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
        float _2294 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2219 = (((_2280 * cbLight._m0[_2229].x) * _2293) * _2294) + _2155;
        _2221 = (((_2280 * cbLight._m0[_2229].y) * _2293) * _2294) + _2156;
        _2223 = (((_2280 * cbLight._m0[_2229].z) * _2293) * _2294) + _2157;
    }
    float _2329;
    float _2331;
    float _2333;
    if (_1958)
    {
        _2329 = _2219;
        _2331 = _2221;
        _2333 = _2223;
    }
    else
    {
        uint _2340 = _1862 + 3u;
        uint _2344 = _1862 + 11u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _618) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _693;
        float _2361 = cbLight._m0[_2340].y + _694;
        float _2362 = cbLight._m0[_2340].z + _695;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2340].xyz));
        float _4352 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2374 = dot(vec3(_615, _616, _617), vec3(_2367, _2368, _2369));
        float _4363 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4374 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2396 = 1.0 - _2359;
        float _2406 = (0.5 / (((_2032 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2396) + _2359) * _2373))) * _2373;
        float _4385 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2329 = (((_2395 * cbLight._m0[_2344].x) * _2408) * _2409) + _2219;
        _2331 = (((_2395 * cbLight._m0[_2344].y) * _2408) * _2409) + _2221;
        _2333 = (((_2395 * cbLight._m0[_2344].z) * _2408) * _2409) + _2223;
    }
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_1860.y == 0u)
    {
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2484;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2484;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2484;
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _715) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _714) / _2500)));
        float _2521 = (log2(_2487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
        }
        else
        {
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            uint _2790 = 0u;
            uint _2799;
            bool _2800;
            for (;;)
            {
                _2799 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                _2800 = _2799 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2800)
                {
                    frontier_phi_66_pred = _2784;
                    frontier_phi_66_pred_1 = _2789;
                    frontier_phi_66_pred_2 = _2788;
                    frontier_phi_66_pred_3 = _2787;
                    frontier_phi_66_pred_4 = _2786;
                    frontier_phi_66_pred_5 = _2785;
                }
                else
                {
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    uint _2935;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2799;
                    float _2856;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    for (;;)
                    {
                        uint _2939 = uint(findLSB(_2935)) + (_2790 << 5u);
                        uint _2936 = (_2935 + 4294967295u) & _2935;
                        uint _2941 = _2939 * 48u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2961 = (_2939 * 48u) + 4u;
                        vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2980 = (_2939 * 48u) + 8u;
                        vec3 _2991 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x));
                        float _2995 = _2955.x - _2485;
                        float _2996 = _2955.y - _2486;
                        float _2997 = _2955.z - _2487;
                        float _2998 = dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997));
                        float _3001 = inversesqrt(_2998);
                        float _3002 = _3001 * _2995;
                        float _3003 = _3001 * _2996;
                        float _3004 = _3001 * _2997;
                        float _3005 = dot(vec3(_735, _738, _741), vec3(_3002, _3003, _3004));
                        float _3010 = 1.0 - (_2998 * _2955.w);
                        float _4411 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3011 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3012 = sqrt(_2998) * _2974.w;
                        float _3015 = 1.39999997615814208984375 / (_3012 + 1.39999997615814208984375);
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _3005) + _3016;
                        float _3022 = _3012 * _3012;
                        float _3026 = ((isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))) * _3011) / ((_3022 * 0.699999988079071044921875) + 1.0);
                        float _3030 = (-0.0) - _2485;
                        float _3031 = (-0.0) - _2486;
                        float _3032 = (-0.0) - _2487;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3037 = _3036 * _3030;
                        float _3038 = _3036 * _3031;
                        float _3039 = _3036 * _3032;
                        float _3047 = exp2(log2(1.0 / ((_3022 * 3.5) + 5.0)) * 0.25);
                        float _3048 = 1.0 - _795;
                        float _3055 = sqrt(1.0 - ((1.0 - (_3048 * _3048)) * (1.0 - (_3047 * _3047))));
                        float _3056 = _3055 * _3055;
                        float _3057 = _3056 * _3056;
                        float _3058 = _3037 + _3002;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3068 = dot(vec3(_735, _738, _741), vec3(_3037, _3038, _3039));
                        float _4427 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3072 = dot(vec3(_735, _738, _741), vec3(_3064 * _3058, _3064 * _3059, _3064 * _3060));
                        float _4438 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3079 = ((_3075 * _3075) * (_3057 + (-1.0))) + 1.0;
                        float _3080 = _3015 * _3056;
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3005) + _3081;
                        float _4449 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
                        float _3085 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3086 = 1.0 - _3056;
                        float _3096 = (0.5 / (((_3085 * ((_3071 * _3086) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_3085 * _3086) + _3056) * _3071))) * _3085;
                        float _4460 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3107 = (((_3057 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3079 * _3079) * ((_3022 * 2.1991131305694580078125) + 3.141590118408203125))) * _3011;
                        _2859 = (_3026 * _2974.x) + _2932;
                        _2860 = (_3026 * _2974.y) + _2933;
                        _2861 = (_3026 * _2974.z) + _2934;
                        _2856 = (_3107 * _2991.x) + _2929;
                        _2857 = (_3107 * _2991.y) + _2930;
                        _2858 = (_3107 * _2991.z) + _2931;
                        if (_2936 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2936;
                        }
                    }
                    frontier_phi_66_pred = _2856;
                    frontier_phi_66_pred_1 = _2861;
                    frontier_phi_66_pred_2 = _2860;
                    frontier_phi_66_pred_3 = _2859;
                    frontier_phi_66_pred_4 = _2858;
                    frontier_phi_66_pred_5 = _2857;
                }
                _2633 = frontier_phi_66_pred;
                _2643 = frontier_phi_66_pred_1;
                _2641 = frontier_phi_66_pred_2;
                _2639 = frontier_phi_66_pred_3;
                _2637 = frontier_phi_66_pred_4;
                _2635 = frontier_phi_66_pred_5;
                uint _2791 = _2790 + 1u;
                if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2784 = _2633;
                    _2785 = _2635;
                    _2786 = _2637;
                    _2787 = _2639;
                    _2788 = _2641;
                    _2789 = _2643;
                    _2790 = _2791;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
        }
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.z;
        uint _2649 = (_2647 >> 8u) & 15u;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((4294967295u << _2649) & _2531) == 0u)
        {
            _2752 = _2632;
            _2754 = _2634;
            _2756 = _2636;
            _2758 = _2638;
            _2760 = _2640;
            _2762 = _2642;
        }
        else
        {
            float _2777 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
            float _2778 = _2777 * _2485;
            float _2779 = _2777 * _2486;
            float _2780 = _2777 * _2487;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2649 < ((_2647 >> 12u) & 15u))
            {
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2912 = _2632;
                float _2913 = _2634;
                float _2914 = _2636;
                float _2915 = _2638;
                float _2916 = _2640;
                float _2917 = _2642;
                uint _2918 = _2649;
                uint _2927;
                bool _2928;
                for (;;)
                {
                    _2927 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2918 << 2u)) >> 2u)).x;
                    _2928 = _2927 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2928)
                    {
                        frontier_phi_77_pred = _2917;
                        frontier_phi_77_pred_1 = _2916;
                        frontier_phi_77_pred_2 = _2915;
                        frontier_phi_77_pred_3 = _2914;
                        frontier_phi_77_pred_4 = _2913;
                        frontier_phi_77_pred_5 = _2912;
                    }
                    else
                    {
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        float _3137 = _2915;
                        float _3138 = _2916;
                        float _3139 = _2917;
                        uint _3140 = _2927;
                        uint _3141;
                        vec4 _3166;
                        float _3167;
                        vec4 _3182;
                        vec3 _3194;
                        vec4 _3210;
                        vec4 _3226;
                        float _3272;
                        bool _3273;
                        for (;;)
                        {
                            uint _3151 = ((_2918 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3140));
                            _3141 = (_3140 + 4294967295u) & _3140;
                            uint _3153 = _3151 * 40u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3167 = _3166.w;
                            uint _3169 = (_3151 * 40u) + 4u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3151 * 40u) + 8u;
                            _3194 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x));
                            uint _3197 = (_3151 * 40u) + 16u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3213 = (_3151 * 40u) + 20u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3151 * 40u) + 24u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3247 = (_3151 * 40u) + 28u;
                            vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3272 = fma(_2487, _3260.z, fma(_2486, _3260.y, _3260.x * _2485)) + _3260.w;
                            _3273 = !((fma(_2487, _3241.z, fma(_2486, _3241.y, _3241.x * _2485)) + _3241.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3273)
                            {
                                float _3300 = _3166.x - _2485;
                                float _3301 = _3166.y - _2486;
                                float _3302 = _3166.z - _2487;
                                float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                                float _3306 = inversesqrt(_3303);
                                float _3307 = _3306 * _3300;
                                float _3308 = _3306 * _3301;
                                float _3309 = _3306 * _3302;
                                float _3313 = 1.0 - (_3303 / (_3167 * _3167));
                                float _4471 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3314 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3318 = sqrt(_3303) * _3182.w;
                                float _3320 = 1.39999997615814208984375 / (_3318 + 1.39999997615814208984375);
                                float _3321 = _3320 * _3320;
                                float _3324 = ((1.0 - _3321) * dot(vec3(_3307, _3308, _3309), vec3(_735, _738, _741))) + _3321;
                                float _3327 = _3318 * _3318;
                                float _3331 = (fma(_2487, _3210.z, fma(_2486, _3210.y, _3210.x * _2485)) + _3210.w) / _3272;
                                float _3332 = (fma(_2487, _3226.z, fma(_2486, _3226.y, _3226.x * _2485)) + _3226.w) / _3272;
                                float _3336 = 1.0 - dot(vec2(_3331, _3332), vec2(_3331, _3332));
                                float _4487 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3338 = _3337 * (((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3314) / ((_3327 * 0.699999988079071044921875) + 1.0));
                                float _3350 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                                float _3351 = 1.0 - _795;
                                float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                                float _3359 = _3358 * _3358;
                                float _3360 = _3359 * _3359;
                                float _3361 = _3307 - _2778;
                                float _3362 = _3308 - _2779;
                                float _3363 = _3309 - _2780;
                                float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                                float _3371 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2778, (-0.0) - _2779, (-0.0) - _2780));
                                float _4498 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3375 = dot(vec3(_735, _738, _741), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                                float _4509 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3378 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                                float _3383 = _3320 * _3359;
                                float _3384 = _3383 * _3383;
                                float _3390 = ((1.0 - _3384) * dot(vec3(_735, _738, _741), vec3(_3307, _3308, _3309))) + _3384;
                                float _4520 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3391 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3392 = 1.0 - _3359;
                                float _3402 = (0.5 / (((_3391 * ((_3374 * _3392) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3391 * _3392) + _3359) * _3374))) * _3391;
                                float _4531 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3412 = (_3337 * _3314) * (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3382 * _3382) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3338 * _3182.y;
                                frontier_phi_83_pred_1 = _3338 * _3182.x;
                                frontier_phi_83_pred_2 = _3412 * _3194.z;
                                frontier_phi_83_pred_3 = _3412 * _3194.y;
                                frontier_phi_83_pred_4 = _3412 * _3194.x;
                                frontier_phi_83_pred_5 = _3338 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_83_pred;
                            _3419 = frontier_phi_83_pred_1;
                            _3418 = frontier_phi_83_pred_2;
                            _3417 = frontier_phi_83_pred_3;
                            _3416 = frontier_phi_83_pred_4;
                            _3421 = frontier_phi_83_pred_5;
                            _3124 = _3419 + _3137;
                            _3125 = _3420 + _3138;
                            _3126 = _3421 + _3139;
                            _3121 = _3416 + _3134;
                            _3122 = _3417 + _3135;
                            _3123 = _3418 + _3136;
                            if (_3141 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3141;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3126;
                        frontier_phi_77_pred_1 = _3125;
                        frontier_phi_77_pred_2 = _3124;
                        frontier_phi_77_pred_3 = _3123;
                        frontier_phi_77_pred_4 = _3122;
                        frontier_phi_77_pred_5 = _3121;
                    }
                    _2763 = frontier_phi_77_pred;
                    _2761 = frontier_phi_77_pred_1;
                    _2759 = frontier_phi_77_pred_2;
                    _2757 = frontier_phi_77_pred_3;
                    _2755 = frontier_phi_77_pred_4;
                    _2753 = frontier_phi_77_pred_5;
                    uint _2919 = _2918 + 1u;
                    if (_2919 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2912 = _2753;
                        _2913 = _2755;
                        _2914 = _2757;
                        _2915 = _2759;
                        _2916 = _2761;
                        _2917 = _2763;
                        _2918 = _2919;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2757;
                frontier_phi_58_59_ladder_1 = _2763;
                frontier_phi_58_59_ladder_2 = _2761;
                frontier_phi_58_59_ladder_3 = _2759;
                frontier_phi_58_59_ladder_4 = _2755;
                frontier_phi_58_59_ladder_5 = _2753;
            }
            else
            {
                frontier_phi_58_59_ladder = _2636;
                frontier_phi_58_59_ladder_1 = _2642;
                frontier_phi_58_59_ladder_2 = _2640;
                frontier_phi_58_59_ladder_3 = _2638;
                frontier_phi_58_59_ladder_4 = _2634;
                frontier_phi_58_59_ladder_5 = _2632;
            }
            _2752 = frontier_phi_58_59_ladder_5;
            _2754 = frontier_phi_58_59_ladder_4;
            _2756 = frontier_phi_58_59_ladder;
            _2758 = frontier_phi_58_59_ladder_3;
            _2760 = frontier_phi_58_59_ladder_2;
            _2762 = frontier_phi_58_59_ladder_1;
        }
        float _2767 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2544 = (_2767 * _2758) + _1996;
        _2546 = (_2767 * _2760) + _1998;
        _2548 = (_2767 * _2762) + _2000;
        _2550 = ((_2752 * 0.039999999105930328369140625) * _2767) + _2329;
        _2552 = ((_2754 * 0.039999999105930328369140625) * _2767) + _2331;
        _2554 = ((_2756 * 0.039999999105930328369140625) * _2767) + _2333;
    }
    else
    {
        _2544 = _1996;
        _2546 = _1998;
        _2548 = _2000;
        _2550 = _2329;
        _2552 = _2331;
        _2554 = _2333;
    }
    float _4547 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4558 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4569 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _2571 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2544 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _779))) + ((_2550 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1615)) * cbPerFrame._m0[3u].x);
    float _2572 = ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2546 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _779))) + ((_2552 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1615)) * cbPerFrame._m0[3u].x);
    float _2573 = ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2548 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _779))) + ((_2554 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1615)) * cbPerFrame._m0[3u].x);
    uint _2574 = _241 + 6u;
    float _2582 = _714 / cbSceneParam._m0[86u].x;
    float _2583 = _715 / cbSceneParam._m0[86u].y;
    vec4 _2597 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2599 = _2597.x;
    float _2600 = _2597.y;
    float _2601 = _2597.z;
    float _2602 = _2597.w;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2657 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2658 = _2657 / _636;
        float _2669 = _2658 * _686;
        float _2670 = _687 * _2658;
        float _2671 = (-0.0) - _2670;
        float _2672 = _2658 * _688;
        float _2674 = (cbSceneParam._m0[77u].w * _2671) / _2657;
        float _2675 = _2674 + cbSceneParam._m0[79u].w;
        float _2676 = cbSceneParam._m0[79u].w - _2670;
        float _2682 = sqrt(((_2669 * _2669) + (_2670 * _2670)) + (_2672 * _2672));
        float _2685 = (1.0 - (cbSceneParam._m0[77u].w / _2657)) * _2682;
        float _2690 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2692 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2869;
        if (abs((_2671 - _2674) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2869 = ((((_2675 > 0.0) ? exp2(_2690 * _2675) : (2.0 - exp2(_2692 * _2675))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2685;
        }
        else
        {
            float _2813 = 1.0 / cbSceneParam._m0[80u].x;
            float _2814 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : max(_2675, _2676));
            float _2815 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : min(_2675, _2676));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            _2869 = ((abs(_2682 / _2671) * cbSceneParam._m0[80u].y) * ((((_2824 - _2825) * 2.0) - ((exp2(_2690 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0)))) - exp2(_2690 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))))) * _2813)) - ((exp2(_2692 * _2824) - exp2(_2692 * _2825)) * _2813))) + (_2685 * cbSceneParam._m0[80u].z);
        }
        vec4 _2871 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, 1.0), 0.0);
        float _2880 = exp2((_2869 * (-1.44269502162933349609375)) * (1.0 - _2871.w));
        float _2881 = log2(_2880);
        float _2897 = log2(_2602);
        _2694 = (exp2(_2897 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].x)) * _2871.x) / cbSceneParam._m0[78u].x)) + _2599;
        _2696 = (exp2(_2897 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].y)) * _2871.y) / cbSceneParam._m0[78u].y)) + _2600;
        _2698 = (exp2(_2897 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2881 * cbSceneParam._m0[78u].z)) * _2871.z) / cbSceneParam._m0[78u].z)) + _2601;
        _2700 = _2880 * _2602;
    }
    else
    {
        _2694 = _2599;
        _2696 = _2600;
        _2698 = _2601;
        _2700 = _2602;
    }
    bool _2907;
    vec4 _2710;
    vec4 _2732;
    float _2734;
    float _2738;
    float _2739;
    float _2740;
    float _2741;
    bool _2751;
    for (;;)
    {
        _2710 = cbMatDynParam._m0[0u];
        float _2712 = roundEven(_2710.y);
        bool _2713 = _2712 == 3.0;
        float _2714 = log2(_2700);
        float _2721 = exp2(_2714 * cbSceneParam._m0[78u].x) * _2571;
        float _2722 = exp2(_2714 * cbSceneParam._m0[78u].y) * _2572;
        float _2723 = exp2(_2714 * cbSceneParam._m0[78u].z) * _2573;
        float _2730 = _702 + (-0.5);
        _2732 = cbMtdParam._m0[1u];
        _2734 = _2732.y * _2730;
        float _2737 = (_2712 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2738 = _2737 * (_2713 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2694)));
        _2739 = _2737 * (_2713 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2696)));
        _2740 = _2737 * (_2713 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2698)));
        _2741 = _2730 * 0.999000012874603271484375;
        _2751 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2751)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2741) < 0.5)
            {
                _2907 = true;
                break;
            }
        }
        uint _2848 = _754 + uint(_2710.w);
        if ((cbInstanceData._m0[_2848].w < 1.0) && ((cbInstanceData._m0[_2848].w + _2741) < 0.5))
        {
            _2907 = true;
            break;
        }
        if ((_2734 + 1.0) < _2732.x)
        {
            _2907 = true;
            break;
        }
        _2907 = false;
        break;
    }
    float _3112;
    if (_2907)
    {
        discard_state = true;
        _3112 = 0.0;
    }
    else
    {
        _3112 = cbInstanceData._m0[_2574].w;
    }
    SV_Target.x = _2738;
    SV_Target.y = _2739;
    SV_Target.z = _2740;
    SV_Target.w = _3112;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2574].w;
    discard_exit();
}


