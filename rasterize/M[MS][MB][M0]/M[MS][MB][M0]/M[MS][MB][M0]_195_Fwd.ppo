#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1240;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _351 = _349.x;
    float _361 = dot(vec4(_351, _349.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_351 - _361) * cbMtdParam._m0[24u].x) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3543 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _386 = (_379 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _387 = (_379 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _388 = (_379 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _437 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _451 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_427 - _437) * cbMtdParam._m0[24u].x) + _437) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3554 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _459 = (_452 * ((_405.x * cbMtdParam._m0[13u].x) - _386)) + _386;
    float _460 = (_452 * ((_405.y * cbMtdParam._m0[13u].y) - _387)) + _387;
    float _461 = (_452 * ((_405.z * cbMtdParam._m0[13u].z) - _388)) + _388;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _550 = ((_522.x - _541) * _379) + _541;
    float _551 = ((_522.y - _542) * _379) + _542;
    float _552 = ((_522.z - _543) * _379) + _543;
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _577 = ((_564.z - _552) * _452) + _552;
    float _580 = ((((_564.x - _550) * _452) + _550) * 2.0) + (-1.0);
    float _581 = ((((_564.y - _551) * _452) + _551) * 2.0) + (-1.0);
    float _582 = dot(vec2(_580, _581), vec2(_580, _581));
    float _3565 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _587 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    vec4 _600 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _634 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_620 - _621) * cbMtdParam._m0[24u].z) + _621) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3576 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _642 = (_635 * ((_480.x * cbMtdParam._m0[18u].x) - _459)) + _459;
    float _643 = (_635 * ((_480.y * cbMtdParam._m0[18u].y) - _460)) + _460;
    float _644 = (_635 * ((_480.z * cbMtdParam._m0[18u].z) - _461)) + _461;
    float _649 = (((_499.z - _577) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _577;
    vec4 _662 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _669 = (_662.x * 2.0) + (-1.0);
    float _670 = (_662.y * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3587 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _679 = (_635 * (_662.z - _649)) + _649;
    float _684 = _580 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_499.x * 2.0) + (-1.0)));
    float _685 = _581 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_499.y * 2.0) + (-1.0)));
    float _697 = (((_669 - _684) + (cbMtdParam._m0[21u].x * _684)) * _635) + _684;
    float _698 = (((_670 - _685) + (cbMtdParam._m0[21u].x * _685)) * _635) + _685;
    float _699 = (_635 * (sqrt(1.0 - (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0)))) - _587)) + _587;
    float _704 = cbMtdParam._m0[22u].x + _600.w;
    float _707 = fma(_699, _229 * NORMAL.x, fma(_698, _236 * TANGENT.x, (_222 * _214) * _697));
    float _710 = fma(_699, _229 * NORMAL.y, fma(_698, _236 * TANGENT.y, (_222 * _215) * _697));
    float _713 = fma(_699, _229 * NORMAL.z, fma(_698, _236 * TANGENT.z, (_222 * _216) * _697));
    float _717 = inversesqrt(dot(vec3(_707, _710, _713), vec3(_707, _710, _713)));
    float _718 = _717 * _707;
    float _719 = _717 * _710;
    float _720 = _717 * _713;
    float _3598 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _721 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3620 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3631 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _3642 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _739 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    float _806 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _807 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _825 = fma(_720, cbSceneParam._m0[5u].z, fma(_719, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _718));
    float _828 = fma(_720, cbSceneParam._m0[6u].z, fma(_719, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _718));
    float _831 = fma(_720, cbSceneParam._m0[7u].z, fma(_719, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _718));
    uint _845 = (_242 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3653 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    vec4 _865 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _806, cbSceneParam._m0[86u].y * _807));
    float _869 = ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * TEXCOORD_5.w) * _865.x;
    float _870 = dot(vec3(_718, _719, _720), vec3(_798, _799, _800));
    float _873 = _870 * 2.0;
    float _877 = (_873 * _718) - _798;
    float _878 = (_873 * _719) - _799;
    float _879 = (_873 * _720) - _800;
    float _883 = abs(dot(vec3(_798, _799, _800), vec3(_718, _719, _720)));
    float _3686 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _885 = sqrt(_721);
    float _898 = exp2((_885 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_885 * 3.0));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _964 = fma(_938, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930));
        float _968 = fma(_938, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930));
        float _972 = fma(_938, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930));
        float _997 = _930 + _718;
        float _998 = _934 + _719;
        float _999 = _938 + _720;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _964;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _968;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _972;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_964 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_968 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_972 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_718, _719, _720), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3734 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_718, _719, _720), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3767 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_718, _719, _720), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3800 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1278 = fma(_938, cbModelParam._m0[30u].z, fma(_934, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930));
        float _1282 = fma(_938, cbModelParam._m0[31u].z, fma(_934, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930));
        float _1286 = fma(_938, cbModelParam._m0[32u].z, fma(_934, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930));
        float _1309 = _930 + _718;
        float _1310 = _934 + _719;
        float _1311 = _938 + _720;
        float _1321 = fma(_1311, cbModelParam._m0[30u].z, fma(_1310, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309)) - _1278;
        float _1322 = fma(_1311, cbModelParam._m0[31u].z, fma(_1310, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309)) - _1282;
        float _1323 = fma(_1311, cbModelParam._m0[32u].z, fma(_1310, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309)) - _1286;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1278 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1282 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[35u].z) + ((((((_1286 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1377 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1344.x + (-0.5));
        float _1379 = _1377 * (_1344.y + (-0.5));
        float _1380 = _1377 * (_1344.z + (-0.5));
        float _1387 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1351.x + (-0.5));
        float _1389 = _1387 * (_1351.y + (-0.5));
        float _1390 = _1387 * (_1351.z + (-0.5));
        float _1397 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1358.x + (-0.5));
        float _1399 = _1397 * (_1358.y + (-0.5));
        float _1400 = _1397 * (_1358.z + (-0.5));
        float _1407 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1365.x + (-0.5));
        float _1409 = _1407 * (_1365.y + (-0.5));
        float _1410 = _1407 * (_1365.z + (-0.5));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = _1378 * 0.5;
        float _1415 = _1388 * 0.5;
        float _1416 = _1398 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_718, _719, _720), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3841 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3852 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3863 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1441 + 1.0))) + _1446) * _1411;
        float _1456 = _1379 * 0.5;
        float _1457 = _1389 * 0.5;
        float _1458 = _1399 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_718, _719, _720), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _3896 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1483 + 1.0))) + _1488) * _1412;
        float _1498 = _1380 * 0.5;
        float _1499 = _1390 * 0.5;
        float _1500 = _1400 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_718, _719, _720), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _3929 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1525 + 1.0))) + _1530) * _1413;
        _1547 = _1380;
        _1548 = _1379;
        _1549 = _1378;
        _1550 = _1390;
        _1551 = _1389;
        _1552 = _1388;
        _1553 = _1400;
        _1554 = _1399;
        _1555 = _1398;
        _1556 = _1413;
        _1557 = _1412;
        _1558 = _1411;
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1240;
        _1548 = _1240;
        _1549 = _1240;
        _1550 = _1240;
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1252)) + _1252;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1253)) + _1253;
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1254)) + _1254;
    float _1594 = fma(_1573, cbSceneParam._m0[89u].z, fma(_1572, cbSceneParam._m0[89u].y, _1571 * cbSceneParam._m0[89u].x));
    float _1597 = fma(_1573, cbSceneParam._m0[90u].z, fma(_1572, cbSceneParam._m0[90u].y, _1571 * cbSceneParam._m0[90u].x));
    float _1600 = fma(_1573, cbSceneParam._m0[91u].z, fma(_1572, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1571));
    float _1615 = _877 * 0.5;
    float _1616 = _878 * 0.5;
    float _1617 = _879 * 0.5;
    float _1618 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1621 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1624 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1658;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1631 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1635 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1639 = dot(vec4(_1615, _1616, _1617, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1646 = dot(vec4(cbModelParam._m0[39u]), vec4(_1615, _1616, _1617, 1.0));
        _1658 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1646) ? 0.0 : (isnan(0.0) ? _1646 : max(0.0, _1646))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1658 = 1.0;
    }
    float _1669;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1660 = dot(vec4(cbModelParam._m0[40u]), vec4(_1615, _1616, _1617, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1673 = (_1669 * cbModelParam._m0[1u].x) + (_1658 * (1.0 - cbModelParam._m0[1u].x));
    float _1683 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _721);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1683 : min(cbModelParam._m0[25u].z, _1683));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1731 = fma(_938, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930)) + cbModelParam._m0[13u].w;
        float _1735 = fma(_938, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930)) + cbModelParam._m0[14u].w;
        float _1739 = fma(_938, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930)) + cbModelParam._m0[15u].w;
        float _1742 = fma(_879, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877));
        float _1745 = fma(_879, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877));
        float _1748 = fma(_879, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877));
        float _1776;
        if (_1742 > 0.0)
        {
            _1776 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1776 = frontier_phi_14_12_ladder;
        }
        float _1976;
        if (_1745 > 0.0)
        {
            _1976 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1976 = frontier_phi_23_19_ladder;
        }
        float _2219;
        if (_1748 > 0.0)
        {
            _2219 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2219 = frontier_phi_35_30_ladder;
        }
        float _2221 = isnan(_1976) ? _1776 : (isnan(_1776) ? _1976 : min(_1776, _1976));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1742) + _1731;
        float _2227 = (_2222 * _1745) + _1735;
        float _2228 = (_2222 * _1748) + _1739;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2229;
        float _2233 = _2229 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 > _2233) || ((_2227 < _2231) || ((_2226 < _2231) || (_2226 > _2233))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2228, cbModelParam._m0[9u].z, fma(_2227, cbModelParam._m0[9u].y, _2226 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2228, cbModelParam._m0[10u].z, fma(_2227, cbModelParam._m0[10u].y, _2226 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2228, cbModelParam._m0[11u].z, fma(_2227, cbModelParam._m0[11u].y, _2226 * cbModelParam._m0[11u].x))), _1684);
            frontier_phi_13_35_ladder = _2352.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2352.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2352.x * cbModelParam._m0[1u].y;
        }
        _1764 = frontier_phi_13_35_ladder_2;
        _1766 = frontier_phi_13_35_ladder_1;
        _1768 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_877, _878, _879), _1684);
        _1764 = _1752.x * cbModelParam._m0[1u].y;
        _1766 = _1752.y * cbModelParam._m0[1u].y;
        _1768 = _1752.z * cbModelParam._m0[1u].y;
    }
    float _1772 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _721);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1772 : min(cbModelParam._m0[25u].w, _1772));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1826 = fma(_938, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930)) + cbModelParam._m0[21u].w;
        float _1830 = fma(_938, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930)) + cbModelParam._m0[22u].w;
        float _1834 = fma(_938, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930)) + cbModelParam._m0[23u].w;
        float _1837 = fma(_879, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877));
        float _1840 = fma(_879, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877));
        float _1843 = fma(_879, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877));
        float _1981;
        if (_1837 > 0.0)
        {
            _1981 = abs((1.0 - _1826) / _1837);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1826 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1981 = frontier_phi_25_21_ladder;
        }
        float _2246;
        if (_1840 > 0.0)
        {
            _2246 = abs((1.0 - _1830) / _1840);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1830 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2246 = frontier_phi_37_32_ladder;
        }
        float _2451;
        if (_1843 > 0.0)
        {
            _2451 = abs((1.0 - _1834) / _1843);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1834 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2451 = frontier_phi_46_43_ladder;
        }
        float _2453 = isnan(_2246) ? _1981 : (isnan(_1981) ? _2246 : min(_1981, _2246));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1837) + _1826;
        float _2459 = (_2454 * _1840) + _1830;
        float _2460 = (_2454 * _1843) + _1834;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2461;
        float _2464 = _2461 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2460 > _2464) || ((_2460 < _2462) || ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 < _2462) || (_2458 > _2464))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2659 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2460, cbModelParam._m0[17u].z, fma(_2459, cbModelParam._m0[17u].y, _2458 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2460, cbModelParam._m0[18u].z, fma(_2459, cbModelParam._m0[18u].y, _2458 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2460, cbModelParam._m0[19u].z, fma(_2459, cbModelParam._m0[19u].y, _2458 * cbModelParam._m0[19u].x))), _1773);
            frontier_phi_22_46_ladder = _2659.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2659.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2659.x * cbModelParam._m0[1u].z;
        }
        _1862 = frontier_phi_22_46_ladder_2;
        _1864 = frontier_phi_22_46_ladder_1;
        _1866 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_877, _878, _879), _1773);
        _1862 = _1846.x * cbModelParam._m0[1u].z;
        _1864 = _1846.y * cbModelParam._m0[1u].z;
        _1866 = _1846.z * cbModelParam._m0[1u].z;
    }
    float _1878 = ((((1.0 - _898) * ((_885 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_898 * _885)) * _869;
    float _1879 = _1878 * ((cbModelParam._m0[1u].w * (_1862 - _1764)) + _1764);
    float _1880 = _1878 * ((cbModelParam._m0[1u].w * (_1864 - _1766)) + _1766);
    float _1881 = _1878 * ((cbModelParam._m0[1u].w * (_1866 - _1768)) + _1768);
    float _1884 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1887 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1890 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, _1879 * cbSceneParam._m0[91u].x));
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _869 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1935 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1939 = _1902 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_718, _719, _720));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_718, _719, _720));
    float _4065 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _4076 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1919].x * _1925) * _1960) + ((cbLight._m0[_1929].x * _1935) * _1958);
    float _1968 = ((_1925 * cbLight._m0[_1919].y) * _1960) + ((_1935 * cbLight._m0[_1929].y) * _1958);
    float _1969 = ((_1925 * cbLight._m0[_1919].z) * _1960) + ((_1935 * cbLight._m0[_1929].z) * _1958);
    uvec4 _1973 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1975 = _1973.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1975)
    {
        _1986 = _1967;
        _1988 = _1968;
        _1990 = _1969;
    }
    else
    {
        uint _1994 = _1902 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_718, _719, _720)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4087 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2013 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1967;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1968;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1969;
    }
    bool _1993 = _1973.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1993)
    {
        _2031 = _1986;
        _2033 = _1988;
        _2035 = _1990;
    }
    else
    {
        uint _2190 = _1902 + 7u;
        float _2206 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_718, _719, _720)) * 0.5) + 0.5;
        float _2207 = _2206 * _2206;
        float _4103 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2209 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2031 = (((cbLight._m0[_2190].x * 0.3183098733425140380859375) * _2208) * _2209) + _1986;
        _2033 = (((cbLight._m0[_2190].y * 0.3183098733425140380859375) * _2208) * _2209) + _1988;
        _2035 = (((cbLight._m0[_2190].z * 0.3183098733425140380859375) * _2208) * _2209) + _1990;
    }
    uint _2038 = _1902 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _721) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1902].x + _798;
    float _2054 = cbLight._m0[_1902].y + _799;
    float _2055 = cbLight._m0[_1902].z + _800;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1902].xyz));
    float _4119 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _2067 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2068 = dot(vec3(_718, _719, _720), vec3(_2060, _2061, _2062));
    float _4141 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2060, _2061, _2062));
    float _4152 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2091 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2092 = 1.0 - _2052;
    float _2103 = (0.5 / (((_2067 * ((_2066 * _2092) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2092) + _2052) * _2066))) * _2066;
    float _4163 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2116 = _1902 + 9u;
    float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _721) * 0.949999988079071044921875);
    float _2128 = _2127 * _2127;
    float _2129 = cbLight._m0[_1939].x + _798;
    float _2130 = cbLight._m0[_1939].y + _799;
    float _2131 = cbLight._m0[_1939].z + _800;
    float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
    float _2136 = _2135 * _2129;
    float _2137 = _2135 * _2130;
    float _2138 = _2135 * _2131;
    float _2139 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1939].xyz));
    float _4174 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2143 = dot(vec3(_718, _719, _720), vec3(_2136, _2137, _2138));
    float _4185 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2136, _2137, _2138));
    float _4196 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2128 * _2128;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2164 = (exp2(log2(1.0 - (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2165 = 1.0 - _2128;
    float _2175 = (0.5 / (((_2067 * ((_2142 * _2165) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2165) + _2128) * _2142))) * _2142;
    float _4207 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2177 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    float _2187 = (((_2164 * cbLight._m0[_2116].x) * _2177) * _1925) + (((_2091 * cbLight._m0[_2038].x) * _2105) * _1935);
    float _2188 = (((_2164 * cbLight._m0[_2116].y) * _2177) * _1925) + (((_2091 * cbLight._m0[_2038].y) * _2105) * _1935);
    float _2189 = (((_2164 * cbLight._m0[_2116].z) * _2177) * _1925) + (((_2091 * cbLight._m0[_2038].z) * _2105) * _1935);
    float _2251;
    float _2253;
    float _2255;
    if (_1975)
    {
        _2251 = _2187;
        _2253 = _2188;
        _2255 = _2189;
    }
    else
    {
        uint _2257 = _1902 + 2u;
        uint _2261 = _1902 + 10u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _721) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _798;
        float _2278 = cbLight._m0[_2257].y + _799;
        float _2279 = cbLight._m0[_2257].z + _800;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_2257].xyz));
        float _4218 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2291 = dot(vec3(_718, _719, _720), vec3(_2284, _2285, _2286));
        float _4229 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4240 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2313 = 1.0 - _2276;
        float _2323 = (0.5 / (((_2067 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2313) + _2276) * _2290))) * _2290;
        float _4251 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2251 = (((_2312 * cbLight._m0[_2261].x) * _2325) * _2326) + _2187;
        _2253 = (((_2312 * cbLight._m0[_2261].y) * _2325) * _2326) + _2188;
        _2255 = (((_2312 * cbLight._m0[_2261].z) * _2325) * _2326) + _2189;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_1993)
    {
        _2361 = _2251;
        _2363 = _2253;
        _2365 = _2255;
    }
    else
    {
        uint _2372 = _1902 + 3u;
        uint _2376 = _1902 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _721) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _798;
        float _2393 = cbLight._m0[_2372].y + _799;
        float _2394 = cbLight._m0[_2372].z + _800;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_2372].xyz));
        float _4267 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2406 = dot(vec3(_718, _719, _720), vec3(_2399, _2400, _2401));
        float _4278 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4289 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2067 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2428) + _2391) * _2405))) * _2405;
        float _4300 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2361 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2251;
        _2363 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2253;
        _2365 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2255;
    }
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    if (_1900.y == 0u)
    {
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2516;
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2516;
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2516;
        uvec4 _2531 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2532 = _2531.x;
        uint _2543 = uint((float(_2531.y) * floor(float(uint(cbSceneParam._m0[85u].y * _807) / _2532))) + floor(float(uint(cbSceneParam._m0[85u].x * _806) / _2532)));
        float _2553 = (log2(_2519 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2554 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        uint _2557 = uint(isnan(14.0) ? _2554 : (isnan(_2554) ? 14.0 : min(_2554, 14.0)));
        uvec4 _2562 = texelFetch(g_lightClusterGridBuffer, int(((_2557 << 2u) + (_2543 << 6u)) >> 2u));
        uint _2563 = _2562.x;
        uint _2564 = _2531.z;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        if (((((1u << ((_2564 >> 4u) & 15u)) + 4294967295u) & _2563) == 0u) || ((_2564 & 240u) == 0u))
        {
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
        }
        else
        {
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            uint _2815 = 0u;
            uint _2824;
            bool _2825;
            for (;;)
            {
                _2824 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2815 << 2u)) >> 2u)).x;
                _2825 = _2824 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2825)
                {
                    frontier_phi_61_pred = _2809;
                    frontier_phi_61_pred_1 = _2814;
                    frontier_phi_61_pred_2 = _2813;
                    frontier_phi_61_pred_3 = _2812;
                    frontier_phi_61_pred_4 = _2811;
                    frontier_phi_61_pred_5 = _2810;
                }
                else
                {
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    uint _2939;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2812;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2824;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    for (;;)
                    {
                        uint _2943 = uint(findLSB(_2939)) + (_2815 << 5u);
                        uint _2940 = (_2939 + 4294967295u) & _2939;
                        uint _2945 = _2943 * 48u;
                        vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2965 = (_2943 * 48u) + 4u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2965)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2965 + 3u)).x));
                        uint _2984 = (_2943 * 48u) + 8u;
                        vec3 _2995 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x));
                        float _2999 = _2959.x - _2517;
                        float _3000 = _2959.y - _2518;
                        float _3001 = _2959.z - _2519;
                        float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                        float _3005 = inversesqrt(_3002);
                        float _3006 = _3005 * _2999;
                        float _3007 = _3005 * _3000;
                        float _3008 = _3005 * _3001;
                        float _3009 = dot(vec3(_825, _828, _831), vec3(_3006, _3007, _3008));
                        float _3014 = 1.0 - (_3002 * _2959.w);
                        float _4326 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                        float _3016 = sqrt(_3002) * _2978.w;
                        float _3019 = 1.39999997615814208984375 / (_3016 + 1.39999997615814208984375);
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _3009) + _3020;
                        float _3026 = _3016 * _3016;
                        float _3030 = ((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3015) / ((_3026 * 0.699999988079071044921875) + 1.0);
                        float _3034 = (-0.0) - _2517;
                        float _3035 = (-0.0) - _2518;
                        float _3036 = (-0.0) - _2519;
                        float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3051 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                        float _3052 = 1.0 - _885;
                        float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                        float _3060 = _3059 * _3059;
                        float _3061 = _3060 * _3060;
                        float _3062 = _3041 + _3006;
                        float _3063 = _3042 + _3007;
                        float _3064 = _3043 + _3008;
                        float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                        float _3072 = dot(vec3(_825, _828, _831), vec3(_3041, _3042, _3043));
                        float _4342 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                        float _3075 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3076 = dot(vec3(_825, _828, _831), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                        float _4353 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                        float _3084 = _3019 * _3060;
                        float _3085 = _3084 * _3084;
                        float _3088 = ((1.0 - _3085) * _3009) + _3085;
                        float _4364 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3089 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3090 = 1.0 - _3060;
                        float _3100 = (0.5 / (((_3089 * ((_3075 * _3090) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3089 * _3090) + _3060) * _3075))) * _3089;
                        float _4375 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3111 = (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3083 * _3083) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125))) * _3015;
                        _2868 = (_3030 * _2978.x) + _2936;
                        _2869 = (_3030 * _2978.y) + _2937;
                        _2870 = (_3030 * _2978.z) + _2938;
                        _2865 = (_3111 * _2995.x) + _2933;
                        _2866 = (_3111 * _2995.y) + _2934;
                        _2867 = (_3111 * _2995.z) + _2935;
                        if (_2940 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2868;
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2940;
                        }
                    }
                    frontier_phi_61_pred = _2865;
                    frontier_phi_61_pred_1 = _2870;
                    frontier_phi_61_pred_2 = _2869;
                    frontier_phi_61_pred_3 = _2868;
                    frontier_phi_61_pred_4 = _2867;
                    frontier_phi_61_pred_5 = _2866;
                }
                _2665 = frontier_phi_61_pred;
                _2675 = frontier_phi_61_pred_1;
                _2673 = frontier_phi_61_pred_2;
                _2671 = frontier_phi_61_pred_3;
                _2669 = frontier_phi_61_pred_4;
                _2667 = frontier_phi_61_pred_5;
                uint _2816 = _2815 + 1u;
                if (_2816 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2809 = _2665;
                    _2810 = _2667;
                    _2811 = _2669;
                    _2812 = _2671;
                    _2813 = _2673;
                    _2814 = _2675;
                    _2815 = _2816;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
        }
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.z;
        uint _2681 = (_2679 >> 8u) & 15u;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        if (((4294967295u << _2681) & _2563) == 0u)
        {
            _2777 = _2664;
            _2779 = _2666;
            _2781 = _2668;
            _2783 = _2670;
            _2785 = _2672;
            _2787 = _2674;
        }
        else
        {
            float _2802 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
            float _2803 = _2802 * _2517;
            float _2804 = _2802 * _2518;
            float _2805 = _2802 * _2519;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2681 < ((_2679 >> 12u) & 15u))
            {
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2916 = _2664;
                float _2917 = _2666;
                float _2918 = _2668;
                float _2919 = _2670;
                float _2920 = _2672;
                float _2921 = _2674;
                uint _2922 = _2681;
                uint _2931;
                bool _2932;
                for (;;)
                {
                    _2931 = texelFetch(g_lightClassification, int((((_2557 << 5u) + (_2543 << 9u)) + (_2922 << 2u)) >> 2u)).x;
                    _2932 = _2931 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2932)
                    {
                        frontier_phi_67_pred = _2919;
                        frontier_phi_67_pred_1 = _2920;
                        frontier_phi_67_pred_2 = _2921;
                        frontier_phi_67_pred_3 = _2918;
                        frontier_phi_67_pred_4 = _2917;
                        frontier_phi_67_pred_5 = _2916;
                    }
                    else
                    {
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        float _3132 = _2919;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        uint _3135 = _2931;
                        uint _3136;
                        vec4 _3161;
                        float _3162;
                        vec4 _3177;
                        vec3 _3189;
                        vec4 _3204;
                        vec4 _3219;
                        float _3265;
                        bool _3266;
                        for (;;)
                        {
                            uint _3146 = ((_2922 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3135));
                            _3136 = (_3135 + 4294967295u) & _3135;
                            uint _3148 = _3146 * 40u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3162 = _3161.w;
                            uint _3164 = (_3146 * 40u) + 4u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3146 * 40u) + 8u;
                            _3189 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x));
                            uint _3191 = (_3146 * 40u) + 16u;
                            _3204 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 3u)).x));
                            uint _3206 = (_3146 * 40u) + 20u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3146 * 40u) + 24u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3240 = (_3146 * 40u) + 28u;
                            vec4 _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            _3265 = fma(_2519, _3253.z, fma(_2518, _3253.y, _3253.x * _2517)) + _3253.w;
                            _3266 = !((fma(_2519, _3234.z, fma(_2518, _3234.y, _3234.x * _2517)) + _3234.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3266)
                            {
                                float _3293 = _3161.x - _2517;
                                float _3294 = _3161.y - _2518;
                                float _3295 = _3161.z - _2519;
                                float _3296 = dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295));
                                float _3299 = inversesqrt(_3296);
                                float _3300 = _3299 * _3293;
                                float _3301 = _3299 * _3294;
                                float _3302 = _3299 * _3295;
                                float _3306 = 1.0 - (_3296 / (_3162 * _3162));
                                float _4386 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                                float _3311 = sqrt(_3296) * _3177.w;
                                float _3313 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                                float _3314 = _3313 * _3313;
                                float _3317 = ((1.0 - _3314) * dot(vec3(_3300, _3301, _3302), vec3(_825, _828, _831))) + _3314;
                                float _3320 = _3311 * _3311;
                                float _3324 = (fma(_2519, _3204.z, fma(_2518, _3204.y, _3204.x * _2517)) + _3204.w) / _3265;
                                float _3325 = (fma(_2519, _3219.z, fma(_2518, _3219.y, _3219.x * _2517)) + _3219.w) / _3265;
                                float _3329 = 1.0 - dot(vec2(_3324, _3325), vec2(_3324, _3325));
                                float _4402 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3331 = _3330 * (((isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))) * _3307) / ((_3320 * 0.699999988079071044921875) + 1.0));
                                float _3343 = exp2(log2(1.0 / ((_3320 * 3.5) + 5.0)) * 0.25);
                                float _3344 = 1.0 - _885;
                                float _3351 = sqrt(1.0 - ((1.0 - (_3344 * _3344)) * (1.0 - (_3343 * _3343))));
                                float _3352 = _3351 * _3351;
                                float _3353 = _3352 * _3352;
                                float _3354 = _3300 - _2803;
                                float _3355 = _3301 - _2804;
                                float _3356 = _3302 - _2805;
                                float _3360 = inversesqrt(dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356)));
                                float _3364 = dot(vec3(_825, _828, _831), vec3((-0.0) - _2803, (-0.0) - _2804, (-0.0) - _2805));
                                float _4413 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3367 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3368 = dot(vec3(_825, _828, _831), vec3(_3360 * _3354, _3360 * _3355, _3360 * _3356));
                                float _4424 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                                float _3371 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3375 = ((_3371 * _3371) * (_3353 + (-1.0))) + 1.0;
                                float _3376 = _3313 * _3352;
                                float _3377 = _3376 * _3376;
                                float _3383 = ((1.0 - _3377) * dot(vec3(_825, _828, _831), vec3(_3300, _3301, _3302))) + _3377;
                                float _4435 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3385 = 1.0 - _3352;
                                float _3395 = (0.5 / (((_3384 * ((_3367 * _3385) + _3352)) + 9.9999999392252902907785028219223e-09) + (((_3384 * _3385) + _3352) * _3367))) * _3384;
                                float _4446 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3405 = (_3330 * _3307) * (((_3353 * 3.1415927410125732421875) * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)))) / ((_3375 * _3375) * ((_3320 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3405 * _3189.x;
                                frontier_phi_73_pred_1 = _3405 * _3189.y;
                                frontier_phi_73_pred_2 = _3331 * _3177.z;
                                frontier_phi_73_pred_3 = _3331 * _3177.y;
                                frontier_phi_73_pred_4 = _3331 * _3177.x;
                                frontier_phi_73_pred_5 = _3405 * _3189.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3409 = frontier_phi_73_pred;
                            _3410 = frontier_phi_73_pred_1;
                            _3414 = frontier_phi_73_pred_2;
                            _3413 = frontier_phi_73_pred_3;
                            _3412 = frontier_phi_73_pred_4;
                            _3411 = frontier_phi_73_pred_5;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            _3121 = _3414 + _3134;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            _3118 = _3411 + _3131;
                            if (_3136 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3136;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3119;
                        frontier_phi_67_pred_1 = _3120;
                        frontier_phi_67_pred_2 = _3121;
                        frontier_phi_67_pred_3 = _3118;
                        frontier_phi_67_pred_4 = _3117;
                        frontier_phi_67_pred_5 = _3116;
                    }
                    _2784 = frontier_phi_67_pred;
                    _2786 = frontier_phi_67_pred_1;
                    _2788 = frontier_phi_67_pred_2;
                    _2782 = frontier_phi_67_pred_3;
                    _2780 = frontier_phi_67_pred_4;
                    _2778 = frontier_phi_67_pred_5;
                    uint _2923 = _2922 + 1u;
                    if (_2923 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2916 = _2778;
                        _2917 = _2780;
                        _2918 = _2782;
                        _2919 = _2784;
                        _2920 = _2786;
                        _2921 = _2788;
                        _2922 = _2923;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2786;
                frontier_phi_55_56_ladder_1 = _2788;
                frontier_phi_55_56_ladder_2 = _2784;
                frontier_phi_55_56_ladder_3 = _2782;
                frontier_phi_55_56_ladder_4 = _2780;
                frontier_phi_55_56_ladder_5 = _2778;
            }
            else
            {
                frontier_phi_55_56_ladder = _2672;
                frontier_phi_55_56_ladder_1 = _2674;
                frontier_phi_55_56_ladder_2 = _2670;
                frontier_phi_55_56_ladder_3 = _2668;
                frontier_phi_55_56_ladder_4 = _2666;
                frontier_phi_55_56_ladder_5 = _2664;
            }
            _2777 = frontier_phi_55_56_ladder_5;
            _2779 = frontier_phi_55_56_ladder_4;
            _2781 = frontier_phi_55_56_ladder_3;
            _2783 = frontier_phi_55_56_ladder_2;
            _2785 = frontier_phi_55_56_ladder;
            _2787 = frontier_phi_55_56_ladder_1;
        }
        float _2792 = isnan(1.0) ? _869 : (isnan(_869) ? 1.0 : min(_869, 1.0));
        _2576 = (_2792 * _2783) + _2031;
        _2578 = (_2792 * _2785) + _2033;
        _2580 = (_2792 * _2787) + _2035;
        _2582 = ((_2777 * 0.039999999105930328369140625) * _2792) + _2361;
        _2584 = ((_2779 * 0.039999999105930328369140625) * _2792) + _2363;
        _2586 = ((_2781 * 0.039999999105930328369140625) * _2792) + _2365;
    }
    else
    {
        _2576 = _2031;
        _2578 = _2033;
        _2580 = _2035;
        _2582 = _2361;
        _2584 = _2363;
        _2586 = _2365;
    }
    float _4462 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4473 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4484 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    uint _2606 = _242 + 6u;
    float _2614 = _806 / cbSceneParam._m0[86u].x;
    float _2615 = _807 / cbSceneParam._m0[86u].y;
    vec4 _2629 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, (log2((isnan(cbSceneParam._m0[77u].w) ? _739 : (isnan(_739) ? cbSceneParam._m0[77u].w : min(_739, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2631 = _2629.x;
    float _2632 = _2629.y;
    float _2633 = _2629.z;
    float _2634 = _2629.w;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_739 > cbSceneParam._m0[78u].w)
    {
        float _2689 = isnan(_739) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _739 : min(cbSceneParam._m0[80u].w, _739));
        float _2690 = _2689 / _739;
        float _2701 = _2690 * _791;
        float _2702 = _792 * _2690;
        float _2703 = (-0.0) - _2702;
        float _2705 = _2690 * _793;
        float _2707 = (cbSceneParam._m0[77u].w * _2703) / _2689;
        float _2708 = _2707 + cbSceneParam._m0[79u].w;
        float _2709 = cbSceneParam._m0[79u].w - _2702;
        float _2715 = sqrt(((_2701 * _2701) + (_2702 * _2702)) + (_2705 * _2705));
        float _2718 = (1.0 - (cbSceneParam._m0[77u].w / _2689)) * _2715;
        float _2723 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2725 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2878;
        if (abs((_2703 - _2707) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2878 = ((((_2708 > 0.0) ? exp2(_2723 * _2708) : (2.0 - exp2(_2725 * _2708))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2718;
        }
        else
        {
            float _2838 = 1.0 / cbSceneParam._m0[80u].x;
            float _2839 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : max(_2708, _2709));
            float _2840 = isnan(_2709) ? _2708 : (isnan(_2708) ? _2709 : min(_2708, _2709));
            float _2849 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : min(_2839, 0.0));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            _2878 = ((abs(_2715 / _2703) * cbSceneParam._m0[80u].y) * ((((_2849 - _2850) * 2.0) - ((exp2(_2723 * (isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0)))) - exp2(_2723 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0))))) * _2838)) - ((exp2(_2725 * _2849) - exp2(_2725 * _2850)) * _2838))) + (_2718 * cbSceneParam._m0[80u].z);
        }
        vec4 _2880 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, 1.0), 0.0);
        float _2889 = exp2((_2878 * (-1.44269502162933349609375)) * (1.0 - _2880.w));
        float _2890 = log2(_2889);
        float _2906 = log2(_2634);
        _2727 = (exp2(_2906 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].x)) * _2880.x) / cbSceneParam._m0[78u].x)) + _2631;
        _2729 = (exp2(_2906 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].y)) * _2880.y) / cbSceneParam._m0[78u].y)) + _2632;
        _2731 = (exp2(_2906 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].z)) * _2880.z) / cbSceneParam._m0[78u].z)) + _2633;
        _2733 = _2889 * _2634;
    }
    else
    {
        _2727 = _2631;
        _2729 = _2632;
        _2731 = _2633;
        _2733 = _2634;
    }
    float _2745 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2746 = _2745 == 3.0;
    float _2747 = log2(_2733);
    float _2754 = exp2(_2747 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2576 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _869))) + ((_2582 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _2755 = exp2(_2747 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2578 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _869))) + ((_2584 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _2756 = exp2(_2747 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2580 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _869))) + ((_2586 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1673)) * cbPerFrame._m0[3u].x));
    float _2765 = (_2745 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2765 * (_2746 ? _2754 : (_2754 + (cbSceneParam._m0[72u].w * _2727)));
    SV_Target.y = _2765 * (_2746 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2729)));
    SV_Target.z = _2765 * (_2746 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.w = cbInstanceData._m0[_2606].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2606].w;
}


