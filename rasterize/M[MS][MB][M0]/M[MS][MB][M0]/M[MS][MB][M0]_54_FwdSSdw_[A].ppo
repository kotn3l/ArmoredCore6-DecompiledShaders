#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1087;
float _3472;
float _3473;
float _3474;
float _3475;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _354 = (_345.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_353, _354), vec2(_353, _354));
    float _3484 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))));
    float _366 = _353 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_319.x * 2.0) + (-1.0)));
    float _367 = _354 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_319.y * 2.0) + (-1.0)));
    float _370 = fma(_361, _220, fma(_367, _227, _366 * _213));
    float _373 = fma(_361, _221, fma(_367, _228, _366 * _214));
    float _376 = fma(_361, _222, fma(_367, _229, _366 * _215));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _426 = ((_418 - _419) * cbMtdParam._m0[24u].z) + _419;
    float _428 = (cbMtdParam._m0[19u].x + dot(vec4(_380 * _370, _380 * _373, _380 * _376, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_426 * cbMtdParam._m0[21u].z);
    float _3495 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _444 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_426 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3506 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _449 = ((_429 * ((_299.x * cbMtdParam._m0[18u].x) - _278)) * _445) + _278;
    float _450 = ((_429 * ((_299.y * cbMtdParam._m0[18u].y) - _279)) * _445) + _279;
    float _451 = ((_429 * ((_299.z * cbMtdParam._m0[18u].z) - _280)) * _445) + _280;
    float _456 = (((_319.z - _349) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _349;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _476 = (_469.x * 2.0) + (-1.0);
    float _477 = (_469.y * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _3517 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _487 = (((_469.z - _456) * _429) * _445) + _456;
    float _502 = (((cbMtdParam._m0[21u].x * _366) + ((_476 - _366) * _429)) * _445) + _366;
    float _503 = (((cbMtdParam._m0[21u].x * _367) + ((_477 - _367) * _429)) * _445) + _367;
    float _504 = (((sqrt(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) - _361) * _429) * _445) + _361;
    float _509 = cbMtdParam._m0[22u].x + _345.w;
    float _512 = fma(_504, _220, fma(_503, _227, _502 * _213));
    float _515 = fma(_504, _221, fma(_503, _228, _502 * _214));
    float _518 = fma(_504, _222, fma(_503, _229, _502 * _215));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _523 = _522 * _512;
    float _524 = _522 * _515;
    float _525 = _522 * _518;
    float _3528 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _526 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3550 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3561 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3572 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _544 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _585 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _595 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _585);
    float _596 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _585);
    float _597 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _585);
    float _601 = inversesqrt(dot(vec3(_595, _596, _597), vec3(_595, _596, _597)));
    float _602 = _595 * _601;
    float _603 = _596 * _601;
    float _604 = _597 * _601;
    vec4 _609 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _611 = _609.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _768 = sqrt(((_595 * _595) + (_596 * _596)) + (_597 * _597));
        float _774 = (cbMatDynParam._m0[5u].x * _768) + cbMatDynParam._m0[5u].y;
        float _3583 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _779 = (cbMatDynParam._m0[5u].z * _768) + cbMatDynParam._m0[5u].w;
        float _3594 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) - _775)) + _775) < ((_611 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _623 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _624 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _644 = fma(_525, cbSceneParam._m0[5u].z, fma(_524, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _523));
    float _647 = fma(_525, cbSceneParam._m0[6u].z, fma(_524, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _523));
    float _650 = fma(_525, cbSceneParam._m0[7u].z, fma(_524, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _523));
    uint _663 = _232 + 9u;
    uint _664 = _663 + uint(cbMatDynParam._m0[0u].w);
    float _670 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_664].x;
    float _671 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_664].y;
    float _672 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_664].z;
    float _3605 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _623, cbSceneParam._m0[86u].y * _624));
    float _688 = ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * TEXCOORD_5.w) * _684.x;
    float _689 = dot(vec3(_523, _524, _525), vec3(_602, _603, _604));
    float _692 = _689 * 2.0;
    float _696 = (_692 * _523) - _602;
    float _697 = (_692 * _524) - _603;
    float _698 = (_692 * _525) - _604;
    float _702 = abs(dot(vec3(_602, _603, _604), vec3(_523, _524, _525)));
    float _3638 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _704 = sqrt(_526);
    float _717 = exp2((_704 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_704 * 3.0));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_757, cbModelParam._m0[26u].z, fma(_753, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749));
        float _815 = fma(_757, cbModelParam._m0[27u].z, fma(_753, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749));
        float _819 = fma(_757, cbModelParam._m0[28u].z, fma(_753, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749));
        float _844 = _749 + _523;
        float _845 = _753 + _524;
        float _846 = _757 + _525;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_523, _524, _525), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3686 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_523, _524, _525), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3719 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_523, _524, _525), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3752 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1129 = fma(_757, cbModelParam._m0[30u].z, fma(_753, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _749));
        float _1133 = fma(_757, cbModelParam._m0[31u].z, fma(_753, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _749));
        float _1137 = fma(_757, cbModelParam._m0[32u].z, fma(_753, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _749));
        float _1160 = _749 + _523;
        float _1161 = _753 + _524;
        float _1162 = _757 + _525;
        float _1172 = fma(_1162, cbModelParam._m0[30u].z, fma(_1161, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160)) - _1129;
        float _1173 = fma(_1162, cbModelParam._m0[31u].z, fma(_1161, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160)) - _1133;
        float _1174 = fma(_1162, cbModelParam._m0[32u].z, fma(_1161, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160)) - _1137;
        float _1178 = inversesqrt(dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174)));
        float _1191 = ((_1178 * _1172) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1129 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1178 * _1173) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1133 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1178 * _1174) / cbModelParam._m0[35u].z) + ((((((_1137 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1191, _1192, _1193), 0.0);
        float _1228 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1195.x + (-0.5));
        float _1230 = _1228 * (_1195.y + (-0.5));
        float _1231 = _1228 * (_1195.z + (-0.5));
        float _1238 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1202.x + (-0.5));
        float _1240 = _1238 * (_1202.y + (-0.5));
        float _1241 = _1238 * (_1202.z + (-0.5));
        float _1248 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1209.x + (-0.5));
        float _1250 = _1248 * (_1209.y + (-0.5));
        float _1251 = _1248 * (_1209.z + (-0.5));
        float _1258 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1216.x + (-0.5));
        float _1260 = _1258 * (_1216.y + (-0.5));
        float _1261 = _1258 * (_1216.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_523, _524, _525), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3815 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1292 + 1.0))) + _1297) * _1262;
        float _1307 = _1230 * 0.5;
        float _1308 = _1240 * 0.5;
        float _1309 = _1250 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_523, _524, _525), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3848 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1334 + 1.0))) + _1339) * _1263;
        float _1349 = _1231 * 0.5;
        float _1350 = _1241 * 0.5;
        float _1351 = _1251 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_523, _524, _525), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3881 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1376 + 1.0))) + _1381) * _1264;
        _1398 = _1231;
        _1399 = _1230;
        _1400 = _1229;
        _1401 = _1241;
        _1402 = _1240;
        _1403 = _1239;
        _1404 = _1251;
        _1405 = _1250;
        _1406 = _1249;
        _1407 = _1264;
        _1408 = _1263;
        _1409 = _1262;
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1087;
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = _1087;
        _1408 = _1087;
        _1409 = _1087;
        _1410 = 0.0;
        _1411 = 0.0;
        _1412 = 0.0;
    }
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1099)) + _1099;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1100)) + _1100;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1101)) + _1101;
    float _1445 = fma(_1424, cbSceneParam._m0[89u].z, fma(_1423, cbSceneParam._m0[89u].y, _1422 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1424, cbSceneParam._m0[90u].z, fma(_1423, cbSceneParam._m0[90u].y, _1422 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1424, cbSceneParam._m0[91u].z, fma(_1423, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1422));
    float _1466 = _696 * 0.5;
    float _1467 = _697 * 0.5;
    float _1468 = _698 * 0.5;
    float _1469 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1472 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1475 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1509;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1482 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1486 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1490 = dot(vec4(_1466, _1467, _1468, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1497 = dot(vec4(cbModelParam._m0[39u]), vec4(_1466, _1467, _1468, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1520;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1511 = dot(vec4(cbModelParam._m0[40u]), vec4(_1466, _1467, _1468, 1.0));
        _1520 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1511) ? 0.0 : (isnan(0.0) ? _1511 : max(0.0, _1511))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1520 = 1.0;
    }
    float _1524 = (_1520 * cbModelParam._m0[1u].x) + (_1509 * (1.0 - cbModelParam._m0[1u].x));
    float _1534 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1535 = isnan(_1534) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1534 : min(cbModelParam._m0[25u].z, _1534));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1582 = fma(_757, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749)) + cbModelParam._m0[13u].w;
        float _1586 = fma(_757, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749)) + cbModelParam._m0[14u].w;
        float _1590 = fma(_757, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749)) + cbModelParam._m0[15u].w;
        float _1593 = fma(_698, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _696));
        float _1596 = fma(_698, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _696));
        float _1599 = fma(_698, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _696));
        float _1627;
        if (_1593 > 0.0)
        {
            _1627 = abs((1.0 - _1582) / _1593);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1582 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1627 = frontier_phi_17_15_ladder;
        }
        float _1850;
        if (_1596 > 0.0)
        {
            _1850 = abs((1.0 - _1586) / _1596);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1586 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1850 = frontier_phi_26_22_ladder;
        }
        float _2096;
        if (_1599 > 0.0)
        {
            _2096 = abs((1.0 - _1590) / _1599);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1590 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2096 = frontier_phi_38_33_ladder;
        }
        float _2098 = isnan(_1850) ? _1627 : (isnan(_1627) ? _1850 : min(_1627, _1850));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1593) + _1582;
        float _2104 = (_2099 * _1596) + _1586;
        float _2105 = (_2099 * _1599) + _1590;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2106;
        float _2110 = _2106 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 > _2110) || ((_2104 < _2108) || ((_2103 < _2108) || (_2103 > _2110))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2105, cbModelParam._m0[9u].z, fma(_2104, cbModelParam._m0[9u].y, _2103 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2105, cbModelParam._m0[10u].z, fma(_2104, cbModelParam._m0[10u].y, _2103 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2105, cbModelParam._m0[11u].z, fma(_2104, cbModelParam._m0[11u].y, _2103 * cbModelParam._m0[11u].x))), _1535);
            frontier_phi_16_38_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1615 = frontier_phi_16_38_ladder_2;
        _1617 = frontier_phi_16_38_ladder_1;
        _1619 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_696, _697, _698), _1535);
        _1615 = _1603.x * cbModelParam._m0[1u].y;
        _1617 = _1603.y * cbModelParam._m0[1u].y;
        _1619 = _1603.z * cbModelParam._m0[1u].y;
    }
    float _1623 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1623 : min(cbModelParam._m0[25u].w, _1623));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1677 = fma(_757, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749)) + cbModelParam._m0[21u].w;
        float _1681 = fma(_757, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749)) + cbModelParam._m0[22u].w;
        float _1685 = fma(_757, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749)) + cbModelParam._m0[23u].w;
        float _1688 = fma(_698, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _696));
        float _1691 = fma(_698, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _696));
        float _1694 = fma(_698, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _696));
        float _1855;
        if (_1688 > 0.0)
        {
            _1855 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1855 = frontier_phi_28_24_ladder;
        }
        float _2123;
        if (_1691 > 0.0)
        {
            _2123 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2123 = frontier_phi_40_35_ladder;
        }
        float _2328;
        if (_1694 > 0.0)
        {
            _2328 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2328 = frontier_phi_49_46_ladder;
        }
        float _2330 = isnan(_2123) ? _1855 : (isnan(_1855) ? _2123 : min(_1855, _2123));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1688) + _1677;
        float _2336 = (_2331 * _1691) + _1681;
        float _2337 = (_2331 * _1694) + _1685;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2338;
        float _2341 = _2338 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2337 > _2341) || ((_2337 < _2339) || ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 < _2339) || (_2335 > _2341))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2337, cbModelParam._m0[17u].z, fma(_2336, cbModelParam._m0[17u].y, _2335 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2337, cbModelParam._m0[18u].z, fma(_2336, cbModelParam._m0[18u].y, _2335 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2337, cbModelParam._m0[19u].z, fma(_2336, cbModelParam._m0[19u].y, _2335 * cbModelParam._m0[19u].x))), _1624);
            frontier_phi_25_49_ladder = _2536.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2536.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2536.x * cbModelParam._m0[1u].z;
        }
        _1713 = frontier_phi_25_49_ladder_2;
        _1715 = frontier_phi_25_49_ladder_1;
        _1717 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_696, _697, _698), _1624);
        _1713 = _1697.x * cbModelParam._m0[1u].z;
        _1715 = _1697.y * cbModelParam._m0[1u].z;
        _1717 = _1697.z * cbModelParam._m0[1u].z;
    }
    float _1729 = ((((1.0 - _717) * ((_704 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_717 * _704)) * _688;
    float _1730 = _1729 * ((cbModelParam._m0[1u].w * (_1713 - _1615)) + _1615);
    float _1731 = _1729 * ((cbModelParam._m0[1u].w * (_1715 - _1617)) + _1617);
    float _1732 = _1729 * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1735 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, _1730 * cbSceneParam._m0[91u].x));
    vec4 _1749 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_623, _624));
    float _1751 = _1749.w;
    float _1763 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1751);
    float _1764 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1751);
    float _1765 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1751);
    uvec4 _1769 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1771 = _1769.x * 14u;
    uint _1772 = _1771 + 13u;
    float _1779 = _688 + (-1.0);
    float _1784 = (cbLight._m0[_1772].x * _1779) + 1.0;
    float _1785 = (cbLight._m0[_1772].y * _1779) + 1.0;
    float _1786 = (cbLight._m0[_1772].z * _1779) + 1.0;
    float _1787 = (cbLight._m0[_1772].w * _1779) + 1.0;
    uint _1788 = _1771 + 5u;
    float _1794 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1798 = _1771 + 4u;
    float _1808 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1812 = _1771 | 1u;
    float _1823 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_523, _524, _525));
    float _1826 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_523, _524, _525));
    float _4017 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _4028 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1831 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _1833 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1840 = ((cbLight._m0[_1788].x * _1794) * _1833) + (((cbLight._m0[_1798].x * _1763) * _1808) * _1831);
    float _1841 = ((_1794 * cbLight._m0[_1788].y) * _1833) + (((cbLight._m0[_1798].y * _1764) * _1808) * _1831);
    float _1842 = ((_1794 * cbLight._m0[_1788].z) * _1833) + (((cbLight._m0[_1798].z * _1765) * _1808) * _1831);
    uvec4 _1847 = floatBitsToUint(cbLight._m0[_1771 + 12u]);
    bool _1849 = _1847.x == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1849)
    {
        _1860 = _1840;
        _1862 = _1841;
        _1864 = _1842;
    }
    else
    {
        uint _1868 = _1771 + 6u;
        float _1884 = (dot(vec3(cbLight._m0[_1771 + 2u].xyz), vec3(_523, _524, _525)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _4039 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1887 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1860 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1840;
        _1862 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1841;
        _1864 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1842;
    }
    bool _1867 = _1847.y == 0u;
    float _1905;
    float _1907;
    float _1909;
    if (_1867)
    {
        _1905 = _1860;
        _1907 = _1862;
        _1909 = _1864;
    }
    else
    {
        uint _2067 = _1771 + 7u;
        float _2083 = (dot(vec3(cbLight._m0[_1771 + 3u].xyz), vec3(_523, _524, _525)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4055 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2086 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1905 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _1860;
        _1907 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _1862;
        _1909 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _1864;
    }
    uint _1912 = _1771 + 8u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _526) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1771].x + _602;
    float _1928 = cbLight._m0[_1771].y + _603;
    float _1929 = cbLight._m0[_1771].z + _604;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1771].xyz));
    float _4071 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _1941 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1942 = dot(vec3(_523, _524, _525), vec3(_1934, _1935, _1936));
    float _4093 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1934, _1935, _1936));
    float _4104 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1926 * _1926;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = 1.0 - _1926;
    float _1977 = (0.5 / (((_1941 * ((_1940 * _1966) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _1966) + _1926) * _1940))) * _1940;
    float _4115 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    uint _1993 = _1771 + 9u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _526) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1812].x + _602;
    float _2007 = cbLight._m0[_1812].y + _603;
    float _2008 = cbLight._m0[_1812].z + _604;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1812].xyz));
    float _4126 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _2020 = dot(vec3(_523, _524, _525), vec3(_2013, _2014, _2015));
    float _4137 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_2013, _2014, _2015));
    float _4148 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2005 * _2005;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = 1.0 - _2005;
    float _2052 = (0.5 / (((_1941 * ((_2019 * _2042) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2042) + _2005) * _2019))) * _2019;
    float _4159 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2064 = (((_2041 * cbLight._m0[_1993].x) * _2054) * _1794) + ((((cbLight._m0[_1912].x * _1763) * _1965) * _1979) * _1808);
    float _2065 = (((_2041 * cbLight._m0[_1993].y) * _2054) * _1794) + ((((cbLight._m0[_1912].y * _1764) * _1965) * _1979) * _1808);
    float _2066 = (((_2041 * cbLight._m0[_1993].z) * _2054) * _1794) + ((((cbLight._m0[_1912].z * _1765) * _1965) * _1979) * _1808);
    float _2128;
    float _2130;
    float _2132;
    if (_1849)
    {
        _2128 = _2064;
        _2130 = _2065;
        _2132 = _2066;
    }
    else
    {
        uint _2134 = _1771 + 2u;
        uint _2138 = _1771 + 10u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _526) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _602;
        float _2155 = cbLight._m0[_2134].y + _603;
        float _2156 = cbLight._m0[_2134].z + _604;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2134].xyz));
        float _4170 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _2168 = dot(vec3(_523, _524, _525), vec3(_2161, _2162, _2163));
        float _4181 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4192 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2190 = 1.0 - _2153;
        float _2200 = (0.5 / (((_1941 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2190) + _2153) * _2167))) * _2167;
        float _4203 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2128 = (((_2189 * cbLight._m0[_2138].x) * _2202) * _2203) + _2064;
        _2130 = (((_2189 * cbLight._m0[_2138].y) * _2202) * _2203) + _2065;
        _2132 = (((_2189 * cbLight._m0[_2138].z) * _2202) * _2203) + _2066;
    }
    float _2238;
    float _2240;
    float _2242;
    if (_1867)
    {
        _2238 = _2128;
        _2240 = _2130;
        _2242 = _2132;
    }
    else
    {
        uint _2249 = _1771 + 3u;
        uint _2253 = _1771 + 11u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _526) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _602;
        float _2270 = cbLight._m0[_2249].y + _603;
        float _2271 = cbLight._m0[_2249].z + _604;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2249].xyz));
        float _4219 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2283 = dot(vec3(_523, _524, _525), vec3(_2276, _2277, _2278));
        float _4230 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4241 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2305 = 1.0 - _2268;
        float _2315 = (0.5 / (((_1941 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_1941 * _2305) + _2268) * _2282))) * _2282;
        float _4252 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2238 = (((_2304 * cbLight._m0[_2253].x) * _2317) * _2318) + _2128;
        _2240 = (((_2304 * cbLight._m0[_2253].y) * _2317) * _2318) + _2130;
        _2242 = (((_2304 * cbLight._m0[_2253].z) * _2317) * _2318) + _2132;
    }
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_1769.y == 0u)
    {
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2393;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2393;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2393;
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.x;
        uint _2420 = uint((float(_2408.y) * floor(float(uint(cbSceneParam._m0[85u].y * _624) / _2409))) + floor(float(uint(cbSceneParam._m0[85u].x * _623) / _2409)));
        float _2430 = (log2(_2396 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2431 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        uint _2434 = uint(isnan(14.0) ? _2431 : (isnan(_2431) ? 14.0 : min(_2431, 14.0)));
        uvec4 _2439 = texelFetch(g_lightClusterGridBuffer, int(((_2434 << 2u) + (_2420 << 6u)) >> 2u));
        uint _2440 = _2439.x;
        uint _2441 = _2408.z;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((((1u << ((_2441 >> 4u) & 15u)) + 4294967295u) & _2440) == 0u) || ((_2441 & 240u) == 0u))
        {
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
        }
        else
        {
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            uint _2700 = 0u;
            uint _2709;
            bool _2710;
            for (;;)
            {
                _2709 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                _2710 = _2709 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2710)
                {
                    frontier_phi_66_pred = _2694;
                    frontier_phi_66_pred_1 = _2699;
                    frontier_phi_66_pred_2 = _2698;
                    frontier_phi_66_pred_3 = _2697;
                    frontier_phi_66_pred_4 = _2696;
                    frontier_phi_66_pred_5 = _2695;
                }
                else
                {
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    uint _2845;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2709;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2849 = uint(findLSB(_2845)) + (_2700 << 5u);
                        uint _2846 = (_2845 + 4294967295u) & _2845;
                        uint _2851 = _2849 * 48u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2871 = (_2849 * 48u) + 4u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2890 = (_2849 * 48u) + 8u;
                        vec3 _2901 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x));
                        float _2905 = _2865.x - _2394;
                        float _2906 = _2865.y - _2395;
                        float _2907 = _2865.z - _2396;
                        float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                        float _2911 = inversesqrt(_2908);
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2915 = dot(vec3(_644, _647, _650), vec3(_2912, _2913, _2914));
                        float _2920 = 1.0 - (_2908 * _2865.w);
                        float _4278 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                        float _2922 = sqrt(_2908) * _2884.w;
                        float _2925 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2915) + _2926;
                        float _2932 = _2922 * _2922;
                        float _2936 = ((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2921) / ((_2932 * 0.699999988079071044921875) + 1.0);
                        float _2940 = (-0.0) - _2394;
                        float _2941 = (-0.0) - _2395;
                        float _2942 = (-0.0) - _2396;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2957 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                        float _2958 = 1.0 - _704;
                        float _2965 = sqrt(1.0 - ((1.0 - (_2958 * _2958)) * (1.0 - (_2957 * _2957))));
                        float _2966 = _2965 * _2965;
                        float _2967 = _2966 * _2966;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2978 = dot(vec3(_644, _647, _650), vec3(_2947, _2948, _2949));
                        float _4294 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2982 = dot(vec3(_644, _647, _650), vec3(_2974 * _2968, _2974 * _2969, _2974 * _2970));
                        float _4305 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2989 = ((_2985 * _2985) * (_2967 + (-1.0))) + 1.0;
                        float _2990 = _2925 * _2966;
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2915) + _2991;
                        float _4316 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _2996 = 1.0 - _2966;
                        float _3006 = (0.5 / (((_2995 * ((_2981 * _2996) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2995 * _2996) + _2966) * _2981))) * _2995;
                        float _4327 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3017 = (((_2967 * 3.1415927410125732421875) * (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) / ((_2989 * _2989) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125))) * _2921;
                        _2769 = (_2936 * _2884.x) + _2842;
                        _2770 = (_2936 * _2884.y) + _2843;
                        _2771 = (_2936 * _2884.z) + _2844;
                        _2766 = (_3017 * _2901.x) + _2839;
                        _2767 = (_3017 * _2901.y) + _2840;
                        _2768 = (_3017 * _2901.z) + _2841;
                        if (_2846 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2846;
                        }
                    }
                    frontier_phi_66_pred = _2766;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                _2542 = frontier_phi_66_pred;
                _2552 = frontier_phi_66_pred_1;
                _2550 = frontier_phi_66_pred_2;
                _2548 = frontier_phi_66_pred_3;
                _2546 = frontier_phi_66_pred_4;
                _2544 = frontier_phi_66_pred_5;
                uint _2701 = _2700 + 1u;
                if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2694 = _2542;
                    _2695 = _2544;
                    _2696 = _2546;
                    _2697 = _2548;
                    _2698 = _2550;
                    _2699 = _2552;
                    _2700 = _2701;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
        }
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.z;
        uint _2558 = (_2556 >> 8u) & 15u;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((4294967295u << _2558) & _2440) == 0u)
        {
            _2662 = _2541;
            _2664 = _2543;
            _2666 = _2545;
            _2668 = _2547;
            _2670 = _2549;
            _2672 = _2551;
        }
        else
        {
            float _2687 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
            float _2688 = _2687 * _2394;
            float _2689 = _2687 * _2395;
            float _2690 = _2687 * _2396;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2558 < ((_2556 >> 12u) & 15u))
            {
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2822 = _2541;
                float _2823 = _2543;
                float _2824 = _2545;
                float _2825 = _2547;
                float _2826 = _2549;
                float _2827 = _2551;
                uint _2828 = _2558;
                uint _2837;
                bool _2838;
                for (;;)
                {
                    _2837 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                    _2838 = _2837 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2838)
                    {
                        frontier_phi_77_pred = _2827;
                        frontier_phi_77_pred_1 = _2826;
                        frontier_phi_77_pred_2 = _2825;
                        frontier_phi_77_pred_3 = _2824;
                        frontier_phi_77_pred_4 = _2823;
                        frontier_phi_77_pred_5 = _2822;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        float _3049 = _2827;
                        uint _3050 = _2837;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3135;
                        float _3181;
                        bool _3182;
                        for (;;)
                        {
                            uint _3061 = ((_2828 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3061 * 40u) + 20u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3061 * 40u) + 24u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3156 = (_3061 * 40u) + 28u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            _3181 = fma(_2396, _3169.z, fma(_2395, _3169.y, _3169.x * _2394)) + _3169.w;
                            _3182 = !((fma(_2396, _3150.z, fma(_2395, _3150.y, _3150.x * _2394)) + _3150.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3182)
                            {
                                float _3209 = _3076.x - _2394;
                                float _3210 = _3076.y - _2395;
                                float _3211 = _3076.z - _2396;
                                float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                                float _3215 = inversesqrt(_3212);
                                float _3216 = _3215 * _3209;
                                float _3217 = _3215 * _3210;
                                float _3218 = _3215 * _3211;
                                float _3222 = 1.0 - (_3212 / (_3077 * _3077));
                                float _4338 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                                float _3227 = sqrt(_3212) * _3092.w;
                                float _3229 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                                float _3230 = _3229 * _3229;
                                float _3233 = ((1.0 - _3230) * dot(vec3(_3216, _3217, _3218), vec3(_644, _647, _650))) + _3230;
                                float _3236 = _3227 * _3227;
                                float _3240 = (fma(_2396, _3120.z, fma(_2395, _3120.y, _3120.x * _2394)) + _3120.w) / _3181;
                                float _3241 = (fma(_2396, _3135.z, fma(_2395, _3135.y, _3135.x * _2394)) + _3135.w) / _3181;
                                float _3245 = 1.0 - dot(vec2(_3240, _3241), vec2(_3240, _3241));
                                float _4354 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3246 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3247 = _3246 * (((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3223) / ((_3236 * 0.699999988079071044921875) + 1.0));
                                float _3259 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                                float _3260 = 1.0 - _704;
                                float _3267 = sqrt(1.0 - ((1.0 - (_3260 * _3260)) * (1.0 - (_3259 * _3259))));
                                float _3268 = _3267 * _3267;
                                float _3269 = _3268 * _3268;
                                float _3270 = _3216 - _2688;
                                float _3271 = _3217 - _2689;
                                float _3272 = _3218 - _2690;
                                float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                                float _3280 = dot(vec3(_644, _647, _650), vec3((-0.0) - _2688, (-0.0) - _2689, (-0.0) - _2690));
                                float _4365 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3283 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3284 = dot(vec3(_644, _647, _650), vec3(_3276 * _3270, _3276 * _3271, _3276 * _3272));
                                float _4376 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3291 = ((_3287 * _3287) * (_3269 + (-1.0))) + 1.0;
                                float _3292 = _3229 * _3268;
                                float _3293 = _3292 * _3292;
                                float _3299 = ((1.0 - _3293) * dot(vec3(_644, _647, _650), vec3(_3216, _3217, _3218))) + _3293;
                                float _4387 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3300 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3301 = 1.0 - _3268;
                                float _3311 = (0.5 / (((_3300 * ((_3283 * _3301) + _3268)) + 9.9999999392252902907785028219223e-09) + (((_3300 * _3301) + _3268) * _3283))) * _3300;
                                float _4398 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3321 = (_3246 * _3223) * (((_3269 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3291 * _3291) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3247 * _3092.y;
                                frontier_phi_83_pred_1 = _3247 * _3092.x;
                                frontier_phi_83_pred_2 = _3321 * _3104.z;
                                frontier_phi_83_pred_3 = _3321 * _3104.y;
                                frontier_phi_83_pred_4 = _3321 * _3104.x;
                                frontier_phi_83_pred_5 = _3247 * _3092.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_83_pred;
                            _3328 = frontier_phi_83_pred_1;
                            _3327 = frontier_phi_83_pred_2;
                            _3326 = frontier_phi_83_pred_3;
                            _3325 = frontier_phi_83_pred_4;
                            _3330 = frontier_phi_83_pred_5;
                            _3034 = _3328 + _3047;
                            _3035 = _3329 + _3048;
                            _3036 = _3330 + _3049;
                            _3031 = _3325 + _3044;
                            _3032 = _3326 + _3045;
                            _3033 = _3327 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3036;
                        frontier_phi_77_pred_1 = _3035;
                        frontier_phi_77_pred_2 = _3034;
                        frontier_phi_77_pred_3 = _3033;
                        frontier_phi_77_pred_4 = _3032;
                        frontier_phi_77_pred_5 = _3031;
                    }
                    _2673 = frontier_phi_77_pred;
                    _2671 = frontier_phi_77_pred_1;
                    _2669 = frontier_phi_77_pred_2;
                    _2667 = frontier_phi_77_pred_3;
                    _2665 = frontier_phi_77_pred_4;
                    _2663 = frontier_phi_77_pred_5;
                    uint _2829 = _2828 + 1u;
                    if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2822 = _2663;
                        _2823 = _2665;
                        _2824 = _2667;
                        _2825 = _2669;
                        _2826 = _2671;
                        _2827 = _2673;
                        _2828 = _2829;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2667;
                frontier_phi_58_59_ladder_1 = _2673;
                frontier_phi_58_59_ladder_2 = _2671;
                frontier_phi_58_59_ladder_3 = _2669;
                frontier_phi_58_59_ladder_4 = _2665;
                frontier_phi_58_59_ladder_5 = _2663;
            }
            else
            {
                frontier_phi_58_59_ladder = _2545;
                frontier_phi_58_59_ladder_1 = _2551;
                frontier_phi_58_59_ladder_2 = _2549;
                frontier_phi_58_59_ladder_3 = _2547;
                frontier_phi_58_59_ladder_4 = _2543;
                frontier_phi_58_59_ladder_5 = _2541;
            }
            _2662 = frontier_phi_58_59_ladder_5;
            _2664 = frontier_phi_58_59_ladder_4;
            _2666 = frontier_phi_58_59_ladder;
            _2668 = frontier_phi_58_59_ladder_3;
            _2670 = frontier_phi_58_59_ladder_2;
            _2672 = frontier_phi_58_59_ladder_1;
        }
        float _2677 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _2453 = (_2677 * _2668) + _1905;
        _2455 = (_2677 * _2670) + _1907;
        _2457 = (_2677 * _2672) + _1909;
        _2459 = ((_2662 * 0.039999999105930328369140625) * _2677) + _2238;
        _2461 = ((_2664 * 0.039999999105930328369140625) * _2677) + _2240;
        _2463 = ((_2666 * 0.039999999105930328369140625) * _2677) + _2242;
    }
    else
    {
        _2453 = _1905;
        _2455 = _1907;
        _2457 = _1909;
        _2459 = _2238;
        _2461 = _2240;
        _2463 = _2242;
    }
    float _4414 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4425 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4436 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2480 = ((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2453 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _688))) + ((_2459 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _1524)) * cbPerFrame._m0[3u].x);
    float _2481 = ((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2455 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _688))) + ((_2461 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1524)) * cbPerFrame._m0[3u].x);
    float _2482 = ((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2457 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _688))) + ((_2463 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1524)) * cbPerFrame._m0[3u].x);
    uint _2483 = _232 + 6u;
    float _2491 = _623 / cbSceneParam._m0[86u].x;
    float _2492 = _624 / cbSceneParam._m0[86u].y;
    vec4 _2506 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, (log2((isnan(cbSceneParam._m0[77u].w) ? _544 : (isnan(_544) ? cbSceneParam._m0[77u].w : min(_544, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2508 = _2506.x;
    float _2509 = _2506.y;
    float _2510 = _2506.z;
    float _2511 = _2506.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_544 > cbSceneParam._m0[78u].w)
    {
        float _2566 = isnan(_544) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _544 : min(cbSceneParam._m0[80u].w, _544));
        float _2567 = _2566 / _544;
        float _2578 = _2567 * _595;
        float _2579 = _596 * _2567;
        float _2580 = (-0.0) - _2579;
        float _2582 = _2567 * _597;
        float _2584 = (cbSceneParam._m0[77u].w * _2580) / _2566;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2579;
        float _2592 = sqrt(((_2578 * _2578) + (_2579 * _2579)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2566)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2580 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2723 = 1.0 / cbSceneParam._m0[80u].x;
            float _2724 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2725 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            _2779 = ((abs(_2592 / _2580) * cbSceneParam._m0[80u].y) * ((((_2734 - _2735) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))))) * _2723)) - ((exp2(_2602 * _2734) - exp2(_2602 * _2735)) * _2723))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2511);
        _2604 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2508;
        _2606 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2509;
        _2608 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2510;
        _2610 = _2790 * _2511;
    }
    else
    {
        _2604 = _2508;
        _2606 = _2509;
        _2608 = _2510;
        _2610 = _2511;
    }
    bool _2817;
    vec4 _2620;
    vec4 _2642;
    float _2644;
    float _2648;
    float _2649;
    float _2650;
    float _2651;
    bool _2661;
    for (;;)
    {
        _2620 = cbMatDynParam._m0[0u];
        float _2622 = roundEven(_2620.y);
        bool _2623 = _2622 == 3.0;
        float _2624 = log2(_2610);
        float _2631 = exp2(_2624 * cbSceneParam._m0[78u].x) * _2480;
        float _2632 = exp2(_2624 * cbSceneParam._m0[78u].y) * _2481;
        float _2633 = exp2(_2624 * cbSceneParam._m0[78u].z) * _2482;
        float _2640 = _611 + (-0.5);
        _2642 = cbMtdParam._m0[1u];
        _2644 = _2642.y * _2640;
        float _2647 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2648 = _2647 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
        _2649 = _2647 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
        _2650 = _2647 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
        _2651 = _2640 * 0.999000012874603271484375;
        _2661 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2661)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2651) < 0.5)
            {
                _2817 = true;
                break;
            }
        }
        uint _2758 = _663 + uint(_2620.w);
        if ((cbInstanceData._m0[_2758].w < 1.0) && ((cbInstanceData._m0[_2758].w + _2651) < 0.5))
        {
            _2817 = true;
            break;
        }
        if ((_2644 + 1.0) < _2642.x)
        {
            _2817 = true;
            break;
        }
        _2817 = false;
        break;
    }
    float _3022;
    if (_2817)
    {
        discard_state = true;
        _3022 = 0.0;
    }
    else
    {
        _3022 = cbInstanceData._m0[_2483].w;
    }
    SV_Target.x = _2648;
    SV_Target.y = _2649;
    SV_Target.z = _2650;
    SV_Target.w = _3022;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2483].w;
    discard_exit();
}


