#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1299;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3885 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3896 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3907 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3918 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _429 = (_422 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _430 = (_422 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _431 = (_422 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[24u].x) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _502 = (_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429;
    float _503 = (_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430;
    float _504 = (_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431;
    float _508 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _502;
    float _511 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _503;
    float _514 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _504;
    float _521 = ((_502 - _508) * (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) + _508;
    float _522 = ((_503 - _511) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _511;
    float _523 = ((_504 - _514) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _514;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _291) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _292) + cbTextureTilingScale._m0[14u].w));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _603 = _601.x;
    float _604 = _601.y;
    float _605 = _601.z;
    float _612 = ((_584.x - _603) * _422) + _603;
    float _613 = ((_584.y - _604) * _422) + _604;
    float _614 = ((_584.z - _605) * _422) + _605;
    vec4 _626 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _639 = ((_626.z - _614) * _495) + _614;
    float _642 = ((((_626.x - _612) * _495) + _612) * 2.0) + (-1.0);
    float _643 = ((((_626.y - _613) * _495) + _613) * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3940 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _649 = sqrt(1.0 - (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))));
    vec4 _662 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _680 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _682 = _680.x;
    float _683 = 1.0 - _682;
    float _696 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_682 - _683) * cbMtdParam._m0[24u].z) + _683) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3951 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _697 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _704 = (_697 * ((_542.x * cbMtdParam._m0[18u].x) - _521)) + _521;
    float _705 = (_697 * ((_542.y * cbMtdParam._m0[18u].y) - _522)) + _522;
    float _706 = (_697 * ((_542.z * cbMtdParam._m0[18u].z) - _523)) + _523;
    float _711 = (((_561.z - _639) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _639;
    vec4 _724 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3962 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _741 = (_697 * (_724.z - _711)) + _711;
    float _746 = _642 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_561.x * 2.0) + (-1.0)));
    float _747 = _643 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_561.y * 2.0) + (-1.0)));
    float _759 = (((_731 - _746) + (cbMtdParam._m0[21u].x * _746)) * _697) + _746;
    float _760 = (((_732 - _747) + (cbMtdParam._m0[21u].x * _747)) * _697) + _747;
    float _761 = (_697 * (sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) - _649)) + _649;
    float _763 = cbMtdParam._m0[22u].x + _662.w;
    float _766 = fma(_761, _238 * NORMAL.x, fma(_760, _245 * TANGENT.x, (_231 * _223) * _759));
    float _769 = fma(_761, _238 * NORMAL.y, fma(_760, _245 * TANGENT.y, (_231 * _224) * _759));
    float _772 = fma(_761, _238 * NORMAL.z, fma(_760, _245 * TANGENT.z, (_231 * _225) * _759));
    float _776 = inversesqrt(dot(vec3(_766, _769, _772), vec3(_766, _769, _772)));
    float _777 = _776 * _766;
    float _778 = _776 * _769;
    float _779 = _776 * _772;
    float _3973 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _780 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3995 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4006 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4017 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _798 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _850 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _840);
    float _851 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _840);
    float _852 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _840);
    float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
    float _857 = _850 * _856;
    float _858 = _851 * _856;
    float _859 = _852 * _856;
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _884 = fma(_779, cbSceneParam._m0[5u].z, fma(_778, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _777));
    float _887 = fma(_779, cbSceneParam._m0[6u].z, fma(_778, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _777));
    float _890 = fma(_779, cbSceneParam._m0[7u].z, fma(_778, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _777));
    uint _904 = (_272 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_904].z;
    float _4028 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    vec4 _924 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _928 = ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * TEXCOORD_5.w) * _924.x;
    float _929 = dot(vec3(_777, _778, _779), vec3(_857, _858, _859));
    float _932 = _929 * 2.0;
    float _936 = (_932 * _777) - _857;
    float _937 = (_932 * _778) - _858;
    float _938 = (_932 * _779) - _859;
    float _942 = abs(dot(vec3(_857, _858, _859), vec3(_777, _778, _779)));
    float _4061 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _944 = sqrt(_780);
    float _957 = exp2((_944 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_944 * 3.0));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_997, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989));
        float _1027 = fma(_997, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989));
        float _1031 = fma(_997, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989));
        float _1056 = _989 + _777;
        float _1057 = _993 + _778;
        float _1058 = _997 + _779;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1023;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1027;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1031;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_777, _778, _779), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _4109 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_777, _778, _779), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4142 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_777, _778, _779), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4175 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_997, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989));
        float _1341 = fma(_997, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989));
        float _1345 = fma(_997, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989));
        float _1368 = _989 + _777;
        float _1369 = _993 + _778;
        float _1370 = _997 + _779;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_777, _778, _779), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4238 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_777, _778, _779), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4271 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_777, _778, _779), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4304 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1299;
        _1607 = _1299;
        _1608 = _1299;
        _1609 = _1299;
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1311)) + _1311;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1312)) + _1312;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1313)) + _1313;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _936 * 0.5;
    float _1675 = _937 * 0.5;
    float _1676 = _938 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _780);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_997, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_997, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_997, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_938, cbModelParam._m0[13u].z, fma(_937, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936));
        float _1804 = fma(_938, cbModelParam._m0[14u].z, fma(_937, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936));
        float _1807 = fma(_938, cbModelParam._m0[15u].z, fma(_937, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1835 = frontier_phi_14_12_ladder;
        }
        float _2004;
        if (_1804 > 0.0)
        {
            _2004 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2004 = frontier_phi_23_19_ladder;
        }
        float _2299;
        if (_1807 > 0.0)
        {
            _2299 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2299 = frontier_phi_35_30_ladder;
        }
        float _2301 = isnan(_2004) ? _1835 : (isnan(_1835) ? _2004 : min(_1835, _2004));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1801) + _1790;
        float _2307 = (_2302 * _1804) + _1794;
        float _2308 = (_2302 * _1807) + _1798;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_13_35_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_13_35_ladder_2;
        _1825 = frontier_phi_13_35_ladder_1;
        _1827 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_936, _937, _938), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _780);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_997, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_997, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_997, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_938, cbModelParam._m0[21u].z, fma(_937, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936));
        float _1899 = fma(_938, cbModelParam._m0[22u].z, fma(_937, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936));
        float _1902 = fma(_938, cbModelParam._m0[23u].z, fma(_937, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936));
        float _2009;
        if (_1896 > 0.0)
        {
            _2009 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2009 = frontier_phi_25_21_ladder;
        }
        float _2326;
        if (_1899 > 0.0)
        {
            _2326 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2326 = frontier_phi_37_32_ladder;
        }
        float _2653;
        if (_1902 > 0.0)
        {
            _2653 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2653 = frontier_phi_47_44_ladder;
        }
        float _2655 = isnan(_2326) ? _2009 : (isnan(_2009) ? _2326 : min(_2009, _2326));
        float _2656 = isnan(_2653) ? _2655 : (isnan(_2655) ? _2653 : min(_2655, _2653));
        float _2660 = (_2656 * _1896) + _1885;
        float _2661 = (_2656 * _1899) + _1889;
        float _2662 = (_2656 * _1902) + _1893;
        float _2663 = _2656 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2663;
        float _2666 = _2663 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2662 > _2666) || ((_2662 < _2664) || ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 < _2664) || (_2660 > _2666))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2662, cbModelParam._m0[17u].z, fma(_2661, cbModelParam._m0[17u].y, _2660 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2662, cbModelParam._m0[18u].z, fma(_2661, cbModelParam._m0[18u].y, _2660 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2662, cbModelParam._m0[19u].z, fma(_2661, cbModelParam._m0[19u].y, _2660 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_22_47_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_22_47_ladder_2;
        _1923 = frontier_phi_22_47_ladder_1;
        _1925 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_936, _937, _938), _1832);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1937 = ((((1.0 - _957) * ((_944 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_957 * _944)) * _928;
    float _1938 = _1937 * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1939 = _1937 * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1940 = _1937 * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1996 = _1983 / _1995;
    float _1997 = _1987 / _1995;
    float _1998 = _1991 / _1995;
    float _2145;
    float _2146;
    float _2147;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2025 = ((uint(_1998 > cbSceneParam._m0[59u].y) + uint(_1998 > cbSceneParam._m0[59u].x)) + uint(_1998 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2026 = _2025 + 43u;
        uint _2034 = _2025 + 44u;
        uint _2042 = _2025 + 45u;
        uint _2050 = _2025 + 46u;
        float _2061 = fma(_1995, cbSceneParam._m0[_2026].w, fma(_1991, cbSceneParam._m0[_2026].z, fma(_1987, cbSceneParam._m0[_2026].y, _1983 * cbSceneParam._m0[_2026].x)));
        float _2065 = fma(_1995, cbSceneParam._m0[_2034].w, fma(_1991, cbSceneParam._m0[_2034].z, fma(_1987, cbSceneParam._m0[_2034].y, _1983 * cbSceneParam._m0[_2034].x)));
        float _2073 = fma(_1995, cbSceneParam._m0[_2050].w, fma(_1991, cbSceneParam._m0[_2050].z, fma(_1987, cbSceneParam._m0[_2050].y, _1983 * cbSceneParam._m0[_2050].x)));
        float _2078 = cbSceneParam._m0[33u].z * _2073;
        float _2080 = cbSceneParam._m0[33u].w * _2073;
        float _2083 = fma(_1995, cbSceneParam._m0[_2042].w, fma(_1991, cbSceneParam._m0[_2042].z, fma(_1987, cbSceneParam._m0[_2042].y, _1983 * cbSceneParam._m0[_2042].x))) / _2073;
        float _2131 = (cbSceneParam._m0[33u].x - sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998))) * cbSceneParam._m0[33u].y;
        float _4430 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2138 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2078 + _2061) / _2073, (_2080 + _2065) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 + _2061) / _2073, (_2065 - _2078) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 - _2078) / _2073, (_2065 - _2080) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 - _2080) / _2073, (_2078 + _2065) / _2073), _2083), 0.0)).x), vec4(0.25)));
        _2145 = 1.0 - (_2138 * cbSceneParam._m0[34u].x);
        _2146 = 1.0 - (_2138 * cbSceneParam._m0[34u].y);
        _2147 = 1.0 - (_2138 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2145 = 1.0;
        _2146 = 1.0;
        _2147 = 1.0;
    }
    float _2211;
    float _2213;
    float _2215;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2199 = fma(_1995, cbSceneParam._m0[63u].w, fma(_1991, cbSceneParam._m0[63u].z, fma(_1987, cbSceneParam._m0[63u].y, _1983 * cbSceneParam._m0[63u].x)));
        float _2200 = fma(_1995, cbSceneParam._m0[60u].w, fma(_1991, cbSceneParam._m0[60u].z, fma(_1987, cbSceneParam._m0[60u].y, _1983 * cbSceneParam._m0[60u].x))) / _2199;
        float _2201 = fma(_1995, cbSceneParam._m0[61u].w, fma(_1991, cbSceneParam._m0[61u].z, fma(_1987, cbSceneParam._m0[61u].y, _1983 * cbSceneParam._m0[61u].x))) / _2199;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2200 >= cbSceneParam._m0[64u].x) && (_2201 >= cbSceneParam._m0[64u].y)) && (_2200 <= cbSceneParam._m0[64u].z)) && (_2201 <= cbSceneParam._m0[64u].w))
        {
            float _2339 = fma(_1995, cbSceneParam._m0[62u].w, fma(_1991, cbSceneParam._m0[62u].z, fma(_1987, cbSceneParam._m0[62u].y, _1983 * cbSceneParam._m0[62u].x))) / _2199;
            float _2343 = isnan(cbSceneParam._m0[41u].w) ? _2339 : (isnan(_2339) ? cbSceneParam._m0[41u].w : max(_2339, cbSceneParam._m0[41u].w));
            float _2386 = (cbSceneParam._m0[33u].x - sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998))) * cbSceneParam._m0[33u].y;
            float _4446 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
            float _2393 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2200, cbSceneParam._m0[33u].w + _2201), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2200, _2201 - cbSceneParam._m0[33u].z), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2200 - cbSceneParam._m0[33u].z, _2201 - cbSceneParam._m0[33u].w), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2200 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2201), _2343), 0.0)).x), vec4(0.25)));
            float _2397 = 1.0 - (_2393 * cbSceneParam._m0[34u].x);
            float _2398 = 1.0 - (_2393 * cbSceneParam._m0[34u].y);
            float _2399 = 1.0 - (_2393 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2399) ? _2147 : (isnan(_2147) ? _2399 : min(_2147, _2399));
            frontier_phi_34_33_ladder_1 = isnan(_2398) ? _2146 : (isnan(_2146) ? _2398 : min(_2146, _2398));
            frontier_phi_34_33_ladder_2 = isnan(_2397) ? _2145 : (isnan(_2145) ? _2397 : min(_2145, _2397));
        }
        else
        {
            frontier_phi_34_33_ladder = _2147;
            frontier_phi_34_33_ladder_1 = _2146;
            frontier_phi_34_33_ladder_2 = _2145;
        }
        _2211 = frontier_phi_34_33_ladder_2;
        _2213 = frontier_phi_34_33_ladder_1;
        _2215 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2211 = _2145;
        _2213 = _2146;
        _2215 = _2147;
    }
    uvec4 _2220 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2222 = _2220.x * 14u;
    uint _2223 = _2222 + 13u;
    float _2230 = _928 + (-1.0);
    float _2235 = (cbLight._m0[_2223].x * _2230) + 1.0;
    float _2236 = (cbLight._m0[_2223].y * _2230) + 1.0;
    float _2237 = (cbLight._m0[_2223].z * _2230) + 1.0;
    float _2238 = (cbLight._m0[_2223].w * _2230) + 1.0;
    uint _2239 = _2222 + 5u;
    float _2245 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
    uint _2249 = _2222 + 4u;
    float _2258 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2262 = _2222 | 1u;
    float _2273 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_777, _778, _779));
    float _2276 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_777, _778, _779));
    float _4482 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _4493 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2281 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * 0.3183098733425140380859375;
    float _2283 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2290 = ((cbLight._m0[_2239].x * _2245) * _2283) + (((cbLight._m0[_2249].x * _2211) * _2258) * _2281);
    float _2291 = ((_2245 * cbLight._m0[_2239].y) * _2283) + (((cbLight._m0[_2249].y * _2213) * _2258) * _2281);
    float _2292 = ((_2245 * cbLight._m0[_2239].z) * _2283) + (((cbLight._m0[_2249].z * _2215) * _2258) * _2281);
    uvec4 _2296 = floatBitsToUint(cbLight._m0[_2222 + 12u]);
    bool _2298 = _2296.x == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2298)
    {
        _2400 = _2290;
        _2402 = _2291;
        _2404 = _2292;
    }
    else
    {
        uint _2408 = _2222 + 6u;
        float _2424 = (dot(vec3(cbLight._m0[_2222 + 2u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4504 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2427 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2400 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2290;
        _2402 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2291;
        _2404 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2292;
    }
    bool _2407 = _2296.y == 0u;
    float _2462;
    float _2464;
    float _2466;
    if (_2407)
    {
        _2462 = _2400;
        _2464 = _2402;
        _2466 = _2404;
    }
    else
    {
        uint _2624 = _2222 + 7u;
        float _2640 = (dot(vec3(cbLight._m0[_2222 + 3u].xyz), vec3(_777, _778, _779)) * 0.5) + 0.5;
        float _2641 = _2640 * _2640;
        float _4520 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2642 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2643 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2462 = (((cbLight._m0[_2624].x * 0.3183098733425140380859375) * _2642) * _2643) + _2400;
        _2464 = (((cbLight._m0[_2624].y * 0.3183098733425140380859375) * _2642) * _2643) + _2402;
        _2466 = (((cbLight._m0[_2624].z * 0.3183098733425140380859375) * _2642) * _2643) + _2404;
    }
    uint _2469 = _2222 + 8u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _780) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2222].x + _857;
    float _2485 = cbLight._m0[_2222].y + _858;
    float _2486 = cbLight._m0[_2222].z + _859;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2222].xyz));
    float _4536 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
    float _4547 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _2498 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _2499 = dot(vec3(_777, _778, _779), vec3(_2491, _2492, _2493));
    float _4558 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2503 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2491, _2492, _2493));
    float _4569 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2507 = _2483 * _2483;
    float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
    float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2523 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2498 * ((_2497 * _2523) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2523) + _2483) * _2497))) * _2497;
    float _4580 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
    uint _2550 = _2222 + 9u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _780) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2262].x + _857;
    float _2564 = cbLight._m0[_2262].y + _858;
    float _2565 = cbLight._m0[_2262].z + _859;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2262].xyz));
    float _4591 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _2577 = dot(vec3(_777, _778, _779), vec3(_2570, _2571, _2572));
    float _4602 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2581 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2570, _2571, _2572));
    float _4613 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2585 = _2562 * _2562;
    float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
    float _2598 = (exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2599 = 1.0 - _2562;
    float _2609 = (0.5 / (((_2498 * ((_2576 * _2599) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2599) + _2562) * _2576))) * _2576;
    float _4624 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
    float _2621 = (((_2598 * cbLight._m0[_2550].x) * _2611) * _2245) + ((((cbLight._m0[_2469].x * _2211) * _2522) * _2536) * _2258);
    float _2622 = (((_2598 * cbLight._m0[_2550].y) * _2611) * _2245) + ((((cbLight._m0[_2469].y * _2213) * _2522) * _2536) * _2258);
    float _2623 = (((_2598 * cbLight._m0[_2550].z) * _2611) * _2245) + ((((cbLight._m0[_2469].z * _2215) * _2522) * _2536) * _2258);
    float _2679;
    float _2681;
    float _2683;
    if (_2298)
    {
        _2679 = _2621;
        _2681 = _2622;
        _2683 = _2623;
    }
    else
    {
        uint _2685 = _2222 + 2u;
        uint _2689 = _2222 + 10u;
        float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2685].w)) * _780) * 0.949999988079071044921875);
        float _2704 = _2703 * _2703;
        float _2705 = cbLight._m0[_2685].x + _857;
        float _2706 = cbLight._m0[_2685].y + _858;
        float _2707 = cbLight._m0[_2685].z + _859;
        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
        float _2712 = _2711 * _2705;
        float _2713 = _2711 * _2706;
        float _2714 = _2711 * _2707;
        float _2715 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2685].xyz));
        float _4635 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2719 = dot(vec3(_777, _778, _779), vec3(_2712, _2713, _2714));
        float _4646 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2723 = dot(vec3(cbLight._m0[_2685].xyz), vec3(_2712, _2713, _2714));
        float _4657 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2727 = _2704 * _2704;
        float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
        float _2740 = (exp2(log2(1.0 - (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2741 = 1.0 - _2704;
        float _2751 = (0.5 / (((_2498 * ((_2718 * _2741) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2741) + _2704) * _2718))) * _2718;
        float _4668 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2679 = (((_2740 * cbLight._m0[_2689].x) * _2753) * _2754) + _2621;
        _2681 = (((_2740 * cbLight._m0[_2689].y) * _2753) * _2754) + _2622;
        _2683 = (((_2740 * cbLight._m0[_2689].z) * _2753) * _2754) + _2623;
    }
    float _2785;
    float _2787;
    float _2789;
    if (_2407)
    {
        _2785 = _2679;
        _2787 = _2681;
        _2789 = _2683;
    }
    else
    {
        uint _2796 = _2222 + 3u;
        uint _2800 = _2222 + 11u;
        float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2796].w)) * _780) * 0.949999988079071044921875);
        float _2815 = _2814 * _2814;
        float _2816 = cbLight._m0[_2796].x + _857;
        float _2817 = cbLight._m0[_2796].y + _858;
        float _2818 = cbLight._m0[_2796].z + _859;
        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
        float _2823 = _2822 * _2816;
        float _2824 = _2822 * _2817;
        float _2825 = _2822 * _2818;
        float _2826 = dot(vec3(_777, _778, _779), vec3(cbLight._m0[_2796].xyz));
        float _4684 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
        float _2830 = dot(vec3(_777, _778, _779), vec3(_2823, _2824, _2825));
        float _4695 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2834 = dot(vec3(cbLight._m0[_2796].xyz), vec3(_2823, _2824, _2825));
        float _4706 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2838 = _2815 * _2815;
        float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
        float _2851 = (exp2(log2(1.0 - (isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2852 = 1.0 - _2815;
        float _2862 = (0.5 / (((_2498 * ((_2829 * _2852) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2852) + _2815) * _2829))) * _2829;
        float _4717 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2864 = (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
        float _2865 = isnan(1.0) ? _2238 : (isnan(_2238) ? 1.0 : min(_2238, 1.0));
        _2785 = (((_2851 * cbLight._m0[_2800].x) * _2864) * _2865) + _2679;
        _2787 = (((_2851 * cbLight._m0[_2800].y) * _2864) * _2865) + _2681;
        _2789 = (((_2851 * cbLight._m0[_2800].z) * _2864) * _2865) + _2683;
    }
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_2220.y == 0u)
    {
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.x;
        uint _2898 = uint((float(_2886.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2887))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2887)));
        float _2908 = (log2(_1998 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2909 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        uint _2912 = uint(isnan(14.0) ? _2909 : (isnan(_2909) ? 14.0 : min(_2909, 14.0)));
        uvec4 _2917 = texelFetch(g_lightClusterGridBuffer, int(((_2912 << 2u) + (_2898 << 6u)) >> 2u));
        uint _2918 = _2917.x;
        uint _2919 = _2886.z;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        if (((((1u << ((_2919 >> 4u) & 15u)) + 4294967295u) & _2918) == 0u) || ((_2919 & 240u) == 0u))
        {
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
        }
        else
        {
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            uint _3149 = 0u;
            uint _3158;
            bool _3159;
            for (;;)
            {
                _3158 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                _3159 = _3158 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3159)
                {
                    frontier_phi_66_pred = _3148;
                    frontier_phi_66_pred_1 = _3147;
                    frontier_phi_66_pred_2 = _3146;
                    frontier_phi_66_pred_3 = _3145;
                    frontier_phi_66_pred_4 = _3144;
                    frontier_phi_66_pred_5 = _3143;
                }
                else
                {
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    uint _3273;
                    _3267 = _3143;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3158;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3277 = uint(findLSB(_3273)) + (_3149 << 5u);
                        uint _3274 = (_3273 + 4294967295u) & _3273;
                        uint _3279 = _3277 * 48u;
                        vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3299 = (_3277 * 48u) + 4u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3299)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3299 + 3u)).x));
                        uint _3318 = (_3277 * 48u) + 8u;
                        vec3 _3329 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x));
                        float _3333 = _3293.x - _1996;
                        float _3334 = _3293.y - _1997;
                        float _3335 = _3293.z - _1998;
                        float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                        float _3339 = inversesqrt(_3336);
                        float _3340 = _3339 * _3333;
                        float _3341 = _3339 * _3334;
                        float _3342 = _3339 * _3335;
                        float _3343 = dot(vec3(_884, _887, _890), vec3(_3340, _3341, _3342));
                        float _3348 = 1.0 - (_3336 * _3293.w);
                        float _4743 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3349 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                        float _3350 = sqrt(_3336) * _3312.w;
                        float _3353 = 1.39999997615814208984375 / (_3350 + 1.39999997615814208984375);
                        float _3354 = _3353 * _3353;
                        float _3357 = ((1.0 - _3354) * _3343) + _3354;
                        float _3360 = _3350 * _3350;
                        float _3364 = ((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3349) / ((_3360 * 0.699999988079071044921875) + 1.0);
                        float _3368 = (-0.0) - _1996;
                        float _3369 = (-0.0) - _1997;
                        float _3370 = (-0.0) - _1998;
                        float _3374 = inversesqrt(dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370)));
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3384 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                        float _3385 = 1.0 - _944;
                        float _3392 = sqrt(1.0 - ((1.0 - (_3385 * _3385)) * (1.0 - (_3384 * _3384))));
                        float _3393 = _3392 * _3392;
                        float _3394 = _3393 * _3393;
                        float _3395 = _3375 + _3340;
                        float _3396 = _3376 + _3341;
                        float _3397 = _3377 + _3342;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3405 = dot(vec3(_884, _887, _890), vec3(_3375, _3376, _3377));
                        float _4759 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                        float _3409 = dot(vec3(_884, _887, _890), vec3(_3401 * _3395, _3401 * _3396, _3401 * _3397));
                        float _4770 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3412 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3416 = ((_3412 * _3412) * (_3394 + (-1.0))) + 1.0;
                        float _3417 = _3353 * _3393;
                        float _3418 = _3417 * _3417;
                        float _3421 = ((1.0 - _3418) * _3343) + _3418;
                        float _4781 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3423 = 1.0 - _3393;
                        float _3433 = (0.5 / (((_3422 * ((_3408 * _3423) + _3393)) + 9.9999999392252902907785028219223e-09) + (((_3422 * _3423) + _3393) * _3408))) * _3422;
                        float _4792 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3444 = (((_3394 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3416 * _3416) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125))) * _3349;
                        _3202 = (_3364 * _3312.x) + _3270;
                        _3203 = (_3364 * _3312.y) + _3271;
                        _3204 = (_3364 * _3312.z) + _3272;
                        _3199 = (_3444 * _3329.x) + _3267;
                        _3200 = (_3444 * _3329.y) + _3268;
                        _3201 = (_3444 * _3329.z) + _3269;
                        if (_3274 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3267 = _3199;
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3274;
                        }
                    }
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3203;
                    frontier_phi_66_pred_2 = _3202;
                    frontier_phi_66_pred_3 = _3201;
                    frontier_phi_66_pred_4 = _3200;
                    frontier_phi_66_pred_5 = _3199;
                }
                _3009 = frontier_phi_66_pred;
                _3007 = frontier_phi_66_pred_1;
                _3005 = frontier_phi_66_pred_2;
                _3003 = frontier_phi_66_pred_3;
                _3001 = frontier_phi_66_pred_4;
                _2999 = frontier_phi_66_pred_5;
                uint _3150 = _3149 + 1u;
                if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3143 = _2999;
                    _3144 = _3001;
                    _3145 = _3003;
                    _3146 = _3005;
                    _3147 = _3007;
                    _3148 = _3009;
                    _3149 = _3150;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
        }
        uvec4 _3012 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3013 = _3012.z;
        uint _3015 = (_3013 >> 8u) & 15u;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((4294967295u << _3015) & _2918) == 0u)
        {
            _3111 = _2998;
            _3113 = _3000;
            _3115 = _3002;
            _3117 = _3004;
            _3119 = _3006;
            _3121 = _3008;
        }
        else
        {
            float _3136 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
            float _3137 = _3136 * _1996;
            float _3138 = _3136 * _1997;
            float _3139 = _3136 * _1998;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3015 < ((_3013 >> 12u) & 15u))
            {
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3122;
                float _3250 = _2998;
                float _3251 = _3000;
                float _3252 = _3002;
                float _3253 = _3004;
                float _3254 = _3006;
                float _3255 = _3008;
                uint _3256 = _3015;
                uint _3265;
                bool _3266;
                for (;;)
                {
                    _3265 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3256 << 2u)) >> 2u)).x;
                    _3266 = _3265 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3266)
                    {
                        frontier_phi_72_pred = _3255;
                        frontier_phi_72_pred_1 = _3254;
                        frontier_phi_72_pred_2 = _3253;
                        frontier_phi_72_pred_3 = _3252;
                        frontier_phi_72_pred_4 = _3251;
                        frontier_phi_72_pred_5 = _3250;
                    }
                    else
                    {
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3462 = _3250;
                        float _3463 = _3251;
                        float _3464 = _3252;
                        float _3465 = _3253;
                        float _3466 = _3254;
                        float _3467 = _3255;
                        uint _3468 = _3265;
                        uint _3469;
                        vec4 _3494;
                        float _3495;
                        vec4 _3510;
                        vec3 _3522;
                        vec4 _3537;
                        vec4 _3552;
                        float _3598;
                        bool _3599;
                        for (;;)
                        {
                            uint _3479 = ((_3256 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3468));
                            _3469 = (_3468 + 4294967295u) & _3468;
                            uint _3481 = _3479 * 40u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3495 = _3494.w;
                            uint _3497 = (_3479 * 40u) + 4u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3479 * 40u) + 8u;
                            _3522 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x));
                            uint _3524 = (_3479 * 40u) + 16u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3479 * 40u) + 20u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3479 * 40u) + 24u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3573 = (_3479 * 40u) + 28u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3598 = fma(_1998, _3586.z, fma(_1997, _3586.y, _3586.x * _1996)) + _3586.w;
                            _3599 = !((fma(_1998, _3567.z, fma(_1997, _3567.y, _3567.x * _1996)) + _3567.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3599)
                            {
                                float _3626 = _3494.x - _1996;
                                float _3627 = _3494.y - _1997;
                                float _3628 = _3494.z - _1998;
                                float _3629 = dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628));
                                float _3632 = inversesqrt(_3629);
                                float _3633 = _3632 * _3626;
                                float _3634 = _3632 * _3627;
                                float _3635 = _3632 * _3628;
                                float _3639 = 1.0 - (_3629 / (_3495 * _3495));
                                float _4803 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                                float _3644 = sqrt(_3629) * _3510.w;
                                float _3646 = 1.39999997615814208984375 / (_3644 + 1.39999997615814208984375);
                                float _3647 = _3646 * _3646;
                                float _3650 = ((1.0 - _3647) * dot(vec3(_3633, _3634, _3635), vec3(_884, _887, _890))) + _3647;
                                float _3653 = _3644 * _3644;
                                float _3657 = (fma(_1998, _3537.z, fma(_1997, _3537.y, _3537.x * _1996)) + _3537.w) / _3598;
                                float _3658 = (fma(_1998, _3552.z, fma(_1997, _3552.y, _3552.x * _1996)) + _3552.w) / _3598;
                                float _3662 = 1.0 - dot(vec2(_3657, _3658), vec2(_3657, _3658));
                                float _4819 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                                float _3664 = _3663 * (((isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0))) * _3640) / ((_3653 * 0.699999988079071044921875) + 1.0));
                                float _3676 = exp2(log2(1.0 / ((_3653 * 3.5) + 5.0)) * 0.25);
                                float _3677 = 1.0 - _944;
                                float _3684 = sqrt(1.0 - ((1.0 - (_3677 * _3677)) * (1.0 - (_3676 * _3676))));
                                float _3685 = _3684 * _3684;
                                float _3686 = _3685 * _3685;
                                float _3687 = _3633 - _3137;
                                float _3688 = _3634 - _3138;
                                float _3689 = _3635 - _3139;
                                float _3693 = inversesqrt(dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689)));
                                float _3697 = dot(vec3(_884, _887, _890), vec3((-0.0) - _3137, (-0.0) - _3138, (-0.0) - _3139));
                                float _4830 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3701 = dot(vec3(_884, _887, _890), vec3(_3693 * _3687, _3693 * _3688, _3693 * _3689));
                                float _4841 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3708 = ((_3704 * _3704) * (_3686 + (-1.0))) + 1.0;
                                float _3709 = _3646 * _3685;
                                float _3710 = _3709 * _3709;
                                float _3716 = ((1.0 - _3710) * dot(vec3(_884, _887, _890), vec3(_3633, _3634, _3635))) + _3710;
                                float _4852 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3718 = 1.0 - _3685;
                                float _3728 = (0.5 / (((_3717 * ((_3700 * _3718) + _3685)) + 9.9999999392252902907785028219223e-09) + (((_3717 * _3718) + _3685) * _3700))) * _3717;
                                float _4863 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3738 = (_3663 * _3640) * (((_3686 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3708 * _3708) * ((_3653 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3664 * _3510.y;
                                frontier_phi_78_pred_1 = _3664 * _3510.x;
                                frontier_phi_78_pred_2 = _3738 * _3522.z;
                                frontier_phi_78_pred_3 = _3738 * _3522.y;
                                frontier_phi_78_pred_4 = _3738 * _3522.x;
                                frontier_phi_78_pred_5 = _3664 * _3510.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3746 = frontier_phi_78_pred;
                            _3745 = frontier_phi_78_pred_1;
                            _3744 = frontier_phi_78_pred_2;
                            _3743 = frontier_phi_78_pred_3;
                            _3742 = frontier_phi_78_pred_4;
                            _3747 = frontier_phi_78_pred_5;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            if (_3469 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3469;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3454;
                        frontier_phi_72_pred_1 = _3453;
                        frontier_phi_72_pred_2 = _3452;
                        frontier_phi_72_pred_3 = _3451;
                        frontier_phi_72_pred_4 = _3450;
                        frontier_phi_72_pred_5 = _3449;
                    }
                    _3122 = frontier_phi_72_pred;
                    _3120 = frontier_phi_72_pred_1;
                    _3118 = frontier_phi_72_pred_2;
                    _3116 = frontier_phi_72_pred_3;
                    _3114 = frontier_phi_72_pred_4;
                    _3112 = frontier_phi_72_pred_5;
                    uint _3257 = _3256 + 1u;
                    if (_3257 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3250 = _3112;
                        _3251 = _3114;
                        _3252 = _3116;
                        _3253 = _3118;
                        _3254 = _3120;
                        _3255 = _3122;
                        _3256 = _3257;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3122;
                frontier_phi_60_61_ladder_1 = _3120;
                frontier_phi_60_61_ladder_2 = _3116;
                frontier_phi_60_61_ladder_3 = _3114;
                frontier_phi_60_61_ladder_4 = _3112;
                frontier_phi_60_61_ladder_5 = _3118;
            }
            else
            {
                frontier_phi_60_61_ladder = _3008;
                frontier_phi_60_61_ladder_1 = _3006;
                frontier_phi_60_61_ladder_2 = _3002;
                frontier_phi_60_61_ladder_3 = _3000;
                frontier_phi_60_61_ladder_4 = _2998;
                frontier_phi_60_61_ladder_5 = _3004;
            }
            _3111 = frontier_phi_60_61_ladder_4;
            _3113 = frontier_phi_60_61_ladder_3;
            _3115 = frontier_phi_60_61_ladder_2;
            _3117 = frontier_phi_60_61_ladder_5;
            _3119 = frontier_phi_60_61_ladder_1;
            _3121 = frontier_phi_60_61_ladder;
        }
        float _3126 = isnan(1.0) ? _928 : (isnan(_928) ? 1.0 : min(_928, 1.0));
        _2931 = (_3126 * _3117) + _2462;
        _2933 = (_3126 * _3119) + _2464;
        _2935 = (_3126 * _3121) + _2466;
        _2937 = ((_3111 * 0.039999999105930328369140625) * _3126) + _2785;
        _2939 = ((_3113 * 0.039999999105930328369140625) * _3126) + _2787;
        _2941 = ((_3115 * 0.039999999105930328369140625) * _3126) + _2789;
    }
    else
    {
        _2931 = _2462;
        _2933 = _2464;
        _2935 = _2466;
        _2937 = _2785;
        _2939 = _2787;
        _2941 = _2789;
    }
    float _4879 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4890 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4901 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    uint _2961 = _272 + 6u;
    float _2969 = _865 / cbSceneParam._m0[86u].x;
    float _2970 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2984 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, (log2((isnan(cbSceneParam._m0[77u].w) ? _798 : (isnan(_798) ? cbSceneParam._m0[77u].w : min(_798, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2986 = _2984.x;
    float _2987 = _2984.y;
    float _2988 = _2984.z;
    float _2989 = _2984.w;
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    if (_798 > cbSceneParam._m0[78u].w)
    {
        float _3023 = isnan(_798) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _798 : min(cbSceneParam._m0[80u].w, _798));
        float _3024 = _3023 / _798;
        float _3035 = _3024 * _850;
        float _3036 = _851 * _3024;
        float _3037 = (-0.0) - _3036;
        float _3039 = _3024 * _852;
        float _3041 = (cbSceneParam._m0[77u].w * _3037) / _3023;
        float _3042 = _3041 + cbSceneParam._m0[79u].w;
        float _3043 = cbSceneParam._m0[79u].w - _3036;
        float _3049 = sqrt(((_3035 * _3035) + (_3036 * _3036)) + (_3039 * _3039));
        float _3052 = (1.0 - (cbSceneParam._m0[77u].w / _3023)) * _3049;
        float _3057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3037 - _3041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3042 > 0.0) ? exp2(_3057 * _3042) : (2.0 - exp2(_3059 * _3042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3052;
        }
        else
        {
            float _3172 = 1.0 / cbSceneParam._m0[80u].x;
            float _3173 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : max(_3042, _3043));
            float _3174 = isnan(_3043) ? _3042 : (isnan(_3042) ? _3043 : min(_3042, _3043));
            float _3183 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : min(_3173, 0.0));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            _3212 = ((abs(_3049 / _3037) * cbSceneParam._m0[80u].y) * ((((_3183 - _3184) * 2.0) - ((exp2(_3057 * (isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0)))) - exp2(_3057 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0))))) * _3172)) - ((exp2(_3059 * _3183) - exp2(_3059 * _3184)) * _3172))) + (_3052 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2969, _2970, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2989);
        _3061 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2986;
        _3063 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2987;
        _3065 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2988;
        _3067 = _3223 * _2989;
    }
    else
    {
        _3061 = _2986;
        _3063 = _2987;
        _3065 = _2988;
        _3067 = _2989;
    }
    float _3079 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3080 = _3079 == 3.0;
    float _3081 = log2(_3067);
    float _3088 = exp2(_3081 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_2931 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _928))) + ((_2937 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3089 = exp2(_3081 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2933 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _928))) + ((_2939 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3090 = exp2(_3081 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2935 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _928))) + ((_2941 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3099 = (_3079 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3099 * (_3080 ? _3088 : (_3088 + (cbSceneParam._m0[72u].w * _3061)));
    SV_Target.y = _3099 * (_3080 ? _3089 : (_3089 + (cbSceneParam._m0[72u].w * _3063)));
    SV_Target.z = _3099 * (_3080 ? _3090 : (_3090 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.w = cbInstanceData._m0[_2961].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2961].w;
}


