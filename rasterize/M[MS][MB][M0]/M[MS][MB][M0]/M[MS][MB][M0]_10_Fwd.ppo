#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1073;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_254 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_255 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _325 = _321.z;
    float _329 = (_321.x * 2.0) + (-1.0);
    float _330 = (_321.y * 2.0) + (-1.0);
    float _331 = dot(vec2(_329, _330), vec2(_329, _330));
    float _3382 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_295.x * 2.0) + (-1.0)));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_295.y * 2.0) + (-1.0)));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _358 = _356.x;
    float _359 = 1.0 - _358;
    float _392 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_358 - _359) * cbMtdParam._m0[24u].w) + _359) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _401 = ((((cbMtdParam._m0[10u].x - _280) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _393) + _280;
    float _402 = ((((cbMtdParam._m0[10u].y - _281) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _393) + _281;
    float _403 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _282)) * _393) + _282;
    float _408 = (((_295.z - _325) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _325;
    float _412 = ((cbMtdParam._m0[23u].y - _408) * _393) + _408;
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _436 = _434.x;
    float _437 = _434.y;
    float _446 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_223, _224, _225, 0.0));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _254) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _255) + cbTextureTilingScale._m0[18u].w));
    float _463 = _461.x;
    float _468 = fract(_461.w + cbPerFrame._m0[22u].x);
    float _470 = (1.0 - _468) * _463;
    float _475 = ((_468 + (-1.0)) + _463) * 9.0;
    float _477 = ((_463 + (-1.0)) + _468) * 9.0;
    float _478 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _479 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _493 = (_470 * ((_461.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _478 : (isnan(_478) ? 3.0 : min(_478, 3.0))) * 3.1415927410125732421875);
    float _495 = (_470 * ((_461.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _479 : (isnan(_479) ? 3.0 : min(_479, 3.0))) * 3.1415927410125732421875);
    float _499 = inversesqrt(dot(vec3(_493, _495, 1.0), vec3(_493, _495, 1.0)));
    float _515 = (((((0.5 - _436) + ((_493 * 0.5) * _499)) * _446) + _436) * 2.0) + (-1.0);
    float _516 = (((((0.5 - _437) + ((_499 * 0.5) * _495)) * _446) + _437) * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3424 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _533 = ((((cbMtdParam._m0[22u].z * _342) - _342) + _515) * _393) + _342;
    float _534 = ((((cbMtdParam._m0[22u].z * _343) - _343) + _516) * _393) + _343;
    float _535 = (_393 * (sqrt(1.0 - (isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0)))) - _337)) + _337;
    float _537 = cbMtdParam._m0[22u].x + _321.w;
    float _540 = fma(_535, _223, fma(_534, _229 * TANGENT.x, (_215 * _207) * _533));
    float _543 = fma(_535, _224, fma(_534, _229 * TANGENT.y, (_215 * _208) * _533));
    float _546 = fma(_535, _225, fma(_534, _229 * TANGENT.z, (_215 * _209) * _533));
    float _550 = inversesqrt(dot(vec3(_540, _543, _546), vec3(_540, _543, _546)));
    float _551 = _550 * _540;
    float _552 = _550 * _543;
    float _553 = _550 * _546;
    float _3435 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _554 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3457 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3468 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3479 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _572 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _623 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _613);
    float _624 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _613);
    float _625 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _613);
    float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
    float _630 = _623 * _629;
    float _631 = _624 * _629;
    float _632 = _625 * _629;
    float _638 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _639 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _660 = fma(_553, cbSceneParam._m0[5u].z, fma(_552, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _551));
    float _663 = fma(_553, cbSceneParam._m0[6u].z, fma(_552, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _551));
    float _666 = fma(_553, cbSceneParam._m0[7u].z, fma(_552, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _551));
    uint _680 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _686 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0)))) * cbInstanceData._m0[_680].x;
    float _687 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_680].y;
    float _688 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_680].z;
    float _3490 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _3501 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    vec4 _700 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _638, cbSceneParam._m0[86u].y * _639));
    float _704 = ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * TEXCOORD_5.w) * _700.x;
    float _705 = dot(vec3(_551, _552, _553), vec3(_630, _631, _632));
    float _708 = _705 * 2.0;
    float _712 = (_708 * _551) - _630;
    float _713 = (_708 * _552) - _631;
    float _714 = (_708 * _553) - _632;
    float _718 = abs(dot(vec3(_630, _631, _632), vec3(_551, _552, _553)));
    float _3523 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _720 = sqrt(_554);
    float _732 = exp2((_720 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_720 * 3.0));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _798 = fma(_772, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764));
        float _802 = fma(_772, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764));
        float _806 = fma(_772, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764));
        float _830 = _764 + _551;
        float _831 = _768 + _552;
        float _832 = _772 + _553;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _798;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _802;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _806;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_798 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_802 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_806 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_551, _552, _553), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3571 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_551, _552, _553), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3604 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_551, _552, _553), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3615 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3626 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3637 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1074 = _902;
        _1075 = _901;
        _1076 = _913;
        _1077 = _912;
        _1078 = _911;
        _1079 = _923;
        _1080 = _922;
        _1081 = _921;
        _1082 = _936;
        _1083 = _935;
        _1084 = _934;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _1073;
        _1074 = _1073;
        _1075 = _1073;
        _1076 = _1073;
        _1077 = _1073;
        _1078 = _1073;
        _1079 = _1073;
        _1080 = _1073;
        _1081 = _1073;
        _1082 = _1073;
        _1083 = _1073;
        _1084 = _1073;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_772, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764));
        float _1116 = fma(_772, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764));
        float _1120 = fma(_772, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764));
        float _1143 = _764 + _551;
        float _1144 = _768 + _552;
        float _1145 = _772 + _553;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_551, _552, _553), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3678 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3689 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3700 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_551, _552, _553), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3733 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_551, _552, _553), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3766 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1073;
        _1382 = _1073;
        _1383 = _1073;
        _1384 = _1073;
        _1385 = _1073;
        _1386 = _1073;
        _1387 = _1073;
        _1388 = _1073;
        _1389 = _1073;
        _1390 = _1073;
        _1391 = _1073;
        _1392 = _1073;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1085)) + _1085;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1086)) + _1086;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _712 * 0.5;
    float _1450 = _713 * 0.5;
    float _1451 = _714 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1072, _1076, _1079, _1082));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _554);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_772, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_772, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_772, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_714, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712));
        float _1581 = fma(_714, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712));
        float _1584 = fma(_714, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1612 = frontier_phi_14_12_ladder;
        }
        float _1815;
        if (_1581 > 0.0)
        {
            _1815 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1815 = frontier_phi_23_19_ladder;
        }
        float _2058;
        if (_1584 > 0.0)
        {
            _2058 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2058 = frontier_phi_35_30_ladder;
        }
        float _2060 = isnan(_1815) ? _1612 : (isnan(_1612) ? _1815 : min(_1612, _1815));
        float _2061 = isnan(_2058) ? _2060 : (isnan(_2060) ? _2058 : min(_2060, _2058));
        float _2065 = (_2061 * _1578) + _1567;
        float _2066 = (_2061 * _1581) + _1571;
        float _2067 = (_2061 * _1584) + _1575;
        float _2068 = _2061 * 9.9999997473787516355514526367188e-05;
        float _2070 = (-1.0) - _2068;
        float _2072 = _2068 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2067 > _2072) || ((_2067 < _2070) || ((_2066 > _2072) || ((_2066 < _2070) || ((_2065 < _2070) || (_2065 > _2072))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2191 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2067, cbModelParam._m0[9u].z, fma(_2066, cbModelParam._m0[9u].y, _2065 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2067, cbModelParam._m0[10u].z, fma(_2066, cbModelParam._m0[10u].y, _2065 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2067, cbModelParam._m0[11u].z, fma(_2066, cbModelParam._m0[11u].y, _2065 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_13_35_ladder = _2191.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2191.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2191.x * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_13_35_ladder_2;
        _1602 = frontier_phi_13_35_ladder_1;
        _1604 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_712, _713, _714), _1518);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _554);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_772, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_772, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_772, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_714, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712));
        float _1677 = fma(_714, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712));
        float _1680 = fma(_714, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712));
        float _1820;
        if (_1674 > 0.0)
        {
            _1820 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1820 = frontier_phi_25_21_ladder;
        }
        float _2085;
        if (_1677 > 0.0)
        {
            _2085 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2085 = frontier_phi_37_32_ladder;
        }
        float _2290;
        if (_1680 > 0.0)
        {
            _2290 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2290 = frontier_phi_46_43_ladder;
        }
        float _2292 = isnan(_2085) ? _1820 : (isnan(_1820) ? _2085 : min(_1820, _2085));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1674) + _1663;
        float _2298 = (_2293 * _1677) + _1667;
        float _2299 = (_2293 * _1680) + _1671;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2300;
        float _2303 = _2300 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2299 > _2303) || ((_2299 < _2301) || ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 < _2301) || (_2297 > _2303))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2498 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2299, cbModelParam._m0[17u].z, fma(_2298, cbModelParam._m0[17u].y, _2297 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2299, cbModelParam._m0[18u].z, fma(_2298, cbModelParam._m0[18u].y, _2297 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2299, cbModelParam._m0[19u].z, fma(_2298, cbModelParam._m0[19u].y, _2297 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_22_46_ladder = _2498.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2498.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2498.x * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_22_46_ladder_2;
        _1701 = frontier_phi_22_46_ladder_1;
        _1703 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_712, _713, _714), _1609);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1715 = ((((1.0 - _732) * ((_720 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_732 * _720)) * _704;
    float _1716 = _1715 * ((cbModelParam._m0[1u].w * (_1699 - _1600)) + _1600);
    float _1717 = _1715 * ((cbModelParam._m0[1u].w * (_1701 - _1602)) + _1602);
    float _1718 = _1715 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1747 = _704 + (-1.0);
    float _1752 = (cbLight._m0[_1740].x * _1747) + 1.0;
    float _1753 = (cbLight._m0[_1740].y * _1747) + 1.0;
    float _1754 = (cbLight._m0[_1740].z * _1747) + 1.0;
    float _1755 = (cbLight._m0[_1740].w * _1747) + 1.0;
    uint _1756 = _1739 + 5u;
    float _1762 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1766 = _1739 + 4u;
    float _1773 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1777 = _1739 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_551, _552, _553));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_551, _552, _553));
    float _3902 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _3913 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1756].x * _1762) * _1798) + ((cbLight._m0[_1766].x * _1773) * _1796);
    float _1806 = ((_1762 * cbLight._m0[_1756].y) * _1798) + ((_1773 * cbLight._m0[_1766].y) * _1796);
    float _1807 = ((_1762 * cbLight._m0[_1756].z) * _1798) + ((_1773 * cbLight._m0[_1766].z) * _1796);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1739 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1814)
    {
        _1825 = _1805;
        _1827 = _1806;
        _1829 = _1807;
    }
    else
    {
        uint _1833 = _1739 + 6u;
        float _1849 = (dot(vec3(cbLight._m0[_1739 + 2u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3924 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1852 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1825 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1805;
        _1827 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1806;
        _1829 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1807;
    }
    bool _1832 = _1812.y == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1832)
    {
        _1870 = _1825;
        _1872 = _1827;
        _1874 = _1829;
    }
    else
    {
        uint _2029 = _1739 + 7u;
        float _2045 = (dot(vec3(cbLight._m0[_1739 + 3u].xyz), vec3(_551, _552, _553)) * 0.5) + 0.5;
        float _2046 = _2045 * _2045;
        float _3940 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2047 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2048 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1870 = (((cbLight._m0[_2029].x * 0.3183098733425140380859375) * _2047) * _2048) + _1825;
        _1872 = (((cbLight._m0[_2029].y * 0.3183098733425140380859375) * _2047) * _2048) + _1827;
        _1874 = (((cbLight._m0[_2029].z * 0.3183098733425140380859375) * _2047) * _2048) + _1829;
    }
    uint _1877 = _1739 + 8u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _554) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1739].x + _630;
    float _1893 = cbLight._m0[_1739].y + _631;
    float _1894 = cbLight._m0[_1739].z + _632;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1739].xyz));
    float _3956 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _1906 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1907 = dot(vec3(_551, _552, _553), vec3(_1899, _1900, _1901));
    float _3978 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1899, _1900, _1901));
    float _3989 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1891 * _1891;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1930 = (exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1931 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1906 * ((_1905 * _1931) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _1931) + _1891) * _1905))) * _1905;
    float _4000 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    uint _1955 = _1739 + 9u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _554) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1777].x + _630;
    float _1969 = cbLight._m0[_1777].y + _631;
    float _1970 = cbLight._m0[_1777].z + _632;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_1777].xyz));
    float _4011 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _1982 = dot(vec3(_551, _552, _553), vec3(_1975, _1976, _1977));
    float _4022 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1975, _1976, _1977));
    float _4033 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1967 * _1967;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2003 = (exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2004 = 1.0 - _1967;
    float _2014 = (0.5 / (((_1906 * ((_1981 * _2004) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2004) + _1967) * _1981))) * _1981;
    float _4044 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    float _2026 = (((_2003 * cbLight._m0[_1955].x) * _2016) * _1762) + (((_1930 * cbLight._m0[_1877].x) * _1944) * _1773);
    float _2027 = (((_2003 * cbLight._m0[_1955].y) * _2016) * _1762) + (((_1930 * cbLight._m0[_1877].y) * _1944) * _1773);
    float _2028 = (((_2003 * cbLight._m0[_1955].z) * _2016) * _1762) + (((_1930 * cbLight._m0[_1877].z) * _1944) * _1773);
    float _2090;
    float _2092;
    float _2094;
    if (_1814)
    {
        _2090 = _2026;
        _2092 = _2027;
        _2094 = _2028;
    }
    else
    {
        uint _2096 = _1739 + 2u;
        uint _2100 = _1739 + 10u;
        float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2096].w)) * _554) * 0.949999988079071044921875);
        float _2115 = _2114 * _2114;
        float _2116 = cbLight._m0[_2096].x + _630;
        float _2117 = cbLight._m0[_2096].y + _631;
        float _2118 = cbLight._m0[_2096].z + _632;
        float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
        float _2123 = _2122 * _2116;
        float _2124 = _2122 * _2117;
        float _2125 = _2122 * _2118;
        float _2126 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2096].xyz));
        float _4055 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2129 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _2130 = dot(vec3(_551, _552, _553), vec3(_2123, _2124, _2125));
        float _4066 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2133 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2134 = dot(vec3(cbLight._m0[_2096].xyz), vec3(_2123, _2124, _2125));
        float _4077 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2138 = _2115 * _2115;
        float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
        float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2152 = 1.0 - _2115;
        float _2162 = (0.5 / (((_1906 * ((_2129 * _2152) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2152) + _2115) * _2129))) * _2129;
        float _4088 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2164 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
        float _2165 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2090 = (((_2151 * cbLight._m0[_2100].x) * _2164) * _2165) + _2026;
        _2092 = (((_2151 * cbLight._m0[_2100].y) * _2164) * _2165) + _2027;
        _2094 = (((_2151 * cbLight._m0[_2100].z) * _2164) * _2165) + _2028;
    }
    float _2200;
    float _2202;
    float _2204;
    if (_1832)
    {
        _2200 = _2090;
        _2202 = _2092;
        _2204 = _2094;
    }
    else
    {
        uint _2211 = _1739 + 3u;
        uint _2215 = _1739 + 11u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _554) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _630;
        float _2232 = cbLight._m0[_2211].y + _631;
        float _2233 = cbLight._m0[_2211].z + _632;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_551, _552, _553), vec3(cbLight._m0[_2211].xyz));
        float _4104 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2245 = dot(vec3(_551, _552, _553), vec3(_2238, _2239, _2240));
        float _4115 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4126 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2267 = 1.0 - _2230;
        float _2277 = (0.5 / (((_1906 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2267) + _2230) * _2244))) * _2244;
        float _4137 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2200 = (((_2266 * cbLight._m0[_2215].x) * _2279) * _2280) + _2090;
        _2202 = (((_2266 * cbLight._m0[_2215].y) * _2279) * _2280) + _2092;
        _2204 = (((_2266 * cbLight._m0[_2215].z) * _2279) * _2280) + _2094;
    }
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    float _2425;
    if (_1737.y == 0u)
    {
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2355;
        float _2357 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2355;
        float _2358 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2355;
        uvec4 _2370 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2371 = _2370.x;
        uint _2382 = uint((float(_2370.y) * floor(float(uint(cbSceneParam._m0[85u].y * _639) / _2371))) + floor(float(uint(cbSceneParam._m0[85u].x * _638) / _2371)));
        float _2392 = (log2(_2358 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2393 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        uint _2396 = uint(isnan(14.0) ? _2393 : (isnan(_2393) ? 14.0 : min(_2393, 14.0)));
        uvec4 _2401 = texelFetch(g_lightClusterGridBuffer, int(((_2396 << 2u) + (_2382 << 6u)) >> 2u));
        uint _2402 = _2401.x;
        uint _2403 = _2370.z;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        if (((((1u << ((_2403 >> 4u) & 15u)) + 4294967295u) & _2402) == 0u) || ((_2403 & 240u) == 0u))
        {
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
        }
        else
        {
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2514;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            float _2652 = 0.0;
            float _2653 = 0.0;
            uint _2654 = 0u;
            uint _2663;
            bool _2664;
            for (;;)
            {
                _2663 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                _2664 = _2663 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2664)
                {
                    frontier_phi_61_pred = _2648;
                    frontier_phi_61_pred_1 = _2653;
                    frontier_phi_61_pred_2 = _2652;
                    frontier_phi_61_pred_3 = _2651;
                    frontier_phi_61_pred_4 = _2650;
                    frontier_phi_61_pred_5 = _2649;
                }
                else
                {
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    uint _2778;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2652;
                    _2777 = _2653;
                    _2778 = _2663;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    for (;;)
                    {
                        uint _2782 = uint(findLSB(_2778)) + (_2654 << 5u);
                        uint _2779 = (_2778 + 4294967295u) & _2778;
                        uint _2784 = _2782 * 48u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2804 = (_2782 * 48u) + 4u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2823 = (_2782 * 48u) + 8u;
                        vec3 _2834 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x));
                        float _2838 = _2798.x - _2356;
                        float _2839 = _2798.y - _2357;
                        float _2840 = _2798.z - _2358;
                        float _2841 = dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840));
                        float _2844 = inversesqrt(_2841);
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2848 = dot(vec3(_660, _663, _666), vec3(_2845, _2846, _2847));
                        float _2853 = 1.0 - (_2841 * _2798.w);
                        float _4163 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2855 = sqrt(_2841) * _2817.w;
                        float _2858 = 1.39999997615814208984375 / (_2855 + 1.39999997615814208984375);
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2848) + _2859;
                        float _2865 = _2855 * _2855;
                        float _2869 = ((isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))) * _2854) / ((_2865 * 0.699999988079071044921875) + 1.0);
                        float _2873 = (-0.0) - _2356;
                        float _2874 = (-0.0) - _2357;
                        float _2875 = (-0.0) - _2358;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2890 = exp2(log2(1.0 / ((_2865 * 3.5) + 5.0)) * 0.25);
                        float _2891 = 1.0 - _720;
                        float _2898 = sqrt(1.0 - ((1.0 - (_2891 * _2891)) * (1.0 - (_2890 * _2890))));
                        float _2899 = _2898 * _2898;
                        float _2900 = _2899 * _2899;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2903 = _2882 + _2847;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2911 = dot(vec3(_660, _663, _666), vec3(_2880, _2881, _2882));
                        float _4179 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2915 = dot(vec3(_660, _663, _666), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                        float _4190 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2922 = ((_2918 * _2918) * (_2900 + (-1.0))) + 1.0;
                        float _2923 = _2858 * _2899;
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2848) + _2924;
                        float _4201 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2929 = 1.0 - _2899;
                        float _2939 = (0.5 / (((_2928 * ((_2914 * _2929) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2929) + _2899) * _2914))) * _2928;
                        float _4212 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2949 = (((_2900 * 3.1415927410125732421875) * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) / ((_2922 * _2922) * ((_2865 * 2.1991131305694580078125) + 3.141590118408203125))) * _2854;
                        _2707 = (_2869 * _2817.x) + _2775;
                        _2708 = (_2869 * _2817.y) + _2776;
                        _2709 = (_2869 * _2817.z) + _2777;
                        _2704 = (_2949 * _2834.x) + _2772;
                        _2705 = (_2949 * _2834.y) + _2773;
                        _2706 = (_2949 * _2834.z) + _2774;
                        if (_2779 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2708;
                            _2777 = _2709;
                            _2778 = _2779;
                        }
                    }
                    frontier_phi_61_pred = _2704;
                    frontier_phi_61_pred_1 = _2709;
                    frontier_phi_61_pred_2 = _2708;
                    frontier_phi_61_pred_3 = _2707;
                    frontier_phi_61_pred_4 = _2706;
                    frontier_phi_61_pred_5 = _2705;
                }
                _2504 = frontier_phi_61_pred;
                _2514 = frontier_phi_61_pred_1;
                _2512 = frontier_phi_61_pred_2;
                _2510 = frontier_phi_61_pred_3;
                _2508 = frontier_phi_61_pred_4;
                _2506 = frontier_phi_61_pred_5;
                uint _2655 = _2654 + 1u;
                if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2648 = _2504;
                    _2649 = _2506;
                    _2650 = _2508;
                    _2651 = _2510;
                    _2652 = _2512;
                    _2653 = _2514;
                    _2654 = _2655;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
        }
        uvec4 _2517 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2518 = _2517.z;
        uint _2520 = (_2518 >> 8u) & 15u;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        if (((4294967295u << _2520) & _2402) == 0u)
        {
            _2616 = _2503;
            _2618 = _2505;
            _2620 = _2507;
            _2622 = _2509;
            _2624 = _2511;
            _2626 = _2513;
        }
        else
        {
            float _2641 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
            float _2642 = _2641 * _2356;
            float _2643 = _2641 * _2357;
            float _2644 = _2641 * _2358;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2520 < ((_2518 >> 12u) & 15u))
            {
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2627;
                float _2755 = _2503;
                float _2756 = _2505;
                float _2757 = _2507;
                float _2758 = _2509;
                float _2759 = _2511;
                float _2760 = _2513;
                uint _2761 = _2520;
                uint _2770;
                bool _2771;
                for (;;)
                {
                    _2770 = texelFetch(g_lightClassification, int((((_2396 << 5u) + (_2382 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                    _2771 = _2770 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2771)
                    {
                        frontier_phi_67_pred = _2758;
                        frontier_phi_67_pred_1 = _2759;
                        frontier_phi_67_pred_2 = _2760;
                        frontier_phi_67_pred_3 = _2757;
                        frontier_phi_67_pred_4 = _2756;
                        frontier_phi_67_pred_5 = _2755;
                    }
                    else
                    {
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _2967 = _2755;
                        float _2968 = _2756;
                        float _2969 = _2757;
                        float _2970 = _2758;
                        float _2971 = _2759;
                        float _2972 = _2760;
                        uint _2973 = _2770;
                        uint _2974;
                        vec4 _2999;
                        float _3000;
                        vec4 _3015;
                        vec3 _3027;
                        vec4 _3043;
                        vec4 _3058;
                        float _3104;
                        bool _3105;
                        for (;;)
                        {
                            uint _2984 = ((_2761 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2973));
                            _2974 = (_2973 + 4294967295u) & _2973;
                            uint _2986 = _2984 * 40u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            _3000 = _2999.w;
                            uint _3002 = (_2984 * 40u) + 4u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            uint _3017 = (_2984 * 40u) + 8u;
                            _3027 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x));
                            uint _3030 = (_2984 * 40u) + 16u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_2984 * 40u) + 20u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3060 = (_2984 * 40u) + 24u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            uint _3079 = (_2984 * 40u) + 28u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            _3104 = fma(_2358, _3092.z, fma(_2357, _3092.y, _3092.x * _2356)) + _3092.w;
                            _3105 = !((fma(_2358, _3073.z, fma(_2357, _3073.y, _3073.x * _2356)) + _3073.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3105)
                            {
                                float _3132 = _2999.x - _2356;
                                float _3133 = _2999.y - _2357;
                                float _3134 = _2999.z - _2358;
                                float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                                float _3138 = inversesqrt(_3135);
                                float _3139 = _3138 * _3132;
                                float _3140 = _3138 * _3133;
                                float _3141 = _3138 * _3134;
                                float _3145 = 1.0 - (_3135 / (_3000 * _3000));
                                float _4223 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3146 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3150 = sqrt(_3135) * _3015.w;
                                float _3152 = 1.39999997615814208984375 / (_3150 + 1.39999997615814208984375);
                                float _3153 = _3152 * _3152;
                                float _3156 = ((1.0 - _3153) * dot(vec3(_3139, _3140, _3141), vec3(_660, _663, _666))) + _3153;
                                float _3159 = _3150 * _3150;
                                float _3163 = (fma(_2358, _3043.z, fma(_2357, _3043.y, _3043.x * _2356)) + _3043.w) / _3104;
                                float _3164 = (fma(_2358, _3058.z, fma(_2357, _3058.y, _3058.x * _2356)) + _3058.w) / _3104;
                                float _3168 = 1.0 - dot(vec2(_3163, _3164), vec2(_3163, _3164));
                                float _4239 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3170 = _3169 * (((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3146) / ((_3159 * 0.699999988079071044921875) + 1.0));
                                float _3182 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                                float _3183 = 1.0 - _720;
                                float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                                float _3191 = _3190 * _3190;
                                float _3192 = _3191 * _3191;
                                float _3193 = _3139 - _2642;
                                float _3194 = _3140 - _2643;
                                float _3195 = _3141 - _2644;
                                float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                                float _3203 = dot(vec3(_660, _663, _666), vec3((-0.0) - _2642, (-0.0) - _2643, (-0.0) - _2644));
                                float _4250 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3206 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3207 = dot(vec3(_660, _663, _666), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                                float _4261 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                                float _3215 = _3152 * _3191;
                                float _3216 = _3215 * _3215;
                                float _3222 = ((1.0 - _3216) * dot(vec3(_660, _663, _666), vec3(_3139, _3140, _3141))) + _3216;
                                float _4272 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3223 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3224 = 1.0 - _3191;
                                float _3234 = (0.5 / (((_3223 * ((_3206 * _3224) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3223 * _3224) + _3191) * _3206))) * _3223;
                                float _4283 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3244 = (_3169 * _3146) * (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) / ((_3214 * _3214) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3244 * _3027.x;
                                frontier_phi_73_pred_1 = _3244 * _3027.y;
                                frontier_phi_73_pred_2 = _3170 * _3015.z;
                                frontier_phi_73_pred_3 = _3170 * _3015.y;
                                frontier_phi_73_pred_4 = _3170 * _3015.x;
                                frontier_phi_73_pred_5 = _3244 * _3027.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3248 = frontier_phi_73_pred;
                            _3249 = frontier_phi_73_pred_1;
                            _3253 = frontier_phi_73_pred_2;
                            _3252 = frontier_phi_73_pred_3;
                            _3251 = frontier_phi_73_pred_4;
                            _3250 = frontier_phi_73_pred_5;
                            _2957 = _3251 + _2970;
                            _2958 = _3252 + _2971;
                            _2959 = _3253 + _2972;
                            _2954 = _3248 + _2967;
                            _2955 = _3249 + _2968;
                            _2956 = _3250 + _2969;
                            if (_2974 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2959;
                                _2973 = _2974;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2957;
                        frontier_phi_67_pred_1 = _2958;
                        frontier_phi_67_pred_2 = _2959;
                        frontier_phi_67_pred_3 = _2956;
                        frontier_phi_67_pred_4 = _2955;
                        frontier_phi_67_pred_5 = _2954;
                    }
                    _2623 = frontier_phi_67_pred;
                    _2625 = frontier_phi_67_pred_1;
                    _2627 = frontier_phi_67_pred_2;
                    _2621 = frontier_phi_67_pred_3;
                    _2619 = frontier_phi_67_pred_4;
                    _2617 = frontier_phi_67_pred_5;
                    uint _2762 = _2761 + 1u;
                    if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2755 = _2617;
                        _2756 = _2619;
                        _2757 = _2621;
                        _2758 = _2623;
                        _2759 = _2625;
                        _2760 = _2627;
                        _2761 = _2762;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2625;
                frontier_phi_55_56_ladder_1 = _2627;
                frontier_phi_55_56_ladder_2 = _2623;
                frontier_phi_55_56_ladder_3 = _2621;
                frontier_phi_55_56_ladder_4 = _2619;
                frontier_phi_55_56_ladder_5 = _2617;
            }
            else
            {
                frontier_phi_55_56_ladder = _2511;
                frontier_phi_55_56_ladder_1 = _2513;
                frontier_phi_55_56_ladder_2 = _2509;
                frontier_phi_55_56_ladder_3 = _2507;
                frontier_phi_55_56_ladder_4 = _2505;
                frontier_phi_55_56_ladder_5 = _2503;
            }
            _2616 = frontier_phi_55_56_ladder_5;
            _2618 = frontier_phi_55_56_ladder_4;
            _2620 = frontier_phi_55_56_ladder_3;
            _2622 = frontier_phi_55_56_ladder_2;
            _2624 = frontier_phi_55_56_ladder;
            _2626 = frontier_phi_55_56_ladder_1;
        }
        float _2631 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
        _2415 = (_2631 * _2622) + _1870;
        _2417 = (_2631 * _2624) + _1872;
        _2419 = (_2631 * _2626) + _1874;
        _2421 = ((_2616 * 0.039999999105930328369140625) * _2631) + _2200;
        _2423 = ((_2618 * 0.039999999105930328369140625) * _2631) + _2202;
        _2425 = ((_2620 * 0.039999999105930328369140625) * _2631) + _2204;
    }
    else
    {
        _2415 = _1870;
        _2417 = _1872;
        _2419 = _1874;
        _2421 = _2200;
        _2423 = _2202;
        _2425 = _2204;
    }
    float _4299 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4310 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4321 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    uint _2445 = _235 + 6u;
    float _2453 = _638 / cbSceneParam._m0[86u].x;
    float _2454 = _639 / cbSceneParam._m0[86u].y;
    vec4 _2468 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2453, _2454, (log2((isnan(cbSceneParam._m0[77u].w) ? _572 : (isnan(_572) ? cbSceneParam._m0[77u].w : min(_572, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2470 = _2468.x;
    float _2471 = _2468.y;
    float _2472 = _2468.z;
    float _2473 = _2468.w;
    float _2566;
    float _2568;
    float _2570;
    float _2572;
    if (_572 > cbSceneParam._m0[78u].w)
    {
        float _2528 = isnan(_572) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _572 : min(cbSceneParam._m0[80u].w, _572));
        float _2529 = _2528 / _572;
        float _2540 = _2529 * _623;
        float _2541 = _624 * _2529;
        float _2542 = (-0.0) - _2541;
        float _2544 = _2529 * _625;
        float _2546 = (cbSceneParam._m0[77u].w * _2542) / _2528;
        float _2547 = _2546 + cbSceneParam._m0[79u].w;
        float _2548 = cbSceneParam._m0[79u].w - _2541;
        float _2554 = sqrt(((_2540 * _2540) + (_2541 * _2541)) + (_2544 * _2544));
        float _2557 = (1.0 - (cbSceneParam._m0[77u].w / _2528)) * _2554;
        float _2562 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2564 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2717;
        if (abs((_2542 - _2546) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2717 = ((((_2547 > 0.0) ? exp2(_2562 * _2547) : (2.0 - exp2(_2564 * _2547))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2557;
        }
        else
        {
            float _2677 = 1.0 / cbSceneParam._m0[80u].x;
            float _2678 = isnan(_2548) ? _2547 : (isnan(_2547) ? _2548 : max(_2547, _2548));
            float _2679 = isnan(_2548) ? _2547 : (isnan(_2547) ? _2548 : min(_2547, _2548));
            float _2688 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : min(_2678, 0.0));
            float _2689 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : min(_2679, 0.0));
            _2717 = ((abs(_2554 / _2542) * cbSceneParam._m0[80u].y) * ((((_2688 - _2689) * 2.0) - ((exp2(_2562 * (isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0)))) - exp2(_2562 * (isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))))) * _2677)) - ((exp2(_2564 * _2688) - exp2(_2564 * _2689)) * _2677))) + (_2557 * cbSceneParam._m0[80u].z);
        }
        vec4 _2719 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2453, _2454, 1.0), 0.0);
        float _2728 = exp2((_2717 * (-1.44269502162933349609375)) * (1.0 - _2719.w));
        float _2729 = log2(_2728);
        float _2745 = log2(_2473);
        _2566 = (exp2(_2745 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].x)) * _2719.x) / cbSceneParam._m0[78u].x)) + _2470;
        _2568 = (exp2(_2745 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].y)) * _2719.y) / cbSceneParam._m0[78u].y)) + _2471;
        _2570 = (exp2(_2745 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].z)) * _2719.z) / cbSceneParam._m0[78u].z)) + _2472;
        _2572 = _2728 * _2473;
    }
    else
    {
        _2566 = _2470;
        _2568 = _2471;
        _2570 = _2472;
        _2572 = _2473;
    }
    float _2584 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2585 = _2584 == 3.0;
    float _2586 = log2(_2572);
    float _2593 = exp2(_2586 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2415 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _704))) + ((_2421 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2594 = exp2(_2586 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2417 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _704))) + ((_2423 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2595 = exp2(_2586 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2419 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _704))) + ((_2425 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1507)) * cbPerFrame._m0[3u].x));
    float _2604 = (_2584 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2604 * (_2585 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2566)));
    SV_Target.y = _2604 * (_2585 ? _2594 : (_2594 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.z = _2604 * (_2585 ? _2595 : (_2595 + (cbSceneParam._m0[72u].w * _2570)));
    SV_Target.w = cbInstanceData._m0[_2445].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2445].w;
}


