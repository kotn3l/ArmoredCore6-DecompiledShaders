#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1040;
float _3403;
float _3404;
float _3405;
float _3406;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _344 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _361 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _344) * cbMtdParam._m0[24u].x) + _344) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3415 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _369 = (_362 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _370 = (_362 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _371 = (_362 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _403 = _401.x;
    float _404 = _401.y;
    float _405 = _401.z;
    float _414 = ((_384.z - _405) * _362) + _405;
    float _417 = ((((_384.x - _403) * _362) + _403) * 2.0) + (-1.0);
    float _419 = ((((_384.y - _404) * _362) + _404) * 2.0) + (-1.0);
    float _420 = dot(vec2(_417, _419), vec2(_417, _419));
    float _3426 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _453 = (((_441.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _417;
    float _454 = (((_441.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _419;
    float _458 = (cbMtdParam._m0[19u].w * (_441.z - _414)) + _414;
    float _463 = cbMtdParam._m0[22u].x + _441.w;
    float _466 = fma(_425, _213 * NORMAL.x, fma(_454, _220 * TANGENT.x, (_206 * _198) * _453));
    float _469 = fma(_425, _213 * NORMAL.y, fma(_454, _220 * TANGENT.y, (_206 * _199) * _453));
    float _472 = fma(_425, _213 * NORMAL.z, fma(_454, _220 * TANGENT.z, (_206 * _200) * _453));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    float _477 = _476 * _466;
    float _478 = _476 * _469;
    float _479 = _476 * _472;
    float _3437 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _480 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3459 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3470 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3481 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _498 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _550 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _540);
    float _551 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _540);
    float _552 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _540);
    float _556 = inversesqrt(dot(vec3(_550, _551, _552), vec3(_550, _551, _552)));
    float _557 = _550 * _556;
    float _558 = _551 * _556;
    float _559 = _552 * _556;
    vec4 _564 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _566 = _564.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _720 = sqrt(((_550 * _550) + (_551 * _551)) + (_552 * _552));
        float _726 = (cbMatDynParam._m0[5u].x * _720) + cbMatDynParam._m0[5u].y;
        float _3492 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _731 = (cbMatDynParam._m0[5u].z * _720) + cbMatDynParam._m0[5u].w;
        float _3503 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) - _727)) + _727) < ((_566 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _596 = fma(_479, cbSceneParam._m0[5u].z, fma(_478, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _477));
    float _599 = fma(_479, cbSceneParam._m0[6u].z, fma(_478, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _477));
    float _602 = fma(_479, cbSceneParam._m0[7u].z, fma(_478, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _477));
    uint _615 = _226 + 9u;
    uint _616 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3514 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    vec4 _636 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _577, cbSceneParam._m0[86u].y * _578));
    float _640 = ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * TEXCOORD_5.w) * _636.x;
    float _641 = dot(vec3(_477, _478, _479), vec3(_557, _558, _559));
    float _644 = _641 * 2.0;
    float _648 = (_644 * _477) - _557;
    float _649 = (_644 * _478) - _558;
    float _650 = (_644 * _479) - _559;
    float _654 = abs(dot(vec3(_557, _558, _559), vec3(_477, _478, _479)));
    float _3547 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _656 = sqrt(_480);
    float _669 = exp2((_656 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_656 * 3.0));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _709 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1039;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _764 = fma(_709, cbModelParam._m0[26u].z, fma(_705, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _701));
        float _768 = fma(_709, cbModelParam._m0[27u].z, fma(_705, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _701));
        float _772 = fma(_709, cbModelParam._m0[28u].z, fma(_705, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _701));
        float _797 = _701 + _477;
        float _798 = _705 + _478;
        float _799 = _709 + _479;
        float _809 = fma(_799, cbModelParam._m0[26u].z, fma(_798, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _797)) - _764;
        float _810 = fma(_799, cbModelParam._m0[27u].z, fma(_798, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _797)) - _768;
        float _811 = fma(_799, cbModelParam._m0[28u].z, fma(_798, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _797)) - _772;
        float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
        float _828 = ((_815 * _809) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_764 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_815 * _810) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_768 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _830 = ((_815 * _811) / cbModelParam._m0[34u].z) + ((((((_772 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_828, _829, _830), 0.0);
        float _867 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_833.x + (-0.5));
        float _869 = _867 * (_833.y + (-0.5));
        float _870 = _867 * (_833.z + (-0.5));
        float _877 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_840.x + (-0.5));
        float _879 = _877 * (_840.y + (-0.5));
        float _880 = _877 * (_840.z + (-0.5));
        float _887 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_847.x + (-0.5));
        float _889 = _887 * (_847.y + (-0.5));
        float _890 = _887 * (_847.z + (-0.5));
        float _897 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_854.x + (-0.5));
        float _899 = _897 * (_854.y + (-0.5));
        float _900 = _897 * (_854.z + (-0.5));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = _868 * 0.5;
        float _905 = _878 * 0.5;
        float _906 = _888 * 0.5;
        float _907 = dot(vec3(_904, _905, _906), vec3(_904, _905, _906));
        float _912 = (_907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_907);
        float _921 = (dot(vec3(_477, _478, _479), vec3(_912 * _904, _912 * _905, _912 * _906)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _931 = sqrt(((_905 * _905) + (_904 * _904)) + (_906 * _906)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3595 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_933 + 1.0))) + _938) * _901;
        float _948 = _869 * 0.5;
        float _949 = _879 * 0.5;
        float _950 = _889 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_477, _478, _479), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3628 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_975 + 1.0))) + _980) * _902;
        float _990 = _870 * 0.5;
        float _991 = _880 * 0.5;
        float _992 = _890 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_477, _478, _479), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3661 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1017 + 1.0))) + _1022) * _903;
        _1039 = _870;
        _1041 = _869;
        _1042 = _868;
        _1043 = _880;
        _1044 = _879;
        _1045 = _878;
        _1046 = _890;
        _1047 = _889;
        _1048 = _888;
        _1049 = _903;
        _1050 = _902;
        _1051 = _901;
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _1040;
        _1041 = _1040;
        _1042 = _1040;
        _1043 = _1040;
        _1044 = _1040;
        _1045 = _1040;
        _1046 = _1040;
        _1047 = _1040;
        _1048 = _1040;
        _1049 = _1040;
        _1050 = _1040;
        _1051 = _1040;
        _1052 = 0.0;
        _1053 = 0.0;
        _1054 = 0.0;
    }
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = fma(_709, cbModelParam._m0[30u].z, fma(_705, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _701));
        float _1086 = fma(_709, cbModelParam._m0[31u].z, fma(_705, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _701));
        float _1090 = fma(_709, cbModelParam._m0[32u].z, fma(_705, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _701));
        float _1113 = _701 + _477;
        float _1114 = _705 + _478;
        float _1115 = _709 + _479;
        float _1125 = fma(_1115, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1082 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1086 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[35u].z) + ((((((_1090 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1181 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1148.x + (-0.5));
        float _1183 = _1181 * (_1148.y + (-0.5));
        float _1184 = _1181 * (_1148.z + (-0.5));
        float _1191 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1155.x + (-0.5));
        float _1193 = _1191 * (_1155.y + (-0.5));
        float _1194 = _1191 * (_1155.z + (-0.5));
        float _1201 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1162.x + (-0.5));
        float _1203 = _1201 * (_1162.y + (-0.5));
        float _1204 = _1201 * (_1162.z + (-0.5));
        float _1211 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1169.x + (-0.5));
        float _1213 = _1211 * (_1169.y + (-0.5));
        float _1214 = _1211 * (_1169.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_477, _478, _479), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3724 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1245 + 1.0))) + _1250) * _1215;
        float _1260 = _1183 * 0.5;
        float _1261 = _1193 * 0.5;
        float _1262 = _1203 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_477, _478, _479), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3757 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1287 + 1.0))) + _1292) * _1216;
        float _1302 = _1184 * 0.5;
        float _1303 = _1194 * 0.5;
        float _1304 = _1204 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_477, _478, _479), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3790 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1329 + 1.0))) + _1334) * _1217;
        _1351 = _1184;
        _1352 = _1183;
        _1353 = _1182;
        _1354 = _1194;
        _1355 = _1193;
        _1356 = _1192;
        _1357 = _1204;
        _1358 = _1203;
        _1359 = _1202;
        _1360 = _1217;
        _1361 = _1216;
        _1362 = _1215;
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1040;
        _1352 = _1040;
        _1353 = _1040;
        _1354 = _1040;
        _1355 = _1040;
        _1356 = _1040;
        _1357 = _1040;
        _1358 = _1040;
        _1359 = _1040;
        _1360 = _1040;
        _1361 = _1040;
        _1362 = _1040;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1052)) + _1052;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1053)) + _1053;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1054)) + _1054;
    float _1398 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1375));
    float _1419 = _648 * 0.5;
    float _1420 = _649 * 0.5;
    float _1421 = _650 * 0.5;
    float _1422 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1425 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1428 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1462;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1435 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1039, _1043, _1046, _1049));
        float _1439 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1443 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1042, _1045, _1048, _1051));
        float _1450 = dot(vec4(cbModelParam._m0[39u]), vec4(_1419, _1420, _1421, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1473;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1464 = dot(vec4(cbModelParam._m0[40u]), vec4(_1419, _1420, _1421, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1477 = (_1473 * cbModelParam._m0[1u].x) + (_1462 * (1.0 - cbModelParam._m0[1u].x));
    float _1487 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _480);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1487 : min(cbModelParam._m0[25u].z, _1487));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1537 = fma(_709, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701)) + cbModelParam._m0[13u].w;
        float _1541 = fma(_709, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701)) + cbModelParam._m0[14u].w;
        float _1545 = fma(_709, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701)) + cbModelParam._m0[15u].w;
        float _1548 = fma(_650, cbModelParam._m0[13u].z, fma(_649, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _648));
        float _1551 = fma(_650, cbModelParam._m0[14u].z, fma(_649, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _648));
        float _1554 = fma(_650, cbModelParam._m0[15u].z, fma(_649, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _648));
        float _1582;
        if (_1548 > 0.0)
        {
            _1582 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1582 = frontier_phi_17_15_ladder;
        }
        float _1784;
        if (_1551 > 0.0)
        {
            _1784 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1784 = frontier_phi_26_22_ladder;
        }
        float _2027;
        if (_1554 > 0.0)
        {
            _2027 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2027 = frontier_phi_38_33_ladder;
        }
        float _2029 = isnan(_1784) ? _1582 : (isnan(_1582) ? _1784 : min(_1582, _1784));
        float _2030 = isnan(_2027) ? _2029 : (isnan(_2029) ? _2027 : min(_2029, _2027));
        float _2034 = (_2030 * _1548) + _1537;
        float _2035 = (_2030 * _1551) + _1541;
        float _2036 = (_2030 * _1554) + _1545;
        float _2037 = _2030 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2037;
        float _2041 = _2037 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 > _2041) || ((_2035 < _2039) || ((_2034 < _2039) || (_2034 > _2041))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2036, cbModelParam._m0[9u].z, fma(_2035, cbModelParam._m0[9u].y, _2034 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2036, cbModelParam._m0[10u].z, fma(_2035, cbModelParam._m0[10u].y, _2034 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2036, cbModelParam._m0[11u].z, fma(_2035, cbModelParam._m0[11u].y, _2034 * cbModelParam._m0[11u].x))), _1488);
            frontier_phi_16_38_ladder = _2160.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2160.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2160.x * cbModelParam._m0[1u].y;
        }
        _1570 = frontier_phi_16_38_ladder_2;
        _1572 = frontier_phi_16_38_ladder_1;
        _1574 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_648, _649, _650), _1488);
        _1570 = _1558.x * cbModelParam._m0[1u].y;
        _1572 = _1558.y * cbModelParam._m0[1u].y;
        _1574 = _1558.z * cbModelParam._m0[1u].y;
    }
    float _1578 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _480);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1578 : min(cbModelParam._m0[25u].w, _1578));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_709, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_709, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_709, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_650, cbModelParam._m0[21u].z, fma(_649, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _648));
        float _1648 = fma(_650, cbModelParam._m0[22u].z, fma(_649, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _648));
        float _1651 = fma(_650, cbModelParam._m0[23u].z, fma(_649, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _648));
        float _1789;
        if (_1645 > 0.0)
        {
            _1789 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1789 = frontier_phi_28_24_ladder;
        }
        float _2054;
        if (_1648 > 0.0)
        {
            _2054 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2054 = frontier_phi_40_35_ladder;
        }
        float _2259;
        if (_1651 > 0.0)
        {
            _2259 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2259 = frontier_phi_49_46_ladder;
        }
        float _2261 = isnan(_2054) ? _1789 : (isnan(_1789) ? _2054 : min(_1789, _2054));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1645) + _1634;
        float _2267 = (_2262 * _1648) + _1638;
        float _2268 = (_2262 * _1651) + _1642;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2269;
        float _2272 = _2269 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2268 > _2272) || ((_2268 < _2270) || ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 < _2270) || (_2266 > _2272))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2268, cbModelParam._m0[17u].z, fma(_2267, cbModelParam._m0[17u].y, _2266 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2268, cbModelParam._m0[18u].z, fma(_2267, cbModelParam._m0[18u].y, _2266 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2268, cbModelParam._m0[19u].z, fma(_2267, cbModelParam._m0[19u].y, _2266 * cbModelParam._m0[19u].x))), _1579);
            frontier_phi_25_49_ladder = _2467.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2467.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2467.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_25_49_ladder_2;
        _1672 = frontier_phi_25_49_ladder_1;
        _1674 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_648, _649, _650), _1579);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _669) * ((_656 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_669 * _656)) * _640;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1570)) + _1570);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1572)) + _1572);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1574)) + _1574);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _640 + (-1.0);
    float _1723 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1724 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1727 = _1710 + 5u;
    float _1733 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1737 = _1710 + 4u;
    float _1743 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1747 = _1710 | 1u;
    float _1758 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_477, _478, _479));
    float _1761 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_477, _478, _479));
    float _3926 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _3937 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1766 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1768 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1775 = ((cbLight._m0[_1727].x * _1733) * _1768) + ((cbLight._m0[_1737].x * _1743) * _1766);
    float _1776 = ((_1733 * cbLight._m0[_1727].y) * _1768) + ((_1743 * cbLight._m0[_1737].y) * _1766);
    float _1777 = ((_1733 * cbLight._m0[_1727].z) * _1768) + ((_1743 * cbLight._m0[_1737].z) * _1766);
    uvec4 _1781 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1783 = _1781.x == 0u;
    float _1794;
    float _1796;
    float _1798;
    if (_1783)
    {
        _1794 = _1775;
        _1796 = _1776;
        _1798 = _1777;
    }
    else
    {
        uint _1802 = _1710 + 6u;
        float _1818 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _1819 = _1818 * _1818;
        float _3948 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1821 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1794 = (((cbLight._m0[_1802].x * 0.3183098733425140380859375) * _1820) * _1821) + _1775;
        _1796 = (((cbLight._m0[_1802].y * 0.3183098733425140380859375) * _1820) * _1821) + _1776;
        _1798 = (((cbLight._m0[_1802].z * 0.3183098733425140380859375) * _1820) * _1821) + _1777;
    }
    bool _1801 = _1781.y == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1801)
    {
        _1839 = _1794;
        _1841 = _1796;
        _1843 = _1798;
    }
    else
    {
        uint _1998 = _1710 + 7u;
        float _2014 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_477, _478, _479)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _3964 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2017 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1839 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1794;
        _1841 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1796;
        _1843 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1798;
    }
    uint _1846 = _1710 + 8u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _480) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1710].x + _557;
    float _1862 = cbLight._m0[_1710].y + _558;
    float _1863 = cbLight._m0[_1710].z + _559;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1710].xyz));
    float _3980 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _1875 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1876 = dot(vec3(_477, _478, _479), vec3(_1868, _1869, _1870));
    float _4002 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1880 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1868, _1869, _1870));
    float _4013 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1884 = _1860 * _1860;
    float _1888 = ((_1879 * _1879) * (_1884 + (-1.0))) + 1.0;
    float _1899 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1900 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1875 * ((_1874 * _1900) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1900) + _1860) * _1874))) * _1874;
    float _4024 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1884 / ((_1888 * _1888) * 3.141590118408203125));
    uint _1924 = _1710 + 9u;
    float _1935 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _480) * 0.949999988079071044921875);
    float _1936 = _1935 * _1935;
    float _1937 = cbLight._m0[_1747].x + _557;
    float _1938 = cbLight._m0[_1747].y + _558;
    float _1939 = cbLight._m0[_1747].z + _559;
    float _1943 = inversesqrt(dot(vec3(_1937, _1938, _1939), vec3(_1937, _1938, _1939)));
    float _1944 = _1943 * _1937;
    float _1945 = _1943 * _1938;
    float _1946 = _1943 * _1939;
    float _1947 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_1747].xyz));
    float _4035 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1950 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1951 = dot(vec3(_477, _478, _479), vec3(_1944, _1945, _1946));
    float _4046 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1944, _1945, _1946));
    float _4057 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1959 = _1936 * _1936;
    float _1963 = ((_1954 * _1954) * (_1959 + (-1.0))) + 1.0;
    float _1972 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1973 = 1.0 - _1936;
    float _1983 = (0.5 / (((_1875 * ((_1950 * _1973) + _1936)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _1973) + _1936) * _1950))) * _1950;
    float _4068 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1985 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1959 / ((_1963 * _1963) * 3.141590118408203125));
    float _1995 = (((_1972 * cbLight._m0[_1924].x) * _1985) * _1733) + (((_1899 * cbLight._m0[_1846].x) * _1913) * _1743);
    float _1996 = (((_1972 * cbLight._m0[_1924].y) * _1985) * _1733) + (((_1899 * cbLight._m0[_1846].y) * _1913) * _1743);
    float _1997 = (((_1972 * cbLight._m0[_1924].z) * _1985) * _1733) + (((_1899 * cbLight._m0[_1846].z) * _1913) * _1743);
    float _2059;
    float _2061;
    float _2063;
    if (_1783)
    {
        _2059 = _1995;
        _2061 = _1996;
        _2063 = _1997;
    }
    else
    {
        uint _2065 = _1710 + 2u;
        uint _2069 = _1710 + 10u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _480) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _557;
        float _2086 = cbLight._m0[_2065].y + _558;
        float _2087 = cbLight._m0[_2065].z + _559;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2065].xyz));
        float _4079 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2099 = dot(vec3(_477, _478, _479), vec3(_2092, _2093, _2094));
        float _4090 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _4101 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2121 = 1.0 - _2084;
        float _2131 = (0.5 / (((_1875 * ((_2098 * _2121) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2121) + _2084) * _2098))) * _2098;
        float _4112 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2059 = (((_2120 * cbLight._m0[_2069].x) * _2133) * _2134) + _1995;
        _2061 = (((_2120 * cbLight._m0[_2069].y) * _2133) * _2134) + _1996;
        _2063 = (((_2120 * cbLight._m0[_2069].z) * _2133) * _2134) + _1997;
    }
    float _2169;
    float _2171;
    float _2173;
    if (_1801)
    {
        _2169 = _2059;
        _2171 = _2061;
        _2173 = _2063;
    }
    else
    {
        uint _2180 = _1710 + 3u;
        uint _2184 = _1710 + 11u;
        float _2198 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _480) * 0.949999988079071044921875);
        float _2199 = _2198 * _2198;
        float _2200 = cbLight._m0[_2180].x + _557;
        float _2201 = cbLight._m0[_2180].y + _558;
        float _2202 = cbLight._m0[_2180].z + _559;
        float _2206 = inversesqrt(dot(vec3(_2200, _2201, _2202), vec3(_2200, _2201, _2202)));
        float _2207 = _2206 * _2200;
        float _2208 = _2206 * _2201;
        float _2209 = _2206 * _2202;
        float _2210 = dot(vec3(_477, _478, _479), vec3(cbLight._m0[_2180].xyz));
        float _4128 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
        float _2213 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2214 = dot(vec3(_477, _478, _479), vec3(_2207, _2208, _2209));
        float _4139 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2217 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2218 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2207, _2208, _2209));
        float _4150 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2222 = _2199 * _2199;
        float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
        float _2235 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2236 = 1.0 - _2199;
        float _2246 = (0.5 / (((_1875 * ((_2213 * _2236) + _2199)) + 9.9999999392252902907785028219223e-09) + (((_1875 * _2236) + _2199) * _2213))) * _2213;
        float _4161 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2248 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
        float _2249 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2169 = (((_2235 * cbLight._m0[_2184].x) * _2248) * _2249) + _2059;
        _2171 = (((_2235 * cbLight._m0[_2184].y) * _2248) * _2249) + _2061;
        _2173 = (((_2235 * cbLight._m0[_2184].z) * _2248) * _2249) + _2063;
    }
    float _2384;
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    if (_1708.y == 0u)
    {
        float _2324 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2325 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2324;
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2324;
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2324;
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.x;
        uint _2351 = uint((float(_2339.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _2340))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _2340)));
        float _2361 = (log2(_2327 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2362 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        uint _2365 = uint(isnan(14.0) ? _2362 : (isnan(_2362) ? 14.0 : min(_2362, 14.0)));
        uvec4 _2370 = texelFetch(g_lightClusterGridBuffer, int(((_2365 << 2u) + (_2351 << 6u)) >> 2u));
        uint _2371 = _2370.x;
        uint _2372 = _2339.z;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((((1u << ((_2372 >> 4u) & 15u)) + 4294967295u) & _2371) == 0u) || ((_2372 & 240u) == 0u))
        {
            _2472 = 0.0;
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
        }
        else
        {
            float _2473;
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2625 = 0.0;
            float _2626 = 0.0;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            uint _2631 = 0u;
            uint _2640;
            bool _2641;
            for (;;)
            {
                _2640 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                _2641 = _2640 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2641)
                {
                    frontier_phi_66_pred = _2625;
                    frontier_phi_66_pred_1 = _2630;
                    frontier_phi_66_pred_2 = _2629;
                    frontier_phi_66_pred_3 = _2628;
                    frontier_phi_66_pred_4 = _2627;
                    frontier_phi_66_pred_5 = _2626;
                }
                else
                {
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    uint _2776;
                    _2770 = _2625;
                    _2771 = _2626;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2630;
                    _2776 = _2640;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    for (;;)
                    {
                        uint _2780 = uint(findLSB(_2776)) + (_2631 << 5u);
                        uint _2777 = (_2776 + 4294967295u) & _2776;
                        uint _2782 = _2780 * 48u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2802 = (_2780 * 48u) + 4u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2821 = (_2780 * 48u) + 8u;
                        vec3 _2832 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x));
                        float _2836 = _2796.x - _2325;
                        float _2837 = _2796.y - _2326;
                        float _2838 = _2796.z - _2327;
                        float _2839 = dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838));
                        float _2842 = inversesqrt(_2839);
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2846 = dot(vec3(_596, _599, _602), vec3(_2843, _2844, _2845));
                        float _2851 = 1.0 - (_2839 * _2796.w);
                        float _4187 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2853 = sqrt(_2839) * _2815.w;
                        float _2856 = 1.39999997615814208984375 / (_2853 + 1.39999997615814208984375);
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2846) + _2857;
                        float _2863 = _2853 * _2853;
                        float _2867 = ((isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))) * _2852) / ((_2863 * 0.699999988079071044921875) + 1.0);
                        float _2871 = (-0.0) - _2325;
                        float _2872 = (-0.0) - _2326;
                        float _2873 = (-0.0) - _2327;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2888 = exp2(log2(1.0 / ((_2863 * 3.5) + 5.0)) * 0.25);
                        float _2889 = 1.0 - _656;
                        float _2896 = sqrt(1.0 - ((1.0 - (_2889 * _2889)) * (1.0 - (_2888 * _2888))));
                        float _2897 = _2896 * _2896;
                        float _2898 = _2897 * _2897;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2909 = dot(vec3(_596, _599, _602), vec3(_2878, _2879, _2880));
                        float _4203 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2913 = dot(vec3(_596, _599, _602), vec3(_2905 * _2899, _2905 * _2900, _2905 * _2901));
                        float _4214 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2920 = ((_2916 * _2916) * (_2898 + (-1.0))) + 1.0;
                        float _2921 = _2856 * _2897;
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2846) + _2922;
                        float _4225 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2927 = 1.0 - _2897;
                        float _2937 = (0.5 / (((_2926 * ((_2912 * _2927) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2926 * _2927) + _2897) * _2912))) * _2926;
                        float _4236 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2948 = (((_2898 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2920 * _2920) * ((_2863 * 2.1991131305694580078125) + 3.141590118408203125))) * _2852;
                        _2700 = (_2867 * _2815.x) + _2773;
                        _2701 = (_2867 * _2815.y) + _2774;
                        _2702 = (_2867 * _2815.z) + _2775;
                        _2697 = (_2948 * _2832.x) + _2770;
                        _2698 = (_2948 * _2832.y) + _2771;
                        _2699 = (_2948 * _2832.z) + _2772;
                        if (_2777 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2770 = _2697;
                            _2771 = _2698;
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2777;
                        }
                    }
                    frontier_phi_66_pred = _2697;
                    frontier_phi_66_pred_1 = _2702;
                    frontier_phi_66_pred_2 = _2701;
                    frontier_phi_66_pred_3 = _2700;
                    frontier_phi_66_pred_4 = _2699;
                    frontier_phi_66_pred_5 = _2698;
                }
                _2473 = frontier_phi_66_pred;
                _2483 = frontier_phi_66_pred_1;
                _2481 = frontier_phi_66_pred_2;
                _2479 = frontier_phi_66_pred_3;
                _2477 = frontier_phi_66_pred_4;
                _2475 = frontier_phi_66_pred_5;
                uint _2632 = _2631 + 1u;
                if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2625 = _2473;
                    _2626 = _2475;
                    _2627 = _2477;
                    _2628 = _2479;
                    _2629 = _2481;
                    _2630 = _2483;
                    _2631 = _2632;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2472 = _2473;
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
        }
        uvec4 _2486 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2487 = _2486.z;
        uint _2489 = (_2487 >> 8u) & 15u;
        float _2593;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        if (((4294967295u << _2489) & _2371) == 0u)
        {
            _2593 = _2472;
            _2595 = _2474;
            _2597 = _2476;
            _2599 = _2478;
            _2601 = _2480;
            _2603 = _2482;
        }
        else
        {
            float _2618 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
            float _2619 = _2618 * _2325;
            float _2620 = _2618 * _2326;
            float _2621 = _2618 * _2327;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2489 < ((_2487 >> 12u) & 15u))
            {
                float _2594;
                float _2596;
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2753 = _2472;
                float _2754 = _2474;
                float _2755 = _2476;
                float _2756 = _2478;
                float _2757 = _2480;
                float _2758 = _2482;
                uint _2759 = _2489;
                uint _2768;
                bool _2769;
                for (;;)
                {
                    _2768 = texelFetch(g_lightClassification, int((((_2365 << 5u) + (_2351 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                    _2769 = _2768 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2769)
                    {
                        frontier_phi_77_pred = _2758;
                        frontier_phi_77_pred_1 = _2757;
                        frontier_phi_77_pred_2 = _2756;
                        frontier_phi_77_pred_3 = _2755;
                        frontier_phi_77_pred_4 = _2754;
                        frontier_phi_77_pred_5 = _2753;
                    }
                    else
                    {
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _2975 = _2753;
                        float _2976 = _2754;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        float _2980 = _2758;
                        uint _2981 = _2768;
                        uint _2982;
                        vec4 _3007;
                        float _3008;
                        vec4 _3023;
                        vec3 _3035;
                        vec4 _3050;
                        vec4 _3066;
                        float _3112;
                        bool _3113;
                        for (;;)
                        {
                            uint _2992 = ((_2759 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2981));
                            _2982 = (_2981 + 4294967295u) & _2981;
                            uint _2994 = _2992 * 40u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.w;
                            uint _3010 = (_2992 * 40u) + 4u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2992 * 40u) + 8u;
                            _3035 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x));
                            uint _3037 = (_2992 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2992 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_2992 * 40u) + 24u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3087 = (_2992 * 40u) + 28u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3112 = fma(_2327, _3100.z, fma(_2326, _3100.y, _3100.x * _2325)) + _3100.w;
                            _3113 = !((fma(_2327, _3081.z, fma(_2326, _3081.y, _3081.x * _2325)) + _3081.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3113)
                            {
                                float _3140 = _3007.x - _2325;
                                float _3141 = _3007.y - _2326;
                                float _3142 = _3007.z - _2327;
                                float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                                float _3146 = inversesqrt(_3143);
                                float _3147 = _3146 * _3140;
                                float _3148 = _3146 * _3141;
                                float _3149 = _3146 * _3142;
                                float _3153 = 1.0 - (_3143 / (_3008 * _3008));
                                float _4247 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3158 = sqrt(_3143) * _3023.w;
                                float _3160 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                                float _3161 = _3160 * _3160;
                                float _3164 = ((1.0 - _3161) * dot(vec3(_3147, _3148, _3149), vec3(_596, _599, _602))) + _3161;
                                float _3167 = _3158 * _3158;
                                float _3171 = (fma(_2327, _3050.z, fma(_2326, _3050.y, _3050.x * _2325)) + _3050.w) / _3112;
                                float _3172 = (fma(_2327, _3066.z, fma(_2326, _3066.y, _3066.x * _2325)) + _3066.w) / _3112;
                                float _3176 = 1.0 - dot(vec2(_3171, _3172), vec2(_3171, _3172));
                                float _4263 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3178 = _3177 * (((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3154) / ((_3167 * 0.699999988079071044921875) + 1.0));
                                float _3190 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                                float _3191 = 1.0 - _656;
                                float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                                float _3199 = _3198 * _3198;
                                float _3200 = _3199 * _3199;
                                float _3201 = _3147 - _2619;
                                float _3202 = _3148 - _2620;
                                float _3203 = _3149 - _2621;
                                float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                                float _3211 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2619, (-0.0) - _2620, (-0.0) - _2621));
                                float _4274 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3215 = dot(vec3(_596, _599, _602), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                                float _4285 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                                float _3223 = _3160 * _3199;
                                float _3224 = _3223 * _3223;
                                float _3230 = ((1.0 - _3224) * dot(vec3(_596, _599, _602), vec3(_3147, _3148, _3149))) + _3224;
                                float _4296 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3232 = 1.0 - _3199;
                                float _3242 = (0.5 / (((_3231 * ((_3214 * _3232) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3199) * _3214))) * _3231;
                                float _4307 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3252 = (_3177 * _3154) * (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3222 * _3222) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3178 * _3023.y;
                                frontier_phi_83_pred_1 = _3178 * _3023.x;
                                frontier_phi_83_pred_2 = _3252 * _3035.z;
                                frontier_phi_83_pred_3 = _3252 * _3035.y;
                                frontier_phi_83_pred_4 = _3252 * _3035.x;
                                frontier_phi_83_pred_5 = _3178 * _3023.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3260 = frontier_phi_83_pred;
                            _3259 = frontier_phi_83_pred_1;
                            _3258 = frontier_phi_83_pred_2;
                            _3257 = frontier_phi_83_pred_3;
                            _3256 = frontier_phi_83_pred_4;
                            _3261 = frontier_phi_83_pred_5;
                            _2965 = _3259 + _2978;
                            _2966 = _3260 + _2979;
                            _2967 = _3261 + _2980;
                            _2962 = _3256 + _2975;
                            _2963 = _3257 + _2976;
                            _2964 = _3258 + _2977;
                            if (_2982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2982;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2967;
                        frontier_phi_77_pred_1 = _2966;
                        frontier_phi_77_pred_2 = _2965;
                        frontier_phi_77_pred_3 = _2964;
                        frontier_phi_77_pred_4 = _2963;
                        frontier_phi_77_pred_5 = _2962;
                    }
                    _2604 = frontier_phi_77_pred;
                    _2602 = frontier_phi_77_pred_1;
                    _2600 = frontier_phi_77_pred_2;
                    _2598 = frontier_phi_77_pred_3;
                    _2596 = frontier_phi_77_pred_4;
                    _2594 = frontier_phi_77_pred_5;
                    uint _2760 = _2759 + 1u;
                    if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2753 = _2594;
                        _2754 = _2596;
                        _2755 = _2598;
                        _2756 = _2600;
                        _2757 = _2602;
                        _2758 = _2604;
                        _2759 = _2760;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2598;
                frontier_phi_58_59_ladder_1 = _2604;
                frontier_phi_58_59_ladder_2 = _2602;
                frontier_phi_58_59_ladder_3 = _2600;
                frontier_phi_58_59_ladder_4 = _2596;
                frontier_phi_58_59_ladder_5 = _2594;
            }
            else
            {
                frontier_phi_58_59_ladder = _2476;
                frontier_phi_58_59_ladder_1 = _2482;
                frontier_phi_58_59_ladder_2 = _2480;
                frontier_phi_58_59_ladder_3 = _2478;
                frontier_phi_58_59_ladder_4 = _2474;
                frontier_phi_58_59_ladder_5 = _2472;
            }
            _2593 = frontier_phi_58_59_ladder_5;
            _2595 = frontier_phi_58_59_ladder_4;
            _2597 = frontier_phi_58_59_ladder;
            _2599 = frontier_phi_58_59_ladder_3;
            _2601 = frontier_phi_58_59_ladder_2;
            _2603 = frontier_phi_58_59_ladder_1;
        }
        float _2608 = isnan(1.0) ? _640 : (isnan(_640) ? 1.0 : min(_640, 1.0));
        _2384 = (_2608 * _2599) + _1839;
        _2386 = (_2608 * _2601) + _1841;
        _2388 = (_2608 * _2603) + _1843;
        _2390 = ((_2593 * 0.039999999105930328369140625) * _2608) + _2169;
        _2392 = ((_2595 * 0.039999999105930328369140625) * _2608) + _2171;
        _2394 = ((_2597 * 0.039999999105930328369140625) * _2608) + _2173;
    }
    else
    {
        _2384 = _1839;
        _2386 = _1841;
        _2388 = _1843;
        _2390 = _2169;
        _2392 = _2171;
        _2394 = _2173;
    }
    float _4323 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4334 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4345 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2411 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2384 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _640))) + ((_2390 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1477)) * cbPerFrame._m0[3u].x);
    float _2412 = ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2386 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _640))) + ((_2392 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1477)) * cbPerFrame._m0[3u].x);
    float _2413 = ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2388 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _640))) + ((_2394 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1477)) * cbPerFrame._m0[3u].x);
    uint _2414 = _226 + 6u;
    float _2422 = _577 / cbSceneParam._m0[86u].x;
    float _2423 = _578 / cbSceneParam._m0[86u].y;
    vec4 _2437 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2422, _2423, (log2((isnan(cbSceneParam._m0[77u].w) ? _498 : (isnan(_498) ? cbSceneParam._m0[77u].w : min(_498, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2439 = _2437.x;
    float _2440 = _2437.y;
    float _2441 = _2437.z;
    float _2442 = _2437.w;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    if (_498 > cbSceneParam._m0[78u].w)
    {
        float _2497 = isnan(_498) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _498 : min(cbSceneParam._m0[80u].w, _498));
        float _2498 = _2497 / _498;
        float _2509 = _2498 * _550;
        float _2510 = _551 * _2498;
        float _2511 = (-0.0) - _2510;
        float _2513 = _2498 * _552;
        float _2515 = (cbSceneParam._m0[77u].w * _2511) / _2497;
        float _2516 = _2515 + cbSceneParam._m0[79u].w;
        float _2517 = cbSceneParam._m0[79u].w - _2510;
        float _2523 = sqrt(((_2509 * _2509) + (_2510 * _2510)) + (_2513 * _2513));
        float _2526 = (1.0 - (cbSceneParam._m0[77u].w / _2497)) * _2523;
        float _2531 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2533 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2710;
        if (abs((_2511 - _2515) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2710 = ((((_2516 > 0.0) ? exp2(_2531 * _2516) : (2.0 - exp2(_2533 * _2516))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2526;
        }
        else
        {
            float _2654 = 1.0 / cbSceneParam._m0[80u].x;
            float _2655 = isnan(_2517) ? _2516 : (isnan(_2516) ? _2517 : max(_2516, _2517));
            float _2656 = isnan(_2517) ? _2516 : (isnan(_2516) ? _2517 : min(_2516, _2517));
            float _2665 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : min(_2655, 0.0));
            float _2666 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : min(_2656, 0.0));
            _2710 = ((abs(_2523 / _2511) * cbSceneParam._m0[80u].y) * ((((_2665 - _2666) * 2.0) - ((exp2(_2531 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0)))) - exp2(_2531 * (isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))))) * _2654)) - ((exp2(_2533 * _2665) - exp2(_2533 * _2666)) * _2654))) + (_2526 * cbSceneParam._m0[80u].z);
        }
        vec4 _2712 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2422, _2423, 1.0), 0.0);
        float _2721 = exp2((_2710 * (-1.44269502162933349609375)) * (1.0 - _2712.w));
        float _2722 = log2(_2721);
        float _2738 = log2(_2442);
        _2535 = (exp2(_2738 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2722 * cbSceneParam._m0[78u].x)) * _2712.x) / cbSceneParam._m0[78u].x)) + _2439;
        _2537 = (exp2(_2738 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2722 * cbSceneParam._m0[78u].y)) * _2712.y) / cbSceneParam._m0[78u].y)) + _2440;
        _2539 = (exp2(_2738 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2722 * cbSceneParam._m0[78u].z)) * _2712.z) / cbSceneParam._m0[78u].z)) + _2441;
        _2541 = _2721 * _2442;
    }
    else
    {
        _2535 = _2439;
        _2537 = _2440;
        _2539 = _2441;
        _2541 = _2442;
    }
    bool _2748;
    vec4 _2551;
    vec4 _2573;
    float _2575;
    float _2579;
    float _2580;
    float _2581;
    float _2582;
    bool _2592;
    for (;;)
    {
        _2551 = cbMatDynParam._m0[0u];
        float _2553 = roundEven(_2551.y);
        bool _2554 = _2553 == 3.0;
        float _2555 = log2(_2541);
        float _2562 = exp2(_2555 * cbSceneParam._m0[78u].x) * _2411;
        float _2563 = exp2(_2555 * cbSceneParam._m0[78u].y) * _2412;
        float _2564 = exp2(_2555 * cbSceneParam._m0[78u].z) * _2413;
        float _2571 = _566 + (-0.5);
        _2573 = cbMtdParam._m0[1u];
        _2575 = _2573.y * _2571;
        float _2578 = (_2553 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2579 = _2578 * (_2554 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2535)));
        _2580 = _2578 * (_2554 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2537)));
        _2581 = _2578 * (_2554 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2539)));
        _2582 = _2571 * 0.999000012874603271484375;
        _2592 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2592)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2582) < 0.5)
            {
                _2748 = true;
                break;
            }
        }
        uint _2689 = _615 + uint(_2551.w);
        if ((cbInstanceData._m0[_2689].w < 1.0) && ((cbInstanceData._m0[_2689].w + _2582) < 0.5))
        {
            _2748 = true;
            break;
        }
        if ((_2575 + 1.0) < _2573.x)
        {
            _2748 = true;
            break;
        }
        _2748 = false;
        break;
    }
    float _2953;
    if (_2748)
    {
        discard_state = true;
        _2953 = 0.0;
    }
    else
    {
        _2953 = cbInstanceData._m0[_2414].w;
    }
    SV_Target.x = _2579;
    SV_Target.y = _2580;
    SV_Target.z = _2581;
    SV_Target.w = _2953;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2414].w;
    discard_exit();
}


