#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1280;
float _3923;
float _3924;
float _3925;
float _3926;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3935 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    float _474 = ((_444.z - _465) * _392) + _465;
    float _477 = ((((_444.x - _463) * _392) + _463) * 2.0) + (-1.0);
    float _478 = ((((_444.y - _464) * _392) + _464) * 2.0) + (-1.0);
    float _479 = dot(vec2(_477, _478), vec2(_477, _478));
    float _3946 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _484 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _517 = _515.x;
    float _518 = 1.0 - _517;
    float _524 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _527 = ((isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : min(_524, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _536 = (_527 - ((((((_517 - _518) * cbMtdParam._m0[24u].z) + _518) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _527))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3967 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _544 = (_537 * (cbMtdParam._m0[17u].x - _399)) + _399;
    float _545 = (_537 * (cbMtdParam._m0[17u].y - _400)) + _400;
    float _546 = (_537 * (cbMtdParam._m0[17u].z - _401)) + _401;
    vec4 _558 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _560 = _558.x;
    float _561 = 1.0 - _560;
    float _588 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_560 - _561) * cbMtdParam._m0[24u].w) + _561) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3978 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _597 = ((((cbMtdParam._m0[10u].x - _544) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _589) + _544;
    float _598 = ((((cbMtdParam._m0[10u].y - _545) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _589) + _545;
    float _599 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _546)) * _589) + _546;
    float _604 = (((_419.z - _474) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _474;
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _625 = (_618.x * 2.0) + (-1.0);
    float _626 = (_618.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3989 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _635 = (_537 * (_618.z - _604)) + _604;
    float _638 = ((cbMtdParam._m0[23u].y - _635) * _589) + _635;
    vec4 _657 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _663 = (_657.x * 2.0) + (-1.0);
    float _664 = (_657.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _4000 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _675 = _477 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_419.x * 2.0) + (-1.0)));
    float _676 = _478 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_419.y * 2.0) + (-1.0)));
    float _688 = (((_625 - _675) + (cbMtdParam._m0[21u].x * _675)) * _537) + _675;
    float _689 = (((_626 - _676) + (cbMtdParam._m0[21u].x * _676)) * _537) + _676;
    float _690 = (_537 * (sqrt(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) - _484)) + _484;
    float _701 = (((_663 - _688) + (_688 * cbMtdParam._m0[22u].z)) * _589) + _688;
    float _702 = (((_664 - _689) + (_689 * cbMtdParam._m0[22u].z)) * _589) + _689;
    float _703 = ((sqrt(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) - _690) * _589) + _690;
    float _705 = cbMtdParam._m0[22u].x + _497.w;
    float _708 = fma(_703, _244 * NORMAL.x, fma(_702, _251 * TANGENT.x, (_237 * _229) * _701));
    float _711 = fma(_703, _244 * NORMAL.y, fma(_702, _251 * TANGENT.y, (_237 * _230) * _701));
    float _714 = fma(_703, _244 * NORMAL.z, fma(_702, _251 * TANGENT.z, (_237 * _231) * _701));
    float _718 = inversesqrt(dot(vec3(_708, _711, _714), vec3(_708, _711, _714)));
    float _719 = _718 * _708;
    float _720 = _718 * _711;
    float _721 = _718 * _714;
    float _4011 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _722 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _4022 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4033 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _4044 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _4055 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _791 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _781);
    float _792 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _781);
    float _793 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _781);
    float _797 = inversesqrt(dot(vec3(_791, _792, _793), vec3(_791, _792, _793)));
    float _798 = _791 * _797;
    float _799 = _792 * _797;
    float _800 = _793 * _797;
    vec4 _805 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _807 = _805.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _961 = sqrt(((_791 * _791) + (_792 * _792)) + (_793 * _793));
        float _967 = (cbMatDynParam._m0[5u].x * _961) + cbMatDynParam._m0[5u].y;
        float _4066 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _972 = (cbMatDynParam._m0[5u].z * _961) + cbMatDynParam._m0[5u].w;
        float _4077 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) - _968)) + _968) < ((_807 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_721, cbSceneParam._m0[5u].z, fma(_720, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _719));
    float _840 = fma(_721, cbSceneParam._m0[6u].z, fma(_720, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _719));
    float _843 = fma(_721, cbSceneParam._m0[7u].z, fma(_720, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _719));
    uint _856 = _257 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_857].z;
    float _4088 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _881 = ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * TEXCOORD_5.w) * _877.x;
    float _882 = dot(vec3(_719, _720, _721), vec3(_798, _799, _800));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _719) - _798;
    float _890 = (_885 * _720) - _799;
    float _891 = (_885 * _721) - _800;
    float _895 = abs(dot(vec3(_798, _799, _800), vec3(_719, _720, _721)));
    float _4121 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_722);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1279;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1004 = fma(_950, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _942));
        float _1008 = fma(_950, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _942));
        float _1012 = fma(_950, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _942));
        float _1037 = _942 + _719;
        float _1038 = _946 + _720;
        float _1039 = _950 + _721;
        float _1049 = fma(_1039, cbModelParam._m0[26u].z, fma(_1038, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037)) - _1004;
        float _1050 = fma(_1039, cbModelParam._m0[27u].z, fma(_1038, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037)) - _1008;
        float _1051 = fma(_1039, cbModelParam._m0[28u].z, fma(_1038, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037)) - _1012;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1004 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1008 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[34u].z) + ((((((_1012 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1107 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1073.x + (-0.5));
        float _1109 = _1107 * (_1073.y + (-0.5));
        float _1110 = _1107 * (_1073.z + (-0.5));
        float _1117 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1080.x + (-0.5));
        float _1119 = _1117 * (_1080.y + (-0.5));
        float _1120 = _1117 * (_1080.z + (-0.5));
        float _1127 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1087.x + (-0.5));
        float _1129 = _1127 * (_1087.y + (-0.5));
        float _1130 = _1127 * (_1087.z + (-0.5));
        float _1137 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1094.x + (-0.5));
        float _1139 = _1137 * (_1094.y + (-0.5));
        float _1140 = _1137 * (_1094.z + (-0.5));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = _1108 * 0.5;
        float _1145 = _1118 * 0.5;
        float _1146 = _1128 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1161 = (dot(vec3(_719, _720, _721), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1171 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _4169 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1173 + 1.0))) + _1178) * _1141;
        float _1188 = _1109 * 0.5;
        float _1189 = _1119 * 0.5;
        float _1190 = _1129 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_719, _720, _721), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _4202 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1215 + 1.0))) + _1220) * _1142;
        float _1230 = _1110 * 0.5;
        float _1231 = _1120 * 0.5;
        float _1232 = _1130 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_719, _720, _721), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _4235 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1257 + 1.0))) + _1262) * _1143;
        _1279 = _1110;
        _1281 = _1109;
        _1282 = _1108;
        _1283 = _1120;
        _1284 = _1119;
        _1285 = _1118;
        _1286 = _1130;
        _1287 = _1129;
        _1288 = _1128;
        _1289 = _1143;
        _1290 = _1142;
        _1291 = _1141;
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
    }
    else
    {
        _1279 = _1280;
        _1281 = _1280;
        _1282 = _1280;
        _1283 = _1280;
        _1284 = _1280;
        _1285 = _1280;
        _1286 = _1280;
        _1287 = _1280;
        _1288 = _1280;
        _1289 = _1280;
        _1290 = _1280;
        _1291 = _1280;
        _1292 = 0.0;
        _1293 = 0.0;
        _1294 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_950, cbModelParam._m0[30u].z, fma(_946, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942));
        float _1326 = fma(_950, cbModelParam._m0[31u].z, fma(_946, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942));
        float _1330 = fma(_950, cbModelParam._m0[32u].z, fma(_946, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942));
        float _1353 = _942 + _719;
        float _1354 = _946 + _720;
        float _1355 = _950 + _721;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_719, _720, _721), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4298 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_719, _720, _721), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4331 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_719, _720, _721), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4364 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1280;
        _1592 = _1280;
        _1593 = _1280;
        _1594 = _1280;
        _1595 = _1280;
        _1596 = _1280;
        _1597 = _1280;
        _1598 = _1280;
        _1599 = _1280;
        _1600 = _1280;
        _1601 = _1280;
        _1602 = _1280;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1292)) + _1292;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1293)) + _1293;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1294)) + _1294;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _889 * 0.5;
    float _1660 = _890 * 0.5;
    float _1661 = _891 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1279, _1283, _1286, _1289));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1284, _1287, _1290));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1776 = fma(_950, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942)) + cbModelParam._m0[13u].w;
        float _1780 = fma(_950, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942)) + cbModelParam._m0[14u].w;
        float _1784 = fma(_950, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942)) + cbModelParam._m0[15u].w;
        float _1787 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1790 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1793 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1821;
        if (_1787 > 0.0)
        {
            _1821 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1821 = frontier_phi_17_15_ladder;
        }
        float _1991;
        if (_1790 > 0.0)
        {
            _1991 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1991 = frontier_phi_26_22_ladder;
        }
        float _2286;
        if (_1793 > 0.0)
        {
            _2286 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2286 = frontier_phi_38_33_ladder;
        }
        float _2288 = isnan(_1991) ? _1821 : (isnan(_1821) ? _1991 : min(_1821, _1991));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1787) + _1776;
        float _2294 = (_2289 * _1790) + _1780;
        float _2295 = (_2289 * _1793) + _1784;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2296;
        float _2300 = _2296 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 > _2300) || ((_2294 < _2298) || ((_2293 < _2298) || (_2293 > _2300))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_16_38_ladder = _2440.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2440.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2440.x * cbModelParam._m0[1u].y;
        }
        _1809 = frontier_phi_16_38_ladder_2;
        _1811 = frontier_phi_16_38_ladder_1;
        _1813 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1728);
        _1809 = _1797.x * cbModelParam._m0[1u].y;
        _1811 = _1797.y * cbModelParam._m0[1u].y;
        _1813 = _1797.z * cbModelParam._m0[1u].y;
    }
    float _1817 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1818 = isnan(_1817) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1817 : min(cbModelParam._m0[25u].w, _1817));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1872 = fma(_950, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942)) + cbModelParam._m0[21u].w;
        float _1876 = fma(_950, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942)) + cbModelParam._m0[22u].w;
        float _1880 = fma(_950, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942)) + cbModelParam._m0[23u].w;
        float _1883 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1886 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1889 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1996;
        if (_1883 > 0.0)
        {
            _1996 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1996 = frontier_phi_28_24_ladder;
        }
        float _2313;
        if (_1886 > 0.0)
        {
            _2313 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2313 = frontier_phi_40_35_ladder;
        }
        float _2640;
        if (_1889 > 0.0)
        {
            _2640 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2640 = frontier_phi_50_47_ladder;
        }
        float _2642 = isnan(_2313) ? _1996 : (isnan(_1996) ? _2313 : min(_1996, _2313));
        float _2643 = isnan(_2640) ? _2642 : (isnan(_2642) ? _2640 : min(_2642, _2640));
        float _2647 = (_2643 * _1883) + _1872;
        float _2648 = (_2643 * _1886) + _1876;
        float _2649 = (_2643 * _1889) + _1880;
        float _2650 = _2643 * 9.9999997473787516355514526367188e-05;
        float _2651 = (-1.0) - _2650;
        float _2653 = _2650 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2649 > _2653) || ((_2649 < _2651) || ((_2648 > _2653) || ((_2648 < _2651) || ((_2647 < _2651) || (_2647 > _2653))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2649, cbModelParam._m0[17u].z, fma(_2648, cbModelParam._m0[17u].y, _2647 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2649, cbModelParam._m0[18u].z, fma(_2648, cbModelParam._m0[18u].y, _2647 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2649, cbModelParam._m0[19u].z, fma(_2648, cbModelParam._m0[19u].y, _2647 * cbModelParam._m0[19u].x))), _1818);
            frontier_phi_25_50_ladder = _2767.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2767.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2767.x * cbModelParam._m0[1u].z;
        }
        _1908 = frontier_phi_25_50_ladder_2;
        _1910 = frontier_phi_25_50_ladder_1;
        _1912 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1818);
        _1908 = _1892.x * cbModelParam._m0[1u].z;
        _1910 = _1892.y * cbModelParam._m0[1u].z;
        _1912 = _1892.z * cbModelParam._m0[1u].z;
    }
    float _1924 = ((((1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_910 * _897)) * _881;
    float _1925 = _1924 * ((cbModelParam._m0[1u].w * (_1908 - _1809)) + _1809);
    float _1926 = _1924 * ((cbModelParam._m0[1u].w * (_1910 - _1811)) + _1811);
    float _1927 = _1924 * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1930 = fma(_1927, cbSceneParam._m0[89u].z, fma(_1926, cbSceneParam._m0[89u].y, _1925 * cbSceneParam._m0[89u].x));
    float _1933 = fma(_1927, cbSceneParam._m0[90u].z, fma(_1926, cbSceneParam._m0[90u].y, _1925 * cbSceneParam._m0[90u].x));
    float _1936 = fma(_1927, cbSceneParam._m0[91u].z, fma(_1926, cbSceneParam._m0[91u].y, _1925 * cbSceneParam._m0[91u].x));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1983 = _1970 / _1982;
    float _1984 = _1974 / _1982;
    float _1985 = _1978 / _1982;
    float _2132;
    float _2133;
    float _2134;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2012 = ((uint(_1985 > cbSceneParam._m0[59u].y) + uint(_1985 > cbSceneParam._m0[59u].x)) + uint(_1985 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2013 = _2012 + 43u;
        uint _2021 = _2012 + 44u;
        uint _2029 = _2012 + 45u;
        uint _2037 = _2012 + 46u;
        float _2048 = fma(_1982, cbSceneParam._m0[_2013].w, fma(_1978, cbSceneParam._m0[_2013].z, fma(_1974, cbSceneParam._m0[_2013].y, _1970 * cbSceneParam._m0[_2013].x)));
        float _2052 = fma(_1982, cbSceneParam._m0[_2021].w, fma(_1978, cbSceneParam._m0[_2021].z, fma(_1974, cbSceneParam._m0[_2021].y, _1970 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1982, cbSceneParam._m0[_2037].w, fma(_1978, cbSceneParam._m0[_2037].z, fma(_1974, cbSceneParam._m0[_2037].y, _1970 * cbSceneParam._m0[_2037].x)));
        float _2065 = cbSceneParam._m0[33u].z * _2060;
        float _2067 = cbSceneParam._m0[33u].w * _2060;
        float _2070 = fma(_1982, cbSceneParam._m0[_2029].w, fma(_1978, cbSceneParam._m0[_2029].z, fma(_1974, cbSceneParam._m0[_2029].y, _1970 * cbSceneParam._m0[_2029].x))) / _2060;
        float _2118 = (cbSceneParam._m0[33u].x - sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985))) * cbSceneParam._m0[33u].y;
        float _4490 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2125 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2048) / _2060, (_2067 + _2052) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 + _2048) / _2060, (_2052 - _2065) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 - _2065) / _2060, (_2052 - _2067) / _2060), _2070), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 - _2067) / _2060, (_2065 + _2052) / _2060), _2070), 0.0)).x), vec4(0.25)));
        _2132 = 1.0 - (_2125 * cbSceneParam._m0[34u].x);
        _2133 = 1.0 - (_2125 * cbSceneParam._m0[34u].y);
        _2134 = 1.0 - (_2125 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2132 = 1.0;
        _2133 = 1.0;
        _2134 = 1.0;
    }
    float _2198;
    float _2200;
    float _2202;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2186 = fma(_1982, cbSceneParam._m0[63u].w, fma(_1978, cbSceneParam._m0[63u].z, fma(_1974, cbSceneParam._m0[63u].y, _1970 * cbSceneParam._m0[63u].x)));
        float _2187 = fma(_1982, cbSceneParam._m0[60u].w, fma(_1978, cbSceneParam._m0[60u].z, fma(_1974, cbSceneParam._m0[60u].y, _1970 * cbSceneParam._m0[60u].x))) / _2186;
        float _2188 = fma(_1982, cbSceneParam._m0[61u].w, fma(_1978, cbSceneParam._m0[61u].z, fma(_1974, cbSceneParam._m0[61u].y, _1970 * cbSceneParam._m0[61u].x))) / _2186;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2187 >= cbSceneParam._m0[64u].x) && (_2188 >= cbSceneParam._m0[64u].y)) && (_2187 <= cbSceneParam._m0[64u].z)) && (_2188 <= cbSceneParam._m0[64u].w))
        {
            float _2326 = fma(_1982, cbSceneParam._m0[62u].w, fma(_1978, cbSceneParam._m0[62u].z, fma(_1974, cbSceneParam._m0[62u].y, _1970 * cbSceneParam._m0[62u].x))) / _2186;
            float _2330 = isnan(cbSceneParam._m0[41u].w) ? _2326 : (isnan(_2326) ? cbSceneParam._m0[41u].w : max(_2326, cbSceneParam._m0[41u].w));
            float _2373 = (cbSceneParam._m0[33u].x - sqrt(((_1984 * _1984) + (_1983 * _1983)) + (_1985 * _1985))) * cbSceneParam._m0[33u].y;
            float _4506 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
            float _2380 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2187, cbSceneParam._m0[33u].w + _2188), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2187, _2188 - cbSceneParam._m0[33u].z), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2187 - cbSceneParam._m0[33u].z, _2188 - cbSceneParam._m0[33u].w), _2330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2187 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2188), _2330), 0.0)).x), vec4(0.25)));
            float _2384 = 1.0 - (_2380 * cbSceneParam._m0[34u].x);
            float _2385 = 1.0 - (_2380 * cbSceneParam._m0[34u].y);
            float _2386 = 1.0 - (_2380 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
            frontier_phi_37_36_ladder_1 = isnan(_2385) ? _2133 : (isnan(_2133) ? _2385 : min(_2133, _2385));
            frontier_phi_37_36_ladder_2 = isnan(_2384) ? _2132 : (isnan(_2132) ? _2384 : min(_2132, _2384));
        }
        else
        {
            frontier_phi_37_36_ladder = _2134;
            frontier_phi_37_36_ladder_1 = _2133;
            frontier_phi_37_36_ladder_2 = _2132;
        }
        _2198 = frontier_phi_37_36_ladder_2;
        _2200 = frontier_phi_37_36_ladder_1;
        _2202 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2198 = _2132;
        _2200 = _2133;
        _2202 = _2134;
    }
    uvec4 _2207 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2209 = _2207.x * 14u;
    uint _2210 = _2209 + 13u;
    float _2217 = _881 + (-1.0);
    float _2222 = (cbLight._m0[_2210].x * _2217) + 1.0;
    float _2223 = (cbLight._m0[_2210].y * _2217) + 1.0;
    float _2224 = (cbLight._m0[_2210].z * _2217) + 1.0;
    float _2225 = (cbLight._m0[_2210].w * _2217) + 1.0;
    uint _2226 = _2209 + 5u;
    float _2232 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    uint _2236 = _2209 + 4u;
    float _2245 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
    uint _2249 = _2209 | 1u;
    float _2260 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_719, _720, _721));
    float _2263 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_719, _720, _721));
    float _4542 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _4553 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2268 = (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * 0.3183098733425140380859375;
    float _2270 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2277 = ((cbLight._m0[_2226].x * _2232) * _2270) + (((cbLight._m0[_2236].x * _2198) * _2245) * _2268);
    float _2278 = ((_2232 * cbLight._m0[_2226].y) * _2270) + (((cbLight._m0[_2236].y * _2200) * _2245) * _2268);
    float _2279 = ((_2232 * cbLight._m0[_2226].z) * _2270) + (((cbLight._m0[_2236].z * _2202) * _2245) * _2268);
    uvec4 _2283 = floatBitsToUint(cbLight._m0[_2209 + 12u]);
    bool _2285 = _2283.x == 0u;
    float _2387;
    float _2389;
    float _2391;
    if (_2285)
    {
        _2387 = _2277;
        _2389 = _2278;
        _2391 = _2279;
    }
    else
    {
        uint _2395 = _2209 + 6u;
        float _2411 = (dot(vec3(cbLight._m0[_2209 + 2u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2412 = _2411 * _2411;
        float _4564 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2413 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2414 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2387 = (((cbLight._m0[_2395].x * 0.3183098733425140380859375) * _2413) * _2414) + _2277;
        _2389 = (((cbLight._m0[_2395].y * 0.3183098733425140380859375) * _2413) * _2414) + _2278;
        _2391 = (((cbLight._m0[_2395].z * 0.3183098733425140380859375) * _2413) * _2414) + _2279;
    }
    bool _2394 = _2283.y == 0u;
    float _2449;
    float _2451;
    float _2453;
    if (_2394)
    {
        _2449 = _2387;
        _2451 = _2389;
        _2453 = _2391;
    }
    else
    {
        uint _2611 = _2209 + 7u;
        float _2627 = (dot(vec3(cbLight._m0[_2209 + 3u].xyz), vec3(_719, _720, _721)) * 0.5) + 0.5;
        float _2628 = _2627 * _2627;
        float _4580 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2629 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2630 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2449 = (((cbLight._m0[_2611].x * 0.3183098733425140380859375) * _2629) * _2630) + _2387;
        _2451 = (((cbLight._m0[_2611].y * 0.3183098733425140380859375) * _2629) * _2630) + _2389;
        _2453 = (((cbLight._m0[_2611].z * 0.3183098733425140380859375) * _2629) * _2630) + _2391;
    }
    uint _2456 = _2209 + 8u;
    float _2469 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _722) * 0.949999988079071044921875);
    float _2470 = _2469 * _2469;
    float _2471 = cbLight._m0[_2209].x + _798;
    float _2472 = cbLight._m0[_2209].y + _799;
    float _2473 = cbLight._m0[_2209].z + _800;
    float _2477 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
    float _2478 = _2477 * _2471;
    float _2479 = _2477 * _2472;
    float _2480 = _2477 * _2473;
    float _2481 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2209].xyz));
    float _4596 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _4607 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2485 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _2486 = dot(vec3(_719, _720, _721), vec3(_2478, _2479, _2480));
    float _4618 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2489 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2490 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2478, _2479, _2480));
    float _4629 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2494 = _2470 * _2470;
    float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
    float _2509 = (exp2(log2(1.0 - (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2510 = 1.0 - _2470;
    float _2521 = (0.5 / (((_2485 * ((_2484 * _2510) + _2470)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2510) + _2470) * _2484))) * _2484;
    float _4640 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2523 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
    uint _2537 = _2209 + 9u;
    float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _722) * 0.949999988079071044921875);
    float _2549 = _2548 * _2548;
    float _2550 = cbLight._m0[_2249].x + _798;
    float _2551 = cbLight._m0[_2249].y + _799;
    float _2552 = cbLight._m0[_2249].z + _800;
    float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
    float _2557 = _2556 * _2550;
    float _2558 = _2556 * _2551;
    float _2559 = _2556 * _2552;
    float _2560 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2249].xyz));
    float _4651 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2563 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
    float _2564 = dot(vec3(_719, _720, _721), vec3(_2557, _2558, _2559));
    float _4662 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2568 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2557, _2558, _2559));
    float _4673 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = _2549 * _2549;
    float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
    float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2586 = 1.0 - _2549;
    float _2596 = (0.5 / (((_2485 * ((_2563 * _2586) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2586) + _2549) * _2563))) * _2563;
    float _4684 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
    float _2608 = (((_2585 * cbLight._m0[_2537].x) * _2598) * _2232) + ((((cbLight._m0[_2456].x * _2198) * _2509) * _2523) * _2245);
    float _2609 = (((_2585 * cbLight._m0[_2537].y) * _2598) * _2232) + ((((cbLight._m0[_2456].y * _2200) * _2509) * _2523) * _2245);
    float _2610 = (((_2585 * cbLight._m0[_2537].z) * _2598) * _2232) + ((((cbLight._m0[_2456].z * _2202) * _2509) * _2523) * _2245);
    float _2666;
    float _2668;
    float _2670;
    if (_2285)
    {
        _2666 = _2608;
        _2668 = _2609;
        _2670 = _2610;
    }
    else
    {
        uint _2672 = _2209 + 2u;
        uint _2676 = _2209 + 10u;
        float _2690 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _722) * 0.949999988079071044921875);
        float _2691 = _2690 * _2690;
        float _2692 = cbLight._m0[_2672].x + _798;
        float _2693 = cbLight._m0[_2672].y + _799;
        float _2694 = cbLight._m0[_2672].z + _800;
        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
        float _2699 = _2698 * _2692;
        float _2700 = _2698 * _2693;
        float _2701 = _2698 * _2694;
        float _2702 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2672].xyz));
        float _4695 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2705 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2706 = dot(vec3(_719, _720, _721), vec3(_2699, _2700, _2701));
        float _4706 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2710 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2699, _2700, _2701));
        float _4717 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2714 = _2691 * _2691;
        float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
        float _2727 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2728 = 1.0 - _2691;
        float _2738 = (0.5 / (((_2485 * ((_2705 * _2728) + _2691)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2728) + _2691) * _2705))) * _2705;
        float _4728 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2740 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
        float _2741 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
        _2666 = (((_2727 * cbLight._m0[_2676].x) * _2740) * _2741) + _2608;
        _2668 = (((_2727 * cbLight._m0[_2676].y) * _2740) * _2741) + _2609;
        _2670 = (((_2727 * cbLight._m0[_2676].z) * _2740) * _2741) + _2610;
    }
    float _2772;
    float _2774;
    float _2776;
    if (_2394)
    {
        _2772 = _2666;
        _2774 = _2668;
        _2776 = _2670;
    }
    else
    {
        uint _2783 = _2209 + 3u;
        uint _2787 = _2209 + 11u;
        float _2801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2783].w)) * _722) * 0.949999988079071044921875);
        float _2802 = _2801 * _2801;
        float _2803 = cbLight._m0[_2783].x + _798;
        float _2804 = cbLight._m0[_2783].y + _799;
        float _2805 = cbLight._m0[_2783].z + _800;
        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
        float _2810 = _2809 * _2803;
        float _2811 = _2809 * _2804;
        float _2812 = _2809 * _2805;
        float _2813 = dot(vec3(_719, _720, _721), vec3(cbLight._m0[_2783].xyz));
        float _4744 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2816 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _2817 = dot(vec3(_719, _720, _721), vec3(_2810, _2811, _2812));
        float _4755 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2821 = dot(vec3(cbLight._m0[_2783].xyz), vec3(_2810, _2811, _2812));
        float _4766 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2825 = _2802 * _2802;
        float _2829 = ((_2820 * _2820) * (_2825 + (-1.0))) + 1.0;
        float _2838 = (exp2(log2(1.0 - (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2839 = 1.0 - _2802;
        float _2849 = (0.5 / (((_2485 * ((_2816 * _2839) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2485 * _2839) + _2802) * _2816))) * _2816;
        float _4777 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2851 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2825 / ((_2829 * _2829) * 3.141590118408203125));
        float _2852 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
        _2772 = (((_2838 * cbLight._m0[_2787].x) * _2851) * _2852) + _2666;
        _2774 = (((_2838 * cbLight._m0[_2787].y) * _2851) * _2852) + _2668;
        _2776 = (((_2838 * cbLight._m0[_2787].z) * _2851) * _2852) + _2670;
    }
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_2207.y == 0u)
    {
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.x;
        uint _2885 = uint((float(_2873.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2874))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2874)));
        float _2895 = (log2(_1985 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2896 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        uint _2899 = uint(isnan(14.0) ? _2896 : (isnan(_2896) ? 14.0 : min(_2896, 14.0)));
        uvec4 _2904 = texelFetch(g_lightClusterGridBuffer, int(((_2899 << 2u) + (_2885 << 6u)) >> 2u));
        uint _2905 = _2904.x;
        uint _2906 = _2873.z;
        float _2985;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        if (((((1u << ((_2906 >> 4u) & 15u)) + 4294967295u) & _2905) == 0u) || ((_2906 & 240u) == 0u))
        {
            _2985 = 0.0;
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
        }
        else
        {
            float _2986;
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3154)
                {
                    frontier_phi_71_pred = _3143;
                    frontier_phi_71_pred_1 = _3142;
                    frontier_phi_71_pred_2 = _3141;
                    frontier_phi_71_pred_3 = _3140;
                    frontier_phi_71_pred_4 = _3139;
                    frontier_phi_71_pred_5 = _3138;
                }
                else
                {
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    uint _3289;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3153;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    for (;;)
                    {
                        uint _3293 = uint(findLSB(_3289)) + (_3144 << 5u);
                        uint _3290 = (_3289 + 4294967295u) & _3289;
                        uint _3295 = _3293 * 48u;
                        vec4 _3309 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3295)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3295 + 3u)).x));
                        uint _3315 = (_3293 * 48u) + 4u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3315)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3315 + 3u)).x));
                        uint _3334 = (_3293 * 48u) + 8u;
                        vec3 _3345 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x));
                        float _3349 = _3309.x - _1983;
                        float _3350 = _3309.y - _1984;
                        float _3351 = _3309.z - _1985;
                        float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                        float _3355 = inversesqrt(_3352);
                        float _3356 = _3355 * _3349;
                        float _3357 = _3355 * _3350;
                        float _3358 = _3355 * _3351;
                        float _3359 = dot(vec3(_837, _840, _843), vec3(_3356, _3357, _3358));
                        float _3364 = 1.0 - (_3352 * _3309.w);
                        float _4803 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3365 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3366 = sqrt(_3352) * _3328.w;
                        float _3369 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                        float _3370 = _3369 * _3369;
                        float _3373 = ((1.0 - _3370) * _3359) + _3370;
                        float _3376 = _3366 * _3366;
                        float _3380 = ((isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0))) * _3365) / ((_3376 * 0.699999988079071044921875) + 1.0);
                        float _3384 = (-0.0) - _1983;
                        float _3385 = (-0.0) - _1984;
                        float _3386 = (-0.0) - _1985;
                        float _3390 = inversesqrt(dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386)));
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3400 = exp2(log2(1.0 / ((_3376 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _897;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3391 + _3356;
                        float _3412 = _3392 + _3357;
                        float _3413 = _3393 + _3358;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_837, _840, _843), vec3(_3391, _3392, _3393));
                        float _4819 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3425 = dot(vec3(_837, _840, _843), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4830 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3369 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3359) + _3434;
                        float _4841 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4852 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) / ((_3432 * _3432) * ((_3376 * 2.1991131305694580078125) + 3.141590118408203125))) * _3365;
                        _3213 = (_3380 * _3328.x) + _3286;
                        _3214 = (_3380 * _3328.y) + _3287;
                        _3215 = (_3380 * _3328.z) + _3288;
                        _3210 = (_3460 * _3345.x) + _3283;
                        _3211 = (_3460 * _3345.y) + _3284;
                        _3212 = (_3460 * _3345.z) + _3285;
                        if (_3290 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3290;
                        }
                    }
                    frontier_phi_71_pred = _3215;
                    frontier_phi_71_pred_1 = _3214;
                    frontier_phi_71_pred_2 = _3213;
                    frontier_phi_71_pred_3 = _3212;
                    frontier_phi_71_pred_4 = _3211;
                    frontier_phi_71_pred_5 = _3210;
                }
                _2996 = frontier_phi_71_pred;
                _2994 = frontier_phi_71_pred_1;
                _2992 = frontier_phi_71_pred_2;
                _2990 = frontier_phi_71_pred_3;
                _2988 = frontier_phi_71_pred_4;
                _2986 = frontier_phi_71_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2986;
                    _3139 = _2988;
                    _3140 = _2990;
                    _3141 = _2992;
                    _3142 = _2994;
                    _3143 = _2996;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2985 = _2986;
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
        }
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.z;
        uint _3002 = (_3000 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3002) & _2905) == 0u)
        {
            _3106 = _2985;
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
            float _3132 = _3131 * _1983;
            float _3133 = _3131 * _1984;
            float _3134 = _3131 * _1985;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3002 < ((_3000 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3266 = _2985;
                float _3267 = _2987;
                float _3268 = _2989;
                float _3269 = _2991;
                float _3270 = _2993;
                float _3271 = _2995;
                uint _3272 = _3002;
                uint _3281;
                bool _3282;
                for (;;)
                {
                    _3281 = texelFetch(g_lightClassification, int((((_2899 << 5u) + (_2885 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                    _3282 = _3281 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3282)
                    {
                        frontier_phi_82_pred = _3271;
                        frontier_phi_82_pred_1 = _3270;
                        frontier_phi_82_pred_2 = _3269;
                        frontier_phi_82_pred_3 = _3268;
                        frontier_phi_82_pred_4 = _3267;
                        frontier_phi_82_pred_5 = _3266;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        uint _3493 = _3281;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3272 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_1985, _3611.z, fma(_1984, _3611.y, _3611.x * _1983)) + _3611.w;
                            _3624 = !((fma(_1985, _3592.z, fma(_1984, _3592.y, _3592.x * _1983)) + _3592.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _1983;
                                float _3652 = _3519.y - _1984;
                                float _3653 = _3519.z - _1985;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4863 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_837, _840, _843))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_1985, _3562.z, fma(_1984, _3562.y, _3562.x * _1983)) + _3562.w) / _3623;
                                float _3683 = (fma(_1985, _3577.z, fma(_1984, _3577.y, _3577.x * _1983)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4879 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _897;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3132;
                                float _3713 = _3659 - _3133;
                                float _3714 = _3660 - _3134;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_837, _840, _843), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4890 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3726 = dot(vec3(_837, _840, _843), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4901 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_837, _840, _843), vec3(_3658, _3659, _3660))) + _3735;
                                float _4912 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4923 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3689 * _3535.z;
                                frontier_phi_88_pred_1 = _3689 * _3535.y;
                                frontier_phi_88_pred_2 = _3689 * _3535.x;
                                frontier_phi_88_pred_3 = _3763 * _3547.z;
                                frontier_phi_88_pred_4 = _3763 * _3547.y;
                                frontier_phi_88_pred_5 = _3763 * _3547.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3772 = frontier_phi_88_pred;
                            _3771 = frontier_phi_88_pred_1;
                            _3770 = frontier_phi_88_pred_2;
                            _3769 = frontier_phi_88_pred_3;
                            _3768 = frontier_phi_88_pred_4;
                            _3767 = frontier_phi_88_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3479;
                        frontier_phi_82_pred_1 = _3478;
                        frontier_phi_82_pred_2 = _3477;
                        frontier_phi_82_pred_3 = _3476;
                        frontier_phi_82_pred_4 = _3475;
                        frontier_phi_82_pred_5 = _3474;
                    }
                    _3117 = frontier_phi_82_pred;
                    _3115 = frontier_phi_82_pred_1;
                    _3113 = frontier_phi_82_pred_2;
                    _3111 = frontier_phi_82_pred_3;
                    _3109 = frontier_phi_82_pred_4;
                    _3107 = frontier_phi_82_pred_5;
                    uint _3273 = _3272 + 1u;
                    if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3266 = _3107;
                        _3267 = _3109;
                        _3268 = _3111;
                        _3269 = _3113;
                        _3270 = _3115;
                        _3271 = _3117;
                        _3272 = _3273;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3113;
                frontier_phi_63_64_ladder_1 = _3117;
                frontier_phi_63_64_ladder_2 = _3115;
                frontier_phi_63_64_ladder_3 = _3111;
                frontier_phi_63_64_ladder_4 = _3109;
                frontier_phi_63_64_ladder_5 = _3107;
            }
            else
            {
                frontier_phi_63_64_ladder = _2991;
                frontier_phi_63_64_ladder_1 = _2995;
                frontier_phi_63_64_ladder_2 = _2993;
                frontier_phi_63_64_ladder_3 = _2989;
                frontier_phi_63_64_ladder_4 = _2987;
                frontier_phi_63_64_ladder_5 = _2985;
            }
            _3106 = frontier_phi_63_64_ladder_5;
            _3108 = frontier_phi_63_64_ladder_4;
            _3110 = frontier_phi_63_64_ladder_3;
            _3112 = frontier_phi_63_64_ladder;
            _3114 = frontier_phi_63_64_ladder_2;
            _3116 = frontier_phi_63_64_ladder_1;
        }
        float _3121 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2918 = (_3121 * _3112) + _2449;
        _2920 = (_3121 * _3114) + _2451;
        _2922 = (_3121 * _3116) + _2453;
        _2924 = ((_3106 * 0.039999999105930328369140625) * _3121) + _2772;
        _2926 = ((_3108 * 0.039999999105930328369140625) * _3121) + _2774;
        _2928 = ((_3110 * 0.039999999105930328369140625) * _3121) + _2776;
    }
    else
    {
        _2918 = _2449;
        _2920 = _2451;
        _2922 = _2453;
        _2924 = _2772;
        _2926 = _2774;
        _2928 = _2776;
    }
    float _4939 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4950 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4961 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2945 = ((isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0))) * (_2918 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _881))) + ((_2924 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2946 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2920 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _881))) + ((_2926 + ((isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2947 = ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2922 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _881))) + ((_2928 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    uint _2948 = _257 + 6u;
    float _2956 = _818 / cbSceneParam._m0[86u].x;
    float _2957 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2971 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2973 = _2971.x;
    float _2974 = _2971.y;
    float _2975 = _2971.z;
    float _2976 = _2971.w;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _3010 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _3011 = _3010 / _740;
        float _3022 = _3011 * _791;
        float _3023 = _792 * _3011;
        float _3024 = (-0.0) - _3023;
        float _3026 = _3011 * _793;
        float _3028 = (cbSceneParam._m0[77u].w * _3024) / _3010;
        float _3029 = _3028 + cbSceneParam._m0[79u].w;
        float _3030 = cbSceneParam._m0[79u].w - _3023;
        float _3036 = sqrt(((_3022 * _3022) + (_3023 * _3023)) + (_3026 * _3026));
        float _3039 = (1.0 - (cbSceneParam._m0[77u].w / _3010)) * _3036;
        float _3044 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3046 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3223;
        if (abs((_3024 - _3028) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3223 = ((((_3029 > 0.0) ? exp2(_3044 * _3029) : (2.0 - exp2(_3046 * _3029))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3039;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : max(_3029, _3030));
            float _3169 = isnan(_3030) ? _3029 : (isnan(_3029) ? _3030 : min(_3029, _3030));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3223 = ((abs(_3036 / _3024) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3044 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3044 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3046 * _3178) - exp2(_3046 * _3179)) * _3167))) + (_3039 * cbSceneParam._m0[80u].z);
        }
        vec4 _3225 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2956, _2957, 1.0), 0.0);
        float _3234 = exp2((_3223 * (-1.44269502162933349609375)) * (1.0 - _3225.w));
        float _3235 = log2(_3234);
        float _3251 = log2(_2976);
        _3048 = (exp2(_3251 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].x)) * _3225.x) / cbSceneParam._m0[78u].x)) + _2973;
        _3050 = (exp2(_3251 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].y)) * _3225.y) / cbSceneParam._m0[78u].y)) + _2974;
        _3052 = (exp2(_3251 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3235 * cbSceneParam._m0[78u].z)) * _3225.z) / cbSceneParam._m0[78u].z)) + _2975;
        _3054 = _3234 * _2976;
    }
    else
    {
        _3048 = _2973;
        _3050 = _2974;
        _3052 = _2975;
        _3054 = _2976;
    }
    bool _3261;
    vec4 _3064;
    vec4 _3086;
    float _3088;
    float _3092;
    float _3093;
    float _3094;
    float _3095;
    bool _3105;
    for (;;)
    {
        _3064 = cbMatDynParam._m0[0u];
        float _3066 = roundEven(_3064.y);
        bool _3067 = _3066 == 3.0;
        float _3068 = log2(_3054);
        float _3075 = exp2(_3068 * cbSceneParam._m0[78u].x) * _2945;
        float _3076 = exp2(_3068 * cbSceneParam._m0[78u].y) * _2946;
        float _3077 = exp2(_3068 * cbSceneParam._m0[78u].z) * _2947;
        float _3084 = _807 + (-0.5);
        _3086 = cbMtdParam._m0[1u];
        _3088 = _3086.y * _3084;
        float _3091 = (_3066 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3092 = _3091 * (_3067 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3048)));
        _3093 = _3091 * (_3067 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3050)));
        _3094 = _3091 * (_3067 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3052)));
        _3095 = _3084 * 0.999000012874603271484375;
        _3105 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3105)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3095) < 0.5)
            {
                _3261 = true;
                break;
            }
        }
        uint _3202 = _856 + uint(_3064.w);
        if ((cbInstanceData._m0[_3202].w < 1.0) && ((cbInstanceData._m0[_3202].w + _3095) < 0.5))
        {
            _3261 = true;
            break;
        }
        if ((_3088 + 1.0) < _3086.x)
        {
            _3261 = true;
            break;
        }
        _3261 = false;
        break;
    }
    float _3465;
    if (_3261)
    {
        discard_state = true;
        _3465 = 0.0;
    }
    else
    {
        _3465 = cbInstanceData._m0[_2948].w;
    }
    SV_Target.x = _3092;
    SV_Target.y = _3093;
    SV_Target.z = _3094;
    SV_Target.w = _3465;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2948].w;
    discard_exit();
}


