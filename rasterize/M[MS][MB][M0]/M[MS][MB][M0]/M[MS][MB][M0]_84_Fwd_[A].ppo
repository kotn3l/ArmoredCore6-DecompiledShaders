#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1136;
float _3497;
float _3498;
float _3499;
float _3500;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3509 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _425 = ((_395.z - _416) * _368) + _416;
    float _428 = ((((_395.x - _414) * _368) + _414) * 2.0) + (-1.0);
    float _430 = ((((_395.y - _415) * _368) + _415) * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3520 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))));
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _479 = _477.x;
    float _480 = 1.0 - _479;
    float _493 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_479 - _480) * cbMtdParam._m0[24u].z) + _480) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3531 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _501 = (_494 * (cbMtdParam._m0[17u].x - _375)) + _375;
    float _502 = (_494 * (cbMtdParam._m0[17u].y - _376)) + _376;
    float _503 = (_494 * (cbMtdParam._m0[17u].z - _377)) + _377;
    float _507 = (cbMtdParam._m0[19u].w * (_452.z - _425)) + _425;
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3542 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _537 = (_494 * (_520.z - _507)) + _507;
    float _540 = (((_452.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _428;
    float _541 = (((_452.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _430;
    float _553 = (((_527 - _540) + (cbMtdParam._m0[21u].x * _540)) * _494) + _540;
    float _554 = (((_528 - _541) + (cbMtdParam._m0[21u].x * _541)) * _494) + _541;
    float _555 = (_494 * (sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) - _436)) + _436;
    float _560 = cbMtdParam._m0[22u].x + _452.w;
    float _563 = fma(_555, _219 * NORMAL.x, fma(_554, _226 * TANGENT.x, (_212 * _204) * _553));
    float _566 = fma(_555, _219 * NORMAL.y, fma(_554, _226 * TANGENT.y, (_212 * _205) * _553));
    float _569 = fma(_555, _219 * NORMAL.z, fma(_554, _226 * TANGENT.z, (_212 * _206) * _553));
    float _573 = inversesqrt(dot(vec3(_563, _566, _569), vec3(_563, _566, _569)));
    float _574 = _573 * _563;
    float _575 = _573 * _566;
    float _576 = _573 * _569;
    float _3553 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _577 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3575 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3586 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3597 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _595 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    vec4 _661 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _663 = _661.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _817 = sqrt(((_647 * _647) + (_648 * _648)) + (_649 * _649));
        float _823 = (cbMatDynParam._m0[5u].x * _817) + cbMatDynParam._m0[5u].y;
        float _3608 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _828 = (cbMatDynParam._m0[5u].z * _817) + cbMatDynParam._m0[5u].w;
        float _3619 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) - _824)) + _824) < ((_663 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _674 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _675 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _693 = fma(_576, cbSceneParam._m0[5u].z, fma(_575, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _574));
    float _696 = fma(_576, cbSceneParam._m0[6u].z, fma(_575, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _574));
    float _699 = fma(_576, cbSceneParam._m0[7u].z, fma(_575, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _574));
    uint _712 = _232 + 9u;
    uint _713 = _712 + uint(cbMatDynParam._m0[0u].w);
    float _719 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_713].x;
    float _720 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_713].y;
    float _721 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_713].z;
    float _3630 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _3641 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    vec4 _733 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _674, cbSceneParam._m0[86u].y * _675));
    float _737 = ((isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * TEXCOORD_5.w) * _733.x;
    float _738 = dot(vec3(_574, _575, _576), vec3(_654, _655, _656));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _574) - _654;
    float _746 = (_741 * _575) - _655;
    float _747 = (_741 * _576) - _656;
    float _751 = abs(dot(vec3(_654, _655, _656), vec3(_574, _575, _576)));
    float _3663 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_577);
    float _766 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_806, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798));
        float _864 = fma(_806, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798));
        float _868 = fma(_806, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798));
        float _893 = _798 + _574;
        float _894 = _802 + _575;
        float _895 = _806 + _576;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _860;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _864;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _868;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_574, _575, _576), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3711 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_574, _575, _576), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3744 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_574, _575, _576), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3777 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1178 = fma(_806, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798));
        float _1182 = fma(_806, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798));
        float _1186 = fma(_806, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798));
        float _1209 = _798 + _574;
        float _1210 = _802 + _575;
        float _1211 = _806 + _576;
        float _1221 = fma(_1211, cbModelParam._m0[30u].z, fma(_1210, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1209)) - _1178;
        float _1222 = fma(_1211, cbModelParam._m0[31u].z, fma(_1210, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1209)) - _1182;
        float _1223 = fma(_1211, cbModelParam._m0[32u].z, fma(_1210, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1209)) - _1186;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1178 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1182 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[35u].z) + ((((((_1186 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1277 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1244.x + (-0.5));
        float _1279 = _1277 * (_1244.y + (-0.5));
        float _1280 = _1277 * (_1244.z + (-0.5));
        float _1287 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1251.x + (-0.5));
        float _1289 = _1287 * (_1251.y + (-0.5));
        float _1290 = _1287 * (_1251.z + (-0.5));
        float _1297 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1258.x + (-0.5));
        float _1299 = _1297 * (_1258.y + (-0.5));
        float _1300 = _1297 * (_1258.z + (-0.5));
        float _1307 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1265.x + (-0.5));
        float _1309 = _1307 * (_1265.y + (-0.5));
        float _1310 = _1307 * (_1265.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_574, _575, _576), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3840 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1341 + 1.0))) + _1346) * _1311;
        float _1356 = _1279 * 0.5;
        float _1357 = _1289 * 0.5;
        float _1358 = _1299 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_574, _575, _576), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3873 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1383 + 1.0))) + _1388) * _1312;
        float _1398 = _1280 * 0.5;
        float _1399 = _1290 * 0.5;
        float _1400 = _1300 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_574, _575, _576), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3906 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1425 + 1.0))) + _1430) * _1313;
        _1447 = _1280;
        _1448 = _1279;
        _1449 = _1278;
        _1450 = _1290;
        _1451 = _1289;
        _1452 = _1288;
        _1453 = _1300;
        _1454 = _1299;
        _1455 = _1298;
        _1456 = _1313;
        _1457 = _1312;
        _1458 = _1311;
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = _1136;
        _1457 = _1136;
        _1458 = _1136;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1148)) + _1148;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1149)) + _1149;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1150)) + _1150;
    float _1494 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1471));
    float _1515 = _745 * 0.5;
    float _1516 = _746 * 0.5;
    float _1517 = _747 * 0.5;
    float _1518 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1521 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1524 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1558;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1531 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1535 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1539 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1546 = dot(vec4(cbModelParam._m0[39u]), vec4(_1515, _1516, _1517, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1569;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1560 = dot(vec4(cbModelParam._m0[40u]), vec4(_1515, _1516, _1517, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1573 = (_1569 * cbModelParam._m0[1u].x) + (_1558 * (1.0 - cbModelParam._m0[1u].x));
    float _1583 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _577);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1583 : min(cbModelParam._m0[25u].z, _1583));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1632 = fma(_806, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798)) + cbModelParam._m0[13u].w;
        float _1636 = fma(_806, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798)) + cbModelParam._m0[14u].w;
        float _1640 = fma(_806, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798)) + cbModelParam._m0[15u].w;
        float _1643 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1646 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1649 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1677;
        if (_1643 > 0.0)
        {
            _1677 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1677 = frontier_phi_17_15_ladder;
        }
        float _1878;
        if (_1646 > 0.0)
        {
            _1878 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1878 = frontier_phi_26_22_ladder;
        }
        float _2121;
        if (_1649 > 0.0)
        {
            _2121 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2121 = frontier_phi_38_33_ladder;
        }
        float _2123 = isnan(_1878) ? _1677 : (isnan(_1677) ? _1878 : min(_1677, _1878));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1643) + _1632;
        float _2129 = (_2124 * _1646) + _1636;
        float _2130 = (_2124 * _1649) + _1640;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2254 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1584);
            frontier_phi_16_38_ladder = _2254.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2254.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2254.x * cbModelParam._m0[1u].y;
        }
        _1665 = frontier_phi_16_38_ladder_2;
        _1667 = frontier_phi_16_38_ladder_1;
        _1669 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1584);
        _1665 = _1653.x * cbModelParam._m0[1u].y;
        _1667 = _1653.y * cbModelParam._m0[1u].y;
        _1669 = _1653.z * cbModelParam._m0[1u].y;
    }
    float _1673 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _577);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1673 : min(cbModelParam._m0[25u].w, _1673));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1728 = fma(_806, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798)) + cbModelParam._m0[21u].w;
        float _1732 = fma(_806, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798)) + cbModelParam._m0[22u].w;
        float _1736 = fma(_806, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798)) + cbModelParam._m0[23u].w;
        float _1739 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1742 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1745 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1883;
        if (_1739 > 0.0)
        {
            _1883 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1883 = frontier_phi_28_24_ladder;
        }
        float _2148;
        if (_1742 > 0.0)
        {
            _2148 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2148 = frontier_phi_40_35_ladder;
        }
        float _2353;
        if (_1745 > 0.0)
        {
            _2353 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2353 = frontier_phi_49_46_ladder;
        }
        float _2355 = isnan(_2148) ? _1883 : (isnan(_1883) ? _2148 : min(_1883, _2148));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1739) + _1728;
        float _2361 = (_2356 * _1742) + _1732;
        float _2362 = (_2356 * _1745) + _1736;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1674);
            frontier_phi_25_49_ladder = _2561.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2561.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2561.x * cbModelParam._m0[1u].z;
        }
        _1764 = frontier_phi_25_49_ladder_2;
        _1766 = frontier_phi_25_49_ladder_1;
        _1768 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1674);
        _1764 = _1748.x * cbModelParam._m0[1u].z;
        _1766 = _1748.y * cbModelParam._m0[1u].z;
        _1768 = _1748.z * cbModelParam._m0[1u].z;
    }
    float _1780 = ((((1.0 - _766) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_766 * _753)) * _737;
    float _1781 = _1780 * ((cbModelParam._m0[1u].w * (_1764 - _1665)) + _1665);
    float _1782 = _1780 * ((cbModelParam._m0[1u].w * (_1766 - _1667)) + _1667);
    float _1783 = _1780 * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1786 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, _1781 * cbSceneParam._m0[91u].x));
    uvec4 _1802 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1804 = _1802.x * 14u;
    uint _1805 = _1804 + 13u;
    float _1812 = _737 + (-1.0);
    float _1817 = (cbLight._m0[_1805].x * _1812) + 1.0;
    float _1818 = (cbLight._m0[_1805].y * _1812) + 1.0;
    float _1819 = (cbLight._m0[_1805].z * _1812) + 1.0;
    float _1820 = (cbLight._m0[_1805].w * _1812) + 1.0;
    uint _1821 = _1804 + 5u;
    float _1827 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1831 = _1804 + 4u;
    float _1837 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1841 = _1804 | 1u;
    float _1852 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_574, _575, _576));
    float _1855 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_574, _575, _576));
    float _4042 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _4053 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _1860 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * 0.3183098733425140380859375;
    float _1862 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1869 = ((cbLight._m0[_1821].x * _1827) * _1862) + ((cbLight._m0[_1831].x * _1837) * _1860);
    float _1870 = ((_1827 * cbLight._m0[_1821].y) * _1862) + ((_1837 * cbLight._m0[_1831].y) * _1860);
    float _1871 = ((_1827 * cbLight._m0[_1821].z) * _1862) + ((_1837 * cbLight._m0[_1831].z) * _1860);
    uvec4 _1875 = floatBitsToUint(cbLight._m0[_1804 + 12u]);
    bool _1877 = _1875.x == 0u;
    float _1888;
    float _1890;
    float _1892;
    if (_1877)
    {
        _1888 = _1869;
        _1890 = _1870;
        _1892 = _1871;
    }
    else
    {
        uint _1896 = _1804 + 6u;
        float _1912 = (dot(vec3(cbLight._m0[_1804 + 2u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _1913 = _1912 * _1912;
        float _4064 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1914 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1915 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _1888 = (((cbLight._m0[_1896].x * 0.3183098733425140380859375) * _1914) * _1915) + _1869;
        _1890 = (((cbLight._m0[_1896].y * 0.3183098733425140380859375) * _1914) * _1915) + _1870;
        _1892 = (((cbLight._m0[_1896].z * 0.3183098733425140380859375) * _1914) * _1915) + _1871;
    }
    bool _1895 = _1875.y == 0u;
    float _1933;
    float _1935;
    float _1937;
    if (_1895)
    {
        _1933 = _1888;
        _1935 = _1890;
        _1937 = _1892;
    }
    else
    {
        uint _2092 = _1804 + 7u;
        float _2108 = (dot(vec3(cbLight._m0[_1804 + 3u].xyz), vec3(_574, _575, _576)) * 0.5) + 0.5;
        float _2109 = _2108 * _2108;
        float _4080 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2110 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2111 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _1933 = (((cbLight._m0[_2092].x * 0.3183098733425140380859375) * _2110) * _2111) + _1888;
        _1935 = (((cbLight._m0[_2092].y * 0.3183098733425140380859375) * _2110) * _2111) + _1890;
        _1937 = (((cbLight._m0[_2092].z * 0.3183098733425140380859375) * _2110) * _2111) + _1892;
    }
    uint _1940 = _1804 + 8u;
    float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1804].w)) * _577) * 0.949999988079071044921875);
    float _1954 = _1953 * _1953;
    float _1955 = cbLight._m0[_1804].x + _654;
    float _1956 = cbLight._m0[_1804].y + _655;
    float _1957 = cbLight._m0[_1804].z + _656;
    float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
    float _1962 = _1961 * _1955;
    float _1963 = _1961 * _1956;
    float _1964 = _1961 * _1957;
    float _1965 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1804].xyz));
    float _4096 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1968 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1969 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _1970 = dot(vec3(_574, _575, _576), vec3(_1962, _1963, _1964));
    float _4118 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1804].xyz), vec3(_1962, _1963, _1964));
    float _4129 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1954 * _1954;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1993 = (exp2(log2(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1994 = 1.0 - _1954;
    float _2005 = (0.5 / (((_1969 * ((_1968 * _1994) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _1994) + _1954) * _1968))) * _1968;
    float _4140 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    uint _2018 = _1804 + 9u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _577) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1841].x + _654;
    float _2032 = cbLight._m0[_1841].y + _655;
    float _2033 = cbLight._m0[_1841].z + _656;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_1841].xyz));
    float _4151 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2045 = dot(vec3(_574, _575, _576), vec3(_2038, _2039, _2040));
    float _4162 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2049 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_2038, _2039, _2040));
    float _4173 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2053 = _2030 * _2030;
    float _2057 = ((_2048 * _2048) * (_2053 + (-1.0))) + 1.0;
    float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = 1.0 - _2030;
    float _2077 = (0.5 / (((_1969 * ((_2044 * _2067) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2067) + _2030) * _2044))) * _2044;
    float _4184 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2053 / ((_2057 * _2057) * 3.141590118408203125));
    float _2089 = (((_2066 * cbLight._m0[_2018].x) * _2079) * _1827) + (((_1993 * cbLight._m0[_1940].x) * _2007) * _1837);
    float _2090 = (((_2066 * cbLight._m0[_2018].y) * _2079) * _1827) + (((_1993 * cbLight._m0[_1940].y) * _2007) * _1837);
    float _2091 = (((_2066 * cbLight._m0[_2018].z) * _2079) * _1827) + (((_1993 * cbLight._m0[_1940].z) * _2007) * _1837);
    float _2153;
    float _2155;
    float _2157;
    if (_1877)
    {
        _2153 = _2089;
        _2155 = _2090;
        _2157 = _2091;
    }
    else
    {
        uint _2159 = _1804 + 2u;
        uint _2163 = _1804 + 10u;
        float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _577) * 0.949999988079071044921875);
        float _2178 = _2177 * _2177;
        float _2179 = cbLight._m0[_2159].x + _654;
        float _2180 = cbLight._m0[_2159].y + _655;
        float _2181 = cbLight._m0[_2159].z + _656;
        float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
        float _2186 = _2185 * _2179;
        float _2187 = _2185 * _2180;
        float _2188 = _2185 * _2181;
        float _2189 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2159].xyz));
        float _4195 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2192 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2193 = dot(vec3(_574, _575, _576), vec3(_2186, _2187, _2188));
        float _4206 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2197 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2186, _2187, _2188));
        float _4217 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2201 = _2178 * _2178;
        float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
        float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2215 = 1.0 - _2178;
        float _2225 = (0.5 / (((_1969 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2215) + _2178) * _2192))) * _2192;
        float _4228 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2227 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
        float _2228 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2153 = (((_2214 * cbLight._m0[_2163].x) * _2227) * _2228) + _2089;
        _2155 = (((_2214 * cbLight._m0[_2163].y) * _2227) * _2228) + _2090;
        _2157 = (((_2214 * cbLight._m0[_2163].z) * _2227) * _2228) + _2091;
    }
    float _2263;
    float _2265;
    float _2267;
    if (_1895)
    {
        _2263 = _2153;
        _2265 = _2155;
        _2267 = _2157;
    }
    else
    {
        uint _2274 = _1804 + 3u;
        uint _2278 = _1804 + 11u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _577) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _654;
        float _2295 = cbLight._m0[_2274].y + _655;
        float _2296 = cbLight._m0[_2274].z + _656;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_574, _575, _576), vec3(cbLight._m0[_2274].xyz));
        float _4244 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2308 = dot(vec3(_574, _575, _576), vec3(_2301, _2302, _2303));
        float _4255 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4266 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_1969 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_1969 * _2330) + _2293) * _2307))) * _2307;
        float _4277 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
        _2263 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2153;
        _2265 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2155;
        _2267 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2157;
    }
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    float _2488;
    if (_1802.y == 0u)
    {
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2418;
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2418;
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2418;
        uvec4 _2433 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2434 = _2433.x;
        uint _2445 = uint((float(_2433.y) * floor(float(uint(cbSceneParam._m0[85u].y * _675) / _2434))) + floor(float(uint(cbSceneParam._m0[85u].x * _674) / _2434)));
        float _2455 = (log2(_2421 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2456 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        uint _2459 = uint(isnan(14.0) ? _2456 : (isnan(_2456) ? 14.0 : min(_2456, 14.0)));
        uvec4 _2464 = texelFetch(g_lightClusterGridBuffer, int(((_2459 << 2u) + (_2445 << 6u)) >> 2u));
        uint _2465 = _2464.x;
        uint _2466 = _2433.z;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        if (((((1u << ((_2466 >> 4u) & 15u)) + 4294967295u) & _2465) == 0u) || ((_2466 & 240u) == 0u))
        {
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
        }
        else
        {
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            uint _2725 = 0u;
            uint _2734;
            bool _2735;
            for (;;)
            {
                _2734 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2725 << 2u)) >> 2u)).x;
                _2735 = _2734 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2735)
                {
                    frontier_phi_66_pred = _2719;
                    frontier_phi_66_pred_1 = _2724;
                    frontier_phi_66_pred_2 = _2723;
                    frontier_phi_66_pred_3 = _2722;
                    frontier_phi_66_pred_4 = _2721;
                    frontier_phi_66_pred_5 = _2720;
                }
                else
                {
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    uint _2870;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2734;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    for (;;)
                    {
                        uint _2874 = uint(findLSB(_2870)) + (_2725 << 5u);
                        uint _2871 = (_2870 + 4294967295u) & _2870;
                        uint _2876 = _2874 * 48u;
                        vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2876)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2876 + 3u)).x));
                        uint _2896 = (_2874 * 48u) + 4u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 3u)).x));
                        uint _2915 = (_2874 * 48u) + 8u;
                        vec3 _2926 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x));
                        float _2930 = _2890.x - _2419;
                        float _2931 = _2890.y - _2420;
                        float _2932 = _2890.z - _2421;
                        float _2933 = dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932));
                        float _2936 = inversesqrt(_2933);
                        float _2937 = _2936 * _2930;
                        float _2938 = _2936 * _2931;
                        float _2939 = _2936 * _2932;
                        float _2940 = dot(vec3(_693, _696, _699), vec3(_2937, _2938, _2939));
                        float _2945 = 1.0 - (_2933 * _2890.w);
                        float _4303 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                        float _2946 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
                        float _2947 = sqrt(_2933) * _2909.w;
                        float _2950 = 1.39999997615814208984375 / (_2947 + 1.39999997615814208984375);
                        float _2951 = _2950 * _2950;
                        float _2954 = ((1.0 - _2951) * _2940) + _2951;
                        float _2957 = _2947 * _2947;
                        float _2961 = ((isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))) * _2946) / ((_2957 * 0.699999988079071044921875) + 1.0);
                        float _2965 = (-0.0) - _2419;
                        float _2966 = (-0.0) - _2420;
                        float _2967 = (-0.0) - _2421;
                        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2982 = exp2(log2(1.0 / ((_2957 * 3.5) + 5.0)) * 0.25);
                        float _2983 = 1.0 - _753;
                        float _2990 = sqrt(1.0 - ((1.0 - (_2983 * _2983)) * (1.0 - (_2982 * _2982))));
                        float _2991 = _2990 * _2990;
                        float _2992 = _2991 * _2991;
                        float _2993 = _2972 + _2937;
                        float _2994 = _2973 + _2938;
                        float _2995 = _2974 + _2939;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3003 = dot(vec3(_693, _696, _699), vec3(_2972, _2973, _2974));
                        float _4319 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3007 = dot(vec3(_693, _696, _699), vec3(_2999 * _2993, _2999 * _2994, _2999 * _2995));
                        float _4330 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _3014 = ((_3010 * _3010) * (_2992 + (-1.0))) + 1.0;
                        float _3015 = _2950 * _2991;
                        float _3016 = _3015 * _3015;
                        float _3019 = ((1.0 - _3016) * _2940) + _3016;
                        float _4341 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3021 = 1.0 - _2991;
                        float _3031 = (0.5 / (((_3020 * ((_3006 * _3021) + _2991)) + 9.9999999392252902907785028219223e-09) + (((_3020 * _3021) + _2991) * _3006))) * _3020;
                        float _4352 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3042 = (((_2992 * 3.1415927410125732421875) * (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) / ((_3014 * _3014) * ((_2957 * 2.1991131305694580078125) + 3.141590118408203125))) * _2946;
                        _2794 = (_2961 * _2909.x) + _2867;
                        _2795 = (_2961 * _2909.y) + _2868;
                        _2796 = (_2961 * _2909.z) + _2869;
                        _2791 = (_3042 * _2926.x) + _2864;
                        _2792 = (_3042 * _2926.y) + _2865;
                        _2793 = (_3042 * _2926.z) + _2866;
                        if (_2871 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2871;
                        }
                    }
                    frontier_phi_66_pred = _2791;
                    frontier_phi_66_pred_1 = _2796;
                    frontier_phi_66_pred_2 = _2795;
                    frontier_phi_66_pred_3 = _2794;
                    frontier_phi_66_pred_4 = _2793;
                    frontier_phi_66_pred_5 = _2792;
                }
                _2567 = frontier_phi_66_pred;
                _2577 = frontier_phi_66_pred_1;
                _2575 = frontier_phi_66_pred_2;
                _2573 = frontier_phi_66_pred_3;
                _2571 = frontier_phi_66_pred_4;
                _2569 = frontier_phi_66_pred_5;
                uint _2726 = _2725 + 1u;
                if (_2726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2719 = _2567;
                    _2720 = _2569;
                    _2721 = _2571;
                    _2722 = _2573;
                    _2723 = _2575;
                    _2724 = _2577;
                    _2725 = _2726;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
        }
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.z;
        uint _2583 = (_2581 >> 8u) & 15u;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((4294967295u << _2583) & _2465) == 0u)
        {
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
            _2697 = _2576;
        }
        else
        {
            float _2712 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
            float _2713 = _2712 * _2419;
            float _2714 = _2712 * _2420;
            float _2715 = _2712 * _2421;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2583 < ((_2581 >> 12u) & 15u))
            {
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2847 = _2566;
                float _2848 = _2568;
                float _2849 = _2570;
                float _2850 = _2572;
                float _2851 = _2574;
                float _2852 = _2576;
                uint _2853 = _2583;
                uint _2862;
                bool _2863;
                for (;;)
                {
                    _2862 = texelFetch(g_lightClassification, int((((_2459 << 5u) + (_2445 << 9u)) + (_2853 << 2u)) >> 2u)).x;
                    _2863 = _2862 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2863)
                    {
                        frontier_phi_77_pred = _2852;
                        frontier_phi_77_pred_1 = _2851;
                        frontier_phi_77_pred_2 = _2850;
                        frontier_phi_77_pred_3 = _2849;
                        frontier_phi_77_pred_4 = _2848;
                        frontier_phi_77_pred_5 = _2847;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3069 = _2847;
                        float _3070 = _2848;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        uint _3075 = _2862;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3144;
                        vec4 _3160;
                        float _3206;
                        bool _3207;
                        for (;;)
                        {
                            uint _3086 = ((_2853 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3131 = (_3086 * 40u) + 16u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3147 = (_3086 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3162 = (_3086 * 40u) + 24u;
                            vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3181 = (_3086 * 40u) + 28u;
                            vec4 _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3206 = fma(_2421, _3194.z, fma(_2420, _3194.y, _3194.x * _2419)) + _3194.w;
                            _3207 = !((fma(_2421, _3175.z, fma(_2420, _3175.y, _3175.x * _2419)) + _3175.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3207)
                            {
                                float _3234 = _3101.x - _2419;
                                float _3235 = _3101.y - _2420;
                                float _3236 = _3101.z - _2421;
                                float _3237 = dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236));
                                float _3240 = inversesqrt(_3237);
                                float _3241 = _3240 * _3234;
                                float _3242 = _3240 * _3235;
                                float _3243 = _3240 * _3236;
                                float _3247 = 1.0 - (_3237 / (_3102 * _3102));
                                float _4363 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3252 = sqrt(_3237) * _3117.w;
                                float _3254 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                                float _3255 = _3254 * _3254;
                                float _3258 = ((1.0 - _3255) * dot(vec3(_3241, _3242, _3243), vec3(_693, _696, _699))) + _3255;
                                float _3261 = _3252 * _3252;
                                float _3265 = (fma(_2421, _3144.z, fma(_2420, _3144.y, _3144.x * _2419)) + _3144.w) / _3206;
                                float _3266 = (fma(_2421, _3160.z, fma(_2420, _3160.y, _3160.x * _2419)) + _3160.w) / _3206;
                                float _3270 = 1.0 - dot(vec2(_3265, _3266), vec2(_3265, _3266));
                                float _4379 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3271 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3272 = _3271 * (((isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0))) * _3248) / ((_3261 * 0.699999988079071044921875) + 1.0));
                                float _3284 = exp2(log2(1.0 / ((_3261 * 3.5) + 5.0)) * 0.25);
                                float _3285 = 1.0 - _753;
                                float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                                float _3293 = _3292 * _3292;
                                float _3294 = _3293 * _3293;
                                float _3295 = _3241 - _2713;
                                float _3296 = _3242 - _2714;
                                float _3297 = _3243 - _2715;
                                float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                                float _3305 = dot(vec3(_693, _696, _699), vec3((-0.0) - _2713, (-0.0) - _2714, (-0.0) - _2715));
                                float _4390 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3308 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3309 = dot(vec3(_693, _696, _699), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                                float _4401 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3312 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                                float _3317 = _3254 * _3293;
                                float _3318 = _3317 * _3317;
                                float _3324 = ((1.0 - _3318) * dot(vec3(_693, _696, _699), vec3(_3241, _3242, _3243))) + _3318;
                                float _4412 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3326 = 1.0 - _3293;
                                float _3336 = (0.5 / (((_3325 * ((_3308 * _3326) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3293) * _3308))) * _3325;
                                float _4423 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3346 = (_3271 * _3248) * (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) / ((_3316 * _3316) * ((_3261 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3272 * _3117.y;
                                frontier_phi_83_pred_1 = _3272 * _3117.x;
                                frontier_phi_83_pred_2 = _3346 * _3129.z;
                                frontier_phi_83_pred_3 = _3346 * _3129.y;
                                frontier_phi_83_pred_4 = _3346 * _3129.x;
                                frontier_phi_83_pred_5 = _3272 * _3117.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3354 = frontier_phi_83_pred;
                            _3353 = frontier_phi_83_pred_1;
                            _3352 = frontier_phi_83_pred_2;
                            _3351 = frontier_phi_83_pred_3;
                            _3350 = frontier_phi_83_pred_4;
                            _3355 = frontier_phi_83_pred_5;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            _3056 = _3350 + _3069;
                            _3057 = _3351 + _3070;
                            _3058 = _3352 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3061;
                        frontier_phi_77_pred_1 = _3060;
                        frontier_phi_77_pred_2 = _3059;
                        frontier_phi_77_pred_3 = _3058;
                        frontier_phi_77_pred_4 = _3057;
                        frontier_phi_77_pred_5 = _3056;
                    }
                    _2698 = frontier_phi_77_pred;
                    _2696 = frontier_phi_77_pred_1;
                    _2694 = frontier_phi_77_pred_2;
                    _2692 = frontier_phi_77_pred_3;
                    _2690 = frontier_phi_77_pred_4;
                    _2688 = frontier_phi_77_pred_5;
                    uint _2854 = _2853 + 1u;
                    if (_2854 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2847 = _2688;
                        _2848 = _2690;
                        _2849 = _2692;
                        _2850 = _2694;
                        _2851 = _2696;
                        _2852 = _2698;
                        _2853 = _2854;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2692;
                frontier_phi_58_59_ladder_1 = _2698;
                frontier_phi_58_59_ladder_2 = _2696;
                frontier_phi_58_59_ladder_3 = _2694;
                frontier_phi_58_59_ladder_4 = _2690;
                frontier_phi_58_59_ladder_5 = _2688;
            }
            else
            {
                frontier_phi_58_59_ladder = _2570;
                frontier_phi_58_59_ladder_1 = _2576;
                frontier_phi_58_59_ladder_2 = _2574;
                frontier_phi_58_59_ladder_3 = _2572;
                frontier_phi_58_59_ladder_4 = _2568;
                frontier_phi_58_59_ladder_5 = _2566;
            }
            _2687 = frontier_phi_58_59_ladder_5;
            _2689 = frontier_phi_58_59_ladder_4;
            _2691 = frontier_phi_58_59_ladder;
            _2693 = frontier_phi_58_59_ladder_3;
            _2695 = frontier_phi_58_59_ladder_2;
            _2697 = frontier_phi_58_59_ladder_1;
        }
        float _2702 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2478 = (_2702 * _2693) + _1933;
        _2480 = (_2702 * _2695) + _1935;
        _2482 = (_2702 * _2697) + _1937;
        _2484 = ((_2687 * 0.039999999105930328369140625) * _2702) + _2263;
        _2486 = ((_2689 * 0.039999999105930328369140625) * _2702) + _2265;
        _2488 = ((_2691 * 0.039999999105930328369140625) * _2702) + _2267;
    }
    else
    {
        _2478 = _1933;
        _2480 = _1935;
        _2482 = _1937;
        _2484 = _2263;
        _2486 = _2265;
        _2488 = _2267;
    }
    float _4439 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4450 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4461 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _2505 = ((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2478 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _737))) + ((_2484 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1573)) * cbPerFrame._m0[3u].x);
    float _2506 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2480 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _737))) + ((_2486 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1573)) * cbPerFrame._m0[3u].x);
    float _2507 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2482 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _737))) + ((_2488 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1573)) * cbPerFrame._m0[3u].x);
    uint _2508 = _232 + 6u;
    float _2516 = _674 / cbSceneParam._m0[86u].x;
    float _2517 = _675 / cbSceneParam._m0[86u].y;
    vec4 _2531 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2516, _2517, (log2((isnan(cbSceneParam._m0[77u].w) ? _595 : (isnan(_595) ? cbSceneParam._m0[77u].w : min(_595, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2533 = _2531.x;
    float _2534 = _2531.y;
    float _2535 = _2531.z;
    float _2536 = _2531.w;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_595 > cbSceneParam._m0[78u].w)
    {
        float _2591 = isnan(_595) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _595 : min(cbSceneParam._m0[80u].w, _595));
        float _2592 = _2591 / _595;
        float _2603 = _2592 * _647;
        float _2604 = _648 * _2592;
        float _2605 = (-0.0) - _2604;
        float _2607 = _2592 * _649;
        float _2609 = (cbSceneParam._m0[77u].w * _2605) / _2591;
        float _2610 = _2609 + cbSceneParam._m0[79u].w;
        float _2611 = cbSceneParam._m0[79u].w - _2604;
        float _2617 = sqrt(((_2603 * _2603) + (_2604 * _2604)) + (_2607 * _2607));
        float _2620 = (1.0 - (cbSceneParam._m0[77u].w / _2591)) * _2617;
        float _2625 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2627 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2804;
        if (abs((_2605 - _2609) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2804 = ((((_2610 > 0.0) ? exp2(_2625 * _2610) : (2.0 - exp2(_2627 * _2610))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2620;
        }
        else
        {
            float _2748 = 1.0 / cbSceneParam._m0[80u].x;
            float _2749 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : max(_2610, _2611));
            float _2750 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : min(_2610, _2611));
            float _2759 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : min(_2749, 0.0));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            _2804 = ((abs(_2617 / _2605) * cbSceneParam._m0[80u].y) * ((((_2759 - _2760) * 2.0) - ((exp2(_2625 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)))) - exp2(_2625 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0))))) * _2748)) - ((exp2(_2627 * _2759) - exp2(_2627 * _2760)) * _2748))) + (_2620 * cbSceneParam._m0[80u].z);
        }
        vec4 _2806 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2516, _2517, 1.0), 0.0);
        float _2815 = exp2((_2804 * (-1.44269502162933349609375)) * (1.0 - _2806.w));
        float _2816 = log2(_2815);
        float _2832 = log2(_2536);
        _2629 = (exp2(_2832 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2816 * cbSceneParam._m0[78u].x)) * _2806.x) / cbSceneParam._m0[78u].x)) + _2533;
        _2631 = (exp2(_2832 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2816 * cbSceneParam._m0[78u].y)) * _2806.y) / cbSceneParam._m0[78u].y)) + _2534;
        _2633 = (exp2(_2832 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2816 * cbSceneParam._m0[78u].z)) * _2806.z) / cbSceneParam._m0[78u].z)) + _2535;
        _2635 = _2815 * _2536;
    }
    else
    {
        _2629 = _2533;
        _2631 = _2534;
        _2633 = _2535;
        _2635 = _2536;
    }
    bool _2842;
    vec4 _2645;
    vec4 _2667;
    float _2669;
    float _2673;
    float _2674;
    float _2675;
    float _2676;
    bool _2686;
    for (;;)
    {
        _2645 = cbMatDynParam._m0[0u];
        float _2647 = roundEven(_2645.y);
        bool _2648 = _2647 == 3.0;
        float _2649 = log2(_2635);
        float _2656 = exp2(_2649 * cbSceneParam._m0[78u].x) * _2505;
        float _2657 = exp2(_2649 * cbSceneParam._m0[78u].y) * _2506;
        float _2658 = exp2(_2649 * cbSceneParam._m0[78u].z) * _2507;
        float _2665 = _663 + (-0.5);
        _2667 = cbMtdParam._m0[1u];
        _2669 = _2667.y * _2665;
        float _2672 = (_2647 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2673 = _2672 * (_2648 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2629)));
        _2674 = _2672 * (_2648 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2631)));
        _2675 = _2672 * (_2648 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2633)));
        _2676 = _2665 * 0.999000012874603271484375;
        _2686 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2686)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2676) < 0.5)
            {
                _2842 = true;
                break;
            }
        }
        uint _2783 = _712 + uint(_2645.w);
        if ((cbInstanceData._m0[_2783].w < 1.0) && ((cbInstanceData._m0[_2783].w + _2676) < 0.5))
        {
            _2842 = true;
            break;
        }
        if ((_2669 + 1.0) < _2667.x)
        {
            _2842 = true;
            break;
        }
        _2842 = false;
        break;
    }
    float _3047;
    if (_2842)
    {
        discard_state = true;
        _3047 = 0.0;
    }
    else
    {
        _3047 = cbInstanceData._m0[_2508].w;
    }
    SV_Target.x = _2673;
    SV_Target.y = _2674;
    SV_Target.z = _2675;
    SV_Target.w = _3047;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2508].w;
    discard_exit();
}


