#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1407;
float _3788;
float _3789;
float _3790;
float _3791;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3800 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3811 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3822 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3833 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _449;
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = _541.x;
    float _544 = _541.y;
    float _545 = _541.z;
    float _554 = ((_524.z - _545) * _430) + _545;
    float _557 = ((((_524.x - _543) * _430) + _543) * 2.0) + (-1.0);
    float _558 = ((((_524.y - _544) * _430) + _544) * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3844 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _564 = sqrt(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))));
    float _567 = _557 + ((((_497.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _568 = _558 + ((((_497.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _571 = fma(_564, _250, fma(_568, _257, _567 * _243));
    float _574 = fma(_564, _251, fma(_568, _258, _567 * _244));
    float _577 = fma(_564, _252, fma(_568, _259, _567 * _245));
    float _581 = inversesqrt(dot(vec3(_571, _574, _577), vec3(_571, _574, _577)));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _625 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _632 = ((_627 - _628) * cbMtdParam._m0[24u].z) + _628;
    float _634 = (cbMtdParam._m0[19u].x + dot(vec4(_581 * _571, _581 * _574, _581 * _577, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_632 * cbMtdParam._m0[21u].z);
    float _3855 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _635 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _637 = (-0.0) - cbMtdParam._m0[24u].y;
    float _639 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _639 : (isnan(_639) ? 1.0 : min(_639, 1.0));
    float _647 = _635 - ((_635 * TEXCOORD_8.x) * _640);
    float _648 = _635 - ((_635 * TEXCOORD_8.y) * _640);
    float _649 = _635 - ((_635 * TEXCOORD_8.z) * _640);
    float _656 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _660 = ((isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : min(_656, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _668 = (_660 - (((_632 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _660))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3886 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _673 = ((_647 * ((_477.x * cbMtdParam._m0[18u].x) - _456)) * _669) + _456;
    float _674 = ((_648 * ((_477.y * cbMtdParam._m0[18u].y) - _457)) * _669) + _457;
    float _675 = ((_649 * ((_477.z * cbMtdParam._m0[18u].z) - _458)) * _669) + _458;
    vec4 _687 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _689 = _687.x;
    float _690 = 1.0 - _689;
    float _715 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_689 - _690) * cbMtdParam._m0[24u].w) + _690) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3897 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _724 = ((((cbMtdParam._m0[10u].x - _673) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _716) + _673;
    float _725 = ((((cbMtdParam._m0[10u].y - _674) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _716) + _674;
    float _726 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _675)) * _716) + _675;
    float _731 = (((_497.z - _554) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _554;
    vec4 _745 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _752 = (_745.x * 2.0) + (-1.0);
    float _753 = (_745.y * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3908 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _763 = (((_745.z - _731) * _647) * _669) + _731;
    float _766 = ((cbMtdParam._m0[23u].y - _763) * _716) + _763;
    vec4 _785 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _791 = (_785.x * 2.0) + (-1.0);
    float _792 = (_785.y * 2.0) + (-1.0);
    float _793 = dot(vec2(_791, _792), vec2(_791, _792));
    float _3919 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _813 = (((cbMtdParam._m0[21u].x * _567) + ((_752 - _567) * _647)) * _669) + _567;
    float _814 = (((cbMtdParam._m0[21u].x * _568) + ((_753 - _568) * _648)) * _669) + _568;
    float _815 = (((sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) - _564) * _649) * _669) + _564;
    float _826 = (((_791 - _813) + (_813 * cbMtdParam._m0[22u].z)) * _716) + _813;
    float _827 = (((_792 - _814) + (_814 * cbMtdParam._m0[22u].z)) * _716) + _814;
    float _828 = ((sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _815) * _716) + _815;
    float _832 = cbMtdParam._m0[22u].x + _597.w;
    float _835 = fma(_828, _250, fma(_827, _257, _826 * _243));
    float _838 = fma(_828, _251, fma(_827, _258, _826 * _244));
    float _841 = fma(_828, _252, fma(_827, _259, _826 * _245));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _3930 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _849 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _3952 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3963 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _3974 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _867 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _908);
    float _919 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    vec4 _932 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _934 = _932.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1088 = sqrt(((_918 * _918) + (_919 * _919)) + (_920 * _920));
        float _1094 = (cbMatDynParam._m0[5u].x * _1088) + cbMatDynParam._m0[5u].y;
        float _3985 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1099 = (cbMatDynParam._m0[5u].z * _1088) + cbMatDynParam._m0[5u].w;
        float _3996 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) - _1095)) + _1095) < ((_934 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _964 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _967 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _970 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _983 = _281 + 9u;
    uint _984 = _983 + uint(cbMatDynParam._m0[0u].w);
    float _990 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_984].x;
    float _991 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_984].y;
    float _992 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_984].z;
    float _4007 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    vec4 _1004 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1008 = ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * TEXCOORD_5.w) * _1004.x;
    float _1009 = dot(vec3(_846, _847, _848), vec3(_925, _926, _927));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _846) - _925;
    float _1017 = (_1012 * _847) - _926;
    float _1018 = (_1012 * _848) - _927;
    float _1022 = abs(dot(vec3(_925, _926, _927), vec3(_846, _847, _848)));
    float _4040 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_849);
    float _1037 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1069 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1073 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1077, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069));
        float _1135 = fma(_1077, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069));
        float _1139 = fma(_1077, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069));
        float _1164 = _1069 + _846;
        float _1165 = _1073 + _847;
        float _1166 = _1077 + _848;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1131;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1135;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1139;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_846, _847, _848), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4088 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_846, _847, _848), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4121 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_846, _847, _848), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4154 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1449 = fma(_1077, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1069));
        float _1453 = fma(_1077, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1069));
        float _1457 = fma(_1077, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1069));
        float _1480 = _1069 + _846;
        float _1481 = _1073 + _847;
        float _1482 = _1077 + _848;
        float _1492 = fma(_1482, cbModelParam._m0[30u].z, fma(_1481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1480)) - _1449;
        float _1493 = fma(_1482, cbModelParam._m0[31u].z, fma(_1481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1480)) - _1453;
        float _1494 = fma(_1482, cbModelParam._m0[32u].z, fma(_1481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1480)) - _1457;
        float _1498 = inversesqrt(dot(vec3(_1492, _1493, _1494), vec3(_1492, _1493, _1494)));
        float _1511 = ((_1498 * _1492) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1449 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1498 * _1493) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1453 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1498 * _1494) / cbModelParam._m0[35u].z) + ((((((_1457 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1511, _1512, _1513), 0.0);
        float _1548 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1515.x + (-0.5));
        float _1550 = _1548 * (_1515.y + (-0.5));
        float _1551 = _1548 * (_1515.z + (-0.5));
        float _1558 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1522.x + (-0.5));
        float _1560 = _1558 * (_1522.y + (-0.5));
        float _1561 = _1558 * (_1522.z + (-0.5));
        float _1568 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1529.x + (-0.5));
        float _1570 = _1568 * (_1529.y + (-0.5));
        float _1571 = _1568 * (_1529.z + (-0.5));
        float _1578 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1536.x + (-0.5));
        float _1580 = _1578 * (_1536.y + (-0.5));
        float _1581 = _1578 * (_1536.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1601 = (dot(vec3(_846, _847, _848), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1610 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4217 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1612 + 1.0))) + _1617) * _1582;
        float _1627 = _1550 * 0.5;
        float _1628 = _1560 * 0.5;
        float _1629 = _1570 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_846, _847, _848), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4250 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1654 + 1.0))) + _1659) * _1583;
        float _1669 = _1551 * 0.5;
        float _1670 = _1561 * 0.5;
        float _1671 = _1571 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_846, _847, _848), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4283 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1696 + 1.0))) + _1701) * _1584;
        _1718 = _1551;
        _1719 = _1550;
        _1720 = _1549;
        _1721 = _1561;
        _1722 = _1560;
        _1723 = _1559;
        _1724 = _1571;
        _1725 = _1570;
        _1726 = _1569;
        _1727 = _1584;
        _1728 = _1583;
        _1729 = _1582;
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1407;
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = _1407;
        _1729 = _1407;
        _1730 = 0.0;
        _1731 = 0.0;
        _1732 = 0.0;
    }
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1419)) + _1419;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1420)) + _1420;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1421)) + _1421;
    float _1765 = fma(_1744, cbSceneParam._m0[89u].z, fma(_1743, cbSceneParam._m0[89u].y, _1742 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1744, cbSceneParam._m0[90u].z, fma(_1743, cbSceneParam._m0[90u].y, _1742 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1744, cbSceneParam._m0[91u].z, fma(_1743, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1742));
    float _1786 = _1016 * 0.5;
    float _1787 = _1017 * 0.5;
    float _1788 = _1018 * 0.5;
    float _1789 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1792 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1795 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1829;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1802 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1806 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1810 = dot(vec4(_1786, _1787, _1788, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1817 = dot(vec4(cbModelParam._m0[39u]), vec4(_1786, _1787, _1788, 1.0));
        _1829 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1817) ? 0.0 : (isnan(0.0) ? _1817 : max(0.0, _1817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1829 = 1.0;
    }
    float _1840;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1831 = dot(vec4(cbModelParam._m0[40u]), vec4(_1786, _1787, _1788, 1.0));
        _1840 = dot(vec3(isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0)), isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1840 = 1.0;
    }
    float _1844 = (_1840 * cbModelParam._m0[1u].x) + (_1829 * (1.0 - cbModelParam._m0[1u].x));
    float _1854 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1854 : min(cbModelParam._m0[25u].z, _1854));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1902 = fma(_1077, cbModelParam._m0[13u].z, fma(_1073, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069)) + cbModelParam._m0[13u].w;
        float _1906 = fma(_1077, cbModelParam._m0[14u].z, fma(_1073, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069)) + cbModelParam._m0[14u].w;
        float _1910 = fma(_1077, cbModelParam._m0[15u].z, fma(_1073, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069)) + cbModelParam._m0[15u].w;
        float _1913 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1916 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1919 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1947;
        if (_1913 > 0.0)
        {
            _1947 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1947 = frontier_phi_17_15_ladder;
        }
        float _2168;
        if (_1916 > 0.0)
        {
            _2168 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2168 = frontier_phi_26_22_ladder;
        }
        float _2414;
        if (_1919 > 0.0)
        {
            _2414 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2414 = frontier_phi_38_33_ladder;
        }
        float _2416 = isnan(_2168) ? _1947 : (isnan(_1947) ? _2168 : min(_1947, _2168));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1913) + _1902;
        float _2422 = (_2417 * _1916) + _1906;
        float _2423 = (_2417 * _1919) + _1910;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1855);
            frontier_phi_16_38_ladder = _2547.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2547.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2547.x * cbModelParam._m0[1u].y;
        }
        _1935 = frontier_phi_16_38_ladder_2;
        _1937 = frontier_phi_16_38_ladder_1;
        _1939 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1855);
        _1935 = _1923.x * cbModelParam._m0[1u].y;
        _1937 = _1923.y * cbModelParam._m0[1u].y;
        _1939 = _1923.z * cbModelParam._m0[1u].y;
    }
    float _1943 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1943 : min(cbModelParam._m0[25u].w, _1943));
    float _2033;
    float _2035;
    float _2037;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1997 = fma(_1077, cbModelParam._m0[21u].z, fma(_1073, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069)) + cbModelParam._m0[21u].w;
        float _2001 = fma(_1077, cbModelParam._m0[22u].z, fma(_1073, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069)) + cbModelParam._m0[22u].w;
        float _2005 = fma(_1077, cbModelParam._m0[23u].z, fma(_1073, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069)) + cbModelParam._m0[23u].w;
        float _2008 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2011 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2014 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2173;
        if (_2008 > 0.0)
        {
            _2173 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2173 = frontier_phi_28_24_ladder;
        }
        float _2441;
        if (_2011 > 0.0)
        {
            _2441 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2441 = frontier_phi_40_35_ladder;
        }
        float _2646;
        if (_2014 > 0.0)
        {
            _2646 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2646 = frontier_phi_49_46_ladder;
        }
        float _2648 = isnan(_2441) ? _2173 : (isnan(_2173) ? _2441 : min(_2173, _2441));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _2008) + _1997;
        float _2654 = (_2649 * _2011) + _2001;
        float _2655 = (_2649 * _2014) + _2005;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2656;
        float _2659 = _2656 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2655 > _2659) || ((_2655 < _2657) || ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 < _2657) || (_2653 > _2659))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2854 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2655, cbModelParam._m0[17u].z, fma(_2654, cbModelParam._m0[17u].y, _2653 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2655, cbModelParam._m0[18u].z, fma(_2654, cbModelParam._m0[18u].y, _2653 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2655, cbModelParam._m0[19u].z, fma(_2654, cbModelParam._m0[19u].y, _2653 * cbModelParam._m0[19u].x))), _1944);
            frontier_phi_25_49_ladder = _2854.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2854.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2854.x * cbModelParam._m0[1u].z;
        }
        _2033 = frontier_phi_25_49_ladder_2;
        _2035 = frontier_phi_25_49_ladder_1;
        _2037 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1944);
        _2033 = _2017.x * cbModelParam._m0[1u].z;
        _2035 = _2017.y * cbModelParam._m0[1u].z;
        _2037 = _2017.z * cbModelParam._m0[1u].z;
    }
    float _2049 = ((((1.0 - _1037) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1037 * _1024)) * _1008;
    float _2050 = _2049 * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2051 = _2049 * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2052 = _2049 * ((cbModelParam._m0[1u].w * (_2037 - _1939)) + _1939);
    float _2055 = fma(_2052, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2050 * cbSceneParam._m0[89u].x));
    float _2058 = fma(_2052, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2050 * cbSceneParam._m0[90u].x));
    float _2061 = fma(_2052, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, _2050 * cbSceneParam._m0[91u].x));
    vec4 _2069 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_945, _946));
    float _2071 = _2069.w;
    float _2083 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2071);
    float _2084 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2071);
    float _2085 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2071);
    uvec4 _2089 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2091 = _2089.x * 14u;
    uint _2092 = _2091 + 13u;
    float _2099 = _1008 + (-1.0);
    float _2104 = (cbLight._m0[_2092].x * _2099) + 1.0;
    float _2105 = (cbLight._m0[_2092].y * _2099) + 1.0;
    float _2106 = (cbLight._m0[_2092].z * _2099) + 1.0;
    float _2107 = (cbLight._m0[_2092].w * _2099) + 1.0;
    uint _2108 = _2091 + 5u;
    float _2114 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2118 = _2091 + 4u;
    float _2127 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
    uint _2131 = _2091 | 1u;
    float _2142 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_846, _847, _848));
    float _2145 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_846, _847, _848));
    float _4419 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _4430 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2150 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * 0.3183098733425140380859375;
    float _2152 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * 0.3183098733425140380859375;
    float _2159 = ((cbLight._m0[_2108].x * _2114) * _2152) + (((cbLight._m0[_2118].x * _2083) * _2127) * _2150);
    float _2160 = ((_2114 * cbLight._m0[_2108].y) * _2152) + (((cbLight._m0[_2118].y * _2084) * _2127) * _2150);
    float _2161 = ((_2114 * cbLight._m0[_2108].z) * _2152) + (((cbLight._m0[_2118].z * _2085) * _2127) * _2150);
    uvec4 _2165 = floatBitsToUint(cbLight._m0[_2091 + 12u]);
    bool _2167 = _2165.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2167)
    {
        _2178 = _2159;
        _2180 = _2160;
        _2182 = _2161;
    }
    else
    {
        uint _2186 = _2091 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_2091 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4441 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2205 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2159;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2160;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2161;
    }
    bool _2185 = _2165.y == 0u;
    float _2223;
    float _2225;
    float _2227;
    if (_2185)
    {
        _2223 = _2178;
        _2225 = _2180;
        _2227 = _2182;
    }
    else
    {
        uint _2385 = _2091 + 7u;
        float _2401 = (dot(vec3(cbLight._m0[_2091 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2402 = _2401 * _2401;
        float _4457 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2403 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2404 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2223 = (((cbLight._m0[_2385].x * 0.3183098733425140380859375) * _2403) * _2404) + _2178;
        _2225 = (((cbLight._m0[_2385].y * 0.3183098733425140380859375) * _2403) * _2404) + _2180;
        _2227 = (((cbLight._m0[_2385].z * 0.3183098733425140380859375) * _2403) * _2404) + _2182;
    }
    uint _2230 = _2091 + 8u;
    float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _849) * 0.949999988079071044921875);
    float _2244 = _2243 * _2243;
    float _2245 = cbLight._m0[_2091].x + _925;
    float _2246 = cbLight._m0[_2091].y + _926;
    float _2247 = cbLight._m0[_2091].z + _927;
    float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
    float _2252 = _2251 * _2245;
    float _2253 = _2251 * _2246;
    float _2254 = _2251 * _2247;
    float _2255 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2091].xyz));
    float _4473 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _4484 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2259 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2260 = dot(vec3(_846, _847, _848), vec3(_2252, _2253, _2254));
    float _4495 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2264 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2252, _2253, _2254));
    float _4506 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2268 = _2244 * _2244;
    float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
    float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2284 = 1.0 - _2244;
    float _2295 = (0.5 / (((_2259 * ((_2258 * _2284) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2284) + _2244) * _2258))) * _2258;
    float _4517 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
    uint _2311 = _2091 + 9u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2131].w)) * _849) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2131].x + _925;
    float _2325 = cbLight._m0[_2131].y + _926;
    float _2326 = cbLight._m0[_2131].z + _927;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2131].xyz));
    float _4528 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _2338 = dot(vec3(_846, _847, _848), vec3(_2331, _2332, _2333));
    float _4539 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2342 = dot(vec3(cbLight._m0[_2131].xyz), vec3(_2331, _2332, _2333));
    float _4550 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2346 = _2323 * _2323;
    float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
    float _2359 = (exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2360 = 1.0 - _2323;
    float _2370 = (0.5 / (((_2259 * ((_2337 * _2360) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2360) + _2323) * _2337))) * _2337;
    float _4561 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
    float _2382 = (((_2359 * cbLight._m0[_2311].x) * _2372) * _2114) + ((((cbLight._m0[_2230].x * _2083) * _2283) * _2297) * _2127);
    float _2383 = (((_2359 * cbLight._m0[_2311].y) * _2372) * _2114) + ((((cbLight._m0[_2230].y * _2084) * _2283) * _2297) * _2127);
    float _2384 = (((_2359 * cbLight._m0[_2311].z) * _2372) * _2114) + ((((cbLight._m0[_2230].z * _2085) * _2283) * _2297) * _2127);
    float _2446;
    float _2448;
    float _2450;
    if (_2167)
    {
        _2446 = _2382;
        _2448 = _2383;
        _2450 = _2384;
    }
    else
    {
        uint _2452 = _2091 + 2u;
        uint _2456 = _2091 + 10u;
        float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2452].w)) * _849) * 0.949999988079071044921875);
        float _2471 = _2470 * _2470;
        float _2472 = cbLight._m0[_2452].x + _925;
        float _2473 = cbLight._m0[_2452].y + _926;
        float _2474 = cbLight._m0[_2452].z + _927;
        float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
        float _2479 = _2478 * _2472;
        float _2480 = _2478 * _2473;
        float _2481 = _2478 * _2474;
        float _2482 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2452].xyz));
        float _4572 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2485 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _2486 = dot(vec3(_846, _847, _848), vec3(_2479, _2480, _2481));
        float _4583 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2489 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2490 = dot(vec3(cbLight._m0[_2452].xyz), vec3(_2479, _2480, _2481));
        float _4594 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2494 = _2471 * _2471;
        float _2498 = ((_2489 * _2489) * (_2494 + (-1.0))) + 1.0;
        float _2507 = (exp2(log2(1.0 - (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2508 = 1.0 - _2471;
        float _2518 = (0.5 / (((_2259 * ((_2485 * _2508) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2508) + _2471) * _2485))) * _2485;
        float _4605 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2520 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2494 / ((_2498 * _2498) * 3.141590118408203125));
        float _2521 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
        _2446 = (((_2507 * cbLight._m0[_2456].x) * _2520) * _2521) + _2382;
        _2448 = (((_2507 * cbLight._m0[_2456].y) * _2520) * _2521) + _2383;
        _2450 = (((_2507 * cbLight._m0[_2456].z) * _2520) * _2521) + _2384;
    }
    float _2556;
    float _2558;
    float _2560;
    if (_2185)
    {
        _2556 = _2446;
        _2558 = _2448;
        _2560 = _2450;
    }
    else
    {
        uint _2567 = _2091 + 3u;
        uint _2571 = _2091 + 11u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _849) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _925;
        float _2588 = cbLight._m0[_2567].y + _926;
        float _2589 = cbLight._m0[_2567].z + _927;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2567].xyz));
        float _4621 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2601 = dot(vec3(_846, _847, _848), vec3(_2594, _2595, _2596));
        float _4632 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4643 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2622 = (exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2623 = 1.0 - _2586;
        float _2633 = (0.5 / (((_2259 * ((_2600 * _2623) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2259 * _2623) + _2586) * _2600))) * _2600;
        float _4654 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2635 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2636 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2556 = (((_2622 * cbLight._m0[_2571].x) * _2635) * _2636) + _2446;
        _2558 = (((_2622 * cbLight._m0[_2571].y) * _2635) * _2636) + _2448;
        _2560 = (((_2622 * cbLight._m0[_2571].z) * _2635) * _2636) + _2450;
    }
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_2089.y == 0u)
    {
        float _2711 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2712 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2711;
        float _2713 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2711;
        float _2714 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2711;
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.x;
        uint _2738 = uint((float(_2726.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _2727))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _2727)));
        float _2748 = (log2(_2714 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2749 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        uint _2752 = uint(isnan(14.0) ? _2749 : (isnan(_2749) ? 14.0 : min(_2749, 14.0)));
        uvec4 _2757 = texelFetch(g_lightClusterGridBuffer, int(((_2752 << 2u) + (_2738 << 6u)) >> 2u));
        uint _2758 = _2757.x;
        uint _2759 = _2726.z;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((((1u << ((_2759 >> 4u) & 15u)) + 4294967295u) & _2758) == 0u) || ((_2759 & 240u) == 0u))
        {
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
        }
        else
        {
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            float _3015 = 0.0;
            float _3016 = 0.0;
            uint _3017 = 0u;
            uint _3026;
            bool _3027;
            for (;;)
            {
                _3026 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                _3027 = _3026 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3027)
                {
                    frontier_phi_66_pred = _3011;
                    frontier_phi_66_pred_1 = _3016;
                    frontier_phi_66_pred_2 = _3015;
                    frontier_phi_66_pred_3 = _3014;
                    frontier_phi_66_pred_4 = _3013;
                    frontier_phi_66_pred_5 = _3012;
                }
                else
                {
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    uint _3162;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3014;
                    _3160 = _3015;
                    _3161 = _3016;
                    _3162 = _3026;
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    for (;;)
                    {
                        uint _3166 = uint(findLSB(_3162)) + (_3017 << 5u);
                        uint _3163 = (_3162 + 4294967295u) & _3162;
                        uint _3168 = _3166 * 48u;
                        vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3188 = (_3166 * 48u) + 4u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3188)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3188 + 3u)).x));
                        uint _3207 = (_3166 * 48u) + 8u;
                        vec3 _3218 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x));
                        float _3222 = _3182.x - _2712;
                        float _3223 = _3182.y - _2713;
                        float _3224 = _3182.z - _2714;
                        float _3225 = dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224));
                        float _3228 = inversesqrt(_3225);
                        float _3229 = _3228 * _3222;
                        float _3230 = _3228 * _3223;
                        float _3231 = _3228 * _3224;
                        float _3232 = dot(vec3(_964, _967, _970), vec3(_3229, _3230, _3231));
                        float _3237 = 1.0 - (_3225 * _3182.w);
                        float _4680 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3239 = sqrt(_3225) * _3201.w;
                        float _3242 = 1.39999997615814208984375 / (_3239 + 1.39999997615814208984375);
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3232) + _3243;
                        float _3249 = _3239 * _3239;
                        float _3253 = ((isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0))) * _3238) / ((_3249 * 0.699999988079071044921875) + 1.0);
                        float _3257 = (-0.0) - _2712;
                        float _3258 = (-0.0) - _2713;
                        float _3259 = (-0.0) - _2714;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3264 = _3263 * _3257;
                        float _3265 = _3263 * _3258;
                        float _3266 = _3263 * _3259;
                        float _3274 = exp2(log2(1.0 / ((_3249 * 3.5) + 5.0)) * 0.25);
                        float _3275 = 1.0 - _1024;
                        float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                        float _3283 = _3282 * _3282;
                        float _3284 = _3283 * _3283;
                        float _3285 = _3264 + _3229;
                        float _3286 = _3265 + _3230;
                        float _3287 = _3266 + _3231;
                        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                        float _3295 = dot(vec3(_964, _967, _970), vec3(_3264, _3265, _3266));
                        float _4696 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                        float _3299 = dot(vec3(_964, _967, _970), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                        float _4707 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                        float _3307 = _3242 * _3283;
                        float _3308 = _3307 * _3307;
                        float _3311 = ((1.0 - _3308) * _3232) + _3308;
                        float _4718 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3312 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3313 = 1.0 - _3283;
                        float _3323 = (0.5 / (((_3312 * ((_3298 * _3313) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3312 * _3313) + _3283) * _3298))) * _3312;
                        float _4729 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3334 = (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) / ((_3306 * _3306) * ((_3249 * 2.1991131305694580078125) + 3.141590118408203125))) * _3238;
                        _3086 = (_3253 * _3201.x) + _3159;
                        _3087 = (_3253 * _3201.y) + _3160;
                        _3088 = (_3253 * _3201.z) + _3161;
                        _3083 = (_3334 * _3218.x) + _3156;
                        _3084 = (_3334 * _3218.y) + _3157;
                        _3085 = (_3334 * _3218.z) + _3158;
                        if (_3163 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3086;
                            _3160 = _3087;
                            _3161 = _3088;
                            _3162 = _3163;
                        }
                    }
                    frontier_phi_66_pred = _3083;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                _2860 = frontier_phi_66_pred;
                _2870 = frontier_phi_66_pred_1;
                _2868 = frontier_phi_66_pred_2;
                _2866 = frontier_phi_66_pred_3;
                _2864 = frontier_phi_66_pred_4;
                _2862 = frontier_phi_66_pred_5;
                uint _3018 = _3017 + 1u;
                if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3011 = _2860;
                    _3012 = _2862;
                    _3013 = _2864;
                    _3014 = _2866;
                    _3015 = _2868;
                    _3016 = _2870;
                    _3017 = _3018;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
        }
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.z;
        uint _2876 = (_2874 >> 8u) & 15u;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        float _2989;
        if (((4294967295u << _2876) & _2758) == 0u)
        {
            _2979 = _2859;
            _2981 = _2861;
            _2983 = _2863;
            _2985 = _2865;
            _2987 = _2867;
            _2989 = _2869;
        }
        else
        {
            float _3004 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
            float _3005 = _3004 * _2712;
            float _3006 = _3004 * _2713;
            float _3007 = _3004 * _2714;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2876 < ((_2874 >> 12u) & 15u))
            {
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _2990;
                float _3139 = _2859;
                float _3140 = _2861;
                float _3141 = _2863;
                float _3142 = _2865;
                float _3143 = _2867;
                float _3144 = _2869;
                uint _3145 = _2876;
                uint _3154;
                bool _3155;
                for (;;)
                {
                    _3154 = texelFetch(g_lightClassification, int((((_2752 << 5u) + (_2738 << 9u)) + (_3145 << 2u)) >> 2u)).x;
                    _3155 = _3154 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3155)
                    {
                        frontier_phi_77_pred = _3144;
                        frontier_phi_77_pred_1 = _3143;
                        frontier_phi_77_pred_2 = _3142;
                        frontier_phi_77_pred_3 = _3141;
                        frontier_phi_77_pred_4 = _3140;
                        frontier_phi_77_pred_5 = _3139;
                    }
                    else
                    {
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        float _3364 = _3142;
                        float _3365 = _3143;
                        float _3366 = _3144;
                        uint _3367 = _3154;
                        uint _3368;
                        vec4 _3393;
                        float _3394;
                        vec4 _3409;
                        vec3 _3421;
                        vec4 _3436;
                        vec4 _3451;
                        float _3497;
                        bool _3498;
                        for (;;)
                        {
                            uint _3378 = ((_3145 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3367));
                            _3368 = (_3367 + 4294967295u) & _3367;
                            uint _3380 = _3378 * 40u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            _3394 = _3393.w;
                            uint _3396 = (_3378 * 40u) + 4u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3378 * 40u) + 8u;
                            _3421 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x));
                            uint _3423 = (_3378 * 40u) + 16u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3378 * 40u) + 20u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3378 * 40u) + 24u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3472 = (_3378 * 40u) + 28u;
                            vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            _3497 = fma(_2714, _3485.z, fma(_2713, _3485.y, _3485.x * _2712)) + _3485.w;
                            _3498 = !((fma(_2714, _3466.z, fma(_2713, _3466.y, _3466.x * _2712)) + _3466.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3498)
                            {
                                float _3525 = _3393.x - _2712;
                                float _3526 = _3393.y - _2713;
                                float _3527 = _3393.z - _2714;
                                float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                                float _3531 = inversesqrt(_3528);
                                float _3532 = _3531 * _3525;
                                float _3533 = _3531 * _3526;
                                float _3534 = _3531 * _3527;
                                float _3538 = 1.0 - (_3528 / (_3394 * _3394));
                                float _4740 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3543 = sqrt(_3528) * _3409.w;
                                float _3545 = 1.39999997615814208984375 / (_3543 + 1.39999997615814208984375);
                                float _3546 = _3545 * _3545;
                                float _3549 = ((1.0 - _3546) * dot(vec3(_3532, _3533, _3534), vec3(_964, _967, _970))) + _3546;
                                float _3552 = _3543 * _3543;
                                float _3556 = (fma(_2714, _3436.z, fma(_2713, _3436.y, _3436.x * _2712)) + _3436.w) / _3497;
                                float _3557 = (fma(_2714, _3451.z, fma(_2713, _3451.y, _3451.x * _2712)) + _3451.w) / _3497;
                                float _3561 = 1.0 - dot(vec2(_3556, _3557), vec2(_3556, _3557));
                                float _4756 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3563 = _3562 * (((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3539) / ((_3552 * 0.699999988079071044921875) + 1.0));
                                float _3575 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                                float _3576 = 1.0 - _1024;
                                float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                                float _3584 = _3583 * _3583;
                                float _3585 = _3584 * _3584;
                                float _3586 = _3532 - _3005;
                                float _3587 = _3533 - _3006;
                                float _3588 = _3534 - _3007;
                                float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                                float _3596 = dot(vec3(_964, _967, _970), vec3((-0.0) - _3005, (-0.0) - _3006, (-0.0) - _3007));
                                float _4767 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3600 = dot(vec3(_964, _967, _970), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                                float _4778 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                                float _3608 = _3545 * _3584;
                                float _3609 = _3608 * _3608;
                                float _3615 = ((1.0 - _3609) * dot(vec3(_964, _967, _970), vec3(_3532, _3533, _3534))) + _3609;
                                float _4789 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3617 = 1.0 - _3584;
                                float _3627 = (0.5 / (((_3616 * ((_3599 * _3617) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3616 * _3617) + _3584) * _3599))) * _3616;
                                float _4800 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3637 = (_3562 * _3539) * (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) / ((_3607 * _3607) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3563 * _3409.y;
                                frontier_phi_83_pred_1 = _3563 * _3409.x;
                                frontier_phi_83_pred_2 = _3637 * _3421.z;
                                frontier_phi_83_pred_3 = _3637 * _3421.y;
                                frontier_phi_83_pred_4 = _3637 * _3421.x;
                                frontier_phi_83_pred_5 = _3563 * _3409.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3645 = frontier_phi_83_pred;
                            _3644 = frontier_phi_83_pred_1;
                            _3643 = frontier_phi_83_pred_2;
                            _3642 = frontier_phi_83_pred_3;
                            _3641 = frontier_phi_83_pred_4;
                            _3646 = frontier_phi_83_pred_5;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            _3348 = _3641 + _3361;
                            _3349 = _3642 + _3362;
                            _3350 = _3643 + _3363;
                            if (_3368 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3368;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3353;
                        frontier_phi_77_pred_1 = _3352;
                        frontier_phi_77_pred_2 = _3351;
                        frontier_phi_77_pred_3 = _3350;
                        frontier_phi_77_pred_4 = _3349;
                        frontier_phi_77_pred_5 = _3348;
                    }
                    _2990 = frontier_phi_77_pred;
                    _2988 = frontier_phi_77_pred_1;
                    _2986 = frontier_phi_77_pred_2;
                    _2984 = frontier_phi_77_pred_3;
                    _2982 = frontier_phi_77_pred_4;
                    _2980 = frontier_phi_77_pred_5;
                    uint _3146 = _3145 + 1u;
                    if (_3146 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3139 = _2980;
                        _3140 = _2982;
                        _3141 = _2984;
                        _3142 = _2986;
                        _3143 = _2988;
                        _3144 = _2990;
                        _3145 = _3146;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2984;
                frontier_phi_58_59_ladder_1 = _2990;
                frontier_phi_58_59_ladder_2 = _2988;
                frontier_phi_58_59_ladder_3 = _2986;
                frontier_phi_58_59_ladder_4 = _2982;
                frontier_phi_58_59_ladder_5 = _2980;
            }
            else
            {
                frontier_phi_58_59_ladder = _2863;
                frontier_phi_58_59_ladder_1 = _2869;
                frontier_phi_58_59_ladder_2 = _2867;
                frontier_phi_58_59_ladder_3 = _2865;
                frontier_phi_58_59_ladder_4 = _2861;
                frontier_phi_58_59_ladder_5 = _2859;
            }
            _2979 = frontier_phi_58_59_ladder_5;
            _2981 = frontier_phi_58_59_ladder_4;
            _2983 = frontier_phi_58_59_ladder;
            _2985 = frontier_phi_58_59_ladder_3;
            _2987 = frontier_phi_58_59_ladder_2;
            _2989 = frontier_phi_58_59_ladder_1;
        }
        float _2994 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _2771 = (_2994 * _2985) + _2223;
        _2773 = (_2994 * _2987) + _2225;
        _2775 = (_2994 * _2989) + _2227;
        _2777 = ((_2979 * 0.039999999105930328369140625) * _2994) + _2556;
        _2779 = ((_2981 * 0.039999999105930328369140625) * _2994) + _2558;
        _2781 = ((_2983 * 0.039999999105930328369140625) * _2994) + _2560;
    }
    else
    {
        _2771 = _2223;
        _2773 = _2225;
        _2775 = _2227;
        _2777 = _2556;
        _2779 = _2558;
        _2781 = _2560;
    }
    float _4816 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _4827 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4838 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2798 = ((isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2771 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1008))) + ((_2777 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    float _2799 = ((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2773 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1008))) + ((_2779 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    float _2800 = ((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2775 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1008))) + ((_2781 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1844)) * cbPerFrame._m0[3u].x);
    uint _2801 = _281 + 6u;
    float _2809 = _945 / cbSceneParam._m0[86u].x;
    float _2810 = _946 / cbSceneParam._m0[86u].y;
    vec4 _2824 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, (log2((isnan(cbSceneParam._m0[77u].w) ? _867 : (isnan(_867) ? cbSceneParam._m0[77u].w : min(_867, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2826 = _2824.x;
    float _2827 = _2824.y;
    float _2828 = _2824.z;
    float _2829 = _2824.w;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_867 > cbSceneParam._m0[78u].w)
    {
        float _2884 = isnan(_867) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _867 : min(cbSceneParam._m0[80u].w, _867));
        float _2885 = _2884 / _867;
        float _2896 = _2885 * _918;
        float _2897 = _919 * _2885;
        float _2898 = (-0.0) - _2897;
        float _2899 = _2885 * _920;
        float _2901 = (cbSceneParam._m0[77u].w * _2898) / _2884;
        float _2902 = _2901 + cbSceneParam._m0[79u].w;
        float _2903 = cbSceneParam._m0[79u].w - _2897;
        float _2909 = sqrt(((_2896 * _2896) + (_2897 * _2897)) + (_2899 * _2899));
        float _2912 = (1.0 - (cbSceneParam._m0[77u].w / _2884)) * _2909;
        float _2917 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2919 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3096;
        if (abs((_2898 - _2901) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3096 = ((((_2902 > 0.0) ? exp2(_2917 * _2902) : (2.0 - exp2(_2919 * _2902))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2912;
        }
        else
        {
            float _3040 = 1.0 / cbSceneParam._m0[80u].x;
            float _3041 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : max(_2902, _2903));
            float _3042 = isnan(_2903) ? _2902 : (isnan(_2902) ? _2903 : min(_2902, _2903));
            float _3051 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : min(_3041, 0.0));
            float _3052 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : min(_3042, 0.0));
            _3096 = ((abs(_2909 / _2898) * cbSceneParam._m0[80u].y) * ((((_3051 - _3052) * 2.0) - ((exp2(_2917 * (isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0)))) - exp2(_2917 * (isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))))) * _3040)) - ((exp2(_2919 * _3051) - exp2(_2919 * _3052)) * _3040))) + (_2912 * cbSceneParam._m0[80u].z);
        }
        vec4 _3098 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2809, _2810, 1.0), 0.0);
        float _3107 = exp2((_3096 * (-1.44269502162933349609375)) * (1.0 - _3098.w));
        float _3108 = log2(_3107);
        float _3124 = log2(_2829);
        _2921 = (exp2(_3124 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].x)) * _3098.x) / cbSceneParam._m0[78u].x)) + _2826;
        _2923 = (exp2(_3124 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].y)) * _3098.y) / cbSceneParam._m0[78u].y)) + _2827;
        _2925 = (exp2(_3124 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3108 * cbSceneParam._m0[78u].z)) * _3098.z) / cbSceneParam._m0[78u].z)) + _2828;
        _2927 = _3107 * _2829;
    }
    else
    {
        _2921 = _2826;
        _2923 = _2827;
        _2925 = _2828;
        _2927 = _2829;
    }
    bool _3134;
    vec4 _2937;
    vec4 _2959;
    float _2961;
    float _2965;
    float _2966;
    float _2967;
    float _2968;
    bool _2978;
    for (;;)
    {
        _2937 = cbMatDynParam._m0[0u];
        float _2939 = roundEven(_2937.y);
        bool _2940 = _2939 == 3.0;
        float _2941 = log2(_2927);
        float _2948 = exp2(_2941 * cbSceneParam._m0[78u].x) * _2798;
        float _2949 = exp2(_2941 * cbSceneParam._m0[78u].y) * _2799;
        float _2950 = exp2(_2941 * cbSceneParam._m0[78u].z) * _2800;
        float _2957 = _934 + (-0.5);
        _2959 = cbMtdParam._m0[1u];
        _2961 = _2959.y * _2957;
        float _2964 = (_2939 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2965 = _2964 * (_2940 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2921)));
        _2966 = _2964 * (_2940 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2923)));
        _2967 = _2964 * (_2940 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2925)));
        _2968 = _2957 * 0.999000012874603271484375;
        _2978 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2978)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2968) < 0.5)
            {
                _3134 = true;
                break;
            }
        }
        uint _3075 = _983 + uint(_2937.w);
        if ((cbInstanceData._m0[_3075].w < 1.0) && ((cbInstanceData._m0[_3075].w + _2968) < 0.5))
        {
            _3134 = true;
            break;
        }
        if ((_2961 + 1.0) < _2959.x)
        {
            _3134 = true;
            break;
        }
        _3134 = false;
        break;
    }
    float _3339;
    if (_3134)
    {
        discard_state = true;
        _3339 = 0.0;
    }
    else
    {
        _3339 = cbInstanceData._m0[_2801].w;
    }
    SV_Target.x = _2965;
    SV_Target.y = _2966;
    SV_Target.z = _2967;
    SV_Target.w = _3339;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2801].w;
    discard_exit();
}


