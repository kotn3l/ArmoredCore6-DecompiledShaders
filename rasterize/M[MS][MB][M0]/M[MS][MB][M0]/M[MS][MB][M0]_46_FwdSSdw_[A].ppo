#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1069;
float _3454;
float _3455;
float _3456;
float _3457;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _352 = (_343.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_351, _352), vec2(_351, _352));
    float _3466 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))));
    float _364 = _351 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_317.x * 2.0) + (-1.0)));
    float _365 = _352 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_317.y * 2.0) + (-1.0)));
    float _368 = fma(_359, _218, fma(_365, _225, _364 * _211));
    float _371 = fma(_359, _219, fma(_365, _226, _364 * _212));
    float _374 = fma(_359, _220, fma(_365, _227, _364 * _213));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _426 = (cbMtdParam._m0[19u].x + dot(vec4(_378 * _368, _378 * _371, _378 * _374, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_416 - _417) * cbMtdParam._m0[24u].z) + _417) * cbMtdParam._m0[21u].z);
    float _3477 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _434 = (_427 * ((_297.x * cbMtdParam._m0[18u].x) - _276)) + _276;
    float _435 = (_427 * ((_297.y * cbMtdParam._m0[18u].y) - _277)) + _277;
    float _436 = (_427 * ((_297.z * cbMtdParam._m0[18u].z) - _278)) + _278;
    float _441 = (((_317.z - _347) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _347;
    vec4 _454 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _461 = (_454.x * 2.0) + (-1.0);
    float _462 = (_454.y * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3488 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _471 = ((_454.z - _441) * _427) + _441;
    float _481 = ((sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) - _359) * _427) + _359;
    float _484 = (((_461 - _364) * _427) + _364) + (cbMtdParam._m0[21u].x * _364);
    float _485 = (((_462 - _365) * _427) + _365) + (cbMtdParam._m0[21u].x * _365);
    float _490 = cbMtdParam._m0[22u].x + _343.w;
    float _493 = fma(_481, _218, fma(_485, _225, _484 * _211));
    float _496 = fma(_481, _219, fma(_485, _226, _484 * _212));
    float _499 = fma(_481, _220, fma(_485, _227, _484 * _213));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3499 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _507 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3521 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3532 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3543 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _576 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _566);
    float _577 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _566);
    float _578 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _566);
    float _582 = inversesqrt(dot(vec3(_576, _577, _578), vec3(_576, _577, _578)));
    float _583 = _576 * _582;
    float _584 = _577 * _582;
    float _585 = _578 * _582;
    vec4 _590 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _592 = _590.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _749 = sqrt(((_576 * _576) + (_577 * _577)) + (_578 * _578));
        float _755 = (cbMatDynParam._m0[5u].x * _749) + cbMatDynParam._m0[5u].y;
        float _3554 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _760 = (cbMatDynParam._m0[5u].z * _749) + cbMatDynParam._m0[5u].w;
        float _3565 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) - _756)) + _756) < ((_592 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _625 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _628 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _631 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _644 = _230 + 9u;
    uint _645 = _644 + uint(cbMatDynParam._m0[0u].w);
    float _651 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_645].x;
    float _652 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_645].y;
    float _653 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) * cbInstanceData._m0[_645].z;
    float _3576 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _669 = ((isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * TEXCOORD_5.w) * _665.x;
    float _670 = dot(vec3(_504, _505, _506), vec3(_583, _584, _585));
    float _673 = _670 * 2.0;
    float _677 = (_673 * _504) - _583;
    float _678 = (_673 * _505) - _584;
    float _679 = (_673 * _506) - _585;
    float _683 = abs(dot(vec3(_583, _584, _585), vec3(_504, _505, _506)));
    float _3609 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _685 = sqrt(_507);
    float _698 = exp2((_685 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_738, cbModelParam._m0[26u].z, fma(_734, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730));
        float _797 = fma(_738, cbModelParam._m0[27u].z, fma(_734, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730));
        float _801 = fma(_738, cbModelParam._m0[28u].z, fma(_734, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730));
        float _826 = _730 + _504;
        float _827 = _734 + _505;
        float _828 = _738 + _506;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _793;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _797;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _801;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_504, _505, _506), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3657 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_504, _505, _506), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3690 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_504, _505, _506), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3723 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1070 = _898;
        _1071 = _897;
        _1072 = _909;
        _1073 = _908;
        _1074 = _907;
        _1075 = _919;
        _1076 = _918;
        _1077 = _917;
        _1078 = _932;
        _1079 = _931;
        _1080 = _930;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _1069;
        _1070 = _1069;
        _1071 = _1069;
        _1072 = _1069;
        _1073 = _1069;
        _1074 = _1069;
        _1075 = _1069;
        _1076 = _1069;
        _1077 = _1069;
        _1078 = _1069;
        _1079 = _1069;
        _1080 = _1069;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1111 = fma(_738, cbModelParam._m0[30u].z, fma(_734, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _730));
        float _1115 = fma(_738, cbModelParam._m0[31u].z, fma(_734, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _730));
        float _1119 = fma(_738, cbModelParam._m0[32u].z, fma(_734, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _730));
        float _1142 = _730 + _504;
        float _1143 = _734 + _505;
        float _1144 = _738 + _506;
        float _1154 = fma(_1144, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142)) - _1111;
        float _1155 = fma(_1144, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142)) - _1115;
        float _1156 = fma(_1144, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142)) - _1119;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1111 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1115 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[35u].z) + ((((((_1119 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1210 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1177.x + (-0.5));
        float _1212 = _1210 * (_1177.y + (-0.5));
        float _1213 = _1210 * (_1177.z + (-0.5));
        float _1220 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1184.x + (-0.5));
        float _1222 = _1220 * (_1184.y + (-0.5));
        float _1223 = _1220 * (_1184.z + (-0.5));
        float _1230 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1191.x + (-0.5));
        float _1232 = _1230 * (_1191.y + (-0.5));
        float _1233 = _1230 * (_1191.z + (-0.5));
        float _1240 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1198.x + (-0.5));
        float _1242 = _1240 * (_1198.y + (-0.5));
        float _1243 = _1240 * (_1198.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_504, _505, _506), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3786 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1274 + 1.0))) + _1279) * _1244;
        float _1289 = _1212 * 0.5;
        float _1290 = _1222 * 0.5;
        float _1291 = _1232 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_504, _505, _506), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3819 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1316 + 1.0))) + _1321) * _1245;
        float _1331 = _1213 * 0.5;
        float _1332 = _1223 * 0.5;
        float _1333 = _1233 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_504, _505, _506), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3852 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1358 + 1.0))) + _1363) * _1246;
        _1380 = _1213;
        _1381 = _1212;
        _1382 = _1211;
        _1383 = _1223;
        _1384 = _1222;
        _1385 = _1221;
        _1386 = _1233;
        _1387 = _1232;
        _1388 = _1231;
        _1389 = _1246;
        _1390 = _1245;
        _1391 = _1244;
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _1069;
        _1381 = _1069;
        _1382 = _1069;
        _1383 = _1069;
        _1384 = _1069;
        _1385 = _1069;
        _1386 = _1069;
        _1387 = _1069;
        _1388 = _1069;
        _1389 = _1069;
        _1390 = _1069;
        _1391 = _1069;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1081)) + _1081;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1082)) + _1082;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1083)) + _1083;
    float _1427 = fma(_1406, cbSceneParam._m0[89u].z, fma(_1405, cbSceneParam._m0[89u].y, _1404 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1406, cbSceneParam._m0[90u].z, fma(_1405, cbSceneParam._m0[90u].y, _1404 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1406, cbSceneParam._m0[91u].z, fma(_1405, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1404));
    float _1448 = _677 * 0.5;
    float _1449 = _678 * 0.5;
    float _1450 = _679 * 0.5;
    float _1451 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1454 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1457 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1491;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1464 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1068, _1072, _1075, _1078));
        float _1468 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1472 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1479 = dot(vec4(cbModelParam._m0[39u]), vec4(_1448, _1449, _1450, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1502;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1493 = dot(vec4(cbModelParam._m0[40u]), vec4(_1448, _1449, _1450, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1506 = (_1502 * cbModelParam._m0[1u].x) + (_1491 * (1.0 - cbModelParam._m0[1u].x));
    float _1516 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1516 : min(cbModelParam._m0[25u].z, _1516));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_738, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_738, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_738, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_679, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677));
        float _1578 = fma(_679, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677));
        float _1581 = fma(_679, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1609 = frontier_phi_17_15_ladder;
        }
        float _1832;
        if (_1578 > 0.0)
        {
            _1832 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1832 = frontier_phi_26_22_ladder;
        }
        float _2078;
        if (_1581 > 0.0)
        {
            _2078 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2078 = frontier_phi_38_33_ladder;
        }
        float _2080 = isnan(_1832) ? _1609 : (isnan(_1609) ? _1832 : min(_1609, _1832));
        float _2081 = isnan(_2078) ? _2080 : (isnan(_2080) ? _2078 : min(_2080, _2078));
        float _2085 = (_2081 * _1575) + _1564;
        float _2086 = (_2081 * _1578) + _1568;
        float _2087 = (_2081 * _1581) + _1572;
        float _2088 = _2081 * 9.9999997473787516355514526367188e-05;
        float _2090 = (-1.0) - _2088;
        float _2092 = _2088 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2087 > _2092) || ((_2087 < _2090) || ((_2086 > _2092) || ((_2086 < _2090) || ((_2085 < _2090) || (_2085 > _2092))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2211 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2087, cbModelParam._m0[9u].z, fma(_2086, cbModelParam._m0[9u].y, _2085 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2087, cbModelParam._m0[10u].z, fma(_2086, cbModelParam._m0[10u].y, _2085 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2087, cbModelParam._m0[11u].z, fma(_2086, cbModelParam._m0[11u].y, _2085 * cbModelParam._m0[11u].x))), _1517);
            frontier_phi_16_38_ladder = _2211.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2211.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2211.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_16_38_ladder_2;
        _1599 = frontier_phi_16_38_ladder_1;
        _1601 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_677, _678, _679), _1517);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1659 = fma(_738, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730)) + cbModelParam._m0[21u].w;
        float _1663 = fma(_738, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730)) + cbModelParam._m0[22u].w;
        float _1667 = fma(_738, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730)) + cbModelParam._m0[23u].w;
        float _1670 = fma(_679, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677));
        float _1673 = fma(_679, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677));
        float _1676 = fma(_679, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677));
        float _1837;
        if (_1670 > 0.0)
        {
            _1837 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1837 = frontier_phi_28_24_ladder;
        }
        float _2105;
        if (_1673 > 0.0)
        {
            _2105 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2105 = frontier_phi_40_35_ladder;
        }
        float _2310;
        if (_1676 > 0.0)
        {
            _2310 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2310 = frontier_phi_49_46_ladder;
        }
        float _2312 = isnan(_2105) ? _1837 : (isnan(_1837) ? _2105 : min(_1837, _2105));
        float _2313 = isnan(_2310) ? _2312 : (isnan(_2312) ? _2310 : min(_2312, _2310));
        float _2317 = (_2313 * _1670) + _1659;
        float _2318 = (_2313 * _1673) + _1663;
        float _2319 = (_2313 * _1676) + _1667;
        float _2320 = _2313 * 9.9999997473787516355514526367188e-05;
        float _2321 = (-1.0) - _2320;
        float _2323 = _2320 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2319 > _2323) || ((_2319 < _2321) || ((_2318 > _2323) || ((_2318 < _2321) || ((_2317 < _2321) || (_2317 > _2323))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2319, cbModelParam._m0[17u].z, fma(_2318, cbModelParam._m0[17u].y, _2317 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2319, cbModelParam._m0[18u].z, fma(_2318, cbModelParam._m0[18u].y, _2317 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2319, cbModelParam._m0[19u].z, fma(_2318, cbModelParam._m0[19u].y, _2317 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_25_49_ladder = _2518.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2518.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2518.x * cbModelParam._m0[1u].z;
        }
        _1695 = frontier_phi_25_49_ladder_2;
        _1697 = frontier_phi_25_49_ladder_1;
        _1699 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_677, _678, _679), _1606);
        _1695 = _1679.x * cbModelParam._m0[1u].z;
        _1697 = _1679.y * cbModelParam._m0[1u].z;
        _1699 = _1679.z * cbModelParam._m0[1u].z;
    }
    float _1711 = ((((1.0 - _698) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_698 * _685)) * _669;
    float _1712 = _1711 * ((cbModelParam._m0[1u].w * (_1695 - _1597)) + _1597);
    float _1713 = _1711 * ((cbModelParam._m0[1u].w * (_1697 - _1599)) + _1599);
    float _1714 = _1711 * ((cbModelParam._m0[1u].w * (_1699 - _1601)) + _1601);
    float _1717 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1712 * cbSceneParam._m0[91u].x));
    vec4 _1731 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_604, _605));
    float _1733 = _1731.w;
    float _1745 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1733);
    float _1746 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1733);
    float _1747 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1733);
    uvec4 _1751 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1753 = _1751.x * 14u;
    uint _1754 = _1753 + 13u;
    float _1761 = _669 + (-1.0);
    float _1766 = (cbLight._m0[_1754].x * _1761) + 1.0;
    float _1767 = (cbLight._m0[_1754].y * _1761) + 1.0;
    float _1768 = (cbLight._m0[_1754].z * _1761) + 1.0;
    float _1769 = (cbLight._m0[_1754].w * _1761) + 1.0;
    uint _1770 = _1753 + 5u;
    float _1776 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _1780 = _1753 + 4u;
    float _1790 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1794 = _1753 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_504, _505, _506));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_504, _505, _506));
    float _3988 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3999 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1770].x * _1776) * _1815) + (((cbLight._m0[_1780].x * _1745) * _1790) * _1813);
    float _1823 = ((_1776 * cbLight._m0[_1770].y) * _1815) + (((cbLight._m0[_1780].y * _1746) * _1790) * _1813);
    float _1824 = ((_1776 * cbLight._m0[_1770].z) * _1815) + (((cbLight._m0[_1780].z * _1747) * _1790) * _1813);
    uvec4 _1829 = floatBitsToUint(cbLight._m0[_1753 + 12u]);
    bool _1831 = _1829.x == 0u;
    float _1842;
    float _1844;
    float _1846;
    if (_1831)
    {
        _1842 = _1822;
        _1844 = _1823;
        _1846 = _1824;
    }
    else
    {
        uint _1850 = _1753 + 6u;
        float _1866 = (dot(vec3(cbLight._m0[_1753 + 2u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _4010 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1869 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1842 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1822;
        _1844 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1823;
        _1846 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1824;
    }
    bool _1849 = _1829.y == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1849)
    {
        _1887 = _1842;
        _1889 = _1844;
        _1891 = _1846;
    }
    else
    {
        uint _2049 = _1753 + 7u;
        float _2065 = (dot(vec3(cbLight._m0[_1753 + 3u].xyz), vec3(_504, _505, _506)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4026 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2068 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _1887 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _1842;
        _1889 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _1844;
        _1891 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _1846;
    }
    uint _1894 = _1753 + 8u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1753].w)) * _507) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1753].x + _583;
    float _1910 = cbLight._m0[_1753].y + _584;
    float _1911 = cbLight._m0[_1753].z + _585;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1753].xyz));
    float _4042 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _1923 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1924 = dot(vec3(_504, _505, _506), vec3(_1916, _1917, _1918));
    float _4064 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1916, _1917, _1918));
    float _4075 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = _1908 * _1908;
    float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
    float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1948 = 1.0 - _1908;
    float _1959 = (0.5 / (((_1923 * ((_1922 * _1948) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _1948) + _1908) * _1922))) * _1922;
    float _4086 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
    uint _1975 = _1753 + 9u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _507) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1794].x + _583;
    float _1989 = cbLight._m0[_1794].y + _584;
    float _1990 = cbLight._m0[_1794].z + _585;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1794].xyz));
    float _4097 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2002 = dot(vec3(_504, _505, _506), vec3(_1995, _1996, _1997));
    float _4108 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1995, _1996, _1997));
    float _4119 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1987 * _1987;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = 1.0 - _1987;
    float _2034 = (0.5 / (((_1923 * ((_2001 * _2024) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2024) + _1987) * _2001))) * _2001;
    float _4130 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    float _2046 = (((_2023 * cbLight._m0[_1975].x) * _2036) * _1776) + ((((cbLight._m0[_1894].x * _1745) * _1947) * _1961) * _1790);
    float _2047 = (((_2023 * cbLight._m0[_1975].y) * _2036) * _1776) + ((((cbLight._m0[_1894].y * _1746) * _1947) * _1961) * _1790);
    float _2048 = (((_2023 * cbLight._m0[_1975].z) * _2036) * _1776) + ((((cbLight._m0[_1894].z * _1747) * _1947) * _1961) * _1790);
    float _2110;
    float _2112;
    float _2114;
    if (_1831)
    {
        _2110 = _2046;
        _2112 = _2047;
        _2114 = _2048;
    }
    else
    {
        uint _2116 = _1753 + 2u;
        uint _2120 = _1753 + 10u;
        float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _507) * 0.949999988079071044921875);
        float _2135 = _2134 * _2134;
        float _2136 = cbLight._m0[_2116].x + _583;
        float _2137 = cbLight._m0[_2116].y + _584;
        float _2138 = cbLight._m0[_2116].z + _585;
        float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
        float _2143 = _2142 * _2136;
        float _2144 = _2142 * _2137;
        float _2145 = _2142 * _2138;
        float _2146 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2116].xyz));
        float _4141 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2150 = dot(vec3(_504, _505, _506), vec3(_2143, _2144, _2145));
        float _4152 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2153 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _2154 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2143, _2144, _2145));
        float _4163 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2158 = _2135 * _2135;
        float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
        float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2172 = 1.0 - _2135;
        float _2182 = (0.5 / (((_1923 * ((_2149 * _2172) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2172) + _2135) * _2149))) * _2149;
        float _4174 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2110 = (((_2171 * cbLight._m0[_2120].x) * _2184) * _2185) + _2046;
        _2112 = (((_2171 * cbLight._m0[_2120].y) * _2184) * _2185) + _2047;
        _2114 = (((_2171 * cbLight._m0[_2120].z) * _2184) * _2185) + _2048;
    }
    float _2220;
    float _2222;
    float _2224;
    if (_1849)
    {
        _2220 = _2110;
        _2222 = _2112;
        _2224 = _2114;
    }
    else
    {
        uint _2231 = _1753 + 3u;
        uint _2235 = _1753 + 11u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _507) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _583;
        float _2252 = cbLight._m0[_2231].y + _584;
        float _2253 = cbLight._m0[_2231].z + _585;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_2231].xyz));
        float _4190 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2265 = dot(vec3(_504, _505, _506), vec3(_2258, _2259, _2260));
        float _4201 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4212 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2287 = 1.0 - _2250;
        float _2297 = (0.5 / (((_1923 * ((_2264 * _2287) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2287) + _2250) * _2264))) * _2264;
        float _4223 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2220 = (((_2286 * cbLight._m0[_2235].x) * _2299) * _2300) + _2110;
        _2222 = (((_2286 * cbLight._m0[_2235].y) * _2299) * _2300) + _2112;
        _2224 = (((_2286 * cbLight._m0[_2235].z) * _2299) * _2300) + _2114;
    }
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_1751.y == 0u)
    {
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2375;
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2375;
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2375;
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.x;
        uint _2402 = uint((float(_2390.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2391))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2391)));
        float _2412 = (log2(_2378 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2413 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        uint _2416 = uint(isnan(14.0) ? _2413 : (isnan(_2413) ? 14.0 : min(_2413, 14.0)));
        uvec4 _2421 = texelFetch(g_lightClusterGridBuffer, int(((_2416 << 2u) + (_2402 << 6u)) >> 2u));
        uint _2422 = _2421.x;
        uint _2423 = _2390.z;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        float _2531;
        float _2533;
        if (((((1u << ((_2423 >> 4u) & 15u)) + 4294967295u) & _2422) == 0u) || ((_2423 & 240u) == 0u))
        {
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
        }
        else
        {
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2532;
            float _2534;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            uint _2682 = 0u;
            uint _2691;
            bool _2692;
            for (;;)
            {
                _2691 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                _2692 = _2691 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2692)
                {
                    frontier_phi_66_pred = _2676;
                    frontier_phi_66_pred_1 = _2681;
                    frontier_phi_66_pred_2 = _2680;
                    frontier_phi_66_pred_3 = _2679;
                    frontier_phi_66_pred_4 = _2678;
                    frontier_phi_66_pred_5 = _2677;
                }
                else
                {
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    uint _2827;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2679;
                    _2825 = _2680;
                    _2826 = _2681;
                    _2827 = _2691;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    for (;;)
                    {
                        uint _2831 = uint(findLSB(_2827)) + (_2682 << 5u);
                        uint _2828 = (_2827 + 4294967295u) & _2827;
                        uint _2833 = _2831 * 48u;
                        vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2833)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2833 + 3u)).x));
                        uint _2853 = (_2831 * 48u) + 4u;
                        vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 3u)).x));
                        uint _2872 = (_2831 * 48u) + 8u;
                        vec3 _2883 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x));
                        float _2887 = _2847.x - _2376;
                        float _2888 = _2847.y - _2377;
                        float _2889 = _2847.z - _2378;
                        float _2890 = dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889));
                        float _2893 = inversesqrt(_2890);
                        float _2894 = _2893 * _2887;
                        float _2895 = _2893 * _2888;
                        float _2896 = _2893 * _2889;
                        float _2897 = dot(vec3(_625, _628, _631), vec3(_2894, _2895, _2896));
                        float _2902 = 1.0 - (_2890 * _2847.w);
                        float _4249 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2903 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2904 = sqrt(_2890) * _2866.w;
                        float _2907 = 1.39999997615814208984375 / (_2904 + 1.39999997615814208984375);
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2897) + _2908;
                        float _2914 = _2904 * _2904;
                        float _2918 = ((isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0))) * _2903) / ((_2914 * 0.699999988079071044921875) + 1.0);
                        float _2922 = (-0.0) - _2376;
                        float _2923 = (-0.0) - _2377;
                        float _2924 = (-0.0) - _2378;
                        float _2928 = inversesqrt(dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924)));
                        float _2929 = _2928 * _2922;
                        float _2930 = _2928 * _2923;
                        float _2931 = _2928 * _2924;
                        float _2939 = exp2(log2(1.0 / ((_2914 * 3.5) + 5.0)) * 0.25);
                        float _2940 = 1.0 - _685;
                        float _2947 = sqrt(1.0 - ((1.0 - (_2940 * _2940)) * (1.0 - (_2939 * _2939))));
                        float _2948 = _2947 * _2947;
                        float _2949 = _2948 * _2948;
                        float _2950 = _2929 + _2894;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                        float _2960 = dot(vec3(_625, _628, _631), vec3(_2929, _2930, _2931));
                        float _4265 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2963 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                        float _2964 = dot(vec3(_625, _628, _631), vec3(_2956 * _2950, _2956 * _2951, _2956 * _2952));
                        float _4276 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2967 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                        float _2971 = ((_2967 * _2967) * (_2949 + (-1.0))) + 1.0;
                        float _2972 = _2907 * _2948;
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2897) + _2973;
                        float _4287 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2977 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                        float _2978 = 1.0 - _2948;
                        float _2988 = (0.5 / (((_2977 * ((_2963 * _2978) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2977 * _2978) + _2948) * _2963))) * _2977;
                        float _4298 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2999 = (((_2949 * 3.1415927410125732421875) * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) / ((_2971 * _2971) * ((_2914 * 2.1991131305694580078125) + 3.141590118408203125))) * _2903;
                        _2751 = (_2918 * _2866.x) + _2824;
                        _2752 = (_2918 * _2866.y) + _2825;
                        _2753 = (_2918 * _2866.z) + _2826;
                        _2748 = (_2999 * _2883.x) + _2821;
                        _2749 = (_2999 * _2883.y) + _2822;
                        _2750 = (_2999 * _2883.z) + _2823;
                        if (_2828 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2751;
                            _2825 = _2752;
                            _2826 = _2753;
                            _2827 = _2828;
                        }
                    }
                    frontier_phi_66_pred = _2748;
                    frontier_phi_66_pred_1 = _2753;
                    frontier_phi_66_pred_2 = _2752;
                    frontier_phi_66_pred_3 = _2751;
                    frontier_phi_66_pred_4 = _2750;
                    frontier_phi_66_pred_5 = _2749;
                }
                _2524 = frontier_phi_66_pred;
                _2534 = frontier_phi_66_pred_1;
                _2532 = frontier_phi_66_pred_2;
                _2530 = frontier_phi_66_pred_3;
                _2528 = frontier_phi_66_pred_4;
                _2526 = frontier_phi_66_pred_5;
                uint _2683 = _2682 + 1u;
                if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2676 = _2524;
                    _2677 = _2526;
                    _2678 = _2528;
                    _2679 = _2530;
                    _2680 = _2532;
                    _2681 = _2534;
                    _2682 = _2683;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
        }
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.z;
        uint _2540 = (_2538 >> 8u) & 15u;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((4294967295u << _2540) & _2422) == 0u)
        {
            _2644 = _2523;
            _2646 = _2525;
            _2648 = _2527;
            _2650 = _2529;
            _2652 = _2531;
            _2654 = _2533;
        }
        else
        {
            float _2669 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
            float _2670 = _2669 * _2376;
            float _2671 = _2669 * _2377;
            float _2672 = _2669 * _2378;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2540 < ((_2538 >> 12u) & 15u))
            {
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2804 = _2523;
                float _2805 = _2525;
                float _2806 = _2527;
                float _2807 = _2529;
                float _2808 = _2531;
                float _2809 = _2533;
                uint _2810 = _2540;
                uint _2819;
                bool _2820;
                for (;;)
                {
                    _2819 = texelFetch(g_lightClassification, int((((_2416 << 5u) + (_2402 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                    _2820 = _2819 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2820)
                    {
                        frontier_phi_77_pred = _2809;
                        frontier_phi_77_pred_1 = _2808;
                        frontier_phi_77_pred_2 = _2807;
                        frontier_phi_77_pred_3 = _2806;
                        frontier_phi_77_pred_4 = _2805;
                        frontier_phi_77_pred_5 = _2804;
                    }
                    else
                    {
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        float _3029 = _2807;
                        float _3030 = _2808;
                        float _3031 = _2809;
                        uint _3032 = _2819;
                        uint _3033;
                        vec4 _3058;
                        float _3059;
                        vec4 _3074;
                        vec3 _3086;
                        vec4 _3102;
                        vec4 _3117;
                        float _3163;
                        bool _3164;
                        for (;;)
                        {
                            uint _3043 = ((_2810 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3032));
                            _3033 = (_3032 + 4294967295u) & _3032;
                            uint _3045 = _3043 * 40u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3059 = _3058.w;
                            uint _3061 = (_3043 * 40u) + 4u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3043 * 40u) + 8u;
                            _3086 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x));
                            uint _3089 = (_3043 * 40u) + 16u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3104 = (_3043 * 40u) + 20u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3043 * 40u) + 24u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3138 = (_3043 * 40u) + 28u;
                            vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            _3163 = fma(_2378, _3151.z, fma(_2377, _3151.y, _3151.x * _2376)) + _3151.w;
                            _3164 = !((fma(_2378, _3132.z, fma(_2377, _3132.y, _3132.x * _2376)) + _3132.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3164)
                            {
                                float _3191 = _3058.x - _2376;
                                float _3192 = _3058.y - _2377;
                                float _3193 = _3058.z - _2378;
                                float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                                float _3197 = inversesqrt(_3194);
                                float _3198 = _3197 * _3191;
                                float _3199 = _3197 * _3192;
                                float _3200 = _3197 * _3193;
                                float _3204 = 1.0 - (_3194 / (_3059 * _3059));
                                float _4309 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3209 = sqrt(_3194) * _3074.w;
                                float _3211 = 1.39999997615814208984375 / (_3209 + 1.39999997615814208984375);
                                float _3212 = _3211 * _3211;
                                float _3215 = ((1.0 - _3212) * dot(vec3(_3198, _3199, _3200), vec3(_625, _628, _631))) + _3212;
                                float _3218 = _3209 * _3209;
                                float _3222 = (fma(_2378, _3102.z, fma(_2377, _3102.y, _3102.x * _2376)) + _3102.w) / _3163;
                                float _3223 = (fma(_2378, _3117.z, fma(_2377, _3117.y, _3117.x * _2376)) + _3117.w) / _3163;
                                float _3227 = 1.0 - dot(vec2(_3222, _3223), vec2(_3222, _3223));
                                float _4325 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                                float _3229 = _3228 * (((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3205) / ((_3218 * 0.699999988079071044921875) + 1.0));
                                float _3241 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                                float _3242 = 1.0 - _685;
                                float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                                float _3250 = _3249 * _3249;
                                float _3251 = _3250 * _3250;
                                float _3252 = _3198 - _2670;
                                float _3253 = _3199 - _2671;
                                float _3254 = _3200 - _2672;
                                float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                                float _3262 = dot(vec3(_625, _628, _631), vec3((-0.0) - _2670, (-0.0) - _2671, (-0.0) - _2672));
                                float _4336 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                                float _3266 = dot(vec3(_625, _628, _631), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                                float _4347 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3269 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                                float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                                float _3274 = _3211 * _3250;
                                float _3275 = _3274 * _3274;
                                float _3281 = ((1.0 - _3275) * dot(vec3(_625, _628, _631), vec3(_3198, _3199, _3200))) + _3275;
                                float _4358 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3282 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3283 = 1.0 - _3250;
                                float _3293 = (0.5 / (((_3282 * ((_3265 * _3283) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3282 * _3283) + _3250) * _3265))) * _3282;
                                float _4369 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3303 = (_3228 * _3205) * (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3273 * _3273) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3229 * _3074.y;
                                frontier_phi_83_pred_1 = _3229 * _3074.x;
                                frontier_phi_83_pred_2 = _3303 * _3086.z;
                                frontier_phi_83_pred_3 = _3303 * _3086.y;
                                frontier_phi_83_pred_4 = _3303 * _3086.x;
                                frontier_phi_83_pred_5 = _3229 * _3074.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3311 = frontier_phi_83_pred;
                            _3310 = frontier_phi_83_pred_1;
                            _3309 = frontier_phi_83_pred_2;
                            _3308 = frontier_phi_83_pred_3;
                            _3307 = frontier_phi_83_pred_4;
                            _3312 = frontier_phi_83_pred_5;
                            _3016 = _3310 + _3029;
                            _3017 = _3311 + _3030;
                            _3018 = _3312 + _3031;
                            _3013 = _3307 + _3026;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            if (_3033 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3033;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3018;
                        frontier_phi_77_pred_1 = _3017;
                        frontier_phi_77_pred_2 = _3016;
                        frontier_phi_77_pred_3 = _3015;
                        frontier_phi_77_pred_4 = _3014;
                        frontier_phi_77_pred_5 = _3013;
                    }
                    _2655 = frontier_phi_77_pred;
                    _2653 = frontier_phi_77_pred_1;
                    _2651 = frontier_phi_77_pred_2;
                    _2649 = frontier_phi_77_pred_3;
                    _2647 = frontier_phi_77_pred_4;
                    _2645 = frontier_phi_77_pred_5;
                    uint _2811 = _2810 + 1u;
                    if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2804 = _2645;
                        _2805 = _2647;
                        _2806 = _2649;
                        _2807 = _2651;
                        _2808 = _2653;
                        _2809 = _2655;
                        _2810 = _2811;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2649;
                frontier_phi_58_59_ladder_1 = _2655;
                frontier_phi_58_59_ladder_2 = _2653;
                frontier_phi_58_59_ladder_3 = _2651;
                frontier_phi_58_59_ladder_4 = _2647;
                frontier_phi_58_59_ladder_5 = _2645;
            }
            else
            {
                frontier_phi_58_59_ladder = _2527;
                frontier_phi_58_59_ladder_1 = _2533;
                frontier_phi_58_59_ladder_2 = _2531;
                frontier_phi_58_59_ladder_3 = _2529;
                frontier_phi_58_59_ladder_4 = _2525;
                frontier_phi_58_59_ladder_5 = _2523;
            }
            _2644 = frontier_phi_58_59_ladder_5;
            _2646 = frontier_phi_58_59_ladder_4;
            _2648 = frontier_phi_58_59_ladder;
            _2650 = frontier_phi_58_59_ladder_3;
            _2652 = frontier_phi_58_59_ladder_2;
            _2654 = frontier_phi_58_59_ladder_1;
        }
        float _2659 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
        _2435 = (_2659 * _2650) + _1887;
        _2437 = (_2659 * _2652) + _1889;
        _2439 = (_2659 * _2654) + _1891;
        _2441 = ((_2644 * 0.039999999105930328369140625) * _2659) + _2220;
        _2443 = ((_2646 * 0.039999999105930328369140625) * _2659) + _2222;
        _2445 = ((_2648 * 0.039999999105930328369140625) * _2659) + _2224;
    }
    else
    {
        _2435 = _1887;
        _2437 = _1889;
        _2439 = _1891;
        _2441 = _2220;
        _2443 = _2222;
        _2445 = _2224;
    }
    float _4385 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _4396 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4407 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _2462 = ((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2435 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _669))) + ((_2441 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2463 = ((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_2437 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _669))) + ((_2443 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2464 = ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2439 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _669))) + ((_2445 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    uint _2465 = _230 + 6u;
    float _2473 = _604 / cbSceneParam._m0[86u].x;
    float _2474 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2488 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2490 = _2488.x;
    float _2491 = _2488.y;
    float _2492 = _2488.z;
    float _2493 = _2488.w;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2548 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2549 = _2548 / _525;
        float _2560 = _2549 * _576;
        float _2561 = _577 * _2549;
        float _2562 = (-0.0) - _2561;
        float _2564 = _2549 * _578;
        float _2566 = (cbSceneParam._m0[77u].w * _2562) / _2548;
        float _2567 = _2566 + cbSceneParam._m0[79u].w;
        float _2568 = cbSceneParam._m0[79u].w - _2561;
        float _2574 = sqrt(((_2560 * _2560) + (_2561 * _2561)) + (_2564 * _2564));
        float _2577 = (1.0 - (cbSceneParam._m0[77u].w / _2548)) * _2574;
        float _2582 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2584 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2761;
        if (abs((_2562 - _2566) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2761 = ((((_2567 > 0.0) ? exp2(_2582 * _2567) : (2.0 - exp2(_2584 * _2567))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2577;
        }
        else
        {
            float _2705 = 1.0 / cbSceneParam._m0[80u].x;
            float _2706 = isnan(_2568) ? _2567 : (isnan(_2567) ? _2568 : max(_2567, _2568));
            float _2707 = isnan(_2568) ? _2567 : (isnan(_2567) ? _2568 : min(_2567, _2568));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            _2761 = ((abs(_2574 / _2562) * cbSceneParam._m0[80u].y) * ((((_2716 - _2717) * 2.0) - ((exp2(_2582 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0)))) - exp2(_2582 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))))) * _2705)) - ((exp2(_2584 * _2716) - exp2(_2584 * _2717)) * _2705))) + (_2577 * cbSceneParam._m0[80u].z);
        }
        vec4 _2763 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2473, _2474, 1.0), 0.0);
        float _2772 = exp2((_2761 * (-1.44269502162933349609375)) * (1.0 - _2763.w));
        float _2773 = log2(_2772);
        float _2789 = log2(_2493);
        _2586 = (exp2(_2789 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].x)) * _2763.x) / cbSceneParam._m0[78u].x)) + _2490;
        _2588 = (exp2(_2789 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].y)) * _2763.y) / cbSceneParam._m0[78u].y)) + _2491;
        _2590 = (exp2(_2789 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2773 * cbSceneParam._m0[78u].z)) * _2763.z) / cbSceneParam._m0[78u].z)) + _2492;
        _2592 = _2772 * _2493;
    }
    else
    {
        _2586 = _2490;
        _2588 = _2491;
        _2590 = _2492;
        _2592 = _2493;
    }
    bool _2799;
    vec4 _2602;
    vec4 _2624;
    float _2626;
    float _2630;
    float _2631;
    float _2632;
    float _2633;
    bool _2643;
    for (;;)
    {
        _2602 = cbMatDynParam._m0[0u];
        float _2604 = roundEven(_2602.y);
        bool _2605 = _2604 == 3.0;
        float _2606 = log2(_2592);
        float _2613 = exp2(_2606 * cbSceneParam._m0[78u].x) * _2462;
        float _2614 = exp2(_2606 * cbSceneParam._m0[78u].y) * _2463;
        float _2615 = exp2(_2606 * cbSceneParam._m0[78u].z) * _2464;
        float _2622 = _592 + (-0.5);
        _2624 = cbMtdParam._m0[1u];
        _2626 = _2624.y * _2622;
        float _2629 = (_2604 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2630 = _2629 * (_2605 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2586)));
        _2631 = _2629 * (_2605 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2588)));
        _2632 = _2629 * (_2605 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2590)));
        _2633 = _2622 * 0.999000012874603271484375;
        _2643 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2643)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2633) < 0.5)
            {
                _2799 = true;
                break;
            }
        }
        uint _2740 = _644 + uint(_2602.w);
        if ((cbInstanceData._m0[_2740].w < 1.0) && ((cbInstanceData._m0[_2740].w + _2633) < 0.5))
        {
            _2799 = true;
            break;
        }
        if ((_2626 + 1.0) < _2624.x)
        {
            _2799 = true;
            break;
        }
        _2799 = false;
        break;
    }
    float _3004;
    if (_2799)
    {
        discard_state = true;
        _3004 = 0.0;
    }
    else
    {
        _3004 = cbInstanceData._m0[_2465].w;
    }
    SV_Target.x = _2630;
    SV_Target.y = _2631;
    SV_Target.z = _2632;
    SV_Target.w = _3004;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2465].w;
    discard_exit();
}


