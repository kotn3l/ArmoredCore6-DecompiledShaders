#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1078;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3668 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _425 = ((_395.z - _416) * _368) + _416;
    float _428 = ((((_395.x - _414) * _368) + _414) * 2.0) + (-1.0);
    float _430 = ((((_395.y - _415) * _368) + _415) * 2.0) + (-1.0);
    float _431 = dot(vec2(_428, _430), vec2(_428, _430));
    float _3679 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _469 = _467.x;
    float _470 = 1.0 - _469;
    float _483 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_469 - _470) * cbMtdParam._m0[24u].z) + _470) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3690 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _491 = (_484 * (cbMtdParam._m0[17u].x - _375)) + _375;
    float _492 = (_484 * (cbMtdParam._m0[17u].y - _376)) + _376;
    float _493 = (_484 * (cbMtdParam._m0[17u].z - _377)) + _377;
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _513 = (_506.x * 2.0) + (-1.0);
    float _514 = (_506.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3701 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _523 = (_484 * (_506.z - _425)) + _425;
    float _535 = (((_513 - _428) + (cbMtdParam._m0[21u].x * _428)) * _484) + _428;
    float _536 = (((_514 - _430) + (cbMtdParam._m0[21u].x * _430)) * _484) + _430;
    float _537 = (_484 * (sqrt(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) - _436)) + _436;
    float _542 = cbMtdParam._m0[22u].x + _449.w;
    float _545 = fma(_537, _219 * NORMAL.x, fma(_536, _226 * TANGENT.x, (_212 * _204) * _535));
    float _548 = fma(_537, _219 * NORMAL.y, fma(_536, _226 * TANGENT.y, (_212 * _205) * _535));
    float _551 = fma(_537, _219 * NORMAL.z, fma(_536, _226 * TANGENT.z, (_212 * _206) * _535));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3712 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _559 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3734 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3745 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3756 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _629 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _619);
    float _630 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _619);
    float _631 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _619);
    float _635 = inversesqrt(dot(vec3(_629, _630, _631), vec3(_629, _630, _631)));
    float _636 = _629 * _635;
    float _637 = _630 * _635;
    float _638 = _631 * _635;
    float _644 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _645 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _666 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _669 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _683 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3767 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _644, cbSceneParam._m0[86u].y * _645));
    float _707 = ((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * TEXCOORD_5.w) * _703.x;
    float _708 = dot(vec3(_556, _557, _558), vec3(_636, _637, _638));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _556) - _636;
    float _716 = (_711 * _557) - _637;
    float _717 = (_711 * _558) - _638;
    float _721 = abs(dot(vec3(_636, _637, _638), vec3(_556, _557, _558)));
    float _3800 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_559);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1077;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _806 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _810 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _835 = _768 + _556;
        float _836 = _772 + _557;
        float _837 = _776 + _558;
        float _847 = fma(_837, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835)) - _802;
        float _848 = fma(_837, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835)) - _806;
        float _849 = fma(_837, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835)) - _810;
        float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
        float _866 = ((_853 * _847) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_802 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _867 = ((_853 * _848) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_806 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_853 * _849) / cbModelParam._m0[34u].z) + ((((((_810 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _905 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_871.x + (-0.5));
        float _907 = _905 * (_871.y + (-0.5));
        float _908 = _905 * (_871.z + (-0.5));
        float _915 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_878.x + (-0.5));
        float _917 = _915 * (_878.y + (-0.5));
        float _918 = _915 * (_878.z + (-0.5));
        float _925 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_885.x + (-0.5));
        float _927 = _925 * (_885.y + (-0.5));
        float _928 = _925 * (_885.z + (-0.5));
        float _935 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_892.x + (-0.5));
        float _937 = _935 * (_892.y + (-0.5));
        float _938 = _935 * (_892.z + (-0.5));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = _906 * 0.5;
        float _943 = _916 * 0.5;
        float _944 = _926 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _959 = (dot(vec3(_556, _557, _558), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _969 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3848 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_971 + 1.0))) + _976) * _939;
        float _986 = _907 * 0.5;
        float _987 = _917 * 0.5;
        float _988 = _927 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_556, _557, _558), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3881 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1013 + 1.0))) + _1018) * _940;
        float _1028 = _908 * 0.5;
        float _1029 = _918 * 0.5;
        float _1030 = _928 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_556, _557, _558), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3914 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1055 + 1.0))) + _1060) * _941;
        _1077 = _908;
        _1079 = _907;
        _1080 = _906;
        _1081 = _918;
        _1082 = _917;
        _1083 = _916;
        _1084 = _928;
        _1085 = _927;
        _1086 = _926;
        _1087 = _941;
        _1088 = _940;
        _1089 = _939;
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
    }
    else
    {
        _1077 = _1078;
        _1079 = _1078;
        _1080 = _1078;
        _1081 = _1078;
        _1082 = _1078;
        _1083 = _1078;
        _1084 = _1078;
        _1085 = _1078;
        _1086 = _1078;
        _1087 = _1078;
        _1088 = _1078;
        _1089 = _1078;
        _1090 = 0.0;
        _1091 = 0.0;
        _1092 = 0.0;
    }
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1117 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1121 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1125 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1148 = _768 + _556;
        float _1149 = _772 + _557;
        float _1150 = _776 + _558;
        float _1160 = fma(_1150, cbModelParam._m0[30u].z, fma(_1149, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1148)) - _1117;
        float _1161 = fma(_1150, cbModelParam._m0[31u].z, fma(_1149, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1148)) - _1121;
        float _1162 = fma(_1150, cbModelParam._m0[32u].z, fma(_1149, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1148)) - _1125;
        float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
        float _1179 = ((_1166 * _1160) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1117 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1166 * _1161) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1121 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1166 * _1162) / cbModelParam._m0[35u].z) + ((((((_1125 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1179, _1180, _1181), 0.0);
        float _1216 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1183.x + (-0.5));
        float _1218 = _1216 * (_1183.y + (-0.5));
        float _1219 = _1216 * (_1183.z + (-0.5));
        float _1226 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1190.x + (-0.5));
        float _1228 = _1226 * (_1190.y + (-0.5));
        float _1229 = _1226 * (_1190.z + (-0.5));
        float _1236 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1197.x + (-0.5));
        float _1238 = _1236 * (_1197.y + (-0.5));
        float _1239 = _1236 * (_1197.z + (-0.5));
        float _1246 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1204.x + (-0.5));
        float _1248 = _1246 * (_1204.y + (-0.5));
        float _1249 = _1246 * (_1204.z + (-0.5));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = _1217 * 0.5;
        float _1254 = _1227 * 0.5;
        float _1255 = _1237 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_556, _557, _558), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3977 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1280 + 1.0))) + _1285) * _1250;
        float _1295 = _1218 * 0.5;
        float _1296 = _1228 * 0.5;
        float _1297 = _1238 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_556, _557, _558), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4010 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1322 + 1.0))) + _1327) * _1251;
        float _1337 = _1219 * 0.5;
        float _1338 = _1229 * 0.5;
        float _1339 = _1239 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_556, _557, _558), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4043 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1364 + 1.0))) + _1369) * _1252;
        _1386 = _1219;
        _1387 = _1218;
        _1388 = _1217;
        _1389 = _1229;
        _1390 = _1228;
        _1391 = _1227;
        _1392 = _1239;
        _1393 = _1238;
        _1394 = _1237;
        _1395 = _1252;
        _1396 = _1251;
        _1397 = _1250;
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1078;
        _1387 = _1078;
        _1388 = _1078;
        _1389 = _1078;
        _1390 = _1078;
        _1391 = _1078;
        _1392 = _1078;
        _1393 = _1078;
        _1394 = _1078;
        _1395 = _1078;
        _1396 = _1078;
        _1397 = _1078;
        _1398 = 0.0;
        _1399 = 0.0;
        _1400 = 0.0;
    }
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1090)) + _1090;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1091)) + _1091;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1092)) + _1092;
    float _1433 = fma(_1412, cbSceneParam._m0[89u].z, fma(_1411, cbSceneParam._m0[89u].y, _1410 * cbSceneParam._m0[89u].x));
    float _1436 = fma(_1412, cbSceneParam._m0[90u].z, fma(_1411, cbSceneParam._m0[90u].y, _1410 * cbSceneParam._m0[90u].x));
    float _1439 = fma(_1412, cbSceneParam._m0[91u].z, fma(_1411, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1410));
    float _1454 = _715 * 0.5;
    float _1455 = _716 * 0.5;
    float _1456 = _717 * 0.5;
    float _1457 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1460 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1463 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1497;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1470 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1077, _1081, _1084, _1087));
        float _1474 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1079, _1082, _1085, _1088));
        float _1478 = dot(vec4(_1454, _1455, _1456, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1485 = dot(vec4(cbModelParam._m0[39u]), vec4(_1454, _1455, _1456, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1508;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1499 = dot(vec4(cbModelParam._m0[40u]), vec4(_1454, _1455, _1456, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1512 = (_1508 * cbModelParam._m0[1u].x) + (_1497 * (1.0 - cbModelParam._m0[1u].x));
    float _1522 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1522 : min(cbModelParam._m0[25u].z, _1522));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1571 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1575 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1579 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1582 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1585 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1588 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1616;
        if (_1582 > 0.0)
        {
            _1616 = abs((1.0 - _1571) / _1582);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1571 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1616 = frontier_phi_14_12_ladder;
        }
        float _1786;
        if (_1585 > 0.0)
        {
            _1786 = abs((1.0 - _1575) / _1585);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1575 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1786 = frontier_phi_23_19_ladder;
        }
        float _2081;
        if (_1588 > 0.0)
        {
            _2081 = abs((1.0 - _1579) / _1588);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1579 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2081 = frontier_phi_35_30_ladder;
        }
        float _2083 = isnan(_1786) ? _1616 : (isnan(_1616) ? _1786 : min(_1616, _1786));
        float _2084 = isnan(_2081) ? _2083 : (isnan(_2083) ? _2081 : min(_2083, _2081));
        float _2088 = (_2084 * _1582) + _1571;
        float _2089 = (_2084 * _1585) + _1575;
        float _2090 = (_2084 * _1588) + _1579;
        float _2091 = _2084 * 9.9999997473787516355514526367188e-05;
        float _2093 = (-1.0) - _2091;
        float _2095 = _2091 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2090 > _2095) || ((_2090 < _2093) || ((_2089 > _2095) || ((_2089 < _2093) || ((_2088 < _2093) || (_2088 > _2095))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2090, cbModelParam._m0[9u].z, fma(_2089, cbModelParam._m0[9u].y, _2088 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2090, cbModelParam._m0[10u].z, fma(_2089, cbModelParam._m0[10u].y, _2088 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2090, cbModelParam._m0[11u].z, fma(_2089, cbModelParam._m0[11u].y, _2088 * cbModelParam._m0[11u].x))), _1523);
            frontier_phi_13_35_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1604 = frontier_phi_13_35_ladder_2;
        _1606 = frontier_phi_13_35_ladder_1;
        _1608 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1523);
        _1604 = _1592.x * cbModelParam._m0[1u].y;
        _1606 = _1592.y * cbModelParam._m0[1u].y;
        _1608 = _1592.z * cbModelParam._m0[1u].y;
    }
    float _1612 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1613 = isnan(_1612) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1612 : min(cbModelParam._m0[25u].w, _1612));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1681 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1684 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1791;
        if (_1678 > 0.0)
        {
            _1791 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1791 = frontier_phi_25_21_ladder;
        }
        float _2108;
        if (_1681 > 0.0)
        {
            _2108 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2108 = frontier_phi_37_32_ladder;
        }
        float _2435;
        if (_1684 > 0.0)
        {
            _2435 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2435 = frontier_phi_47_44_ladder;
        }
        float _2437 = isnan(_2108) ? _1791 : (isnan(_1791) ? _2108 : min(_1791, _2108));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1678) + _1667;
        float _2443 = (_2438 * _1681) + _1671;
        float _2444 = (_2438 * _1684) + _1675;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2445;
        float _2448 = _2445 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2444 > _2448) || ((_2444 < _2446) || ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 < _2446) || (_2442 > _2448))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2444, cbModelParam._m0[17u].z, fma(_2443, cbModelParam._m0[17u].y, _2442 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2444, cbModelParam._m0[18u].z, fma(_2443, cbModelParam._m0[18u].y, _2442 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2444, cbModelParam._m0[19u].z, fma(_2443, cbModelParam._m0[19u].y, _2442 * cbModelParam._m0[19u].x))), _1613);
            frontier_phi_22_47_ladder = _2562.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2562.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2562.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_22_47_ladder_2;
        _1705 = frontier_phi_22_47_ladder_1;
        _1707 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1613);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1719 = ((((1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_736 * _723)) * _707;
    float _1720 = _1719 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1721 = _1719 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1722 = _1719 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1778 = _1765 / _1777;
    float _1779 = _1769 / _1777;
    float _1780 = _1773 / _1777;
    float _1927;
    float _1928;
    float _1929;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1807 = ((uint(_1780 > cbSceneParam._m0[59u].y) + uint(_1780 > cbSceneParam._m0[59u].x)) + uint(_1780 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1808 = _1807 + 43u;
        uint _1816 = _1807 + 44u;
        uint _1824 = _1807 + 45u;
        uint _1832 = _1807 + 46u;
        float _1843 = fma(_1777, cbSceneParam._m0[_1808].w, fma(_1773, cbSceneParam._m0[_1808].z, fma(_1769, cbSceneParam._m0[_1808].y, _1765 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1777, cbSceneParam._m0[_1816].w, fma(_1773, cbSceneParam._m0[_1816].z, fma(_1769, cbSceneParam._m0[_1816].y, _1765 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1777, cbSceneParam._m0[_1832].w, fma(_1773, cbSceneParam._m0[_1832].z, fma(_1769, cbSceneParam._m0[_1832].y, _1765 * cbSceneParam._m0[_1832].x)));
        float _1860 = cbSceneParam._m0[33u].z * _1855;
        float _1862 = cbSceneParam._m0[33u].w * _1855;
        float _1865 = fma(_1777, cbSceneParam._m0[_1824].w, fma(_1773, cbSceneParam._m0[_1824].z, fma(_1769, cbSceneParam._m0[_1824].y, _1765 * cbSceneParam._m0[_1824].x))) / _1855;
        float _1913 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
        float _4169 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1920 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 + _1843) / _1855, (_1862 + _1847) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 + _1843) / _1855, (_1847 - _1860) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1860) / _1855, (_1847 - _1862) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1862) / _1855, (_1860 + _1847) / _1855), _1865), 0.0)).x), vec4(0.25)));
        _1927 = 1.0 - (_1920 * cbSceneParam._m0[34u].x);
        _1928 = 1.0 - (_1920 * cbSceneParam._m0[34u].y);
        _1929 = 1.0 - (_1920 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1927 = 1.0;
        _1928 = 1.0;
        _1929 = 1.0;
    }
    float _1993;
    float _1995;
    float _1997;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1981 = fma(_1777, cbSceneParam._m0[63u].w, fma(_1773, cbSceneParam._m0[63u].z, fma(_1769, cbSceneParam._m0[63u].y, _1765 * cbSceneParam._m0[63u].x)));
        float _1982 = fma(_1777, cbSceneParam._m0[60u].w, fma(_1773, cbSceneParam._m0[60u].z, fma(_1769, cbSceneParam._m0[60u].y, _1765 * cbSceneParam._m0[60u].x))) / _1981;
        float _1983 = fma(_1777, cbSceneParam._m0[61u].w, fma(_1773, cbSceneParam._m0[61u].z, fma(_1769, cbSceneParam._m0[61u].y, _1765 * cbSceneParam._m0[61u].x))) / _1981;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1982 >= cbSceneParam._m0[64u].x) && (_1983 >= cbSceneParam._m0[64u].y)) && (_1982 <= cbSceneParam._m0[64u].z)) && (_1983 <= cbSceneParam._m0[64u].w))
        {
            float _2121 = fma(_1777, cbSceneParam._m0[62u].w, fma(_1773, cbSceneParam._m0[62u].z, fma(_1769, cbSceneParam._m0[62u].y, _1765 * cbSceneParam._m0[62u].x))) / _1981;
            float _2125 = isnan(cbSceneParam._m0[41u].w) ? _2121 : (isnan(_2121) ? cbSceneParam._m0[41u].w : max(_2121, cbSceneParam._m0[41u].w));
            float _2168 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
            float _4185 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
            float _2175 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1982, cbSceneParam._m0[33u].w + _1983), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1982, _1983 - cbSceneParam._m0[33u].z), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].z, _1983 - cbSceneParam._m0[33u].w), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1983), _2125), 0.0)).x), vec4(0.25)));
            float _2179 = 1.0 - (_2175 * cbSceneParam._m0[34u].x);
            float _2180 = 1.0 - (_2175 * cbSceneParam._m0[34u].y);
            float _2181 = 1.0 - (_2175 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2181) ? _1929 : (isnan(_1929) ? _2181 : min(_1929, _2181));
            frontier_phi_34_33_ladder_1 = isnan(_2180) ? _1928 : (isnan(_1928) ? _2180 : min(_1928, _2180));
            frontier_phi_34_33_ladder_2 = isnan(_2179) ? _1927 : (isnan(_1927) ? _2179 : min(_1927, _2179));
        }
        else
        {
            frontier_phi_34_33_ladder = _1929;
            frontier_phi_34_33_ladder_1 = _1928;
            frontier_phi_34_33_ladder_2 = _1927;
        }
        _1993 = frontier_phi_34_33_ladder_2;
        _1995 = frontier_phi_34_33_ladder_1;
        _1997 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1993 = _1927;
        _1995 = _1928;
        _1997 = _1929;
    }
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2012 = _707 + (-1.0);
    float _2017 = (cbLight._m0[_2005].x * _2012) + 1.0;
    float _2018 = (cbLight._m0[_2005].y * _2012) + 1.0;
    float _2019 = (cbLight._m0[_2005].z * _2012) + 1.0;
    float _2020 = (cbLight._m0[_2005].w * _2012) + 1.0;
    uint _2021 = _2004 + 5u;
    float _2027 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
    uint _2031 = _2004 + 4u;
    float _2040 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2044 = _2004 | 1u;
    float _2055 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_556, _557, _558));
    float _2058 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_556, _557, _558));
    float _4221 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _4232 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2063 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.3183098733425140380859375;
    float _2065 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2072 = ((cbLight._m0[_2021].x * _2027) * _2065) + (((cbLight._m0[_2031].x * _1993) * _2040) * _2063);
    float _2073 = ((_2027 * cbLight._m0[_2021].y) * _2065) + (((cbLight._m0[_2031].y * _1995) * _2040) * _2063);
    float _2074 = ((_2027 * cbLight._m0[_2021].z) * _2065) + (((cbLight._m0[_2031].z * _1997) * _2040) * _2063);
    uvec4 _2078 = floatBitsToUint(cbLight._m0[_2004 + 12u]);
    bool _2080 = _2078.x == 0u;
    float _2182;
    float _2184;
    float _2186;
    if (_2080)
    {
        _2182 = _2072;
        _2184 = _2073;
        _2186 = _2074;
    }
    else
    {
        uint _2190 = _2004 + 6u;
        float _2206 = (dot(vec3(cbLight._m0[_2004 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2207 = _2206 * _2206;
        float _4243 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2208 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2209 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2182 = (((cbLight._m0[_2190].x * 0.3183098733425140380859375) * _2208) * _2209) + _2072;
        _2184 = (((cbLight._m0[_2190].y * 0.3183098733425140380859375) * _2208) * _2209) + _2073;
        _2186 = (((cbLight._m0[_2190].z * 0.3183098733425140380859375) * _2208) * _2209) + _2074;
    }
    bool _2189 = _2078.y == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2189)
    {
        _2244 = _2182;
        _2246 = _2184;
        _2248 = _2186;
    }
    else
    {
        uint _2406 = _2004 + 7u;
        float _2422 = (dot(vec3(cbLight._m0[_2004 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4259 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2425 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2244 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2182;
        _2246 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2184;
        _2248 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2186;
    }
    uint _2251 = _2004 + 8u;
    float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _559) * 0.949999988079071044921875);
    float _2265 = _2264 * _2264;
    float _2266 = cbLight._m0[_2004].x + _636;
    float _2267 = cbLight._m0[_2004].y + _637;
    float _2268 = cbLight._m0[_2004].z + _638;
    float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
    float _2273 = _2272 * _2266;
    float _2274 = _2272 * _2267;
    float _2275 = _2272 * _2268;
    float _2276 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2004].xyz));
    float _4275 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2280 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _2281 = dot(vec3(_556, _557, _558), vec3(_2273, _2274, _2275));
    float _4297 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2273, _2274, _2275));
    float _4308 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2265 * _2265;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2305 = 1.0 - _2265;
    float _2316 = (0.5 / (((_2280 * ((_2279 * _2305) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2305) + _2265) * _2279))) * _2279;
    float _4319 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    uint _2332 = _2004 + 9u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _559) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2044].x + _636;
    float _2346 = cbLight._m0[_2044].y + _637;
    float _2347 = cbLight._m0[_2044].z + _638;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2044].xyz));
    float _4330 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2359 = dot(vec3(_556, _557, _558), vec3(_2352, _2353, _2354));
    float _4341 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2352, _2353, _2354));
    float _4352 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2344 * _2344;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2381 = 1.0 - _2344;
    float _2391 = (0.5 / (((_2280 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2381) + _2344) * _2358))) * _2358;
    float _4363 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    float _2403 = (((_2380 * cbLight._m0[_2332].x) * _2393) * _2027) + ((((cbLight._m0[_2251].x * _1993) * _2304) * _2318) * _2040);
    float _2404 = (((_2380 * cbLight._m0[_2332].y) * _2393) * _2027) + ((((cbLight._m0[_2251].y * _1995) * _2304) * _2318) * _2040);
    float _2405 = (((_2380 * cbLight._m0[_2332].z) * _2393) * _2027) + ((((cbLight._m0[_2251].z * _1997) * _2304) * _2318) * _2040);
    float _2461;
    float _2463;
    float _2465;
    if (_2080)
    {
        _2461 = _2403;
        _2463 = _2404;
        _2465 = _2405;
    }
    else
    {
        uint _2467 = _2004 + 2u;
        uint _2471 = _2004 + 10u;
        float _2485 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2467].w)) * _559) * 0.949999988079071044921875);
        float _2486 = _2485 * _2485;
        float _2487 = cbLight._m0[_2467].x + _636;
        float _2488 = cbLight._m0[_2467].y + _637;
        float _2489 = cbLight._m0[_2467].z + _638;
        float _2493 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
        float _2494 = _2493 * _2487;
        float _2495 = _2493 * _2488;
        float _2496 = _2493 * _2489;
        float _2497 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2467].xyz));
        float _4374 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2501 = dot(vec3(_556, _557, _558), vec3(_2494, _2495, _2496));
        float _4385 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2504 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _2505 = dot(vec3(cbLight._m0[_2467].xyz), vec3(_2494, _2495, _2496));
        float _4396 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2509 = _2486 * _2486;
        float _2513 = ((_2504 * _2504) * (_2509 + (-1.0))) + 1.0;
        float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2523 = 1.0 - _2486;
        float _2533 = (0.5 / (((_2280 * ((_2500 * _2523) + _2486)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2523) + _2486) * _2500))) * _2500;
        float _4407 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2509 / ((_2513 * _2513) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2461 = (((_2522 * cbLight._m0[_2471].x) * _2535) * _2536) + _2403;
        _2463 = (((_2522 * cbLight._m0[_2471].y) * _2535) * _2536) + _2404;
        _2465 = (((_2522 * cbLight._m0[_2471].z) * _2535) * _2536) + _2405;
    }
    float _2567;
    float _2569;
    float _2571;
    if (_2189)
    {
        _2567 = _2461;
        _2569 = _2463;
        _2571 = _2465;
    }
    else
    {
        uint _2578 = _2004 + 3u;
        uint _2582 = _2004 + 11u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _559) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _636;
        float _2599 = cbLight._m0[_2578].y + _637;
        float _2600 = cbLight._m0[_2578].z + _638;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2578].xyz));
        float _4423 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2612 = dot(vec3(_556, _557, _558), vec3(_2605, _2606, _2607));
        float _4434 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4445 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2633 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2634 = 1.0 - _2597;
        float _2644 = (0.5 / (((_2280 * ((_2611 * _2634) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2280 * _2634) + _2597) * _2611))) * _2611;
        float _4456 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
        _2567 = (((_2633 * cbLight._m0[_2582].x) * _2646) * _2647) + _2461;
        _2569 = (((_2633 * cbLight._m0[_2582].y) * _2646) * _2647) + _2463;
        _2571 = (((_2633 * cbLight._m0[_2582].z) * _2646) * _2647) + _2465;
    }
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    if (_2002.y == 0u)
    {
        uvec4 _2668 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2669 = _2668.x;
        uint _2680 = uint((float(_2668.y) * floor(float(uint(cbSceneParam._m0[85u].y * _645) / _2669))) + floor(float(uint(cbSceneParam._m0[85u].x * _644) / _2669)));
        float _2690 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2691 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        uint _2694 = uint(isnan(14.0) ? _2691 : (isnan(_2691) ? 14.0 : min(_2691, 14.0)));
        uvec4 _2699 = texelFetch(g_lightClusterGridBuffer, int(((_2694 << 2u) + (_2680 << 6u)) >> 2u));
        uint _2700 = _2699.x;
        uint _2701 = _2668.z;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((((1u << ((_2701 >> 4u) & 15u)) + 4294967295u) & _2700) == 0u) || ((_2701 & 240u) == 0u))
        {
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
        }
        else
        {
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2941)
                {
                    frontier_phi_66_pred = _2930;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2940;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2931 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _1778;
                        float _3116 = _3075.y - _1779;
                        float _3117 = _3075.z - _1780;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_663, _666, _669), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4482 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _1778;
                        float _3151 = (-0.0) - _1779;
                        float _3152 = (-0.0) - _1780;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3166 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _723;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3157 + _3122;
                        float _3178 = _3158 + _3123;
                        float _3179 = _3159 + _3124;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_663, _666, _669), vec3(_3157, _3158, _3159));
                        float _4498 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3191 = dot(vec3(_663, _666, _669), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4509 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3135 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3125) + _3200;
                        float _4520 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4531 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3198 * _3198) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2984 = (_3146 * _3094.x) + _3052;
                        _2985 = (_3146 * _3094.y) + _3053;
                        _2986 = (_3146 * _3094.z) + _3054;
                        _2981 = (_3226 * _3111.x) + _3049;
                        _2982 = (_3226 * _3111.y) + _3050;
                        _2983 = (_3226 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                _2791 = frontier_phi_66_pred;
                _2789 = frontier_phi_66_pred_1;
                _2787 = frontier_phi_66_pred_2;
                _2785 = frontier_phi_66_pred_3;
                _2783 = frontier_phi_66_pred_4;
                _2781 = frontier_phi_66_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2781;
                    _2926 = _2783;
                    _2927 = _2785;
                    _2928 = _2787;
                    _2929 = _2789;
                    _2930 = _2791;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
        }
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.z;
        uint _2797 = (_2795 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2797) & _2700) == 0u)
        {
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float _2919 = _2918 * _1778;
            float _2920 = _2918 * _1779;
            float _2921 = _2918 * _1780;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2797 < ((_2795 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3032 = _2780;
                float _3033 = _2782;
                float _3034 = _2784;
                float _3035 = _2786;
                float _3036 = _2788;
                float _3037 = _2790;
                uint _3038 = _2797;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2694 << 5u) + (_2680 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3048)
                    {
                        frontier_phi_72_pred = _3037;
                        frontier_phi_72_pred_1 = _3036;
                        frontier_phi_72_pred_2 = _3035;
                        frontier_phi_72_pred_3 = _3034;
                        frontier_phi_72_pred_4 = _3033;
                        frontier_phi_72_pred_5 = _3032;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3244 = _3032;
                        float _3245 = _3033;
                        float _3246 = _3034;
                        float _3247 = _3035;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        uint _3250 = _3047;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3335;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3261 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3261 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3261 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3261 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_1780, _3369.z, fma(_1779, _3369.y, _3369.x * _1778)) + _3369.w;
                            _3382 = !((fma(_1780, _3350.z, fma(_1779, _3350.y, _3350.x * _1778)) + _3350.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3276.x - _1778;
                                float _3410 = _3276.y - _1779;
                                float _3411 = _3276.z - _1780;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3277 * _3277));
                                float _4542 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                                float _3427 = sqrt(_3412) * _3292.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_663, _666, _669))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_1780, _3319.z, fma(_1779, _3319.y, _3319.x * _1778)) + _3319.w) / _3381;
                                float _3441 = (fma(_1780, _3335.z, fma(_1779, _3335.y, _3335.x * _1778)) + _3335.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4558 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _723;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2919;
                                float _3471 = _3417 - _2920;
                                float _3472 = _3418 - _2921;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4569 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3484 = dot(vec3(_663, _666, _669), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4580 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_663, _666, _669), vec3(_3416, _3417, _3418))) + _3493;
                                float _4591 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4602 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3447 * _3292.y;
                                frontier_phi_78_pred_1 = _3447 * _3292.x;
                                frontier_phi_78_pred_2 = _3521 * _3304.z;
                                frontier_phi_78_pred_3 = _3521 * _3304.y;
                                frontier_phi_78_pred_4 = _3521 * _3304.x;
                                frontier_phi_78_pred_5 = _3447 * _3292.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3529 = frontier_phi_78_pred;
                            _3528 = frontier_phi_78_pred_1;
                            _3527 = frontier_phi_78_pred_2;
                            _3526 = frontier_phi_78_pred_3;
                            _3525 = frontier_phi_78_pred_4;
                            _3530 = frontier_phi_78_pred_5;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3236;
                        frontier_phi_72_pred_1 = _3235;
                        frontier_phi_72_pred_2 = _3234;
                        frontier_phi_72_pred_3 = _3233;
                        frontier_phi_72_pred_4 = _3232;
                        frontier_phi_72_pred_5 = _3231;
                    }
                    _2904 = frontier_phi_72_pred;
                    _2902 = frontier_phi_72_pred_1;
                    _2900 = frontier_phi_72_pred_2;
                    _2898 = frontier_phi_72_pred_3;
                    _2896 = frontier_phi_72_pred_4;
                    _2894 = frontier_phi_72_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2894;
                        _3033 = _2896;
                        _3034 = _2898;
                        _3035 = _2900;
                        _3036 = _2902;
                        _3037 = _2904;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2904;
                frontier_phi_60_61_ladder_1 = _2902;
                frontier_phi_60_61_ladder_2 = _2898;
                frontier_phi_60_61_ladder_3 = _2896;
                frontier_phi_60_61_ladder_4 = _2894;
                frontier_phi_60_61_ladder_5 = _2900;
            }
            else
            {
                frontier_phi_60_61_ladder = _2790;
                frontier_phi_60_61_ladder_1 = _2788;
                frontier_phi_60_61_ladder_2 = _2784;
                frontier_phi_60_61_ladder_3 = _2782;
                frontier_phi_60_61_ladder_4 = _2780;
                frontier_phi_60_61_ladder_5 = _2786;
            }
            _2893 = frontier_phi_60_61_ladder_4;
            _2895 = frontier_phi_60_61_ladder_3;
            _2897 = frontier_phi_60_61_ladder_2;
            _2899 = frontier_phi_60_61_ladder_5;
            _2901 = frontier_phi_60_61_ladder_1;
            _2903 = frontier_phi_60_61_ladder;
        }
        float _2908 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2713 = (_2908 * _2899) + _2244;
        _2715 = (_2908 * _2901) + _2246;
        _2717 = (_2908 * _2903) + _2248;
        _2719 = ((_2893 * 0.039999999105930328369140625) * _2908) + _2567;
        _2721 = ((_2895 * 0.039999999105930328369140625) * _2908) + _2569;
        _2723 = ((_2897 * 0.039999999105930328369140625) * _2908) + _2571;
    }
    else
    {
        _2713 = _2244;
        _2715 = _2246;
        _2717 = _2248;
        _2719 = _2567;
        _2721 = _2569;
        _2723 = _2571;
    }
    float _4618 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4629 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4640 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    uint _2743 = _232 + 6u;
    float _2751 = _644 / cbSceneParam._m0[86u].x;
    float _2752 = _645 / cbSceneParam._m0[86u].y;
    vec4 _2766 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2768 = _2766.x;
    float _2769 = _2766.y;
    float _2770 = _2766.z;
    float _2771 = _2766.w;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2805 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2806 = _2805 / _577;
        float _2817 = _2806 * _629;
        float _2818 = _630 * _2806;
        float _2819 = (-0.0) - _2818;
        float _2821 = _2806 * _631;
        float _2823 = (cbSceneParam._m0[77u].w * _2819) / _2805;
        float _2824 = _2823 + cbSceneParam._m0[79u].w;
        float _2825 = cbSceneParam._m0[79u].w - _2818;
        float _2831 = sqrt(((_2817 * _2817) + (_2818 * _2818)) + (_2821 * _2821));
        float _2834 = (1.0 - (cbSceneParam._m0[77u].w / _2805)) * _2831;
        float _2839 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2841 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2994;
        if (abs((_2819 - _2823) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2994 = ((((_2824 > 0.0) ? exp2(_2839 * _2824) : (2.0 - exp2(_2841 * _2824))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2834;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : max(_2824, _2825));
            float _2956 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : min(_2824, _2825));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _2994 = ((abs(_2831 / _2819) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2839 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2839 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2841 * _2965) - exp2(_2841 * _2966)) * _2954))) + (_2834 * cbSceneParam._m0[80u].z);
        }
        vec4 _2996 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2751, _2752, 1.0), 0.0);
        float _3005 = exp2((_2994 * (-1.44269502162933349609375)) * (1.0 - _2996.w));
        float _3006 = log2(_3005);
        float _3022 = log2(_2771);
        _2843 = (exp2(_3022 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].x)) * _2996.x) / cbSceneParam._m0[78u].x)) + _2768;
        _2845 = (exp2(_3022 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].y)) * _2996.y) / cbSceneParam._m0[78u].y)) + _2769;
        _2847 = (exp2(_3022 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].z)) * _2996.z) / cbSceneParam._m0[78u].z)) + _2770;
        _2849 = _3005 * _2771;
    }
    else
    {
        _2843 = _2768;
        _2845 = _2769;
        _2847 = _2770;
        _2849 = _2771;
    }
    float _2861 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2862 = _2861 == 3.0;
    float _2863 = log2(_2849);
    float _2870 = exp2(_2863 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2713 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _707))) + ((_2719 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2871 = exp2(_2863 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2715 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _707))) + ((_2721 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2872 = exp2(_2863 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2717 + ((isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))) * _707))) + ((_2723 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1512)) * cbPerFrame._m0[3u].x));
    float _2881 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2881 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.y = _2881 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.z = _2881 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.w = cbInstanceData._m0[_2743].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2743].w;
}


