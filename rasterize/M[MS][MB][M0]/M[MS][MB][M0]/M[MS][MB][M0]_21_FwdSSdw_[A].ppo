#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1005;
float _3393;
float _3394;
float _3395;
float _3396;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _292 = _288.z;
    float _297 = (_288.x * 2.0) + (-1.0);
    float _299 = (_288.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3405 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))));
    float _309 = fma(_306, _210, fma(_299, _217, _297 * _203));
    float _312 = fma(_306, _211, fma(_299, _218, _297 * _204));
    float _315 = fma(_306, _212, fma(_299, _219, _297 * _205));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _357 = _355.x;
    float _358 = 1.0 - _357;
    float _367 = (cbMtdParam._m0[19u].x + dot(vec4(_319 * _309, _319 * _312, _319 * _315, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_357 - _358) * cbMtdParam._m0[24u].z) + _358) * cbMtdParam._m0[21u].z);
    float _3416 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _375 = (_368 * (cbMtdParam._m0[17u].x - _268)) + _268;
    float _376 = (_368 * (cbMtdParam._m0[17u].y - _269)) + _269;
    float _377 = (_368 * (cbMtdParam._m0[17u].z - _270)) + _270;
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _397 = (_390.x * 2.0) + (-1.0);
    float _398 = (_390.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_397, _398), vec2(_397, _398));
    float _3427 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _407 = ((_390.z - _292) * _368) + _292;
    float _417 = ((sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) - _306) * _368) + _306;
    float _420 = (((_397 - _297) * _368) + _297) + (cbMtdParam._m0[21u].x * _297);
    float _421 = (((_398 - _299) * _368) + _299) + (cbMtdParam._m0[21u].x * _299);
    float _426 = cbMtdParam._m0[22u].x + _288.w;
    float _429 = fma(_417, _210, fma(_421, _217, _420 * _203));
    float _432 = fma(_417, _211, fma(_421, _218, _420 * _204));
    float _435 = fma(_417, _212, fma(_421, _219, _420 * _205));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    float _440 = _439 * _429;
    float _441 = _439 * _432;
    float _442 = _439 * _435;
    float _3438 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _443 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3460 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3471 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3482 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _461 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _512 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _502);
    float _513 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _502);
    float _514 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _502);
    float _518 = inversesqrt(dot(vec3(_512, _513, _514), vec3(_512, _513, _514)));
    float _519 = _512 * _518;
    float _520 = _513 * _518;
    float _521 = _514 * _518;
    vec4 _526 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _528 = _526.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _685 = sqrt(((_512 * _512) + (_513 * _513)) + (_514 * _514));
        float _691 = (cbMatDynParam._m0[5u].x * _685) + cbMatDynParam._m0[5u].y;
        float _3493 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _696 = (cbMatDynParam._m0[5u].z * _685) + cbMatDynParam._m0[5u].w;
        float _3504 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) - _692)) + _692) < ((_528 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _540 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _541 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _561 = fma(_442, cbSceneParam._m0[5u].z, fma(_441, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _440));
    float _564 = fma(_442, cbSceneParam._m0[6u].z, fma(_441, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _440));
    float _567 = fma(_442, cbSceneParam._m0[7u].z, fma(_441, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _440));
    uint _580 = _222 + 9u;
    uint _581 = _580 + uint(cbMatDynParam._m0[0u].w);
    float _587 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_581].x;
    float _588 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_581].y;
    float _589 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_581].z;
    float _3515 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    vec4 _601 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _540, cbSceneParam._m0[86u].y * _541));
    float _605 = ((isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * TEXCOORD_5.w) * _601.x;
    float _606 = dot(vec3(_440, _441, _442), vec3(_519, _520, _521));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _440) - _519;
    float _614 = (_609 * _441) - _520;
    float _615 = (_609 * _442) - _521;
    float _619 = abs(dot(vec3(_519, _520, _521), vec3(_440, _441, _442)));
    float _3548 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_443);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _733 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _737 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _762 = _666 + _440;
        float _763 = _670 + _441;
        float _764 = _674 + _442;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_440, _441, _442), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3596 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_440, _441, _442), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3629 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_440, _441, _442), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3662 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1051 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1055 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1078 = _666 + _440;
        float _1079 = _670 + _441;
        float _1080 = _674 + _442;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_440, _441, _442), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3725 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_440, _441, _442), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3758 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_440, _441, _442), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3791 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1005;
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = _1005;
        _1327 = _1005;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1017)) + _1017;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1018)) + _1018;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1019)) + _1019;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _613 * 0.5;
    float _1385 = _614 * 0.5;
    float _1386 = _615 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _443);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1501 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1505 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1509 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1512 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1515 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1518 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1546;
        if (_1512 > 0.0)
        {
            _1546 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1546 = frontier_phi_17_15_ladder;
        }
        float _1770;
        if (_1515 > 0.0)
        {
            _1770 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1770 = frontier_phi_26_22_ladder;
        }
        float _2016;
        if (_1518 > 0.0)
        {
            _2016 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2016 = frontier_phi_38_33_ladder;
        }
        float _2018 = isnan(_1770) ? _1546 : (isnan(_1546) ? _1770 : min(_1546, _1770));
        float _2019 = isnan(_2016) ? _2018 : (isnan(_2018) ? _2016 : min(_2018, _2016));
        float _2023 = (_2019 * _1512) + _1501;
        float _2024 = (_2019 * _1515) + _1505;
        float _2025 = (_2019 * _1518) + _1509;
        float _2026 = _2019 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2026;
        float _2030 = _2026 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 > _2030) || ((_2024 < _2028) || ((_2023 < _2028) || (_2023 > _2030))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2025, cbModelParam._m0[9u].z, fma(_2024, cbModelParam._m0[9u].y, _2023 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2025, cbModelParam._m0[10u].z, fma(_2024, cbModelParam._m0[10u].y, _2023 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2025, cbModelParam._m0[11u].z, fma(_2024, cbModelParam._m0[11u].y, _2023 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_16_38_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1534 = frontier_phi_16_38_ladder_2;
        _1536 = frontier_phi_16_38_ladder_1;
        _1538 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1453);
        _1534 = _1522.x * cbModelParam._m0[1u].y;
        _1536 = _1522.y * cbModelParam._m0[1u].y;
        _1538 = _1522.z * cbModelParam._m0[1u].y;
    }
    float _1542 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _443);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1542 : min(cbModelParam._m0[25u].w, _1542));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1597 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1601 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1605 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1608 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1611 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1614 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1775;
        if (_1608 > 0.0)
        {
            _1775 = abs((1.0 - _1597) / _1608);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1597 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1775 = frontier_phi_28_24_ladder;
        }
        float _2043;
        if (_1611 > 0.0)
        {
            _2043 = abs((1.0 - _1601) / _1611);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1601 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2043 = frontier_phi_40_35_ladder;
        }
        float _2248;
        if (_1614 > 0.0)
        {
            _2248 = abs((1.0 - _1605) / _1614);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1605 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2248 = frontier_phi_49_46_ladder;
        }
        float _2250 = isnan(_2043) ? _1775 : (isnan(_1775) ? _2043 : min(_1775, _2043));
        float _2251 = isnan(_2248) ? _2250 : (isnan(_2250) ? _2248 : min(_2250, _2248));
        float _2255 = (_2251 * _1608) + _1597;
        float _2256 = (_2251 * _1611) + _1601;
        float _2257 = (_2251 * _1614) + _1605;
        float _2258 = _2251 * 9.9999997473787516355514526367188e-05;
        float _2259 = (-1.0) - _2258;
        float _2261 = _2258 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2257 > _2261) || ((_2257 < _2259) || ((_2256 > _2261) || ((_2256 < _2259) || ((_2255 < _2259) || (_2255 > _2261))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2456 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2257, cbModelParam._m0[17u].z, fma(_2256, cbModelParam._m0[17u].y, _2255 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2257, cbModelParam._m0[18u].z, fma(_2256, cbModelParam._m0[18u].y, _2255 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2257, cbModelParam._m0[19u].z, fma(_2256, cbModelParam._m0[19u].y, _2255 * cbModelParam._m0[19u].x))), _1543);
            frontier_phi_25_49_ladder = _2456.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2456.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2456.x * cbModelParam._m0[1u].z;
        }
        _1633 = frontier_phi_25_49_ladder_2;
        _1635 = frontier_phi_25_49_ladder_1;
        _1637 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1543);
        _1633 = _1617.x * cbModelParam._m0[1u].z;
        _1635 = _1617.y * cbModelParam._m0[1u].z;
        _1637 = _1617.z * cbModelParam._m0[1u].z;
    }
    float _1649 = ((((1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_634 * _621)) * _605;
    float _1650 = _1649 * ((cbModelParam._m0[1u].w * (_1633 - _1534)) + _1534);
    float _1651 = _1649 * ((cbModelParam._m0[1u].w * (_1635 - _1536)) + _1536);
    float _1652 = _1649 * ((cbModelParam._m0[1u].w * (_1637 - _1538)) + _1538);
    float _1655 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, _1650 * cbSceneParam._m0[91u].x));
    vec4 _1669 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_540, _541));
    float _1671 = _1669.w;
    float _1683 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1671);
    float _1684 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1671);
    float _1685 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1671);
    uvec4 _1689 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1691 = _1689.x * 14u;
    uint _1692 = _1691 + 13u;
    float _1699 = _605 + (-1.0);
    float _1704 = (cbLight._m0[_1692].x * _1699) + 1.0;
    float _1705 = (cbLight._m0[_1692].y * _1699) + 1.0;
    float _1706 = (cbLight._m0[_1692].z * _1699) + 1.0;
    float _1707 = (cbLight._m0[_1692].w * _1699) + 1.0;
    uint _1708 = _1691 + 5u;
    float _1714 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
    uint _1718 = _1691 + 4u;
    float _1728 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1732 = _1691 | 1u;
    float _1743 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_440, _441, _442));
    float _1746 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_440, _441, _442));
    float _3927 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _3938 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1751 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1753 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1760 = ((cbLight._m0[_1708].x * _1714) * _1753) + (((cbLight._m0[_1718].x * _1683) * _1728) * _1751);
    float _1761 = ((_1714 * cbLight._m0[_1708].y) * _1753) + (((cbLight._m0[_1718].y * _1684) * _1728) * _1751);
    float _1762 = ((_1714 * cbLight._m0[_1708].z) * _1753) + (((cbLight._m0[_1718].z * _1685) * _1728) * _1751);
    uvec4 _1767 = floatBitsToUint(cbLight._m0[_1691 + 12u]);
    bool _1769 = _1767.x == 0u;
    float _1780;
    float _1782;
    float _1784;
    if (_1769)
    {
        _1780 = _1760;
        _1782 = _1761;
        _1784 = _1762;
    }
    else
    {
        uint _1788 = _1691 + 6u;
        float _1804 = (dot(vec3(cbLight._m0[_1691 + 2u].xyz), vec3(_440, _441, _442)) * 0.5) + 0.5;
        float _1805 = _1804 * _1804;
        float _3949 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1807 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1780 = (((cbLight._m0[_1788].x * 0.3183098733425140380859375) * _1806) * _1807) + _1760;
        _1782 = (((cbLight._m0[_1788].y * 0.3183098733425140380859375) * _1806) * _1807) + _1761;
        _1784 = (((cbLight._m0[_1788].z * 0.3183098733425140380859375) * _1806) * _1807) + _1762;
    }
    bool _1787 = _1767.y == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1787)
    {
        _1825 = _1780;
        _1827 = _1782;
        _1829 = _1784;
    }
    else
    {
        uint _1987 = _1691 + 7u;
        float _2003 = (dot(vec3(cbLight._m0[_1691 + 3u].xyz), vec3(_440, _441, _442)) * 0.5) + 0.5;
        float _2004 = _2003 * _2003;
        float _3965 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2005 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2006 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _1825 = (((cbLight._m0[_1987].x * 0.3183098733425140380859375) * _2005) * _2006) + _1780;
        _1827 = (((cbLight._m0[_1987].y * 0.3183098733425140380859375) * _2005) * _2006) + _1782;
        _1829 = (((cbLight._m0[_1987].z * 0.3183098733425140380859375) * _2005) * _2006) + _1784;
    }
    uint _1832 = _1691 + 8u;
    float _1845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1691].w)) * _443) * 0.949999988079071044921875);
    float _1846 = _1845 * _1845;
    float _1847 = cbLight._m0[_1691].x + _519;
    float _1848 = cbLight._m0[_1691].y + _520;
    float _1849 = cbLight._m0[_1691].z + _521;
    float _1853 = inversesqrt(dot(vec3(_1847, _1848, _1849), vec3(_1847, _1848, _1849)));
    float _1854 = _1853 * _1847;
    float _1855 = _1853 * _1848;
    float _1856 = _1853 * _1849;
    float _1857 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1691].xyz));
    float _3981 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _1861 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1862 = dot(vec3(_440, _441, _442), vec3(_1854, _1855, _1856));
    float _4003 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1866 = dot(vec3(cbLight._m0[_1691].xyz), vec3(_1854, _1855, _1856));
    float _4014 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1870 = _1846 * _1846;
    float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
    float _1885 = (exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1886 = 1.0 - _1846;
    float _1897 = (0.5 / (((_1861 * ((_1860 * _1886) + _1846)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _1886) + _1846) * _1860))) * _1860;
    float _4025 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1899 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
    uint _1913 = _1691 + 9u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _443) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1732].x + _519;
    float _1927 = cbLight._m0[_1732].y + _520;
    float _1928 = cbLight._m0[_1732].z + _521;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1732].xyz));
    float _4036 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _1940 = dot(vec3(_440, _441, _442), vec3(_1933, _1934, _1935));
    float _4047 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1933, _1934, _1935));
    float _4058 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1925 * _1925;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1961 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1962 = 1.0 - _1925;
    float _1972 = (0.5 / (((_1861 * ((_1939 * _1962) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _1962) + _1925) * _1939))) * _1939;
    float _4069 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    float _1984 = (((_1961 * cbLight._m0[_1913].x) * _1974) * _1714) + ((((cbLight._m0[_1832].x * _1683) * _1885) * _1899) * _1728);
    float _1985 = (((_1961 * cbLight._m0[_1913].y) * _1974) * _1714) + ((((cbLight._m0[_1832].y * _1684) * _1885) * _1899) * _1728);
    float _1986 = (((_1961 * cbLight._m0[_1913].z) * _1974) * _1714) + ((((cbLight._m0[_1832].z * _1685) * _1885) * _1899) * _1728);
    float _2048;
    float _2050;
    float _2052;
    if (_1769)
    {
        _2048 = _1984;
        _2050 = _1985;
        _2052 = _1986;
    }
    else
    {
        uint _2054 = _1691 + 2u;
        uint _2058 = _1691 + 10u;
        float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _443) * 0.949999988079071044921875);
        float _2073 = _2072 * _2072;
        float _2074 = cbLight._m0[_2054].x + _519;
        float _2075 = cbLight._m0[_2054].y + _520;
        float _2076 = cbLight._m0[_2054].z + _521;
        float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
        float _2081 = _2080 * _2074;
        float _2082 = _2080 * _2075;
        float _2083 = _2080 * _2076;
        float _2084 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_2054].xyz));
        float _4080 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2088 = dot(vec3(_440, _441, _442), vec3(_2081, _2082, _2083));
        float _4091 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2092 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2081, _2082, _2083));
        float _4102 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2096 = _2073 * _2073;
        float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
        float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2110 = 1.0 - _2073;
        float _2120 = (0.5 / (((_1861 * ((_2087 * _2110) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _2110) + _2073) * _2087))) * _2087;
        float _4113 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2048 = (((_2109 * cbLight._m0[_2058].x) * _2122) * _2123) + _1984;
        _2050 = (((_2109 * cbLight._m0[_2058].y) * _2122) * _2123) + _1985;
        _2052 = (((_2109 * cbLight._m0[_2058].z) * _2122) * _2123) + _1986;
    }
    float _2158;
    float _2160;
    float _2162;
    if (_1787)
    {
        _2158 = _2048;
        _2160 = _2050;
        _2162 = _2052;
    }
    else
    {
        uint _2169 = _1691 + 3u;
        uint _2173 = _1691 + 11u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _443) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _519;
        float _2190 = cbLight._m0[_2169].y + _520;
        float _2191 = cbLight._m0[_2169].z + _521;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_2169].xyz));
        float _4129 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2203 = dot(vec3(_440, _441, _442), vec3(_2196, _2197, _2198));
        float _4140 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4151 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2225 = 1.0 - _2188;
        float _2235 = (0.5 / (((_1861 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1861 * _2225) + _2188) * _2202))) * _2202;
        float _4162 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
        _2158 = (((_2224 * cbLight._m0[_2173].x) * _2237) * _2238) + _2048;
        _2160 = (((_2224 * cbLight._m0[_2173].y) * _2237) * _2238) + _2050;
        _2162 = (((_2224 * cbLight._m0[_2173].z) * _2237) * _2238) + _2052;
    }
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    if (_1689.y == 0u)
    {
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2313;
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2313;
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2313;
        uvec4 _2328 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2329 = _2328.x;
        uint _2340 = uint((float(_2328.y) * floor(float(uint(cbSceneParam._m0[85u].y * _541) / _2329))) + floor(float(uint(cbSceneParam._m0[85u].x * _540) / _2329)));
        float _2350 = (log2(_2316 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2351 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        uint _2354 = uint(isnan(14.0) ? _2351 : (isnan(_2351) ? 14.0 : min(_2351, 14.0)));
        uvec4 _2359 = texelFetch(g_lightClusterGridBuffer, int(((_2354 << 2u) + (_2340 << 6u)) >> 2u));
        uint _2360 = _2359.x;
        uint _2361 = _2328.z;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        if (((((1u << ((_2361 >> 4u) & 15u)) + 4294967295u) & _2360) == 0u) || ((_2361 & 240u) == 0u))
        {
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
        }
        else
        {
            float _2462;
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            uint _2620 = 0u;
            uint _2629;
            bool _2630;
            for (;;)
            {
                _2629 = texelFetch(g_lightClassification, int((((_2354 << 5u) + (_2340 << 9u)) + (_2620 << 2u)) >> 2u)).x;
                _2630 = _2629 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2630)
                {
                    frontier_phi_66_pred = _2614;
                    frontier_phi_66_pred_1 = _2619;
                    frontier_phi_66_pred_2 = _2618;
                    frontier_phi_66_pred_3 = _2617;
                    frontier_phi_66_pred_4 = _2616;
                    frontier_phi_66_pred_5 = _2615;
                }
                else
                {
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    uint _2765;
                    _2759 = _2614;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2619;
                    _2765 = _2629;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    for (;;)
                    {
                        uint _2769 = uint(findLSB(_2765)) + (_2620 << 5u);
                        uint _2766 = (_2765 + 4294967295u) & _2765;
                        uint _2771 = _2769 * 48u;
                        vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 3u)).x));
                        uint _2791 = (_2769 * 48u) + 4u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2810 = (_2769 * 48u) + 8u;
                        vec3 _2821 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x));
                        float _2825 = _2785.x - _2314;
                        float _2826 = _2785.y - _2315;
                        float _2827 = _2785.z - _2316;
                        float _2828 = dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827));
                        float _2831 = inversesqrt(_2828);
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2835 = dot(vec3(_561, _564, _567), vec3(_2832, _2833, _2834));
                        float _2840 = 1.0 - (_2828 * _2785.w);
                        float _4188 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2842 = sqrt(_2828) * _2804.w;
                        float _2845 = 1.39999997615814208984375 / (_2842 + 1.39999997615814208984375);
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2835) + _2846;
                        float _2852 = _2842 * _2842;
                        float _2856 = ((isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))) * _2841) / ((_2852 * 0.699999988079071044921875) + 1.0);
                        float _2860 = (-0.0) - _2314;
                        float _2861 = (-0.0) - _2315;
                        float _2862 = (-0.0) - _2316;
                        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
                        float _2867 = _2866 * _2860;
                        float _2868 = _2866 * _2861;
                        float _2869 = _2866 * _2862;
                        float _2877 = exp2(log2(1.0 / ((_2852 * 3.5) + 5.0)) * 0.25);
                        float _2878 = 1.0 - _621;
                        float _2885 = sqrt(1.0 - ((1.0 - (_2878 * _2878)) * (1.0 - (_2877 * _2877))));
                        float _2886 = _2885 * _2885;
                        float _2887 = _2886 * _2886;
                        float _2888 = _2867 + _2832;
                        float _2889 = _2868 + _2833;
                        float _2890 = _2869 + _2834;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2898 = dot(vec3(_561, _564, _567), vec3(_2867, _2868, _2869));
                        float _4204 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2902 = dot(vec3(_561, _564, _567), vec3(_2894 * _2888, _2894 * _2889, _2894 * _2890));
                        float _4215 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2909 = ((_2905 * _2905) * (_2887 + (-1.0))) + 1.0;
                        float _2910 = _2845 * _2886;
                        float _2911 = _2910 * _2910;
                        float _2914 = ((1.0 - _2911) * _2835) + _2911;
                        float _4226 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                        float _2915 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2916 = 1.0 - _2886;
                        float _2926 = (0.5 / (((_2915 * ((_2901 * _2916) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2915 * _2916) + _2886) * _2901))) * _2915;
                        float _4237 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2937 = (((_2887 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_2909 * _2909) * ((_2852 * 2.1991131305694580078125) + 3.141590118408203125))) * _2841;
                        _2689 = (_2856 * _2804.x) + _2762;
                        _2690 = (_2856 * _2804.y) + _2763;
                        _2691 = (_2856 * _2804.z) + _2764;
                        _2686 = (_2937 * _2821.x) + _2759;
                        _2687 = (_2937 * _2821.y) + _2760;
                        _2688 = (_2937 * _2821.z) + _2761;
                        if (_2766 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2759 = _2686;
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2766;
                        }
                    }
                    frontier_phi_66_pred = _2686;
                    frontier_phi_66_pred_1 = _2691;
                    frontier_phi_66_pred_2 = _2690;
                    frontier_phi_66_pred_3 = _2689;
                    frontier_phi_66_pred_4 = _2688;
                    frontier_phi_66_pred_5 = _2687;
                }
                _2462 = frontier_phi_66_pred;
                _2472 = frontier_phi_66_pred_1;
                _2470 = frontier_phi_66_pred_2;
                _2468 = frontier_phi_66_pred_3;
                _2466 = frontier_phi_66_pred_4;
                _2464 = frontier_phi_66_pred_5;
                uint _2621 = _2620 + 1u;
                if (_2621 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2614 = _2462;
                    _2615 = _2464;
                    _2616 = _2466;
                    _2617 = _2468;
                    _2618 = _2470;
                    _2619 = _2472;
                    _2620 = _2621;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
        }
        uvec4 _2475 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2476 = _2475.z;
        uint _2478 = (_2476 >> 8u) & 15u;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        if (((4294967295u << _2478) & _2360) == 0u)
        {
            _2582 = _2461;
            _2584 = _2463;
            _2586 = _2465;
            _2588 = _2467;
            _2590 = _2469;
            _2592 = _2471;
        }
        else
        {
            float _2607 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
            float _2608 = _2607 * _2314;
            float _2609 = _2607 * _2315;
            float _2610 = _2607 * _2316;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2478 < ((_2476 >> 12u) & 15u))
            {
                float _2583;
                float _2585;
                float _2587;
                float _2589;
                float _2591;
                float _2593;
                float _2742 = _2461;
                float _2743 = _2463;
                float _2744 = _2465;
                float _2745 = _2467;
                float _2746 = _2469;
                float _2747 = _2471;
                uint _2748 = _2478;
                uint _2757;
                bool _2758;
                for (;;)
                {
                    _2757 = texelFetch(g_lightClassification, int((((_2354 << 5u) + (_2340 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                    _2758 = _2757 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2758)
                    {
                        frontier_phi_77_pred = _2747;
                        frontier_phi_77_pred_1 = _2746;
                        frontier_phi_77_pred_2 = _2745;
                        frontier_phi_77_pred_3 = _2744;
                        frontier_phi_77_pred_4 = _2743;
                        frontier_phi_77_pred_5 = _2742;
                    }
                    else
                    {
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _2964 = _2742;
                        float _2965 = _2743;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        float _2969 = _2747;
                        uint _2970 = _2757;
                        uint _2971;
                        vec4 _2996;
                        float _2997;
                        vec4 _3012;
                        vec3 _3024;
                        vec4 _3040;
                        vec4 _3056;
                        float _3102;
                        bool _3103;
                        for (;;)
                        {
                            uint _2981 = ((_2748 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2970));
                            _2971 = (_2970 + 4294967295u) & _2970;
                            uint _2983 = _2981 * 40u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            _2997 = _2996.w;
                            uint _2999 = (_2981 * 40u) + 4u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2981 * 40u) + 8u;
                            _3024 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x));
                            uint _3027 = (_2981 * 40u) + 16u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3043 = (_2981 * 40u) + 20u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_2981 * 40u) + 24u;
                            vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3077 = (_2981 * 40u) + 28u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3102 = fma(_2316, _3090.z, fma(_2315, _3090.y, _3090.x * _2314)) + _3090.w;
                            _3103 = !((fma(_2316, _3071.z, fma(_2315, _3071.y, _3071.x * _2314)) + _3071.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3103)
                            {
                                float _3130 = _2996.x - _2314;
                                float _3131 = _2996.y - _2315;
                                float _3132 = _2996.z - _2316;
                                float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                                float _3136 = inversesqrt(_3133);
                                float _3137 = _3136 * _3130;
                                float _3138 = _3136 * _3131;
                                float _3139 = _3136 * _3132;
                                float _3143 = 1.0 - (_3133 / (_2997 * _2997));
                                float _4248 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3148 = sqrt(_3133) * _3012.w;
                                float _3150 = 1.39999997615814208984375 / (_3148 + 1.39999997615814208984375);
                                float _3151 = _3150 * _3150;
                                float _3154 = ((1.0 - _3151) * dot(vec3(_3137, _3138, _3139), vec3(_561, _564, _567))) + _3151;
                                float _3157 = _3148 * _3148;
                                float _3161 = (fma(_2316, _3040.z, fma(_2315, _3040.y, _3040.x * _2314)) + _3040.w) / _3102;
                                float _3162 = (fma(_2316, _3056.z, fma(_2315, _3056.y, _3056.x * _2314)) + _3056.w) / _3102;
                                float _3166 = 1.0 - dot(vec2(_3161, _3162), vec2(_3161, _3162));
                                float _4264 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3168 = _3167 * (((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3144) / ((_3157 * 0.699999988079071044921875) + 1.0));
                                float _3180 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                                float _3181 = 1.0 - _621;
                                float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                                float _3189 = _3188 * _3188;
                                float _3190 = _3189 * _3189;
                                float _3191 = _3137 - _2608;
                                float _3192 = _3138 - _2609;
                                float _3193 = _3139 - _2610;
                                float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                                float _3201 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2608, (-0.0) - _2609, (-0.0) - _2610));
                                float _4275 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3204 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3205 = dot(vec3(_561, _564, _567), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                                float _4286 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                                float _3213 = _3150 * _3189;
                                float _3214 = _3213 * _3213;
                                float _3220 = ((1.0 - _3214) * dot(vec3(_561, _564, _567), vec3(_3137, _3138, _3139))) + _3214;
                                float _4297 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3222 = 1.0 - _3189;
                                float _3232 = (0.5 / (((_3221 * ((_3204 * _3222) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3189) * _3204))) * _3221;
                                float _4308 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3242 = (_3167 * _3144) * (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3212 * _3212) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3168 * _3012.y;
                                frontier_phi_83_pred_1 = _3168 * _3012.x;
                                frontier_phi_83_pred_2 = _3242 * _3024.z;
                                frontier_phi_83_pred_3 = _3242 * _3024.y;
                                frontier_phi_83_pred_4 = _3242 * _3024.x;
                                frontier_phi_83_pred_5 = _3168 * _3012.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3250 = frontier_phi_83_pred;
                            _3249 = frontier_phi_83_pred_1;
                            _3248 = frontier_phi_83_pred_2;
                            _3247 = frontier_phi_83_pred_3;
                            _3246 = frontier_phi_83_pred_4;
                            _3251 = frontier_phi_83_pred_5;
                            _2954 = _3249 + _2967;
                            _2955 = _3250 + _2968;
                            _2956 = _3251 + _2969;
                            _2951 = _3246 + _2964;
                            _2952 = _3247 + _2965;
                            _2953 = _3248 + _2966;
                            if (_2971 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2971;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2956;
                        frontier_phi_77_pred_1 = _2955;
                        frontier_phi_77_pred_2 = _2954;
                        frontier_phi_77_pred_3 = _2953;
                        frontier_phi_77_pred_4 = _2952;
                        frontier_phi_77_pred_5 = _2951;
                    }
                    _2593 = frontier_phi_77_pred;
                    _2591 = frontier_phi_77_pred_1;
                    _2589 = frontier_phi_77_pred_2;
                    _2587 = frontier_phi_77_pred_3;
                    _2585 = frontier_phi_77_pred_4;
                    _2583 = frontier_phi_77_pred_5;
                    uint _2749 = _2748 + 1u;
                    if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2742 = _2583;
                        _2743 = _2585;
                        _2744 = _2587;
                        _2745 = _2589;
                        _2746 = _2591;
                        _2747 = _2593;
                        _2748 = _2749;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2587;
                frontier_phi_58_59_ladder_1 = _2593;
                frontier_phi_58_59_ladder_2 = _2591;
                frontier_phi_58_59_ladder_3 = _2589;
                frontier_phi_58_59_ladder_4 = _2585;
                frontier_phi_58_59_ladder_5 = _2583;
            }
            else
            {
                frontier_phi_58_59_ladder = _2465;
                frontier_phi_58_59_ladder_1 = _2471;
                frontier_phi_58_59_ladder_2 = _2469;
                frontier_phi_58_59_ladder_3 = _2467;
                frontier_phi_58_59_ladder_4 = _2463;
                frontier_phi_58_59_ladder_5 = _2461;
            }
            _2582 = frontier_phi_58_59_ladder_5;
            _2584 = frontier_phi_58_59_ladder_4;
            _2586 = frontier_phi_58_59_ladder;
            _2588 = frontier_phi_58_59_ladder_3;
            _2590 = frontier_phi_58_59_ladder_2;
            _2592 = frontier_phi_58_59_ladder_1;
        }
        float _2597 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2373 = (_2597 * _2588) + _1825;
        _2375 = (_2597 * _2590) + _1827;
        _2377 = (_2597 * _2592) + _1829;
        _2379 = ((_2582 * 0.039999999105930328369140625) * _2597) + _2158;
        _2381 = ((_2584 * 0.039999999105930328369140625) * _2597) + _2160;
        _2383 = ((_2586 * 0.039999999105930328369140625) * _2597) + _2162;
    }
    else
    {
        _2373 = _1825;
        _2375 = _1827;
        _2377 = _1829;
        _2379 = _2158;
        _2381 = _2160;
        _2383 = _2162;
    }
    float _4324 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4335 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4346 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2400 = ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2373 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _605))) + ((_2379 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2401 = ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2375 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _605))) + ((_2381 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2402 = ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2377 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _605))) + ((_2383 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    uint _2403 = _222 + 6u;
    float _2411 = _540 / cbSceneParam._m0[86u].x;
    float _2412 = _541 / cbSceneParam._m0[86u].y;
    vec4 _2426 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, (log2((isnan(cbSceneParam._m0[77u].w) ? _461 : (isnan(_461) ? cbSceneParam._m0[77u].w : min(_461, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2428 = _2426.x;
    float _2429 = _2426.y;
    float _2430 = _2426.z;
    float _2431 = _2426.w;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    if (_461 > cbSceneParam._m0[78u].w)
    {
        float _2486 = isnan(_461) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _461 : min(cbSceneParam._m0[80u].w, _461));
        float _2487 = _2486 / _461;
        float _2498 = _2487 * _512;
        float _2499 = _513 * _2487;
        float _2500 = (-0.0) - _2499;
        float _2502 = _2487 * _514;
        float _2504 = (cbSceneParam._m0[77u].w * _2500) / _2486;
        float _2505 = _2504 + cbSceneParam._m0[79u].w;
        float _2506 = cbSceneParam._m0[79u].w - _2499;
        float _2512 = sqrt(((_2498 * _2498) + (_2499 * _2499)) + (_2502 * _2502));
        float _2515 = (1.0 - (cbSceneParam._m0[77u].w / _2486)) * _2512;
        float _2520 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2522 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2699;
        if (abs((_2500 - _2504) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2699 = ((((_2505 > 0.0) ? exp2(_2520 * _2505) : (2.0 - exp2(_2522 * _2505))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2515;
        }
        else
        {
            float _2643 = 1.0 / cbSceneParam._m0[80u].x;
            float _2644 = isnan(_2506) ? _2505 : (isnan(_2505) ? _2506 : max(_2505, _2506));
            float _2645 = isnan(_2506) ? _2505 : (isnan(_2505) ? _2506 : min(_2505, _2506));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            _2699 = ((abs(_2512 / _2500) * cbSceneParam._m0[80u].y) * ((((_2654 - _2655) * 2.0) - ((exp2(_2520 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0)))) - exp2(_2520 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))))) * _2643)) - ((exp2(_2522 * _2654) - exp2(_2522 * _2655)) * _2643))) + (_2515 * cbSceneParam._m0[80u].z);
        }
        vec4 _2701 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2411, _2412, 1.0), 0.0);
        float _2710 = exp2((_2699 * (-1.44269502162933349609375)) * (1.0 - _2701.w));
        float _2711 = log2(_2710);
        float _2727 = log2(_2431);
        _2524 = (exp2(_2727 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].x)) * _2701.x) / cbSceneParam._m0[78u].x)) + _2428;
        _2526 = (exp2(_2727 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].y)) * _2701.y) / cbSceneParam._m0[78u].y)) + _2429;
        _2528 = (exp2(_2727 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].z)) * _2701.z) / cbSceneParam._m0[78u].z)) + _2430;
        _2530 = _2710 * _2431;
    }
    else
    {
        _2524 = _2428;
        _2526 = _2429;
        _2528 = _2430;
        _2530 = _2431;
    }
    bool _2737;
    vec4 _2540;
    vec4 _2562;
    float _2564;
    float _2568;
    float _2569;
    float _2570;
    float _2571;
    bool _2581;
    for (;;)
    {
        _2540 = cbMatDynParam._m0[0u];
        float _2542 = roundEven(_2540.y);
        bool _2543 = _2542 == 3.0;
        float _2544 = log2(_2530);
        float _2551 = exp2(_2544 * cbSceneParam._m0[78u].x) * _2400;
        float _2552 = exp2(_2544 * cbSceneParam._m0[78u].y) * _2401;
        float _2553 = exp2(_2544 * cbSceneParam._m0[78u].z) * _2402;
        float _2560 = _528 + (-0.5);
        _2562 = cbMtdParam._m0[1u];
        _2564 = _2562.y * _2560;
        float _2567 = (_2542 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2568 = _2567 * (_2543 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2524)));
        _2569 = _2567 * (_2543 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2526)));
        _2570 = _2567 * (_2543 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2528)));
        _2571 = _2560 * 0.999000012874603271484375;
        _2581 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2581)
        {
            if ((cbInstanceData._m0[_222 + 7u].x + _2571) < 0.5)
            {
                _2737 = true;
                break;
            }
        }
        uint _2678 = _580 + uint(_2540.w);
        if ((cbInstanceData._m0[_2678].w < 1.0) && ((cbInstanceData._m0[_2678].w + _2571) < 0.5))
        {
            _2737 = true;
            break;
        }
        if ((_2564 + 1.0) < _2562.x)
        {
            _2737 = true;
            break;
        }
        _2737 = false;
        break;
    }
    float _2942;
    if (_2737)
    {
        discard_state = true;
        _2942 = 0.0;
    }
    else
    {
        _2942 = cbInstanceData._m0[_2403].w;
    }
    SV_Target.x = _2568;
    SV_Target.y = _2569;
    SV_Target.z = _2570;
    SV_Target.w = _2942;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2403].w;
    discard_exit();
}


