#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1235;
float _3596;
float _3597;
float _3598;
float _3599;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3608 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _382) + _430;
    float _442 = ((((_409.x - _428) * _382) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _382) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3619 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _483 = _481.x;
    float _484 = 1.0 - _483;
    float _490 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _493 = ((isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : min(_490, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _502 = (_493 - ((((((_483 - _484) * cbMtdParam._m0[24u].z) + _484) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _493))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3640 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _510 = (_503 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _511 = (_503 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _512 = (_503 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _526 = _524.x;
    float _527 = 1.0 - _526;
    float _554 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_526 - _527) * cbMtdParam._m0[24u].w) + _527) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3651 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _563 = ((((cbMtdParam._m0[10u].x - _510) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _555) + _510;
    float _564 = ((((cbMtdParam._m0[10u].y - _511) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _555) + _511;
    float _565 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _512)) * _555) + _512;
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _586 = (_579.x * 2.0) + (-1.0);
    float _587 = (_579.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3662 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _596 = (_503 * (_579.z - _439)) + _439;
    float _599 = ((cbMtdParam._m0[23u].y - _596) * _555) + _596;
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _624 = (_618.x * 2.0) + (-1.0);
    float _625 = (_618.y * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _3673 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _643 = (((_586 - _442) + (cbMtdParam._m0[21u].x * _442)) * _503) + _442;
    float _644 = (((_587 - _444) + (cbMtdParam._m0[21u].x * _444)) * _503) + _444;
    float _645 = (_503 * (sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) - _450)) + _450;
    float _656 = (((_624 - _643) + (_643 * cbMtdParam._m0[22u].z)) * _555) + _643;
    float _657 = (((_625 - _644) + (_644 * cbMtdParam._m0[22u].z)) * _555) + _644;
    float _658 = ((sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) - _645) * _555) + _645;
    float _660 = cbMtdParam._m0[22u].x + _463.w;
    float _663 = fma(_658, _234 * NORMAL.x, fma(_657, _241 * TANGENT.x, (_227 * _219) * _656));
    float _666 = fma(_658, _234 * NORMAL.y, fma(_657, _241 * TANGENT.y, (_227 * _220) * _656));
    float _669 = fma(_658, _234 * NORMAL.z, fma(_657, _241 * TANGENT.z, (_227 * _221) * _656));
    float _673 = inversesqrt(dot(vec3(_663, _666, _669), vec3(_663, _666, _669)));
    float _674 = _673 * _663;
    float _675 = _673 * _666;
    float _676 = _673 * _669;
    float _3684 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _677 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3706 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3717 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3728 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    vec4 _760 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _762 = _760.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _916 = sqrt(((_746 * _746) + (_747 * _747)) + (_748 * _748));
        float _922 = (cbMatDynParam._m0[5u].x * _916) + cbMatDynParam._m0[5u].y;
        float _3739 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _927 = (cbMatDynParam._m0[5u].z * _916) + cbMatDynParam._m0[5u].w;
        float _3750 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) - _923)) + _923) < ((_762 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _773 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _774 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_676, cbSceneParam._m0[5u].z, fma(_675, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _674));
    float _795 = fma(_676, cbSceneParam._m0[6u].z, fma(_675, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _674));
    float _798 = fma(_676, cbSceneParam._m0[7u].z, fma(_675, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _674));
    uint _811 = _247 + 9u;
    uint _812 = _811 + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3761 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _773, cbSceneParam._m0[86u].y * _774));
    float _836 = ((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * TEXCOORD_5.w) * _832.x;
    float _837 = dot(vec3(_674, _675, _676), vec3(_753, _754, _755));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _674) - _753;
    float _845 = (_840 * _675) - _754;
    float _846 = (_840 * _676) - _755;
    float _850 = abs(dot(vec3(_753, _754, _755), vec3(_674, _675, _676)));
    float _3794 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_677);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1234;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _959 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _963 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _967 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _992 = _897 + _674;
        float _993 = _901 + _675;
        float _994 = _905 + _676;
        float _1004 = fma(_994, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _992)) - _959;
        float _1005 = fma(_994, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _992)) - _963;
        float _1006 = fma(_994, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _992)) - _967;
        float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
        float _1023 = ((_1010 * _1004) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_959 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1010 * _1005) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_963 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1010 * _1006) / cbModelParam._m0[34u].z) + ((((((_967 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1023, _1024, _1025), 0.0);
        float _1062 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1028.x + (-0.5));
        float _1064 = _1062 * (_1028.y + (-0.5));
        float _1065 = _1062 * (_1028.z + (-0.5));
        float _1072 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1035.x + (-0.5));
        float _1074 = _1072 * (_1035.y + (-0.5));
        float _1075 = _1072 * (_1035.z + (-0.5));
        float _1082 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1042.x + (-0.5));
        float _1084 = _1082 * (_1042.y + (-0.5));
        float _1085 = _1082 * (_1042.z + (-0.5));
        float _1092 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1049.x + (-0.5));
        float _1094 = _1092 * (_1049.y + (-0.5));
        float _1095 = _1092 * (_1049.z + (-0.5));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = _1063 * 0.5;
        float _1100 = _1073 * 0.5;
        float _1101 = _1083 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1116 = (dot(vec3(_674, _675, _676), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1126 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1128 = _1127 * 2.0;
        float _1132 = (1.0 - _1127) / (_1127 + 1.0);
        float _3842 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1142 = ((((1.0 - _1133) * (_1128 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1128 + 1.0))) + _1133) * _1096;
        float _1143 = _1064 * 0.5;
        float _1144 = _1074 * 0.5;
        float _1145 = _1084 * 0.5;
        float _1146 = dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145));
        float _1151 = (_1146 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1146);
        float _1159 = (dot(vec3(_674, _675, _676), vec3(_1151 * _1143, _1151 * _1144, _1151 * _1145)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1168 = sqrt(((_1144 * _1144) + (_1143 * _1143)) + (_1145 * _1145)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _3875 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1170 + 1.0))) + _1175) * _1097;
        float _1185 = _1065 * 0.5;
        float _1186 = _1075 * 0.5;
        float _1187 = _1085 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_674, _675, _676), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3908 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1212 + 1.0))) + _1217) * _1098;
        _1234 = _1065;
        _1236 = _1064;
        _1237 = _1063;
        _1238 = _1075;
        _1239 = _1074;
        _1240 = _1073;
        _1241 = _1085;
        _1242 = _1084;
        _1243 = _1083;
        _1244 = _1098;
        _1245 = _1097;
        _1246 = _1096;
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
    }
    else
    {
        _1234 = _1235;
        _1236 = _1235;
        _1237 = _1235;
        _1238 = _1235;
        _1239 = _1235;
        _1240 = _1235;
        _1241 = _1235;
        _1242 = _1235;
        _1243 = _1235;
        _1244 = _1235;
        _1245 = _1235;
        _1246 = _1235;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1281 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1285 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1308 = _897 + _674;
        float _1309 = _901 + _675;
        float _1310 = _905 + _676;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_674, _675, _676), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3971 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_674, _675, _676), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4004 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_674, _675, _676), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4037 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1235;
        _1547 = _1235;
        _1548 = _1235;
        _1549 = _1235;
        _1550 = _1235;
        _1551 = _1235;
        _1552 = _1235;
        _1553 = _1235;
        _1554 = _1235;
        _1555 = _1235;
        _1556 = _1235;
        _1557 = _1235;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1247)) + _1247;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1248)) + _1248;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1249)) + _1249;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _844 * 0.5;
    float _1615 = _845 * 0.5;
    float _1616 = _846 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1234, _1238, _1241, _1244));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _677);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1731 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1735 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1739 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1742 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1745 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1748 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1776;
        if (_1742 > 0.0)
        {
            _1776 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1776 = frontier_phi_17_15_ladder;
        }
        float _1977;
        if (_1745 > 0.0)
        {
            _1977 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1977 = frontier_phi_26_22_ladder;
        }
        float _2220;
        if (_1748 > 0.0)
        {
            _2220 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2220 = frontier_phi_38_33_ladder;
        }
        float _2222 = isnan(_1977) ? _1776 : (isnan(_1776) ? _1977 : min(_1776, _1977));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1742) + _1731;
        float _2228 = (_2223 * _1745) + _1735;
        float _2229 = (_2223 * _1748) + _1739;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2232 = (-1.0) - _2230;
        float _2234 = _2230 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2229 > _2234) || ((_2229 < _2232) || ((_2228 > _2234) || ((_2228 < _2232) || ((_2227 < _2232) || (_2227 > _2234))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2353 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2229, cbModelParam._m0[9u].z, fma(_2228, cbModelParam._m0[9u].y, _2227 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2229, cbModelParam._m0[10u].z, fma(_2228, cbModelParam._m0[10u].y, _2227 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2229, cbModelParam._m0[11u].z, fma(_2228, cbModelParam._m0[11u].y, _2227 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_16_38_ladder = _2353.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2353.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2353.x * cbModelParam._m0[1u].y;
        }
        _1764 = frontier_phi_16_38_ladder_2;
        _1766 = frontier_phi_16_38_ladder_1;
        _1768 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1683);
        _1764 = _1752.x * cbModelParam._m0[1u].y;
        _1766 = _1752.y * cbModelParam._m0[1u].y;
        _1768 = _1752.z * cbModelParam._m0[1u].y;
    }
    float _1772 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _677);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1772 : min(cbModelParam._m0[25u].w, _1772));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1841 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1844 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1982;
        if (_1838 > 0.0)
        {
            _1982 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2247;
        if (_1841 > 0.0)
        {
            _2247 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2247 = frontier_phi_40_35_ladder;
        }
        float _2452;
        if (_1844 > 0.0)
        {
            _2452 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2452 = frontier_phi_49_46_ladder;
        }
        float _2454 = isnan(_2247) ? _1982 : (isnan(_1982) ? _2247 : min(_1982, _2247));
        float _2455 = isnan(_2452) ? _2454 : (isnan(_2454) ? _2452 : min(_2454, _2452));
        float _2459 = (_2455 * _1838) + _1827;
        float _2460 = (_2455 * _1841) + _1831;
        float _2461 = (_2455 * _1844) + _1835;
        float _2462 = _2455 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2462;
        float _2465 = _2462 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2461 > _2465) || ((_2461 < _2463) || ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 < _2463) || (_2459 > _2465))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2461, cbModelParam._m0[17u].z, fma(_2460, cbModelParam._m0[17u].y, _2459 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2461, cbModelParam._m0[18u].z, fma(_2460, cbModelParam._m0[18u].y, _2459 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2461, cbModelParam._m0[19u].z, fma(_2460, cbModelParam._m0[19u].y, _2459 * cbModelParam._m0[19u].x))), _1773);
            frontier_phi_25_49_ladder = _2660.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2660.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2660.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_49_ladder_2;
        _1865 = frontier_phi_25_49_ladder_1;
        _1867 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1773);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1879 = ((((1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_865 * _852)) * _836;
    float _1880 = _1879 * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1881 = _1879 * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1882 = _1879 * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    uvec4 _1901 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1903 = _1901.x * 14u;
    uint _1904 = _1903 + 13u;
    float _1911 = _836 + (-1.0);
    float _1916 = (cbLight._m0[_1904].x * _1911) + 1.0;
    float _1917 = (cbLight._m0[_1904].y * _1911) + 1.0;
    float _1918 = (cbLight._m0[_1904].z * _1911) + 1.0;
    float _1919 = (cbLight._m0[_1904].w * _1911) + 1.0;
    uint _1920 = _1903 + 5u;
    float _1926 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
    uint _1930 = _1903 + 4u;
    float _1936 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1940 = _1903 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_674, _675, _676));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_674, _675, _676));
    float _4173 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _4184 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1920].x * _1926) * _1961) + ((cbLight._m0[_1930].x * _1936) * _1959);
    float _1969 = ((_1926 * cbLight._m0[_1920].y) * _1961) + ((_1936 * cbLight._m0[_1930].y) * _1959);
    float _1970 = ((_1926 * cbLight._m0[_1920].z) * _1961) + ((_1936 * cbLight._m0[_1930].z) * _1959);
    uvec4 _1974 = floatBitsToUint(cbLight._m0[_1903 + 12u]);
    bool _1976 = _1974.x == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1976)
    {
        _1987 = _1968;
        _1989 = _1969;
        _1991 = _1970;
    }
    else
    {
        uint _1995 = _1903 + 6u;
        float _2011 = (dot(vec3(cbLight._m0[_1903 + 2u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2012 = _2011 * _2011;
        float _4195 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2013 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2014 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _1987 = (((cbLight._m0[_1995].x * 0.3183098733425140380859375) * _2013) * _2014) + _1968;
        _1989 = (((cbLight._m0[_1995].y * 0.3183098733425140380859375) * _2013) * _2014) + _1969;
        _1991 = (((cbLight._m0[_1995].z * 0.3183098733425140380859375) * _2013) * _2014) + _1970;
    }
    bool _1994 = _1974.y == 0u;
    float _2032;
    float _2034;
    float _2036;
    if (_1994)
    {
        _2032 = _1987;
        _2034 = _1989;
        _2036 = _1991;
    }
    else
    {
        uint _2191 = _1903 + 7u;
        float _2207 = (dot(vec3(cbLight._m0[_1903 + 3u].xyz), vec3(_674, _675, _676)) * 0.5) + 0.5;
        float _2208 = _2207 * _2207;
        float _4211 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2209 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2210 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2032 = (((cbLight._m0[_2191].x * 0.3183098733425140380859375) * _2209) * _2210) + _1987;
        _2034 = (((cbLight._m0[_2191].y * 0.3183098733425140380859375) * _2209) * _2210) + _1989;
        _2036 = (((cbLight._m0[_2191].z * 0.3183098733425140380859375) * _2209) * _2210) + _1991;
    }
    uint _2039 = _1903 + 8u;
    float _2052 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _677) * 0.949999988079071044921875);
    float _2053 = _2052 * _2052;
    float _2054 = cbLight._m0[_1903].x + _753;
    float _2055 = cbLight._m0[_1903].y + _754;
    float _2056 = cbLight._m0[_1903].z + _755;
    float _2060 = inversesqrt(dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056)));
    float _2061 = _2060 * _2054;
    float _2062 = _2060 * _2055;
    float _2063 = _2060 * _2056;
    float _2064 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1903].xyz));
    float _4227 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2068 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2069 = dot(vec3(_674, _675, _676), vec3(_2061, _2062, _2063));
    float _4249 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _2073 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2061, _2062, _2063));
    float _4260 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = _2053 * _2053;
    float _2081 = ((_2072 * _2072) * (_2077 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2053;
    float _2104 = (0.5 / (((_2068 * ((_2067 * _2093) + _2053)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2093) + _2053) * _2067))) * _2067;
    float _4271 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2106 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2077 / ((_2081 * _2081) * 3.141590118408203125));
    uint _2117 = _1903 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _677) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1940].x + _753;
    float _2131 = cbLight._m0[_1940].y + _754;
    float _2132 = cbLight._m0[_1940].z + _755;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_1940].xyz));
    float _4282 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2144 = dot(vec3(_674, _675, _676), vec3(_2137, _2138, _2139));
    float _4293 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2137, _2138, _2139));
    float _4304 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2129;
    float _2176 = (0.5 / (((_2068 * ((_2143 * _2166) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2166) + _2129) * _2143))) * _2143;
    float _4315 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2188 = (((_2165 * cbLight._m0[_2117].x) * _2178) * _1926) + (((_2092 * cbLight._m0[_2039].x) * _2106) * _1936);
    float _2189 = (((_2165 * cbLight._m0[_2117].y) * _2178) * _1926) + (((_2092 * cbLight._m0[_2039].y) * _2106) * _1936);
    float _2190 = (((_2165 * cbLight._m0[_2117].z) * _2178) * _1926) + (((_2092 * cbLight._m0[_2039].z) * _2106) * _1936);
    float _2252;
    float _2254;
    float _2256;
    if (_1976)
    {
        _2252 = _2188;
        _2254 = _2189;
        _2256 = _2190;
    }
    else
    {
        uint _2258 = _1903 + 2u;
        uint _2262 = _1903 + 10u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _677) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _753;
        float _2279 = cbLight._m0[_2258].y + _754;
        float _2280 = cbLight._m0[_2258].z + _755;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2258].xyz));
        float _4326 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2292 = dot(vec3(_674, _675, _676), vec3(_2285, _2286, _2287));
        float _4337 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4348 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2314 = 1.0 - _2277;
        float _2324 = (0.5 / (((_2068 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2314) + _2277) * _2291))) * _2291;
        float _4359 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2252 = (((_2313 * cbLight._m0[_2262].x) * _2326) * _2327) + _2188;
        _2254 = (((_2313 * cbLight._m0[_2262].y) * _2326) * _2327) + _2189;
        _2256 = (((_2313 * cbLight._m0[_2262].z) * _2326) * _2327) + _2190;
    }
    float _2362;
    float _2364;
    float _2366;
    if (_1994)
    {
        _2362 = _2252;
        _2364 = _2254;
        _2366 = _2256;
    }
    else
    {
        uint _2373 = _1903 + 3u;
        uint _2377 = _1903 + 11u;
        float _2391 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _677) * 0.949999988079071044921875);
        float _2392 = _2391 * _2391;
        float _2393 = cbLight._m0[_2373].x + _753;
        float _2394 = cbLight._m0[_2373].y + _754;
        float _2395 = cbLight._m0[_2373].z + _755;
        float _2399 = inversesqrt(dot(vec3(_2393, _2394, _2395), vec3(_2393, _2394, _2395)));
        float _2400 = _2399 * _2393;
        float _2401 = _2399 * _2394;
        float _2402 = _2399 * _2395;
        float _2403 = dot(vec3(_674, _675, _676), vec3(cbLight._m0[_2373].xyz));
        float _4375 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2407 = dot(vec3(_674, _675, _676), vec3(_2400, _2401, _2402));
        float _4386 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2410 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2411 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2400, _2401, _2402));
        float _4397 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2415 = _2392 * _2392;
        float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
        float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2429 = 1.0 - _2392;
        float _2439 = (0.5 / (((_2068 * ((_2406 * _2429) + _2392)) + 9.9999999392252902907785028219223e-09) + (((_2068 * _2429) + _2392) * _2406))) * _2406;
        float _4408 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2441 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
        float _2442 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
        _2362 = (((_2428 * cbLight._m0[_2377].x) * _2441) * _2442) + _2252;
        _2364 = (((_2428 * cbLight._m0[_2377].y) * _2441) * _2442) + _2254;
        _2366 = (((_2428 * cbLight._m0[_2377].z) * _2441) * _2442) + _2256;
    }
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_1901.y == 0u)
    {
        float _2517 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2518 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2517;
        float _2519 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2517;
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2517;
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.x;
        uint _2544 = uint((float(_2532.y) * floor(float(uint(cbSceneParam._m0[85u].y * _774) / _2533))) + floor(float(uint(cbSceneParam._m0[85u].x * _773) / _2533)));
        float _2554 = (log2(_2520 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2555 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        uint _2558 = uint(isnan(14.0) ? _2555 : (isnan(_2555) ? 14.0 : min(_2555, 14.0)));
        uvec4 _2563 = texelFetch(g_lightClusterGridBuffer, int(((_2558 << 2u) + (_2544 << 6u)) >> 2u));
        uint _2564 = _2563.x;
        uint _2565 = _2532.z;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        if (((((1u << ((_2565 >> 4u) & 15u)) + 4294967295u) & _2564) == 0u) || ((_2565 & 240u) == 0u))
        {
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
        }
        else
        {
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2818 = 0.0;
            float _2819 = 0.0;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            uint _2824 = 0u;
            uint _2833;
            bool _2834;
            for (;;)
            {
                _2833 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2824 << 2u)) >> 2u)).x;
                _2834 = _2833 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2834)
                {
                    frontier_phi_66_pred = _2818;
                    frontier_phi_66_pred_1 = _2823;
                    frontier_phi_66_pred_2 = _2822;
                    frontier_phi_66_pred_3 = _2821;
                    frontier_phi_66_pred_4 = _2820;
                    frontier_phi_66_pred_5 = _2819;
                }
                else
                {
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    uint _2969;
                    _2963 = _2818;
                    _2964 = _2819;
                    _2965 = _2820;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2833;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    for (;;)
                    {
                        uint _2973 = uint(findLSB(_2969)) + (_2824 << 5u);
                        uint _2970 = (_2969 + 4294967295u) & _2969;
                        uint _2975 = _2973 * 48u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2975)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2975 + 3u)).x));
                        uint _2995 = (_2973 * 48u) + 4u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 3u)).x));
                        uint _3014 = (_2973 * 48u) + 8u;
                        vec3 _3025 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x));
                        float _3029 = _2989.x - _2518;
                        float _3030 = _2989.y - _2519;
                        float _3031 = _2989.z - _2520;
                        float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                        float _3035 = inversesqrt(_3032);
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3039 = dot(vec3(_792, _795, _798), vec3(_3036, _3037, _3038));
                        float _3044 = 1.0 - (_3032 * _2989.w);
                        float _4434 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3045 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3046 = sqrt(_3032) * _3008.w;
                        float _3049 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                        float _3050 = _3049 * _3049;
                        float _3053 = ((1.0 - _3050) * _3039) + _3050;
                        float _3056 = _3046 * _3046;
                        float _3060 = ((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3045) / ((_3056 * 0.699999988079071044921875) + 1.0);
                        float _3064 = (-0.0) - _2518;
                        float _3065 = (-0.0) - _2519;
                        float _3066 = (-0.0) - _2520;
                        float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                        float _3071 = _3070 * _3064;
                        float _3072 = _3070 * _3065;
                        float _3073 = _3070 * _3066;
                        float _3081 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                        float _3082 = 1.0 - _852;
                        float _3089 = sqrt(1.0 - ((1.0 - (_3082 * _3082)) * (1.0 - (_3081 * _3081))));
                        float _3090 = _3089 * _3089;
                        float _3091 = _3090 * _3090;
                        float _3092 = _3071 + _3036;
                        float _3093 = _3072 + _3037;
                        float _3094 = _3073 + _3038;
                        float _3098 = inversesqrt(dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094)));
                        float _3102 = dot(vec3(_792, _795, _798), vec3(_3071, _3072, _3073));
                        float _4450 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                        float _3105 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3106 = dot(vec3(_792, _795, _798), vec3(_3098 * _3092, _3098 * _3093, _3098 * _3094));
                        float _4461 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3109 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                        float _3113 = ((_3109 * _3109) * (_3091 + (-1.0))) + 1.0;
                        float _3114 = _3049 * _3090;
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3039) + _3115;
                        float _4472 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3119 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3120 = 1.0 - _3090;
                        float _3130 = (0.5 / (((_3119 * ((_3105 * _3120) + _3090)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3090) * _3105))) * _3119;
                        float _4483 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3141 = (((_3091 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3113 * _3113) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125))) * _3045;
                        _2893 = (_3060 * _3008.x) + _2966;
                        _2894 = (_3060 * _3008.y) + _2967;
                        _2895 = (_3060 * _3008.z) + _2968;
                        _2890 = (_3141 * _3025.x) + _2963;
                        _2891 = (_3141 * _3025.y) + _2964;
                        _2892 = (_3141 * _3025.z) + _2965;
                        if (_2970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2963 = _2890;
                            _2964 = _2891;
                            _2965 = _2892;
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2970;
                        }
                    }
                    frontier_phi_66_pred = _2890;
                    frontier_phi_66_pred_1 = _2895;
                    frontier_phi_66_pred_2 = _2894;
                    frontier_phi_66_pred_3 = _2893;
                    frontier_phi_66_pred_4 = _2892;
                    frontier_phi_66_pred_5 = _2891;
                }
                _2666 = frontier_phi_66_pred;
                _2676 = frontier_phi_66_pred_1;
                _2674 = frontier_phi_66_pred_2;
                _2672 = frontier_phi_66_pred_3;
                _2670 = frontier_phi_66_pred_4;
                _2668 = frontier_phi_66_pred_5;
                uint _2825 = _2824 + 1u;
                if (_2825 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2818 = _2666;
                    _2819 = _2668;
                    _2820 = _2670;
                    _2821 = _2672;
                    _2822 = _2674;
                    _2823 = _2676;
                    _2824 = _2825;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
        }
        uvec4 _2679 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2680 = _2679.z;
        uint _2682 = (_2680 >> 8u) & 15u;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        if (((4294967295u << _2682) & _2564) == 0u)
        {
            _2786 = _2665;
            _2788 = _2667;
            _2790 = _2669;
            _2792 = _2671;
            _2794 = _2673;
            _2796 = _2675;
        }
        else
        {
            float _2811 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
            float _2812 = _2811 * _2518;
            float _2813 = _2811 * _2519;
            float _2814 = _2811 * _2520;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2682 < ((_2680 >> 12u) & 15u))
            {
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2946 = _2665;
                float _2947 = _2667;
                float _2948 = _2669;
                float _2949 = _2671;
                float _2950 = _2673;
                float _2951 = _2675;
                uint _2952 = _2682;
                uint _2961;
                bool _2962;
                for (;;)
                {
                    _2961 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2952 << 2u)) >> 2u)).x;
                    _2962 = _2961 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2962)
                    {
                        frontier_phi_77_pred = _2951;
                        frontier_phi_77_pred_1 = _2950;
                        frontier_phi_77_pred_2 = _2949;
                        frontier_phi_77_pred_3 = _2948;
                        frontier_phi_77_pred_4 = _2947;
                        frontier_phi_77_pred_5 = _2946;
                    }
                    else
                    {
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3168 = _2946;
                        float _3169 = _2947;
                        float _3170 = _2948;
                        float _3171 = _2949;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        uint _3174 = _2961;
                        uint _3175;
                        vec4 _3200;
                        float _3201;
                        vec4 _3216;
                        vec3 _3228;
                        vec4 _3243;
                        vec4 _3259;
                        float _3305;
                        bool _3306;
                        for (;;)
                        {
                            uint _3185 = ((_2952 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3174));
                            _3175 = (_3174 + 4294967295u) & _3174;
                            uint _3187 = _3185 * 40u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            _3201 = _3200.w;
                            uint _3203 = (_3185 * 40u) + 4u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3185 * 40u) + 8u;
                            _3228 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x));
                            uint _3230 = (_3185 * 40u) + 16u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3246 = (_3185 * 40u) + 20u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3185 * 40u) + 24u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3280 = (_3185 * 40u) + 28u;
                            vec4 _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3305 = fma(_2520, _3293.z, fma(_2519, _3293.y, _3293.x * _2518)) + _3293.w;
                            _3306 = !((fma(_2520, _3274.z, fma(_2519, _3274.y, _3274.x * _2518)) + _3274.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3306)
                            {
                                float _3333 = _3200.x - _2518;
                                float _3334 = _3200.y - _2519;
                                float _3335 = _3200.z - _2520;
                                float _3336 = dot(vec3(_3333, _3334, _3335), vec3(_3333, _3334, _3335));
                                float _3339 = inversesqrt(_3336);
                                float _3340 = _3339 * _3333;
                                float _3341 = _3339 * _3334;
                                float _3342 = _3339 * _3335;
                                float _3346 = 1.0 - (_3336 / (_3201 * _3201));
                                float _4494 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3347 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3351 = sqrt(_3336) * _3216.w;
                                float _3353 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                                float _3354 = _3353 * _3353;
                                float _3357 = ((1.0 - _3354) * dot(vec3(_3340, _3341, _3342), vec3(_792, _795, _798))) + _3354;
                                float _3360 = _3351 * _3351;
                                float _3364 = (fma(_2520, _3243.z, fma(_2519, _3243.y, _3243.x * _2518)) + _3243.w) / _3305;
                                float _3365 = (fma(_2520, _3259.z, fma(_2519, _3259.y, _3259.x * _2518)) + _3259.w) / _3305;
                                float _3369 = 1.0 - dot(vec2(_3364, _3365), vec2(_3364, _3365));
                                float _4510 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3371 = _3370 * (((isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0))) * _3347) / ((_3360 * 0.699999988079071044921875) + 1.0));
                                float _3383 = exp2(log2(1.0 / ((_3360 * 3.5) + 5.0)) * 0.25);
                                float _3384 = 1.0 - _852;
                                float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                                float _3392 = _3391 * _3391;
                                float _3393 = _3392 * _3392;
                                float _3394 = _3340 - _2812;
                                float _3395 = _3341 - _2813;
                                float _3396 = _3342 - _2814;
                                float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                                float _3404 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2812, (-0.0) - _2813, (-0.0) - _2814));
                                float _4521 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3408 = dot(vec3(_792, _795, _798), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                                float _4532 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                                float _3416 = _3353 * _3392;
                                float _3417 = _3416 * _3416;
                                float _3423 = ((1.0 - _3417) * dot(vec3(_792, _795, _798), vec3(_3340, _3341, _3342))) + _3417;
                                float _4543 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                                float _3425 = 1.0 - _3392;
                                float _3435 = (0.5 / (((_3424 * ((_3407 * _3425) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3392) * _3407))) * _3424;
                                float _4554 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3445 = (_3370 * _3347) * (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3415 * _3415) * ((_3360 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3371 * _3216.y;
                                frontier_phi_83_pred_1 = _3371 * _3216.x;
                                frontier_phi_83_pred_2 = _3445 * _3228.z;
                                frontier_phi_83_pred_3 = _3445 * _3228.y;
                                frontier_phi_83_pred_4 = _3445 * _3228.x;
                                frontier_phi_83_pred_5 = _3371 * _3216.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3453 = frontier_phi_83_pred;
                            _3452 = frontier_phi_83_pred_1;
                            _3451 = frontier_phi_83_pred_2;
                            _3450 = frontier_phi_83_pred_3;
                            _3449 = frontier_phi_83_pred_4;
                            _3454 = frontier_phi_83_pred_5;
                            _3158 = _3452 + _3171;
                            _3159 = _3453 + _3172;
                            _3160 = _3454 + _3173;
                            _3155 = _3449 + _3168;
                            _3156 = _3450 + _3169;
                            _3157 = _3451 + _3170;
                            if (_3175 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3175;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3160;
                        frontier_phi_77_pred_1 = _3159;
                        frontier_phi_77_pred_2 = _3158;
                        frontier_phi_77_pred_3 = _3157;
                        frontier_phi_77_pred_4 = _3156;
                        frontier_phi_77_pred_5 = _3155;
                    }
                    _2797 = frontier_phi_77_pred;
                    _2795 = frontier_phi_77_pred_1;
                    _2793 = frontier_phi_77_pred_2;
                    _2791 = frontier_phi_77_pred_3;
                    _2789 = frontier_phi_77_pred_4;
                    _2787 = frontier_phi_77_pred_5;
                    uint _2953 = _2952 + 1u;
                    if (_2953 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2946 = _2787;
                        _2947 = _2789;
                        _2948 = _2791;
                        _2949 = _2793;
                        _2950 = _2795;
                        _2951 = _2797;
                        _2952 = _2953;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2791;
                frontier_phi_58_59_ladder_1 = _2797;
                frontier_phi_58_59_ladder_2 = _2795;
                frontier_phi_58_59_ladder_3 = _2793;
                frontier_phi_58_59_ladder_4 = _2789;
                frontier_phi_58_59_ladder_5 = _2787;
            }
            else
            {
                frontier_phi_58_59_ladder = _2669;
                frontier_phi_58_59_ladder_1 = _2675;
                frontier_phi_58_59_ladder_2 = _2673;
                frontier_phi_58_59_ladder_3 = _2671;
                frontier_phi_58_59_ladder_4 = _2667;
                frontier_phi_58_59_ladder_5 = _2665;
            }
            _2786 = frontier_phi_58_59_ladder_5;
            _2788 = frontier_phi_58_59_ladder_4;
            _2790 = frontier_phi_58_59_ladder;
            _2792 = frontier_phi_58_59_ladder_3;
            _2794 = frontier_phi_58_59_ladder_2;
            _2796 = frontier_phi_58_59_ladder_1;
        }
        float _2801 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2577 = (_2801 * _2792) + _2032;
        _2579 = (_2801 * _2794) + _2034;
        _2581 = (_2801 * _2796) + _2036;
        _2583 = ((_2786 * 0.039999999105930328369140625) * _2801) + _2362;
        _2585 = ((_2788 * 0.039999999105930328369140625) * _2801) + _2364;
        _2587 = ((_2790 * 0.039999999105930328369140625) * _2801) + _2366;
    }
    else
    {
        _2577 = _2032;
        _2579 = _2034;
        _2581 = _2036;
        _2583 = _2362;
        _2585 = _2364;
        _2587 = _2366;
    }
    float _4570 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4581 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4592 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _2604 = ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2577 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _836))) + ((_2583 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2605 = ((isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2579 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _836))) + ((_2585 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2606 = ((isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2581 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _836))) + ((_2587 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    uint _2607 = _247 + 6u;
    float _2615 = _773 / cbSceneParam._m0[86u].x;
    float _2616 = _774 / cbSceneParam._m0[86u].y;
    vec4 _2630 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2632 = _2630.x;
    float _2633 = _2630.y;
    float _2634 = _2630.z;
    float _2635 = _2630.w;
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2690 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2691 = _2690 / _695;
        float _2702 = _2691 * _746;
        float _2703 = _747 * _2691;
        float _2704 = (-0.0) - _2703;
        float _2706 = _2691 * _748;
        float _2708 = (cbSceneParam._m0[77u].w * _2704) / _2690;
        float _2709 = _2708 + cbSceneParam._m0[79u].w;
        float _2710 = cbSceneParam._m0[79u].w - _2703;
        float _2716 = sqrt(((_2702 * _2702) + (_2703 * _2703)) + (_2706 * _2706));
        float _2719 = (1.0 - (cbSceneParam._m0[77u].w / _2690)) * _2716;
        float _2724 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2726 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2903;
        if (abs((_2704 - _2708) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2903 = ((((_2709 > 0.0) ? exp2(_2724 * _2709) : (2.0 - exp2(_2726 * _2709))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2719;
        }
        else
        {
            float _2847 = 1.0 / cbSceneParam._m0[80u].x;
            float _2848 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : max(_2709, _2710));
            float _2849 = isnan(_2710) ? _2709 : (isnan(_2709) ? _2710 : min(_2709, _2710));
            float _2858 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : min(_2848, 0.0));
            float _2859 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : min(_2849, 0.0));
            _2903 = ((abs(_2716 / _2704) * cbSceneParam._m0[80u].y) * ((((_2858 - _2859) * 2.0) - ((exp2(_2724 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)))) - exp2(_2724 * (isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))))) * _2847)) - ((exp2(_2726 * _2858) - exp2(_2726 * _2859)) * _2847))) + (_2719 * cbSceneParam._m0[80u].z);
        }
        vec4 _2905 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, 1.0), 0.0);
        float _2914 = exp2((_2903 * (-1.44269502162933349609375)) * (1.0 - _2905.w));
        float _2915 = log2(_2914);
        float _2931 = log2(_2635);
        _2728 = (exp2(_2931 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].x)) * _2905.x) / cbSceneParam._m0[78u].x)) + _2632;
        _2730 = (exp2(_2931 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].y)) * _2905.y) / cbSceneParam._m0[78u].y)) + _2633;
        _2732 = (exp2(_2931 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2915 * cbSceneParam._m0[78u].z)) * _2905.z) / cbSceneParam._m0[78u].z)) + _2634;
        _2734 = _2914 * _2635;
    }
    else
    {
        _2728 = _2632;
        _2730 = _2633;
        _2732 = _2634;
        _2734 = _2635;
    }
    bool _2941;
    vec4 _2744;
    vec4 _2766;
    float _2768;
    float _2772;
    float _2773;
    float _2774;
    float _2775;
    bool _2785;
    for (;;)
    {
        _2744 = cbMatDynParam._m0[0u];
        float _2746 = roundEven(_2744.y);
        bool _2747 = _2746 == 3.0;
        float _2748 = log2(_2734);
        float _2755 = exp2(_2748 * cbSceneParam._m0[78u].x) * _2604;
        float _2756 = exp2(_2748 * cbSceneParam._m0[78u].y) * _2605;
        float _2757 = exp2(_2748 * cbSceneParam._m0[78u].z) * _2606;
        float _2764 = _762 + (-0.5);
        _2766 = cbMtdParam._m0[1u];
        _2768 = _2766.y * _2764;
        float _2771 = (_2746 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2772 = _2771 * (_2747 ? _2755 : (_2755 + (cbSceneParam._m0[72u].w * _2728)));
        _2773 = _2771 * (_2747 ? _2756 : (_2756 + (cbSceneParam._m0[72u].w * _2730)));
        _2774 = _2771 * (_2747 ? _2757 : (_2757 + (cbSceneParam._m0[72u].w * _2732)));
        _2775 = _2764 * 0.999000012874603271484375;
        _2785 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2785)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2775) < 0.5)
            {
                _2941 = true;
                break;
            }
        }
        uint _2882 = _811 + uint(_2744.w);
        if ((cbInstanceData._m0[_2882].w < 1.0) && ((cbInstanceData._m0[_2882].w + _2775) < 0.5))
        {
            _2941 = true;
            break;
        }
        if ((_2768 + 1.0) < _2766.x)
        {
            _2941 = true;
            break;
        }
        _2941 = false;
        break;
    }
    float _3146;
    if (_2941)
    {
        discard_state = true;
        _3146 = 0.0;
    }
    else
    {
        _3146 = cbInstanceData._m0[_2607].w;
    }
    SV_Target.x = _2772;
    SV_Target.y = _2773;
    SV_Target.z = _2774;
    SV_Target.w = _3146;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2607].w;
    discard_exit();
}


