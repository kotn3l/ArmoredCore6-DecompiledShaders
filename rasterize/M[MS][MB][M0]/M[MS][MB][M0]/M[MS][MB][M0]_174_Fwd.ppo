#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1233;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _367 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _367) * cbMtdParam._m0[24u].x) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3540 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _392 = (_385 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _393 = (_385 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _394 = (_385 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].x) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3551 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    float _530 = ((_502.x - _521) * _385) + _521;
    float _531 = ((_502.y - _522) * _385) + _522;
    float _532 = ((_502.z - _523) * _385) + _523;
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _557 = ((_544.z - _532) * _458) + _532;
    float _560 = ((((_544.x - _530) * _458) + _530) * 2.0) + (-1.0);
    float _561 = ((((_544.y - _531) * _458) + _531) * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3562 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))));
    float _572 = _560 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_479.x * 2.0) + (-1.0)));
    float _573 = _561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_479.y * 2.0) + (-1.0)));
    vec4 _586 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _631 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_602 - _603) * cbMtdParam._m0[24u].w) + _603) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3573 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _640 = ((((cbMtdParam._m0[10u].x - _465) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _632) + _465;
    float _641 = ((((cbMtdParam._m0[10u].y - _466) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _632) + _466;
    float _642 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _467)) * _632) + _467;
    float _647 = (((_479.z - _557) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _557;
    float _651 = ((cbMtdParam._m0[23u].y - _647) * _632) + _647;
    vec4 _670 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _676 = (_670.x * 2.0) + (-1.0);
    float _677 = (_670.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3584 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _694 = (_632 * (((cbMtdParam._m0[22u].z * _572) - _572) + _676)) + _572;
    float _695 = (_632 * (((cbMtdParam._m0[22u].z * _573) - _573) + _677)) + _573;
    float _696 = (_632 * (sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) - _567)) + _567;
    float _698 = cbMtdParam._m0[22u].x + _586.w;
    float _701 = fma(_696, _236 * NORMAL.x, fma(_695, _243 * TANGENT.x, (_229 * _221) * _694));
    float _704 = fma(_696, _236 * NORMAL.y, fma(_695, _243 * TANGENT.y, (_229 * _222) * _694));
    float _707 = fma(_696, _236 * NORMAL.z, fma(_695, _243 * TANGENT.z, (_229 * _223) * _694));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _3595 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _715 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _3617 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3628 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3639 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _784 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _774);
    float _785 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _774);
    float _786 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _774);
    float _790 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
    float _791 = _784 * _790;
    float _792 = _785 * _790;
    float _793 = _786 * _790;
    float _799 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _800 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _818 = fma(_714, cbSceneParam._m0[5u].z, fma(_713, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _712));
    float _821 = fma(_714, cbSceneParam._m0[6u].z, fma(_713, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _712));
    float _824 = fma(_714, cbSceneParam._m0[7u].z, fma(_713, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _712));
    uint _838 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _844 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_838].x;
    float _845 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_838].y;
    float _846 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_838].z;
    float _3650 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _848 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _849 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _799, cbSceneParam._m0[86u].y * _800));
    float _862 = ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * TEXCOORD_5.w) * _858.x;
    float _863 = dot(vec3(_712, _713, _714), vec3(_791, _792, _793));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _712) - _791;
    float _871 = (_866 * _713) - _792;
    float _872 = (_866 * _714) - _793;
    float _876 = abs(dot(vec3(_791, _792, _793), vec3(_712, _713, _714)));
    float _3683 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_715);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1232;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _957 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _961 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _965 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _990 = _923 + _712;
        float _991 = _927 + _713;
        float _992 = _931 + _714;
        float _1002 = fma(_992, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990)) - _957;
        float _1003 = fma(_992, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990)) - _961;
        float _1004 = fma(_992, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990)) - _965;
        float _1008 = inversesqrt(dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004)));
        float _1021 = ((_1008 * _1002) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_957 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1022 = ((_1008 * _1003) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_961 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1008 * _1004) / cbModelParam._m0[34u].z) + ((((((_965 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1060 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1026.x + (-0.5));
        float _1062 = _1060 * (_1026.y + (-0.5));
        float _1063 = _1060 * (_1026.z + (-0.5));
        float _1070 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1033.x + (-0.5));
        float _1072 = _1070 * (_1033.y + (-0.5));
        float _1073 = _1070 * (_1033.z + (-0.5));
        float _1080 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1040.x + (-0.5));
        float _1082 = _1080 * (_1040.y + (-0.5));
        float _1083 = _1080 * (_1040.z + (-0.5));
        float _1090 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1047.x + (-0.5));
        float _1092 = _1090 * (_1047.y + (-0.5));
        float _1093 = _1090 * (_1047.z + (-0.5));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = _1061 * 0.5;
        float _1098 = _1071 * 0.5;
        float _1099 = _1081 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1114 = (dot(vec3(_712, _713, _714), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1124 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3731 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1126 + 1.0))) + _1131) * _1094;
        float _1141 = _1062 * 0.5;
        float _1142 = _1072 * 0.5;
        float _1143 = _1082 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_712, _713, _714), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3764 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1168 + 1.0))) + _1173) * _1095;
        float _1183 = _1063 * 0.5;
        float _1184 = _1073 * 0.5;
        float _1185 = _1083 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_712, _713, _714), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3797 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1210 + 1.0))) + _1215) * _1096;
        _1232 = _1063;
        _1234 = _1062;
        _1235 = _1061;
        _1236 = _1073;
        _1237 = _1072;
        _1238 = _1071;
        _1239 = _1083;
        _1240 = _1082;
        _1241 = _1081;
        _1242 = _1096;
        _1243 = _1095;
        _1244 = _1094;
        _1245 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
    }
    else
    {
        _1232 = _1233;
        _1234 = _1233;
        _1235 = _1233;
        _1236 = _1233;
        _1237 = _1233;
        _1238 = _1233;
        _1239 = _1233;
        _1240 = _1233;
        _1241 = _1233;
        _1242 = _1233;
        _1243 = _1233;
        _1244 = _1233;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1271 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1275 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1279 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1302 = _923 + _712;
        float _1303 = _927 + _713;
        float _1304 = _931 + _714;
        float _1314 = fma(_1304, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1302)) - _1271;
        float _1315 = fma(_1304, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1302)) - _1275;
        float _1316 = fma(_1304, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1302)) - _1279;
        float _1320 = inversesqrt(dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316)));
        float _1333 = ((_1320 * _1314) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1271 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1320 * _1315) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1275 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1335 = ((_1320 * _1316) / cbModelParam._m0[35u].z) + ((((((_1279 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1351 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1333, _1334, _1335), 0.0);
        float _1370 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1337.x + (-0.5));
        float _1372 = _1370 * (_1337.y + (-0.5));
        float _1373 = _1370 * (_1337.z + (-0.5));
        float _1380 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1344.x + (-0.5));
        float _1382 = _1380 * (_1344.y + (-0.5));
        float _1383 = _1380 * (_1344.z + (-0.5));
        float _1390 = exp2((_1351.w + (-0.5)) * 20.0) * 2.0;
        float _1391 = _1390 * (_1351.x + (-0.5));
        float _1392 = _1390 * (_1351.y + (-0.5));
        float _1393 = _1390 * (_1351.z + (-0.5));
        float _1400 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1358.x + (-0.5));
        float _1402 = _1400 * (_1358.y + (-0.5));
        float _1403 = _1400 * (_1358.z + (-0.5));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = _1371 * 0.5;
        float _1408 = _1381 * 0.5;
        float _1409 = _1391 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_712, _713, _714), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _3860 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1434 + 1.0))) + _1439) * _1404;
        float _1449 = _1372 * 0.5;
        float _1450 = _1382 * 0.5;
        float _1451 = _1392 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_712, _713, _714), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _3893 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1476 + 1.0))) + _1481) * _1405;
        float _1491 = _1373 * 0.5;
        float _1492 = _1383 * 0.5;
        float _1493 = _1393 * 0.5;
        float _1494 = dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493));
        float _1499 = (_1494 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1494);
        float _1507 = (dot(vec3(_712, _713, _714), vec3(_1499 * _1491, _1499 * _1492, _1499 * _1493)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1516 = sqrt(((_1492 * _1492) + (_1491 * _1491)) + (_1493 * _1493)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1518 = _1517 * 2.0;
        float _1522 = (1.0 - _1517) / (_1517 + 1.0);
        float _3926 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1532 = ((((1.0 - _1523) * (_1518 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1518 + 1.0))) + _1523) * _1406;
        _1540 = _1373;
        _1541 = _1372;
        _1542 = _1371;
        _1543 = _1383;
        _1544 = _1382;
        _1545 = _1381;
        _1546 = _1393;
        _1547 = _1392;
        _1548 = _1391;
        _1549 = _1406;
        _1550 = _1405;
        _1551 = _1404;
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)));
    }
    else
    {
        _1540 = _1233;
        _1541 = _1233;
        _1542 = _1233;
        _1543 = _1233;
        _1544 = _1233;
        _1545 = _1233;
        _1546 = _1233;
        _1547 = _1233;
        _1548 = _1233;
        _1549 = _1233;
        _1550 = _1233;
        _1551 = _1233;
        _1552 = 0.0;
        _1553 = 0.0;
        _1554 = 0.0;
    }
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1245)) + _1245;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1246)) + _1246;
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1247)) + _1247;
    float _1587 = fma(_1566, cbSceneParam._m0[89u].z, fma(_1565, cbSceneParam._m0[89u].y, _1564 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1566, cbSceneParam._m0[90u].z, fma(_1565, cbSceneParam._m0[90u].y, _1564 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1566, cbSceneParam._m0[91u].z, fma(_1565, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1564));
    float _1608 = _870 * 0.5;
    float _1609 = _871 * 0.5;
    float _1610 = _872 * 0.5;
    float _1611 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1614 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1617 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1651;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1624 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1232, _1236, _1239, _1242));
        float _1628 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1234, _1237, _1240, _1243));
        float _1632 = dot(vec4(_1608, _1609, _1610, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1639 = dot(vec4(cbModelParam._m0[39u]), vec4(_1608, _1609, _1610, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1662;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1653 = dot(vec4(cbModelParam._m0[40u]), vec4(_1608, _1609, _1610, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1653) ? 0.0 : (isnan(0.0) ? _1653 : max(0.0, _1653))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1666 = (_1662 * cbModelParam._m0[1u].x) + (_1651 * (1.0 - cbModelParam._m0[1u].x));
    float _1676 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _715);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1676 : min(cbModelParam._m0[25u].z, _1676));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1740 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1743 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1771 = frontier_phi_14_12_ladder;
        }
        float _1973;
        if (_1740 > 0.0)
        {
            _1973 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1973 = frontier_phi_23_19_ladder;
        }
        float _2216;
        if (_1743 > 0.0)
        {
            _2216 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2216 = frontier_phi_35_30_ladder;
        }
        float _2218 = isnan(_1973) ? _1771 : (isnan(_1771) ? _1973 : min(_1771, _1973));
        float _2219 = isnan(_2216) ? _2218 : (isnan(_2218) ? _2216 : min(_2218, _2216));
        float _2223 = (_2219 * _1737) + _1726;
        float _2224 = (_2219 * _1740) + _1730;
        float _2225 = (_2219 * _1743) + _1734;
        float _2226 = _2219 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2226;
        float _2230 = _2226 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 > _2230) || ((_2224 < _2228) || ((_2223 < _2228) || (_2223 > _2230))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2225, cbModelParam._m0[9u].z, fma(_2224, cbModelParam._m0[9u].y, _2223 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2225, cbModelParam._m0[10u].z, fma(_2224, cbModelParam._m0[10u].y, _2223 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2225, cbModelParam._m0[11u].z, fma(_2224, cbModelParam._m0[11u].y, _2223 * cbModelParam._m0[11u].x))), _1677);
            frontier_phi_13_35_ladder = _2349.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2349.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2349.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_13_35_ladder_2;
        _1761 = frontier_phi_13_35_ladder_1;
        _1763 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1677);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _715);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1837 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1840 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _1978;
        if (_1834 > 0.0)
        {
            _1978 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1978 = frontier_phi_25_21_ladder;
        }
        float _2243;
        if (_1837 > 0.0)
        {
            _2243 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2243 = frontier_phi_37_32_ladder;
        }
        float _2448;
        if (_1840 > 0.0)
        {
            _2448 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2448 = frontier_phi_46_43_ladder;
        }
        float _2450 = isnan(_2243) ? _1978 : (isnan(_1978) ? _2243 : min(_1978, _2243));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1834) + _1823;
        float _2456 = (_2451 * _1837) + _1827;
        float _2457 = (_2451 * _1840) + _1831;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2458;
        float _2461 = _2458 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2457 > _2461) || ((_2457 < _2459) || ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 < _2459) || (_2455 > _2461))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2457, cbModelParam._m0[17u].z, fma(_2456, cbModelParam._m0[17u].y, _2455 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2457, cbModelParam._m0[18u].z, fma(_2456, cbModelParam._m0[18u].y, _2455 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2457, cbModelParam._m0[19u].z, fma(_2456, cbModelParam._m0[19u].y, _2455 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_22_46_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_22_46_ladder_2;
        _1861 = frontier_phi_22_46_ladder_1;
        _1863 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1768);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1875 = ((((1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_891 * _878)) * _862;
    float _1876 = _1875 * ((cbModelParam._m0[1u].w * (_1859 - _1759)) + _1759);
    float _1877 = _1875 * ((cbModelParam._m0[1u].w * (_1861 - _1761)) + _1761);
    float _1878 = _1875 * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1881 = fma(_1878, cbSceneParam._m0[89u].z, fma(_1877, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1884 = fma(_1878, cbSceneParam._m0[90u].z, fma(_1877, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1887 = fma(_1878, cbSceneParam._m0[91u].z, fma(_1877, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    uvec4 _1897 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1899 = _1897.x * 14u;
    uint _1900 = _1899 + 13u;
    float _1907 = _862 + (-1.0);
    float _1912 = (cbLight._m0[_1900].x * _1907) + 1.0;
    float _1913 = (cbLight._m0[_1900].y * _1907) + 1.0;
    float _1914 = (cbLight._m0[_1900].z * _1907) + 1.0;
    float _1915 = (cbLight._m0[_1900].w * _1907) + 1.0;
    uint _1916 = _1899 + 5u;
    float _1922 = isnan(1.0) ? _1913 : (isnan(_1913) ? 1.0 : min(_1913, 1.0));
    uint _1926 = _1899 + 4u;
    float _1932 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1936 = _1899 | 1u;
    float _1947 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_712, _713, _714));
    float _1950 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_712, _713, _714));
    float _4062 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _4073 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1955 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1957 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1964 = ((cbLight._m0[_1916].x * _1922) * _1957) + ((cbLight._m0[_1926].x * _1932) * _1955);
    float _1965 = ((_1922 * cbLight._m0[_1916].y) * _1957) + ((_1932 * cbLight._m0[_1926].y) * _1955);
    float _1966 = ((_1922 * cbLight._m0[_1916].z) * _1957) + ((_1932 * cbLight._m0[_1926].z) * _1955);
    uvec4 _1970 = floatBitsToUint(cbLight._m0[_1899 + 12u]);
    bool _1972 = _1970.x == 0u;
    float _1983;
    float _1985;
    float _1987;
    if (_1972)
    {
        _1983 = _1964;
        _1985 = _1965;
        _1987 = _1966;
    }
    else
    {
        uint _1991 = _1899 + 6u;
        float _2007 = (dot(vec3(cbLight._m0[_1899 + 2u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2008 = _2007 * _2007;
        float _4084 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2009 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2010 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _1983 = (((cbLight._m0[_1991].x * 0.3183098733425140380859375) * _2009) * _2010) + _1964;
        _1985 = (((cbLight._m0[_1991].y * 0.3183098733425140380859375) * _2009) * _2010) + _1965;
        _1987 = (((cbLight._m0[_1991].z * 0.3183098733425140380859375) * _2009) * _2010) + _1966;
    }
    bool _1990 = _1970.y == 0u;
    float _2028;
    float _2030;
    float _2032;
    if (_1990)
    {
        _2028 = _1983;
        _2030 = _1985;
        _2032 = _1987;
    }
    else
    {
        uint _2187 = _1899 + 7u;
        float _2203 = (dot(vec3(cbLight._m0[_1899 + 3u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2204 = _2203 * _2203;
        float _4100 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2205 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2206 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2028 = (((cbLight._m0[_2187].x * 0.3183098733425140380859375) * _2205) * _2206) + _1983;
        _2030 = (((cbLight._m0[_2187].y * 0.3183098733425140380859375) * _2205) * _2206) + _1985;
        _2032 = (((cbLight._m0[_2187].z * 0.3183098733425140380859375) * _2205) * _2206) + _1987;
    }
    uint _2035 = _1899 + 8u;
    float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1899].w)) * _715) * 0.949999988079071044921875);
    float _2049 = _2048 * _2048;
    float _2050 = cbLight._m0[_1899].x + _791;
    float _2051 = cbLight._m0[_1899].y + _792;
    float _2052 = cbLight._m0[_1899].z + _793;
    float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
    float _2057 = _2056 * _2050;
    float _2058 = _2056 * _2051;
    float _2059 = _2056 * _2052;
    float _2060 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1899].xyz));
    float _4116 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2064 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2065 = dot(vec3(_712, _713, _714), vec3(_2057, _2058, _2059));
    float _4138 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1899].xyz), vec3(_2057, _2058, _2059));
    float _4149 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = _2049 * _2049;
    float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
    float _2088 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2089 = 1.0 - _2049;
    float _2100 = (0.5 / (((_2064 * ((_2063 * _2089) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2089) + _2049) * _2063))) * _2063;
    float _4160 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
    uint _2113 = _1899 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _715) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1936].x + _791;
    float _2127 = cbLight._m0[_1936].y + _792;
    float _2128 = cbLight._m0[_1936].z + _793;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1936].xyz));
    float _4171 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2140 = dot(vec3(_712, _713, _714), vec3(_2133, _2134, _2135));
    float _4182 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2133, _2134, _2135));
    float _4193 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2162 = 1.0 - _2125;
    float _2172 = (0.5 / (((_2064 * ((_2139 * _2162) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2162) + _2125) * _2139))) * _2139;
    float _4204 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2184 = (((_2161 * cbLight._m0[_2113].x) * _2174) * _1922) + (((_2088 * cbLight._m0[_2035].x) * _2102) * _1932);
    float _2185 = (((_2161 * cbLight._m0[_2113].y) * _2174) * _1922) + (((_2088 * cbLight._m0[_2035].y) * _2102) * _1932);
    float _2186 = (((_2161 * cbLight._m0[_2113].z) * _2174) * _1922) + (((_2088 * cbLight._m0[_2035].z) * _2102) * _1932);
    float _2248;
    float _2250;
    float _2252;
    if (_1972)
    {
        _2248 = _2184;
        _2250 = _2185;
        _2252 = _2186;
    }
    else
    {
        uint _2254 = _1899 + 2u;
        uint _2258 = _1899 + 10u;
        float _2272 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _715) * 0.949999988079071044921875);
        float _2273 = _2272 * _2272;
        float _2274 = cbLight._m0[_2254].x + _791;
        float _2275 = cbLight._m0[_2254].y + _792;
        float _2276 = cbLight._m0[_2254].z + _793;
        float _2280 = inversesqrt(dot(vec3(_2274, _2275, _2276), vec3(_2274, _2275, _2276)));
        float _2281 = _2280 * _2274;
        float _2282 = _2280 * _2275;
        float _2283 = _2280 * _2276;
        float _2284 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2254].xyz));
        float _4215 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2288 = dot(vec3(_712, _713, _714), vec3(_2281, _2282, _2283));
        float _4226 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2292 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2281, _2282, _2283));
        float _4237 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2296 = _2273 * _2273;
        float _2300 = ((_2291 * _2291) * (_2296 + (-1.0))) + 1.0;
        float _2309 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2310 = 1.0 - _2273;
        float _2320 = (0.5 / (((_2064 * ((_2287 * _2310) + _2273)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2310) + _2273) * _2287))) * _2287;
        float _4248 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2322 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2296 / ((_2300 * _2300) * 3.141590118408203125));
        float _2323 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
        _2248 = (((_2309 * cbLight._m0[_2258].x) * _2322) * _2323) + _2184;
        _2250 = (((_2309 * cbLight._m0[_2258].y) * _2322) * _2323) + _2185;
        _2252 = (((_2309 * cbLight._m0[_2258].z) * _2322) * _2323) + _2186;
    }
    float _2358;
    float _2360;
    float _2362;
    if (_1990)
    {
        _2358 = _2248;
        _2360 = _2250;
        _2362 = _2252;
    }
    else
    {
        uint _2369 = _1899 + 3u;
        uint _2373 = _1899 + 11u;
        float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _715) * 0.949999988079071044921875);
        float _2388 = _2387 * _2387;
        float _2389 = cbLight._m0[_2369].x + _791;
        float _2390 = cbLight._m0[_2369].y + _792;
        float _2391 = cbLight._m0[_2369].z + _793;
        float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
        float _2396 = _2395 * _2389;
        float _2397 = _2395 * _2390;
        float _2398 = _2395 * _2391;
        float _2399 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2369].xyz));
        float _4264 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2403 = dot(vec3(_712, _713, _714), vec3(_2396, _2397, _2398));
        float _4275 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2407 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2396, _2397, _2398));
        float _4286 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2411 = _2388 * _2388;
        float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
        float _2424 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2425 = 1.0 - _2388;
        float _2435 = (0.5 / (((_2064 * ((_2402 * _2425) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2064 * _2425) + _2388) * _2402))) * _2402;
        float _4297 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
        _2358 = (((_2424 * cbLight._m0[_2373].x) * _2437) * _2438) + _2248;
        _2360 = (((_2424 * cbLight._m0[_2373].y) * _2437) * _2438) + _2250;
        _2362 = (((_2424 * cbLight._m0[_2373].z) * _2437) * _2438) + _2252;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1897.y == 0u)
    {
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2513;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2513;
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2513;
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _800) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _799) / _2529)));
        float _2550 = (log2(_2516 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
        }
        else
        {
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            uint _2812 = 0u;
            uint _2821;
            bool _2822;
            for (;;)
            {
                _2821 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                _2822 = _2821 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2822)
                {
                    frontier_phi_61_pred = _2806;
                    frontier_phi_61_pred_1 = _2811;
                    frontier_phi_61_pred_2 = _2810;
                    frontier_phi_61_pred_3 = _2809;
                    frontier_phi_61_pred_4 = _2808;
                    frontier_phi_61_pred_5 = _2807;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2821;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2812 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _2514;
                        float _2997 = _2956.y - _2515;
                        float _2998 = _2956.z - _2516;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_818, _821, _824), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4323 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _2514;
                        float _3032 = (-0.0) - _2515;
                        float _3033 = (-0.0) - _2516;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3048 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _878;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_818, _821, _824), vec3(_3038, _3039, _3040));
                        float _4339 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3073 = dot(vec3(_818, _821, _824), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4350 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3016 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3006) + _3082;
                        float _4361 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4372 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3108 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3080 * _3080) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2865 = (_3027 * _2975.x) + _2933;
                        _2866 = (_3027 * _2975.y) + _2934;
                        _2867 = (_3027 * _2975.z) + _2935;
                        _2862 = (_3108 * _2992.x) + _2930;
                        _2863 = (_3108 * _2992.y) + _2931;
                        _2864 = (_3108 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_61_pred = _2862;
                    frontier_phi_61_pred_1 = _2867;
                    frontier_phi_61_pred_2 = _2866;
                    frontier_phi_61_pred_3 = _2865;
                    frontier_phi_61_pred_4 = _2864;
                    frontier_phi_61_pred_5 = _2863;
                }
                _2662 = frontier_phi_61_pred;
                _2672 = frontier_phi_61_pred_1;
                _2670 = frontier_phi_61_pred_2;
                _2668 = frontier_phi_61_pred_3;
                _2666 = frontier_phi_61_pred_4;
                _2664 = frontier_phi_61_pred_5;
                uint _2813 = _2812 + 1u;
                if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2806 = _2662;
                    _2807 = _2664;
                    _2808 = _2666;
                    _2809 = _2668;
                    _2810 = _2670;
                    _2811 = _2672;
                    _2812 = _2813;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
        }
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.z;
        uint _2678 = (_2676 >> 8u) & 15u;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((4294967295u << _2678) & _2560) == 0u)
        {
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
            _2782 = _2669;
            _2784 = _2671;
        }
        else
        {
            float _2799 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
            float _2800 = _2799 * _2514;
            float _2801 = _2799 * _2515;
            float _2802 = _2799 * _2516;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2678 < ((_2676 >> 12u) & 15u))
            {
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2913 = _2661;
                float _2914 = _2663;
                float _2915 = _2665;
                float _2916 = _2667;
                float _2917 = _2669;
                float _2918 = _2671;
                uint _2919 = _2678;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2929)
                    {
                        frontier_phi_67_pred = _2916;
                        frontier_phi_67_pred_1 = _2917;
                        frontier_phi_67_pred_2 = _2918;
                        frontier_phi_67_pred_3 = _2915;
                        frontier_phi_67_pred_4 = _2914;
                        frontier_phi_67_pred_5 = _2913;
                    }
                    else
                    {
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        uint _3132 = _2928;
                        uint _3133;
                        vec4 _3158;
                        float _3159;
                        vec4 _3174;
                        vec3 _3186;
                        vec4 _3201;
                        vec4 _3216;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3143 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3132));
                            _3133 = (_3132 + 4294967295u) & _3132;
                            uint _3145 = _3143 * 40u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3159 = _3158.w;
                            uint _3161 = (_3143 * 40u) + 4u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3143 * 40u) + 8u;
                            _3186 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x));
                            uint _3188 = (_3143 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3143 * 40u) + 20u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3143 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3143 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_2516, _3250.z, fma(_2515, _3250.y, _3250.x * _2514)) + _3250.w;
                            _3263 = !((fma(_2516, _3231.z, fma(_2515, _3231.y, _3231.x * _2514)) + _3231.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3158.x - _2514;
                                float _3291 = _3158.y - _2515;
                                float _3292 = _3158.z - _2516;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3159 * _3159));
                                float _4383 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3308 = sqrt(_3293) * _3174.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_818, _821, _824))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_2516, _3201.z, fma(_2515, _3201.y, _3201.x * _2514)) + _3201.w) / _3262;
                                float _3322 = (fma(_2516, _3216.z, fma(_2515, _3216.y, _3216.x * _2514)) + _3216.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4399 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _878;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2800;
                                float _3352 = _3298 - _2801;
                                float _3353 = _3299 - _2802;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_818, _821, _824), vec3((-0.0) - _2800, (-0.0) - _2801, (-0.0) - _2802));
                                float _4410 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3365 = dot(vec3(_818, _821, _824), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4421 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_818, _821, _824), vec3(_3297, _3298, _3299))) + _3374;
                                float _4432 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4443 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3402 * _3186.x;
                                frontier_phi_73_pred_1 = _3402 * _3186.y;
                                frontier_phi_73_pred_2 = _3328 * _3174.z;
                                frontier_phi_73_pred_3 = _3328 * _3174.y;
                                frontier_phi_73_pred_4 = _3328 * _3174.x;
                                frontier_phi_73_pred_5 = _3402 * _3186.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3406 = frontier_phi_73_pred;
                            _3407 = frontier_phi_73_pred_1;
                            _3411 = frontier_phi_73_pred_2;
                            _3410 = frontier_phi_73_pred_3;
                            _3409 = frontier_phi_73_pred_4;
                            _3408 = frontier_phi_73_pred_5;
                            _3116 = _3409 + _3129;
                            _3117 = _3410 + _3130;
                            _3118 = _3411 + _3131;
                            _3113 = _3406 + _3126;
                            _3114 = _3407 + _3127;
                            _3115 = _3408 + _3128;
                            if (_3133 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3133;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3116;
                        frontier_phi_67_pred_1 = _3117;
                        frontier_phi_67_pred_2 = _3118;
                        frontier_phi_67_pred_3 = _3115;
                        frontier_phi_67_pred_4 = _3114;
                        frontier_phi_67_pred_5 = _3113;
                    }
                    _2781 = frontier_phi_67_pred;
                    _2783 = frontier_phi_67_pred_1;
                    _2785 = frontier_phi_67_pred_2;
                    _2779 = frontier_phi_67_pred_3;
                    _2777 = frontier_phi_67_pred_4;
                    _2775 = frontier_phi_67_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2775;
                        _2914 = _2777;
                        _2915 = _2779;
                        _2916 = _2781;
                        _2917 = _2783;
                        _2918 = _2785;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2783;
                frontier_phi_55_56_ladder_1 = _2785;
                frontier_phi_55_56_ladder_2 = _2781;
                frontier_phi_55_56_ladder_3 = _2779;
                frontier_phi_55_56_ladder_4 = _2777;
                frontier_phi_55_56_ladder_5 = _2775;
            }
            else
            {
                frontier_phi_55_56_ladder = _2669;
                frontier_phi_55_56_ladder_1 = _2671;
                frontier_phi_55_56_ladder_2 = _2667;
                frontier_phi_55_56_ladder_3 = _2665;
                frontier_phi_55_56_ladder_4 = _2663;
                frontier_phi_55_56_ladder_5 = _2661;
            }
            _2774 = frontier_phi_55_56_ladder_5;
            _2776 = frontier_phi_55_56_ladder_4;
            _2778 = frontier_phi_55_56_ladder_3;
            _2780 = frontier_phi_55_56_ladder_2;
            _2782 = frontier_phi_55_56_ladder;
            _2784 = frontier_phi_55_56_ladder_1;
        }
        float _2789 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2573 = (_2789 * _2780) + _2028;
        _2575 = (_2789 * _2782) + _2030;
        _2577 = (_2789 * _2784) + _2032;
        _2579 = ((_2774 * 0.039999999105930328369140625) * _2789) + _2358;
        _2581 = ((_2776 * 0.039999999105930328369140625) * _2789) + _2360;
        _2583 = ((_2778 * 0.039999999105930328369140625) * _2789) + _2362;
    }
    else
    {
        _2573 = _2028;
        _2575 = _2030;
        _2577 = _2032;
        _2579 = _2358;
        _2581 = _2360;
        _2583 = _2362;
    }
    float _4459 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4470 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4481 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    uint _2603 = _249 + 6u;
    float _2611 = _799 / cbSceneParam._m0[86u].x;
    float _2612 = _800 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _2686 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _2687 = _2686 / _733;
        float _2698 = _2687 * _784;
        float _2699 = _785 * _2687;
        float _2700 = (-0.0) - _2699;
        float _2702 = _2687 * _786;
        float _2704 = (cbSceneParam._m0[77u].w * _2700) / _2686;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2699;
        float _2712 = sqrt(((_2698 * _2698) + (_2699 * _2699)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2686)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2700 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2835 = 1.0 / cbSceneParam._m0[80u].x;
            float _2836 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2837 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            _2875 = ((abs(_2712 / _2700) * cbSceneParam._m0[80u].y) * ((((_2846 - _2847) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))))) * _2835)) - ((exp2(_2722 * _2846) - exp2(_2722 * _2847)) * _2835))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2631);
        _2724 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2726 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2728 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2730 = _2886 * _2631;
    }
    else
    {
        _2724 = _2628;
        _2726 = _2629;
        _2728 = _2630;
        _2730 = _2631;
    }
    float _2742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2743 = _2742 == 3.0;
    float _2744 = log2(_2730);
    float _2751 = exp2(_2744 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2573 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _862))) + ((_2579 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _2752 = exp2(_2744 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2575 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _862))) + ((_2581 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _2753 = exp2(_2744 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2577 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _862))) + ((_2583 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1666)) * cbPerFrame._m0[3u].x));
    float _2762 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2762 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.y = _2762 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.z = _2762 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.w = cbInstanceData._m0[_2603].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
}


