#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1195;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _343 = _341.x;
    float _353 = dot(vec4(_343, _341.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _370 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_343 - _353) * cbMtdParam._m0[24u].x) + _353) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3500 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _378 = (_371 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _379 = (_371 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _380 = (_371 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _254) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _255) + cbTextureTilingScale._m0[3u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _419 = _417.x;
    float _429 = dot(vec4(_419, _417.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _443 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_419 - _429) * cbMtdParam._m0[24u].x) + _429) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3511 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _451 = (_444 * ((_397.x * cbMtdParam._m0[13u].x) - _378)) + _378;
    float _452 = (_444 * ((_397.y * cbMtdParam._m0[13u].y) - _379)) + _379;
    float _453 = (_444 * ((_397.z * cbMtdParam._m0[13u].z) - _380)) + _380;
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _499 = ((_471.x - _490) * _371) + _490;
    float _500 = ((_471.y - _491) * _371) + _491;
    float _501 = ((_471.z - _492) * _371) + _492;
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _254) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _255) + cbTextureTilingScale._m0[2u].w));
    float _526 = ((_513.z - _501) * _444) + _501;
    float _529 = ((((_513.x - _499) * _444) + _499) * 2.0) + (-1.0);
    float _531 = ((((_513.y - _500) * _444) + _500) * 2.0) + (-1.0);
    float _532 = dot(vec2(_529, _531), vec2(_529, _531));
    float _3522 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _592 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_578 - _579) * cbMtdParam._m0[24u].z) + _579) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3533 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _600 = (_593 * (cbMtdParam._m0[17u].x - _451)) + _451;
    float _601 = (_593 * (cbMtdParam._m0[17u].y - _452)) + _452;
    float _602 = (_593 * (cbMtdParam._m0[17u].z - _453)) + _453;
    float _606 = (cbMtdParam._m0[19u].w * (_551.z - _526)) + _526;
    vec4 _619 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _626 = (_619.x * 2.0) + (-1.0);
    float _627 = (_619.y * 2.0) + (-1.0);
    float _628 = dot(vec2(_626, _627), vec2(_626, _627));
    float _3544 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _636 = (_593 * (_619.z - _606)) + _606;
    float _639 = (((_551.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _529;
    float _640 = (((_551.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _531;
    float _652 = (((_626 - _639) + (cbMtdParam._m0[21u].x * _639)) * _593) + _639;
    float _653 = (((_627 - _640) + (cbMtdParam._m0[21u].x * _640)) * _593) + _640;
    float _654 = (_593 * (sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) - _537)) + _537;
    float _659 = cbMtdParam._m0[22u].x + _551.w;
    float _662 = fma(_654, _221 * NORMAL.x, fma(_653, _228 * TANGENT.x, (_214 * _206) * _652));
    float _665 = fma(_654, _221 * NORMAL.y, fma(_653, _228 * TANGENT.y, (_214 * _207) * _652));
    float _668 = fma(_654, _221 * NORMAL.z, fma(_653, _228 * TANGENT.z, (_214 * _208) * _652));
    float _672 = inversesqrt(dot(vec3(_662, _665, _668), vec3(_662, _665, _668)));
    float _673 = _672 * _662;
    float _674 = _672 * _665;
    float _675 = _672 * _668;
    float _3555 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _676 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3577 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3588 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3599 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _746 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _736);
    float _747 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _736);
    float _748 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _736);
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _753 = _746 * _752;
    float _754 = _747 * _752;
    float _755 = _748 * _752;
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_675, cbSceneParam._m0[5u].z, fma(_674, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _673));
    float _783 = fma(_675, cbSceneParam._m0[6u].z, fma(_674, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _673));
    float _786 = fma(_675, cbSceneParam._m0[7u].z, fma(_674, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _673));
    uint _800 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_800].z;
    float _3610 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    vec4 _820 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _824 = ((isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * TEXCOORD_5.w) * _820.x;
    float _825 = dot(vec3(_673, _674, _675), vec3(_753, _754, _755));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _673) - _753;
    float _833 = (_828 * _674) - _754;
    float _834 = (_828 * _675) - _755;
    float _838 = abs(dot(vec3(_753, _754, _755), vec3(_673, _674, _675)));
    float _3643 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_676);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _923 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _927 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _952 = _885 + _673;
        float _953 = _889 + _674;
        float _954 = _893 + _675;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_673, _674, _675), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3691 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_673, _674, _675), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3724 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_673, _674, _675), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3757 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1233 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1237 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1241 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1264 = _885 + _673;
        float _1265 = _889 + _674;
        float _1266 = _893 + _675;
        float _1276 = fma(_1266, cbModelParam._m0[30u].z, fma(_1265, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1264)) - _1233;
        float _1277 = fma(_1266, cbModelParam._m0[31u].z, fma(_1265, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1264)) - _1237;
        float _1278 = fma(_1266, cbModelParam._m0[32u].z, fma(_1265, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1264)) - _1241;
        float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
        float _1295 = ((_1282 * _1276) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1233 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1296 = ((_1282 * _1277) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1237 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1297 = ((_1282 * _1278) / cbModelParam._m0[35u].z) + ((((((_1241 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1295, _1296, _1297), 0.0);
        float _1332 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1299.x + (-0.5));
        float _1334 = _1332 * (_1299.y + (-0.5));
        float _1335 = _1332 * (_1299.z + (-0.5));
        float _1342 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1306.x + (-0.5));
        float _1344 = _1342 * (_1306.y + (-0.5));
        float _1345 = _1342 * (_1306.z + (-0.5));
        float _1352 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1313.x + (-0.5));
        float _1354 = _1352 * (_1313.y + (-0.5));
        float _1355 = _1352 * (_1313.z + (-0.5));
        float _1362 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1320.x + (-0.5));
        float _1364 = _1362 * (_1320.y + (-0.5));
        float _1365 = _1362 * (_1320.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_673, _674, _675), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3820 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1396 + 1.0))) + _1401) * _1366;
        float _1411 = _1334 * 0.5;
        float _1412 = _1344 * 0.5;
        float _1413 = _1354 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_673, _674, _675), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3853 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1438 + 1.0))) + _1443) * _1367;
        float _1453 = _1335 * 0.5;
        float _1454 = _1345 * 0.5;
        float _1455 = _1355 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_673, _674, _675), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _3886 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1480 + 1.0))) + _1485) * _1368;
        _1502 = _1335;
        _1503 = _1334;
        _1504 = _1333;
        _1505 = _1345;
        _1506 = _1344;
        _1507 = _1343;
        _1508 = _1355;
        _1509 = _1354;
        _1510 = _1353;
        _1511 = _1368;
        _1512 = _1367;
        _1513 = _1366;
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1515 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1516 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
    }
    else
    {
        _1502 = _1195;
        _1503 = _1195;
        _1504 = _1195;
        _1505 = _1195;
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = 0.0;
        _1515 = 0.0;
        _1516 = 0.0;
    }
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1207)) + _1207;
    float _1527 = (cbModelParam._m0[1u].x * (_1515 - _1208)) + _1208;
    float _1528 = (cbModelParam._m0[1u].x * (_1516 - _1209)) + _1209;
    float _1549 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1526));
    float _1570 = _832 * 0.5;
    float _1571 = _833 * 0.5;
    float _1572 = _834 * 0.5;
    float _1573 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1504, _1507, _1510, _1513));
    float _1576 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1503, _1506, _1509, _1512));
    float _1579 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1613;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1586 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1590 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1594 = dot(vec4(_1570, _1571, _1572, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1601 = dot(vec4(cbModelParam._m0[39u]), vec4(_1570, _1571, _1572, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1624;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1615 = dot(vec4(cbModelParam._m0[40u]), vec4(_1570, _1571, _1572, 1.0));
        _1624 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1624 = 1.0;
    }
    float _1628 = (_1624 * cbModelParam._m0[1u].x) + (_1613 * (1.0 - cbModelParam._m0[1u].x));
    float _1638 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _676);
    float _1639 = isnan(_1638) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1638 : min(cbModelParam._m0[25u].z, _1638));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1687 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1691 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1695 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1698 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1701 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1704 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1732;
        if (_1698 > 0.0)
        {
            _1732 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1732 = frontier_phi_14_12_ladder;
        }
        float _1933;
        if (_1701 > 0.0)
        {
            _1933 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1933 = frontier_phi_23_19_ladder;
        }
        float _2176;
        if (_1704 > 0.0)
        {
            _2176 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2176 = frontier_phi_35_30_ladder;
        }
        float _2178 = isnan(_1933) ? _1732 : (isnan(_1732) ? _1933 : min(_1732, _1933));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1698) + _1687;
        float _2184 = (_2179 * _1701) + _1691;
        float _2185 = (_2179 * _1704) + _1695;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1639);
            frontier_phi_13_35_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1720 = frontier_phi_13_35_ladder_2;
        _1722 = frontier_phi_13_35_ladder_1;
        _1724 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1639);
        _1720 = _1708.x * cbModelParam._m0[1u].y;
        _1722 = _1708.y * cbModelParam._m0[1u].y;
        _1724 = _1708.z * cbModelParam._m0[1u].y;
    }
    float _1728 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _676);
    float _1729 = isnan(_1728) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1728 : min(cbModelParam._m0[25u].w, _1728));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1783 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1787 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1791 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1794 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1797 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1800 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _1938;
        if (_1794 > 0.0)
        {
            _1938 = abs((1.0 - _1783) / _1794);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1783 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1938 = frontier_phi_25_21_ladder;
        }
        float _2203;
        if (_1797 > 0.0)
        {
            _2203 = abs((1.0 - _1787) / _1797);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1787 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2203 = frontier_phi_37_32_ladder;
        }
        float _2408;
        if (_1800 > 0.0)
        {
            _2408 = abs((1.0 - _1791) / _1800);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1791 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2408 = frontier_phi_46_43_ladder;
        }
        float _2410 = isnan(_2203) ? _1938 : (isnan(_1938) ? _2203 : min(_1938, _2203));
        float _2411 = isnan(_2408) ? _2410 : (isnan(_2410) ? _2408 : min(_2410, _2408));
        float _2415 = (_2411 * _1794) + _1783;
        float _2416 = (_2411 * _1797) + _1787;
        float _2417 = (_2411 * _1800) + _1791;
        float _2418 = _2411 * 9.9999997473787516355514526367188e-05;
        float _2419 = (-1.0) - _2418;
        float _2421 = _2418 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2417 > _2421) || ((_2417 < _2419) || ((_2416 > _2421) || ((_2416 < _2419) || ((_2415 < _2419) || (_2415 > _2421))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2417, cbModelParam._m0[17u].z, fma(_2416, cbModelParam._m0[17u].y, _2415 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2417, cbModelParam._m0[18u].z, fma(_2416, cbModelParam._m0[18u].y, _2415 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2417, cbModelParam._m0[19u].z, fma(_2416, cbModelParam._m0[19u].y, _2415 * cbModelParam._m0[19u].x))), _1729);
            frontier_phi_22_46_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1819 = frontier_phi_22_46_ladder_2;
        _1821 = frontier_phi_22_46_ladder_1;
        _1823 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1729);
        _1819 = _1803.x * cbModelParam._m0[1u].z;
        _1821 = _1803.y * cbModelParam._m0[1u].z;
        _1823 = _1803.z * cbModelParam._m0[1u].z;
    }
    float _1835 = ((((1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_853 * _840)) * _824;
    float _1836 = _1835 * ((cbModelParam._m0[1u].w * (_1819 - _1720)) + _1720);
    float _1837 = _1835 * ((cbModelParam._m0[1u].w * (_1821 - _1722)) + _1722);
    float _1838 = _1835 * ((cbModelParam._m0[1u].w * (_1823 - _1724)) + _1724);
    float _1841 = fma(_1838, cbSceneParam._m0[89u].z, fma(_1837, cbSceneParam._m0[89u].y, _1836 * cbSceneParam._m0[89u].x));
    float _1844 = fma(_1838, cbSceneParam._m0[90u].z, fma(_1837, cbSceneParam._m0[90u].y, _1836 * cbSceneParam._m0[90u].x));
    float _1847 = fma(_1838, cbSceneParam._m0[91u].z, fma(_1837, cbSceneParam._m0[91u].y, _1836 * cbSceneParam._m0[91u].x));
    uvec4 _1857 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1859 = _1857.x * 14u;
    uint _1860 = _1859 + 13u;
    float _1867 = _824 + (-1.0);
    float _1872 = (cbLight._m0[_1860].x * _1867) + 1.0;
    float _1873 = (cbLight._m0[_1860].y * _1867) + 1.0;
    float _1874 = (cbLight._m0[_1860].z * _1867) + 1.0;
    float _1875 = (cbLight._m0[_1860].w * _1867) + 1.0;
    uint _1876 = _1859 + 5u;
    float _1882 = isnan(1.0) ? _1873 : (isnan(_1873) ? 1.0 : min(_1873, 1.0));
    uint _1886 = _1859 + 4u;
    float _1892 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
    uint _1896 = _1859 | 1u;
    float _1907 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_673, _674, _675));
    float _1910 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_673, _674, _675));
    float _4022 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _4033 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1915 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * 0.3183098733425140380859375;
    float _1917 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1924 = ((cbLight._m0[_1876].x * _1882) * _1917) + ((cbLight._m0[_1886].x * _1892) * _1915);
    float _1925 = ((_1882 * cbLight._m0[_1876].y) * _1917) + ((_1892 * cbLight._m0[_1886].y) * _1915);
    float _1926 = ((_1882 * cbLight._m0[_1876].z) * _1917) + ((_1892 * cbLight._m0[_1886].z) * _1915);
    uvec4 _1930 = floatBitsToUint(cbLight._m0[_1859 + 12u]);
    bool _1932 = _1930.x == 0u;
    float _1943;
    float _1945;
    float _1947;
    if (_1932)
    {
        _1943 = _1924;
        _1945 = _1925;
        _1947 = _1926;
    }
    else
    {
        uint _1951 = _1859 + 6u;
        float _1967 = (dot(vec3(cbLight._m0[_1859 + 2u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _1968 = _1967 * _1967;
        float _4044 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
        float _1969 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1970 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _1943 = (((cbLight._m0[_1951].x * 0.3183098733425140380859375) * _1969) * _1970) + _1924;
        _1945 = (((cbLight._m0[_1951].y * 0.3183098733425140380859375) * _1969) * _1970) + _1925;
        _1947 = (((cbLight._m0[_1951].z * 0.3183098733425140380859375) * _1969) * _1970) + _1926;
    }
    bool _1950 = _1930.y == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1950)
    {
        _1988 = _1943;
        _1990 = _1945;
        _1992 = _1947;
    }
    else
    {
        uint _2147 = _1859 + 7u;
        float _2163 = (dot(vec3(cbLight._m0[_1859 + 3u].xyz), vec3(_673, _674, _675)) * 0.5) + 0.5;
        float _2164 = _2163 * _2163;
        float _4060 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2165 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2166 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _1988 = (((cbLight._m0[_2147].x * 0.3183098733425140380859375) * _2165) * _2166) + _1943;
        _1990 = (((cbLight._m0[_2147].y * 0.3183098733425140380859375) * _2165) * _2166) + _1945;
        _1992 = (((cbLight._m0[_2147].z * 0.3183098733425140380859375) * _2165) * _2166) + _1947;
    }
    uint _1995 = _1859 + 8u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _676) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1859].x + _753;
    float _2011 = cbLight._m0[_1859].y + _754;
    float _2012 = cbLight._m0[_1859].z + _755;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1859].xyz));
    float _4076 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2024 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2025 = dot(vec3(_673, _674, _675), vec3(_2017, _2018, _2019));
    float _4098 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2017, _2018, _2019));
    float _4109 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2009 * _2009;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = 1.0 - _2009;
    float _2060 = (0.5 / (((_2024 * ((_2023 * _2049) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2049) + _2009) * _2023))) * _2023;
    float _4120 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    uint _2073 = _1859 + 9u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _676) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_1896].x + _753;
    float _2087 = cbLight._m0[_1896].y + _754;
    float _2088 = cbLight._m0[_1896].z + _755;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_1896].xyz));
    float _4131 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2100 = dot(vec3(_673, _674, _675), vec3(_2093, _2094, _2095));
    float _4142 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2093, _2094, _2095));
    float _4153 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2085 * _2085;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2122 = 1.0 - _2085;
    float _2132 = (0.5 / (((_2024 * ((_2099 * _2122) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2122) + _2085) * _2099))) * _2099;
    float _4164 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    float _2144 = (((_2121 * cbLight._m0[_2073].x) * _2134) * _1882) + (((_2048 * cbLight._m0[_1995].x) * _2062) * _1892);
    float _2145 = (((_2121 * cbLight._m0[_2073].y) * _2134) * _1882) + (((_2048 * cbLight._m0[_1995].y) * _2062) * _1892);
    float _2146 = (((_2121 * cbLight._m0[_2073].z) * _2134) * _1882) + (((_2048 * cbLight._m0[_1995].z) * _2062) * _1892);
    float _2208;
    float _2210;
    float _2212;
    if (_1932)
    {
        _2208 = _2144;
        _2210 = _2145;
        _2212 = _2146;
    }
    else
    {
        uint _2214 = _1859 + 2u;
        uint _2218 = _1859 + 10u;
        float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _676) * 0.949999988079071044921875);
        float _2233 = _2232 * _2232;
        float _2234 = cbLight._m0[_2214].x + _753;
        float _2235 = cbLight._m0[_2214].y + _754;
        float _2236 = cbLight._m0[_2214].z + _755;
        float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
        float _2241 = _2240 * _2234;
        float _2242 = _2240 * _2235;
        float _2243 = _2240 * _2236;
        float _2244 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2214].xyz));
        float _4175 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2248 = dot(vec3(_673, _674, _675), vec3(_2241, _2242, _2243));
        float _4186 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
        float _4197 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2256 = _2233 * _2233;
        float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
        float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2270 = 1.0 - _2233;
        float _2280 = (0.5 / (((_2024 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2270) + _2233) * _2247))) * _2247;
        float _4208 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2282 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
        float _2283 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
        _2208 = (((_2269 * cbLight._m0[_2218].x) * _2282) * _2283) + _2144;
        _2210 = (((_2269 * cbLight._m0[_2218].y) * _2282) * _2283) + _2145;
        _2212 = (((_2269 * cbLight._m0[_2218].z) * _2282) * _2283) + _2146;
    }
    float _2318;
    float _2320;
    float _2322;
    if (_1950)
    {
        _2318 = _2208;
        _2320 = _2210;
        _2322 = _2212;
    }
    else
    {
        uint _2329 = _1859 + 3u;
        uint _2333 = _1859 + 11u;
        float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _676) * 0.949999988079071044921875);
        float _2348 = _2347 * _2347;
        float _2349 = cbLight._m0[_2329].x + _753;
        float _2350 = cbLight._m0[_2329].y + _754;
        float _2351 = cbLight._m0[_2329].z + _755;
        float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
        float _2356 = _2355 * _2349;
        float _2357 = _2355 * _2350;
        float _2358 = _2355 * _2351;
        float _2359 = dot(vec3(_673, _674, _675), vec3(cbLight._m0[_2329].xyz));
        float _4224 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2363 = dot(vec3(_673, _674, _675), vec3(_2356, _2357, _2358));
        float _4235 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2366 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2367 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2356, _2357, _2358));
        float _4246 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2371 = _2348 * _2348;
        float _2375 = ((_2366 * _2366) * (_2371 + (-1.0))) + 1.0;
        float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2385 = 1.0 - _2348;
        float _2395 = (0.5 / (((_2024 * ((_2362 * _2385) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2385) + _2348) * _2362))) * _2362;
        float _4257 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2397 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2371 / ((_2375 * _2375) * 3.141590118408203125));
        float _2398 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
        _2318 = (((_2384 * cbLight._m0[_2333].x) * _2397) * _2398) + _2208;
        _2320 = (((_2384 * cbLight._m0[_2333].y) * _2397) * _2398) + _2210;
        _2322 = (((_2384 * cbLight._m0[_2333].z) * _2397) * _2398) + _2212;
    }
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_1857.y == 0u)
    {
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2473;
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2473;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2473;
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.x;
        uint _2500 = uint((float(_2488.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2489))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2489)));
        float _2510 = (log2(_2476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2511 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        uint _2514 = uint(isnan(14.0) ? _2511 : (isnan(_2511) ? 14.0 : min(_2511, 14.0)));
        uvec4 _2519 = texelFetch(g_lightClusterGridBuffer, int(((_2514 << 2u) + (_2500 << 6u)) >> 2u));
        uint _2520 = _2519.x;
        uint _2521 = _2488.z;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        if (((((1u << ((_2521 >> 4u) & 15u)) + 4294967295u) & _2520) == 0u) || ((_2521 & 240u) == 0u))
        {
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
        }
        else
        {
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            uint _2772 = 0u;
            uint _2781;
            bool _2782;
            for (;;)
            {
                _2781 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2772 << 2u)) >> 2u)).x;
                _2782 = _2781 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2782)
                {
                    frontier_phi_61_pred = _2766;
                    frontier_phi_61_pred_1 = _2771;
                    frontier_phi_61_pred_2 = _2770;
                    frontier_phi_61_pred_3 = _2769;
                    frontier_phi_61_pred_4 = _2768;
                    frontier_phi_61_pred_5 = _2767;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2781;
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2772 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2474;
                        float _2957 = _2916.y - _2475;
                        float _2958 = _2916.z - _2476;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_780, _783, _786), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4283 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2474;
                        float _2992 = (-0.0) - _2475;
                        float _2993 = (-0.0) - _2476;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _840;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_780, _783, _786), vec3(_2998, _2999, _3000));
                        float _4299 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3033 = dot(vec3(_780, _783, _786), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4310 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4321 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4332 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2825 = (_2987 * _2935.x) + _2893;
                        _2826 = (_2987 * _2935.y) + _2894;
                        _2827 = (_2987 * _2935.z) + _2895;
                        _2822 = (_3068 * _2952.x) + _2890;
                        _2823 = (_3068 * _2952.y) + _2891;
                        _2824 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_61_pred = _2822;
                    frontier_phi_61_pred_1 = _2827;
                    frontier_phi_61_pred_2 = _2826;
                    frontier_phi_61_pred_3 = _2825;
                    frontier_phi_61_pred_4 = _2824;
                    frontier_phi_61_pred_5 = _2823;
                }
                _2622 = frontier_phi_61_pred;
                _2632 = frontier_phi_61_pred_1;
                _2630 = frontier_phi_61_pred_2;
                _2628 = frontier_phi_61_pred_3;
                _2626 = frontier_phi_61_pred_4;
                _2624 = frontier_phi_61_pred_5;
                uint _2773 = _2772 + 1u;
                if (_2773 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2766 = _2622;
                    _2767 = _2624;
                    _2768 = _2626;
                    _2769 = _2628;
                    _2770 = _2630;
                    _2771 = _2632;
                    _2772 = _2773;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
        }
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.z;
        uint _2638 = (_2636 >> 8u) & 15u;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        if (((4294967295u << _2638) & _2520) == 0u)
        {
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
            _2740 = _2627;
            _2742 = _2629;
            _2744 = _2631;
        }
        else
        {
            float _2759 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
            float _2760 = _2759 * _2474;
            float _2761 = _2759 * _2475;
            float _2762 = _2759 * _2476;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2638 < ((_2636 >> 12u) & 15u))
            {
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2873 = _2621;
                float _2874 = _2623;
                float _2875 = _2625;
                float _2876 = _2627;
                float _2877 = _2629;
                float _2878 = _2631;
                uint _2879 = _2638;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2514 << 5u) + (_2500 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2889)
                    {
                        frontier_phi_67_pred = _2876;
                        frontier_phi_67_pred_1 = _2877;
                        frontier_phi_67_pred_2 = _2878;
                        frontier_phi_67_pred_3 = _2875;
                        frontier_phi_67_pred_4 = _2874;
                        frontier_phi_67_pred_5 = _2873;
                    }
                    else
                    {
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        uint _3092 = _2888;
                        uint _3093;
                        vec4 _3118;
                        float _3119;
                        vec4 _3134;
                        vec3 _3146;
                        vec4 _3161;
                        vec4 _3176;
                        float _3222;
                        bool _3223;
                        for (;;)
                        {
                            uint _3103 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3092));
                            _3093 = (_3092 + 4294967295u) & _3092;
                            uint _3105 = _3103 * 40u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3119 = _3118.w;
                            uint _3121 = (_3103 * 40u) + 4u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3103 * 40u) + 8u;
                            _3146 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x));
                            uint _3148 = (_3103 * 40u) + 16u;
                            _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3163 = (_3103 * 40u) + 20u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3178 = (_3103 * 40u) + 24u;
                            vec4 _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3197 = (_3103 * 40u) + 28u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3222 = fma(_2476, _3210.z, fma(_2475, _3210.y, _3210.x * _2474)) + _3210.w;
                            _3223 = !((fma(_2476, _3191.z, fma(_2475, _3191.y, _3191.x * _2474)) + _3191.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3223)
                            {
                                float _3250 = _3118.x - _2474;
                                float _3251 = _3118.y - _2475;
                                float _3252 = _3118.z - _2476;
                                float _3253 = dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252));
                                float _3256 = inversesqrt(_3253);
                                float _3257 = _3256 * _3250;
                                float _3258 = _3256 * _3251;
                                float _3259 = _3256 * _3252;
                                float _3263 = 1.0 - (_3253 / (_3119 * _3119));
                                float _4343 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                                float _3268 = sqrt(_3253) * _3134.w;
                                float _3270 = 1.39999997615814208984375 / (_3268 + 1.39999997615814208984375);
                                float _3271 = _3270 * _3270;
                                float _3274 = ((1.0 - _3271) * dot(vec3(_3257, _3258, _3259), vec3(_780, _783, _786))) + _3271;
                                float _3277 = _3268 * _3268;
                                float _3281 = (fma(_2476, _3161.z, fma(_2475, _3161.y, _3161.x * _2474)) + _3161.w) / _3222;
                                float _3282 = (fma(_2476, _3176.z, fma(_2475, _3176.y, _3176.x * _2474)) + _3176.w) / _3222;
                                float _3286 = 1.0 - dot(vec2(_3281, _3282), vec2(_3281, _3282));
                                float _4359 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3288 = _3287 * (((isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0))) * _3264) / ((_3277 * 0.699999988079071044921875) + 1.0));
                                float _3300 = exp2(log2(1.0 / ((_3277 * 3.5) + 5.0)) * 0.25);
                                float _3301 = 1.0 - _840;
                                float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                                float _3309 = _3308 * _3308;
                                float _3310 = _3309 * _3309;
                                float _3311 = _3257 - _2760;
                                float _3312 = _3258 - _2761;
                                float _3313 = _3259 - _2762;
                                float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                                float _3321 = dot(vec3(_780, _783, _786), vec3((-0.0) - _2760, (-0.0) - _2761, (-0.0) - _2762));
                                float _4370 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3325 = dot(vec3(_780, _783, _786), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                                float _4381 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3328 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                                float _3333 = _3270 * _3309;
                                float _3334 = _3333 * _3333;
                                float _3340 = ((1.0 - _3334) * dot(vec3(_780, _783, _786), vec3(_3257, _3258, _3259))) + _3334;
                                float _4392 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3341 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3342 = 1.0 - _3309;
                                float _3352 = (0.5 / (((_3341 * ((_3324 * _3342) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3341 * _3342) + _3309) * _3324))) * _3341;
                                float _4403 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3362 = (_3287 * _3264) * (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3332 * _3332) * ((_3277 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3362 * _3146.x;
                                frontier_phi_73_pred_1 = _3362 * _3146.y;
                                frontier_phi_73_pred_2 = _3288 * _3134.z;
                                frontier_phi_73_pred_3 = _3288 * _3134.y;
                                frontier_phi_73_pred_4 = _3288 * _3134.x;
                                frontier_phi_73_pred_5 = _3362 * _3146.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3366 = frontier_phi_73_pred;
                            _3367 = frontier_phi_73_pred_1;
                            _3371 = frontier_phi_73_pred_2;
                            _3370 = frontier_phi_73_pred_3;
                            _3369 = frontier_phi_73_pred_4;
                            _3368 = frontier_phi_73_pred_5;
                            _3076 = _3369 + _3089;
                            _3077 = _3370 + _3090;
                            _3078 = _3371 + _3091;
                            _3073 = _3366 + _3086;
                            _3074 = _3367 + _3087;
                            _3075 = _3368 + _3088;
                            if (_3093 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3093;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3076;
                        frontier_phi_67_pred_1 = _3077;
                        frontier_phi_67_pred_2 = _3078;
                        frontier_phi_67_pred_3 = _3075;
                        frontier_phi_67_pred_4 = _3074;
                        frontier_phi_67_pred_5 = _3073;
                    }
                    _2741 = frontier_phi_67_pred;
                    _2743 = frontier_phi_67_pred_1;
                    _2745 = frontier_phi_67_pred_2;
                    _2739 = frontier_phi_67_pred_3;
                    _2737 = frontier_phi_67_pred_4;
                    _2735 = frontier_phi_67_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2735;
                        _2874 = _2737;
                        _2875 = _2739;
                        _2876 = _2741;
                        _2877 = _2743;
                        _2878 = _2745;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2743;
                frontier_phi_55_56_ladder_1 = _2745;
                frontier_phi_55_56_ladder_2 = _2741;
                frontier_phi_55_56_ladder_3 = _2739;
                frontier_phi_55_56_ladder_4 = _2737;
                frontier_phi_55_56_ladder_5 = _2735;
            }
            else
            {
                frontier_phi_55_56_ladder = _2629;
                frontier_phi_55_56_ladder_1 = _2631;
                frontier_phi_55_56_ladder_2 = _2627;
                frontier_phi_55_56_ladder_3 = _2625;
                frontier_phi_55_56_ladder_4 = _2623;
                frontier_phi_55_56_ladder_5 = _2621;
            }
            _2734 = frontier_phi_55_56_ladder_5;
            _2736 = frontier_phi_55_56_ladder_4;
            _2738 = frontier_phi_55_56_ladder_3;
            _2740 = frontier_phi_55_56_ladder_2;
            _2742 = frontier_phi_55_56_ladder;
            _2744 = frontier_phi_55_56_ladder_1;
        }
        float _2749 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2533 = (_2749 * _2740) + _1988;
        _2535 = (_2749 * _2742) + _1990;
        _2537 = (_2749 * _2744) + _1992;
        _2539 = ((_2734 * 0.039999999105930328369140625) * _2749) + _2318;
        _2541 = ((_2736 * 0.039999999105930328369140625) * _2749) + _2320;
        _2543 = ((_2738 * 0.039999999105930328369140625) * _2749) + _2322;
    }
    else
    {
        _2533 = _1988;
        _2535 = _1990;
        _2537 = _1992;
        _2539 = _2318;
        _2541 = _2320;
        _2543 = _2322;
    }
    float _4419 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4430 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4441 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    uint _2563 = _234 + 6u;
    float _2571 = _761 / cbSceneParam._m0[86u].x;
    float _2572 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2586 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2588 = _2586.x;
    float _2589 = _2586.y;
    float _2590 = _2586.z;
    float _2591 = _2586.w;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2646 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2647 = _2646 / _694;
        float _2658 = _2647 * _746;
        float _2659 = _747 * _2647;
        float _2660 = (-0.0) - _2659;
        float _2662 = _2647 * _748;
        float _2664 = (cbSceneParam._m0[77u].w * _2660) / _2646;
        float _2665 = _2664 + cbSceneParam._m0[79u].w;
        float _2666 = cbSceneParam._m0[79u].w - _2659;
        float _2672 = sqrt(((_2658 * _2658) + (_2659 * _2659)) + (_2662 * _2662));
        float _2675 = (1.0 - (cbSceneParam._m0[77u].w / _2646)) * _2672;
        float _2680 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2682 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2835;
        if (abs((_2660 - _2664) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2835 = ((((_2665 > 0.0) ? exp2(_2680 * _2665) : (2.0 - exp2(_2682 * _2665))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2675;
        }
        else
        {
            float _2795 = 1.0 / cbSceneParam._m0[80u].x;
            float _2796 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : max(_2665, _2666));
            float _2797 = isnan(_2666) ? _2665 : (isnan(_2665) ? _2666 : min(_2665, _2666));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            _2835 = ((abs(_2672 / _2660) * cbSceneParam._m0[80u].y) * ((((_2806 - _2807) * 2.0) - ((exp2(_2680 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0)))) - exp2(_2680 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0))))) * _2795)) - ((exp2(_2682 * _2806) - exp2(_2682 * _2807)) * _2795))) + (_2675 * cbSceneParam._m0[80u].z);
        }
        vec4 _2837 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2571, _2572, 1.0), 0.0);
        float _2846 = exp2((_2835 * (-1.44269502162933349609375)) * (1.0 - _2837.w));
        float _2847 = log2(_2846);
        float _2863 = log2(_2591);
        _2684 = (exp2(_2863 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].x)) * _2837.x) / cbSceneParam._m0[78u].x)) + _2588;
        _2686 = (exp2(_2863 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].y)) * _2837.y) / cbSceneParam._m0[78u].y)) + _2589;
        _2688 = (exp2(_2863 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2847 * cbSceneParam._m0[78u].z)) * _2837.z) / cbSceneParam._m0[78u].z)) + _2590;
        _2690 = _2846 * _2591;
    }
    else
    {
        _2684 = _2588;
        _2686 = _2589;
        _2688 = _2590;
        _2690 = _2591;
    }
    float _2702 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2703 = _2702 == 3.0;
    float _2704 = log2(_2690);
    float _2711 = exp2(_2704 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2533 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _824))) + ((_2539 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2712 = exp2(_2704 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2535 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _824))) + ((_2541 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2713 = exp2(_2704 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2537 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _824))) + ((_2543 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1628)) * cbPerFrame._m0[3u].x));
    float _2722 = (_2702 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2722 * (_2703 ? _2711 : (_2711 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.y = _2722 * (_2703 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.z = _2722 * (_2703 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.w = cbInstanceData._m0[_2563].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2563].w;
}


