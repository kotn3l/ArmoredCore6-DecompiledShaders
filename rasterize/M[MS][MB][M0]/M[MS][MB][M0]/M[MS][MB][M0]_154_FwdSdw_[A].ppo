#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1199;
float _3841;
float _3842;
float _3843;
float _3844;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3853 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _374) + _443;
    float _455 = ((((_422.x - _441) * _374) + _441) * 2.0) + (-1.0);
    float _457 = ((((_422.y - _442) * _374) + _442) * 2.0) + (-1.0);
    float _458 = dot(vec2(_455, _457), vec2(_455, _457));
    float _3864 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _463 = sqrt(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _491 = (((_479.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    float _492 = (((_479.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _457;
    float _495 = fma(_463, _226, fma(_492, _233, _491 * _219));
    float _498 = fma(_463, _227, fma(_492, _234, _491 * _220));
    float _501 = fma(_463, _228, fma(_492, _235, _491 * _221));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _541 = ((_536 - _537) * cbMtdParam._m0[24u].z) + _537;
    float _543 = (cbMtdParam._m0[19u].x + dot(vec4(_505 * _495, _505 * _498, _505 * _501, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_541 * cbMtdParam._m0[21u].z);
    float _3875 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _559 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_541 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3886 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _564 = ((_544 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) * _560) + _381;
    float _565 = ((_544 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) * _560) + _382;
    float _566 = ((_544 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) * _560) + _383;
    float _570 = (cbMtdParam._m0[19u].w * (_479.z - _452)) + _452;
    vec4 _583 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _590 = (_583.x * 2.0) + (-1.0);
    float _591 = (_583.y * 2.0) + (-1.0);
    float _592 = dot(vec2(_590, _591), vec2(_590, _591));
    float _3897 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _601 = (((_583.z - _570) * _544) * _560) + _570;
    float _616 = (((cbMtdParam._m0[21u].x * _491) + ((_590 - _491) * _544)) * _560) + _491;
    float _617 = (((cbMtdParam._m0[21u].x * _492) + ((_591 - _492) * _544)) * _560) + _492;
    float _618 = (((sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) - _463) * _544) * _560) + _463;
    float _623 = cbMtdParam._m0[22u].x + _479.w;
    float _626 = fma(_618, _226, fma(_617, _233, _616 * _219));
    float _629 = fma(_618, _227, fma(_617, _234, _616 * _220));
    float _632 = fma(_618, _228, fma(_617, _235, _616 * _221));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3908 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _640 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3930 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3941 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3952 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _658 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _710 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _700);
    float _711 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _700);
    float _712 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _700);
    float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
    float _717 = _710 * _716;
    float _718 = _711 * _716;
    float _719 = _712 * _716;
    vec4 _724 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _726 = _724.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _880 = sqrt(((_710 * _710) + (_711 * _711)) + (_712 * _712));
        float _886 = (cbMatDynParam._m0[5u].x * _880) + cbMatDynParam._m0[5u].y;
        float _3963 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _891 = (cbMatDynParam._m0[5u].z * _880) + cbMatDynParam._m0[5u].w;
        float _3974 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) - _887)) + _887) < ((_726 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _759 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _762 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _775 = _238 + 9u;
    uint _776 = _775 + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3985 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _4007 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _800 = ((isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * TEXCOORD_5.w) * _796.x;
    float _801 = dot(vec3(_637, _638, _639), vec3(_717, _718, _719));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _637) - _717;
    float _809 = (_804 * _638) - _718;
    float _810 = (_804 * _639) - _719;
    float _814 = abs(dot(vec3(_717, _718, _719), vec3(_637, _638, _639)));
    float _4018 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_640);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _927 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _931 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _956 = _861 + _637;
        float _957 = _865 + _638;
        float _958 = _869 + _639;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_637, _638, _639), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _4066 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_637, _638, _639), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4099 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_637, _638, _639), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4132 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1245 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1249 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1272 = _861 + _637;
        float _1273 = _865 + _638;
        float _1274 = _869 + _639;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_637, _638, _639), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4195 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_637, _638, _639), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4228 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_637, _638, _639), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4261 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = _1199;
        _1519 = _1199;
        _1520 = _1199;
        _1521 = _1199;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1213)) + _1213;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _808 * 0.5;
    float _1579 = _809 * 0.5;
    float _1580 = _810 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1727;
    float _1729;
    float _1731;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1694 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1698 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1702 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1705 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1708 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1711 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1739;
        if (_1705 > 0.0)
        {
            _1739 = abs((1.0 - _1694) / _1705);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1694 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1739 = frontier_phi_17_15_ladder;
        }
        float _1908;
        if (_1708 > 0.0)
        {
            _1908 = abs((1.0 - _1698) / _1708);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1698 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1908 = frontier_phi_26_22_ladder;
        }
        float _2203;
        if (_1711 > 0.0)
        {
            _2203 = abs((1.0 - _1702) / _1711);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1702 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2203 = frontier_phi_38_33_ladder;
        }
        float _2205 = isnan(_1908) ? _1739 : (isnan(_1739) ? _1908 : min(_1739, _1908));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1705) + _1694;
        float _2211 = (_2206 * _1708) + _1698;
        float _2212 = (_2206 * _1711) + _1702;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_16_38_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1727 = frontier_phi_16_38_ladder_2;
        _1729 = frontier_phi_16_38_ladder_1;
        _1731 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1715 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1647);
        _1727 = _1715.x * cbModelParam._m0[1u].y;
        _1729 = _1715.y * cbModelParam._m0[1u].y;
        _1731 = _1715.z * cbModelParam._m0[1u].y;
    }
    float _1735 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1736 = isnan(_1735) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1735 : min(cbModelParam._m0[25u].w, _1735));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1803 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1806 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1913;
        if (_1800 > 0.0)
        {
            _1913 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1913 = frontier_phi_28_24_ladder;
        }
        float _2230;
        if (_1803 > 0.0)
        {
            _2230 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2230 = frontier_phi_40_35_ladder;
        }
        float _2557;
        if (_1806 > 0.0)
        {
            _2557 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2557 = frontier_phi_50_47_ladder;
        }
        float _2559 = isnan(_2230) ? _1913 : (isnan(_1913) ? _2230 : min(_1913, _2230));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1800) + _1789;
        float _2565 = (_2560 * _1803) + _1793;
        float _2566 = (_2560 * _1806) + _1797;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1736);
            frontier_phi_25_50_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_25_50_ladder_2;
        _1827 = frontier_phi_25_50_ladder_1;
        _1829 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1736);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1841 = ((((1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _816)) * _800;
    float _1842 = _1841 * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1843 = _1841 * ((cbModelParam._m0[1u].w * (_1827 - _1729)) + _1729);
    float _1844 = _1841 * ((cbModelParam._m0[1u].w * (_1829 - _1731)) + _1731);
    float _1847 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1842 * cbSceneParam._m0[91u].x));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1900 = _1887 / _1899;
    float _1901 = _1891 / _1899;
    float _1902 = _1895 / _1899;
    float _2049;
    float _2050;
    float _2051;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1929 = ((uint(_1902 > cbSceneParam._m0[59u].y) + uint(_1902 > cbSceneParam._m0[59u].x)) + uint(_1902 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1930 = _1929 + 43u;
        uint _1938 = _1929 + 44u;
        uint _1946 = _1929 + 45u;
        uint _1954 = _1929 + 46u;
        float _1965 = fma(_1899, cbSceneParam._m0[_1930].w, fma(_1895, cbSceneParam._m0[_1930].z, fma(_1891, cbSceneParam._m0[_1930].y, _1887 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1899, cbSceneParam._m0[_1938].w, fma(_1895, cbSceneParam._m0[_1938].z, fma(_1891, cbSceneParam._m0[_1938].y, _1887 * cbSceneParam._m0[_1938].x)));
        float _1977 = fma(_1899, cbSceneParam._m0[_1954].w, fma(_1895, cbSceneParam._m0[_1954].z, fma(_1891, cbSceneParam._m0[_1954].y, _1887 * cbSceneParam._m0[_1954].x)));
        float _1982 = cbSceneParam._m0[33u].z * _1977;
        float _1984 = cbSceneParam._m0[33u].w * _1977;
        float _1987 = fma(_1899, cbSceneParam._m0[_1946].w, fma(_1895, cbSceneParam._m0[_1946].z, fma(_1891, cbSceneParam._m0[_1946].y, _1887 * cbSceneParam._m0[_1946].x))) / _1977;
        float _2035 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
        float _4387 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2042 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 + _1965) / _1977, (_1984 + _1969) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1965) / _1977, (_1969 - _1982) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1982) / _1977, (_1969 - _1984) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1984) / _1977, (_1982 + _1969) / _1977), _1987), 0.0)).x), vec4(0.25)));
        _2049 = 1.0 - (_2042 * cbSceneParam._m0[34u].x);
        _2050 = 1.0 - (_2042 * cbSceneParam._m0[34u].y);
        _2051 = 1.0 - (_2042 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2049 = 1.0;
        _2050 = 1.0;
        _2051 = 1.0;
    }
    float _2115;
    float _2117;
    float _2119;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2103 = fma(_1899, cbSceneParam._m0[63u].w, fma(_1895, cbSceneParam._m0[63u].z, fma(_1891, cbSceneParam._m0[63u].y, _1887 * cbSceneParam._m0[63u].x)));
        float _2104 = fma(_1899, cbSceneParam._m0[60u].w, fma(_1895, cbSceneParam._m0[60u].z, fma(_1891, cbSceneParam._m0[60u].y, _1887 * cbSceneParam._m0[60u].x))) / _2103;
        float _2105 = fma(_1899, cbSceneParam._m0[61u].w, fma(_1895, cbSceneParam._m0[61u].z, fma(_1891, cbSceneParam._m0[61u].y, _1887 * cbSceneParam._m0[61u].x))) / _2103;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2104 >= cbSceneParam._m0[64u].x) && (_2105 >= cbSceneParam._m0[64u].y)) && (_2104 <= cbSceneParam._m0[64u].z)) && (_2105 <= cbSceneParam._m0[64u].w))
        {
            float _2243 = fma(_1899, cbSceneParam._m0[62u].w, fma(_1895, cbSceneParam._m0[62u].z, fma(_1891, cbSceneParam._m0[62u].y, _1887 * cbSceneParam._m0[62u].x))) / _2103;
            float _2247 = isnan(cbSceneParam._m0[41u].w) ? _2243 : (isnan(_2243) ? cbSceneParam._m0[41u].w : max(_2243, cbSceneParam._m0[41u].w));
            float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
            float _4403 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
            float _2297 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2104, cbSceneParam._m0[33u].w + _2105), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2104, _2105 - cbSceneParam._m0[33u].z), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].z, _2105 - cbSceneParam._m0[33u].w), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2105), _2247), 0.0)).x), vec4(0.25)));
            float _2301 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
            float _2302 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
            float _2303 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2303) ? _2051 : (isnan(_2051) ? _2303 : min(_2051, _2303));
            frontier_phi_37_36_ladder_1 = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_37_36_ladder_2 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
        }
        else
        {
            frontier_phi_37_36_ladder = _2051;
            frontier_phi_37_36_ladder_1 = _2050;
            frontier_phi_37_36_ladder_2 = _2049;
        }
        _2115 = frontier_phi_37_36_ladder_2;
        _2117 = frontier_phi_37_36_ladder_1;
        _2119 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2115 = _2049;
        _2117 = _2050;
        _2119 = _2051;
    }
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2134 = _800 + (-1.0);
    float _2139 = (cbLight._m0[_2127].x * _2134) + 1.0;
    float _2140 = (cbLight._m0[_2127].y * _2134) + 1.0;
    float _2141 = (cbLight._m0[_2127].z * _2134) + 1.0;
    float _2142 = (cbLight._m0[_2127].w * _2134) + 1.0;
    uint _2143 = _2126 + 5u;
    float _2149 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2153 = _2126 + 4u;
    float _2162 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2166 = _2126 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_637, _638, _639));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_637, _638, _639));
    float _4439 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4450 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2143].x * _2149) * _2187) + (((cbLight._m0[_2153].x * _2115) * _2162) * _2185);
    float _2195 = ((_2149 * cbLight._m0[_2143].y) * _2187) + (((cbLight._m0[_2153].y * _2117) * _2162) * _2185);
    float _2196 = ((_2149 * cbLight._m0[_2143].z) * _2187) + (((cbLight._m0[_2153].z * _2119) * _2162) * _2185);
    uvec4 _2200 = floatBitsToUint(cbLight._m0[_2126 + 12u]);
    bool _2202 = _2200.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2202)
    {
        _2304 = _2194;
        _2306 = _2195;
        _2308 = _2196;
    }
    else
    {
        uint _2312 = _2126 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2126 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4461 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2331 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2194;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2195;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2196;
    }
    bool _2311 = _2200.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2311)
    {
        _2366 = _2304;
        _2368 = _2306;
        _2370 = _2308;
    }
    else
    {
        uint _2528 = _2126 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2126 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4477 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _2547 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2366 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2304;
        _2368 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2306;
        _2370 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2308;
    }
    uint _2373 = _2126 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _640) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2126].x + _717;
    float _2389 = cbLight._m0[_2126].y + _718;
    float _2390 = cbLight._m0[_2126].z + _719;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2126].xyz));
    float _4493 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
    float _4504 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2402 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _2403 = dot(vec3(_637, _638, _639), vec3(_2395, _2396, _2397));
    float _4515 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2395, _2396, _2397));
    float _4526 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2402 * ((_2401 * _2427) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2427) + _2387) * _2401))) * _2401;
    float _4537 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2454 = _2126 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _640) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2166].x + _717;
    float _2468 = cbLight._m0[_2166].y + _718;
    float _2469 = cbLight._m0[_2166].z + _719;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2166].xyz));
    float _4548 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _2481 = dot(vec3(_637, _638, _639), vec3(_2474, _2475, _2476));
    float _4559 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2474, _2475, _2476));
    float _4570 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2466;
    float _2513 = (0.5 / (((_2402 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2503) + _2466) * _2480))) * _2480;
    float _4581 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2525 = (((_2502 * cbLight._m0[_2454].x) * _2515) * _2149) + ((((cbLight._m0[_2373].x * _2115) * _2426) * _2440) * _2162);
    float _2526 = (((_2502 * cbLight._m0[_2454].y) * _2515) * _2149) + ((((cbLight._m0[_2373].y * _2117) * _2426) * _2440) * _2162);
    float _2527 = (((_2502 * cbLight._m0[_2454].z) * _2515) * _2149) + ((((cbLight._m0[_2373].z * _2119) * _2426) * _2440) * _2162);
    float _2583;
    float _2585;
    float _2587;
    if (_2202)
    {
        _2583 = _2525;
        _2585 = _2526;
        _2587 = _2527;
    }
    else
    {
        uint _2589 = _2126 + 2u;
        uint _2593 = _2126 + 10u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _640) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _717;
        float _2610 = cbLight._m0[_2589].y + _718;
        float _2611 = cbLight._m0[_2589].z + _719;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2589].xyz));
        float _4592 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _2623 = dot(vec3(_637, _638, _639), vec3(_2616, _2617, _2618));
        float _4603 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4614 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2644 = (exp2(log2(1.0 - (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2645 = 1.0 - _2608;
        float _2655 = (0.5 / (((_2402 * ((_2622 * _2645) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2645) + _2608) * _2622))) * _2622;
        float _4625 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2583 = (((_2644 * cbLight._m0[_2593].x) * _2657) * _2658) + _2525;
        _2585 = (((_2644 * cbLight._m0[_2593].y) * _2657) * _2658) + _2526;
        _2587 = (((_2644 * cbLight._m0[_2593].z) * _2657) * _2658) + _2527;
    }
    float _2689;
    float _2691;
    float _2693;
    if (_2311)
    {
        _2689 = _2583;
        _2691 = _2585;
        _2693 = _2587;
    }
    else
    {
        uint _2700 = _2126 + 3u;
        uint _2704 = _2126 + 11u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _640) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _717;
        float _2721 = cbLight._m0[_2700].y + _718;
        float _2722 = cbLight._m0[_2700].z + _719;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2700].xyz));
        float _4641 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2734 = dot(vec3(_637, _638, _639), vec3(_2727, _2728, _2729));
        float _4652 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4663 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2755 = (exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2756 = 1.0 - _2719;
        float _2766 = (0.5 / (((_2402 * ((_2733 * _2756) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2756) + _2719) * _2733))) * _2733;
        float _4674 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2689 = (((_2755 * cbLight._m0[_2704].x) * _2768) * _2769) + _2583;
        _2691 = (((_2755 * cbLight._m0[_2704].y) * _2768) * _2769) + _2585;
        _2693 = (((_2755 * cbLight._m0[_2704].z) * _2768) * _2769) + _2587;
    }
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_2124.y == 0u)
    {
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.x;
        uint _2802 = uint((float(_2790.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2791))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2791)));
        float _2812 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2813 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        uint _2816 = uint(isnan(14.0) ? _2813 : (isnan(_2813) ? 14.0 : min(_2813, 14.0)));
        uvec4 _2821 = texelFetch(g_lightClusterGridBuffer, int(((_2816 << 2u) + (_2802 << 6u)) >> 2u));
        uint _2822 = _2821.x;
        uint _2823 = _2790.z;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((((1u << ((_2823 >> 4u) & 15u)) + 4294967295u) & _2822) == 0u) || ((_2823 & 240u) == 0u))
        {
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
        }
        else
        {
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            uint _3061 = 0u;
            uint _3070;
            bool _3071;
            for (;;)
            {
                _3070 = texelFetch(g_lightClassification, int((((_2816 << 5u) + (_2802 << 9u)) + (_3061 << 2u)) >> 2u)).x;
                _3071 = _3070 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3071)
                {
                    frontier_phi_71_pred = _3060;
                    frontier_phi_71_pred_1 = _3059;
                    frontier_phi_71_pred_2 = _3058;
                    frontier_phi_71_pred_3 = _3057;
                    frontier_phi_71_pred_4 = _3056;
                    frontier_phi_71_pred_5 = _3055;
                }
                else
                {
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    uint _3206;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3070;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    for (;;)
                    {
                        uint _3210 = uint(findLSB(_3206)) + (_3061 << 5u);
                        uint _3207 = (_3206 + 4294967295u) & _3206;
                        uint _3212 = _3210 * 48u;
                        vec4 _3226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3232 = (_3210 * 48u) + 4u;
                        vec4 _3245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3232)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3232 + 3u)).x));
                        uint _3251 = (_3210 * 48u) + 8u;
                        vec3 _3262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3251)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3251 + 2u)).x));
                        float _3266 = _3226.x - _1900;
                        float _3267 = _3226.y - _1901;
                        float _3268 = _3226.z - _1902;
                        float _3269 = dot(vec3(_3266, _3267, _3268), vec3(_3266, _3267, _3268));
                        float _3272 = inversesqrt(_3269);
                        float _3273 = _3272 * _3266;
                        float _3274 = _3272 * _3267;
                        float _3275 = _3272 * _3268;
                        float _3276 = dot(vec3(_756, _759, _762), vec3(_3273, _3274, _3275));
                        float _3281 = 1.0 - (_3269 * _3226.w);
                        float _4700 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3282 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3283 = sqrt(_3269) * _3245.w;
                        float _3286 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                        float _3287 = _3286 * _3286;
                        float _3290 = ((1.0 - _3287) * _3276) + _3287;
                        float _3293 = _3283 * _3283;
                        float _3297 = ((isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))) * _3282) / ((_3293 * 0.699999988079071044921875) + 1.0);
                        float _3301 = (-0.0) - _1900;
                        float _3302 = (-0.0) - _1901;
                        float _3303 = (-0.0) - _1902;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3308 = _3307 * _3301;
                        float _3309 = _3307 * _3302;
                        float _3310 = _3307 * _3303;
                        float _3317 = exp2(log2(1.0 / ((_3293 * 3.5) + 5.0)) * 0.25);
                        float _3318 = 1.0 - _816;
                        float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                        float _3326 = _3325 * _3325;
                        float _3327 = _3326 * _3326;
                        float _3328 = _3308 + _3273;
                        float _3329 = _3309 + _3274;
                        float _3330 = _3310 + _3275;
                        float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                        float _3338 = dot(vec3(_756, _759, _762), vec3(_3308, _3309, _3310));
                        float _4716 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3341 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                        float _3342 = dot(vec3(_756, _759, _762), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                        float _4727 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                        float _3350 = _3286 * _3326;
                        float _3351 = _3350 * _3350;
                        float _3354 = ((1.0 - _3351) * _3276) + _3351;
                        float _4738 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3356 = 1.0 - _3326;
                        float _3366 = (0.5 / (((_3355 * ((_3341 * _3356) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3355 * _3356) + _3326) * _3341))) * _3355;
                        float _4749 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3377 = (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3349 * _3349) * ((_3293 * 2.1991131305694580078125) + 3.141590118408203125))) * _3282;
                        _3130 = (_3297 * _3245.x) + _3203;
                        _3131 = (_3297 * _3245.y) + _3204;
                        _3132 = (_3297 * _3245.z) + _3205;
                        _3127 = (_3377 * _3262.x) + _3200;
                        _3128 = (_3377 * _3262.y) + _3201;
                        _3129 = (_3377 * _3262.z) + _3202;
                        if (_3207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3207;
                        }
                    }
                    frontier_phi_71_pred = _3132;
                    frontier_phi_71_pred_1 = _3131;
                    frontier_phi_71_pred_2 = _3130;
                    frontier_phi_71_pred_3 = _3129;
                    frontier_phi_71_pred_4 = _3128;
                    frontier_phi_71_pred_5 = _3127;
                }
                _2913 = frontier_phi_71_pred;
                _2911 = frontier_phi_71_pred_1;
                _2909 = frontier_phi_71_pred_2;
                _2907 = frontier_phi_71_pred_3;
                _2905 = frontier_phi_71_pred_4;
                _2903 = frontier_phi_71_pred_5;
                uint _3062 = _3061 + 1u;
                if (_3062 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3055 = _2903;
                    _3056 = _2905;
                    _3057 = _2907;
                    _3058 = _2909;
                    _3059 = _2911;
                    _3060 = _2913;
                    _3061 = _3062;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
        }
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.z;
        uint _2919 = (_2917 >> 8u) & 15u;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        if (((4294967295u << _2919) & _2822) == 0u)
        {
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
        }
        else
        {
            float _3048 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float _3049 = _3048 * _1900;
            float _3050 = _3048 * _1901;
            float _3051 = _3048 * _1902;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2919 < ((_2917 >> 12u) & 15u))
            {
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3183 = _2902;
                float _3184 = _2904;
                float _3185 = _2906;
                float _3186 = _2908;
                float _3187 = _2910;
                float _3188 = _2912;
                uint _3189 = _2919;
                uint _3198;
                bool _3199;
                for (;;)
                {
                    _3198 = texelFetch(g_lightClassification, int((((_2816 << 5u) + (_2802 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                    _3199 = _3198 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3199)
                    {
                        frontier_phi_82_pred = _3188;
                        frontier_phi_82_pred_1 = _3187;
                        frontier_phi_82_pred_2 = _3186;
                        frontier_phi_82_pred_3 = _3185;
                        frontier_phi_82_pred_4 = _3184;
                        frontier_phi_82_pred_5 = _3183;
                    }
                    else
                    {
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3404 = _3183;
                        float _3405 = _3184;
                        float _3406 = _3185;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        uint _3410 = _3198;
                        uint _3411;
                        vec4 _3436;
                        float _3437;
                        vec4 _3452;
                        vec3 _3464;
                        vec4 _3479;
                        vec4 _3495;
                        float _3541;
                        bool _3542;
                        for (;;)
                        {
                            uint _3421 = ((_3189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3410));
                            _3411 = (_3410 + 4294967295u) & _3410;
                            uint _3423 = _3421 * 40u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            _3437 = _3436.w;
                            uint _3439 = (_3421 * 40u) + 4u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            uint _3454 = (_3421 * 40u) + 8u;
                            _3464 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x));
                            uint _3466 = (_3421 * 40u) + 16u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            uint _3482 = (_3421 * 40u) + 20u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3421 * 40u) + 24u;
                            vec4 _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3516 = (_3421 * 40u) + 28u;
                            vec4 _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3541 = fma(_1902, _3529.z, fma(_1901, _3529.y, _3529.x * _1900)) + _3529.w;
                            _3542 = !((fma(_1902, _3510.z, fma(_1901, _3510.y, _3510.x * _1900)) + _3510.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3542)
                            {
                                float _3569 = _3436.x - _1900;
                                float _3570 = _3436.y - _1901;
                                float _3571 = _3436.z - _1902;
                                float _3572 = dot(vec3(_3569, _3570, _3571), vec3(_3569, _3570, _3571));
                                float _3575 = inversesqrt(_3572);
                                float _3576 = _3575 * _3569;
                                float _3577 = _3575 * _3570;
                                float _3578 = _3575 * _3571;
                                float _3582 = 1.0 - (_3572 / (_3437 * _3437));
                                float _4760 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3583 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3587 = sqrt(_3572) * _3452.w;
                                float _3589 = 1.39999997615814208984375 / (_3587 + 1.39999997615814208984375);
                                float _3590 = _3589 * _3589;
                                float _3593 = ((1.0 - _3590) * dot(vec3(_3576, _3577, _3578), vec3(_756, _759, _762))) + _3590;
                                float _3596 = _3587 * _3587;
                                float _3600 = (fma(_1902, _3479.z, fma(_1901, _3479.y, _3479.x * _1900)) + _3479.w) / _3541;
                                float _3601 = (fma(_1902, _3495.z, fma(_1901, _3495.y, _3495.x * _1900)) + _3495.w) / _3541;
                                float _3605 = 1.0 - dot(vec2(_3600, _3601), vec2(_3600, _3601));
                                float _4776 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3607 = _3606 * (((isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0))) * _3583) / ((_3596 * 0.699999988079071044921875) + 1.0));
                                float _3619 = exp2(log2(1.0 / ((_3596 * 3.5) + 5.0)) * 0.25);
                                float _3620 = 1.0 - _816;
                                float _3627 = sqrt(1.0 - ((1.0 - (_3620 * _3620)) * (1.0 - (_3619 * _3619))));
                                float _3628 = _3627 * _3627;
                                float _3629 = _3628 * _3628;
                                float _3630 = _3576 - _3049;
                                float _3631 = _3577 - _3050;
                                float _3632 = _3578 - _3051;
                                float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                                float _3640 = dot(vec3(_756, _759, _762), vec3((-0.0) - _3049, (-0.0) - _3050, (-0.0) - _3051));
                                float _4787 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                                float _3643 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3644 = dot(vec3(_756, _759, _762), vec3(_3636 * _3630, _3636 * _3631, _3636 * _3632));
                                float _4798 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3647 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3651 = ((_3647 * _3647) * (_3629 + (-1.0))) + 1.0;
                                float _3652 = _3589 * _3628;
                                float _3653 = _3652 * _3652;
                                float _3659 = ((1.0 - _3653) * dot(vec3(_756, _759, _762), vec3(_3576, _3577, _3578))) + _3653;
                                float _4809 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3661 = 1.0 - _3628;
                                float _3671 = (0.5 / (((_3660 * ((_3643 * _3661) + _3628)) + 9.9999999392252902907785028219223e-09) + (((_3660 * _3661) + _3628) * _3643))) * _3660;
                                float _4820 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3681 = (_3606 * _3583) * (((_3629 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3651 * _3651) * ((_3596 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3607 * _3452.z;
                                frontier_phi_88_pred_1 = _3607 * _3452.y;
                                frontier_phi_88_pred_2 = _3607 * _3452.x;
                                frontier_phi_88_pred_3 = _3681 * _3464.z;
                                frontier_phi_88_pred_4 = _3681 * _3464.y;
                                frontier_phi_88_pred_5 = _3681 * _3464.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3690 = frontier_phi_88_pred;
                            _3689 = frontier_phi_88_pred_1;
                            _3688 = frontier_phi_88_pred_2;
                            _3687 = frontier_phi_88_pred_3;
                            _3686 = frontier_phi_88_pred_4;
                            _3685 = frontier_phi_88_pred_5;
                            _3394 = _3688 + _3407;
                            _3395 = _3689 + _3408;
                            _3396 = _3690 + _3409;
                            _3391 = _3685 + _3404;
                            _3392 = _3686 + _3405;
                            _3393 = _3687 + _3406;
                            if (_3411 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3411;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3396;
                        frontier_phi_82_pred_1 = _3395;
                        frontier_phi_82_pred_2 = _3394;
                        frontier_phi_82_pred_3 = _3393;
                        frontier_phi_82_pred_4 = _3392;
                        frontier_phi_82_pred_5 = _3391;
                    }
                    _3034 = frontier_phi_82_pred;
                    _3032 = frontier_phi_82_pred_1;
                    _3030 = frontier_phi_82_pred_2;
                    _3028 = frontier_phi_82_pred_3;
                    _3026 = frontier_phi_82_pred_4;
                    _3024 = frontier_phi_82_pred_5;
                    uint _3190 = _3189 + 1u;
                    if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3183 = _3024;
                        _3184 = _3026;
                        _3185 = _3028;
                        _3186 = _3030;
                        _3187 = _3032;
                        _3188 = _3034;
                        _3189 = _3190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3030;
                frontier_phi_63_64_ladder_1 = _3034;
                frontier_phi_63_64_ladder_2 = _3032;
                frontier_phi_63_64_ladder_3 = _3028;
                frontier_phi_63_64_ladder_4 = _3026;
                frontier_phi_63_64_ladder_5 = _3024;
            }
            else
            {
                frontier_phi_63_64_ladder = _2908;
                frontier_phi_63_64_ladder_1 = _2912;
                frontier_phi_63_64_ladder_2 = _2910;
                frontier_phi_63_64_ladder_3 = _2906;
                frontier_phi_63_64_ladder_4 = _2904;
                frontier_phi_63_64_ladder_5 = _2902;
            }
            _3023 = frontier_phi_63_64_ladder_5;
            _3025 = frontier_phi_63_64_ladder_4;
            _3027 = frontier_phi_63_64_ladder_3;
            _3029 = frontier_phi_63_64_ladder;
            _3031 = frontier_phi_63_64_ladder_2;
            _3033 = frontier_phi_63_64_ladder_1;
        }
        float _3038 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2835 = (_3038 * _3029) + _2366;
        _2837 = (_3038 * _3031) + _2368;
        _2839 = (_3038 * _3033) + _2370;
        _2841 = ((_3023 * 0.039999999105930328369140625) * _3038) + _2689;
        _2843 = ((_3025 * 0.039999999105930328369140625) * _3038) + _2691;
        _2845 = ((_3027 * 0.039999999105930328369140625) * _3038) + _2693;
    }
    else
    {
        _2835 = _2366;
        _2837 = _2368;
        _2839 = _2370;
        _2841 = _2689;
        _2843 = _2691;
        _2845 = _2693;
    }
    float _4836 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4847 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4858 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2862 = ((isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2835 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _800))) + ((_2841 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2863 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2837 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _800))) + ((_2843 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2864 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2839 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _800))) + ((_2845 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    uint _2865 = _238 + 6u;
    float _2873 = _737 / cbSceneParam._m0[86u].x;
    float _2874 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2888 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2873, _2874, (log2((isnan(cbSceneParam._m0[77u].w) ? _658 : (isnan(_658) ? cbSceneParam._m0[77u].w : min(_658, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2890 = _2888.x;
    float _2891 = _2888.y;
    float _2892 = _2888.z;
    float _2893 = _2888.w;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_658 > cbSceneParam._m0[78u].w)
    {
        float _2927 = isnan(_658) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _658 : min(cbSceneParam._m0[80u].w, _658));
        float _2928 = _2927 / _658;
        float _2939 = _2928 * _710;
        float _2940 = _711 * _2928;
        float _2941 = (-0.0) - _2940;
        float _2943 = _2928 * _712;
        float _2945 = (cbSceneParam._m0[77u].w * _2941) / _2927;
        float _2946 = _2945 + cbSceneParam._m0[79u].w;
        float _2947 = cbSceneParam._m0[79u].w - _2940;
        float _2953 = sqrt(((_2939 * _2939) + (_2940 * _2940)) + (_2943 * _2943));
        float _2956 = (1.0 - (cbSceneParam._m0[77u].w / _2927)) * _2953;
        float _2961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3140;
        if (abs((_2941 - _2945) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3140 = ((((_2946 > 0.0) ? exp2(_2961 * _2946) : (2.0 - exp2(_2963 * _2946))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2956;
        }
        else
        {
            float _3084 = 1.0 / cbSceneParam._m0[80u].x;
            float _3085 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : max(_2946, _2947));
            float _3086 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : min(_2946, _2947));
            float _3095 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : min(_3085, 0.0));
            float _3096 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : min(_3086, 0.0));
            _3140 = ((abs(_2953 / _2941) * cbSceneParam._m0[80u].y) * ((((_3095 - _3096) * 2.0) - ((exp2(_2961 * (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0)))) - exp2(_2961 * (isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0))))) * _3084)) - ((exp2(_2963 * _3095) - exp2(_2963 * _3096)) * _3084))) + (_2956 * cbSceneParam._m0[80u].z);
        }
        vec4 _3142 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2873, _2874, 1.0), 0.0);
        float _3151 = exp2((_3140 * (-1.44269502162933349609375)) * (1.0 - _3142.w));
        float _3152 = log2(_3151);
        float _3168 = log2(_2893);
        _2965 = (exp2(_3168 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].x)) * _3142.x) / cbSceneParam._m0[78u].x)) + _2890;
        _2967 = (exp2(_3168 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].y)) * _3142.y) / cbSceneParam._m0[78u].y)) + _2891;
        _2969 = (exp2(_3168 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3152 * cbSceneParam._m0[78u].z)) * _3142.z) / cbSceneParam._m0[78u].z)) + _2892;
        _2971 = _3151 * _2893;
    }
    else
    {
        _2965 = _2890;
        _2967 = _2891;
        _2969 = _2892;
        _2971 = _2893;
    }
    bool _3178;
    vec4 _2981;
    vec4 _3003;
    float _3005;
    float _3009;
    float _3010;
    float _3011;
    float _3012;
    bool _3022;
    for (;;)
    {
        _2981 = cbMatDynParam._m0[0u];
        float _2983 = roundEven(_2981.y);
        bool _2984 = _2983 == 3.0;
        float _2985 = log2(_2971);
        float _2992 = exp2(_2985 * cbSceneParam._m0[78u].x) * _2862;
        float _2993 = exp2(_2985 * cbSceneParam._m0[78u].y) * _2863;
        float _2994 = exp2(_2985 * cbSceneParam._m0[78u].z) * _2864;
        float _3001 = _726 + (-0.5);
        _3003 = cbMtdParam._m0[1u];
        _3005 = _3003.y * _3001;
        float _3008 = (_2983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3009 = _3008 * (_2984 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2965)));
        _3010 = _3008 * (_2984 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2967)));
        _3011 = _3008 * (_2984 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2969)));
        _3012 = _3001 * 0.999000012874603271484375;
        _3022 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3022)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _3012) < 0.5)
            {
                _3178 = true;
                break;
            }
        }
        uint _3119 = _775 + uint(_2981.w);
        if ((cbInstanceData._m0[_3119].w < 1.0) && ((cbInstanceData._m0[_3119].w + _3012) < 0.5))
        {
            _3178 = true;
            break;
        }
        if ((_3005 + 1.0) < _3003.x)
        {
            _3178 = true;
            break;
        }
        _3178 = false;
        break;
    }
    float _3382;
    if (_3178)
    {
        discard_state = true;
        _3382 = 0.0;
    }
    else
    {
        _3382 = cbInstanceData._m0[_2865].w;
    }
    SV_Target.x = _3009;
    SV_Target.y = _3010;
    SV_Target.z = _3011;
    SV_Target.w = _3382;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2865].w;
    discard_exit();
}


