#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1278;
float _3661;
float _3662;
float _3663;
float _3664;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3673 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _453 = _451.x;
    float _454 = _451.y;
    float _455 = _451.z;
    float _464 = ((_434.z - _455) * _386) + _455;
    float _467 = ((((_434.x - _453) * _386) + _453) * 2.0) + (-1.0);
    float _469 = ((((_434.y - _454) * _386) + _454) * 2.0) + (-1.0);
    float _470 = dot(vec2(_467, _469), vec2(_467, _469));
    float _3684 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _525 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _528 = ((isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : min(_525, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _537 = (_528 - ((((((_518 - _519) * cbMtdParam._m0[24u].z) + _519) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _528))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3705 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _545 = (_538 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) + _393;
    float _546 = (_538 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) + _394;
    float _547 = (_538 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) + _395;
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _589 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_561 - _562) * cbMtdParam._m0[24u].w) + _562) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3716 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _598 = ((((cbMtdParam._m0[10u].x - _545) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _590) + _545;
    float _599 = ((((cbMtdParam._m0[10u].y - _546) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _590) + _546;
    float _600 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _547)) * _590) + _547;
    float _604 = (cbMtdParam._m0[19u].w * (_491.z - _464)) + _464;
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _625 = (_618.x * 2.0) + (-1.0);
    float _626 = (_618.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3727 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _635 = (_538 * (_618.z - _604)) + _604;
    float _638 = ((cbMtdParam._m0[23u].y - _635) * _590) + _635;
    vec4 _657 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _663 = (_657.x * 2.0) + (-1.0);
    float _664 = (_657.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3738 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _673 = (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _467;
    float _674 = (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _469;
    float _686 = (((_625 - _673) + (cbMtdParam._m0[21u].x * _673)) * _538) + _673;
    float _687 = (((_626 - _674) + (cbMtdParam._m0[21u].x * _674)) * _538) + _674;
    float _688 = (_538 * (sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) - _475)) + _475;
    float _699 = (((_663 - _686) + (_686 * cbMtdParam._m0[22u].z)) * _590) + _686;
    float _700 = (((_664 - _687) + (_687 * cbMtdParam._m0[22u].z)) * _590) + _687;
    float _701 = ((sqrt(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) - _688) * _590) + _688;
    float _703 = cbMtdParam._m0[22u].x + _491.w;
    float _706 = fma(_701, _238 * NORMAL.x, fma(_700, _245 * TANGENT.x, (_231 * _223) * _699));
    float _709 = fma(_701, _238 * NORMAL.y, fma(_700, _245 * TANGENT.y, (_231 * _224) * _699));
    float _712 = fma(_701, _238 * NORMAL.z, fma(_700, _245 * TANGENT.z, (_231 * _225) * _699));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3749 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _720 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3771 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3782 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3793 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _738 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _789 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _779);
    float _790 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _779);
    float _791 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _779);
    float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
    float _796 = _789 * _795;
    float _797 = _790 * _795;
    float _798 = _791 * _795;
    vec4 _803 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _805 = _803.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _959 = sqrt(((_789 * _789) + (_790 * _790)) + (_791 * _791));
        float _965 = (cbMatDynParam._m0[5u].x * _959) + cbMatDynParam._m0[5u].y;
        float _3804 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _970 = (cbMatDynParam._m0[5u].z * _959) + cbMatDynParam._m0[5u].w;
        float _3815 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) - _966)) + _966) < ((_805 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _816 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _817 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _835 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _838 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _841 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _854 = _251 + 9u;
    uint _855 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_855].z;
    float _3826 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _816, cbSceneParam._m0[86u].y * _817));
    float _879 = ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * TEXCOORD_5.w) * _875.x;
    float _880 = dot(vec3(_717, _718, _719), vec3(_796, _797, _798));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _717) - _796;
    float _888 = (_883 * _718) - _797;
    float _889 = (_883 * _719) - _798;
    float _893 = abs(dot(vec3(_796, _797, _798), vec3(_717, _718, _719)));
    float _3859 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _895 = sqrt(_720);
    float _908 = exp2((_895 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_895 * 3.0));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1277;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1002 = fma(_948, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940));
        float _1006 = fma(_948, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940));
        float _1010 = fma(_948, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940));
        float _1035 = _940 + _717;
        float _1036 = _944 + _718;
        float _1037 = _948 + _719;
        float _1047 = fma(_1037, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035)) - _1002;
        float _1048 = fma(_1037, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035)) - _1006;
        float _1049 = fma(_1037, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035)) - _1010;
        float _1053 = inversesqrt(dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049)));
        float _1066 = ((_1053 * _1047) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1002 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1053 * _1048) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1006 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1068 = ((_1053 * _1049) / cbModelParam._m0[34u].z) + ((((((_1010 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1066, _1067, _1068), 0.0);
        float _1105 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1071.x + (-0.5));
        float _1107 = _1105 * (_1071.y + (-0.5));
        float _1108 = _1105 * (_1071.z + (-0.5));
        float _1115 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1078.x + (-0.5));
        float _1117 = _1115 * (_1078.y + (-0.5));
        float _1118 = _1115 * (_1078.z + (-0.5));
        float _1125 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1085.x + (-0.5));
        float _1127 = _1125 * (_1085.y + (-0.5));
        float _1128 = _1125 * (_1085.z + (-0.5));
        float _1135 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1092.x + (-0.5));
        float _1137 = _1135 * (_1092.y + (-0.5));
        float _1138 = _1135 * (_1092.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1159 = (dot(vec3(_717, _718, _719), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1169 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3907 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1171 + 1.0))) + _1176) * _1139;
        float _1186 = _1107 * 0.5;
        float _1187 = _1117 * 0.5;
        float _1188 = _1127 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_717, _718, _719), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3940 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1213 + 1.0))) + _1218) * _1140;
        float _1228 = _1108 * 0.5;
        float _1229 = _1118 * 0.5;
        float _1230 = _1128 * 0.5;
        float _1231 = dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230));
        float _1236 = (_1231 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1231);
        float _1244 = (dot(vec3(_717, _718, _719), vec3(_1236 * _1228, _1236 * _1229, _1236 * _1230)) + 1.0) * 0.5;
        float _3951 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1253 = sqrt(((_1229 * _1229) + (_1228 * _1228)) + (_1230 * _1230)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3962 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1255 = _1254 * 2.0;
        float _1259 = (1.0 - _1254) / (_1254 + 1.0);
        float _3973 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1269 = ((((1.0 - _1260) * (_1255 + 2.0)) * exp2(log2(isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * (_1255 + 1.0))) + _1260) * _1141;
        _1277 = _1108;
        _1279 = _1107;
        _1280 = _1106;
        _1281 = _1118;
        _1282 = _1117;
        _1283 = _1116;
        _1284 = _1128;
        _1285 = _1127;
        _1286 = _1126;
        _1287 = _1141;
        _1288 = _1140;
        _1289 = _1139;
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
        _1292 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)));
    }
    else
    {
        _1277 = _1278;
        _1279 = _1278;
        _1280 = _1278;
        _1281 = _1278;
        _1282 = _1278;
        _1283 = _1278;
        _1284 = _1278;
        _1285 = _1278;
        _1286 = _1278;
        _1287 = _1278;
        _1288 = _1278;
        _1289 = _1278;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1320 = fma(_948, cbModelParam._m0[30u].z, fma(_944, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _940));
        float _1324 = fma(_948, cbModelParam._m0[31u].z, fma(_944, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _940));
        float _1328 = fma(_948, cbModelParam._m0[32u].z, fma(_944, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _940));
        float _1351 = _940 + _717;
        float _1352 = _944 + _718;
        float _1353 = _948 + _719;
        float _1363 = fma(_1353, cbModelParam._m0[30u].z, fma(_1352, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1351)) - _1320;
        float _1364 = fma(_1353, cbModelParam._m0[31u].z, fma(_1352, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1351)) - _1324;
        float _1365 = fma(_1353, cbModelParam._m0[32u].z, fma(_1352, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1351)) - _1328;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1320 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1324 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[35u].z) + ((((((_1328 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1419 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1386.x + (-0.5));
        float _1421 = _1419 * (_1386.y + (-0.5));
        float _1422 = _1419 * (_1386.z + (-0.5));
        float _1429 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1393.x + (-0.5));
        float _1431 = _1429 * (_1393.y + (-0.5));
        float _1432 = _1429 * (_1393.z + (-0.5));
        float _1439 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1400.x + (-0.5));
        float _1441 = _1439 * (_1400.y + (-0.5));
        float _1442 = _1439 * (_1400.z + (-0.5));
        float _1449 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1407.x + (-0.5));
        float _1451 = _1449 * (_1407.y + (-0.5));
        float _1452 = _1449 * (_1407.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_717, _718, _719), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4036 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1483 + 1.0))) + _1488) * _1453;
        float _1498 = _1421 * 0.5;
        float _1499 = _1431 * 0.5;
        float _1500 = _1441 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_717, _718, _719), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4069 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1525 + 1.0))) + _1530) * _1454;
        float _1540 = _1422 * 0.5;
        float _1541 = _1432 * 0.5;
        float _1542 = _1442 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_717, _718, _719), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4080 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4091 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4102 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1567 + 1.0))) + _1572) * _1455;
        _1589 = _1422;
        _1590 = _1421;
        _1591 = _1420;
        _1592 = _1432;
        _1593 = _1431;
        _1594 = _1430;
        _1595 = _1442;
        _1596 = _1441;
        _1597 = _1440;
        _1598 = _1455;
        _1599 = _1454;
        _1600 = _1453;
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
    }
    else
    {
        _1589 = _1278;
        _1590 = _1278;
        _1591 = _1278;
        _1592 = _1278;
        _1593 = _1278;
        _1594 = _1278;
        _1595 = _1278;
        _1596 = _1278;
        _1597 = _1278;
        _1598 = _1278;
        _1599 = _1278;
        _1600 = _1278;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1291)) + _1291;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1292)) + _1292;
    float _1636 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1614, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1614, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1614, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1613));
    float _1657 = _887 * 0.5;
    float _1658 = _888 * 0.5;
    float _1659 = _889 * 0.5;
    float _1660 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1663 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1666 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1700;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1673 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1277, _1281, _1284, _1287));
        float _1677 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1681 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1280, _1283, _1286, _1289));
        float _1688 = dot(vec4(cbModelParam._m0[39u]), vec4(_1657, _1658, _1659, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1711;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1702 = dot(vec4(cbModelParam._m0[40u]), vec4(_1657, _1658, _1659, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1715 = (_1711 * cbModelParam._m0[1u].x) + (_1700 * (1.0 - cbModelParam._m0[1u].x));
    float _1725 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1725 : min(cbModelParam._m0[25u].z, _1725));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_948, cbModelParam._m0[13u].z, fma(_944, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_948, cbModelParam._m0[14u].z, fma(_944, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_948, cbModelParam._m0[15u].z, fma(_944, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1787 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1790 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1818 = frontier_phi_17_15_ladder;
        }
        float _2039;
        if (_1787 > 0.0)
        {
            _2039 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2039 = frontier_phi_26_22_ladder;
        }
        float _2285;
        if (_1790 > 0.0)
        {
            _2285 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2285 = frontier_phi_38_33_ladder;
        }
        float _2287 = isnan(_2039) ? _1818 : (isnan(_1818) ? _2039 : min(_1818, _2039));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1784) + _1773;
        float _2293 = (_2288 * _1787) + _1777;
        float _2294 = (_2288 * _1790) + _1781;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2418 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1726);
            frontier_phi_16_38_ladder = _2418.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2418.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2418.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_16_38_ladder_2;
        _1808 = frontier_phi_16_38_ladder_1;
        _1810 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1726);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_948, cbModelParam._m0[21u].z, fma(_944, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_948, cbModelParam._m0[22u].z, fma(_944, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_948, cbModelParam._m0[23u].z, fma(_944, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1882 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1885 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2044;
        if (_1879 > 0.0)
        {
            _2044 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2044 = frontier_phi_28_24_ladder;
        }
        float _2312;
        if (_1882 > 0.0)
        {
            _2312 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2312 = frontier_phi_40_35_ladder;
        }
        float _2517;
        if (_1885 > 0.0)
        {
            _2517 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2517 = frontier_phi_49_46_ladder;
        }
        float _2519 = isnan(_2312) ? _2044 : (isnan(_2044) ? _2312 : min(_2044, _2312));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1879) + _1868;
        float _2525 = (_2520 * _1882) + _1872;
        float _2526 = (_2520 * _1885) + _1876;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_25_49_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_25_49_ladder_2;
        _1906 = frontier_phi_25_49_ladder_1;
        _1908 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1815);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1920 = ((((1.0 - _908) * ((_895 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_908 * _895)) * _879;
    float _1921 = _1920 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1922 = _1920 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1923 = _1920 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    vec4 _1940 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_816, _817));
    float _1942 = _1940.w;
    float _1954 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1942);
    float _1955 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1942);
    float _1956 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1942);
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _879 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1998 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2002 = _1962 | 1u;
    float _2013 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_717, _718, _719));
    float _2016 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_717, _718, _719));
    float _4238 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _4249 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2021 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.3183098733425140380859375;
    float _2023 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.3183098733425140380859375;
    float _2030 = ((cbLight._m0[_1979].x * _1985) * _2023) + (((cbLight._m0[_1989].x * _1954) * _1998) * _2021);
    float _2031 = ((_1985 * cbLight._m0[_1979].y) * _2023) + (((cbLight._m0[_1989].y * _1955) * _1998) * _2021);
    float _2032 = ((_1985 * cbLight._m0[_1979].z) * _2023) + (((cbLight._m0[_1989].z * _1956) * _1998) * _2021);
    uvec4 _2036 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2038 = _2036.x == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2038)
    {
        _2049 = _2030;
        _2051 = _2031;
        _2053 = _2032;
    }
    else
    {
        uint _2057 = _1962 + 6u;
        float _2073 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _4260 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2076 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2049 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _2030;
        _2051 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _2031;
        _2053 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _2032;
    }
    bool _2056 = _2036.y == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_2056)
    {
        _2094 = _2049;
        _2096 = _2051;
        _2098 = _2053;
    }
    else
    {
        uint _2256 = _1962 + 7u;
        float _2272 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4276 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2275 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2094 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2049;
        _2096 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2051;
        _2098 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2053;
    }
    uint _2101 = _1962 + 8u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _720) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1962].x + _796;
    float _2117 = cbLight._m0[_1962].y + _797;
    float _2118 = cbLight._m0[_1962].z + _798;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_1962].xyz));
    float _4292 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _4303 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2130 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2131 = dot(vec3(_717, _718, _719), vec3(_2123, _2124, _2125));
    float _4314 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2135 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2123, _2124, _2125));
    float _4325 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = _2115 * _2115;
    float _2143 = ((_2134 * _2134) * (_2139 + (-1.0))) + 1.0;
    float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2155 = 1.0 - _2115;
    float _2166 = (0.5 / (((_2130 * ((_2129 * _2155) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2155) + _2115) * _2129))) * _2129;
    float _4336 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2139 / ((_2143 * _2143) * 3.141590118408203125));
    uint _2182 = _1962 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _720) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2002].x + _796;
    float _2196 = cbLight._m0[_2002].y + _797;
    float _2197 = cbLight._m0[_2002].z + _798;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2002].xyz));
    float _4347 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2209 = dot(vec3(_717, _718, _719), vec3(_2202, _2203, _2204));
    float _4358 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2202, _2203, _2204));
    float _4369 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2230 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2231 = 1.0 - _2194;
    float _2241 = (0.5 / (((_2130 * ((_2208 * _2231) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2231) + _2194) * _2208))) * _2208;
    float _4380 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2253 = (((_2230 * cbLight._m0[_2182].x) * _2243) * _1985) + ((((cbLight._m0[_2101].x * _1954) * _2154) * _2168) * _1998);
    float _2254 = (((_2230 * cbLight._m0[_2182].y) * _2243) * _1985) + ((((cbLight._m0[_2101].y * _1955) * _2154) * _2168) * _1998);
    float _2255 = (((_2230 * cbLight._m0[_2182].z) * _2243) * _1985) + ((((cbLight._m0[_2101].z * _1956) * _2154) * _2168) * _1998);
    float _2317;
    float _2319;
    float _2321;
    if (_2038)
    {
        _2317 = _2253;
        _2319 = _2254;
        _2321 = _2255;
    }
    else
    {
        uint _2323 = _1962 + 2u;
        uint _2327 = _1962 + 10u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _720) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _796;
        float _2344 = cbLight._m0[_2323].y + _797;
        float _2345 = cbLight._m0[_2323].z + _798;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2323].xyz));
        float _4391 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2357 = dot(vec3(_717, _718, _719), vec3(_2350, _2351, _2352));
        float _4402 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4413 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2130 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2379) + _2342) * _2356))) * _2356;
        float _4424 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2317 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2253;
        _2319 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2254;
        _2321 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2255;
    }
    float _2427;
    float _2429;
    float _2431;
    if (_2056)
    {
        _2427 = _2317;
        _2429 = _2319;
        _2431 = _2321;
    }
    else
    {
        uint _2438 = _1962 + 3u;
        uint _2442 = _1962 + 11u;
        float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _720) * 0.949999988079071044921875);
        float _2457 = _2456 * _2456;
        float _2458 = cbLight._m0[_2438].x + _796;
        float _2459 = cbLight._m0[_2438].y + _797;
        float _2460 = cbLight._m0[_2438].z + _798;
        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
        float _2465 = _2464 * _2458;
        float _2466 = _2464 * _2459;
        float _2467 = _2464 * _2460;
        float _2468 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2438].xyz));
        float _4440 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2472 = dot(vec3(_717, _718, _719), vec3(_2465, _2466, _2467));
        float _4451 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2476 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2465, _2466, _2467));
        float _4462 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2480 = _2457 * _2457;
        float _2484 = ((_2475 * _2475) * (_2480 + (-1.0))) + 1.0;
        float _2493 = (exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2494 = 1.0 - _2457;
        float _2504 = (0.5 / (((_2130 * ((_2471 * _2494) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2130 * _2494) + _2457) * _2471))) * _2471;
        float _4473 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2480 / ((_2484 * _2484) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2427 = (((_2493 * cbLight._m0[_2442].x) * _2506) * _2507) + _2317;
        _2429 = (((_2493 * cbLight._m0[_2442].y) * _2506) * _2507) + _2319;
        _2431 = (((_2493 * cbLight._m0[_2442].z) * _2506) * _2507) + _2321;
    }
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    if (_1960.y == 0u)
    {
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2582;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2582;
        float _2585 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2582;
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.x;
        uint _2609 = uint((float(_2597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _817) / _2598))) + floor(float(uint(cbSceneParam._m0[85u].x * _816) / _2598)));
        float _2619 = (log2(_2585 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        uint _2623 = uint(isnan(14.0) ? _2620 : (isnan(_2620) ? 14.0 : min(_2620, 14.0)));
        uvec4 _2628 = texelFetch(g_lightClusterGridBuffer, int(((_2623 << 2u) + (_2609 << 6u)) >> 2u));
        uint _2629 = _2628.x;
        uint _2630 = _2597.z;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((((1u << ((_2630 >> 4u) & 15u)) + 4294967295u) & _2629) == 0u) || ((_2630 & 240u) == 0u))
        {
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
        }
        else
        {
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2883 = 0.0;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            uint _2889 = 0u;
            uint _2898;
            bool _2899;
            for (;;)
            {
                _2898 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                _2899 = _2898 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2899)
                {
                    frontier_phi_66_pred = _2883;
                    frontier_phi_66_pred_1 = _2888;
                    frontier_phi_66_pred_2 = _2887;
                    frontier_phi_66_pred_3 = _2886;
                    frontier_phi_66_pred_4 = _2885;
                    frontier_phi_66_pred_5 = _2884;
                }
                else
                {
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    uint _3034;
                    _3028 = _2883;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2898;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3038 = uint(findLSB(_3034)) + (_2889 << 5u);
                        uint _3035 = (_3034 + 4294967295u) & _3034;
                        uint _3040 = _3038 * 48u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        uint _3060 = (_3038 * 48u) + 4u;
                        vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3079 = (_3038 * 48u) + 8u;
                        vec3 _3090 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3079)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3079 + 2u)).x));
                        float _3094 = _3054.x - _2583;
                        float _3095 = _3054.y - _2584;
                        float _3096 = _3054.z - _2585;
                        float _3097 = dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096));
                        float _3100 = inversesqrt(_3097);
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3104 = dot(vec3(_835, _838, _841), vec3(_3101, _3102, _3103));
                        float _3109 = 1.0 - (_3097 * _3054.w);
                        float _4499 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3111 = sqrt(_3097) * _3073.w;
                        float _3114 = 1.39999997615814208984375 / (_3111 + 1.39999997615814208984375);
                        float _3115 = _3114 * _3114;
                        float _3118 = ((1.0 - _3115) * _3104) + _3115;
                        float _3121 = _3111 * _3111;
                        float _3125 = ((isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0))) * _3110) / ((_3121 * 0.699999988079071044921875) + 1.0);
                        float _3129 = (-0.0) - _2583;
                        float _3130 = (-0.0) - _2584;
                        float _3131 = (-0.0) - _2585;
                        float _3135 = inversesqrt(dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131)));
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3146 = exp2(log2(1.0 / ((_3121 * 3.5) + 5.0)) * 0.25);
                        float _3147 = 1.0 - _895;
                        float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                        float _3155 = _3154 * _3154;
                        float _3156 = _3155 * _3155;
                        float _3157 = _3136 + _3101;
                        float _3158 = _3137 + _3102;
                        float _3159 = _3138 + _3103;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3167 = dot(vec3(_835, _838, _841), vec3(_3136, _3137, _3138));
                        float _4515 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3171 = dot(vec3(_835, _838, _841), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                        float _4526 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                        float _3179 = _3114 * _3155;
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3104) + _3180;
                        float _4537 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3184 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3185 = 1.0 - _3155;
                        float _3195 = (0.5 / (((_3184 * ((_3170 * _3185) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3155) * _3170))) * _3184;
                        float _4548 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3206 = (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3178 * _3178) * ((_3121 * 2.1991131305694580078125) + 3.141590118408203125))) * _3110;
                        _2958 = (_3125 * _3073.x) + _3031;
                        _2959 = (_3125 * _3073.y) + _3032;
                        _2960 = (_3125 * _3073.z) + _3033;
                        _2955 = (_3206 * _3090.x) + _3028;
                        _2956 = (_3206 * _3090.y) + _3029;
                        _2957 = (_3206 * _3090.z) + _3030;
                        if (_3035 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3028 = _2955;
                            _3029 = _2956;
                            _3030 = _2957;
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _3035;
                        }
                    }
                    frontier_phi_66_pred = _2955;
                    frontier_phi_66_pred_1 = _2960;
                    frontier_phi_66_pred_2 = _2959;
                    frontier_phi_66_pred_3 = _2958;
                    frontier_phi_66_pred_4 = _2957;
                    frontier_phi_66_pred_5 = _2956;
                }
                _2731 = frontier_phi_66_pred;
                _2741 = frontier_phi_66_pred_1;
                _2739 = frontier_phi_66_pred_2;
                _2737 = frontier_phi_66_pred_3;
                _2735 = frontier_phi_66_pred_4;
                _2733 = frontier_phi_66_pred_5;
                uint _2890 = _2889 + 1u;
                if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2883 = _2731;
                    _2884 = _2733;
                    _2885 = _2735;
                    _2886 = _2737;
                    _2887 = _2739;
                    _2888 = _2741;
                    _2889 = _2890;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
        }
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.z;
        uint _2747 = (_2745 >> 8u) & 15u;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((4294967295u << _2747) & _2629) == 0u)
        {
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
        }
        else
        {
            float _2876 = inversesqrt(dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585)));
            float _2877 = _2876 * _2583;
            float _2878 = _2876 * _2584;
            float _2879 = _2876 * _2585;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2747 < ((_2745 >> 12u) & 15u))
            {
                float _2852;
                float _2854;
                float _2856;
                float _2858;
                float _2860;
                float _2862;
                float _3011 = _2730;
                float _3012 = _2732;
                float _3013 = _2734;
                float _3014 = _2736;
                float _3015 = _2738;
                float _3016 = _2740;
                uint _3017 = _2747;
                uint _3026;
                bool _3027;
                for (;;)
                {
                    _3026 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_3017 << 2u)) >> 2u)).x;
                    _3027 = _3026 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3027)
                    {
                        frontier_phi_77_pred = _3016;
                        frontier_phi_77_pred_1 = _3015;
                        frontier_phi_77_pred_2 = _3014;
                        frontier_phi_77_pred_3 = _3013;
                        frontier_phi_77_pred_4 = _3012;
                        frontier_phi_77_pred_5 = _3011;
                    }
                    else
                    {
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3233 = _3011;
                        float _3234 = _3012;
                        float _3235 = _3013;
                        float _3236 = _3014;
                        float _3237 = _3015;
                        float _3238 = _3016;
                        uint _3239 = _3026;
                        uint _3240;
                        vec4 _3265;
                        float _3266;
                        vec4 _3281;
                        vec3 _3293;
                        vec4 _3308;
                        vec4 _3324;
                        float _3370;
                        bool _3371;
                        for (;;)
                        {
                            uint _3250 = ((_3017 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3239));
                            _3240 = (_3239 + 4294967295u) & _3239;
                            uint _3252 = _3250 * 40u;
                            _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3266 = _3265.w;
                            uint _3268 = (_3250 * 40u) + 4u;
                            _3281 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3268)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3268 + 3u)).x));
                            uint _3283 = (_3250 * 40u) + 8u;
                            _3293 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x));
                            uint _3295 = (_3250 * 40u) + 16u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3311 = (_3250 * 40u) + 20u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3326 = (_3250 * 40u) + 24u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3345 = (_3250 * 40u) + 28u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3370 = fma(_2585, _3358.z, fma(_2584, _3358.y, _3358.x * _2583)) + _3358.w;
                            _3371 = !((fma(_2585, _3339.z, fma(_2584, _3339.y, _3339.x * _2583)) + _3339.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3371)
                            {
                                float _3398 = _3265.x - _2583;
                                float _3399 = _3265.y - _2584;
                                float _3400 = _3265.z - _2585;
                                float _3401 = dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400));
                                float _3404 = inversesqrt(_3401);
                                float _3405 = _3404 * _3398;
                                float _3406 = _3404 * _3399;
                                float _3407 = _3404 * _3400;
                                float _3411 = 1.0 - (_3401 / (_3266 * _3266));
                                float _4559 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3416 = sqrt(_3401) * _3281.w;
                                float _3418 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                                float _3419 = _3418 * _3418;
                                float _3422 = ((1.0 - _3419) * dot(vec3(_3405, _3406, _3407), vec3(_835, _838, _841))) + _3419;
                                float _3425 = _3416 * _3416;
                                float _3429 = (fma(_2585, _3308.z, fma(_2584, _3308.y, _3308.x * _2583)) + _3308.w) / _3370;
                                float _3430 = (fma(_2585, _3324.z, fma(_2584, _3324.y, _3324.x * _2583)) + _3324.w) / _3370;
                                float _3434 = 1.0 - dot(vec2(_3429, _3430), vec2(_3429, _3430));
                                float _4575 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3435 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3436 = _3435 * (((isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0))) * _3412) / ((_3425 * 0.699999988079071044921875) + 1.0));
                                float _3448 = exp2(log2(1.0 / ((_3425 * 3.5) + 5.0)) * 0.25);
                                float _3449 = 1.0 - _895;
                                float _3456 = sqrt(1.0 - ((1.0 - (_3449 * _3449)) * (1.0 - (_3448 * _3448))));
                                float _3457 = _3456 * _3456;
                                float _3458 = _3457 * _3457;
                                float _3459 = _3405 - _2877;
                                float _3460 = _3406 - _2878;
                                float _3461 = _3407 - _2879;
                                float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                                float _3469 = dot(vec3(_835, _838, _841), vec3((-0.0) - _2877, (-0.0) - _2878, (-0.0) - _2879));
                                float _4586 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3473 = dot(vec3(_835, _838, _841), vec3(_3465 * _3459, _3465 * _3460, _3465 * _3461));
                                float _4597 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3476 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3480 = ((_3476 * _3476) * (_3458 + (-1.0))) + 1.0;
                                float _3481 = _3418 * _3457;
                                float _3482 = _3481 * _3481;
                                float _3488 = ((1.0 - _3482) * dot(vec3(_835, _838, _841), vec3(_3405, _3406, _3407))) + _3482;
                                float _4608 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3489 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3490 = 1.0 - _3457;
                                float _3500 = (0.5 / (((_3489 * ((_3472 * _3490) + _3457)) + 9.9999999392252902907785028219223e-09) + (((_3489 * _3490) + _3457) * _3472))) * _3489;
                                float _4619 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3510 = (_3435 * _3412) * (((_3458 * 3.1415927410125732421875) * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) / ((_3480 * _3480) * ((_3425 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3436 * _3281.y;
                                frontier_phi_83_pred_1 = _3436 * _3281.x;
                                frontier_phi_83_pred_2 = _3510 * _3293.z;
                                frontier_phi_83_pred_3 = _3510 * _3293.y;
                                frontier_phi_83_pred_4 = _3510 * _3293.x;
                                frontier_phi_83_pred_5 = _3436 * _3281.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3518 = frontier_phi_83_pred;
                            _3517 = frontier_phi_83_pred_1;
                            _3516 = frontier_phi_83_pred_2;
                            _3515 = frontier_phi_83_pred_3;
                            _3514 = frontier_phi_83_pred_4;
                            _3519 = frontier_phi_83_pred_5;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            _3220 = _3514 + _3233;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            if (_3240 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3240;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3225;
                        frontier_phi_77_pred_1 = _3224;
                        frontier_phi_77_pred_2 = _3223;
                        frontier_phi_77_pred_3 = _3222;
                        frontier_phi_77_pred_4 = _3221;
                        frontier_phi_77_pred_5 = _3220;
                    }
                    _2862 = frontier_phi_77_pred;
                    _2860 = frontier_phi_77_pred_1;
                    _2858 = frontier_phi_77_pred_2;
                    _2856 = frontier_phi_77_pred_3;
                    _2854 = frontier_phi_77_pred_4;
                    _2852 = frontier_phi_77_pred_5;
                    uint _3018 = _3017 + 1u;
                    if (_3018 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3011 = _2852;
                        _3012 = _2854;
                        _3013 = _2856;
                        _3014 = _2858;
                        _3015 = _2860;
                        _3016 = _2862;
                        _3017 = _3018;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2856;
                frontier_phi_58_59_ladder_1 = _2862;
                frontier_phi_58_59_ladder_2 = _2860;
                frontier_phi_58_59_ladder_3 = _2858;
                frontier_phi_58_59_ladder_4 = _2854;
                frontier_phi_58_59_ladder_5 = _2852;
            }
            else
            {
                frontier_phi_58_59_ladder = _2734;
                frontier_phi_58_59_ladder_1 = _2740;
                frontier_phi_58_59_ladder_2 = _2738;
                frontier_phi_58_59_ladder_3 = _2736;
                frontier_phi_58_59_ladder_4 = _2732;
                frontier_phi_58_59_ladder_5 = _2730;
            }
            _2851 = frontier_phi_58_59_ladder_5;
            _2853 = frontier_phi_58_59_ladder_4;
            _2855 = frontier_phi_58_59_ladder;
            _2857 = frontier_phi_58_59_ladder_3;
            _2859 = frontier_phi_58_59_ladder_2;
            _2861 = frontier_phi_58_59_ladder_1;
        }
        float _2866 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2642 = (_2866 * _2857) + _2094;
        _2644 = (_2866 * _2859) + _2096;
        _2646 = (_2866 * _2861) + _2098;
        _2648 = ((_2851 * 0.039999999105930328369140625) * _2866) + _2427;
        _2650 = ((_2853 * 0.039999999105930328369140625) * _2866) + _2429;
        _2652 = ((_2855 * 0.039999999105930328369140625) * _2866) + _2431;
    }
    else
    {
        _2642 = _2094;
        _2644 = _2096;
        _2646 = _2098;
        _2648 = _2427;
        _2650 = _2429;
        _2652 = _2431;
    }
    float _4635 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4646 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4657 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2669 = ((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2642 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _879))) + ((_2648 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2670 = ((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2644 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _879))) + ((_2650 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    float _2671 = ((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2646 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _879))) + ((_2652 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1715)) * cbPerFrame._m0[3u].x);
    uint _2672 = _251 + 6u;
    float _2680 = _816 / cbSceneParam._m0[86u].x;
    float _2681 = _817 / cbSceneParam._m0[86u].y;
    vec4 _2695 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, (log2((isnan(cbSceneParam._m0[77u].w) ? _738 : (isnan(_738) ? cbSceneParam._m0[77u].w : min(_738, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2697 = _2695.x;
    float _2698 = _2695.y;
    float _2699 = _2695.z;
    float _2700 = _2695.w;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_738 > cbSceneParam._m0[78u].w)
    {
        float _2755 = isnan(_738) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _738 : min(cbSceneParam._m0[80u].w, _738));
        float _2756 = _2755 / _738;
        float _2767 = _2756 * _789;
        float _2768 = _790 * _2756;
        float _2769 = (-0.0) - _2768;
        float _2771 = _2756 * _791;
        float _2773 = (cbSceneParam._m0[77u].w * _2769) / _2755;
        float _2774 = _2773 + cbSceneParam._m0[79u].w;
        float _2775 = cbSceneParam._m0[79u].w - _2768;
        float _2781 = sqrt(((_2767 * _2767) + (_2768 * _2768)) + (_2771 * _2771));
        float _2784 = (1.0 - (cbSceneParam._m0[77u].w / _2755)) * _2781;
        float _2789 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2791 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2769 - _2773) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2774 > 0.0) ? exp2(_2789 * _2774) : (2.0 - exp2(_2791 * _2774))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2784;
        }
        else
        {
            float _2912 = 1.0 / cbSceneParam._m0[80u].x;
            float _2913 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : max(_2774, _2775));
            float _2914 = isnan(_2775) ? _2774 : (isnan(_2774) ? _2775 : min(_2774, _2775));
            float _2923 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : min(_2913, 0.0));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            _2968 = ((abs(_2781 / _2769) * cbSceneParam._m0[80u].y) * ((((_2923 - _2924) * 2.0) - ((exp2(_2789 * (isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0)))) - exp2(_2789 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))))) * _2912)) - ((exp2(_2791 * _2923) - exp2(_2791 * _2924)) * _2912))) + (_2784 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2680, _2681, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2700);
        _2793 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2697;
        _2795 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2698;
        _2797 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2699;
        _2799 = _2979 * _2700;
    }
    else
    {
        _2793 = _2697;
        _2795 = _2698;
        _2797 = _2699;
        _2799 = _2700;
    }
    bool _3006;
    vec4 _2809;
    vec4 _2831;
    float _2833;
    float _2837;
    float _2838;
    float _2839;
    float _2840;
    bool _2850;
    for (;;)
    {
        _2809 = cbMatDynParam._m0[0u];
        float _2811 = roundEven(_2809.y);
        bool _2812 = _2811 == 3.0;
        float _2813 = log2(_2799);
        float _2820 = exp2(_2813 * cbSceneParam._m0[78u].x) * _2669;
        float _2821 = exp2(_2813 * cbSceneParam._m0[78u].y) * _2670;
        float _2822 = exp2(_2813 * cbSceneParam._m0[78u].z) * _2671;
        float _2829 = _805 + (-0.5);
        _2831 = cbMtdParam._m0[1u];
        _2833 = _2831.y * _2829;
        float _2836 = (_2811 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2837 = _2836 * (_2812 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2793)));
        _2838 = _2836 * (_2812 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2795)));
        _2839 = _2836 * (_2812 ? _2822 : (_2822 + (cbSceneParam._m0[72u].w * _2797)));
        _2840 = _2829 * 0.999000012874603271484375;
        _2850 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2850)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _2840) < 0.5)
            {
                _3006 = true;
                break;
            }
        }
        uint _2947 = _854 + uint(_2809.w);
        if ((cbInstanceData._m0[_2947].w < 1.0) && ((cbInstanceData._m0[_2947].w + _2840) < 0.5))
        {
            _3006 = true;
            break;
        }
        if ((_2833 + 1.0) < _2831.x)
        {
            _3006 = true;
            break;
        }
        _3006 = false;
        break;
    }
    float _3211;
    if (_3006)
    {
        discard_state = true;
        _3211 = 0.0;
    }
    else
    {
        _3211 = cbInstanceData._m0[_2672].w;
    }
    SV_Target.x = _2837;
    SV_Target.y = _2838;
    SV_Target.z = _2839;
    SV_Target.w = _3211;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2672].w;
    discard_exit();
}


