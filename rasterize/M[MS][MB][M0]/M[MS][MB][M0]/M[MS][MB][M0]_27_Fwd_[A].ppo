#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1228;
float _3589;
float _3590;
float _3591;
float _3592;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3601 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3612 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3623 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) + _338;
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = _391.z;
    float _399 = (_391.x * 2.0) + (-1.0);
    float _400 = (_391.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3634 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))));
    float _411 = _399 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_365.x * 2.0) + (-1.0)));
    float _412 = _400 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_365.y * 2.0) + (-1.0)));
    float _415 = fma(_406, _234, fma(_412, _241, _411 * _227));
    float _418 = fma(_406, _235, fma(_412, _242, _411 * _228));
    float _421 = fma(_406, _236, fma(_412, _243, _411 * _229));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _463 = _461.x;
    float _464 = 1.0 - _463;
    float _473 = (cbMtdParam._m0[19u].x + dot(vec4(_425 * _415, _425 * _418, _425 * _421, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_463 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[21u].z);
    float _3645 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _476 = (-0.0) - cbMtdParam._m0[24u].y;
    float _478 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
    float _486 = _474 - ((_474 * TEXCOORD_8.x) * _479);
    float _487 = _474 - ((_474 * TEXCOORD_8.y) * _479);
    float _488 = _474 - ((_474 * TEXCOORD_8.z) * _479);
    float _495 = (_486 * (cbMtdParam._m0[17u].x - _345)) + _345;
    float _496 = (_487 * (cbMtdParam._m0[17u].y - _346)) + _346;
    float _497 = (_488 * (cbMtdParam._m0[17u].z - _347)) + _347;
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _511 = _509.x;
    float _512 = 1.0 - _511;
    float _540 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_511 - _512) * cbMtdParam._m0[24u].w) + _512) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3666 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _549 = ((((cbMtdParam._m0[10u].x - _495) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _541) + _495;
    float _550 = ((((cbMtdParam._m0[10u].y - _496) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _541) + _496;
    float _551 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _497)) * _541) + _497;
    float _556 = (((_365.z - _395) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _395;
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _578 = (_570.y * 2.0) + (-1.0);
    float _579 = dot(vec2(_577, _578), vec2(_577, _578));
    float _3677 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _587 = ((_570.z - _556) * _486) + _556;
    float _590 = ((cbMtdParam._m0[23u].y - _587) * _541) + _587;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _615 = (_609.x * 2.0) + (-1.0);
    float _616 = (_609.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3688 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _632 = ((sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) - _406) * _488) + _406;
    float _635 = (((_577 - _411) * _486) + _411) + (cbMtdParam._m0[21u].x * _411);
    float _636 = (((_578 - _412) * _487) + _412) + (cbMtdParam._m0[21u].x * _412);
    float _647 = (((_615 - _635) + (_635 * cbMtdParam._m0[22u].z)) * _541) + _635;
    float _648 = (((_616 - _636) + (_636 * cbMtdParam._m0[22u].z)) * _541) + _636;
    float _649 = (_541 * (sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) - _632)) + _632;
    float _651 = cbMtdParam._m0[22u].x + _391.w;
    float _654 = fma(_649, _234, fma(_648, _241, _647 * _227));
    float _657 = fma(_649, _235, fma(_648, _242, _647 * _228));
    float _660 = fma(_649, _236, fma(_648, _243, _647 * _229));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3699 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _668 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3721 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3732 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3743 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _736 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _726);
    float _737 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _726);
    float _738 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _726);
    float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
    float _743 = _736 * _742;
    float _744 = _737 * _742;
    float _745 = _738 * _742;
    vec4 _750 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _752 = _750.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _909 = sqrt(((_736 * _736) + (_737 * _737)) + (_738 * _738));
        float _915 = (cbMatDynParam._m0[5u].x * _909) + cbMatDynParam._m0[5u].y;
        float _3754 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _920 = (cbMatDynParam._m0[5u].z * _909) + cbMatDynParam._m0[5u].w;
        float _3765 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) - _916)) + _916) < ((_752 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _764 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _765 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _785 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _788 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _791 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _804 = _265 + 9u;
    uint _805 = _804 + uint(cbMatDynParam._m0[0u].w);
    float _811 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * cbInstanceData._m0[_805].x;
    float _812 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_805].y;
    float _813 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_805].z;
    float _3776 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _816 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    vec4 _825 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _764, cbSceneParam._m0[86u].y * _765));
    float _829 = ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * TEXCOORD_5.w) * _825.x;
    float _830 = dot(vec3(_665, _666, _667), vec3(_743, _744, _745));
    float _833 = _830 * 2.0;
    float _837 = (_833 * _665) - _743;
    float _838 = (_833 * _666) - _744;
    float _839 = (_833 * _667) - _745;
    float _843 = abs(dot(vec3(_743, _744, _745), vec3(_665, _666, _667)));
    float _3809 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _845 = sqrt(_668);
    float _858 = exp2((_845 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_845 * 3.0));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1227;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _952 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _956 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _960 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _985 = _890 + _665;
        float _986 = _894 + _666;
        float _987 = _898 + _667;
        float _997 = fma(_987, cbModelParam._m0[26u].z, fma(_986, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985)) - _952;
        float _998 = fma(_987, cbModelParam._m0[27u].z, fma(_986, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985)) - _956;
        float _999 = fma(_987, cbModelParam._m0[28u].z, fma(_986, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985)) - _960;
        float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
        float _1016 = ((_1003 * _997) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_952 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1003 * _998) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_956 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1018 = ((_1003 * _999) / cbModelParam._m0[34u].z) + ((((((_960 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1016, _1017, _1018), 0.0);
        float _1055 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1021.x + (-0.5));
        float _1057 = _1055 * (_1021.y + (-0.5));
        float _1058 = _1055 * (_1021.z + (-0.5));
        float _1065 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1028.x + (-0.5));
        float _1067 = _1065 * (_1028.y + (-0.5));
        float _1068 = _1065 * (_1028.z + (-0.5));
        float _1075 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1035.x + (-0.5));
        float _1077 = _1075 * (_1035.y + (-0.5));
        float _1078 = _1075 * (_1035.z + (-0.5));
        float _1085 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1042.x + (-0.5));
        float _1087 = _1085 * (_1042.y + (-0.5));
        float _1088 = _1085 * (_1042.z + (-0.5));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = _1056 * 0.5;
        float _1093 = _1066 * 0.5;
        float _1094 = _1076 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1109 = (dot(vec3(_665, _666, _667), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1119 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3857 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1121 + 1.0))) + _1126) * _1089;
        float _1136 = _1057 * 0.5;
        float _1137 = _1067 * 0.5;
        float _1138 = _1077 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_665, _666, _667), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3890 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1163 + 1.0))) + _1168) * _1090;
        float _1178 = _1058 * 0.5;
        float _1179 = _1068 * 0.5;
        float _1180 = _1078 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_665, _666, _667), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3923 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1205 + 1.0))) + _1210) * _1091;
        _1227 = _1058;
        _1229 = _1057;
        _1230 = _1056;
        _1231 = _1068;
        _1232 = _1067;
        _1233 = _1066;
        _1234 = _1078;
        _1235 = _1077;
        _1236 = _1076;
        _1237 = _1091;
        _1238 = _1090;
        _1239 = _1089;
        _1240 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1241 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
    }
    else
    {
        _1227 = _1228;
        _1229 = _1228;
        _1230 = _1228;
        _1231 = _1228;
        _1232 = _1228;
        _1233 = _1228;
        _1234 = _1228;
        _1235 = _1228;
        _1236 = _1228;
        _1237 = _1228;
        _1238 = _1228;
        _1239 = _1228;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1270 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1274 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1278 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1301 = _890 + _665;
        float _1302 = _894 + _666;
        float _1303 = _898 + _667;
        float _1313 = fma(_1303, cbModelParam._m0[30u].z, fma(_1302, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1301)) - _1270;
        float _1314 = fma(_1303, cbModelParam._m0[31u].z, fma(_1302, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1301)) - _1274;
        float _1315 = fma(_1303, cbModelParam._m0[32u].z, fma(_1302, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1301)) - _1278;
        float _1319 = inversesqrt(dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315)));
        float _1332 = ((_1319 * _1313) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1270 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1333 = ((_1319 * _1314) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1274 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1334 = ((_1319 * _1315) / cbModelParam._m0[35u].z) + ((((((_1278 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1332, _1333, _1334), 0.0);
        float _1369 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1336.x + (-0.5));
        float _1371 = _1369 * (_1336.y + (-0.5));
        float _1372 = _1369 * (_1336.z + (-0.5));
        float _1379 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1343.x + (-0.5));
        float _1381 = _1379 * (_1343.y + (-0.5));
        float _1382 = _1379 * (_1343.z + (-0.5));
        float _1389 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1350.x + (-0.5));
        float _1391 = _1389 * (_1350.y + (-0.5));
        float _1392 = _1389 * (_1350.z + (-0.5));
        float _1399 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1357.x + (-0.5));
        float _1401 = _1399 * (_1357.y + (-0.5));
        float _1402 = _1399 * (_1357.z + (-0.5));
        float _1403 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1404 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1405 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1406 = _1370 * 0.5;
        float _1407 = _1380 * 0.5;
        float _1408 = _1390 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_665, _666, _667), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1403 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3986 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1433 + 1.0))) + _1438) * _1403;
        float _1448 = _1371 * 0.5;
        float _1449 = _1381 * 0.5;
        float _1450 = _1391 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_665, _666, _667), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1404 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4019 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1475 + 1.0))) + _1480) * _1404;
        float _1490 = _1372 * 0.5;
        float _1491 = _1382 * 0.5;
        float _1492 = _1392 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_665, _666, _667), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1405 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4052 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1517 + 1.0))) + _1522) * _1405;
        _1539 = _1372;
        _1540 = _1371;
        _1541 = _1370;
        _1542 = _1382;
        _1543 = _1381;
        _1544 = _1380;
        _1545 = _1392;
        _1546 = _1391;
        _1547 = _1390;
        _1548 = _1405;
        _1549 = _1404;
        _1550 = _1403;
        _1551 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1552 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1553 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
    }
    else
    {
        _1539 = _1228;
        _1540 = _1228;
        _1541 = _1228;
        _1542 = _1228;
        _1543 = _1228;
        _1544 = _1228;
        _1545 = _1228;
        _1546 = _1228;
        _1547 = _1228;
        _1548 = _1228;
        _1549 = _1228;
        _1550 = _1228;
        _1551 = 0.0;
        _1552 = 0.0;
        _1553 = 0.0;
    }
    float _1563 = (cbModelParam._m0[1u].x * (_1551 - _1240)) + _1240;
    float _1564 = (cbModelParam._m0[1u].x * (_1552 - _1241)) + _1241;
    float _1565 = (cbModelParam._m0[1u].x * (_1553 - _1242)) + _1242;
    float _1586 = fma(_1565, cbSceneParam._m0[89u].z, fma(_1564, cbSceneParam._m0[89u].y, _1563 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1565, cbSceneParam._m0[90u].z, fma(_1564, cbSceneParam._m0[90u].y, _1563 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1565, cbSceneParam._m0[91u].z, fma(_1564, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1563));
    float _1607 = _837 * 0.5;
    float _1608 = _838 * 0.5;
    float _1609 = _839 * 0.5;
    float _1610 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1541, _1544, _1547, _1550));
    float _1613 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1540, _1543, _1546, _1549));
    float _1616 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1539, _1542, _1545, _1548));
    float _1650;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1623 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1227, _1231, _1234, _1237));
        float _1627 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1229, _1232, _1235, _1238));
        float _1631 = dot(vec4(_1607, _1608, _1609, 1.0), vec4(_1230, _1233, _1236, _1239));
        float _1638 = dot(vec4(cbModelParam._m0[39u]), vec4(_1607, _1608, _1609, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1661;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1652 = dot(vec4(cbModelParam._m0[40u]), vec4(_1607, _1608, _1609, 1.0));
        _1661 = dot(vec3(isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1661 = 1.0;
    }
    float _1665 = (_1661 * cbModelParam._m0[1u].x) + (_1650 * (1.0 - cbModelParam._m0[1u].x));
    float _1675 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1675 : min(cbModelParam._m0[25u].z, _1675));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1724 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1728 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1732 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1735 = fma(_839, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837));
        float _1738 = fma(_839, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837));
        float _1741 = fma(_839, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837));
        float _1769;
        if (_1735 > 0.0)
        {
            _1769 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1769 = frontier_phi_17_15_ladder;
        }
        float _1972;
        if (_1738 > 0.0)
        {
            _1972 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1972 = frontier_phi_26_22_ladder;
        }
        float _2215;
        if (_1741 > 0.0)
        {
            _2215 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2215 = frontier_phi_38_33_ladder;
        }
        float _2217 = isnan(_1972) ? _1769 : (isnan(_1769) ? _1972 : min(_1769, _1972));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1735) + _1724;
        float _2223 = (_2218 * _1738) + _1728;
        float _2224 = (_2218 * _1741) + _1732;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2227 = (-1.0) - _2225;
        float _2229 = _2225 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2224 > _2229) || ((_2224 < _2227) || ((_2223 > _2229) || ((_2223 < _2227) || ((_2222 < _2227) || (_2222 > _2229))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1676);
            frontier_phi_16_38_ladder = _2348.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2348.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2348.x * cbModelParam._m0[1u].y;
        }
        _1757 = frontier_phi_16_38_ladder_2;
        _1759 = frontier_phi_16_38_ladder_1;
        _1761 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_837, _838, _839), _1676);
        _1757 = _1745.x * cbModelParam._m0[1u].y;
        _1759 = _1745.y * cbModelParam._m0[1u].y;
        _1761 = _1745.z * cbModelParam._m0[1u].y;
    }
    float _1765 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1765 : min(cbModelParam._m0[25u].w, _1765));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1820 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1824 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1828 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1831 = fma(_839, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837));
        float _1834 = fma(_839, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837));
        float _1837 = fma(_839, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837));
        float _1977;
        if (_1831 > 0.0)
        {
            _1977 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1977 = frontier_phi_28_24_ladder;
        }
        float _2242;
        if (_1834 > 0.0)
        {
            _2242 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2242 = frontier_phi_40_35_ladder;
        }
        float _2447;
        if (_1837 > 0.0)
        {
            _2447 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2447 = frontier_phi_49_46_ladder;
        }
        float _2449 = isnan(_2242) ? _1977 : (isnan(_1977) ? _2242 : min(_1977, _2242));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1831) + _1820;
        float _2455 = (_2450 * _1834) + _1824;
        float _2456 = (_2450 * _1837) + _1828;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2457;
        float _2460 = _2457 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2456 > _2460) || ((_2456 < _2458) || ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 < _2458) || (_2454 > _2460))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2456, cbModelParam._m0[17u].z, fma(_2455, cbModelParam._m0[17u].y, _2454 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2456, cbModelParam._m0[18u].z, fma(_2455, cbModelParam._m0[18u].y, _2454 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2456, cbModelParam._m0[19u].z, fma(_2455, cbModelParam._m0[19u].y, _2454 * cbModelParam._m0[19u].x))), _1766);
            frontier_phi_25_49_ladder = _2655.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2655.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2655.x * cbModelParam._m0[1u].z;
        }
        _1856 = frontier_phi_25_49_ladder_2;
        _1858 = frontier_phi_25_49_ladder_1;
        _1860 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_837, _838, _839), _1766);
        _1856 = _1840.x * cbModelParam._m0[1u].z;
        _1858 = _1840.y * cbModelParam._m0[1u].z;
        _1860 = _1840.z * cbModelParam._m0[1u].z;
    }
    float _1872 = ((((1.0 - _858) * ((_845 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_858 * _845)) * _829;
    float _1873 = _1872 * ((cbModelParam._m0[1u].w * (_1856 - _1757)) + _1757);
    float _1874 = _1872 * ((cbModelParam._m0[1u].w * (_1858 - _1759)) + _1759);
    float _1875 = _1872 * ((cbModelParam._m0[1u].w * (_1860 - _1761)) + _1761);
    float _1878 = fma(_1875, cbSceneParam._m0[89u].z, fma(_1874, cbSceneParam._m0[89u].y, _1873 * cbSceneParam._m0[89u].x));
    float _1881 = fma(_1875, cbSceneParam._m0[90u].z, fma(_1874, cbSceneParam._m0[90u].y, _1873 * cbSceneParam._m0[90u].x));
    float _1884 = fma(_1875, cbSceneParam._m0[91u].z, fma(_1874, cbSceneParam._m0[91u].y, _1873 * cbSceneParam._m0[91u].x));
    uvec4 _1894 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _1896 = _1894.x * 14u;
    uint _1897 = _1896 + 13u;
    float _1904 = _829 + (-1.0);
    float _1909 = (cbLight._m0[_1897].x * _1904) + 1.0;
    float _1910 = (cbLight._m0[_1897].y * _1904) + 1.0;
    float _1911 = (cbLight._m0[_1897].z * _1904) + 1.0;
    float _1912 = (cbLight._m0[_1897].w * _1904) + 1.0;
    uint _1913 = _1896 + 5u;
    float _1919 = isnan(1.0) ? _1910 : (isnan(_1910) ? 1.0 : min(_1910, 1.0));
    uint _1923 = _1896 + 4u;
    float _1930 = isnan(1.0) ? _1909 : (isnan(_1909) ? 1.0 : min(_1909, 1.0));
    uint _1934 = _1896 | 1u;
    float _1945 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_665, _666, _667));
    float _1948 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_665, _666, _667));
    float _4188 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _4199 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1953 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _1955 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _1962 = ((cbLight._m0[_1913].x * _1919) * _1955) + ((cbLight._m0[_1923].x * _1930) * _1953);
    float _1963 = ((_1919 * cbLight._m0[_1913].y) * _1955) + ((_1930 * cbLight._m0[_1923].y) * _1953);
    float _1964 = ((_1919 * cbLight._m0[_1913].z) * _1955) + ((_1930 * cbLight._m0[_1923].z) * _1953);
    uvec4 _1969 = floatBitsToUint(cbLight._m0[_1896 + 12u]);
    bool _1971 = _1969.x == 0u;
    float _1982;
    float _1984;
    float _1986;
    if (_1971)
    {
        _1982 = _1962;
        _1984 = _1963;
        _1986 = _1964;
    }
    else
    {
        uint _1990 = _1896 + 6u;
        float _2006 = (dot(vec3(cbLight._m0[_1896 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2007 = _2006 * _2006;
        float _4210 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2009 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _1982 = (((cbLight._m0[_1990].x * 0.3183098733425140380859375) * _2008) * _2009) + _1962;
        _1984 = (((cbLight._m0[_1990].y * 0.3183098733425140380859375) * _2008) * _2009) + _1963;
        _1986 = (((cbLight._m0[_1990].z * 0.3183098733425140380859375) * _2008) * _2009) + _1964;
    }
    bool _1989 = _1969.y == 0u;
    float _2027;
    float _2029;
    float _2031;
    if (_1989)
    {
        _2027 = _1982;
        _2029 = _1984;
        _2031 = _1986;
    }
    else
    {
        uint _2186 = _1896 + 7u;
        float _2202 = (dot(vec3(cbLight._m0[_1896 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4226 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2205 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2027 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _1982;
        _2029 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _1984;
        _2031 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _1986;
    }
    uint _2034 = _1896 + 8u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1896].w)) * _668) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1896].x + _743;
    float _2050 = cbLight._m0[_1896].y + _744;
    float _2051 = cbLight._m0[_1896].z + _745;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1896].xyz));
    float _4242 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _2063 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2064 = dot(vec3(_665, _666, _667), vec3(_2056, _2057, _2058));
    float _4264 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2067 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2068 = dot(vec3(cbLight._m0[_1896].xyz), vec3(_2056, _2057, _2058));
    float _4275 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = _2048 * _2048;
    float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
    float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2088 = 1.0 - _2048;
    float _2099 = (0.5 / (((_2063 * ((_2062 * _2088) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2088) + _2048) * _2062))) * _2062;
    float _4286 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2101 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
    uint _2112 = _1896 + 9u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _668) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1934].x + _743;
    float _2126 = cbLight._m0[_1934].y + _744;
    float _2127 = cbLight._m0[_1934].z + _745;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1934].xyz));
    float _4297 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2139 = dot(vec3(_665, _666, _667), vec3(_2132, _2133, _2134));
    float _4308 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2132, _2133, _2134));
    float _4319 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2124 * _2124;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2160 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2161 = 1.0 - _2124;
    float _2171 = (0.5 / (((_2063 * ((_2138 * _2161) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2161) + _2124) * _2138))) * _2138;
    float _4330 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    float _2183 = (((_2160 * cbLight._m0[_2112].x) * _2173) * _1919) + (((_2087 * cbLight._m0[_2034].x) * _2101) * _1930);
    float _2184 = (((_2160 * cbLight._m0[_2112].y) * _2173) * _1919) + (((_2087 * cbLight._m0[_2034].y) * _2101) * _1930);
    float _2185 = (((_2160 * cbLight._m0[_2112].z) * _2173) * _1919) + (((_2087 * cbLight._m0[_2034].z) * _2101) * _1930);
    float _2247;
    float _2249;
    float _2251;
    if (_1971)
    {
        _2247 = _2183;
        _2249 = _2184;
        _2251 = _2185;
    }
    else
    {
        uint _2253 = _1896 + 2u;
        uint _2257 = _1896 + 10u;
        float _2271 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _668) * 0.949999988079071044921875);
        float _2272 = _2271 * _2271;
        float _2273 = cbLight._m0[_2253].x + _743;
        float _2274 = cbLight._m0[_2253].y + _744;
        float _2275 = cbLight._m0[_2253].z + _745;
        float _2279 = inversesqrt(dot(vec3(_2273, _2274, _2275), vec3(_2273, _2274, _2275)));
        float _2280 = _2279 * _2273;
        float _2281 = _2279 * _2274;
        float _2282 = _2279 * _2275;
        float _2283 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2253].xyz));
        float _4341 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2287 = dot(vec3(_665, _666, _667), vec3(_2280, _2281, _2282));
        float _4352 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2291 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2280, _2281, _2282));
        float _4363 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2295 = _2272 * _2272;
        float _2299 = ((_2290 * _2290) * (_2295 + (-1.0))) + 1.0;
        float _2308 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2309 = 1.0 - _2272;
        float _2319 = (0.5 / (((_2063 * ((_2286 * _2309) + _2272)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2309) + _2272) * _2286))) * _2286;
        float _4374 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2295 / ((_2299 * _2299) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
        _2247 = (((_2308 * cbLight._m0[_2257].x) * _2321) * _2322) + _2183;
        _2249 = (((_2308 * cbLight._m0[_2257].y) * _2321) * _2322) + _2184;
        _2251 = (((_2308 * cbLight._m0[_2257].z) * _2321) * _2322) + _2185;
    }
    float _2357;
    float _2359;
    float _2361;
    if (_1989)
    {
        _2357 = _2247;
        _2359 = _2249;
        _2361 = _2251;
    }
    else
    {
        uint _2368 = _1896 + 3u;
        uint _2372 = _1896 + 11u;
        float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2368].w)) * _668) * 0.949999988079071044921875);
        float _2387 = _2386 * _2386;
        float _2388 = cbLight._m0[_2368].x + _743;
        float _2389 = cbLight._m0[_2368].y + _744;
        float _2390 = cbLight._m0[_2368].z + _745;
        float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
        float _2395 = _2394 * _2388;
        float _2396 = _2394 * _2389;
        float _2397 = _2394 * _2390;
        float _2398 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2368].xyz));
        float _4390 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2402 = dot(vec3(_665, _666, _667), vec3(_2395, _2396, _2397));
        float _4401 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2406 = dot(vec3(cbLight._m0[_2368].xyz), vec3(_2395, _2396, _2397));
        float _4412 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2410 = _2387 * _2387;
        float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
        float _2423 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2424 = 1.0 - _2387;
        float _2434 = (0.5 / (((_2063 * ((_2401 * _2424) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2063 * _2424) + _2387) * _2401))) * _2401;
        float _4423 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
        _2357 = (((_2423 * cbLight._m0[_2372].x) * _2436) * _2437) + _2247;
        _2359 = (((_2423 * cbLight._m0[_2372].y) * _2436) * _2437) + _2249;
        _2361 = (((_2423 * cbLight._m0[_2372].z) * _2436) * _2437) + _2251;
    }
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    if (_1894.y == 0u)
    {
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2512;
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2512;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2512;
        uvec4 _2527 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2528 = _2527.x;
        uint _2539 = uint((float(_2527.y) * floor(float(uint(cbSceneParam._m0[85u].y * _765) / _2528))) + floor(float(uint(cbSceneParam._m0[85u].x * _764) / _2528)));
        float _2549 = (log2(_2515 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2550 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        uint _2553 = uint(isnan(14.0) ? _2550 : (isnan(_2550) ? 14.0 : min(_2550, 14.0)));
        uvec4 _2558 = texelFetch(g_lightClusterGridBuffer, int(((_2553 << 2u) + (_2539 << 6u)) >> 2u));
        uint _2559 = _2558.x;
        uint _2560 = _2527.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2560 >> 4u) & 15u)) + 4294967295u) & _2559) == 0u) || ((_2560 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            uint _2818 = 0u;
            uint _2827;
            bool _2828;
            for (;;)
            {
                _2827 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2818 << 2u)) >> 2u)).x;
                _2828 = _2827 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2828)
                {
                    frontier_phi_66_pred = _2812;
                    frontier_phi_66_pred_1 = _2817;
                    frontier_phi_66_pred_2 = _2816;
                    frontier_phi_66_pred_3 = _2815;
                    frontier_phi_66_pred_4 = _2814;
                    frontier_phi_66_pred_5 = _2813;
                }
                else
                {
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    uint _2963;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2816;
                    _2962 = _2817;
                    _2963 = _2827;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    for (;;)
                    {
                        uint _2967 = uint(findLSB(_2963)) + (_2818 << 5u);
                        uint _2964 = (_2963 + 4294967295u) & _2963;
                        uint _2969 = _2967 * 48u;
                        vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2989 = (_2967 * 48u) + 4u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 3u)).x));
                        uint _3008 = (_2967 * 48u) + 8u;
                        vec3 _3019 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x));
                        float _3023 = _2983.x - _2513;
                        float _3024 = _2983.y - _2514;
                        float _3025 = _2983.z - _2515;
                        float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                        float _3029 = inversesqrt(_3026);
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3033 = dot(vec3(_785, _788, _791), vec3(_3030, _3031, _3032));
                        float _3038 = 1.0 - (_3026 * _2983.w);
                        float _4449 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3040 = sqrt(_3026) * _3002.w;
                        float _3043 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _3033) + _3044;
                        float _3050 = _3040 * _3040;
                        float _3054 = ((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3039) / ((_3050 * 0.699999988079071044921875) + 1.0);
                        float _3058 = (-0.0) - _2513;
                        float _3059 = (-0.0) - _2514;
                        float _3060 = (-0.0) - _2515;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3075 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                        float _3076 = 1.0 - _845;
                        float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                        float _3084 = _3083 * _3083;
                        float _3085 = _3084 * _3084;
                        float _3086 = _3065 + _3030;
                        float _3087 = _3066 + _3031;
                        float _3088 = _3067 + _3032;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3096 = dot(vec3(_785, _788, _791), vec3(_3065, _3066, _3067));
                        float _4465 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3100 = dot(vec3(_785, _788, _791), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                        float _4476 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                        float _3108 = _3043 * _3084;
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3033) + _3109;
                        float _4487 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3114 = 1.0 - _3084;
                        float _3124 = (0.5 / (((_3113 * ((_3099 * _3114) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3084) * _3099))) * _3113;
                        float _4498 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3135 = (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3107 * _3107) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125))) * _3039;
                        _2887 = (_3054 * _3002.x) + _2960;
                        _2888 = (_3054 * _3002.y) + _2961;
                        _2889 = (_3054 * _3002.z) + _2962;
                        _2884 = (_3135 * _3019.x) + _2957;
                        _2885 = (_3135 * _3019.y) + _2958;
                        _2886 = (_3135 * _3019.z) + _2959;
                        if (_2964 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2888;
                            _2962 = _2889;
                            _2963 = _2964;
                        }
                    }
                    frontier_phi_66_pred = _2884;
                    frontier_phi_66_pred_1 = _2889;
                    frontier_phi_66_pred_2 = _2888;
                    frontier_phi_66_pred_3 = _2887;
                    frontier_phi_66_pred_4 = _2886;
                    frontier_phi_66_pred_5 = _2885;
                }
                _2661 = frontier_phi_66_pred;
                _2671 = frontier_phi_66_pred_1;
                _2669 = frontier_phi_66_pred_2;
                _2667 = frontier_phi_66_pred_3;
                _2665 = frontier_phi_66_pred_4;
                _2663 = frontier_phi_66_pred_5;
                uint _2819 = _2818 + 1u;
                if (_2819 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2812 = _2661;
                    _2813 = _2663;
                    _2814 = _2665;
                    _2815 = _2667;
                    _2816 = _2669;
                    _2817 = _2671;
                    _2818 = _2819;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((4294967295u << _2677) & _2559) == 0u)
        {
            _2780 = _2660;
            _2782 = _2662;
            _2784 = _2664;
            _2786 = _2666;
            _2788 = _2668;
            _2790 = _2670;
        }
        else
        {
            float _2805 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
            float _2806 = _2805 * _2513;
            float _2807 = _2805 * _2514;
            float _2808 = _2805 * _2515;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2940 = _2660;
                float _2941 = _2662;
                float _2942 = _2664;
                float _2943 = _2666;
                float _2944 = _2668;
                float _2945 = _2670;
                uint _2946 = _2677;
                uint _2955;
                bool _2956;
                for (;;)
                {
                    _2955 = texelFetch(g_lightClassification, int((((_2553 << 5u) + (_2539 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                    _2956 = _2955 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2956)
                    {
                        frontier_phi_77_pred = _2945;
                        frontier_phi_77_pred_1 = _2944;
                        frontier_phi_77_pred_2 = _2943;
                        frontier_phi_77_pred_3 = _2942;
                        frontier_phi_77_pred_4 = _2941;
                        frontier_phi_77_pred_5 = _2940;
                    }
                    else
                    {
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3162 = _2940;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        float _3165 = _2943;
                        float _3166 = _2944;
                        float _3167 = _2945;
                        uint _3168 = _2955;
                        uint _3169;
                        vec4 _3194;
                        float _3195;
                        vec4 _3210;
                        vec3 _3222;
                        vec4 _3237;
                        vec4 _3252;
                        float _3298;
                        bool _3299;
                        for (;;)
                        {
                            uint _3179 = ((_2946 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3168));
                            _3169 = (_3168 + 4294967295u) & _3168;
                            uint _3181 = _3179 * 40u;
                            _3194 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 3u)).x));
                            _3195 = _3194.w;
                            uint _3197 = (_3179 * 40u) + 4u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3212 = (_3179 * 40u) + 8u;
                            _3222 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x));
                            uint _3224 = (_3179 * 40u) + 16u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3179 * 40u) + 20u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3254 = (_3179 * 40u) + 24u;
                            vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3273 = (_3179 * 40u) + 28u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3298 = fma(_2515, _3286.z, fma(_2514, _3286.y, _3286.x * _2513)) + _3286.w;
                            _3299 = !((fma(_2515, _3267.z, fma(_2514, _3267.y, _3267.x * _2513)) + _3267.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3299)
                            {
                                float _3326 = _3194.x - _2513;
                                float _3327 = _3194.y - _2514;
                                float _3328 = _3194.z - _2515;
                                float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                                float _3332 = inversesqrt(_3329);
                                float _3333 = _3332 * _3326;
                                float _3334 = _3332 * _3327;
                                float _3335 = _3332 * _3328;
                                float _3339 = 1.0 - (_3329 / (_3195 * _3195));
                                float _4509 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3344 = sqrt(_3329) * _3210.w;
                                float _3346 = 1.39999997615814208984375 / (_3344 + 1.39999997615814208984375);
                                float _3347 = _3346 * _3346;
                                float _3350 = ((1.0 - _3347) * dot(vec3(_3333, _3334, _3335), vec3(_785, _788, _791))) + _3347;
                                float _3353 = _3344 * _3344;
                                float _3357 = (fma(_2515, _3237.z, fma(_2514, _3237.y, _3237.x * _2513)) + _3237.w) / _3298;
                                float _3358 = (fma(_2515, _3252.z, fma(_2514, _3252.y, _3252.x * _2513)) + _3252.w) / _3298;
                                float _3362 = 1.0 - dot(vec2(_3357, _3358), vec2(_3357, _3358));
                                float _4525 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3364 = _3363 * (((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3340) / ((_3353 * 0.699999988079071044921875) + 1.0));
                                float _3376 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                                float _3377 = 1.0 - _845;
                                float _3384 = sqrt(1.0 - ((1.0 - (_3377 * _3377)) * (1.0 - (_3376 * _3376))));
                                float _3385 = _3384 * _3384;
                                float _3386 = _3385 * _3385;
                                float _3387 = _3333 - _2806;
                                float _3388 = _3334 - _2807;
                                float _3389 = _3335 - _2808;
                                float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                                float _3397 = dot(vec3(_785, _788, _791), vec3((-0.0) - _2806, (-0.0) - _2807, (-0.0) - _2808));
                                float _4536 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3400 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3401 = dot(vec3(_785, _788, _791), vec3(_3393 * _3387, _3393 * _3388, _3393 * _3389));
                                float _4547 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3404 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3408 = ((_3404 * _3404) * (_3386 + (-1.0))) + 1.0;
                                float _3409 = _3346 * _3385;
                                float _3410 = _3409 * _3409;
                                float _3416 = ((1.0 - _3410) * dot(vec3(_785, _788, _791), vec3(_3333, _3334, _3335))) + _3410;
                                float _4558 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3418 = 1.0 - _3385;
                                float _3428 = (0.5 / (((_3417 * ((_3400 * _3418) + _3385)) + 9.9999999392252902907785028219223e-09) + (((_3417 * _3418) + _3385) * _3400))) * _3417;
                                float _4569 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3438 = (_3363 * _3340) * (((_3386 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3408 * _3408) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3364 * _3210.y;
                                frontier_phi_83_pred_1 = _3364 * _3210.x;
                                frontier_phi_83_pred_2 = _3438 * _3222.z;
                                frontier_phi_83_pred_3 = _3438 * _3222.y;
                                frontier_phi_83_pred_4 = _3438 * _3222.x;
                                frontier_phi_83_pred_5 = _3364 * _3210.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3446 = frontier_phi_83_pred;
                            _3445 = frontier_phi_83_pred_1;
                            _3444 = frontier_phi_83_pred_2;
                            _3443 = frontier_phi_83_pred_3;
                            _3442 = frontier_phi_83_pred_4;
                            _3447 = frontier_phi_83_pred_5;
                            _3152 = _3445 + _3165;
                            _3153 = _3446 + _3166;
                            _3154 = _3447 + _3167;
                            _3149 = _3442 + _3162;
                            _3150 = _3443 + _3163;
                            _3151 = _3444 + _3164;
                            if (_3169 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3169;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3154;
                        frontier_phi_77_pred_1 = _3153;
                        frontier_phi_77_pred_2 = _3152;
                        frontier_phi_77_pred_3 = _3151;
                        frontier_phi_77_pred_4 = _3150;
                        frontier_phi_77_pred_5 = _3149;
                    }
                    _2791 = frontier_phi_77_pred;
                    _2789 = frontier_phi_77_pred_1;
                    _2787 = frontier_phi_77_pred_2;
                    _2785 = frontier_phi_77_pred_3;
                    _2783 = frontier_phi_77_pred_4;
                    _2781 = frontier_phi_77_pred_5;
                    uint _2947 = _2946 + 1u;
                    if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2940 = _2781;
                        _2941 = _2783;
                        _2942 = _2785;
                        _2943 = _2787;
                        _2944 = _2789;
                        _2945 = _2791;
                        _2946 = _2947;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2785;
                frontier_phi_58_59_ladder_1 = _2791;
                frontier_phi_58_59_ladder_2 = _2789;
                frontier_phi_58_59_ladder_3 = _2787;
                frontier_phi_58_59_ladder_4 = _2783;
                frontier_phi_58_59_ladder_5 = _2781;
            }
            else
            {
                frontier_phi_58_59_ladder = _2664;
                frontier_phi_58_59_ladder_1 = _2670;
                frontier_phi_58_59_ladder_2 = _2668;
                frontier_phi_58_59_ladder_3 = _2666;
                frontier_phi_58_59_ladder_4 = _2662;
                frontier_phi_58_59_ladder_5 = _2660;
            }
            _2780 = frontier_phi_58_59_ladder_5;
            _2782 = frontier_phi_58_59_ladder_4;
            _2784 = frontier_phi_58_59_ladder;
            _2786 = frontier_phi_58_59_ladder_3;
            _2788 = frontier_phi_58_59_ladder_2;
            _2790 = frontier_phi_58_59_ladder_1;
        }
        float _2795 = isnan(1.0) ? _829 : (isnan(_829) ? 1.0 : min(_829, 1.0));
        _2572 = (_2795 * _2786) + _2027;
        _2574 = (_2795 * _2788) + _2029;
        _2576 = (_2795 * _2790) + _2031;
        _2578 = ((_2780 * 0.039999999105930328369140625) * _2795) + _2357;
        _2580 = ((_2782 * 0.039999999105930328369140625) * _2795) + _2359;
        _2582 = ((_2784 * 0.039999999105930328369140625) * _2795) + _2361;
    }
    else
    {
        _2572 = _2027;
        _2574 = _2029;
        _2576 = _2031;
        _2578 = _2357;
        _2580 = _2359;
        _2582 = _2361;
    }
    float _4585 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4596 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4607 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2599 = ((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2572 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _829))) + ((_2578 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    float _2600 = ((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2574 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _829))) + ((_2580 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    float _2601 = ((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2576 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _829))) + ((_2582 + ((isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))) * _1665)) * cbPerFrame._m0[3u].x);
    uint _2602 = _265 + 6u;
    float _2610 = _764 / cbSceneParam._m0[86u].x;
    float _2611 = _765 / cbSceneParam._m0[86u].y;
    vec4 _2625 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2627 = _2625.x;
    float _2628 = _2625.y;
    float _2629 = _2625.z;
    float _2630 = _2625.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2686 = _2685 / _686;
        float _2697 = _2686 * _736;
        float _2698 = _737 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2700 = _2686 * _738;
        float _2702 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2698;
        float _2710 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2897;
        if (abs((_2699 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2897 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2841 = 1.0 / cbSceneParam._m0[80u].x;
            float _2842 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2843 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2852 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : min(_2842, 0.0));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            _2897 = ((abs(_2710 / _2699) * cbSceneParam._m0[80u].y) * ((((_2852 - _2853) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))))) * _2841)) - ((exp2(_2720 * _2852) - exp2(_2720 * _2853)) * _2841))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2899 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2610, _2611, 1.0), 0.0);
        float _2908 = exp2((_2897 * (-1.44269502162933349609375)) * (1.0 - _2899.w));
        float _2909 = log2(_2908);
        float _2925 = log2(_2630);
        _2722 = (exp2(_2925 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].x)) * _2899.x) / cbSceneParam._m0[78u].x)) + _2627;
        _2724 = (exp2(_2925 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].y)) * _2899.y) / cbSceneParam._m0[78u].y)) + _2628;
        _2726 = (exp2(_2925 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2909 * cbSceneParam._m0[78u].z)) * _2899.z) / cbSceneParam._m0[78u].z)) + _2629;
        _2728 = _2908 * _2630;
    }
    else
    {
        _2722 = _2627;
        _2724 = _2628;
        _2726 = _2629;
        _2728 = _2630;
    }
    bool _2935;
    vec4 _2738;
    vec4 _2760;
    float _2762;
    float _2766;
    float _2767;
    float _2768;
    float _2769;
    bool _2779;
    for (;;)
    {
        _2738 = cbMatDynParam._m0[0u];
        float _2740 = roundEven(_2738.y);
        bool _2741 = _2740 == 3.0;
        float _2742 = log2(_2728);
        float _2749 = exp2(_2742 * cbSceneParam._m0[78u].x) * _2599;
        float _2750 = exp2(_2742 * cbSceneParam._m0[78u].y) * _2600;
        float _2751 = exp2(_2742 * cbSceneParam._m0[78u].z) * _2601;
        float _2758 = _752 + (-0.5);
        _2760 = cbMtdParam._m0[1u];
        _2762 = _2760.y * _2758;
        float _2765 = (_2740 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2766 = _2765 * (_2741 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2722)));
        _2767 = _2765 * (_2741 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2724)));
        _2768 = _2765 * (_2741 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2726)));
        _2769 = _2758 * 0.999000012874603271484375;
        _2779 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2779)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _2769) < 0.5)
            {
                _2935 = true;
                break;
            }
        }
        uint _2876 = _804 + uint(_2738.w);
        if ((cbInstanceData._m0[_2876].w < 1.0) && ((cbInstanceData._m0[_2876].w + _2769) < 0.5))
        {
            _2935 = true;
            break;
        }
        if ((_2762 + 1.0) < _2760.x)
        {
            _2935 = true;
            break;
        }
        _2935 = false;
        break;
    }
    float _3140;
    if (_2935)
    {
        discard_state = true;
        _3140 = 0.0;
    }
    else
    {
        _3140 = cbInstanceData._m0[_2602].w;
    }
    SV_Target.x = _2766;
    SV_Target.y = _2767;
    SV_Target.z = _2768;
    SV_Target.w = _3140;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2602].w;
    discard_exit();
}


