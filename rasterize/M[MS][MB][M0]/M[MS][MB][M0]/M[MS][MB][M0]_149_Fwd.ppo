#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1300;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3603 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _478 = _476.x;
    float _479 = _476.y;
    float _480 = _476.z;
    float _489 = ((_459.z - _480) * _384) + _480;
    float _492 = ((((_459.x - _478) * _384) + _478) * 2.0) + (-1.0);
    float _493 = ((((_459.y - _479) * _384) + _479) * 2.0) + (-1.0);
    float _494 = dot(vec2(_492, _493), vec2(_492, _493));
    float _3614 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _499 = sqrt(1.0 - (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))));
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _531 = (_492 + ((((_432.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_519.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _532 = (_493 + ((((_432.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_519.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _535 = fma(_499, _237, fma(_532, _244, _531 * _230));
    float _538 = fma(_499, _238, fma(_532, _245, _531 * _231));
    float _541 = fma(_499, _239, fma(_532, _246, _531 * _232));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _576 = _574.x;
    float _577 = 1.0 - _576;
    float _583 = (cbMtdParam._m0[19u].x + dot(vec4(_545 * _535, _545 * _538, _545 * _541, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_576 - _577) * cbMtdParam._m0[24u].z) + _577) * cbMtdParam._m0[21u].z);
    float _3625 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _586 = (-0.0) - cbMtdParam._m0[24u].y;
    float _588 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
    float _596 = _584 - ((_584 * TEXCOORD_8.x) * _589);
    float _597 = _584 - ((_584 * TEXCOORD_8.y) * _589);
    float _598 = _584 - ((_584 * TEXCOORD_8.z) * _589);
    float _605 = (_596 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _606 = (_597 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _607 = (_598 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _619 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _650 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_621 - _622) * cbMtdParam._m0[24u].w) + _622) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3646 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _659 = ((((cbMtdParam._m0[10u].x - _605) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _651) + _605;
    float _660 = ((((cbMtdParam._m0[10u].y - _606) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _651) + _606;
    float _661 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _607)) * _651) + _607;
    float _666 = (((_432.z - _489) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _489;
    float _670 = ((_519.z - _666) * cbMtdParam._m0[19u].w) + _666;
    vec4 _684 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3657 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _701 = ((_684.z - _670) * _596) + _670;
    float _704 = ((cbMtdParam._m0[23u].y - _701) * _651) + _701;
    vec4 _723 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _729 = (_723.x * 2.0) + (-1.0);
    float _730 = (_723.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3668 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _746 = ((sqrt(1.0 - (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) - _499) * _598) + _499;
    float _749 = (((_691 - _531) * _596) + _531) + (cbMtdParam._m0[21u].x * _531);
    float _750 = (((_692 - _532) * _597) + _532) + (cbMtdParam._m0[21u].x * _532);
    float _761 = (((_729 - _749) + (_749 * cbMtdParam._m0[22u].z)) * _651) + _749;
    float _762 = (((_730 - _750) + (_750 * cbMtdParam._m0[22u].z)) * _651) + _750;
    float _763 = (_651 * (sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) - _746)) + _746;
    float _765 = cbMtdParam._m0[22u].x + _519.w;
    float _768 = fma(_763, _237, fma(_762, _244, _761 * _230));
    float _771 = fma(_763, _238, fma(_762, _245, _761 * _231));
    float _774 = fma(_763, _239, fma(_762, _246, _761 * _232));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _3679 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _782 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3701 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3712 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3723 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _888 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _891 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _905 = (_249 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _911 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_905].x;
    float _912 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_905].y;
    float _913 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_905].z;
    float _3734 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _929 = ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * TEXCOORD_5.w) * _925.x;
    float _930 = dot(vec3(_779, _780, _781), vec3(_858, _859, _860));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _779) - _858;
    float _938 = (_933 * _780) - _859;
    float _939 = (_933 * _781) - _860;
    float _943 = abs(dot(vec3(_858, _859, _860), vec3(_779, _780, _781)));
    float _3767 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_782);
    float _958 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_998, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _990));
        float _1028 = fma(_998, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _990));
        float _1032 = fma(_998, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _990));
        float _1057 = _990 + _779;
        float _1058 = _994 + _780;
        float _1059 = _998 + _781;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1024;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1028;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1032;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_779, _780, _781), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3815 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_779, _780, _781), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3848 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_779, _780, _781), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3881 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_998, cbModelParam._m0[30u].z, fma(_994, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _990));
        float _1343 = fma(_998, cbModelParam._m0[31u].z, fma(_994, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _990));
        float _1347 = fma(_998, cbModelParam._m0[32u].z, fma(_994, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _990));
        float _1370 = _990 + _779;
        float _1371 = _994 + _780;
        float _1372 = _998 + _781;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_779, _780, _781), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3944 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_779, _780, _781), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _3977 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_779, _780, _781), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4010 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1300;
        _1609 = _1300;
        _1610 = _1300;
        _1611 = _1300;
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = _1300;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1312)) + _1312;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1313)) + _1313;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1314)) + _1314;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _937 * 0.5;
    float _1677 = _938 * 0.5;
    float _1678 = _939 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _782);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_998, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_998, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_998, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1806 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1809 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1837 = frontier_phi_14_12_ladder;
        }
        float _2037;
        if (_1806 > 0.0)
        {
            _2037 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2037 = frontier_phi_23_19_ladder;
        }
        float _2280;
        if (_1809 > 0.0)
        {
            _2280 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2280 = frontier_phi_35_30_ladder;
        }
        float _2282 = isnan(_2037) ? _1837 : (isnan(_1837) ? _2037 : min(_1837, _2037));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1803) + _1792;
        float _2288 = (_2283 * _1806) + _1796;
        float _2289 = (_2283 * _1809) + _1800;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2290;
        float _2294 = _2290 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 > _2294) || ((_2288 < _2292) || ((_2287 < _2292) || (_2287 > _2294))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2289, cbModelParam._m0[9u].z, fma(_2288, cbModelParam._m0[9u].y, _2287 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2289, cbModelParam._m0[10u].z, fma(_2288, cbModelParam._m0[10u].y, _2287 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2289, cbModelParam._m0[11u].z, fma(_2288, cbModelParam._m0[11u].y, _2287 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_13_35_ladder = _2413.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2413.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2413.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_13_35_ladder_2;
        _1827 = frontier_phi_13_35_ladder_1;
        _1829 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _782);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_998, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_998, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_998, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1901 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1904 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2042;
        if (_1898 > 0.0)
        {
            _2042 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2042 = frontier_phi_25_21_ladder;
        }
        float _2307;
        if (_1901 > 0.0)
        {
            _2307 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2307 = frontier_phi_37_32_ladder;
        }
        float _2512;
        if (_1904 > 0.0)
        {
            _2512 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2512 = frontier_phi_46_43_ladder;
        }
        float _2514 = isnan(_2307) ? _2042 : (isnan(_2042) ? _2307 : min(_2042, _2307));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1898) + _1887;
        float _2520 = (_2515 * _1901) + _1891;
        float _2521 = (_2515 * _1904) + _1895;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_22_46_ladder = _2720.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2720.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2720.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_22_46_ladder_2;
        _1925 = frontier_phi_22_46_ladder_1;
        _1927 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1834);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1939 = ((((1.0 - _958) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_958 * _945)) * _929;
    float _1940 = _1939 * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1941 = _1939 * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1942 = _1939 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    uvec4 _1961 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1963 = _1961.x * 14u;
    uint _1964 = _1963 + 13u;
    float _1971 = _929 + (-1.0);
    float _1976 = (cbLight._m0[_1964].x * _1971) + 1.0;
    float _1977 = (cbLight._m0[_1964].y * _1971) + 1.0;
    float _1978 = (cbLight._m0[_1964].z * _1971) + 1.0;
    float _1979 = (cbLight._m0[_1964].w * _1971) + 1.0;
    uint _1980 = _1963 + 5u;
    float _1986 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1990 = _1963 + 4u;
    float _1996 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _2000 = _1963 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_779, _780, _781));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_779, _780, _781));
    float _4146 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4157 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1980].x * _1986) * _2021) + ((cbLight._m0[_1990].x * _1996) * _2019);
    float _2029 = ((_1986 * cbLight._m0[_1980].y) * _2021) + ((_1996 * cbLight._m0[_1990].y) * _2019);
    float _2030 = ((_1986 * cbLight._m0[_1980].z) * _2021) + ((_1996 * cbLight._m0[_1990].z) * _2019);
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1963 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2047;
    float _2049;
    float _2051;
    if (_2036)
    {
        _2047 = _2028;
        _2049 = _2029;
        _2051 = _2030;
    }
    else
    {
        uint _2055 = _1963 + 6u;
        float _2071 = (dot(vec3(cbLight._m0[_1963 + 2u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _4168 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _2074 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2047 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _2028;
        _2049 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _2029;
        _2051 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _2030;
    }
    bool _2054 = _2034.y == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_2054)
    {
        _2092 = _2047;
        _2094 = _2049;
        _2096 = _2051;
    }
    else
    {
        uint _2251 = _1963 + 7u;
        float _2267 = (dot(vec3(cbLight._m0[_1963 + 3u].xyz), vec3(_779, _780, _781)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4184 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2270 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2092 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2047;
        _2094 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2049;
        _2096 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2051;
    }
    uint _2099 = _1963 + 8u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _782) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1963].x + _858;
    float _2115 = cbLight._m0[_1963].y + _859;
    float _2116 = cbLight._m0[_1963].z + _860;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_1963].xyz));
    float _4200 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _4211 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2128 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2129 = dot(vec3(_779, _780, _781), vec3(_2121, _2122, _2123));
    float _4222 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2132 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2133 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2121, _2122, _2123));
    float _4233 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2137 = _2113 * _2113;
    float _2141 = ((_2132 * _2132) * (_2137 + (-1.0))) + 1.0;
    float _2152 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2153 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2128 * ((_2127 * _2153) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2153) + _2113) * _2127))) * _2127;
    float _4244 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2137 / ((_2141 * _2141) * 3.141590118408203125));
    uint _2177 = _1963 + 9u;
    float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _782) * 0.949999988079071044921875);
    float _2189 = _2188 * _2188;
    float _2190 = cbLight._m0[_2000].x + _858;
    float _2191 = cbLight._m0[_2000].y + _859;
    float _2192 = cbLight._m0[_2000].z + _860;
    float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
    float _2197 = _2196 * _2190;
    float _2198 = _2196 * _2191;
    float _2199 = _2196 * _2192;
    float _2200 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2000].xyz));
    float _4255 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2204 = dot(vec3(_779, _780, _781), vec3(_2197, _2198, _2199));
    float _4266 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2208 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2197, _2198, _2199));
    float _4277 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = _2189 * _2189;
    float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
    float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2226 = 1.0 - _2189;
    float _2236 = (0.5 / (((_2128 * ((_2203 * _2226) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2226) + _2189) * _2203))) * _2203;
    float _4288 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2238 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
    float _2248 = (((_2225 * cbLight._m0[_2177].x) * _2238) * _1986) + (((_2152 * cbLight._m0[_2099].x) * _2166) * _1996);
    float _2249 = (((_2225 * cbLight._m0[_2177].y) * _2238) * _1986) + (((_2152 * cbLight._m0[_2099].y) * _2166) * _1996);
    float _2250 = (((_2225 * cbLight._m0[_2177].z) * _2238) * _1986) + (((_2152 * cbLight._m0[_2099].z) * _2166) * _1996);
    float _2312;
    float _2314;
    float _2316;
    if (_2036)
    {
        _2312 = _2248;
        _2314 = _2249;
        _2316 = _2250;
    }
    else
    {
        uint _2318 = _1963 + 2u;
        uint _2322 = _1963 + 10u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _782) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _858;
        float _2339 = cbLight._m0[_2318].y + _859;
        float _2340 = cbLight._m0[_2318].z + _860;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2318].xyz));
        float _4299 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2352 = dot(vec3(_779, _780, _781), vec3(_2345, _2346, _2347));
        float _4310 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4321 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2374 = 1.0 - _2337;
        float _2384 = (0.5 / (((_2128 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2374) + _2337) * _2351))) * _2351;
        float _4332 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2312 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2387) + _2248;
        _2314 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2387) + _2249;
        _2316 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2387) + _2250;
    }
    float _2422;
    float _2424;
    float _2426;
    if (_2054)
    {
        _2422 = _2312;
        _2424 = _2314;
        _2426 = _2316;
    }
    else
    {
        uint _2433 = _1963 + 3u;
        uint _2437 = _1963 + 11u;
        float _2451 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2433].w)) * _782) * 0.949999988079071044921875);
        float _2452 = _2451 * _2451;
        float _2453 = cbLight._m0[_2433].x + _858;
        float _2454 = cbLight._m0[_2433].y + _859;
        float _2455 = cbLight._m0[_2433].z + _860;
        float _2459 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
        float _2460 = _2459 * _2453;
        float _2461 = _2459 * _2454;
        float _2462 = _2459 * _2455;
        float _2463 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2433].xyz));
        float _4348 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2466 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2467 = dot(vec3(_779, _780, _781), vec3(_2460, _2461, _2462));
        float _4359 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2471 = dot(vec3(cbLight._m0[_2433].xyz), vec3(_2460, _2461, _2462));
        float _4370 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2475 = _2452 * _2452;
        float _2479 = ((_2470 * _2470) * (_2475 + (-1.0))) + 1.0;
        float _2488 = (exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2489 = 1.0 - _2452;
        float _2499 = (0.5 / (((_2128 * ((_2466 * _2489) + _2452)) + 9.9999999392252902907785028219223e-09) + (((_2128 * _2489) + _2452) * _2466))) * _2466;
        float _4381 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2501 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2475 / ((_2479 * _2479) * 3.141590118408203125));
        float _2502 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2422 = (((_2488 * cbLight._m0[_2437].x) * _2501) * _2502) + _2312;
        _2424 = (((_2488 * cbLight._m0[_2437].y) * _2501) * _2502) + _2314;
        _2426 = (((_2488 * cbLight._m0[_2437].z) * _2501) * _2502) + _2316;
    }
    float _2637;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    if (_1961.y == 0u)
    {
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2577;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2577;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2577;
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.x;
        uint _2604 = uint((float(_2592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2593))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2593)));
        float _2614 = (log2(_2580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2615 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        uint _2618 = uint(isnan(14.0) ? _2615 : (isnan(_2615) ? 14.0 : min(_2615, 14.0)));
        uvec4 _2623 = texelFetch(g_lightClusterGridBuffer, int(((_2618 << 2u) + (_2604 << 6u)) >> 2u));
        uint _2624 = _2623.x;
        uint _2625 = _2592.z;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((((1u << ((_2625 >> 4u) & 15u)) + 4294967295u) & _2624) == 0u) || ((_2625 & 240u) == 0u))
        {
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
        }
        else
        {
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            uint _2875 = 0u;
            uint _2884;
            bool _2885;
            for (;;)
            {
                _2884 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                _2885 = _2884 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2885)
                {
                    frontier_phi_61_pred = _2869;
                    frontier_phi_61_pred_1 = _2874;
                    frontier_phi_61_pred_2 = _2873;
                    frontier_phi_61_pred_3 = _2872;
                    frontier_phi_61_pred_4 = _2871;
                    frontier_phi_61_pred_5 = _2870;
                }
                else
                {
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    uint _2999;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2871;
                    _2996 = _2872;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2884;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    for (;;)
                    {
                        uint _3003 = uint(findLSB(_2999)) + (_2875 << 5u);
                        uint _3000 = (_2999 + 4294967295u) & _2999;
                        uint _3005 = _3003 * 48u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 3u)).x));
                        uint _3025 = (_3003 * 48u) + 4u;
                        vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 3u)).x));
                        uint _3044 = (_3003 * 48u) + 8u;
                        vec3 _3055 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x));
                        float _3059 = _3019.x - _2578;
                        float _3060 = _3019.y - _2579;
                        float _3061 = _3019.z - _2580;
                        float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                        float _3065 = inversesqrt(_3062);
                        float _3066 = _3065 * _3059;
                        float _3067 = _3065 * _3060;
                        float _3068 = _3065 * _3061;
                        float _3069 = dot(vec3(_885, _888, _891), vec3(_3066, _3067, _3068));
                        float _3074 = 1.0 - (_3062 * _3019.w);
                        float _4407 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3075 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                        float _3076 = sqrt(_3062) * _3038.w;
                        float _3079 = 1.39999997615814208984375 / (_3076 + 1.39999997615814208984375);
                        float _3080 = _3079 * _3079;
                        float _3083 = ((1.0 - _3080) * _3069) + _3080;
                        float _3086 = _3076 * _3076;
                        float _3090 = ((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3075) / ((_3086 * 0.699999988079071044921875) + 1.0);
                        float _3094 = (-0.0) - _2578;
                        float _3095 = (-0.0) - _2579;
                        float _3096 = (-0.0) - _2580;
                        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                        float _3101 = _3100 * _3094;
                        float _3102 = _3100 * _3095;
                        float _3103 = _3100 * _3096;
                        float _3111 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _945;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3101 + _3066;
                        float _3123 = _3102 + _3067;
                        float _3124 = _3103 + _3068;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_885, _888, _891), vec3(_3101, _3102, _3103));
                        float _4423 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3136 = dot(vec3(_885, _888, _891), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4434 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3079 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3069) + _3145;
                        float _4445 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4456 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0)))) / ((_3143 * _3143) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125))) * _3075;
                        _2928 = (_3090 * _3038.x) + _2996;
                        _2929 = (_3090 * _3038.y) + _2997;
                        _2930 = (_3090 * _3038.z) + _2998;
                        _2925 = (_3171 * _3055.x) + _2993;
                        _2926 = (_3171 * _3055.y) + _2994;
                        _2927 = (_3171 * _3055.z) + _2995;
                        if (_3000 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _3000;
                        }
                    }
                    frontier_phi_61_pred = _2925;
                    frontier_phi_61_pred_1 = _2930;
                    frontier_phi_61_pred_2 = _2929;
                    frontier_phi_61_pred_3 = _2928;
                    frontier_phi_61_pred_4 = _2927;
                    frontier_phi_61_pred_5 = _2926;
                }
                _2726 = frontier_phi_61_pred;
                _2736 = frontier_phi_61_pred_1;
                _2734 = frontier_phi_61_pred_2;
                _2732 = frontier_phi_61_pred_3;
                _2730 = frontier_phi_61_pred_4;
                _2728 = frontier_phi_61_pred_5;
                uint _2876 = _2875 + 1u;
                if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2869 = _2726;
                    _2870 = _2728;
                    _2871 = _2730;
                    _2872 = _2732;
                    _2873 = _2734;
                    _2874 = _2736;
                    _2875 = _2876;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
        }
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.z;
        uint _2742 = (_2740 >> 8u) & 15u;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        if (((4294967295u << _2742) & _2624) == 0u)
        {
            _2837 = _2725;
            _2839 = _2727;
            _2841 = _2729;
            _2843 = _2731;
            _2845 = _2733;
            _2847 = _2735;
        }
        else
        {
            float _2862 = inversesqrt(dot(vec3(_2578, _2579, _2580), vec3(_2578, _2579, _2580)));
            float _2863 = _2862 * _2578;
            float _2864 = _2862 * _2579;
            float _2865 = _2862 * _2580;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2742 < ((_2740 >> 12u) & 15u))
            {
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2976 = _2725;
                float _2977 = _2727;
                float _2978 = _2729;
                float _2979 = _2731;
                float _2980 = _2733;
                float _2981 = _2735;
                uint _2982 = _2742;
                uint _2991;
                bool _2992;
                for (;;)
                {
                    _2991 = texelFetch(g_lightClassification, int((((_2618 << 5u) + (_2604 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                    _2992 = _2991 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2992)
                    {
                        frontier_phi_67_pred = _2979;
                        frontier_phi_67_pred_1 = _2980;
                        frontier_phi_67_pred_2 = _2981;
                        frontier_phi_67_pred_3 = _2978;
                        frontier_phi_67_pred_4 = _2977;
                        frontier_phi_67_pred_5 = _2976;
                    }
                    else
                    {
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        float _3191 = _2978;
                        float _3192 = _2979;
                        float _3193 = _2980;
                        float _3194 = _2981;
                        uint _3195 = _2991;
                        uint _3196;
                        vec4 _3221;
                        float _3222;
                        vec4 _3237;
                        vec3 _3249;
                        vec4 _3264;
                        vec4 _3279;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3206 = ((_2982 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3195));
                            _3196 = (_3195 + 4294967295u) & _3195;
                            uint _3208 = _3206 * 40u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3222 = _3221.w;
                            uint _3224 = (_3206 * 40u) + 4u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3206 * 40u) + 8u;
                            _3249 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x));
                            uint _3251 = (_3206 * 40u) + 16u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3206 * 40u) + 20u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3206 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3206 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_2580, _3313.z, fma(_2579, _3313.y, _3313.x * _2578)) + _3313.w;
                            _3326 = !((fma(_2580, _3294.z, fma(_2579, _3294.y, _3294.x * _2578)) + _3294.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3326)
                            {
                                float _3353 = _3221.x - _2578;
                                float _3354 = _3221.y - _2579;
                                float _3355 = _3221.z - _2580;
                                float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                                float _3359 = inversesqrt(_3356);
                                float _3360 = _3359 * _3353;
                                float _3361 = _3359 * _3354;
                                float _3362 = _3359 * _3355;
                                float _3366 = 1.0 - (_3356 / (_3222 * _3222));
                                float _4467 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                                float _3371 = sqrt(_3356) * _3237.w;
                                float _3373 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                                float _3374 = _3373 * _3373;
                                float _3377 = ((1.0 - _3374) * dot(vec3(_3360, _3361, _3362), vec3(_885, _888, _891))) + _3374;
                                float _3380 = _3371 * _3371;
                                float _3384 = (fma(_2580, _3264.z, fma(_2579, _3264.y, _3264.x * _2578)) + _3264.w) / _3325;
                                float _3385 = (fma(_2580, _3279.z, fma(_2579, _3279.y, _3279.x * _2578)) + _3279.w) / _3325;
                                float _3389 = 1.0 - dot(vec2(_3384, _3385), vec2(_3384, _3385));
                                float _4483 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3391 = _3390 * (((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3367) / ((_3380 * 0.699999988079071044921875) + 1.0));
                                float _3403 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                                float _3404 = 1.0 - _945;
                                float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                                float _3412 = _3411 * _3411;
                                float _3413 = _3412 * _3412;
                                float _3414 = _3360 - _2863;
                                float _3415 = _3361 - _2864;
                                float _3416 = _3362 - _2865;
                                float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                                float _3424 = dot(vec3(_885, _888, _891), vec3((-0.0) - _2863, (-0.0) - _2864, (-0.0) - _2865));
                                float _4494 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3428 = dot(vec3(_885, _888, _891), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                                float _4505 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                                float _3436 = _3373 * _3412;
                                float _3437 = _3436 * _3436;
                                float _3443 = ((1.0 - _3437) * dot(vec3(_885, _888, _891), vec3(_3360, _3361, _3362))) + _3437;
                                float _4516 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3445 = 1.0 - _3412;
                                float _3455 = (0.5 / (((_3444 * ((_3427 * _3445) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3412) * _3427))) * _3444;
                                float _4527 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3465 = (_3390 * _3367) * (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3435 * _3435) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3465 * _3249.x;
                                frontier_phi_73_pred_1 = _3465 * _3249.y;
                                frontier_phi_73_pred_2 = _3391 * _3237.z;
                                frontier_phi_73_pred_3 = _3391 * _3237.y;
                                frontier_phi_73_pred_4 = _3391 * _3237.x;
                                frontier_phi_73_pred_5 = _3465 * _3249.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3469 = frontier_phi_73_pred;
                            _3470 = frontier_phi_73_pred_1;
                            _3474 = frontier_phi_73_pred_2;
                            _3473 = frontier_phi_73_pred_3;
                            _3472 = frontier_phi_73_pred_4;
                            _3471 = frontier_phi_73_pred_5;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            _3176 = _3469 + _3189;
                            _3177 = _3470 + _3190;
                            _3178 = _3471 + _3191;
                            if (_3196 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3196;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3179;
                        frontier_phi_67_pred_1 = _3180;
                        frontier_phi_67_pred_2 = _3181;
                        frontier_phi_67_pred_3 = _3178;
                        frontier_phi_67_pred_4 = _3177;
                        frontier_phi_67_pred_5 = _3176;
                    }
                    _2844 = frontier_phi_67_pred;
                    _2846 = frontier_phi_67_pred_1;
                    _2848 = frontier_phi_67_pred_2;
                    _2842 = frontier_phi_67_pred_3;
                    _2840 = frontier_phi_67_pred_4;
                    _2838 = frontier_phi_67_pred_5;
                    uint _2983 = _2982 + 1u;
                    if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2976 = _2838;
                        _2977 = _2840;
                        _2978 = _2842;
                        _2979 = _2844;
                        _2980 = _2846;
                        _2981 = _2848;
                        _2982 = _2983;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2846;
                frontier_phi_55_56_ladder_1 = _2848;
                frontier_phi_55_56_ladder_2 = _2844;
                frontier_phi_55_56_ladder_3 = _2842;
                frontier_phi_55_56_ladder_4 = _2840;
                frontier_phi_55_56_ladder_5 = _2838;
            }
            else
            {
                frontier_phi_55_56_ladder = _2733;
                frontier_phi_55_56_ladder_1 = _2735;
                frontier_phi_55_56_ladder_2 = _2731;
                frontier_phi_55_56_ladder_3 = _2729;
                frontier_phi_55_56_ladder_4 = _2727;
                frontier_phi_55_56_ladder_5 = _2725;
            }
            _2837 = frontier_phi_55_56_ladder_5;
            _2839 = frontier_phi_55_56_ladder_4;
            _2841 = frontier_phi_55_56_ladder_3;
            _2843 = frontier_phi_55_56_ladder_2;
            _2845 = frontier_phi_55_56_ladder;
            _2847 = frontier_phi_55_56_ladder_1;
        }
        float _2852 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2637 = (_2852 * _2843) + _2092;
        _2639 = (_2852 * _2845) + _2094;
        _2641 = (_2852 * _2847) + _2096;
        _2643 = ((_2837 * 0.039999999105930328369140625) * _2852) + _2422;
        _2645 = ((_2839 * 0.039999999105930328369140625) * _2852) + _2424;
        _2647 = ((_2841 * 0.039999999105930328369140625) * _2852) + _2426;
    }
    else
    {
        _2637 = _2092;
        _2639 = _2094;
        _2641 = _2096;
        _2643 = _2422;
        _2645 = _2424;
        _2647 = _2426;
    }
    float _4543 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4554 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4565 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    uint _2667 = _249 + 6u;
    float _2675 = _866 / cbSceneParam._m0[86u].x;
    float _2676 = _867 / cbSceneParam._m0[86u].y;
    vec4 _2690 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2692 = _2690.x;
    float _2693 = _2690.y;
    float _2694 = _2690.z;
    float _2695 = _2690.w;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _2750 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _2751 = _2750 / _800;
        float _2762 = _2751 * _851;
        float _2763 = _852 * _2751;
        float _2764 = (-0.0) - _2763;
        float _2765 = _2751 * _853;
        float _2767 = (cbSceneParam._m0[77u].w * _2764) / _2750;
        float _2768 = _2767 + cbSceneParam._m0[79u].w;
        float _2769 = cbSceneParam._m0[79u].w - _2763;
        float _2775 = sqrt(((_2762 * _2762) + (_2763 * _2763)) + (_2765 * _2765));
        float _2778 = (1.0 - (cbSceneParam._m0[77u].w / _2750)) * _2775;
        float _2783 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2785 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2938;
        if (abs((_2764 - _2767) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2938 = ((((_2768 > 0.0) ? exp2(_2783 * _2768) : (2.0 - exp2(_2785 * _2768))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2778;
        }
        else
        {
            float _2898 = 1.0 / cbSceneParam._m0[80u].x;
            float _2899 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : max(_2768, _2769));
            float _2900 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : min(_2768, _2769));
            float _2909 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : min(_2899, 0.0));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            _2938 = ((abs(_2775 / _2764) * cbSceneParam._m0[80u].y) * ((((_2909 - _2910) * 2.0) - ((exp2(_2783 * (isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0)))) - exp2(_2783 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))))) * _2898)) - ((exp2(_2785 * _2909) - exp2(_2785 * _2910)) * _2898))) + (_2778 * cbSceneParam._m0[80u].z);
        }
        vec4 _2940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2675, _2676, 1.0), 0.0);
        float _2949 = exp2((_2938 * (-1.44269502162933349609375)) * (1.0 - _2940.w));
        float _2950 = log2(_2949);
        float _2966 = log2(_2695);
        _2787 = (exp2(_2966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].x)) * _2940.x) / cbSceneParam._m0[78u].x)) + _2692;
        _2789 = (exp2(_2966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].y)) * _2940.y) / cbSceneParam._m0[78u].y)) + _2693;
        _2791 = (exp2(_2966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2950 * cbSceneParam._m0[78u].z)) * _2940.z) / cbSceneParam._m0[78u].z)) + _2694;
        _2793 = _2949 * _2695;
    }
    else
    {
        _2787 = _2692;
        _2789 = _2693;
        _2791 = _2694;
        _2793 = _2695;
    }
    float _2805 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2806 = _2805 == 3.0;
    float _2807 = log2(_2793);
    float _2814 = exp2(_2807 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2637 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _929))) + ((_2643 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2815 = exp2(_2807 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2639 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _929))) + ((_2645 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2816 = exp2(_2807 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2641 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _929))) + ((_2647 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1734)) * cbPerFrame._m0[3u].x));
    float _2825 = (_2805 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2825 * (_2806 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.y = _2825 * (_2806 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2789)));
    SV_Target.z = _2825 * (_2806 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.w = cbInstanceData._m0[_2667].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2667].w;
}


