#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1058;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _233 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _233 + 1u;
    uint _242 = _233 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_233].x * cbInstanceData._m0[_233].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _302 = _298.z;
    float _307 = (_298.x * 2.0) + (-1.0);
    float _309 = (_298.y * 2.0) + (-1.0);
    float _310 = dot(vec2(_307, _309), vec2(_307, _309));
    float _3368 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _316 = sqrt(1.0 - (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))));
    vec4 _333 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _335 = _333.x;
    float _336 = 1.0 - _335;
    float _345 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _348 = ((isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : min(_345, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _357 = (_348 - ((((((_335 - _336) * cbMtdParam._m0[24u].z) + _336) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _348))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3389 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _365 = (_358 * (cbMtdParam._m0[17u].x - _278)) + _278;
    float _366 = (_358 * (cbMtdParam._m0[17u].y - _279)) + _279;
    float _367 = (_358 * (cbMtdParam._m0[17u].z - _280)) + _280;
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _252) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _253) + cbTextureTilingScale._m0[19u].w));
    float _382 = _380.x;
    float _383 = 1.0 - _382;
    float _412 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_382 - _383) * cbMtdParam._m0[24u].w) + _383) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3400 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _421 = ((((cbMtdParam._m0[10u].x - _365) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _413) + _365;
    float _422 = ((((cbMtdParam._m0[10u].y - _366) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _413) + _366;
    float _423 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _367)) * _413) + _367;
    vec4 _437 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _444 = (_437.x * 2.0) + (-1.0);
    float _445 = (_437.y * 2.0) + (-1.0);
    float _446 = dot(vec2(_444, _445), vec2(_444, _445));
    float _3411 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _454 = (_358 * (_437.z - _302)) + _302;
    float _457 = ((cbMtdParam._m0[23u].y - _454) * _413) + _454;
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _252) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _253) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _485 = (_479.x * 2.0) + (-1.0);
    float _486 = (_479.y * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _3422 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _504 = (((_444 - _307) + (cbMtdParam._m0[21u].x * _307)) * _358) + _307;
    float _505 = (((_445 - _309) + (cbMtdParam._m0[21u].x * _309)) * _358) + _309;
    float _506 = (_358 * (sqrt(1.0 - (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) - _316)) + _316;
    float _517 = (((_485 - _504) + (_504 * cbMtdParam._m0[22u].z)) * _413) + _504;
    float _518 = (((_486 - _505) + (_505 * cbMtdParam._m0[22u].z)) * _413) + _505;
    float _519 = ((sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) - _506) * _413) + _506;
    float _521 = cbMtdParam._m0[22u].x + _298.w;
    float _524 = fma(_519, _220 * NORMAL.x, fma(_518, _227 * TANGENT.x, (_213 * _205) * _517));
    float _527 = fma(_519, _220 * NORMAL.y, fma(_518, _227 * TANGENT.y, (_213 * _206) * _517));
    float _530 = fma(_519, _220 * NORMAL.z, fma(_518, _227 * TANGENT.z, (_213 * _207) * _517));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3433 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _538 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3455 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _3466 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3477 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _556 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _596 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _606 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _596);
    float _607 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _596);
    float _608 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _596);
    float _612 = inversesqrt(dot(vec3(_606, _607, _608), vec3(_606, _607, _608)));
    float _613 = _606 * _612;
    float _614 = _607 * _612;
    float _615 = _608 * _612;
    float _621 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _622 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _643 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _646 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _649 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _663 = (_233 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _669 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_663].x;
    float _670 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_663].y;
    float _671 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_663].z;
    float _3488 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    vec4 _683 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _621, cbSceneParam._m0[86u].y * _622));
    float _687 = ((isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * TEXCOORD_5.w) * _683.x;
    float _688 = dot(vec3(_535, _536, _537), vec3(_613, _614, _615));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _535) - _613;
    float _696 = (_691 * _536) - _614;
    float _697 = (_691 * _537) - _615;
    float _701 = abs(dot(vec3(_613, _614, _615), vec3(_535, _536, _537)));
    float _3521 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _703 = sqrt(_538);
    float _716 = exp2((_703 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_703 * 3.0));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1057;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _782 = fma(_756, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748));
        float _786 = fma(_756, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748));
        float _790 = fma(_756, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748));
        float _815 = _748 + _535;
        float _816 = _752 + _536;
        float _817 = _756 + _537;
        float _827 = fma(_817, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815)) - _782;
        float _828 = fma(_817, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815)) - _786;
        float _829 = fma(_817, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815)) - _790;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_782 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_786 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[34u].z) + ((((((_790 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _885 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_851.x + (-0.5));
        float _887 = _885 * (_851.y + (-0.5));
        float _888 = _885 * (_851.z + (-0.5));
        float _895 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_858.x + (-0.5));
        float _897 = _895 * (_858.y + (-0.5));
        float _898 = _895 * (_858.z + (-0.5));
        float _905 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_865.x + (-0.5));
        float _907 = _905 * (_865.y + (-0.5));
        float _908 = _905 * (_865.z + (-0.5));
        float _915 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_872.x + (-0.5));
        float _917 = _915 * (_872.y + (-0.5));
        float _918 = _915 * (_872.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _939 = (dot(vec3(_535, _536, _537), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _949 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3569 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_951 + 1.0))) + _956) * _919;
        float _966 = _887 * 0.5;
        float _967 = _897 * 0.5;
        float _968 = _907 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_535, _536, _537), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3602 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_993 + 1.0))) + _998) * _920;
        float _1008 = _888 * 0.5;
        float _1009 = _898 * 0.5;
        float _1010 = _908 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_535, _536, _537), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3635 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1035 + 1.0))) + _1040) * _921;
        _1057 = _888;
        _1059 = _887;
        _1060 = _886;
        _1061 = _898;
        _1062 = _897;
        _1063 = _896;
        _1064 = _908;
        _1065 = _907;
        _1066 = _906;
        _1067 = _921;
        _1068 = _920;
        _1069 = _919;
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _1058;
        _1059 = _1058;
        _1060 = _1058;
        _1061 = _1058;
        _1062 = _1058;
        _1063 = _1058;
        _1064 = _1058;
        _1065 = _1058;
        _1066 = _1058;
        _1067 = _1058;
        _1068 = _1058;
        _1069 = _1058;
        _1070 = 0.0;
        _1071 = 0.0;
        _1072 = 0.0;
    }
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1097 = fma(_756, cbModelParam._m0[30u].z, fma(_752, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748));
        float _1101 = fma(_756, cbModelParam._m0[31u].z, fma(_752, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748));
        float _1105 = fma(_756, cbModelParam._m0[32u].z, fma(_752, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748));
        float _1128 = _748 + _535;
        float _1129 = _752 + _536;
        float _1130 = _756 + _537;
        float _1140 = fma(_1130, cbModelParam._m0[30u].z, fma(_1129, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1128)) - _1097;
        float _1141 = fma(_1130, cbModelParam._m0[31u].z, fma(_1129, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1128)) - _1101;
        float _1142 = fma(_1130, cbModelParam._m0[32u].z, fma(_1129, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1128)) - _1105;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1097 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1101 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[35u].z) + ((((((_1105 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1196 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1163.x + (-0.5));
        float _1198 = _1196 * (_1163.y + (-0.5));
        float _1199 = _1196 * (_1163.z + (-0.5));
        float _1206 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1170.x + (-0.5));
        float _1208 = _1206 * (_1170.y + (-0.5));
        float _1209 = _1206 * (_1170.z + (-0.5));
        float _1216 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1177.x + (-0.5));
        float _1218 = _1216 * (_1177.y + (-0.5));
        float _1219 = _1216 * (_1177.z + (-0.5));
        float _1226 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1184.x + (-0.5));
        float _1228 = _1226 * (_1184.y + (-0.5));
        float _1229 = _1226 * (_1184.z + (-0.5));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = _1197 * 0.5;
        float _1234 = _1207 * 0.5;
        float _1235 = _1217 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_535, _536, _537), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3698 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1260 + 1.0))) + _1265) * _1230;
        float _1275 = _1198 * 0.5;
        float _1276 = _1208 * 0.5;
        float _1277 = _1218 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_535, _536, _537), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3731 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1302 + 1.0))) + _1307) * _1231;
        float _1317 = _1199 * 0.5;
        float _1318 = _1209 * 0.5;
        float _1319 = _1219 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_535, _536, _537), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _3764 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1344 + 1.0))) + _1349) * _1232;
        _1366 = _1199;
        _1367 = _1198;
        _1368 = _1197;
        _1369 = _1209;
        _1370 = _1208;
        _1371 = _1207;
        _1372 = _1219;
        _1373 = _1218;
        _1374 = _1217;
        _1375 = _1232;
        _1376 = _1231;
        _1377 = _1230;
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1058;
        _1367 = _1058;
        _1368 = _1058;
        _1369 = _1058;
        _1370 = _1058;
        _1371 = _1058;
        _1372 = _1058;
        _1373 = _1058;
        _1374 = _1058;
        _1375 = _1058;
        _1376 = _1058;
        _1377 = _1058;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1070)) + _1070;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1071)) + _1071;
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1072)) + _1072;
    float _1413 = fma(_1392, cbSceneParam._m0[89u].z, fma(_1391, cbSceneParam._m0[89u].y, _1390 * cbSceneParam._m0[89u].x));
    float _1416 = fma(_1392, cbSceneParam._m0[90u].z, fma(_1391, cbSceneParam._m0[90u].y, _1390 * cbSceneParam._m0[90u].x));
    float _1419 = fma(_1392, cbSceneParam._m0[91u].z, fma(_1391, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1390));
    float _1434 = _695 * 0.5;
    float _1435 = _696 * 0.5;
    float _1436 = _697 * 0.5;
    float _1437 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1440 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1443 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1477;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1450 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1057, _1061, _1064, _1067));
        float _1454 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1458 = dot(vec4(_1434, _1435, _1436, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1465 = dot(vec4(cbModelParam._m0[39u]), vec4(_1434, _1435, _1436, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1465) ? 0.0 : (isnan(0.0) ? _1465 : max(0.0, _1465))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1488;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1479 = dot(vec4(cbModelParam._m0[40u]), vec4(_1434, _1435, _1436, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1492 = (_1488 * cbModelParam._m0[1u].x) + (_1477 * (1.0 - cbModelParam._m0[1u].x));
    float _1502 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _538);
    float _1503 = isnan(_1502) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1502 : min(cbModelParam._m0[25u].z, _1502));
    float _1584;
    float _1586;
    float _1588;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1551 = fma(_756, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748)) + cbModelParam._m0[13u].w;
        float _1555 = fma(_756, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748)) + cbModelParam._m0[14u].w;
        float _1559 = fma(_756, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748)) + cbModelParam._m0[15u].w;
        float _1562 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1565 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1568 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1596;
        if (_1562 > 0.0)
        {
            _1596 = abs((1.0 - _1551) / _1562);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1551 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1596 = frontier_phi_14_12_ladder;
        }
        float _1799;
        if (_1565 > 0.0)
        {
            _1799 = abs((1.0 - _1555) / _1565);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1555 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1799 = frontier_phi_23_19_ladder;
        }
        float _2042;
        if (_1568 > 0.0)
        {
            _2042 = abs((1.0 - _1559) / _1568);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1559 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2042 = frontier_phi_35_30_ladder;
        }
        float _2044 = isnan(_1799) ? _1596 : (isnan(_1596) ? _1799 : min(_1596, _1799));
        float _2045 = isnan(_2042) ? _2044 : (isnan(_2044) ? _2042 : min(_2044, _2042));
        float _2049 = (_2045 * _1562) + _1551;
        float _2050 = (_2045 * _1565) + _1555;
        float _2051 = (_2045 * _1568) + _1559;
        float _2052 = _2045 * 9.9999997473787516355514526367188e-05;
        float _2054 = (-1.0) - _2052;
        float _2056 = _2052 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2051 > _2056) || ((_2051 < _2054) || ((_2050 > _2056) || ((_2050 < _2054) || ((_2049 < _2054) || (_2049 > _2056))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2175 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2051, cbModelParam._m0[9u].z, fma(_2050, cbModelParam._m0[9u].y, _2049 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2051, cbModelParam._m0[10u].z, fma(_2050, cbModelParam._m0[10u].y, _2049 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2051, cbModelParam._m0[11u].z, fma(_2050, cbModelParam._m0[11u].y, _2049 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_13_35_ladder = _2175.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2175.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2175.x * cbModelParam._m0[1u].y;
        }
        _1584 = frontier_phi_13_35_ladder_2;
        _1586 = frontier_phi_13_35_ladder_1;
        _1588 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1503);
        _1584 = _1572.x * cbModelParam._m0[1u].y;
        _1586 = _1572.y * cbModelParam._m0[1u].y;
        _1588 = _1572.z * cbModelParam._m0[1u].y;
    }
    float _1592 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _538);
    float _1593 = isnan(_1592) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1592 : min(cbModelParam._m0[25u].w, _1592));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_756, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_756, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_756, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1661 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1664 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1804;
        if (_1658 > 0.0)
        {
            _1804 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1804 = frontier_phi_25_21_ladder;
        }
        float _2069;
        if (_1661 > 0.0)
        {
            _2069 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2069 = frontier_phi_37_32_ladder;
        }
        float _2274;
        if (_1664 > 0.0)
        {
            _2274 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2274 = frontier_phi_46_43_ladder;
        }
        float _2276 = isnan(_2069) ? _1804 : (isnan(_1804) ? _2069 : min(_1804, _2069));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1658) + _1647;
        float _2282 = (_2277 * _1661) + _1651;
        float _2283 = (_2277 * _1664) + _1655;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2284;
        float _2287 = _2284 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2283 > _2287) || ((_2283 < _2285) || ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 < _2285) || (_2281 > _2287))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2482 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2283, cbModelParam._m0[17u].z, fma(_2282, cbModelParam._m0[17u].y, _2281 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2283, cbModelParam._m0[18u].z, fma(_2282, cbModelParam._m0[18u].y, _2281 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2283, cbModelParam._m0[19u].z, fma(_2282, cbModelParam._m0[19u].y, _2281 * cbModelParam._m0[19u].x))), _1593);
            frontier_phi_22_46_ladder = _2482.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2482.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2482.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_22_46_ladder_2;
        _1685 = frontier_phi_22_46_ladder_1;
        _1687 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1593);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1699 = ((((1.0 - _716) * ((_703 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_716 * _703)) * _687;
    float _1700 = _1699 * ((cbModelParam._m0[1u].w * (_1683 - _1584)) + _1584);
    float _1701 = _1699 * ((cbModelParam._m0[1u].w * (_1685 - _1586)) + _1586);
    float _1702 = _1699 * ((cbModelParam._m0[1u].w * (_1687 - _1588)) + _1588);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    uvec4 _1721 = floatBitsToUint(cbInstanceData._m0[_233 + 5u]);
    uint _1723 = _1721.x * 14u;
    uint _1724 = _1723 + 13u;
    float _1731 = _687 + (-1.0);
    float _1736 = (cbLight._m0[_1724].x * _1731) + 1.0;
    float _1737 = (cbLight._m0[_1724].y * _1731) + 1.0;
    float _1738 = (cbLight._m0[_1724].z * _1731) + 1.0;
    float _1739 = (cbLight._m0[_1724].w * _1731) + 1.0;
    uint _1740 = _1723 + 5u;
    float _1746 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1750 = _1723 + 4u;
    float _1757 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
    uint _1761 = _1723 | 1u;
    float _1772 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_535, _536, _537));
    float _1775 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_535, _536, _537));
    float _3900 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _3911 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1780 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1782 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _1789 = ((cbLight._m0[_1740].x * _1746) * _1782) + ((cbLight._m0[_1750].x * _1757) * _1780);
    float _1790 = ((_1746 * cbLight._m0[_1740].y) * _1782) + ((_1757 * cbLight._m0[_1750].y) * _1780);
    float _1791 = ((_1746 * cbLight._m0[_1740].z) * _1782) + ((_1757 * cbLight._m0[_1750].z) * _1780);
    uvec4 _1796 = floatBitsToUint(cbLight._m0[_1723 + 12u]);
    bool _1798 = _1796.x == 0u;
    float _1809;
    float _1811;
    float _1813;
    if (_1798)
    {
        _1809 = _1789;
        _1811 = _1790;
        _1813 = _1791;
    }
    else
    {
        uint _1817 = _1723 + 6u;
        float _1833 = (dot(vec3(cbLight._m0[_1723 + 2u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _1834 = _1833 * _1833;
        float _3922 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1836 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _1809 = (((cbLight._m0[_1817].x * 0.3183098733425140380859375) * _1835) * _1836) + _1789;
        _1811 = (((cbLight._m0[_1817].y * 0.3183098733425140380859375) * _1835) * _1836) + _1790;
        _1813 = (((cbLight._m0[_1817].z * 0.3183098733425140380859375) * _1835) * _1836) + _1791;
    }
    bool _1816 = _1796.y == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1816)
    {
        _1854 = _1809;
        _1856 = _1811;
        _1858 = _1813;
    }
    else
    {
        uint _2013 = _1723 + 7u;
        float _2029 = (dot(vec3(cbLight._m0[_1723 + 3u].xyz), vec3(_535, _536, _537)) * 0.5) + 0.5;
        float _2030 = _2029 * _2029;
        float _3938 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2031 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _2032 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1854 = (((cbLight._m0[_2013].x * 0.3183098733425140380859375) * _2031) * _2032) + _1809;
        _1856 = (((cbLight._m0[_2013].y * 0.3183098733425140380859375) * _2031) * _2032) + _1811;
        _1858 = (((cbLight._m0[_2013].z * 0.3183098733425140380859375) * _2031) * _2032) + _1813;
    }
    uint _1861 = _1723 + 8u;
    float _1874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1723].w)) * _538) * 0.949999988079071044921875);
    float _1875 = _1874 * _1874;
    float _1876 = cbLight._m0[_1723].x + _613;
    float _1877 = cbLight._m0[_1723].y + _614;
    float _1878 = cbLight._m0[_1723].z + _615;
    float _1882 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
    float _1883 = _1882 * _1876;
    float _1884 = _1882 * _1877;
    float _1885 = _1882 * _1878;
    float _1886 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1723].xyz));
    float _3954 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _1890 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _1891 = dot(vec3(_535, _536, _537), vec3(_1883, _1884, _1885));
    float _3976 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _1895 = dot(vec3(cbLight._m0[_1723].xyz), vec3(_1883, _1884, _1885));
    float _3987 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1899 = _1875 * _1875;
    float _1903 = ((_1894 * _1894) * (_1899 + (-1.0))) + 1.0;
    float _1914 = (exp2(log2(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1915 = 1.0 - _1875;
    float _1926 = (0.5 / (((_1890 * ((_1889 * _1915) + _1875)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1915) + _1875) * _1889))) * _1889;
    float _3998 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1928 = (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1899 / ((_1903 * _1903) * 3.141590118408203125));
    uint _1939 = _1723 + 9u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _538) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1761].x + _613;
    float _1953 = cbLight._m0[_1761].y + _614;
    float _1954 = cbLight._m0[_1761].z + _615;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1761].xyz));
    float _4009 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _1966 = dot(vec3(_535, _536, _537), vec3(_1959, _1960, _1961));
    float _4020 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _1970 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1959, _1960, _1961));
    float _4031 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1974 = _1951 * _1951;
    float _1978 = ((_1969 * _1969) * (_1974 + (-1.0))) + 1.0;
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1988 = 1.0 - _1951;
    float _1998 = (0.5 / (((_1890 * ((_1965 * _1988) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _1988) + _1951) * _1965))) * _1965;
    float _4042 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1974 / ((_1978 * _1978) * 3.141590118408203125));
    float _2010 = (((_1987 * cbLight._m0[_1939].x) * _2000) * _1746) + (((_1914 * cbLight._m0[_1861].x) * _1928) * _1757);
    float _2011 = (((_1987 * cbLight._m0[_1939].y) * _2000) * _1746) + (((_1914 * cbLight._m0[_1861].y) * _1928) * _1757);
    float _2012 = (((_1987 * cbLight._m0[_1939].z) * _2000) * _1746) + (((_1914 * cbLight._m0[_1861].z) * _1928) * _1757);
    float _2074;
    float _2076;
    float _2078;
    if (_1798)
    {
        _2074 = _2010;
        _2076 = _2011;
        _2078 = _2012;
    }
    else
    {
        uint _2080 = _1723 + 2u;
        uint _2084 = _1723 + 10u;
        float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _538) * 0.949999988079071044921875);
        float _2099 = _2098 * _2098;
        float _2100 = cbLight._m0[_2080].x + _613;
        float _2101 = cbLight._m0[_2080].y + _614;
        float _2102 = cbLight._m0[_2080].z + _615;
        float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
        float _2107 = _2106 * _2100;
        float _2108 = _2106 * _2101;
        float _2109 = _2106 * _2102;
        float _2110 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2080].xyz));
        float _4053 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _2114 = dot(vec3(_535, _536, _537), vec3(_2107, _2108, _2109));
        float _4064 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2117 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _2118 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2107, _2108, _2109));
        float _4075 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
        float _2122 = _2099 * _2099;
        float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
        float _2135 = (exp2(log2(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2136 = 1.0 - _2099;
        float _2146 = (0.5 / (((_1890 * ((_2113 * _2136) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2136) + _2099) * _2113))) * _2113;
        float _4086 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
        _2074 = (((_2135 * cbLight._m0[_2084].x) * _2148) * _2149) + _2010;
        _2076 = (((_2135 * cbLight._m0[_2084].y) * _2148) * _2149) + _2011;
        _2078 = (((_2135 * cbLight._m0[_2084].z) * _2148) * _2149) + _2012;
    }
    float _2184;
    float _2186;
    float _2188;
    if (_1816)
    {
        _2184 = _2074;
        _2186 = _2076;
        _2188 = _2078;
    }
    else
    {
        uint _2195 = _1723 + 3u;
        uint _2199 = _1723 + 11u;
        float _2213 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _538) * 0.949999988079071044921875);
        float _2214 = _2213 * _2213;
        float _2215 = cbLight._m0[_2195].x + _613;
        float _2216 = cbLight._m0[_2195].y + _614;
        float _2217 = cbLight._m0[_2195].z + _615;
        float _2221 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
        float _2222 = _2221 * _2215;
        float _2223 = _2221 * _2216;
        float _2224 = _2221 * _2217;
        float _2225 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2195].xyz));
        float _4102 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2228 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2229 = dot(vec3(_535, _536, _537), vec3(_2222, _2223, _2224));
        float _4113 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2233 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2222, _2223, _2224));
        float _4124 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2237 = _2214 * _2214;
        float _2241 = ((_2232 * _2232) * (_2237 + (-1.0))) + 1.0;
        float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2251 = 1.0 - _2214;
        float _2261 = (0.5 / (((_1890 * ((_2228 * _2251) + _2214)) + 9.9999999392252902907785028219223e-09) + (((_1890 * _2251) + _2214) * _2228))) * _2228;
        float _4135 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2263 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2237 / ((_2241 * _2241) * 3.141590118408203125));
        float _2264 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2184 = (((_2250 * cbLight._m0[_2199].x) * _2263) * _2264) + _2074;
        _2186 = (((_2250 * cbLight._m0[_2199].y) * _2263) * _2264) + _2076;
        _2188 = (((_2250 * cbLight._m0[_2199].z) * _2263) * _2264) + _2078;
    }
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_1721.y == 0u)
    {
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2339;
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2339;
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2339;
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _622) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _621) / _2355)));
        float _2376 = (log2(_2342 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
        }
        else
        {
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2648)
                {
                    frontier_phi_61_pred = _2632;
                    frontier_phi_61_pred_1 = _2637;
                    frontier_phi_61_pred_2 = _2636;
                    frontier_phi_61_pred_3 = _2635;
                    frontier_phi_61_pred_4 = _2634;
                    frontier_phi_61_pred_5 = _2633;
                }
                else
                {
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    uint _2762;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2647;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    for (;;)
                    {
                        uint _2766 = uint(findLSB(_2762)) + (_2638 << 5u);
                        uint _2763 = (_2762 + 4294967295u) & _2762;
                        uint _2768 = _2766 * 48u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2768)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2768 + 3u)).x));
                        uint _2788 = (_2766 * 48u) + 4u;
                        vec4 _2801 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 3u)).x));
                        uint _2807 = (_2766 * 48u) + 8u;
                        vec3 _2818 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x));
                        float _2822 = _2782.x - _2340;
                        float _2823 = _2782.y - _2341;
                        float _2824 = _2782.z - _2342;
                        float _2825 = dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824));
                        float _2828 = inversesqrt(_2825);
                        float _2829 = _2828 * _2822;
                        float _2830 = _2828 * _2823;
                        float _2831 = _2828 * _2824;
                        float _2832 = dot(vec3(_643, _646, _649), vec3(_2829, _2830, _2831));
                        float _2837 = 1.0 - (_2825 * _2782.w);
                        float _4161 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                        float _2839 = sqrt(_2825) * _2801.w;
                        float _2842 = 1.39999997615814208984375 / (_2839 + 1.39999997615814208984375);
                        float _2843 = _2842 * _2842;
                        float _2846 = ((1.0 - _2843) * _2832) + _2843;
                        float _2849 = _2839 * _2839;
                        float _2853 = ((isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * _2838) / ((_2849 * 0.699999988079071044921875) + 1.0);
                        float _2857 = (-0.0) - _2340;
                        float _2858 = (-0.0) - _2341;
                        float _2859 = (-0.0) - _2342;
                        float _2863 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2874 = exp2(log2(1.0 / ((_2849 * 3.5) + 5.0)) * 0.25);
                        float _2875 = 1.0 - _703;
                        float _2882 = sqrt(1.0 - ((1.0 - (_2875 * _2875)) * (1.0 - (_2874 * _2874))));
                        float _2883 = _2882 * _2882;
                        float _2884 = _2883 * _2883;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2887 = _2866 + _2831;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2895 = dot(vec3(_643, _646, _649), vec3(_2864, _2865, _2866));
                        float _4177 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2899 = dot(vec3(_643, _646, _649), vec3(_2891 * _2885, _2891 * _2886, _2891 * _2887));
                        float _4188 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2902 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2906 = ((_2902 * _2902) * (_2884 + (-1.0))) + 1.0;
                        float _2907 = _2842 * _2883;
                        float _2908 = _2907 * _2907;
                        float _2911 = ((1.0 - _2908) * _2832) + _2908;
                        float _4199 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2912 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2913 = 1.0 - _2883;
                        float _2923 = (0.5 / (((_2912 * ((_2898 * _2913) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2912 * _2913) + _2883) * _2898))) * _2912;
                        float _4210 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2934 = (((_2884 * 3.1415927410125732421875) * (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) / ((_2906 * _2906) * ((_2849 * 2.1991131305694580078125) + 3.141590118408203125))) * _2838;
                        _2691 = (_2853 * _2801.x) + _2759;
                        _2692 = (_2853 * _2801.y) + _2760;
                        _2693 = (_2853 * _2801.z) + _2761;
                        _2688 = (_2934 * _2818.x) + _2756;
                        _2689 = (_2934 * _2818.y) + _2757;
                        _2690 = (_2934 * _2818.z) + _2758;
                        if (_2763 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2763;
                        }
                    }
                    frontier_phi_61_pred = _2688;
                    frontier_phi_61_pred_1 = _2693;
                    frontier_phi_61_pred_2 = _2692;
                    frontier_phi_61_pred_3 = _2691;
                    frontier_phi_61_pred_4 = _2690;
                    frontier_phi_61_pred_5 = _2689;
                }
                _2488 = frontier_phi_61_pred;
                _2498 = frontier_phi_61_pred_1;
                _2496 = frontier_phi_61_pred_2;
                _2494 = frontier_phi_61_pred_3;
                _2492 = frontier_phi_61_pred_4;
                _2490 = frontier_phi_61_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2488;
                    _2633 = _2490;
                    _2634 = _2492;
                    _2635 = _2494;
                    _2636 = _2496;
                    _2637 = _2498;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
        }
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.z;
        uint _2504 = (_2502 >> 8u) & 15u;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((4294967295u << _2504) & _2386) == 0u)
        {
            _2600 = _2487;
            _2602 = _2489;
            _2604 = _2491;
            _2606 = _2493;
            _2608 = _2495;
            _2610 = _2497;
        }
        else
        {
            float _2625 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
            float _2626 = _2625 * _2340;
            float _2627 = _2625 * _2341;
            float _2628 = _2625 * _2342;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2504 < ((_2502 >> 12u) & 15u))
            {
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2739 = _2487;
                float _2740 = _2489;
                float _2741 = _2491;
                float _2742 = _2493;
                float _2743 = _2495;
                float _2744 = _2497;
                uint _2745 = _2504;
                uint _2754;
                bool _2755;
                for (;;)
                {
                    _2754 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2745 << 2u)) >> 2u)).x;
                    _2755 = _2754 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2755)
                    {
                        frontier_phi_67_pred = _2742;
                        frontier_phi_67_pred_1 = _2743;
                        frontier_phi_67_pred_2 = _2744;
                        frontier_phi_67_pred_3 = _2741;
                        frontier_phi_67_pred_4 = _2740;
                        frontier_phi_67_pred_5 = _2739;
                    }
                    else
                    {
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        float _2957 = _2744;
                        uint _2958 = _2754;
                        uint _2959;
                        vec4 _2984;
                        float _2985;
                        vec4 _3000;
                        vec3 _3012;
                        vec4 _3028;
                        vec4 _3044;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2969 = ((_2745 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2958));
                            _2959 = (_2958 + 4294967295u) & _2958;
                            uint _2971 = _2969 * 40u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            _2985 = _2984.w;
                            uint _2987 = (_2969 * 40u) + 4u;
                            _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3002 = (_2969 * 40u) + 8u;
                            _3012 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x));
                            uint _3015 = (_2969 * 40u) + 16u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3031 = (_2969 * 40u) + 20u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_2969 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2969 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2342, _3078.z, fma(_2341, _3078.y, _3078.x * _2340)) + _3078.w;
                            _3091 = !((fma(_2342, _3059.z, fma(_2341, _3059.y, _3059.x * _2340)) + _3059.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2984.x - _2340;
                                float _3119 = _2984.y - _2341;
                                float _3120 = _2984.z - _2342;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2985 * _2985));
                                float _4221 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                                float _3136 = sqrt(_3121) * _3000.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_643, _646, _649))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2342, _3028.z, fma(_2341, _3028.y, _3028.x * _2340)) + _3028.w) / _3090;
                                float _3150 = (fma(_2342, _3044.z, fma(_2341, _3044.y, _3044.x * _2340)) + _3044.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4237 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _703;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2626;
                                float _3180 = _3126 - _2627;
                                float _3181 = _3127 - _2628;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_643, _646, _649), vec3((-0.0) - _2626, (-0.0) - _2627, (-0.0) - _2628));
                                float _4248 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3193 = dot(vec3(_643, _646, _649), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4259 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_643, _646, _649), vec3(_3125, _3126, _3127))) + _3202;
                                float _4270 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4281 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3230 * _3012.x;
                                frontier_phi_73_pred_1 = _3230 * _3012.y;
                                frontier_phi_73_pred_2 = _3156 * _3000.z;
                                frontier_phi_73_pred_3 = _3156 * _3000.y;
                                frontier_phi_73_pred_4 = _3156 * _3000.x;
                                frontier_phi_73_pred_5 = _3230 * _3012.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3234 = frontier_phi_73_pred;
                            _3235 = frontier_phi_73_pred_1;
                            _3239 = frontier_phi_73_pred_2;
                            _3238 = frontier_phi_73_pred_3;
                            _3237 = frontier_phi_73_pred_4;
                            _3236 = frontier_phi_73_pred_5;
                            _2942 = _3237 + _2955;
                            _2943 = _3238 + _2956;
                            _2944 = _3239 + _2957;
                            _2939 = _3234 + _2952;
                            _2940 = _3235 + _2953;
                            _2941 = _3236 + _2954;
                            if (_2959 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2959;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2942;
                        frontier_phi_67_pred_1 = _2943;
                        frontier_phi_67_pred_2 = _2944;
                        frontier_phi_67_pred_3 = _2941;
                        frontier_phi_67_pred_4 = _2940;
                        frontier_phi_67_pred_5 = _2939;
                    }
                    _2607 = frontier_phi_67_pred;
                    _2609 = frontier_phi_67_pred_1;
                    _2611 = frontier_phi_67_pred_2;
                    _2605 = frontier_phi_67_pred_3;
                    _2603 = frontier_phi_67_pred_4;
                    _2601 = frontier_phi_67_pred_5;
                    uint _2746 = _2745 + 1u;
                    if (_2746 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2739 = _2601;
                        _2740 = _2603;
                        _2741 = _2605;
                        _2742 = _2607;
                        _2743 = _2609;
                        _2744 = _2611;
                        _2745 = _2746;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2609;
                frontier_phi_55_56_ladder_1 = _2611;
                frontier_phi_55_56_ladder_2 = _2607;
                frontier_phi_55_56_ladder_3 = _2605;
                frontier_phi_55_56_ladder_4 = _2603;
                frontier_phi_55_56_ladder_5 = _2601;
            }
            else
            {
                frontier_phi_55_56_ladder = _2495;
                frontier_phi_55_56_ladder_1 = _2497;
                frontier_phi_55_56_ladder_2 = _2493;
                frontier_phi_55_56_ladder_3 = _2491;
                frontier_phi_55_56_ladder_4 = _2489;
                frontier_phi_55_56_ladder_5 = _2487;
            }
            _2600 = frontier_phi_55_56_ladder_5;
            _2602 = frontier_phi_55_56_ladder_4;
            _2604 = frontier_phi_55_56_ladder_3;
            _2606 = frontier_phi_55_56_ladder_2;
            _2608 = frontier_phi_55_56_ladder;
            _2610 = frontier_phi_55_56_ladder_1;
        }
        float _2615 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2399 = (_2615 * _2606) + _1854;
        _2401 = (_2615 * _2608) + _1856;
        _2403 = (_2615 * _2610) + _1858;
        _2405 = ((_2600 * 0.039999999105930328369140625) * _2615) + _2184;
        _2407 = ((_2602 * 0.039999999105930328369140625) * _2615) + _2186;
        _2409 = ((_2604 * 0.039999999105930328369140625) * _2615) + _2188;
    }
    else
    {
        _2399 = _1854;
        _2401 = _1856;
        _2403 = _1858;
        _2405 = _2184;
        _2407 = _2186;
        _2409 = _2188;
    }
    float _4297 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4308 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4319 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    uint _2429 = _233 + 6u;
    float _2437 = _621 / cbSceneParam._m0[86u].x;
    float _2438 = _622 / cbSceneParam._m0[86u].y;
    vec4 _2452 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, (log2((isnan(cbSceneParam._m0[77u].w) ? _556 : (isnan(_556) ? cbSceneParam._m0[77u].w : min(_556, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2454 = _2452.x;
    float _2455 = _2452.y;
    float _2456 = _2452.z;
    float _2457 = _2452.w;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_556 > cbSceneParam._m0[78u].w)
    {
        float _2512 = isnan(_556) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _556 : min(cbSceneParam._m0[80u].w, _556));
        float _2513 = _2512 / _556;
        float _2524 = _2513 * _606;
        float _2525 = _607 * _2513;
        float _2526 = (-0.0) - _2525;
        float _2528 = _2513 * _608;
        float _2530 = (cbSceneParam._m0[77u].w * _2526) / _2512;
        float _2531 = _2530 + cbSceneParam._m0[79u].w;
        float _2532 = cbSceneParam._m0[79u].w - _2525;
        float _2538 = sqrt(((_2524 * _2524) + (_2525 * _2525)) + (_2528 * _2528));
        float _2541 = (1.0 - (cbSceneParam._m0[77u].w / _2512)) * _2538;
        float _2546 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2548 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2701;
        if (abs((_2526 - _2530) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2701 = ((((_2531 > 0.0) ? exp2(_2546 * _2531) : (2.0 - exp2(_2548 * _2531))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2541;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : max(_2531, _2532));
            float _2663 = isnan(_2532) ? _2531 : (isnan(_2531) ? _2532 : min(_2531, _2532));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2701 = ((abs(_2538 / _2526) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2546 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2546 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2548 * _2672) - exp2(_2548 * _2673)) * _2661))) + (_2541 * cbSceneParam._m0[80u].z);
        }
        vec4 _2703 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2437, _2438, 1.0), 0.0);
        float _2712 = exp2((_2701 * (-1.44269502162933349609375)) * (1.0 - _2703.w));
        float _2713 = log2(_2712);
        float _2729 = log2(_2457);
        _2550 = (exp2(_2729 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].x)) * _2703.x) / cbSceneParam._m0[78u].x)) + _2454;
        _2552 = (exp2(_2729 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].y)) * _2703.y) / cbSceneParam._m0[78u].y)) + _2455;
        _2554 = (exp2(_2729 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2713 * cbSceneParam._m0[78u].z)) * _2703.z) / cbSceneParam._m0[78u].z)) + _2456;
        _2556 = _2712 * _2457;
    }
    else
    {
        _2550 = _2454;
        _2552 = _2455;
        _2554 = _2456;
        _2556 = _2457;
    }
    float _2568 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2569 = _2568 == 3.0;
    float _2570 = log2(_2556);
    float _2577 = exp2(_2570 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2399 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _687))) + ((_2405 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1492)) * cbPerFrame._m0[3u].x));
    float _2578 = exp2(_2570 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2401 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _687))) + ((_2407 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1492)) * cbPerFrame._m0[3u].x));
    float _2579 = exp2(_2570 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2403 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _687))) + ((_2409 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1492)) * cbPerFrame._m0[3u].x));
    float _2588 = (_2568 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2588 * (_2569 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2550)));
    SV_Target.y = _2588 * (_2569 ? _2578 : (_2578 + (cbSceneParam._m0[72u].w * _2552)));
    SV_Target.z = _2588 * (_2569 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2554)));
    SV_Target.w = cbInstanceData._m0[_2429].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2429].w;
}


