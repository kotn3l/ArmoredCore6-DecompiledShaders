#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1297;
float _3941;
float _3942;
float _3943;
float _3944;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _375 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _375) * cbMtdParam._m0[24u].x) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3953 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _400 = (_393 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _401 = (_393 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _402 = (_393 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].x) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3964 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _538 = ((_510.x - _529) * _393) + _529;
    float _539 = ((_510.y - _530) * _393) + _530;
    float _540 = ((_510.z - _531) * _393) + _531;
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _565 = ((_552.z - _540) * _466) + _540;
    float _568 = ((((_552.x - _538) * _466) + _538) * 2.0) + (-1.0);
    float _569 = ((((_552.y - _539) * _466) + _539) * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3975 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _575 = sqrt(1.0 - (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _607 = (_568 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_487.x * 2.0) + (-1.0)))) + (((_595.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _608 = (_569 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_487.y * 2.0) + (-1.0)))) + (((_595.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _622 = _620.x;
    float _623 = 1.0 - _622;
    float _651 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_622 - _623) * cbMtdParam._m0[24u].w) + _623) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3986 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _660 = ((((cbMtdParam._m0[10u].x - _473) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _652) + _473;
    float _661 = ((((cbMtdParam._m0[10u].y - _474) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _652) + _474;
    float _662 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _475)) * _652) + _475;
    float _667 = (((_487.z - _565) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _565;
    float _671 = ((_595.z - _667) * cbMtdParam._m0[19u].w) + _667;
    float _675 = ((cbMtdParam._m0[23u].y - _671) * _652) + _671;
    vec4 _694 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _700 = (_694.x * 2.0) + (-1.0);
    float _701 = (_694.y * 2.0) + (-1.0);
    float _702 = dot(vec2(_700, _701), vec2(_700, _701));
    float _3997 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _718 = (_652 * (((cbMtdParam._m0[22u].z * _607) - _607) + _700)) + _607;
    float _719 = (_652 * (((cbMtdParam._m0[22u].z * _608) - _608) + _701)) + _608;
    float _720 = (_652 * (sqrt(1.0 - (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) - _575)) + _575;
    float _722 = cbMtdParam._m0[22u].x + _595.w;
    float _725 = fma(_720, _244 * NORMAL.x, fma(_719, _251 * TANGENT.x, (_237 * _229) * _718));
    float _728 = fma(_720, _244 * NORMAL.y, fma(_719, _251 * TANGENT.y, (_237 * _230) * _718));
    float _731 = fma(_720, _244 * NORMAL.z, fma(_719, _251 * TANGENT.z, (_237 * _231) * _718));
    float _735 = inversesqrt(dot(vec3(_725, _728, _731), vec3(_725, _728, _731)));
    float _736 = _735 * _725;
    float _737 = _735 * _728;
    float _738 = _735 * _731;
    float _4008 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _739 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _4019 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4030 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4041 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _4052 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _808 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _798);
    float _809 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _798);
    float _810 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _798);
    float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
    float _815 = _808 * _814;
    float _816 = _809 * _814;
    float _817 = _810 * _814;
    vec4 _822 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _824 = _822.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_808 * _808) + (_809 * _809)) + (_810 * _810));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _4063 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _4074 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) - _985)) + _985) < ((_824 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _835 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _836 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_738, cbSceneParam._m0[5u].z, fma(_737, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _736));
    float _857 = fma(_738, cbSceneParam._m0[6u].z, fma(_737, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _736));
    float _860 = fma(_738, cbSceneParam._m0[7u].z, fma(_737, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _736));
    uint _873 = _257 + 9u;
    uint _874 = _873 + uint(cbMatDynParam._m0[0u].w);
    float _880 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_874].x;
    float _881 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_874].y;
    float _882 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_874].z;
    float _4085 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _883 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _884 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _4107 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    vec4 _894 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _835, cbSceneParam._m0[86u].y * _836));
    float _898 = ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * TEXCOORD_5.w) * _894.x;
    float _899 = dot(vec3(_736, _737, _738), vec3(_815, _816, _817));
    float _902 = _899 * 2.0;
    float _906 = (_902 * _736) - _815;
    float _907 = (_902 * _737) - _816;
    float _908 = (_902 * _738) - _817;
    float _912 = abs(dot(vec3(_815, _816, _817), vec3(_736, _737, _738)));
    float _4118 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _914 = sqrt(_739);
    float _927 = exp2((_914 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_914 * 3.0));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1025 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1029 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1054 = _959 + _736;
        float _1055 = _963 + _737;
        float _1056 = _967 + _738;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_736, _737, _738), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _4166 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_736, _737, _738), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4199 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_736, _737, _738), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4232 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1338 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1342 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1346 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1369 = _959 + _736;
        float _1370 = _963 + _737;
        float _1371 = _967 + _738;
        float _1381 = fma(_1371, cbModelParam._m0[30u].z, fma(_1370, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1369)) - _1338;
        float _1382 = fma(_1371, cbModelParam._m0[31u].z, fma(_1370, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1369)) - _1342;
        float _1383 = fma(_1371, cbModelParam._m0[32u].z, fma(_1370, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1369)) - _1346;
        float _1387 = inversesqrt(dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383)));
        float _1400 = ((_1387 * _1381) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1338 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1387 * _1382) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1342 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1387 * _1383) / cbModelParam._m0[35u].z) + ((((((_1346 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1404 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1437 = exp2((_1404.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1404.x + (-0.5));
        float _1439 = _1437 * (_1404.y + (-0.5));
        float _1440 = _1437 * (_1404.z + (-0.5));
        float _1447 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1411.x + (-0.5));
        float _1449 = _1447 * (_1411.y + (-0.5));
        float _1450 = _1447 * (_1411.z + (-0.5));
        float _1457 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1418.x + (-0.5));
        float _1459 = _1457 * (_1418.y + (-0.5));
        float _1460 = _1457 * (_1418.z + (-0.5));
        float _1467 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1425.x + (-0.5));
        float _1469 = _1467 * (_1425.y + (-0.5));
        float _1470 = _1467 * (_1425.z + (-0.5));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = _1438 * 0.5;
        float _1475 = _1448 * 0.5;
        float _1476 = _1458 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_736, _737, _738), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4295 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1501 + 1.0))) + _1506) * _1471;
        float _1516 = _1439 * 0.5;
        float _1517 = _1449 * 0.5;
        float _1518 = _1459 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_736, _737, _738), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4328 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1543 + 1.0))) + _1548) * _1472;
        float _1558 = _1440 * 0.5;
        float _1559 = _1450 * 0.5;
        float _1560 = _1460 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_736, _737, _738), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4361 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1585 + 1.0))) + _1590) * _1473;
        _1607 = _1440;
        _1608 = _1439;
        _1609 = _1438;
        _1610 = _1450;
        _1611 = _1449;
        _1612 = _1448;
        _1613 = _1460;
        _1614 = _1459;
        _1615 = _1458;
        _1616 = _1473;
        _1617 = _1472;
        _1618 = _1471;
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1297;
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = _1297;
        _1619 = 0.0;
        _1620 = 0.0;
        _1621 = 0.0;
    }
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1309)) + _1309;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1310)) + _1310;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1311)) + _1311;
    float _1654 = fma(_1633, cbSceneParam._m0[89u].z, fma(_1632, cbSceneParam._m0[89u].y, _1631 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1633, cbSceneParam._m0[90u].z, fma(_1632, cbSceneParam._m0[90u].y, _1631 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1633, cbSceneParam._m0[91u].z, fma(_1632, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1631));
    float _1675 = _906 * 0.5;
    float _1676 = _907 * 0.5;
    float _1677 = _908 * 0.5;
    float _1678 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1681 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1684 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1718;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1691 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1695 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1699 = dot(vec4(_1675, _1676, _1677, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1706 = dot(vec4(cbModelParam._m0[39u]), vec4(_1675, _1676, _1677, 1.0));
        _1718 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1706) ? 0.0 : (isnan(0.0) ? _1706 : max(0.0, _1706))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1718 = 1.0;
    }
    float _1729;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1720 = dot(vec4(cbModelParam._m0[40u]), vec4(_1675, _1676, _1677, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1733 = (_1729 * cbModelParam._m0[1u].x) + (_1718 * (1.0 - cbModelParam._m0[1u].x));
    float _1743 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _739);
    float _1744 = isnan(_1743) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1743 : min(cbModelParam._m0[25u].z, _1743));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_908, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906));
        float _1807 = fma(_908, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906));
        float _1810 = fma(_908, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1838 = frontier_phi_17_15_ladder;
        }
        float _2009;
        if (_1807 > 0.0)
        {
            _2009 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2009 = frontier_phi_26_22_ladder;
        }
        float _2304;
        if (_1810 > 0.0)
        {
            _2304 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2304 = frontier_phi_38_33_ladder;
        }
        float _2306 = isnan(_2009) ? _1838 : (isnan(_1838) ? _2009 : min(_1838, _2009));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1804) + _1793;
        float _2312 = (_2307 * _1807) + _1797;
        float _2313 = (_2307 * _1810) + _1801;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1744);
            frontier_phi_16_38_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_16_38_ladder_2;
        _1828 = frontier_phi_16_38_ladder_1;
        _1830 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_906, _907, _908), _1744);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _739);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_908, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906));
        float _1904 = fma(_908, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906));
        float _1907 = fma(_908, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906));
        float _2014;
        if (_1901 > 0.0)
        {
            _2014 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2014 = frontier_phi_28_24_ladder;
        }
        float _2331;
        if (_1904 > 0.0)
        {
            _2331 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2331 = frontier_phi_40_35_ladder;
        }
        float _2658;
        if (_1907 > 0.0)
        {
            _2658 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2658 = frontier_phi_50_47_ladder;
        }
        float _2660 = isnan(_2331) ? _2014 : (isnan(_2014) ? _2331 : min(_2014, _2331));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1901) + _1890;
        float _2666 = (_2661 * _1904) + _1894;
        float _2667 = (_2661 * _1907) + _1898;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_25_50_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_25_50_ladder_2;
        _1928 = frontier_phi_25_50_ladder_1;
        _1930 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_906, _907, _908), _1835);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1942 = ((((1.0 - _927) * ((_914 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_927 * _914)) * _898;
    float _1943 = _1942 * ((cbModelParam._m0[1u].w * (_1926 - _1826)) + _1826);
    float _1944 = _1942 * ((cbModelParam._m0[1u].w * (_1928 - _1828)) + _1828);
    float _1945 = _1942 * ((cbModelParam._m0[1u].w * (_1930 - _1830)) + _1830);
    float _1948 = fma(_1945, cbSceneParam._m0[89u].z, fma(_1944, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1951 = fma(_1945, cbSceneParam._m0[90u].z, fma(_1944, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1954 = fma(_1945, cbSceneParam._m0[91u].z, fma(_1944, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1992 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1996 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2000 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2001 = _1988 / _2000;
    float _2002 = _1992 / _2000;
    float _2003 = _1996 / _2000;
    float _2150;
    float _2151;
    float _2152;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2030 = ((uint(_2003 > cbSceneParam._m0[59u].y) + uint(_2003 > cbSceneParam._m0[59u].x)) + uint(_2003 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2031 = _2030 + 43u;
        uint _2039 = _2030 + 44u;
        uint _2047 = _2030 + 45u;
        uint _2055 = _2030 + 46u;
        float _2066 = fma(_2000, cbSceneParam._m0[_2031].w, fma(_1996, cbSceneParam._m0[_2031].z, fma(_1992, cbSceneParam._m0[_2031].y, _1988 * cbSceneParam._m0[_2031].x)));
        float _2070 = fma(_2000, cbSceneParam._m0[_2039].w, fma(_1996, cbSceneParam._m0[_2039].z, fma(_1992, cbSceneParam._m0[_2039].y, _1988 * cbSceneParam._m0[_2039].x)));
        float _2078 = fma(_2000, cbSceneParam._m0[_2055].w, fma(_1996, cbSceneParam._m0[_2055].z, fma(_1992, cbSceneParam._m0[_2055].y, _1988 * cbSceneParam._m0[_2055].x)));
        float _2083 = cbSceneParam._m0[33u].z * _2078;
        float _2085 = cbSceneParam._m0[33u].w * _2078;
        float _2088 = fma(_2000, cbSceneParam._m0[_2047].w, fma(_1996, cbSceneParam._m0[_2047].z, fma(_1992, cbSceneParam._m0[_2047].y, _1988 * cbSceneParam._m0[_2047].x))) / _2078;
        float _2136 = (cbSceneParam._m0[33u].x - sqrt(((_2002 * _2002) + (_2001 * _2001)) + (_2003 * _2003))) * cbSceneParam._m0[33u].y;
        float _4487 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2143 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2066) / _2078, (_2085 + _2070) / _2078), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 + _2066) / _2078, (_2070 - _2083) / _2078), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 - _2083) / _2078, (_2070 - _2085) / _2078), _2088), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2066 - _2085) / _2078, (_2083 + _2070) / _2078), _2088), 0.0)).x), vec4(0.25)));
        _2150 = 1.0 - (_2143 * cbSceneParam._m0[34u].x);
        _2151 = 1.0 - (_2143 * cbSceneParam._m0[34u].y);
        _2152 = 1.0 - (_2143 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2150 = 1.0;
        _2151 = 1.0;
        _2152 = 1.0;
    }
    float _2216;
    float _2218;
    float _2220;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2204 = fma(_2000, cbSceneParam._m0[63u].w, fma(_1996, cbSceneParam._m0[63u].z, fma(_1992, cbSceneParam._m0[63u].y, _1988 * cbSceneParam._m0[63u].x)));
        float _2205 = fma(_2000, cbSceneParam._m0[60u].w, fma(_1996, cbSceneParam._m0[60u].z, fma(_1992, cbSceneParam._m0[60u].y, _1988 * cbSceneParam._m0[60u].x))) / _2204;
        float _2206 = fma(_2000, cbSceneParam._m0[61u].w, fma(_1996, cbSceneParam._m0[61u].z, fma(_1992, cbSceneParam._m0[61u].y, _1988 * cbSceneParam._m0[61u].x))) / _2204;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2205 >= cbSceneParam._m0[64u].x) && (_2206 >= cbSceneParam._m0[64u].y)) && (_2205 <= cbSceneParam._m0[64u].z)) && (_2206 <= cbSceneParam._m0[64u].w))
        {
            float _2344 = fma(_2000, cbSceneParam._m0[62u].w, fma(_1996, cbSceneParam._m0[62u].z, fma(_1992, cbSceneParam._m0[62u].y, _1988 * cbSceneParam._m0[62u].x))) / _2204;
            float _2348 = isnan(cbSceneParam._m0[41u].w) ? _2344 : (isnan(_2344) ? cbSceneParam._m0[41u].w : max(_2344, cbSceneParam._m0[41u].w));
            float _2391 = (cbSceneParam._m0[33u].x - sqrt(((_2002 * _2002) + (_2001 * _2001)) + (_2003 * _2003))) * cbSceneParam._m0[33u].y;
            float _4503 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
            float _2398 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2205, cbSceneParam._m0[33u].w + _2206), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2205, _2206 - cbSceneParam._m0[33u].z), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2205 - cbSceneParam._m0[33u].z, _2206 - cbSceneParam._m0[33u].w), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2205 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2206), _2348), 0.0)).x), vec4(0.25)));
            float _2402 = 1.0 - (_2398 * cbSceneParam._m0[34u].x);
            float _2403 = 1.0 - (_2398 * cbSceneParam._m0[34u].y);
            float _2404 = 1.0 - (_2398 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
            frontier_phi_37_36_ladder_1 = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
            frontier_phi_37_36_ladder_2 = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
        }
        else
        {
            frontier_phi_37_36_ladder = _2152;
            frontier_phi_37_36_ladder_1 = _2151;
            frontier_phi_37_36_ladder_2 = _2150;
        }
        _2216 = frontier_phi_37_36_ladder_2;
        _2218 = frontier_phi_37_36_ladder_1;
        _2220 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2216 = _2150;
        _2218 = _2151;
        _2220 = _2152;
    }
    uvec4 _2225 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2227 = _2225.x * 14u;
    uint _2228 = _2227 + 13u;
    float _2235 = _898 + (-1.0);
    float _2240 = (cbLight._m0[_2228].x * _2235) + 1.0;
    float _2241 = (cbLight._m0[_2228].y * _2235) + 1.0;
    float _2242 = (cbLight._m0[_2228].z * _2235) + 1.0;
    float _2243 = (cbLight._m0[_2228].w * _2235) + 1.0;
    uint _2244 = _2227 + 5u;
    float _2250 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2254 = _2227 + 4u;
    float _2263 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2267 = _2227 | 1u;
    float _2278 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_736, _737, _738));
    float _2281 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_736, _737, _738));
    float _4539 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _4550 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2286 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * 0.3183098733425140380859375;
    float _2288 = (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) * 0.3183098733425140380859375;
    float _2295 = ((cbLight._m0[_2244].x * _2250) * _2288) + (((cbLight._m0[_2254].x * _2216) * _2263) * _2286);
    float _2296 = ((_2250 * cbLight._m0[_2244].y) * _2288) + (((cbLight._m0[_2254].y * _2218) * _2263) * _2286);
    float _2297 = ((_2250 * cbLight._m0[_2244].z) * _2288) + (((cbLight._m0[_2254].z * _2220) * _2263) * _2286);
    uvec4 _2301 = floatBitsToUint(cbLight._m0[_2227 + 12u]);
    bool _2303 = _2301.x == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2303)
    {
        _2405 = _2295;
        _2407 = _2296;
        _2409 = _2297;
    }
    else
    {
        uint _2413 = _2227 + 6u;
        float _2429 = (dot(vec3(cbLight._m0[_2227 + 2u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4561 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2432 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2405 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2295;
        _2407 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2296;
        _2409 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2297;
    }
    bool _2412 = _2301.y == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2412)
    {
        _2467 = _2405;
        _2469 = _2407;
        _2471 = _2409;
    }
    else
    {
        uint _2629 = _2227 + 7u;
        float _2645 = (dot(vec3(cbLight._m0[_2227 + 3u].xyz), vec3(_736, _737, _738)) * 0.5) + 0.5;
        float _2646 = _2645 * _2645;
        float _4577 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2647 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _2648 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2467 = (((cbLight._m0[_2629].x * 0.3183098733425140380859375) * _2647) * _2648) + _2405;
        _2469 = (((cbLight._m0[_2629].y * 0.3183098733425140380859375) * _2647) * _2648) + _2407;
        _2471 = (((cbLight._m0[_2629].z * 0.3183098733425140380859375) * _2647) * _2648) + _2409;
    }
    uint _2474 = _2227 + 8u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _739) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2227].x + _815;
    float _2490 = cbLight._m0[_2227].y + _816;
    float _2491 = cbLight._m0[_2227].z + _817;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2227].xyz));
    float _4593 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _4604 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2503 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2504 = dot(vec3(_736, _737, _738), vec3(_2496, _2497, _2498));
    float _4615 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2496, _2497, _2498));
    float _4626 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2488 * _2488;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2528 = 1.0 - _2488;
    float _2539 = (0.5 / (((_2503 * ((_2502 * _2528) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2528) + _2488) * _2502))) * _2502;
    float _4637 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    uint _2555 = _2227 + 9u;
    float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _739) * 0.949999988079071044921875);
    float _2567 = _2566 * _2566;
    float _2568 = cbLight._m0[_2267].x + _815;
    float _2569 = cbLight._m0[_2267].y + _816;
    float _2570 = cbLight._m0[_2267].z + _817;
    float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
    float _2575 = _2574 * _2568;
    float _2576 = _2574 * _2569;
    float _2577 = _2574 * _2570;
    float _2578 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2267].xyz));
    float _4648 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2581 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    float _2582 = dot(vec3(_736, _737, _738), vec3(_2575, _2576, _2577));
    float _4659 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _2586 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2575, _2576, _2577));
    float _4670 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2590 = _2567 * _2567;
    float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
    float _2603 = (exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2604 = 1.0 - _2567;
    float _2614 = (0.5 / (((_2503 * ((_2581 * _2604) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2604) + _2567) * _2581))) * _2581;
    float _4681 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
    float _2626 = (((_2603 * cbLight._m0[_2555].x) * _2616) * _2250) + ((((cbLight._m0[_2474].x * _2216) * _2527) * _2541) * _2263);
    float _2627 = (((_2603 * cbLight._m0[_2555].y) * _2616) * _2250) + ((((cbLight._m0[_2474].y * _2218) * _2527) * _2541) * _2263);
    float _2628 = (((_2603 * cbLight._m0[_2555].z) * _2616) * _2250) + ((((cbLight._m0[_2474].z * _2220) * _2527) * _2541) * _2263);
    float _2684;
    float _2686;
    float _2688;
    if (_2303)
    {
        _2684 = _2626;
        _2686 = _2627;
        _2688 = _2628;
    }
    else
    {
        uint _2690 = _2227 + 2u;
        uint _2694 = _2227 + 10u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _739) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _815;
        float _2711 = cbLight._m0[_2690].y + _816;
        float _2712 = cbLight._m0[_2690].z + _817;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2690].xyz));
        float _4692 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2724 = dot(vec3(_736, _737, _738), vec3(_2717, _2718, _2719));
        float _4703 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4714 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2745 = (exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2746 = 1.0 - _2709;
        float _2756 = (0.5 / (((_2503 * ((_2723 * _2746) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2746) + _2709) * _2723))) * _2723;
        float _4725 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2684 = (((_2745 * cbLight._m0[_2694].x) * _2758) * _2759) + _2626;
        _2686 = (((_2745 * cbLight._m0[_2694].y) * _2758) * _2759) + _2627;
        _2688 = (((_2745 * cbLight._m0[_2694].z) * _2758) * _2759) + _2628;
    }
    float _2790;
    float _2792;
    float _2794;
    if (_2412)
    {
        _2790 = _2684;
        _2792 = _2686;
        _2794 = _2688;
    }
    else
    {
        uint _2801 = _2227 + 3u;
        uint _2805 = _2227 + 11u;
        float _2819 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2801].w)) * _739) * 0.949999988079071044921875);
        float _2820 = _2819 * _2819;
        float _2821 = cbLight._m0[_2801].x + _815;
        float _2822 = cbLight._m0[_2801].y + _816;
        float _2823 = cbLight._m0[_2801].z + _817;
        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
        float _2828 = _2827 * _2821;
        float _2829 = _2827 * _2822;
        float _2830 = _2827 * _2823;
        float _2831 = dot(vec3(_736, _737, _738), vec3(cbLight._m0[_2801].xyz));
        float _4741 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2834 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
        float _2835 = dot(vec3(_736, _737, _738), vec3(_2828, _2829, _2830));
        float _4752 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2838 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2839 = dot(vec3(cbLight._m0[_2801].xyz), vec3(_2828, _2829, _2830));
        float _4763 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2843 = _2820 * _2820;
        float _2847 = ((_2838 * _2838) * (_2843 + (-1.0))) + 1.0;
        float _2856 = (exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2857 = 1.0 - _2820;
        float _2867 = (0.5 / (((_2503 * ((_2834 * _2857) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2857) + _2820) * _2834))) * _2834;
        float _4774 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2869 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2843 / ((_2847 * _2847) * 3.141590118408203125));
        float _2870 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2790 = (((_2856 * cbLight._m0[_2805].x) * _2869) * _2870) + _2684;
        _2792 = (((_2856 * cbLight._m0[_2805].y) * _2869) * _2870) + _2686;
        _2794 = (((_2856 * cbLight._m0[_2805].z) * _2869) * _2870) + _2688;
    }
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    if (_2225.y == 0u)
    {
        uvec4 _2891 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2892 = _2891.x;
        uint _2903 = uint((float(_2891.y) * floor(float(uint(cbSceneParam._m0[85u].y * _836) / _2892))) + floor(float(uint(cbSceneParam._m0[85u].x * _835) / _2892)));
        float _2913 = (log2(_2003 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2914 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        uint _2917 = uint(isnan(14.0) ? _2914 : (isnan(_2914) ? 14.0 : min(_2914, 14.0)));
        uvec4 _2922 = texelFetch(g_lightClusterGridBuffer, int(((_2917 << 2u) + (_2903 << 6u)) >> 2u));
        uint _2923 = _2922.x;
        uint _2924 = _2891.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2924 >> 4u) & 15u)) + 4294967295u) & _2923) == 0u) || ((_2924 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2917 << 5u) + (_2903 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3172)
                {
                    frontier_phi_71_pred = _3161;
                    frontier_phi_71_pred_1 = _3160;
                    frontier_phi_71_pred_2 = _3159;
                    frontier_phi_71_pred_3 = _3158;
                    frontier_phi_71_pred_4 = _3157;
                    frontier_phi_71_pred_5 = _3156;
                }
                else
                {
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    uint _3307;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3171;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    for (;;)
                    {
                        uint _3311 = uint(findLSB(_3307)) + (_3162 << 5u);
                        uint _3308 = (_3307 + 4294967295u) & _3307;
                        uint _3313 = _3311 * 48u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3333 = (_3311 * 48u) + 4u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3352 = (_3311 * 48u) + 8u;
                        vec3 _3363 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x));
                        float _3367 = _3327.x - _2001;
                        float _3368 = _3327.y - _2002;
                        float _3369 = _3327.z - _2003;
                        float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                        float _3373 = inversesqrt(_3370);
                        float _3374 = _3373 * _3367;
                        float _3375 = _3373 * _3368;
                        float _3376 = _3373 * _3369;
                        float _3377 = dot(vec3(_854, _857, _860), vec3(_3374, _3375, _3376));
                        float _3382 = 1.0 - (_3370 * _3327.w);
                        float _4800 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3384 = sqrt(_3370) * _3346.w;
                        float _3387 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3377) + _3388;
                        float _3394 = _3384 * _3384;
                        float _3398 = ((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3383) / ((_3394 * 0.699999988079071044921875) + 1.0);
                        float _3402 = (-0.0) - _2001;
                        float _3403 = (-0.0) - _2002;
                        float _3404 = (-0.0) - _2003;
                        float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3418 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _914;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3409 + _3374;
                        float _3430 = _3410 + _3375;
                        float _3431 = _3411 + _3376;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_854, _857, _860), vec3(_3409, _3410, _3411));
                        float _4816 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                        float _3443 = dot(vec3(_854, _857, _860), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4827 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3387 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3377) + _3452;
                        float _4838 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4849 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3450 * _3450) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125))) * _3383;
                        _3231 = (_3398 * _3346.x) + _3304;
                        _3232 = (_3398 * _3346.y) + _3305;
                        _3233 = (_3398 * _3346.z) + _3306;
                        _3228 = (_3478 * _3363.x) + _3301;
                        _3229 = (_3478 * _3363.y) + _3302;
                        _3230 = (_3478 * _3363.z) + _3303;
                        if (_3308 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3308;
                        }
                    }
                    frontier_phi_71_pred = _3233;
                    frontier_phi_71_pred_1 = _3232;
                    frontier_phi_71_pred_2 = _3231;
                    frontier_phi_71_pred_3 = _3230;
                    frontier_phi_71_pred_4 = _3229;
                    frontier_phi_71_pred_5 = _3228;
                }
                _3014 = frontier_phi_71_pred;
                _3012 = frontier_phi_71_pred_1;
                _3010 = frontier_phi_71_pred_2;
                _3008 = frontier_phi_71_pred_3;
                _3006 = frontier_phi_71_pred_4;
                _3004 = frontier_phi_71_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3004;
                    _3157 = _3006;
                    _3158 = _3008;
                    _3159 = _3010;
                    _3160 = _3012;
                    _3161 = _3014;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3020) & _2923) == 0u)
        {
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
            float _3150 = _3149 * _2001;
            float _3151 = _3149 * _2002;
            float _3152 = _3149 * _2003;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3284 = _3003;
                float _3285 = _3005;
                float _3286 = _3007;
                float _3287 = _3009;
                float _3288 = _3011;
                float _3289 = _3013;
                uint _3290 = _3020;
                uint _3299;
                bool _3300;
                for (;;)
                {
                    _3299 = texelFetch(g_lightClassification, int((((_2917 << 5u) + (_2903 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                    _3300 = _3299 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3300)
                    {
                        frontier_phi_82_pred = _3289;
                        frontier_phi_82_pred_1 = _3288;
                        frontier_phi_82_pred_2 = _3287;
                        frontier_phi_82_pred_3 = _3286;
                        frontier_phi_82_pred_4 = _3285;
                        frontier_phi_82_pred_5 = _3284;
                    }
                    else
                    {
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3505 = _3284;
                        float _3506 = _3285;
                        float _3507 = _3286;
                        float _3508 = _3287;
                        float _3509 = _3288;
                        float _3510 = _3289;
                        uint _3511 = _3299;
                        uint _3512;
                        vec4 _3537;
                        float _3538;
                        vec4 _3553;
                        vec3 _3565;
                        vec4 _3580;
                        vec4 _3595;
                        float _3641;
                        bool _3642;
                        for (;;)
                        {
                            uint _3522 = ((_3290 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3511));
                            _3512 = (_3511 + 4294967295u) & _3511;
                            uint _3524 = _3522 * 40u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3538 = _3537.w;
                            uint _3540 = (_3522 * 40u) + 4u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3522 * 40u) + 8u;
                            _3565 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x));
                            uint _3567 = (_3522 * 40u) + 16u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3522 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3522 * 40u) + 24u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3616 = (_3522 * 40u) + 28u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3641 = fma(_2003, _3629.z, fma(_2002, _3629.y, _3629.x * _2001)) + _3629.w;
                            _3642 = !((fma(_2003, _3610.z, fma(_2002, _3610.y, _3610.x * _2001)) + _3610.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3642)
                            {
                                float _3669 = _3537.x - _2001;
                                float _3670 = _3537.y - _2002;
                                float _3671 = _3537.z - _2003;
                                float _3672 = dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671));
                                float _3675 = inversesqrt(_3672);
                                float _3676 = _3675 * _3669;
                                float _3677 = _3675 * _3670;
                                float _3678 = _3675 * _3671;
                                float _3682 = 1.0 - (_3672 / (_3538 * _3538));
                                float _4860 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3687 = sqrt(_3672) * _3553.w;
                                float _3689 = 1.39999997615814208984375 / (_3687 + 1.39999997615814208984375);
                                float _3690 = _3689 * _3689;
                                float _3693 = ((1.0 - _3690) * dot(vec3(_3676, _3677, _3678), vec3(_854, _857, _860))) + _3690;
                                float _3696 = _3687 * _3687;
                                float _3700 = (fma(_2003, _3580.z, fma(_2002, _3580.y, _3580.x * _2001)) + _3580.w) / _3641;
                                float _3701 = (fma(_2003, _3595.z, fma(_2002, _3595.y, _3595.x * _2001)) + _3595.w) / _3641;
                                float _3705 = 1.0 - dot(vec2(_3700, _3701), vec2(_3700, _3701));
                                float _4876 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3707 = _3706 * (((isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0))) * _3683) / ((_3696 * 0.699999988079071044921875) + 1.0));
                                float _3719 = exp2(log2(1.0 / ((_3696 * 3.5) + 5.0)) * 0.25);
                                float _3720 = 1.0 - _914;
                                float _3727 = sqrt(1.0 - ((1.0 - (_3720 * _3720)) * (1.0 - (_3719 * _3719))));
                                float _3728 = _3727 * _3727;
                                float _3729 = _3728 * _3728;
                                float _3730 = _3676 - _3150;
                                float _3731 = _3677 - _3151;
                                float _3732 = _3678 - _3152;
                                float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                                float _3740 = dot(vec3(_854, _857, _860), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4887 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                                float _3744 = dot(vec3(_854, _857, _860), vec3(_3736 * _3730, _3736 * _3731, _3736 * _3732));
                                float _4898 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                                float _3751 = ((_3747 * _3747) * (_3729 + (-1.0))) + 1.0;
                                float _3752 = _3689 * _3728;
                                float _3753 = _3752 * _3752;
                                float _3759 = ((1.0 - _3753) * dot(vec3(_854, _857, _860), vec3(_3676, _3677, _3678))) + _3753;
                                float _4909 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                                float _3761 = 1.0 - _3728;
                                float _3771 = (0.5 / (((_3760 * ((_3743 * _3761) + _3728)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3728) * _3743))) * _3760;
                                float _4920 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3781 = (_3706 * _3683) * (((_3729 * 3.1415927410125732421875) * (isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0)))) / ((_3751 * _3751) * ((_3696 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3707 * _3553.z;
                                frontier_phi_88_pred_1 = _3707 * _3553.y;
                                frontier_phi_88_pred_2 = _3707 * _3553.x;
                                frontier_phi_88_pred_3 = _3781 * _3565.z;
                                frontier_phi_88_pred_4 = _3781 * _3565.y;
                                frontier_phi_88_pred_5 = _3781 * _3565.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3790 = frontier_phi_88_pred;
                            _3789 = frontier_phi_88_pred_1;
                            _3788 = frontier_phi_88_pred_2;
                            _3787 = frontier_phi_88_pred_3;
                            _3786 = frontier_phi_88_pred_4;
                            _3785 = frontier_phi_88_pred_5;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            if (_3512 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3512;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3497;
                        frontier_phi_82_pred_1 = _3496;
                        frontier_phi_82_pred_2 = _3495;
                        frontier_phi_82_pred_3 = _3494;
                        frontier_phi_82_pred_4 = _3493;
                        frontier_phi_82_pred_5 = _3492;
                    }
                    _3135 = frontier_phi_82_pred;
                    _3133 = frontier_phi_82_pred_1;
                    _3131 = frontier_phi_82_pred_2;
                    _3129 = frontier_phi_82_pred_3;
                    _3127 = frontier_phi_82_pred_4;
                    _3125 = frontier_phi_82_pred_5;
                    uint _3291 = _3290 + 1u;
                    if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3284 = _3125;
                        _3285 = _3127;
                        _3286 = _3129;
                        _3287 = _3131;
                        _3288 = _3133;
                        _3289 = _3135;
                        _3290 = _3291;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3131;
                frontier_phi_63_64_ladder_1 = _3135;
                frontier_phi_63_64_ladder_2 = _3133;
                frontier_phi_63_64_ladder_3 = _3129;
                frontier_phi_63_64_ladder_4 = _3127;
                frontier_phi_63_64_ladder_5 = _3125;
            }
            else
            {
                frontier_phi_63_64_ladder = _3009;
                frontier_phi_63_64_ladder_1 = _3013;
                frontier_phi_63_64_ladder_2 = _3011;
                frontier_phi_63_64_ladder_3 = _3007;
                frontier_phi_63_64_ladder_4 = _3005;
                frontier_phi_63_64_ladder_5 = _3003;
            }
            _3124 = frontier_phi_63_64_ladder_5;
            _3126 = frontier_phi_63_64_ladder_4;
            _3128 = frontier_phi_63_64_ladder_3;
            _3130 = frontier_phi_63_64_ladder;
            _3132 = frontier_phi_63_64_ladder_2;
            _3134 = frontier_phi_63_64_ladder_1;
        }
        float _3139 = isnan(1.0) ? _898 : (isnan(_898) ? 1.0 : min(_898, 1.0));
        _2936 = (_3139 * _3130) + _2467;
        _2938 = (_3139 * _3132) + _2469;
        _2940 = (_3139 * _3134) + _2471;
        _2942 = ((_3124 * 0.039999999105930328369140625) * _3139) + _2790;
        _2944 = ((_3126 * 0.039999999105930328369140625) * _3139) + _2792;
        _2946 = ((_3128 * 0.039999999105930328369140625) * _3139) + _2794;
    }
    else
    {
        _2936 = _2467;
        _2938 = _2469;
        _2940 = _2471;
        _2942 = _2790;
        _2944 = _2792;
        _2946 = _2794;
    }
    float _4936 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4947 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4958 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _2963 = ((isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2936 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _898))) + ((_2942 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    float _2964 = ((isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0))) * (_2938 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _898))) + ((_2944 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    float _2965 = ((isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2940 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _898))) + ((_2946 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1733)) * cbPerFrame._m0[3u].x);
    uint _2966 = _257 + 6u;
    float _2974 = _835 / cbSceneParam._m0[86u].x;
    float _2975 = _836 / cbSceneParam._m0[86u].y;
    vec4 _2989 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2991 = _2989.x;
    float _2992 = _2989.y;
    float _2993 = _2989.z;
    float _2994 = _2989.w;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _3029 = _3028 / _757;
        float _3040 = _3029 * _808;
        float _3041 = _809 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3044 = _3029 * _810;
        float _3046 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3047 = _3046 + cbSceneParam._m0[79u].w;
        float _3048 = cbSceneParam._m0[79u].w - _3041;
        float _3054 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3044 * _3044));
        float _3057 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3054;
        float _3062 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3064 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3241;
        if (abs((_3042 - _3046) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3241 = ((((_3047 > 0.0) ? exp2(_3062 * _3047) : (2.0 - exp2(_3064 * _3047))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3057;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3048) ? _3047 : (isnan(_3047) ? _3048 : max(_3047, _3048));
            float _3187 = isnan(_3048) ? _3047 : (isnan(_3047) ? _3048 : min(_3047, _3048));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3241 = ((abs(_3054 / _3042) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3062 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3062 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3064 * _3196) - exp2(_3064 * _3197)) * _3185))) + (_3057 * cbSceneParam._m0[80u].z);
        }
        vec4 _3243 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, 1.0), 0.0);
        float _3252 = exp2((_3241 * (-1.44269502162933349609375)) * (1.0 - _3243.w));
        float _3253 = log2(_3252);
        float _3269 = log2(_2994);
        _3066 = (exp2(_3269 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].x)) * _3243.x) / cbSceneParam._m0[78u].x)) + _2991;
        _3068 = (exp2(_3269 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].y)) * _3243.y) / cbSceneParam._m0[78u].y)) + _2992;
        _3070 = (exp2(_3269 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3253 * cbSceneParam._m0[78u].z)) * _3243.z) / cbSceneParam._m0[78u].z)) + _2993;
        _3072 = _3252 * _2994;
    }
    else
    {
        _3066 = _2991;
        _3068 = _2992;
        _3070 = _2993;
        _3072 = _2994;
    }
    bool _3279;
    vec4 _3082;
    vec4 _3104;
    float _3106;
    float _3110;
    float _3111;
    float _3112;
    float _3113;
    bool _3123;
    for (;;)
    {
        _3082 = cbMatDynParam._m0[0u];
        float _3084 = roundEven(_3082.y);
        bool _3085 = _3084 == 3.0;
        float _3086 = log2(_3072);
        float _3093 = exp2(_3086 * cbSceneParam._m0[78u].x) * _2963;
        float _3094 = exp2(_3086 * cbSceneParam._m0[78u].y) * _2964;
        float _3095 = exp2(_3086 * cbSceneParam._m0[78u].z) * _2965;
        float _3102 = _824 + (-0.5);
        _3104 = cbMtdParam._m0[1u];
        _3106 = _3104.y * _3102;
        float _3109 = (_3084 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3110 = _3109 * (_3085 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3066)));
        _3111 = _3109 * (_3085 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3068)));
        _3112 = _3109 * (_3085 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3070)));
        _3113 = _3102 * 0.999000012874603271484375;
        _3123 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3123)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3113) < 0.5)
            {
                _3279 = true;
                break;
            }
        }
        uint _3220 = _873 + uint(_3082.w);
        if ((cbInstanceData._m0[_3220].w < 1.0) && ((cbInstanceData._m0[_3220].w + _3113) < 0.5))
        {
            _3279 = true;
            break;
        }
        if ((_3106 + 1.0) < _3104.x)
        {
            _3279 = true;
            break;
        }
        _3279 = false;
        break;
    }
    float _3483;
    if (_3279)
    {
        discard_state = true;
        _3483 = 0.0;
    }
    else
    {
        _3483 = cbInstanceData._m0[_2966].w;
    }
    SV_Target.x = _3110;
    SV_Target.y = _3111;
    SV_Target.z = _3112;
    SV_Target.w = _3483;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2966].w;
    discard_exit();
}


