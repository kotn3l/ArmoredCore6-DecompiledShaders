#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1239;
float _3598;
float _3599;
float _3600;
float _3601;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3610 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3621 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _503 = ((_475.x - _494) * _375) + _494;
    float _504 = ((_475.y - _495) * _375) + _495;
    float _505 = ((_475.z - _496) * _375) + _496;
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _530 = ((_517.z - _505) * _448) + _505;
    float _533 = ((((_517.x - _503) * _448) + _503) * 2.0) + (-1.0);
    float _535 = ((((_517.y - _504) * _448) + _504) * 2.0) + (-1.0);
    float _536 = dot(vec2(_533, _535), vec2(_533, _535));
    float _3632 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _596 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_582 - _583) * cbMtdParam._m0[24u].z) + _583) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3643 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _604 = (_597 * (cbMtdParam._m0[17u].x - _455)) + _455;
    float _605 = (_597 * (cbMtdParam._m0[17u].y - _456)) + _456;
    float _606 = (_597 * (cbMtdParam._m0[17u].z - _457)) + _457;
    float _610 = (cbMtdParam._m0[19u].w * (_555.z - _530)) + _530;
    vec4 _623 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _630 = (_623.x * 2.0) + (-1.0);
    float _631 = (_623.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3654 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _640 = (_597 * (_623.z - _610)) + _610;
    float _643 = (((_555.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _533;
    float _644 = (((_555.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _535;
    float _656 = (((_630 - _643) + (cbMtdParam._m0[21u].x * _643)) * _597) + _643;
    float _657 = (((_631 - _644) + (cbMtdParam._m0[21u].x * _644)) * _597) + _644;
    float _658 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) - _541)) + _541;
    float _663 = cbMtdParam._m0[22u].x + _555.w;
    float _666 = fma(_658, _225 * NORMAL.x, fma(_657, _232 * TANGENT.x, (_218 * _210) * _656));
    float _669 = fma(_658, _225 * NORMAL.y, fma(_657, _232 * TANGENT.y, (_218 * _211) * _656));
    float _672 = fma(_658, _225 * NORMAL.z, fma(_657, _232 * TANGENT.z, (_218 * _212) * _656));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3665 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _680 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3687 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3698 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3709 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    vec4 _764 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _766 = _764.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_750 * _750) + (_751 * _751)) + (_752 * _752));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _3720 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _3731 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) - _927)) + _927) < ((_766 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _796 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _799 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _802 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _815 = _238 + 9u;
    uint _816 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3742 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _3764 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    vec4 _836 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _840 = ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * TEXCOORD_5.w) * _836.x;
    float _841 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _844 = _841 * 2.0;
    float _848 = (_844 * _677) - _757;
    float _849 = (_844 * _678) - _758;
    float _850 = (_844 * _679) - _759;
    float _854 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _3775 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _856 = sqrt(_680);
    float _869 = exp2((_856 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_856 * 3.0));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _967 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _971 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _996 = _901 + _677;
        float _997 = _905 + _678;
        float _998 = _909 + _679;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_677, _678, _679), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3823 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_677, _678, _679), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3856 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_677, _678, _679), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3889 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1280 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1284 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1288 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1311 = _901 + _677;
        float _1312 = _905 + _678;
        float _1313 = _909 + _679;
        float _1323 = fma(_1313, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1280 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1284 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[35u].z) + ((((((_1288 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1379 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1346.x + (-0.5));
        float _1381 = _1379 * (_1346.y + (-0.5));
        float _1382 = _1379 * (_1346.z + (-0.5));
        float _1389 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1353.x + (-0.5));
        float _1391 = _1389 * (_1353.y + (-0.5));
        float _1392 = _1389 * (_1353.z + (-0.5));
        float _1399 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1360.x + (-0.5));
        float _1401 = _1399 * (_1360.y + (-0.5));
        float _1402 = _1399 * (_1360.z + (-0.5));
        float _1409 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1367.x + (-0.5));
        float _1411 = _1409 * (_1367.y + (-0.5));
        float _1412 = _1409 * (_1367.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_677, _678, _679), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3952 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1443 + 1.0))) + _1448) * _1413;
        float _1458 = _1381 * 0.5;
        float _1459 = _1391 * 0.5;
        float _1460 = _1401 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_677, _678, _679), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _3985 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1485 + 1.0))) + _1490) * _1414;
        float _1500 = _1382 * 0.5;
        float _1501 = _1392 * 0.5;
        float _1502 = _1402 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_677, _678, _679), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4018 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1527 + 1.0))) + _1532) * _1415;
        _1549 = _1382;
        _1550 = _1381;
        _1551 = _1380;
        _1552 = _1392;
        _1553 = _1391;
        _1554 = _1390;
        _1555 = _1402;
        _1556 = _1401;
        _1557 = _1400;
        _1558 = _1415;
        _1559 = _1414;
        _1560 = _1413;
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1239;
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = _1239;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1251)) + _1251;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1252)) + _1252;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1253)) + _1253;
    float _1596 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1573));
    float _1617 = _848 * 0.5;
    float _1618 = _849 * 0.5;
    float _1619 = _850 * 0.5;
    float _1620 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1623 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1626 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1660;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1633 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1637 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1641 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1648 = dot(vec4(cbModelParam._m0[39u]), vec4(_1617, _1618, _1619, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1671;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1662 = dot(vec4(cbModelParam._m0[40u]), vec4(_1617, _1618, _1619, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1675 = (_1671 * cbModelParam._m0[1u].x) + (_1660 * (1.0 - cbModelParam._m0[1u].x));
    float _1685 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1685 : min(cbModelParam._m0[25u].z, _1685));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1734 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1738 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1742 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1745 = fma(_850, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848));
        float _1748 = fma(_850, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848));
        float _1751 = fma(_850, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848));
        float _1779;
        if (_1745 > 0.0)
        {
            _1779 = abs((1.0 - _1734) / _1745);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1734 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1779 = frontier_phi_17_15_ladder;
        }
        float _1980;
        if (_1748 > 0.0)
        {
            _1980 = abs((1.0 - _1738) / _1748);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1738 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1980 = frontier_phi_26_22_ladder;
        }
        float _2223;
        if (_1751 > 0.0)
        {
            _2223 = abs((1.0 - _1742) / _1751);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1742 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2223 = frontier_phi_38_33_ladder;
        }
        float _2225 = isnan(_1980) ? _1779 : (isnan(_1779) ? _1980 : min(_1779, _1980));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1745) + _1734;
        float _2231 = (_2226 * _1748) + _1738;
        float _2232 = (_2226 * _1751) + _1742;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2233;
        float _2237 = _2233 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 > _2237) || ((_2231 < _2235) || ((_2230 < _2235) || (_2230 > _2237))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2232, cbModelParam._m0[9u].z, fma(_2231, cbModelParam._m0[9u].y, _2230 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2232, cbModelParam._m0[10u].z, fma(_2231, cbModelParam._m0[10u].y, _2230 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2232, cbModelParam._m0[11u].z, fma(_2231, cbModelParam._m0[11u].y, _2230 * cbModelParam._m0[11u].x))), _1686);
            frontier_phi_16_38_ladder = _2356.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2356.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2356.x * cbModelParam._m0[1u].y;
        }
        _1767 = frontier_phi_16_38_ladder_2;
        _1769 = frontier_phi_16_38_ladder_1;
        _1771 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_848, _849, _850), _1686);
        _1767 = _1755.x * cbModelParam._m0[1u].y;
        _1769 = _1755.y * cbModelParam._m0[1u].y;
        _1771 = _1755.z * cbModelParam._m0[1u].y;
    }
    float _1775 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1775 : min(cbModelParam._m0[25u].w, _1775));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_850, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848));
        float _1844 = fma(_850, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848));
        float _1847 = fma(_850, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848));
        float _1985;
        if (_1841 > 0.0)
        {
            _1985 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1985 = frontier_phi_28_24_ladder;
        }
        float _2250;
        if (_1844 > 0.0)
        {
            _2250 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2250 = frontier_phi_40_35_ladder;
        }
        float _2455;
        if (_1847 > 0.0)
        {
            _2455 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2455 = frontier_phi_49_46_ladder;
        }
        float _2457 = isnan(_2250) ? _1985 : (isnan(_1985) ? _2250 : min(_1985, _2250));
        float _2458 = isnan(_2455) ? _2457 : (isnan(_2457) ? _2455 : min(_2457, _2455));
        float _2462 = (_2458 * _1841) + _1830;
        float _2463 = (_2458 * _1844) + _1834;
        float _2464 = (_2458 * _1847) + _1838;
        float _2465 = _2458 * 9.9999997473787516355514526367188e-05;
        float _2466 = (-1.0) - _2465;
        float _2468 = _2465 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2464 > _2468) || ((_2464 < _2466) || ((_2463 > _2468) || ((_2463 < _2466) || ((_2462 < _2466) || (_2462 > _2468))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2663 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2464, cbModelParam._m0[17u].z, fma(_2463, cbModelParam._m0[17u].y, _2462 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2464, cbModelParam._m0[18u].z, fma(_2463, cbModelParam._m0[18u].y, _2462 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2464, cbModelParam._m0[19u].z, fma(_2463, cbModelParam._m0[19u].y, _2462 * cbModelParam._m0[19u].x))), _1776);
            frontier_phi_25_49_ladder = _2663.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2663.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2663.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_25_49_ladder_2;
        _1868 = frontier_phi_25_49_ladder_1;
        _1870 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_848, _849, _850), _1776);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1882 = ((((1.0 - _869) * ((_856 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_869 * _856)) * _840;
    float _1883 = _1882 * ((cbModelParam._m0[1u].w * (_1866 - _1767)) + _1767);
    float _1884 = _1882 * ((cbModelParam._m0[1u].w * (_1868 - _1769)) + _1769);
    float _1885 = _1882 * ((cbModelParam._m0[1u].w * (_1870 - _1771)) + _1771);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    uvec4 _1904 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1906 = _1904.x * 14u;
    uint _1907 = _1906 + 13u;
    float _1914 = _840 + (-1.0);
    float _1919 = (cbLight._m0[_1907].x * _1914) + 1.0;
    float _1920 = (cbLight._m0[_1907].y * _1914) + 1.0;
    float _1921 = (cbLight._m0[_1907].z * _1914) + 1.0;
    float _1922 = (cbLight._m0[_1907].w * _1914) + 1.0;
    uint _1923 = _1906 + 5u;
    float _1929 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1933 = _1906 + 4u;
    float _1939 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1943 = _1906 | 1u;
    float _1954 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_677, _678, _679));
    float _1957 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_677, _678, _679));
    float _4154 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _4165 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1962 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
    float _1964 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
    float _1971 = ((cbLight._m0[_1923].x * _1929) * _1964) + ((cbLight._m0[_1933].x * _1939) * _1962);
    float _1972 = ((_1929 * cbLight._m0[_1923].y) * _1964) + ((_1939 * cbLight._m0[_1933].y) * _1962);
    float _1973 = ((_1929 * cbLight._m0[_1923].z) * _1964) + ((_1939 * cbLight._m0[_1933].z) * _1962);
    uvec4 _1977 = floatBitsToUint(cbLight._m0[_1906 + 12u]);
    bool _1979 = _1977.x == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1979)
    {
        _1990 = _1971;
        _1992 = _1972;
        _1994 = _1973;
    }
    else
    {
        uint _1998 = _1906 + 6u;
        float _2014 = (dot(vec3(cbLight._m0[_1906 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2015 = _2014 * _2014;
        float _4176 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2016 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2017 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _1990 = (((cbLight._m0[_1998].x * 0.3183098733425140380859375) * _2016) * _2017) + _1971;
        _1992 = (((cbLight._m0[_1998].y * 0.3183098733425140380859375) * _2016) * _2017) + _1972;
        _1994 = (((cbLight._m0[_1998].z * 0.3183098733425140380859375) * _2016) * _2017) + _1973;
    }
    bool _1997 = _1977.y == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_1997)
    {
        _2035 = _1990;
        _2037 = _1992;
        _2039 = _1994;
    }
    else
    {
        uint _2194 = _1906 + 7u;
        float _2210 = (dot(vec3(cbLight._m0[_1906 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2211 = _2210 * _2210;
        float _4192 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2212 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2213 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2035 = (((cbLight._m0[_2194].x * 0.3183098733425140380859375) * _2212) * _2213) + _1990;
        _2037 = (((cbLight._m0[_2194].y * 0.3183098733425140380859375) * _2212) * _2213) + _1992;
        _2039 = (((cbLight._m0[_2194].z * 0.3183098733425140380859375) * _2212) * _2213) + _1994;
    }
    uint _2042 = _1906 + 8u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _680) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1906].x + _757;
    float _2058 = cbLight._m0[_1906].y + _758;
    float _2059 = cbLight._m0[_1906].z + _759;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1906].xyz));
    float _4208 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2071 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2072 = dot(vec3(_677, _678, _679), vec3(_2064, _2065, _2066));
    float _4230 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2064, _2065, _2066));
    float _4241 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2056 * _2056;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2095 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2096 = 1.0 - _2056;
    float _2107 = (0.5 / (((_2071 * ((_2070 * _2096) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2096) + _2056) * _2070))) * _2070;
    float _4252 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2109 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    uint _2120 = _1906 + 9u;
    float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1943].w)) * _680) * 0.949999988079071044921875);
    float _2132 = _2131 * _2131;
    float _2133 = cbLight._m0[_1943].x + _757;
    float _2134 = cbLight._m0[_1943].y + _758;
    float _2135 = cbLight._m0[_1943].z + _759;
    float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
    float _2140 = _2139 * _2133;
    float _2141 = _2139 * _2134;
    float _2142 = _2139 * _2135;
    float _2143 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1943].xyz));
    float _4263 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2147 = dot(vec3(_677, _678, _679), vec3(_2140, _2141, _2142));
    float _4274 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2151 = dot(vec3(cbLight._m0[_1943].xyz), vec3(_2140, _2141, _2142));
    float _4285 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2155 = _2132 * _2132;
    float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2132;
    float _2179 = (0.5 / (((_2071 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2169) + _2132) * _2146))) * _2146;
    float _4296 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
    float _2191 = (((_2168 * cbLight._m0[_2120].x) * _2181) * _1929) + (((_2095 * cbLight._m0[_2042].x) * _2109) * _1939);
    float _2192 = (((_2168 * cbLight._m0[_2120].y) * _2181) * _1929) + (((_2095 * cbLight._m0[_2042].y) * _2109) * _1939);
    float _2193 = (((_2168 * cbLight._m0[_2120].z) * _2181) * _1929) + (((_2095 * cbLight._m0[_2042].z) * _2109) * _1939);
    float _2255;
    float _2257;
    float _2259;
    if (_1979)
    {
        _2255 = _2191;
        _2257 = _2192;
        _2259 = _2193;
    }
    else
    {
        uint _2261 = _1906 + 2u;
        uint _2265 = _1906 + 10u;
        float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2261].w)) * _680) * 0.949999988079071044921875);
        float _2280 = _2279 * _2279;
        float _2281 = cbLight._m0[_2261].x + _757;
        float _2282 = cbLight._m0[_2261].y + _758;
        float _2283 = cbLight._m0[_2261].z + _759;
        float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
        float _2288 = _2287 * _2281;
        float _2289 = _2287 * _2282;
        float _2290 = _2287 * _2283;
        float _2291 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2261].xyz));
        float _4307 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _2295 = dot(vec3(_677, _678, _679), vec3(_2288, _2289, _2290));
        float _4318 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2298 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2299 = dot(vec3(cbLight._m0[_2261].xyz), vec3(_2288, _2289, _2290));
        float _4329 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2303 = _2280 * _2280;
        float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
        float _2316 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2317 = 1.0 - _2280;
        float _2327 = (0.5 / (((_2071 * ((_2294 * _2317) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2317) + _2280) * _2294))) * _2294;
        float _4340 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2329 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
        float _2330 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2255 = (((_2316 * cbLight._m0[_2265].x) * _2329) * _2330) + _2191;
        _2257 = (((_2316 * cbLight._m0[_2265].y) * _2329) * _2330) + _2192;
        _2259 = (((_2316 * cbLight._m0[_2265].z) * _2329) * _2330) + _2193;
    }
    float _2365;
    float _2367;
    float _2369;
    if (_1997)
    {
        _2365 = _2255;
        _2367 = _2257;
        _2369 = _2259;
    }
    else
    {
        uint _2376 = _1906 + 3u;
        uint _2380 = _1906 + 11u;
        float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2376].w)) * _680) * 0.949999988079071044921875);
        float _2395 = _2394 * _2394;
        float _2396 = cbLight._m0[_2376].x + _757;
        float _2397 = cbLight._m0[_2376].y + _758;
        float _2398 = cbLight._m0[_2376].z + _759;
        float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
        float _2403 = _2402 * _2396;
        float _2404 = _2402 * _2397;
        float _2405 = _2402 * _2398;
        float _2406 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2376].xyz));
        float _4356 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2410 = dot(vec3(_677, _678, _679), vec3(_2403, _2404, _2405));
        float _4367 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2414 = dot(vec3(cbLight._m0[_2376].xyz), vec3(_2403, _2404, _2405));
        float _4378 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2418 = _2395 * _2395;
        float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
        float _2431 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2432 = 1.0 - _2395;
        float _2442 = (0.5 / (((_2071 * ((_2409 * _2432) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2071 * _2432) + _2395) * _2409))) * _2409;
        float _4389 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2444 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
        float _2445 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2365 = (((_2431 * cbLight._m0[_2380].x) * _2444) * _2445) + _2255;
        _2367 = (((_2431 * cbLight._m0[_2380].y) * _2444) * _2445) + _2257;
        _2369 = (((_2431 * cbLight._m0[_2380].z) * _2444) * _2445) + _2259;
    }
    float _2580;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    if (_1904.y == 0u)
    {
        float _2520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2521 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2520;
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2520;
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2520;
        uvec4 _2535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2536 = _2535.x;
        uint _2547 = uint((float(_2535.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2536))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2536)));
        float _2557 = (log2(_2523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2558 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        uint _2561 = uint(isnan(14.0) ? _2558 : (isnan(_2558) ? 14.0 : min(_2558, 14.0)));
        uvec4 _2566 = texelFetch(g_lightClusterGridBuffer, int(((_2561 << 2u) + (_2547 << 6u)) >> 2u));
        uint _2567 = _2566.x;
        uint _2568 = _2535.z;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        if (((((1u << ((_2568 >> 4u) & 15u)) + 4294967295u) & _2567) == 0u) || ((_2568 & 240u) == 0u))
        {
            _2668 = 0.0;
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
        }
        else
        {
            float _2669;
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            uint _2827 = 0u;
            uint _2836;
            bool _2837;
            for (;;)
            {
                _2836 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2827 << 2u)) >> 2u)).x;
                _2837 = _2836 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2837)
                {
                    frontier_phi_66_pred = _2821;
                    frontier_phi_66_pred_1 = _2826;
                    frontier_phi_66_pred_2 = _2825;
                    frontier_phi_66_pred_3 = _2824;
                    frontier_phi_66_pred_4 = _2823;
                    frontier_phi_66_pred_5 = _2822;
                }
                else
                {
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    uint _2972;
                    _2966 = _2821;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2836;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    for (;;)
                    {
                        uint _2976 = uint(findLSB(_2972)) + (_2827 << 5u);
                        uint _2973 = (_2972 + 4294967295u) & _2972;
                        uint _2978 = _2976 * 48u;
                        vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2978)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2978 + 3u)).x));
                        uint _2998 = (_2976 * 48u) + 4u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2998)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2998 + 3u)).x));
                        uint _3017 = (_2976 * 48u) + 8u;
                        vec3 _3028 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x));
                        float _3032 = _2992.x - _2521;
                        float _3033 = _2992.y - _2522;
                        float _3034 = _2992.z - _2523;
                        float _3035 = dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034));
                        float _3038 = inversesqrt(_3035);
                        float _3039 = _3038 * _3032;
                        float _3040 = _3038 * _3033;
                        float _3041 = _3038 * _3034;
                        float _3042 = dot(vec3(_796, _799, _802), vec3(_3039, _3040, _3041));
                        float _3047 = 1.0 - (_3035 * _2992.w);
                        float _4415 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3049 = sqrt(_3035) * _3011.w;
                        float _3052 = 1.39999997615814208984375 / (_3049 + 1.39999997615814208984375);
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _3042) + _3053;
                        float _3059 = _3049 * _3049;
                        float _3063 = ((isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))) * _3048) / ((_3059 * 0.699999988079071044921875) + 1.0);
                        float _3067 = (-0.0) - _2521;
                        float _3068 = (-0.0) - _2522;
                        float _3069 = (-0.0) - _2523;
                        float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3084 = exp2(log2(1.0 / ((_3059 * 3.5) + 5.0)) * 0.25);
                        float _3085 = 1.0 - _856;
                        float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                        float _3093 = _3092 * _3092;
                        float _3094 = _3093 * _3093;
                        float _3095 = _3074 + _3039;
                        float _3096 = _3075 + _3040;
                        float _3097 = _3076 + _3041;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3105 = dot(vec3(_796, _799, _802), vec3(_3074, _3075, _3076));
                        float _4431 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                        float _3109 = dot(vec3(_796, _799, _802), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                        float _4442 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
                        float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                        float _3117 = _3052 * _3093;
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3042) + _3118;
                        float _4453 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3123 = 1.0 - _3093;
                        float _3133 = (0.5 / (((_3122 * ((_3108 * _3123) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3093) * _3108))) * _3122;
                        float _4464 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3144 = (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0)))) / ((_3116 * _3116) * ((_3059 * 2.1991131305694580078125) + 3.141590118408203125))) * _3048;
                        _2896 = (_3063 * _3011.x) + _2969;
                        _2897 = (_3063 * _3011.y) + _2970;
                        _2898 = (_3063 * _3011.z) + _2971;
                        _2893 = (_3144 * _3028.x) + _2966;
                        _2894 = (_3144 * _3028.y) + _2967;
                        _2895 = (_3144 * _3028.z) + _2968;
                        if (_2973 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2966 = _2893;
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2973;
                        }
                    }
                    frontier_phi_66_pred = _2893;
                    frontier_phi_66_pred_1 = _2898;
                    frontier_phi_66_pred_2 = _2897;
                    frontier_phi_66_pred_3 = _2896;
                    frontier_phi_66_pred_4 = _2895;
                    frontier_phi_66_pred_5 = _2894;
                }
                _2669 = frontier_phi_66_pred;
                _2679 = frontier_phi_66_pred_1;
                _2677 = frontier_phi_66_pred_2;
                _2675 = frontier_phi_66_pred_3;
                _2673 = frontier_phi_66_pred_4;
                _2671 = frontier_phi_66_pred_5;
                uint _2828 = _2827 + 1u;
                if (_2828 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2821 = _2669;
                    _2822 = _2671;
                    _2823 = _2673;
                    _2824 = _2675;
                    _2825 = _2677;
                    _2826 = _2679;
                    _2827 = _2828;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2668 = _2669;
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
        }
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.z;
        uint _2685 = (_2683 >> 8u) & 15u;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((4294967295u << _2685) & _2567) == 0u)
        {
            _2789 = _2668;
            _2791 = _2670;
            _2793 = _2672;
            _2795 = _2674;
            _2797 = _2676;
            _2799 = _2678;
        }
        else
        {
            float _2814 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
            float _2815 = _2814 * _2521;
            float _2816 = _2814 * _2522;
            float _2817 = _2814 * _2523;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2685 < ((_2683 >> 12u) & 15u))
            {
                float _2790;
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2949 = _2668;
                float _2950 = _2670;
                float _2951 = _2672;
                float _2952 = _2674;
                float _2953 = _2676;
                float _2954 = _2678;
                uint _2955 = _2685;
                uint _2964;
                bool _2965;
                for (;;)
                {
                    _2964 = texelFetch(g_lightClassification, int((((_2561 << 5u) + (_2547 << 9u)) + (_2955 << 2u)) >> 2u)).x;
                    _2965 = _2964 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2965)
                    {
                        frontier_phi_77_pred = _2954;
                        frontier_phi_77_pred_1 = _2953;
                        frontier_phi_77_pred_2 = _2952;
                        frontier_phi_77_pred_3 = _2951;
                        frontier_phi_77_pred_4 = _2950;
                        frontier_phi_77_pred_5 = _2949;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3171 = _2949;
                        float _3172 = _2950;
                        float _3173 = _2951;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        uint _3177 = _2964;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3246;
                        vec4 _3261;
                        float _3307;
                        bool _3308;
                        for (;;)
                        {
                            uint _3188 = ((_2955 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3233 = (_3188 * 40u) + 16u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3248 = (_3188 * 40u) + 20u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3188 * 40u) + 24u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3282 = (_3188 * 40u) + 28u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3307 = fma(_2523, _3295.z, fma(_2522, _3295.y, _3295.x * _2521)) + _3295.w;
                            _3308 = !((fma(_2523, _3276.z, fma(_2522, _3276.y, _3276.x * _2521)) + _3276.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3308)
                            {
                                float _3335 = _3203.x - _2521;
                                float _3336 = _3203.y - _2522;
                                float _3337 = _3203.z - _2523;
                                float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                                float _3341 = inversesqrt(_3338);
                                float _3342 = _3341 * _3335;
                                float _3343 = _3341 * _3336;
                                float _3344 = _3341 * _3337;
                                float _3348 = 1.0 - (_3338 / (_3204 * _3204));
                                float _4475 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3353 = sqrt(_3338) * _3219.w;
                                float _3355 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                                float _3356 = _3355 * _3355;
                                float _3359 = ((1.0 - _3356) * dot(vec3(_3342, _3343, _3344), vec3(_796, _799, _802))) + _3356;
                                float _3362 = _3353 * _3353;
                                float _3366 = (fma(_2523, _3246.z, fma(_2522, _3246.y, _3246.x * _2521)) + _3246.w) / _3307;
                                float _3367 = (fma(_2523, _3261.z, fma(_2522, _3261.y, _3261.x * _2521)) + _3261.w) / _3307;
                                float _3371 = 1.0 - dot(vec2(_3366, _3367), vec2(_3366, _3367));
                                float _4491 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                                float _3373 = _3372 * (((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3349) / ((_3362 * 0.699999988079071044921875) + 1.0));
                                float _3385 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                                float _3386 = 1.0 - _856;
                                float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                                float _3394 = _3393 * _3393;
                                float _3395 = _3394 * _3394;
                                float _3396 = _3342 - _2815;
                                float _3397 = _3343 - _2816;
                                float _3398 = _3344 - _2817;
                                float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                                float _3406 = dot(vec3(_796, _799, _802), vec3((-0.0) - _2815, (-0.0) - _2816, (-0.0) - _2817));
                                float _4502 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                                float _3410 = dot(vec3(_796, _799, _802), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                                float _4513 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                                float _3418 = _3355 * _3394;
                                float _3419 = _3418 * _3418;
                                float _3425 = ((1.0 - _3419) * dot(vec3(_796, _799, _802), vec3(_3342, _3343, _3344))) + _3419;
                                float _4524 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3427 = 1.0 - _3394;
                                float _3437 = (0.5 / (((_3426 * ((_3409 * _3427) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3394) * _3409))) * _3426;
                                float _4535 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3447 = (_3372 * _3349) * (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3417 * _3417) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3373 * _3219.y;
                                frontier_phi_83_pred_1 = _3373 * _3219.x;
                                frontier_phi_83_pred_2 = _3447 * _3231.z;
                                frontier_phi_83_pred_3 = _3447 * _3231.y;
                                frontier_phi_83_pred_4 = _3447 * _3231.x;
                                frontier_phi_83_pred_5 = _3373 * _3219.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3455 = frontier_phi_83_pred;
                            _3454 = frontier_phi_83_pred_1;
                            _3453 = frontier_phi_83_pred_2;
                            _3452 = frontier_phi_83_pred_3;
                            _3451 = frontier_phi_83_pred_4;
                            _3456 = frontier_phi_83_pred_5;
                            _3161 = _3454 + _3174;
                            _3162 = _3455 + _3175;
                            _3163 = _3456 + _3176;
                            _3158 = _3451 + _3171;
                            _3159 = _3452 + _3172;
                            _3160 = _3453 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3163;
                        frontier_phi_77_pred_1 = _3162;
                        frontier_phi_77_pred_2 = _3161;
                        frontier_phi_77_pred_3 = _3160;
                        frontier_phi_77_pred_4 = _3159;
                        frontier_phi_77_pred_5 = _3158;
                    }
                    _2800 = frontier_phi_77_pred;
                    _2798 = frontier_phi_77_pred_1;
                    _2796 = frontier_phi_77_pred_2;
                    _2794 = frontier_phi_77_pred_3;
                    _2792 = frontier_phi_77_pred_4;
                    _2790 = frontier_phi_77_pred_5;
                    uint _2956 = _2955 + 1u;
                    if (_2956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2949 = _2790;
                        _2950 = _2792;
                        _2951 = _2794;
                        _2952 = _2796;
                        _2953 = _2798;
                        _2954 = _2800;
                        _2955 = _2956;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2794;
                frontier_phi_58_59_ladder_1 = _2800;
                frontier_phi_58_59_ladder_2 = _2798;
                frontier_phi_58_59_ladder_3 = _2796;
                frontier_phi_58_59_ladder_4 = _2792;
                frontier_phi_58_59_ladder_5 = _2790;
            }
            else
            {
                frontier_phi_58_59_ladder = _2672;
                frontier_phi_58_59_ladder_1 = _2678;
                frontier_phi_58_59_ladder_2 = _2676;
                frontier_phi_58_59_ladder_3 = _2674;
                frontier_phi_58_59_ladder_4 = _2670;
                frontier_phi_58_59_ladder_5 = _2668;
            }
            _2789 = frontier_phi_58_59_ladder_5;
            _2791 = frontier_phi_58_59_ladder_4;
            _2793 = frontier_phi_58_59_ladder;
            _2795 = frontier_phi_58_59_ladder_3;
            _2797 = frontier_phi_58_59_ladder_2;
            _2799 = frontier_phi_58_59_ladder_1;
        }
        float _2804 = isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0));
        _2580 = (_2804 * _2795) + _2035;
        _2582 = (_2804 * _2797) + _2037;
        _2584 = (_2804 * _2799) + _2039;
        _2586 = ((_2789 * 0.039999999105930328369140625) * _2804) + _2365;
        _2588 = ((_2791 * 0.039999999105930328369140625) * _2804) + _2367;
        _2590 = ((_2793 * 0.039999999105930328369140625) * _2804) + _2369;
    }
    else
    {
        _2580 = _2035;
        _2582 = _2037;
        _2584 = _2039;
        _2586 = _2365;
        _2588 = _2367;
        _2590 = _2369;
    }
    float _4551 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4562 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4573 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2607 = ((isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2580 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _840))) + ((_2586 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    float _2608 = ((isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2582 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _840))) + ((_2588 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    float _2609 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2584 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _840))) + ((_2590 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    uint _2610 = _238 + 6u;
    float _2618 = _777 / cbSceneParam._m0[86u].x;
    float _2619 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2633 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2635 = _2633.x;
    float _2636 = _2633.y;
    float _2637 = _2633.z;
    float _2638 = _2633.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2693 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2694 = _2693 / _698;
        float _2705 = _2694 * _750;
        float _2706 = _751 * _2694;
        float _2707 = (-0.0) - _2706;
        float _2709 = _2694 * _752;
        float _2711 = (cbSceneParam._m0[77u].w * _2707) / _2693;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2706;
        float _2719 = sqrt(((_2705 * _2705) + (_2706 * _2706)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2693)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2906;
        if (abs((_2707 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2906 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2850 = 1.0 / cbSceneParam._m0[80u].x;
            float _2851 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2852 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            _2906 = ((abs(_2719 / _2707) * cbSceneParam._m0[80u].y) * ((((_2861 - _2862) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))))) * _2850)) - ((exp2(_2729 * _2861) - exp2(_2729 * _2862)) * _2850))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2908 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2618, _2619, 1.0), 0.0);
        float _2917 = exp2((_2906 * (-1.44269502162933349609375)) * (1.0 - _2908.w));
        float _2918 = log2(_2917);
        float _2934 = log2(_2638);
        _2731 = (exp2(_2934 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].x)) * _2908.x) / cbSceneParam._m0[78u].x)) + _2635;
        _2733 = (exp2(_2934 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].y)) * _2908.y) / cbSceneParam._m0[78u].y)) + _2636;
        _2735 = (exp2(_2934 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2918 * cbSceneParam._m0[78u].z)) * _2908.z) / cbSceneParam._m0[78u].z)) + _2637;
        _2737 = _2917 * _2638;
    }
    else
    {
        _2731 = _2635;
        _2733 = _2636;
        _2735 = _2637;
        _2737 = _2638;
    }
    bool _2944;
    vec4 _2747;
    vec4 _2769;
    float _2771;
    float _2775;
    float _2776;
    float _2777;
    float _2778;
    bool _2788;
    for (;;)
    {
        _2747 = cbMatDynParam._m0[0u];
        float _2749 = roundEven(_2747.y);
        bool _2750 = _2749 == 3.0;
        float _2751 = log2(_2737);
        float _2758 = exp2(_2751 * cbSceneParam._m0[78u].x) * _2607;
        float _2759 = exp2(_2751 * cbSceneParam._m0[78u].y) * _2608;
        float _2760 = exp2(_2751 * cbSceneParam._m0[78u].z) * _2609;
        float _2767 = _766 + (-0.5);
        _2769 = cbMtdParam._m0[1u];
        _2771 = _2769.y * _2767;
        float _2774 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2775 = _2774 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
        _2776 = _2774 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
        _2777 = _2774 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
        _2778 = _2767 * 0.999000012874603271484375;
        _2788 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2788)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2778) < 0.5)
            {
                _2944 = true;
                break;
            }
        }
        uint _2885 = _815 + uint(_2747.w);
        if ((cbInstanceData._m0[_2885].w < 1.0) && ((cbInstanceData._m0[_2885].w + _2778) < 0.5))
        {
            _2944 = true;
            break;
        }
        if ((_2771 + 1.0) < _2769.x)
        {
            _2944 = true;
            break;
        }
        _2944 = false;
        break;
    }
    float _3149;
    if (_2944)
    {
        discard_state = true;
        _3149 = 0.0;
    }
    else
    {
        _3149 = cbInstanceData._m0[_2610].w;
    }
    SV_Target.x = _2775;
    SV_Target.y = _2776;
    SV_Target.z = _2777;
    SV_Target.w = _3149;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2610].w;
    discard_exit();
}


