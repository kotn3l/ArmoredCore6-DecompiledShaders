#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _862;
float _3513;
float _3514;
float _3515;
float _3516;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _233 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _254 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _258 = _254.z;
    float _263 = (_254.x * 2.0) + (-1.0);
    float _265 = (_254.y * 2.0) + (-1.0);
    float _266 = dot(vec2(_263, _265), vec2(_263, _265));
    float _3525 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _272 = sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))));
    float _277 = cbMtdParam._m0[22u].x + _254.w;
    float _280 = fma(_272, _203 * NORMAL.x, fma(_265, _210 * TANGENT.x, (_196 * _188) * _263));
    float _283 = fma(_272, _203 * NORMAL.y, fma(_265, _210 * TANGENT.y, (_196 * _189) * _263));
    float _286 = fma(_272, _203 * NORMAL.z, fma(_265, _210 * TANGENT.z, (_196 * _190) * _263));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3536 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _294 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _3547 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3558 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3569 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3580 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _314 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _541 = sqrt(((_366 * _366) + (_367 * _367)) + (_368 * _368));
        float _547 = (cbMatDynParam._m0[5u].x * _541) + cbMatDynParam._m0[5u].y;
        float _3591 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
        float _548 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _552 = (cbMatDynParam._m0[5u].z * _541) + cbMatDynParam._m0[5u].w;
        float _3602 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) - _548)) + _548) < ((_382 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _415 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _418 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _421 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _434 = uint(roundEven(NORMAL.w)) * 13u;
    uint _436 = _434 + 9u;
    uint _437 = _436 + uint(cbMatDynParam._m0[0u].w);
    float _443 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_437].x;
    float _444 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_437].y;
    float _445 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_437].z;
    float _3613 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    vec4 _457 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _461 = ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * TEXCOORD_5.w) * _457.x;
    float _462 = dot(vec3(_291, _292, _293), vec3(_373, _374, _375));
    float _465 = _462 * 2.0;
    float _469 = (_465 * _291) - _373;
    float _470 = (_465 * _292) - _374;
    float _471 = (_465 * _293) - _375;
    float _475 = abs(dot(vec3(_373, _374, _375), vec3(_291, _292, _293)));
    float _3646 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _477 = sqrt(_294);
    float _490 = exp2((_477 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_477 * 3.0));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _861;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = fma(_530, cbModelParam._m0[26u].z, fma(_526, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _522));
        float _590 = fma(_530, cbModelParam._m0[27u].z, fma(_526, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _522));
        float _594 = fma(_530, cbModelParam._m0[28u].z, fma(_526, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _522));
        float _619 = _522 + _291;
        float _620 = _526 + _292;
        float _621 = _530 + _293;
        float _631 = fma(_621, cbModelParam._m0[26u].z, fma(_620, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619)) - _586;
        float _632 = fma(_621, cbModelParam._m0[27u].z, fma(_620, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619)) - _590;
        float _633 = fma(_621, cbModelParam._m0[28u].z, fma(_620, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619)) - _594;
        float _637 = inversesqrt(dot(vec3(_631, _632, _633), vec3(_631, _632, _633)));
        float _650 = ((_637 * _631) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_586 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_637 * _632) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_590 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_637 * _633) / cbModelParam._m0[34u].z) + ((((((_594 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_650, _651, _652), 0.0);
        float _689 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _690 = _689 * (_655.x + (-0.5));
        float _691 = _689 * (_655.y + (-0.5));
        float _692 = _689 * (_655.z + (-0.5));
        float _699 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _700 = _699 * (_662.x + (-0.5));
        float _701 = _699 * (_662.y + (-0.5));
        float _702 = _699 * (_662.z + (-0.5));
        float _709 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _710 = _709 * (_669.x + (-0.5));
        float _711 = _709 * (_669.y + (-0.5));
        float _712 = _709 * (_669.z + (-0.5));
        float _719 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_676.x + (-0.5));
        float _721 = _719 * (_676.y + (-0.5));
        float _722 = _719 * (_676.z + (-0.5));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = _690 * 0.5;
        float _727 = _700 * 0.5;
        float _728 = _710 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _743 = (dot(vec3(_291, _292, _293), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _753 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3694 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_755 + 1.0))) + _760) * _723;
        float _770 = _691 * 0.5;
        float _771 = _701 * 0.5;
        float _772 = _711 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _786 = (dot(vec3(_291, _292, _293), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _795 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3727 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_797 + 1.0))) + _802) * _724;
        float _812 = _692 * 0.5;
        float _813 = _702 * 0.5;
        float _814 = _712 * 0.5;
        float _815 = dot(vec3(_812, _813, _814), vec3(_812, _813, _814));
        float _820 = (_815 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_815);
        float _828 = (dot(vec3(_291, _292, _293), vec3(_820 * _812, _820 * _813, _820 * _814)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _837 = sqrt(((_813 * _813) + (_812 * _812)) + (_814 * _814)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _839 = _838 * 2.0;
        float _843 = (1.0 - _838) / (_838 + 1.0);
        float _3760 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _853 = ((((1.0 - _844) * (_839 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_839 + 1.0))) + _844) * _725;
        _861 = _692;
        _863 = _691;
        _864 = _690;
        _865 = _702;
        _866 = _701;
        _867 = _700;
        _868 = _712;
        _869 = _711;
        _870 = _710;
        _871 = _725;
        _872 = _724;
        _873 = _723;
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0)));
    }
    else
    {
        _861 = _862;
        _863 = _862;
        _864 = _862;
        _865 = _862;
        _866 = _862;
        _867 = _862;
        _868 = _862;
        _869 = _862;
        _870 = _862;
        _871 = _862;
        _872 = _862;
        _873 = _862;
        _874 = 0.0;
        _875 = 0.0;
        _876 = 0.0;
    }
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _904 = fma(_530, cbModelParam._m0[30u].z, fma(_526, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _522));
        float _908 = fma(_530, cbModelParam._m0[31u].z, fma(_526, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _522));
        float _912 = fma(_530, cbModelParam._m0[32u].z, fma(_526, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _522));
        float _935 = _522 + _291;
        float _936 = _526 + _292;
        float _937 = _530 + _293;
        float _947 = fma(_937, cbModelParam._m0[30u].z, fma(_936, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _935)) - _904;
        float _948 = fma(_937, cbModelParam._m0[31u].z, fma(_936, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _935)) - _908;
        float _949 = fma(_937, cbModelParam._m0[32u].z, fma(_936, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _935)) - _912;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_904 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_908 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[35u].z) + ((((((_912 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1003 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_970.x + (-0.5));
        float _1005 = _1003 * (_970.y + (-0.5));
        float _1006 = _1003 * (_970.z + (-0.5));
        float _1013 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_977.x + (-0.5));
        float _1015 = _1013 * (_977.y + (-0.5));
        float _1016 = _1013 * (_977.z + (-0.5));
        float _1023 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_984.x + (-0.5));
        float _1025 = _1023 * (_984.y + (-0.5));
        float _1026 = _1023 * (_984.z + (-0.5));
        float _1033 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_991.x + (-0.5));
        float _1035 = _1033 * (_991.y + (-0.5));
        float _1036 = _1033 * (_991.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_291, _292, _293), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3823 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1067 + 1.0))) + _1072) * _1037;
        float _1082 = _1005 * 0.5;
        float _1083 = _1015 * 0.5;
        float _1084 = _1025 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_291, _292, _293), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3856 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1109 + 1.0))) + _1114) * _1038;
        float _1124 = _1006 * 0.5;
        float _1125 = _1016 * 0.5;
        float _1126 = _1026 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_291, _292, _293), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3889 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1151 + 1.0))) + _1156) * _1039;
        _1173 = _1006;
        _1174 = _1005;
        _1175 = _1004;
        _1176 = _1016;
        _1177 = _1015;
        _1178 = _1014;
        _1179 = _1026;
        _1180 = _1025;
        _1181 = _1024;
        _1182 = _1039;
        _1183 = _1038;
        _1184 = _1037;
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1187 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _862;
        _1174 = _862;
        _1175 = _862;
        _1176 = _862;
        _1177 = _862;
        _1178 = _862;
        _1179 = _862;
        _1180 = _862;
        _1181 = _862;
        _1182 = _862;
        _1183 = _862;
        _1184 = _862;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _874)) + _874;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _875)) + _875;
    float _1199 = (cbModelParam._m0[1u].x * (_1187 - _876)) + _876;
    float _1220 = fma(_1199, cbSceneParam._m0[89u].z, fma(_1198, cbSceneParam._m0[89u].y, _1197 * cbSceneParam._m0[89u].x));
    float _1223 = fma(_1199, cbSceneParam._m0[90u].z, fma(_1198, cbSceneParam._m0[90u].y, _1197 * cbSceneParam._m0[90u].x));
    float _1226 = fma(_1199, cbSceneParam._m0[91u].z, fma(_1198, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1197));
    float _1241 = _469 * 0.5;
    float _1242 = _470 * 0.5;
    float _1243 = _471 * 0.5;
    float _1244 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1175, _1178, _1181, _1184));
    float _1247 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1250 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1284;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1257 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_861, _865, _868, _871));
        float _1261 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_863, _866, _869, _872));
        float _1265 = dot(vec4(_1241, _1242, _1243, 1.0), vec4(_864, _867, _870, _873));
        float _1272 = dot(vec4(cbModelParam._m0[39u]), vec4(_1241, _1242, _1243, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1272) ? 0.0 : (isnan(0.0) ? _1272 : max(0.0, _1272))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1295;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1286 = dot(vec4(cbModelParam._m0[40u]), vec4(_1241, _1242, _1243, 1.0));
        _1295 = dot(vec3(isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1295 = 1.0;
    }
    float _1299 = (_1295 * cbModelParam._m0[1u].x) + (_1284 * (1.0 - cbModelParam._m0[1u].x));
    float _1309 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _294);
    float _1310 = isnan(_1309) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1309 : min(cbModelParam._m0[25u].z, _1309));
    float _1392;
    float _1394;
    float _1396;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1359 = fma(_530, cbModelParam._m0[13u].z, fma(_526, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _522)) + cbModelParam._m0[13u].w;
        float _1363 = fma(_530, cbModelParam._m0[14u].z, fma(_526, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _522)) + cbModelParam._m0[14u].w;
        float _1367 = fma(_530, cbModelParam._m0[15u].z, fma(_526, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _522)) + cbModelParam._m0[15u].w;
        float _1370 = fma(_471, cbModelParam._m0[13u].z, fma(_470, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _469));
        float _1373 = fma(_471, cbModelParam._m0[14u].z, fma(_470, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _469));
        float _1376 = fma(_471, cbModelParam._m0[15u].z, fma(_470, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _469));
        float _1404;
        if (_1370 > 0.0)
        {
            _1404 = abs((1.0 - _1359) / _1370);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1359 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1404 = frontier_phi_17_15_ladder;
        }
        float _1577;
        if (_1373 > 0.0)
        {
            _1577 = abs((1.0 - _1363) / _1373);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1363 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1577 = frontier_phi_26_22_ladder;
        }
        float _1873;
        if (_1376 > 0.0)
        {
            _1873 = abs((1.0 - _1367) / _1376);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1367 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1873 = frontier_phi_38_33_ladder;
        }
        float _1875 = isnan(_1577) ? _1404 : (isnan(_1404) ? _1577 : min(_1404, _1577));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1370) + _1359;
        float _1881 = (_1876 * _1373) + _1363;
        float _1882 = (_1876 * _1376) + _1367;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1310);
            frontier_phi_16_38_ladder = _2027.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2027.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2027.x * cbModelParam._m0[1u].y;
        }
        _1392 = frontier_phi_16_38_ladder_2;
        _1394 = frontier_phi_16_38_ladder_1;
        _1396 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1380 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_469, _470, _471), _1310);
        _1392 = _1380.x * cbModelParam._m0[1u].y;
        _1394 = _1380.y * cbModelParam._m0[1u].y;
        _1396 = _1380.z * cbModelParam._m0[1u].y;
    }
    float _1400 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _294);
    float _1401 = isnan(_1400) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1400 : min(cbModelParam._m0[25u].w, _1400));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_530, cbModelParam._m0[21u].z, fma(_526, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _522)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_530, cbModelParam._m0[22u].z, fma(_526, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _522)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_530, cbModelParam._m0[23u].z, fma(_526, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _522)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_471, cbModelParam._m0[21u].z, fma(_470, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _469));
        float _1471 = fma(_471, cbModelParam._m0[22u].z, fma(_470, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _469));
        float _1474 = fma(_471, cbModelParam._m0[23u].z, fma(_470, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _469));
        float _1582;
        if (_1468 > 0.0)
        {
            _1582 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1582 = frontier_phi_28_24_ladder;
        }
        float _1900;
        if (_1471 > 0.0)
        {
            _1900 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1900 = frontier_phi_40_35_ladder;
        }
        float _2227;
        if (_1474 > 0.0)
        {
            _2227 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2227 = frontier_phi_50_47_ladder;
        }
        float _2229 = isnan(_1900) ? _1582 : (isnan(_1582) ? _1900 : min(_1582, _1900));
        float _2230 = isnan(_2227) ? _2229 : (isnan(_2229) ? _2227 : min(_2229, _2227));
        float _2234 = (_2230 * _1468) + _1457;
        float _2235 = (_2230 * _1471) + _1461;
        float _2236 = (_2230 * _1474) + _1465;
        float _2237 = _2230 * 9.9999997473787516355514526367188e-05;
        float _2238 = (-1.0) - _2237;
        float _2240 = _2237 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2236 > _2240) || ((_2236 < _2238) || ((_2235 > _2240) || ((_2235 < _2238) || ((_2234 < _2238) || (_2234 > _2240))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2236, cbModelParam._m0[17u].z, fma(_2235, cbModelParam._m0[17u].y, _2234 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2236, cbModelParam._m0[18u].z, fma(_2235, cbModelParam._m0[18u].y, _2234 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2236, cbModelParam._m0[19u].z, fma(_2235, cbModelParam._m0[19u].y, _2234 * cbModelParam._m0[19u].x))), _1401);
            frontier_phi_25_50_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_25_50_ladder_2;
        _1495 = frontier_phi_25_50_ladder_1;
        _1497 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_469, _470, _471), _1401);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1509 = ((((1.0 - _490) * ((_477 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_490 * _477)) * _461;
    float _1510 = _1509 * ((cbModelParam._m0[1u].w * (_1493 - _1392)) + _1392);
    float _1511 = _1509 * ((cbModelParam._m0[1u].w * (_1495 - _1394)) + _1394);
    float _1512 = _1509 * ((cbModelParam._m0[1u].w * (_1497 - _1396)) + _1396);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    float _1556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1569 = _1556 / _1568;
    float _1570 = _1560 / _1568;
    float _1571 = _1564 / _1568;
    float _1718;
    float _1719;
    float _1720;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1598 = ((uint(_1571 > cbSceneParam._m0[59u].y) + uint(_1571 > cbSceneParam._m0[59u].x)) + uint(_1571 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1599 = _1598 + 43u;
        uint _1607 = _1598 + 44u;
        uint _1615 = _1598 + 45u;
        uint _1623 = _1598 + 46u;
        float _1634 = fma(_1568, cbSceneParam._m0[_1599].w, fma(_1564, cbSceneParam._m0[_1599].z, fma(_1560, cbSceneParam._m0[_1599].y, _1556 * cbSceneParam._m0[_1599].x)));
        float _1638 = fma(_1568, cbSceneParam._m0[_1607].w, fma(_1564, cbSceneParam._m0[_1607].z, fma(_1560, cbSceneParam._m0[_1607].y, _1556 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1568, cbSceneParam._m0[_1623].w, fma(_1564, cbSceneParam._m0[_1623].z, fma(_1560, cbSceneParam._m0[_1623].y, _1556 * cbSceneParam._m0[_1623].x)));
        float _1651 = cbSceneParam._m0[33u].z * _1646;
        float _1653 = cbSceneParam._m0[33u].w * _1646;
        float _1656 = fma(_1568, cbSceneParam._m0[_1615].w, fma(_1564, cbSceneParam._m0[_1615].z, fma(_1560, cbSceneParam._m0[_1615].y, _1556 * cbSceneParam._m0[_1615].x))) / _1646;
        float _1704 = (cbSceneParam._m0[33u].x - sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571))) * cbSceneParam._m0[33u].y;
        float _4015 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1711 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 + _1634) / _1646, (_1653 + _1638) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1653 + _1634) / _1646, (_1638 - _1651) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 - _1651) / _1646, (_1638 - _1653) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 - _1653) / _1646, (_1651 + _1638) / _1646), _1656), 0.0)).x), vec4(0.25)));
        _1718 = 1.0 - (_1711 * cbSceneParam._m0[34u].x);
        _1719 = 1.0 - (_1711 * cbSceneParam._m0[34u].y);
        _1720 = 1.0 - (_1711 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1718 = 1.0;
        _1719 = 1.0;
        _1720 = 1.0;
    }
    float _1784;
    float _1786;
    float _1788;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1772 = fma(_1568, cbSceneParam._m0[63u].w, fma(_1564, cbSceneParam._m0[63u].z, fma(_1560, cbSceneParam._m0[63u].y, _1556 * cbSceneParam._m0[63u].x)));
        float _1773 = fma(_1568, cbSceneParam._m0[60u].w, fma(_1564, cbSceneParam._m0[60u].z, fma(_1560, cbSceneParam._m0[60u].y, _1556 * cbSceneParam._m0[60u].x))) / _1772;
        float _1774 = fma(_1568, cbSceneParam._m0[61u].w, fma(_1564, cbSceneParam._m0[61u].z, fma(_1560, cbSceneParam._m0[61u].y, _1556 * cbSceneParam._m0[61u].x))) / _1772;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1773 >= cbSceneParam._m0[64u].x) && (_1774 >= cbSceneParam._m0[64u].y)) && (_1773 <= cbSceneParam._m0[64u].z)) && (_1774 <= cbSceneParam._m0[64u].w))
        {
            float _1913 = fma(_1568, cbSceneParam._m0[62u].w, fma(_1564, cbSceneParam._m0[62u].z, fma(_1560, cbSceneParam._m0[62u].y, _1556 * cbSceneParam._m0[62u].x))) / _1772;
            float _1917 = isnan(cbSceneParam._m0[41u].w) ? _1913 : (isnan(_1913) ? cbSceneParam._m0[41u].w : max(_1913, cbSceneParam._m0[41u].w));
            float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571))) * cbSceneParam._m0[33u].y;
            float _4031 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
            float _1967 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1773, cbSceneParam._m0[33u].w + _1774), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1773, _1774 - cbSceneParam._m0[33u].z), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1773 - cbSceneParam._m0[33u].z, _1774 - cbSceneParam._m0[33u].w), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1773 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1774), _1917), 0.0)).x), vec4(0.25)));
            float _1971 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
            float _1972 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
            float _1973 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1973) ? _1720 : (isnan(_1720) ? _1973 : min(_1720, _1973));
            frontier_phi_37_36_ladder_1 = isnan(_1972) ? _1719 : (isnan(_1719) ? _1972 : min(_1719, _1972));
            frontier_phi_37_36_ladder_2 = isnan(_1971) ? _1718 : (isnan(_1718) ? _1971 : min(_1718, _1971));
        }
        else
        {
            frontier_phi_37_36_ladder = _1720;
            frontier_phi_37_36_ladder_1 = _1719;
            frontier_phi_37_36_ladder_2 = _1718;
        }
        _1784 = frontier_phi_37_36_ladder_2;
        _1786 = frontier_phi_37_36_ladder_1;
        _1788 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1784 = _1718;
        _1786 = _1719;
        _1788 = _1720;
    }
    uvec4 _1793 = floatBitsToUint(cbInstanceData._m0[_434 + 5u]);
    uint _1795 = _1793.x * 14u;
    uint _1796 = _1795 + 13u;
    float _1803 = _461 + (-1.0);
    float _1808 = (cbLight._m0[_1796].x * _1803) + 1.0;
    float _1809 = (cbLight._m0[_1796].y * _1803) + 1.0;
    float _1810 = (cbLight._m0[_1796].z * _1803) + 1.0;
    float _1811 = (cbLight._m0[_1796].w * _1803) + 1.0;
    uint _1812 = _1795 + 5u;
    float _1818 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1822 = _1795 + 4u;
    float _1832 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1836 = _1795 | 1u;
    float _1847 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_291, _292, _293));
    float _1850 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_291, _292, _293));
    float _4067 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _4078 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1855 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1857 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1864 = ((cbLight._m0[_1812].x * _1818) * _1857) + (((cbLight._m0[_1822].x * _1784) * _1832) * _1855);
    float _1865 = ((_1818 * cbLight._m0[_1812].y) * _1857) + (((cbLight._m0[_1822].y * _1786) * _1832) * _1855);
    float _1866 = ((_1818 * cbLight._m0[_1812].z) * _1857) + (((cbLight._m0[_1822].z * _1788) * _1832) * _1855);
    uvec4 _1870 = floatBitsToUint(cbLight._m0[_1795 + 12u]);
    bool _1872 = _1870.x == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1872)
    {
        _1974 = _1864;
        _1976 = _1865;
        _1978 = _1866;
    }
    else
    {
        uint _1982 = _1795 + 6u;
        float _1998 = (dot(vec3(cbLight._m0[_1795 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _4089 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2001 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1974 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1864;
        _1976 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1865;
        _1978 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1866;
    }
    bool _1981 = _1870.y == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1981)
    {
        _2036 = _1974;
        _2038 = _1976;
        _2040 = _1978;
    }
    else
    {
        uint _2198 = _1795 + 7u;
        float _2214 = (dot(vec3(cbLight._m0[_1795 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _2215 = _2214 * _2214;
        float _4105 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2216 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2217 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2036 = (((cbLight._m0[_2198].x * 0.3183098733425140380859375) * _2216) * _2217) + _1974;
        _2038 = (((cbLight._m0[_2198].y * 0.3183098733425140380859375) * _2216) * _2217) + _1976;
        _2040 = (((cbLight._m0[_2198].z * 0.3183098733425140380859375) * _2216) * _2217) + _1978;
    }
    uint _2043 = _1795 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _294) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1795].x + _373;
    float _2059 = cbLight._m0[_1795].y + _374;
    float _2060 = cbLight._m0[_1795].z + _375;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1795].xyz));
    float _4121 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2072 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2073 = dot(vec3(_291, _292, _293), vec3(_2065, _2066, _2067));
    float _4143 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_2065, _2066, _2067));
    float _4154 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2097 = 1.0 - _2057;
    float _2108 = (0.5 / (((_2072 * ((_2071 * _2097) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2097) + _2057) * _2071))) * _2071;
    float _4165 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2124 = _1795 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _294) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_1836].x + _373;
    float _2138 = cbLight._m0[_1836].y + _374;
    float _2139 = cbLight._m0[_1836].z + _375;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1836].xyz));
    float _4176 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2151 = dot(vec3(_291, _292, _293), vec3(_2144, _2145, _2146));
    float _4187 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_2144, _2145, _2146));
    float _4198 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2136;
    float _2183 = (0.5 / (((_2072 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2173) + _2136) * _2150))) * _2150;
    float _4209 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2195 = (((_2172 * cbLight._m0[_2124].x) * _2185) * _1818) + ((((cbLight._m0[_2043].x * _1784) * _2096) * _2110) * _1832);
    float _2196 = (((_2172 * cbLight._m0[_2124].y) * _2185) * _1818) + ((((cbLight._m0[_2043].y * _1786) * _2096) * _2110) * _1832);
    float _2197 = (((_2172 * cbLight._m0[_2124].z) * _2185) * _1818) + ((((cbLight._m0[_2043].z * _1788) * _2096) * _2110) * _1832);
    float _2253;
    float _2255;
    float _2257;
    if (_1872)
    {
        _2253 = _2195;
        _2255 = _2196;
        _2257 = _2197;
    }
    else
    {
        uint _2259 = _1795 + 2u;
        uint _2263 = _1795 + 10u;
        float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _294) * 0.949999988079071044921875);
        float _2278 = _2277 * _2277;
        float _2279 = cbLight._m0[_2259].x + _373;
        float _2280 = cbLight._m0[_2259].y + _374;
        float _2281 = cbLight._m0[_2259].z + _375;
        float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
        float _2286 = _2285 * _2279;
        float _2287 = _2285 * _2280;
        float _2288 = _2285 * _2281;
        float _2289 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2259].xyz));
        float _4220 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2293 = dot(vec3(_291, _292, _293), vec3(_2286, _2287, _2288));
        float _4231 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2297 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2286, _2287, _2288));
        float _4242 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2301 = _2278 * _2278;
        float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
        float _2314 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2315 = 1.0 - _2278;
        float _2325 = (0.5 / (((_2072 * ((_2292 * _2315) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2315) + _2278) * _2292))) * _2292;
        float _4253 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2253 = (((_2314 * cbLight._m0[_2263].x) * _2327) * _2328) + _2195;
        _2255 = (((_2314 * cbLight._m0[_2263].y) * _2327) * _2328) + _2196;
        _2257 = (((_2314 * cbLight._m0[_2263].z) * _2327) * _2328) + _2197;
    }
    float _2359;
    float _2361;
    float _2363;
    if (_1981)
    {
        _2359 = _2253;
        _2361 = _2255;
        _2363 = _2257;
    }
    else
    {
        uint _2370 = _1795 + 3u;
        uint _2374 = _1795 + 11u;
        float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2370].w)) * _294) * 0.949999988079071044921875);
        float _2389 = _2388 * _2388;
        float _2390 = cbLight._m0[_2370].x + _373;
        float _2391 = cbLight._m0[_2370].y + _374;
        float _2392 = cbLight._m0[_2370].z + _375;
        float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
        float _2397 = _2396 * _2390;
        float _2398 = _2396 * _2391;
        float _2399 = _2396 * _2392;
        float _2400 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2370].xyz));
        float _4269 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2403 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2404 = dot(vec3(_291, _292, _293), vec3(_2397, _2398, _2399));
        float _4280 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2408 = dot(vec3(cbLight._m0[_2370].xyz), vec3(_2397, _2398, _2399));
        float _4291 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2412 = _2389 * _2389;
        float _2416 = ((_2407 * _2407) * (_2412 + (-1.0))) + 1.0;
        float _2425 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2426 = 1.0 - _2389;
        float _2436 = (0.5 / (((_2072 * ((_2403 * _2426) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2426) + _2389) * _2403))) * _2403;
        float _4302 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2438 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2412 / ((_2416 * _2416) * 3.141590118408203125));
        float _2439 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2359 = (((_2425 * cbLight._m0[_2374].x) * _2438) * _2439) + _2253;
        _2361 = (((_2425 * cbLight._m0[_2374].y) * _2438) * _2439) + _2255;
        _2363 = (((_2425 * cbLight._m0[_2374].z) * _2438) * _2439) + _2257;
    }
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    if (_1793.y == 0u)
    {
        uvec4 _2460 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2461 = _2460.x;
        uint _2472 = uint((float(_2460.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2461))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2461)));
        float _2482 = (log2(_1571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2483 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        uint _2486 = uint(isnan(14.0) ? _2483 : (isnan(_2483) ? 14.0 : min(_2483, 14.0)));
        uvec4 _2491 = texelFetch(g_lightClusterGridBuffer, int(((_2486 << 2u) + (_2472 << 6u)) >> 2u));
        uint _2492 = _2491.x;
        uint _2493 = _2460.z;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((((1u << ((_2493 >> 4u) & 15u)) + 4294967295u) & _2492) == 0u) || ((_2493 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            float _2730 = 0.0;
            uint _2731 = 0u;
            uint _2740;
            bool _2741;
            for (;;)
            {
                _2740 = texelFetch(g_lightClassification, int((((_2486 << 5u) + (_2472 << 9u)) + (_2731 << 2u)) >> 2u)).x;
                _2741 = _2740 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2741)
                {
                    frontier_phi_71_pred = _2730;
                    frontier_phi_71_pred_1 = _2729;
                    frontier_phi_71_pred_2 = _2728;
                    frontier_phi_71_pred_3 = _2727;
                    frontier_phi_71_pred_4 = _2726;
                    frontier_phi_71_pred_5 = _2725;
                }
                else
                {
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    float _2875;
                    uint _2876;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2728;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2740;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    for (;;)
                    {
                        uint _2880 = uint(findLSB(_2876)) + (_2731 << 5u);
                        uint _2877 = (_2876 + 4294967295u) & _2876;
                        uint _2882 = _2880 * 48u;
                        vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2882)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2882 + 3u)).x));
                        uint _2902 = (_2880 * 48u) + 4u;
                        vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2921 = (_2880 * 48u) + 8u;
                        vec3 _2932 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x));
                        float _2936 = _2896.x - _1569;
                        float _2937 = _2896.y - _1570;
                        float _2938 = _2896.z - _1571;
                        float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                        float _2942 = inversesqrt(_2939);
                        float _2943 = _2942 * _2936;
                        float _2944 = _2942 * _2937;
                        float _2945 = _2942 * _2938;
                        float _2946 = dot(vec3(_415, _418, _421), vec3(_2943, _2944, _2945));
                        float _2951 = 1.0 - (_2939 * _2896.w);
                        float _4328 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2952 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _2953 = sqrt(_2939) * _2915.w;
                        float _2956 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2946) + _2957;
                        float _2963 = _2953 * _2953;
                        float _2967 = ((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2952) / ((_2963 * 0.699999988079071044921875) + 1.0);
                        float _2971 = (-0.0) - _1569;
                        float _2972 = (-0.0) - _1570;
                        float _2973 = (-0.0) - _1571;
                        float _2977 = inversesqrt(dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973)));
                        float _2978 = _2977 * _2971;
                        float _2979 = _2977 * _2972;
                        float _2980 = _2977 * _2973;
                        float _2987 = exp2(log2(1.0 / ((_2963 * 3.5) + 5.0)) * 0.25);
                        float _2988 = 1.0 - _477;
                        float _2995 = sqrt(1.0 - ((1.0 - (_2988 * _2988)) * (1.0 - (_2987 * _2987))));
                        float _2996 = _2995 * _2995;
                        float _2997 = _2996 * _2996;
                        float _2998 = _2978 + _2943;
                        float _2999 = _2979 + _2944;
                        float _3000 = _2980 + _2945;
                        float _3004 = inversesqrt(dot(vec3(_2998, _2999, _3000), vec3(_2998, _2999, _3000)));
                        float _3008 = dot(vec3(_415, _418, _421), vec3(_2978, _2979, _2980));
                        float _4344 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3012 = dot(vec3(_415, _418, _421), vec3(_3004 * _2998, _3004 * _2999, _3004 * _3000));
                        float _4355 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3019 = ((_3015 * _3015) * (_2997 + (-1.0))) + 1.0;
                        float _3020 = _2956 * _2996;
                        float _3021 = _3020 * _3020;
                        float _3024 = ((1.0 - _3021) * _2946) + _3021;
                        float _4366 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3025 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3026 = 1.0 - _2996;
                        float _3036 = (0.5 / (((_3025 * ((_3011 * _3026) + _2996)) + 9.9999999392252902907785028219223e-09) + (((_3025 * _3026) + _2996) * _3011))) * _3025;
                        float _4377 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3047 = (((_2997 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3019 * _3019) * ((_2963 * 2.1991131305694580078125) + 3.141590118408203125))) * _2952;
                        _2800 = (_2967 * _2915.x) + _2873;
                        _2801 = (_2967 * _2915.y) + _2874;
                        _2802 = (_2967 * _2915.z) + _2875;
                        _2797 = (_3047 * _2932.x) + _2870;
                        _2798 = (_3047 * _2932.y) + _2871;
                        _2799 = (_3047 * _2932.z) + _2872;
                        if (_2877 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2800;
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2877;
                        }
                    }
                    frontier_phi_71_pred = _2802;
                    frontier_phi_71_pred_1 = _2801;
                    frontier_phi_71_pred_2 = _2800;
                    frontier_phi_71_pred_3 = _2799;
                    frontier_phi_71_pred_4 = _2798;
                    frontier_phi_71_pred_5 = _2797;
                }
                _2583 = frontier_phi_71_pred;
                _2581 = frontier_phi_71_pred_1;
                _2579 = frontier_phi_71_pred_2;
                _2577 = frontier_phi_71_pred_3;
                _2575 = frontier_phi_71_pred_4;
                _2573 = frontier_phi_71_pred_5;
                uint _2732 = _2731 + 1u;
                if (_2732 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2725 = _2573;
                    _2726 = _2575;
                    _2727 = _2577;
                    _2728 = _2579;
                    _2729 = _2581;
                    _2730 = _2583;
                    _2731 = _2732;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
        }
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.z;
        uint _2589 = (_2587 >> 8u) & 15u;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        if (((4294967295u << _2589) & _2492) == 0u)
        {
            _2693 = _2572;
            _2695 = _2574;
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
            _2703 = _2582;
        }
        else
        {
            float _2718 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
            float _2719 = _2718 * _1569;
            float _2720 = _2718 * _1570;
            float _2721 = _2718 * _1571;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2589 < ((_2587 >> 12u) & 15u))
            {
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2853 = _2572;
                float _2854 = _2574;
                float _2855 = _2576;
                float _2856 = _2578;
                float _2857 = _2580;
                float _2858 = _2582;
                uint _2859 = _2589;
                uint _2868;
                bool _2869;
                for (;;)
                {
                    _2868 = texelFetch(g_lightClassification, int((((_2486 << 5u) + (_2472 << 9u)) + (_2859 << 2u)) >> 2u)).x;
                    _2869 = _2868 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2869)
                    {
                        frontier_phi_82_pred = _2858;
                        frontier_phi_82_pred_1 = _2857;
                        frontier_phi_82_pred_2 = _2856;
                        frontier_phi_82_pred_3 = _2855;
                        frontier_phi_82_pred_4 = _2854;
                        frontier_phi_82_pred_5 = _2853;
                    }
                    else
                    {
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3074 = _2853;
                        float _3075 = _2854;
                        float _3076 = _2855;
                        float _3077 = _2856;
                        float _3078 = _2857;
                        float _3079 = _2858;
                        uint _3080 = _2868;
                        uint _3081;
                        vec4 _3106;
                        float _3107;
                        vec4 _3122;
                        vec3 _3134;
                        vec4 _3150;
                        vec4 _3166;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3091 = ((_2859 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3080));
                            _3081 = (_3080 + 4294967295u) & _3080;
                            uint _3093 = _3091 * 40u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            _3107 = _3106.w;
                            uint _3109 = (_3091 * 40u) + 4u;
                            _3122 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3109)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3109 + 3u)).x));
                            uint _3124 = (_3091 * 40u) + 8u;
                            _3134 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x));
                            uint _3137 = (_3091 * 40u) + 16u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3091 * 40u) + 20u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3091 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3091 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_1571, _3201.z, fma(_1570, _3201.y, _3201.x * _1569)) + _3201.w;
                            _3214 = !((fma(_1571, _3182.z, fma(_1570, _3182.y, _3182.x * _1569)) + _3182.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3214)
                            {
                                float _3241 = _3106.x - _1569;
                                float _3242 = _3106.y - _1570;
                                float _3243 = _3106.z - _1571;
                                float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                                float _3247 = inversesqrt(_3244);
                                float _3248 = _3247 * _3241;
                                float _3249 = _3247 * _3242;
                                float _3250 = _3247 * _3243;
                                float _3254 = 1.0 - (_3244 / (_3107 * _3107));
                                float _4388 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3259 = sqrt(_3244) * _3122.w;
                                float _3261 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                                float _3262 = _3261 * _3261;
                                float _3265 = ((1.0 - _3262) * dot(vec3(_3248, _3249, _3250), vec3(_415, _418, _421))) + _3262;
                                float _3268 = _3259 * _3259;
                                float _3272 = (fma(_1571, _3150.z, fma(_1570, _3150.y, _3150.x * _1569)) + _3150.w) / _3213;
                                float _3273 = (fma(_1571, _3166.z, fma(_1570, _3166.y, _3166.x * _1569)) + _3166.w) / _3213;
                                float _3277 = 1.0 - dot(vec2(_3272, _3273), vec2(_3272, _3273));
                                float _4404 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3279 = _3278 * (((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3255) / ((_3268 * 0.699999988079071044921875) + 1.0));
                                float _3291 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                                float _3292 = 1.0 - _477;
                                float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                                float _3300 = _3299 * _3299;
                                float _3301 = _3300 * _3300;
                                float _3302 = _3248 - _2719;
                                float _3303 = _3249 - _2720;
                                float _3304 = _3250 - _2721;
                                float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                                float _3312 = dot(vec3(_415, _418, _421), vec3((-0.0) - _2719, (-0.0) - _2720, (-0.0) - _2721));
                                float _4415 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3316 = dot(vec3(_415, _418, _421), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                                float _4426 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                                float _3324 = _3261 * _3300;
                                float _3325 = _3324 * _3324;
                                float _3331 = ((1.0 - _3325) * dot(vec3(_415, _418, _421), vec3(_3248, _3249, _3250))) + _3325;
                                float _4437 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3333 = 1.0 - _3300;
                                float _3343 = (0.5 / (((_3332 * ((_3315 * _3333) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3300) * _3315))) * _3332;
                                float _4448 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3353 = (_3278 * _3255) * (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3323 * _3323) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3279 * _3122.z;
                                frontier_phi_88_pred_1 = _3279 * _3122.y;
                                frontier_phi_88_pred_2 = _3279 * _3122.x;
                                frontier_phi_88_pred_3 = _3353 * _3134.z;
                                frontier_phi_88_pred_4 = _3353 * _3134.y;
                                frontier_phi_88_pred_5 = _3353 * _3134.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_88_pred;
                            _3361 = frontier_phi_88_pred_1;
                            _3360 = frontier_phi_88_pred_2;
                            _3359 = frontier_phi_88_pred_3;
                            _3358 = frontier_phi_88_pred_4;
                            _3357 = frontier_phi_88_pred_5;
                            _3064 = _3360 + _3077;
                            _3065 = _3361 + _3078;
                            _3066 = _3362 + _3079;
                            _3061 = _3357 + _3074;
                            _3062 = _3358 + _3075;
                            _3063 = _3359 + _3076;
                            if (_3081 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3081;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3066;
                        frontier_phi_82_pred_1 = _3065;
                        frontier_phi_82_pred_2 = _3064;
                        frontier_phi_82_pred_3 = _3063;
                        frontier_phi_82_pred_4 = _3062;
                        frontier_phi_82_pred_5 = _3061;
                    }
                    _2704 = frontier_phi_82_pred;
                    _2702 = frontier_phi_82_pred_1;
                    _2700 = frontier_phi_82_pred_2;
                    _2698 = frontier_phi_82_pred_3;
                    _2696 = frontier_phi_82_pred_4;
                    _2694 = frontier_phi_82_pred_5;
                    uint _2860 = _2859 + 1u;
                    if (_2860 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2853 = _2694;
                        _2854 = _2696;
                        _2855 = _2698;
                        _2856 = _2700;
                        _2857 = _2702;
                        _2858 = _2704;
                        _2859 = _2860;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2700;
                frontier_phi_63_64_ladder_1 = _2704;
                frontier_phi_63_64_ladder_2 = _2702;
                frontier_phi_63_64_ladder_3 = _2698;
                frontier_phi_63_64_ladder_4 = _2696;
                frontier_phi_63_64_ladder_5 = _2694;
            }
            else
            {
                frontier_phi_63_64_ladder = _2578;
                frontier_phi_63_64_ladder_1 = _2582;
                frontier_phi_63_64_ladder_2 = _2580;
                frontier_phi_63_64_ladder_3 = _2576;
                frontier_phi_63_64_ladder_4 = _2574;
                frontier_phi_63_64_ladder_5 = _2572;
            }
            _2693 = frontier_phi_63_64_ladder_5;
            _2695 = frontier_phi_63_64_ladder_4;
            _2697 = frontier_phi_63_64_ladder_3;
            _2699 = frontier_phi_63_64_ladder;
            _2701 = frontier_phi_63_64_ladder_2;
            _2703 = frontier_phi_63_64_ladder_1;
        }
        float _2708 = isnan(1.0) ? _461 : (isnan(_461) ? 1.0 : min(_461, 1.0));
        _2505 = (_2708 * _2699) + _2036;
        _2507 = (_2708 * _2701) + _2038;
        _2509 = (_2708 * _2703) + _2040;
        _2511 = ((_2693 * 0.039999999105930328369140625) * _2708) + _2359;
        _2513 = ((_2695 * 0.039999999105930328369140625) * _2708) + _2361;
        _2515 = ((_2697 * 0.039999999105930328369140625) * _2708) + _2363;
    }
    else
    {
        _2505 = _2036;
        _2507 = _2038;
        _2509 = _2040;
        _2511 = _2359;
        _2513 = _2361;
        _2515 = _2363;
    }
    float _4464 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4475 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4486 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2532 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2505 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _461))) + ((_2511 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2533 = ((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2507 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _461))) + ((_2513 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    float _2534 = ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2509 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _461))) + ((_2515 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1299)) * cbPerFrame._m0[3u].x);
    uint _2535 = _434 + 6u;
    float _2543 = _394 / cbSceneParam._m0[86u].x;
    float _2544 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2558 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, (log2((isnan(cbSceneParam._m0[77u].w) ? _314 : (isnan(_314) ? cbSceneParam._m0[77u].w : min(_314, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2560 = _2558.x;
    float _2561 = _2558.y;
    float _2562 = _2558.z;
    float _2563 = _2558.w;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_314 > cbSceneParam._m0[78u].w)
    {
        float _2597 = isnan(_314) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _314 : min(cbSceneParam._m0[80u].w, _314));
        float _2598 = _2597 / _314;
        float _2609 = _2598 * _366;
        float _2610 = _367 * _2598;
        float _2611 = (-0.0) - _2610;
        float _2613 = _2598 * _368;
        float _2615 = (cbSceneParam._m0[77u].w * _2611) / _2597;
        float _2616 = _2615 + cbSceneParam._m0[79u].w;
        float _2617 = cbSceneParam._m0[79u].w - _2610;
        float _2623 = sqrt(((_2609 * _2609) + (_2610 * _2610)) + (_2613 * _2613));
        float _2626 = (1.0 - (cbSceneParam._m0[77u].w / _2597)) * _2623;
        float _2631 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2633 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2810;
        if (abs((_2611 - _2615) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2810 = ((((_2616 > 0.0) ? exp2(_2631 * _2616) : (2.0 - exp2(_2633 * _2616))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2626;
        }
        else
        {
            float _2754 = 1.0 / cbSceneParam._m0[80u].x;
            float _2755 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : max(_2616, _2617));
            float _2756 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : min(_2616, _2617));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            float _2766 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : min(_2756, 0.0));
            _2810 = ((abs(_2623 / _2611) * cbSceneParam._m0[80u].y) * ((((_2765 - _2766) * 2.0) - ((exp2(_2631 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0)))) - exp2(_2631 * (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))))) * _2754)) - ((exp2(_2633 * _2765) - exp2(_2633 * _2766)) * _2754))) + (_2626 * cbSceneParam._m0[80u].z);
        }
        vec4 _2812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, 1.0), 0.0);
        float _2821 = exp2((_2810 * (-1.44269502162933349609375)) * (1.0 - _2812.w));
        float _2822 = log2(_2821);
        float _2838 = log2(_2563);
        _2635 = (exp2(_2838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].x)) * _2812.x) / cbSceneParam._m0[78u].x)) + _2560;
        _2637 = (exp2(_2838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].y)) * _2812.y) / cbSceneParam._m0[78u].y)) + _2561;
        _2639 = (exp2(_2838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2822 * cbSceneParam._m0[78u].z)) * _2812.z) / cbSceneParam._m0[78u].z)) + _2562;
        _2641 = _2821 * _2563;
    }
    else
    {
        _2635 = _2560;
        _2637 = _2561;
        _2639 = _2562;
        _2641 = _2563;
    }
    bool _2848;
    vec4 _2651;
    vec4 _2673;
    float _2675;
    float _2679;
    float _2680;
    float _2681;
    float _2682;
    bool _2692;
    for (;;)
    {
        _2651 = cbMatDynParam._m0[0u];
        float _2653 = roundEven(_2651.y);
        bool _2654 = _2653 == 3.0;
        float _2655 = log2(_2641);
        float _2662 = exp2(_2655 * cbSceneParam._m0[78u].x) * _2532;
        float _2663 = exp2(_2655 * cbSceneParam._m0[78u].y) * _2533;
        float _2664 = exp2(_2655 * cbSceneParam._m0[78u].z) * _2534;
        float _2671 = _382 + (-0.5);
        _2673 = cbMtdParam._m0[1u];
        _2675 = _2673.y * _2671;
        float _2678 = (_2653 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2679 = _2678 * (_2654 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2635)));
        _2680 = _2678 * (_2654 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2637)));
        _2681 = _2678 * (_2654 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2639)));
        _2682 = _2671 * 0.999000012874603271484375;
        _2692 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2692)
        {
            if ((cbInstanceData._m0[_434 + 7u].x + _2682) < 0.5)
            {
                _2848 = true;
                break;
            }
        }
        uint _2789 = _436 + uint(_2651.w);
        if ((cbInstanceData._m0[_2789].w < 1.0) && ((cbInstanceData._m0[_2789].w + _2682) < 0.5))
        {
            _2848 = true;
            break;
        }
        if ((_2675 + 1.0) < _2673.x)
        {
            _2848 = true;
            break;
        }
        _2848 = false;
        break;
    }
    float _3052;
    if (_2848)
    {
        discard_state = true;
        _3052 = 0.0;
    }
    else
    {
        _3052 = cbInstanceData._m0[_2535].w;
    }
    SV_Target.x = _2679;
    SV_Target.y = _2680;
    SV_Target.z = _2681;
    SV_Target.w = _3052;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2535].w;
    discard_exit();
}


