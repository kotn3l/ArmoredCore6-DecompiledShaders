#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1140;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3730 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3741 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _520 = ((_492.x - _511) * _375) + _511;
    float _521 = ((_492.y - _512) * _375) + _512;
    float _522 = ((_492.z - _513) * _375) + _513;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _547 = ((_534.z - _522) * _448) + _522;
    float _550 = ((((_534.x - _520) * _448) + _520) * 2.0) + (-1.0);
    float _551 = ((((_534.y - _521) * _448) + _521) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3752 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _589 = (_550 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)))) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (_551 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)))) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _595 = (((_469.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _599 = ((_577.z - _595) * cbMtdParam._m0[19u].w) + _595;
    float _604 = cbMtdParam._m0[22u].x + _577.w;
    float _607 = fma(_557, _225 * NORMAL.x, fma(_590, _232 * TANGENT.x, (_218 * _210) * _589));
    float _610 = fma(_557, _225 * NORMAL.y, fma(_590, _232 * TANGENT.y, (_218 * _211) * _589));
    float _613 = fma(_557, _225 * NORMAL.z, fma(_590, _232 * TANGENT.z, (_218 * _212) * _589));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3763 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _621 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3785 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3796 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3807 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _728 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _731 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _745 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3818 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _706, cbSceneParam._m0[86u].y * _707));
    float _769 = ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * TEXCOORD_5.w) * _765.x;
    float _770 = dot(vec3(_618, _619, _620), vec3(_698, _699, _700));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _618) - _698;
    float _778 = (_773 * _619) - _699;
    float _779 = (_773 * _620) - _700;
    float _783 = abs(dot(vec3(_698, _699, _700), vec3(_618, _619, _620)));
    float _3851 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_621);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_838, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830));
        float _868 = fma(_838, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830));
        float _872 = fma(_838, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830));
        float _897 = _830 + _618;
        float _898 = _834 + _619;
        float _899 = _838 + _620;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_618, _619, _620), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3899 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_618, _619, _620), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3932 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_618, _619, _620), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3965 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1178 = fma(_838, cbModelParam._m0[30u].z, fma(_834, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830));
        float _1182 = fma(_838, cbModelParam._m0[31u].z, fma(_834, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830));
        float _1186 = fma(_838, cbModelParam._m0[32u].z, fma(_834, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830));
        float _1209 = _830 + _618;
        float _1210 = _834 + _619;
        float _1211 = _838 + _620;
        float _1221 = fma(_1211, cbModelParam._m0[30u].z, fma(_1210, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1209)) - _1178;
        float _1222 = fma(_1211, cbModelParam._m0[31u].z, fma(_1210, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1209)) - _1182;
        float _1223 = fma(_1211, cbModelParam._m0[32u].z, fma(_1210, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1209)) - _1186;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1178 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1182 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[35u].z) + ((((((_1186 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1277 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1244.x + (-0.5));
        float _1279 = _1277 * (_1244.y + (-0.5));
        float _1280 = _1277 * (_1244.z + (-0.5));
        float _1287 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1251.x + (-0.5));
        float _1289 = _1287 * (_1251.y + (-0.5));
        float _1290 = _1287 * (_1251.z + (-0.5));
        float _1297 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1258.x + (-0.5));
        float _1299 = _1297 * (_1258.y + (-0.5));
        float _1300 = _1297 * (_1258.z + (-0.5));
        float _1307 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1265.x + (-0.5));
        float _1309 = _1307 * (_1265.y + (-0.5));
        float _1310 = _1307 * (_1265.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_618, _619, _620), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4028 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1341 + 1.0))) + _1346) * _1311;
        float _1356 = _1279 * 0.5;
        float _1357 = _1289 * 0.5;
        float _1358 = _1299 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_618, _619, _620), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4061 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1383 + 1.0))) + _1388) * _1312;
        float _1398 = _1280 * 0.5;
        float _1399 = _1290 * 0.5;
        float _1400 = _1300 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_618, _619, _620), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4094 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1425 + 1.0))) + _1430) * _1313;
        _1447 = _1280;
        _1448 = _1279;
        _1449 = _1278;
        _1450 = _1290;
        _1451 = _1289;
        _1452 = _1288;
        _1453 = _1300;
        _1454 = _1299;
        _1455 = _1298;
        _1456 = _1313;
        _1457 = _1312;
        _1458 = _1311;
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1140;
        _1448 = _1140;
        _1449 = _1140;
        _1450 = _1140;
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1152)) + _1152;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1153)) + _1153;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1154)) + _1154;
    float _1494 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1471));
    float _1515 = _777 * 0.5;
    float _1516 = _778 * 0.5;
    float _1517 = _779 * 0.5;
    float _1518 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1521 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1524 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1558;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1531 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1535 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1539 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1546 = dot(vec4(cbModelParam._m0[39u]), vec4(_1515, _1516, _1517, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1569;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1560 = dot(vec4(cbModelParam._m0[40u]), vec4(_1515, _1516, _1517, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1573 = (_1569 * cbModelParam._m0[1u].x) + (_1558 * (1.0 - cbModelParam._m0[1u].x));
    float _1583 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1583 : min(cbModelParam._m0[25u].z, _1583));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1633 = fma(_838, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830)) + cbModelParam._m0[13u].w;
        float _1637 = fma(_838, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830)) + cbModelParam._m0[14u].w;
        float _1641 = fma(_838, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830)) + cbModelParam._m0[15u].w;
        float _1644 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1647 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1650 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1678;
        if (_1644 > 0.0)
        {
            _1678 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1678 = frontier_phi_14_12_ladder;
        }
        float _1849;
        if (_1647 > 0.0)
        {
            _1849 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1849 = frontier_phi_23_19_ladder;
        }
        float _2144;
        if (_1650 > 0.0)
        {
            _2144 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2144 = frontier_phi_35_30_ladder;
        }
        float _2146 = isnan(_1849) ? _1678 : (isnan(_1678) ? _1849 : min(_1678, _1849));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1644) + _1633;
        float _2152 = (_2147 * _1647) + _1637;
        float _2153 = (_2147 * _1650) + _1641;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1584);
            frontier_phi_13_35_ladder = _2298.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2298.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2298.x * cbModelParam._m0[1u].y;
        }
        _1666 = frontier_phi_13_35_ladder_2;
        _1668 = frontier_phi_13_35_ladder_1;
        _1670 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1584);
        _1666 = _1654.x * cbModelParam._m0[1u].y;
        _1668 = _1654.y * cbModelParam._m0[1u].y;
        _1670 = _1654.z * cbModelParam._m0[1u].y;
    }
    float _1674 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1674 : min(cbModelParam._m0[25u].w, _1674));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1730 = fma(_838, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830)) + cbModelParam._m0[21u].w;
        float _1734 = fma(_838, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830)) + cbModelParam._m0[22u].w;
        float _1738 = fma(_838, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830)) + cbModelParam._m0[23u].w;
        float _1741 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1744 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1747 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _1854;
        if (_1741 > 0.0)
        {
            _1854 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1854 = frontier_phi_25_21_ladder;
        }
        float _2171;
        if (_1744 > 0.0)
        {
            _2171 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2171 = frontier_phi_37_32_ladder;
        }
        float _2498;
        if (_1747 > 0.0)
        {
            _2498 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2498 = frontier_phi_47_44_ladder;
        }
        float _2500 = isnan(_2171) ? _1854 : (isnan(_1854) ? _2171 : min(_1854, _2171));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1741) + _1730;
        float _2506 = (_2501 * _1744) + _1734;
        float _2507 = (_2501 * _1747) + _1738;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2508;
        float _2511 = _2508 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2507 > _2511) || ((_2507 < _2509) || ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 < _2509) || (_2505 > _2511))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2507, cbModelParam._m0[17u].z, fma(_2506, cbModelParam._m0[17u].y, _2505 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2507, cbModelParam._m0[18u].z, fma(_2506, cbModelParam._m0[18u].y, _2505 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2507, cbModelParam._m0[19u].z, fma(_2506, cbModelParam._m0[19u].y, _2505 * cbModelParam._m0[19u].x))), _1675);
            frontier_phi_22_47_ladder = _2625.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2625.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2625.x * cbModelParam._m0[1u].z;
        }
        _1766 = frontier_phi_22_47_ladder_2;
        _1768 = frontier_phi_22_47_ladder_1;
        _1770 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1675);
        _1766 = _1750.x * cbModelParam._m0[1u].z;
        _1768 = _1750.y * cbModelParam._m0[1u].z;
        _1770 = _1750.z * cbModelParam._m0[1u].z;
    }
    float _1782 = ((((1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_798 * _785)) * _769;
    float _1783 = _1782 * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1784 = _1782 * ((cbModelParam._m0[1u].w * (_1768 - _1668)) + _1668);
    float _1785 = _1782 * ((cbModelParam._m0[1u].w * (_1770 - _1670)) + _1670);
    float _1788 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, _1783 * cbSceneParam._m0[91u].x));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1840 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1841 = _1828 / _1840;
    float _1842 = _1832 / _1840;
    float _1843 = _1836 / _1840;
    float _1990;
    float _1991;
    float _1992;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1870 = ((uint(_1843 > cbSceneParam._m0[59u].y) + uint(_1843 > cbSceneParam._m0[59u].x)) + uint(_1843 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1871 = _1870 + 43u;
        uint _1879 = _1870 + 44u;
        uint _1887 = _1870 + 45u;
        uint _1895 = _1870 + 46u;
        float _1906 = fma(_1840, cbSceneParam._m0[_1871].w, fma(_1836, cbSceneParam._m0[_1871].z, fma(_1832, cbSceneParam._m0[_1871].y, _1828 * cbSceneParam._m0[_1871].x)));
        float _1910 = fma(_1840, cbSceneParam._m0[_1879].w, fma(_1836, cbSceneParam._m0[_1879].z, fma(_1832, cbSceneParam._m0[_1879].y, _1828 * cbSceneParam._m0[_1879].x)));
        float _1918 = fma(_1840, cbSceneParam._m0[_1895].w, fma(_1836, cbSceneParam._m0[_1895].z, fma(_1832, cbSceneParam._m0[_1895].y, _1828 * cbSceneParam._m0[_1895].x)));
        float _1923 = cbSceneParam._m0[33u].z * _1918;
        float _1925 = cbSceneParam._m0[33u].w * _1918;
        float _1928 = fma(_1840, cbSceneParam._m0[_1887].w, fma(_1836, cbSceneParam._m0[_1887].z, fma(_1832, cbSceneParam._m0[_1887].y, _1828 * cbSceneParam._m0[_1887].x))) / _1918;
        float _1976 = (cbSceneParam._m0[33u].x - sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843))) * cbSceneParam._m0[33u].y;
        float _4220 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1983 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 + _1906) / _1918, (_1925 + _1910) / _1918), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 + _1906) / _1918, (_1910 - _1923) / _1918), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1906 - _1923) / _1918, (_1910 - _1925) / _1918), _1928), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1906 - _1925) / _1918, (_1923 + _1910) / _1918), _1928), 0.0)).x), vec4(0.25)));
        _1990 = 1.0 - (_1983 * cbSceneParam._m0[34u].x);
        _1991 = 1.0 - (_1983 * cbSceneParam._m0[34u].y);
        _1992 = 1.0 - (_1983 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1990 = 1.0;
        _1991 = 1.0;
        _1992 = 1.0;
    }
    float _2056;
    float _2058;
    float _2060;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2044 = fma(_1840, cbSceneParam._m0[63u].w, fma(_1836, cbSceneParam._m0[63u].z, fma(_1832, cbSceneParam._m0[63u].y, _1828 * cbSceneParam._m0[63u].x)));
        float _2045 = fma(_1840, cbSceneParam._m0[60u].w, fma(_1836, cbSceneParam._m0[60u].z, fma(_1832, cbSceneParam._m0[60u].y, _1828 * cbSceneParam._m0[60u].x))) / _2044;
        float _2046 = fma(_1840, cbSceneParam._m0[61u].w, fma(_1836, cbSceneParam._m0[61u].z, fma(_1832, cbSceneParam._m0[61u].y, _1828 * cbSceneParam._m0[61u].x))) / _2044;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2045 >= cbSceneParam._m0[64u].x) && (_2046 >= cbSceneParam._m0[64u].y)) && (_2045 <= cbSceneParam._m0[64u].z)) && (_2046 <= cbSceneParam._m0[64u].w))
        {
            float _2184 = fma(_1840, cbSceneParam._m0[62u].w, fma(_1836, cbSceneParam._m0[62u].z, fma(_1832, cbSceneParam._m0[62u].y, _1828 * cbSceneParam._m0[62u].x))) / _2044;
            float _2188 = isnan(cbSceneParam._m0[41u].w) ? _2184 : (isnan(_2184) ? cbSceneParam._m0[41u].w : max(_2184, cbSceneParam._m0[41u].w));
            float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_1842 * _1842) + (_1841 * _1841)) + (_1843 * _1843))) * cbSceneParam._m0[33u].y;
            float _4236 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
            float _2238 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2045, cbSceneParam._m0[33u].w + _2046), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2045, _2046 - cbSceneParam._m0[33u].z), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2045 - cbSceneParam._m0[33u].z, _2046 - cbSceneParam._m0[33u].w), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2045 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2046), _2188), 0.0)).x), vec4(0.25)));
            float _2242 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
            float _2243 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
            float _2244 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2244) ? _1992 : (isnan(_1992) ? _2244 : min(_1992, _2244));
            frontier_phi_34_33_ladder_1 = isnan(_2243) ? _1991 : (isnan(_1991) ? _2243 : min(_1991, _2243));
            frontier_phi_34_33_ladder_2 = isnan(_2242) ? _1990 : (isnan(_1990) ? _2242 : min(_1990, _2242));
        }
        else
        {
            frontier_phi_34_33_ladder = _1992;
            frontier_phi_34_33_ladder_1 = _1991;
            frontier_phi_34_33_ladder_2 = _1990;
        }
        _2056 = frontier_phi_34_33_ladder_2;
        _2058 = frontier_phi_34_33_ladder_1;
        _2060 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2056 = _1990;
        _2058 = _1991;
        _2060 = _1992;
    }
    uvec4 _2065 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2067 = _2065.x * 14u;
    uint _2068 = _2067 + 13u;
    float _2075 = _769 + (-1.0);
    float _2080 = (cbLight._m0[_2068].x * _2075) + 1.0;
    float _2081 = (cbLight._m0[_2068].y * _2075) + 1.0;
    float _2082 = (cbLight._m0[_2068].z * _2075) + 1.0;
    float _2083 = (cbLight._m0[_2068].w * _2075) + 1.0;
    uint _2084 = _2067 + 5u;
    float _2090 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2094 = _2067 + 4u;
    float _2103 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
    uint _2107 = _2067 | 1u;
    float _2118 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_618, _619, _620));
    float _2121 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_618, _619, _620));
    float _4272 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _4283 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2126 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * 0.3183098733425140380859375;
    float _2128 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * 0.3183098733425140380859375;
    float _2135 = ((cbLight._m0[_2084].x * _2090) * _2128) + (((cbLight._m0[_2094].x * _2056) * _2103) * _2126);
    float _2136 = ((_2090 * cbLight._m0[_2084].y) * _2128) + (((cbLight._m0[_2094].y * _2058) * _2103) * _2126);
    float _2137 = ((_2090 * cbLight._m0[_2084].z) * _2128) + (((cbLight._m0[_2094].z * _2060) * _2103) * _2126);
    uvec4 _2141 = floatBitsToUint(cbLight._m0[_2067 + 12u]);
    bool _2143 = _2141.x == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2143)
    {
        _2245 = _2135;
        _2247 = _2136;
        _2249 = _2137;
    }
    else
    {
        uint _2253 = _2067 + 6u;
        float _2269 = (dot(vec3(cbLight._m0[_2067 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4294 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2272 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2245 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2135;
        _2247 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2136;
        _2249 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2137;
    }
    bool _2252 = _2141.y == 0u;
    float _2307;
    float _2309;
    float _2311;
    if (_2252)
    {
        _2307 = _2245;
        _2309 = _2247;
        _2311 = _2249;
    }
    else
    {
        uint _2469 = _2067 + 7u;
        float _2485 = (dot(vec3(cbLight._m0[_2067 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2486 = _2485 * _2485;
        float _4310 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2487 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2488 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2307 = (((cbLight._m0[_2469].x * 0.3183098733425140380859375) * _2487) * _2488) + _2245;
        _2309 = (((cbLight._m0[_2469].y * 0.3183098733425140380859375) * _2487) * _2488) + _2247;
        _2311 = (((cbLight._m0[_2469].z * 0.3183098733425140380859375) * _2487) * _2488) + _2249;
    }
    uint _2314 = _2067 + 8u;
    float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _621) * 0.949999988079071044921875);
    float _2328 = _2327 * _2327;
    float _2329 = cbLight._m0[_2067].x + _698;
    float _2330 = cbLight._m0[_2067].y + _699;
    float _2331 = cbLight._m0[_2067].z + _700;
    float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
    float _2336 = _2335 * _2329;
    float _2337 = _2335 * _2330;
    float _2338 = _2335 * _2331;
    float _2339 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2067].xyz));
    float _4326 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2343 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2344 = dot(vec3(_618, _619, _620), vec3(_2336, _2337, _2338));
    float _4348 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2348 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2336, _2337, _2338));
    float _4359 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = _2328 * _2328;
    float _2356 = ((_2347 * _2347) * (_2352 + (-1.0))) + 1.0;
    float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2368 = 1.0 - _2328;
    float _2379 = (0.5 / (((_2343 * ((_2342 * _2368) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2368) + _2328) * _2342))) * _2342;
    float _4370 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2352 / ((_2356 * _2356) * 3.141590118408203125));
    uint _2395 = _2067 + 9u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _621) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2107].x + _698;
    float _2409 = cbLight._m0[_2107].y + _699;
    float _2410 = cbLight._m0[_2107].z + _700;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2107].xyz));
    float _4381 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _2422 = dot(vec3(_618, _619, _620), vec3(_2415, _2416, _2417));
    float _4392 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2415, _2416, _2417));
    float _4403 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2407 * _2407;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2443 = (exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2444 = 1.0 - _2407;
    float _2454 = (0.5 / (((_2343 * ((_2421 * _2444) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2444) + _2407) * _2421))) * _2421;
    float _4414 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2456 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    float _2466 = (((_2443 * cbLight._m0[_2395].x) * _2456) * _2090) + ((((cbLight._m0[_2314].x * _2056) * _2367) * _2381) * _2103);
    float _2467 = (((_2443 * cbLight._m0[_2395].y) * _2456) * _2090) + ((((cbLight._m0[_2314].y * _2058) * _2367) * _2381) * _2103);
    float _2468 = (((_2443 * cbLight._m0[_2395].z) * _2456) * _2090) + ((((cbLight._m0[_2314].z * _2060) * _2367) * _2381) * _2103);
    float _2524;
    float _2526;
    float _2528;
    if (_2143)
    {
        _2524 = _2466;
        _2526 = _2467;
        _2528 = _2468;
    }
    else
    {
        uint _2530 = _2067 + 2u;
        uint _2534 = _2067 + 10u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _621) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _698;
        float _2551 = cbLight._m0[_2530].y + _699;
        float _2552 = cbLight._m0[_2530].z + _700;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2530].xyz));
        float _4425 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2564 = dot(vec3(_618, _619, _620), vec3(_2557, _2558, _2559));
        float _4436 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4447 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2586 = 1.0 - _2549;
        float _2596 = (0.5 / (((_2343 * ((_2563 * _2586) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2586) + _2549) * _2563))) * _2563;
        float _4458 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2598 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2599 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
        _2524 = (((_2585 * cbLight._m0[_2534].x) * _2598) * _2599) + _2466;
        _2526 = (((_2585 * cbLight._m0[_2534].y) * _2598) * _2599) + _2467;
        _2528 = (((_2585 * cbLight._m0[_2534].z) * _2598) * _2599) + _2468;
    }
    float _2630;
    float _2632;
    float _2634;
    if (_2252)
    {
        _2630 = _2524;
        _2632 = _2526;
        _2634 = _2528;
    }
    else
    {
        uint _2641 = _2067 + 3u;
        uint _2645 = _2067 + 11u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _621) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _698;
        float _2662 = cbLight._m0[_2641].y + _699;
        float _2663 = cbLight._m0[_2641].z + _700;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2641].xyz));
        float _4474 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2675 = dot(vec3(_618, _619, _620), vec3(_2668, _2669, _2670));
        float _4485 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4496 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2696 = (exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2697 = 1.0 - _2660;
        float _2707 = (0.5 / (((_2343 * ((_2674 * _2697) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2343 * _2697) + _2660) * _2674))) * _2674;
        float _4507 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2630 = (((_2696 * cbLight._m0[_2645].x) * _2709) * _2710) + _2524;
        _2632 = (((_2696 * cbLight._m0[_2645].y) * _2709) * _2710) + _2526;
        _2634 = (((_2696 * cbLight._m0[_2645].z) * _2709) * _2710) + _2528;
    }
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_2065.y == 0u)
    {
        uvec4 _2731 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2732 = _2731.x;
        uint _2743 = uint((float(_2731.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _2732))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _2732)));
        float _2753 = (log2(_1843 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2754 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        uint _2757 = uint(isnan(14.0) ? _2754 : (isnan(_2754) ? 14.0 : min(_2754, 14.0)));
        uvec4 _2762 = texelFetch(g_lightClusterGridBuffer, int(((_2757 << 2u) + (_2743 << 6u)) >> 2u));
        uint _2763 = _2762.x;
        uint _2764 = _2731.z;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        if (((((1u << ((_2764 >> 4u) & 15u)) + 4294967295u) & _2763) == 0u) || ((_2764 & 240u) == 0u))
        {
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
        }
        else
        {
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            uint _2994 = 0u;
            uint _3003;
            bool _3004;
            for (;;)
            {
                _3003 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                _3004 = _3003 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3004)
                {
                    frontier_phi_66_pred = _2993;
                    frontier_phi_66_pred_1 = _2992;
                    frontier_phi_66_pred_2 = _2991;
                    frontier_phi_66_pred_3 = _2990;
                    frontier_phi_66_pred_4 = _2989;
                    frontier_phi_66_pred_5 = _2988;
                }
                else
                {
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    uint _3118;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2990;
                    _3115 = _2991;
                    _3116 = _2992;
                    _3117 = _2993;
                    _3118 = _3003;
                    float _3044;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    for (;;)
                    {
                        uint _3122 = uint(findLSB(_3118)) + (_2994 << 5u);
                        uint _3119 = (_3118 + 4294967295u) & _3118;
                        uint _3124 = _3122 * 48u;
                        vec4 _3138 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3144 = (_3122 * 48u) + 4u;
                        vec4 _3157 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3163 = (_3122 * 48u) + 8u;
                        vec3 _3174 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3163)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3163 + 2u)).x));
                        float _3178 = _3138.x - _1841;
                        float _3179 = _3138.y - _1842;
                        float _3180 = _3138.z - _1843;
                        float _3181 = dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180));
                        float _3184 = inversesqrt(_3181);
                        float _3185 = _3184 * _3178;
                        float _3186 = _3184 * _3179;
                        float _3187 = _3184 * _3180;
                        float _3188 = dot(vec3(_725, _728, _731), vec3(_3185, _3186, _3187));
                        float _3193 = 1.0 - (_3181 * _3138.w);
                        float _4533 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3195 = sqrt(_3181) * _3157.w;
                        float _3198 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                        float _3199 = _3198 * _3198;
                        float _3202 = ((1.0 - _3199) * _3188) + _3199;
                        float _3205 = _3195 * _3195;
                        float _3209 = ((isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0))) * _3194) / ((_3205 * 0.699999988079071044921875) + 1.0);
                        float _3213 = (-0.0) - _1841;
                        float _3214 = (-0.0) - _1842;
                        float _3215 = (-0.0) - _1843;
                        float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3229 = exp2(log2(1.0 / ((_3205 * 3.5) + 5.0)) * 0.25);
                        float _3230 = 1.0 - _785;
                        float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                        float _3238 = _3237 * _3237;
                        float _3239 = _3238 * _3238;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3242 = _3222 + _3187;
                        float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                        float _3250 = dot(vec3(_725, _728, _731), vec3(_3220, _3221, _3222));
                        float _4549 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3254 = dot(vec3(_725, _728, _731), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                        float _4560 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3257 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                        float _3262 = _3198 * _3238;
                        float _3263 = _3262 * _3262;
                        float _3266 = ((1.0 - _3263) * _3188) + _3263;
                        float _4571 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3267 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3268 = 1.0 - _3238;
                        float _3278 = (0.5 / (((_3267 * ((_3253 * _3268) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3267 * _3268) + _3238) * _3253))) * _3267;
                        float _4582 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3289 = (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3261 * _3261) * ((_3205 * 2.1991131305694580078125) + 3.141590118408203125))) * _3194;
                        _3047 = (_3209 * _3157.x) + _3115;
                        _3048 = (_3209 * _3157.y) + _3116;
                        _3049 = (_3209 * _3157.z) + _3117;
                        _3044 = (_3289 * _3174.x) + _3112;
                        _3045 = (_3289 * _3174.y) + _3113;
                        _3046 = (_3289 * _3174.z) + _3114;
                        if (_3119 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3046;
                            _3115 = _3047;
                            _3116 = _3048;
                            _3117 = _3049;
                            _3118 = _3119;
                        }
                    }
                    frontier_phi_66_pred = _3049;
                    frontier_phi_66_pred_1 = _3048;
                    frontier_phi_66_pred_2 = _3047;
                    frontier_phi_66_pred_3 = _3046;
                    frontier_phi_66_pred_4 = _3045;
                    frontier_phi_66_pred_5 = _3044;
                }
                _2854 = frontier_phi_66_pred;
                _2852 = frontier_phi_66_pred_1;
                _2850 = frontier_phi_66_pred_2;
                _2848 = frontier_phi_66_pred_3;
                _2846 = frontier_phi_66_pred_4;
                _2844 = frontier_phi_66_pred_5;
                uint _2995 = _2994 + 1u;
                if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2988 = _2844;
                    _2989 = _2846;
                    _2990 = _2848;
                    _2991 = _2850;
                    _2992 = _2852;
                    _2993 = _2854;
                    _2994 = _2995;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
        }
        uvec4 _2857 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2858 = _2857.z;
        uint _2860 = (_2858 >> 8u) & 15u;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        float _2966;
        if (((4294967295u << _2860) & _2763) == 0u)
        {
            _2956 = _2843;
            _2958 = _2845;
            _2960 = _2847;
            _2962 = _2849;
            _2964 = _2851;
            _2966 = _2853;
        }
        else
        {
            float _2981 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
            float _2982 = _2981 * _1841;
            float _2983 = _2981 * _1842;
            float _2984 = _2981 * _1843;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2860 < ((_2858 >> 12u) & 15u))
            {
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _2965;
                float _2967;
                float _3095 = _2843;
                float _3096 = _2845;
                float _3097 = _2847;
                float _3098 = _2849;
                float _3099 = _2851;
                float _3100 = _2853;
                uint _3101 = _2860;
                uint _3110;
                bool _3111;
                for (;;)
                {
                    _3110 = texelFetch(g_lightClassification, int((((_2757 << 5u) + (_2743 << 9u)) + (_3101 << 2u)) >> 2u)).x;
                    _3111 = _3110 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3111)
                    {
                        frontier_phi_72_pred = _3100;
                        frontier_phi_72_pred_1 = _3099;
                        frontier_phi_72_pred_2 = _3098;
                        frontier_phi_72_pred_3 = _3097;
                        frontier_phi_72_pred_4 = _3096;
                        frontier_phi_72_pred_5 = _3095;
                    }
                    else
                    {
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        float _3309 = _3097;
                        float _3310 = _3098;
                        float _3311 = _3099;
                        float _3312 = _3100;
                        uint _3313 = _3110;
                        uint _3314;
                        vec4 _3339;
                        float _3340;
                        vec4 _3355;
                        vec3 _3367;
                        vec4 _3382;
                        vec4 _3397;
                        float _3443;
                        bool _3444;
                        for (;;)
                        {
                            uint _3324 = ((_3101 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3313));
                            _3314 = (_3313 + 4294967295u) & _3313;
                            uint _3326 = _3324 * 40u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3340 = _3339.w;
                            uint _3342 = (_3324 * 40u) + 4u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3357 = (_3324 * 40u) + 8u;
                            _3367 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x));
                            uint _3369 = (_3324 * 40u) + 16u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3324 * 40u) + 20u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            uint _3399 = (_3324 * 40u) + 24u;
                            vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3418 = (_3324 * 40u) + 28u;
                            vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3443 = fma(_1843, _3431.z, fma(_1842, _3431.y, _3431.x * _1841)) + _3431.w;
                            _3444 = !((fma(_1843, _3412.z, fma(_1842, _3412.y, _3412.x * _1841)) + _3412.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3444)
                            {
                                float _3471 = _3339.x - _1841;
                                float _3472 = _3339.y - _1842;
                                float _3473 = _3339.z - _1843;
                                float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                                float _3477 = inversesqrt(_3474);
                                float _3478 = _3477 * _3471;
                                float _3479 = _3477 * _3472;
                                float _3480 = _3477 * _3473;
                                float _3484 = 1.0 - (_3474 / (_3340 * _3340));
                                float _4593 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3489 = sqrt(_3474) * _3355.w;
                                float _3491 = 1.39999997615814208984375 / (_3489 + 1.39999997615814208984375);
                                float _3492 = _3491 * _3491;
                                float _3495 = ((1.0 - _3492) * dot(vec3(_3478, _3479, _3480), vec3(_725, _728, _731))) + _3492;
                                float _3498 = _3489 * _3489;
                                float _3502 = (fma(_1843, _3382.z, fma(_1842, _3382.y, _3382.x * _1841)) + _3382.w) / _3443;
                                float _3503 = (fma(_1843, _3397.z, fma(_1842, _3397.y, _3397.x * _1841)) + _3397.w) / _3443;
                                float _3507 = 1.0 - dot(vec2(_3502, _3503), vec2(_3502, _3503));
                                float _4609 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3509 = _3508 * (((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3485) / ((_3498 * 0.699999988079071044921875) + 1.0));
                                float _3521 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                                float _3522 = 1.0 - _785;
                                float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                                float _3530 = _3529 * _3529;
                                float _3531 = _3530 * _3530;
                                float _3532 = _3478 - _2982;
                                float _3533 = _3479 - _2983;
                                float _3534 = _3480 - _2984;
                                float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                                float _3542 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2982, (-0.0) - _2983, (-0.0) - _2984));
                                float _4620 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3546 = dot(vec3(_725, _728, _731), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                                float _4631 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3549 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                                float _3554 = _3491 * _3530;
                                float _3555 = _3554 * _3554;
                                float _3561 = ((1.0 - _3555) * dot(vec3(_725, _728, _731), vec3(_3478, _3479, _3480))) + _3555;
                                float _4642 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3563 = 1.0 - _3530;
                                float _3573 = (0.5 / (((_3562 * ((_3545 * _3563) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3562 * _3563) + _3530) * _3545))) * _3562;
                                float _4653 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3583 = (_3508 * _3485) * (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3553 * _3553) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3509 * _3355.y;
                                frontier_phi_78_pred_1 = _3509 * _3355.x;
                                frontier_phi_78_pred_2 = _3583 * _3367.z;
                                frontier_phi_78_pred_3 = _3583 * _3367.y;
                                frontier_phi_78_pred_4 = _3583 * _3367.x;
                                frontier_phi_78_pred_5 = _3509 * _3355.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3591 = frontier_phi_78_pred;
                            _3590 = frontier_phi_78_pred_1;
                            _3589 = frontier_phi_78_pred_2;
                            _3588 = frontier_phi_78_pred_3;
                            _3587 = frontier_phi_78_pred_4;
                            _3592 = frontier_phi_78_pred_5;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            if (_3314 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3314;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3299;
                        frontier_phi_72_pred_1 = _3298;
                        frontier_phi_72_pred_2 = _3297;
                        frontier_phi_72_pred_3 = _3296;
                        frontier_phi_72_pred_4 = _3295;
                        frontier_phi_72_pred_5 = _3294;
                    }
                    _2967 = frontier_phi_72_pred;
                    _2965 = frontier_phi_72_pred_1;
                    _2963 = frontier_phi_72_pred_2;
                    _2961 = frontier_phi_72_pred_3;
                    _2959 = frontier_phi_72_pred_4;
                    _2957 = frontier_phi_72_pred_5;
                    uint _3102 = _3101 + 1u;
                    if (_3102 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3095 = _2957;
                        _3096 = _2959;
                        _3097 = _2961;
                        _3098 = _2963;
                        _3099 = _2965;
                        _3100 = _2967;
                        _3101 = _3102;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2967;
                frontier_phi_60_61_ladder_1 = _2965;
                frontier_phi_60_61_ladder_2 = _2961;
                frontier_phi_60_61_ladder_3 = _2959;
                frontier_phi_60_61_ladder_4 = _2957;
                frontier_phi_60_61_ladder_5 = _2963;
            }
            else
            {
                frontier_phi_60_61_ladder = _2853;
                frontier_phi_60_61_ladder_1 = _2851;
                frontier_phi_60_61_ladder_2 = _2847;
                frontier_phi_60_61_ladder_3 = _2845;
                frontier_phi_60_61_ladder_4 = _2843;
                frontier_phi_60_61_ladder_5 = _2849;
            }
            _2956 = frontier_phi_60_61_ladder_4;
            _2958 = frontier_phi_60_61_ladder_3;
            _2960 = frontier_phi_60_61_ladder_2;
            _2962 = frontier_phi_60_61_ladder_5;
            _2964 = frontier_phi_60_61_ladder_1;
            _2966 = frontier_phi_60_61_ladder;
        }
        float _2971 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2776 = (_2971 * _2962) + _2307;
        _2778 = (_2971 * _2964) + _2309;
        _2780 = (_2971 * _2966) + _2311;
        _2782 = ((_2956 * 0.039999999105930328369140625) * _2971) + _2630;
        _2784 = ((_2958 * 0.039999999105930328369140625) * _2971) + _2632;
        _2786 = ((_2960 * 0.039999999105930328369140625) * _2971) + _2634;
    }
    else
    {
        _2776 = _2307;
        _2778 = _2309;
        _2780 = _2311;
        _2782 = _2630;
        _2784 = _2632;
        _2786 = _2634;
    }
    float _4669 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4680 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4691 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    uint _2806 = _238 + 6u;
    float _2814 = _706 / cbSceneParam._m0[86u].x;
    float _2815 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2829 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2831 = _2829.x;
    float _2832 = _2829.y;
    float _2833 = _2829.z;
    float _2834 = _2829.w;
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2868 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2869 = _2868 / _639;
        float _2880 = _2869 * _691;
        float _2881 = _692 * _2869;
        float _2882 = (-0.0) - _2881;
        float _2884 = _2869 * _693;
        float _2886 = (cbSceneParam._m0[77u].w * _2882) / _2868;
        float _2887 = _2886 + cbSceneParam._m0[79u].w;
        float _2888 = cbSceneParam._m0[79u].w - _2881;
        float _2894 = sqrt(((_2880 * _2880) + (_2881 * _2881)) + (_2884 * _2884));
        float _2897 = (1.0 - (cbSceneParam._m0[77u].w / _2868)) * _2894;
        float _2902 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2904 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3057;
        if (abs((_2882 - _2886) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3057 = ((((_2887 > 0.0) ? exp2(_2902 * _2887) : (2.0 - exp2(_2904 * _2887))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2897;
        }
        else
        {
            float _3017 = 1.0 / cbSceneParam._m0[80u].x;
            float _3018 = isnan(_2888) ? _2887 : (isnan(_2887) ? _2888 : max(_2887, _2888));
            float _3019 = isnan(_2888) ? _2887 : (isnan(_2887) ? _2888 : min(_2887, _2888));
            float _3028 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : min(_3018, 0.0));
            float _3029 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : min(_3019, 0.0));
            _3057 = ((abs(_2894 / _2882) * cbSceneParam._m0[80u].y) * ((((_3028 - _3029) * 2.0) - ((exp2(_2902 * (isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0)))) - exp2(_2902 * (isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0))))) * _3017)) - ((exp2(_2904 * _3028) - exp2(_2904 * _3029)) * _3017))) + (_2897 * cbSceneParam._m0[80u].z);
        }
        vec4 _3059 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2814, _2815, 1.0), 0.0);
        float _3068 = exp2((_3057 * (-1.44269502162933349609375)) * (1.0 - _3059.w));
        float _3069 = log2(_3068);
        float _3085 = log2(_2834);
        _2906 = (exp2(_3085 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].x)) * _3059.x) / cbSceneParam._m0[78u].x)) + _2831;
        _2908 = (exp2(_3085 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].y)) * _3059.y) / cbSceneParam._m0[78u].y)) + _2832;
        _2910 = (exp2(_3085 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3069 * cbSceneParam._m0[78u].z)) * _3059.z) / cbSceneParam._m0[78u].z)) + _2833;
        _2912 = _3068 * _2834;
    }
    else
    {
        _2906 = _2831;
        _2908 = _2832;
        _2910 = _2833;
        _2912 = _2834;
    }
    float _2924 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2925 = _2924 == 3.0;
    float _2926 = log2(_2912);
    float _2933 = exp2(_2926 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2776 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _769))) + ((_2782 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1573)) * cbPerFrame._m0[3u].x));
    float _2934 = exp2(_2926 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2778 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _769))) + ((_2784 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1573)) * cbPerFrame._m0[3u].x));
    float _2935 = exp2(_2926 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2780 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _769))) + ((_2786 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1573)) * cbPerFrame._m0[3u].x));
    float _2944 = (_2924 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2944 * (_2925 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2906)));
    SV_Target.y = _2944 * (_2925 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2908)));
    SV_Target.z = _2944 * (_2925 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2910)));
    SV_Target.w = cbInstanceData._m0[_2806].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2806].w;
}


