#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1239;
float _3600;
float _3601;
float _3602;
float _3603;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _365 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _365) * cbMtdParam._m0[24u].x) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3612 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _390 = (_383 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _391 = (_383 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _392 = (_383 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].x) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3623 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _499 = _495.z;
    float _506 = ((_478.x - _497) * _383) + _497;
    float _507 = ((_478.y - _498) * _383) + _498;
    float _508 = ((_478.z - _499) * _383) + _499;
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _533 = ((_520.z - _508) * _456) + _508;
    float _536 = ((((_520.x - _506) * _456) + _506) * 2.0) + (-1.0);
    float _538 = ((((_520.y - _507) * _456) + _507) * 2.0) + (-1.0);
    float _539 = dot(vec2(_536, _538), vec2(_536, _538));
    float _3634 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _544 = sqrt(1.0 - (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _573 = _571.x;
    float _574 = 1.0 - _573;
    float _602 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_573 - _574) * cbMtdParam._m0[24u].w) + _574) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3645 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _611 = ((((cbMtdParam._m0[10u].x - _463) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _603) + _463;
    float _612 = ((((cbMtdParam._m0[10u].y - _464) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _603) + _464;
    float _613 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _465)) * _603) + _465;
    float _617 = ((cbMtdParam._m0[23u].y - _533) * _603) + _533;
    vec4 _636 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _642 = (_636.x * 2.0) + (-1.0);
    float _643 = (_636.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3656 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _660 = (_603 * (((cbMtdParam._m0[22u].z * _536) - _536) + _642)) + _536;
    float _661 = (_603 * (((cbMtdParam._m0[22u].z * _538) - _538) + _643)) + _538;
    float _662 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) - _544)) + _544;
    float _664 = cbMtdParam._m0[22u].x + _557.w;
    float _667 = fma(_662, _234 * NORMAL.x, fma(_661, _241 * TANGENT.x, (_227 * _219) * _660));
    float _670 = fma(_662, _234 * NORMAL.y, fma(_661, _241 * TANGENT.y, (_227 * _220) * _660));
    float _673 = fma(_662, _234 * NORMAL.z, fma(_661, _241 * TANGENT.z, (_227 * _221) * _660));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3667 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _681 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3689 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3700 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3711 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    vec4 _764 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _766 = _764.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _920 = sqrt(((_750 * _750) + (_751 * _751)) + (_752 * _752));
        float _926 = (cbMatDynParam._m0[5u].x * _920) + cbMatDynParam._m0[5u].y;
        float _3722 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _931 = (cbMatDynParam._m0[5u].z * _920) + cbMatDynParam._m0[5u].w;
        float _3733 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) - _927)) + _927) < ((_766 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _796 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _799 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _802 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _815 = _247 + 9u;
    uint _816 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3744 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    vec4 _836 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _840 = ((isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * TEXCOORD_5.w) * _836.x;
    float _841 = dot(vec3(_678, _679, _680), vec3(_757, _758, _759));
    float _844 = _841 * 2.0;
    float _848 = (_844 * _678) - _757;
    float _849 = (_844 * _679) - _758;
    float _850 = (_844 * _680) - _759;
    float _854 = abs(dot(vec3(_757, _758, _759), vec3(_678, _679, _680)));
    float _3777 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _856 = sqrt(_681);
    float _869 = exp2((_856 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_856 * 3.0));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1238;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _963 = fma(_909, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _901));
        float _967 = fma(_909, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _901));
        float _971 = fma(_909, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _901));
        float _996 = _901 + _678;
        float _997 = _905 + _679;
        float _998 = _909 + _680;
        float _1008 = fma(_998, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996)) - _963;
        float _1009 = fma(_998, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996)) - _967;
        float _1010 = fma(_998, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996)) - _971;
        float _1014 = inversesqrt(dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010)));
        float _1027 = ((_1014 * _1008) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_963 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1014 * _1009) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_967 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1014 * _1010) / cbModelParam._m0[34u].z) + ((((((_971 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1027, _1028, _1029), 0.0);
        float _1066 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1032.x + (-0.5));
        float _1068 = _1066 * (_1032.y + (-0.5));
        float _1069 = _1066 * (_1032.z + (-0.5));
        float _1076 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1039.x + (-0.5));
        float _1078 = _1076 * (_1039.y + (-0.5));
        float _1079 = _1076 * (_1039.z + (-0.5));
        float _1086 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1046.x + (-0.5));
        float _1088 = _1086 * (_1046.y + (-0.5));
        float _1089 = _1086 * (_1046.z + (-0.5));
        float _1096 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1053.x + (-0.5));
        float _1098 = _1096 * (_1053.y + (-0.5));
        float _1099 = _1096 * (_1053.z + (-0.5));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = _1067 * 0.5;
        float _1104 = _1077 * 0.5;
        float _1105 = _1087 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1120 = (dot(vec3(_678, _679, _680), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1130 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3825 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1132 + 1.0))) + _1137) * _1100;
        float _1147 = _1068 * 0.5;
        float _1148 = _1078 * 0.5;
        float _1149 = _1088 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1163 = (dot(vec3(_678, _679, _680), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1172 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3858 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1174 + 1.0))) + _1179) * _1101;
        float _1189 = _1069 * 0.5;
        float _1190 = _1079 * 0.5;
        float _1191 = _1089 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_678, _679, _680), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3891 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1216 + 1.0))) + _1221) * _1102;
        _1238 = _1069;
        _1240 = _1068;
        _1241 = _1067;
        _1242 = _1079;
        _1243 = _1078;
        _1244 = _1077;
        _1245 = _1089;
        _1246 = _1088;
        _1247 = _1087;
        _1248 = _1102;
        _1249 = _1101;
        _1250 = _1100;
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
    }
    else
    {
        _1238 = _1239;
        _1240 = _1239;
        _1241 = _1239;
        _1242 = _1239;
        _1243 = _1239;
        _1244 = _1239;
        _1245 = _1239;
        _1246 = _1239;
        _1247 = _1239;
        _1248 = _1239;
        _1249 = _1239;
        _1250 = _1239;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1280 = fma(_909, cbModelParam._m0[30u].z, fma(_905, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _901));
        float _1284 = fma(_909, cbModelParam._m0[31u].z, fma(_905, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _901));
        float _1288 = fma(_909, cbModelParam._m0[32u].z, fma(_905, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _901));
        float _1311 = _901 + _678;
        float _1312 = _905 + _679;
        float _1313 = _909 + _680;
        float _1323 = fma(_1313, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1280 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1284 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[35u].z) + ((((((_1288 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1379 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1346.x + (-0.5));
        float _1381 = _1379 * (_1346.y + (-0.5));
        float _1382 = _1379 * (_1346.z + (-0.5));
        float _1389 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1353.x + (-0.5));
        float _1391 = _1389 * (_1353.y + (-0.5));
        float _1392 = _1389 * (_1353.z + (-0.5));
        float _1399 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1360.x + (-0.5));
        float _1401 = _1399 * (_1360.y + (-0.5));
        float _1402 = _1399 * (_1360.z + (-0.5));
        float _1409 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1367.x + (-0.5));
        float _1411 = _1409 * (_1367.y + (-0.5));
        float _1412 = _1409 * (_1367.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_678, _679, _680), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3954 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1443 + 1.0))) + _1448) * _1413;
        float _1458 = _1381 * 0.5;
        float _1459 = _1391 * 0.5;
        float _1460 = _1401 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_678, _679, _680), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _3987 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1485 + 1.0))) + _1490) * _1414;
        float _1500 = _1382 * 0.5;
        float _1501 = _1392 * 0.5;
        float _1502 = _1402 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_678, _679, _680), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4020 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1527 + 1.0))) + _1532) * _1415;
        _1549 = _1382;
        _1550 = _1381;
        _1551 = _1380;
        _1552 = _1392;
        _1553 = _1391;
        _1554 = _1390;
        _1555 = _1402;
        _1556 = _1401;
        _1557 = _1400;
        _1558 = _1415;
        _1559 = _1414;
        _1560 = _1413;
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1239;
        _1550 = _1239;
        _1551 = _1239;
        _1552 = _1239;
        _1553 = _1239;
        _1554 = _1239;
        _1555 = _1239;
        _1556 = _1239;
        _1557 = _1239;
        _1558 = _1239;
        _1559 = _1239;
        _1560 = _1239;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1251)) + _1251;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1252)) + _1252;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1253)) + _1253;
    float _1596 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1573));
    float _1617 = _848 * 0.5;
    float _1618 = _849 * 0.5;
    float _1619 = _850 * 0.5;
    float _1620 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1623 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1626 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1660;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1633 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1238, _1242, _1245, _1248));
        float _1637 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1641 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1648 = dot(vec4(cbModelParam._m0[39u]), vec4(_1617, _1618, _1619, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1671;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1662 = dot(vec4(cbModelParam._m0[40u]), vec4(_1617, _1618, _1619, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1675 = (_1671 * cbModelParam._m0[1u].x) + (_1660 * (1.0 - cbModelParam._m0[1u].x));
    float _1685 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1685 : min(cbModelParam._m0[25u].z, _1685));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_909, cbModelParam._m0[13u].z, fma(_905, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_909, cbModelParam._m0[14u].z, fma(_905, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_909, cbModelParam._m0[15u].z, fma(_905, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_850, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848));
        float _1749 = fma(_850, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848));
        float _1752 = fma(_850, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1780 = frontier_phi_17_15_ladder;
        }
        float _1982;
        if (_1749 > 0.0)
        {
            _1982 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1982 = frontier_phi_26_22_ladder;
        }
        float _2225;
        if (_1752 > 0.0)
        {
            _2225 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2225 = frontier_phi_38_33_ladder;
        }
        float _2227 = isnan(_1982) ? _1780 : (isnan(_1780) ? _1982 : min(_1780, _1982));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1746) + _1735;
        float _2233 = (_2228 * _1749) + _1739;
        float _2234 = (_2228 * _1752) + _1743;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1686);
            frontier_phi_16_38_ladder = _2358.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2358.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2358.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_16_38_ladder_2;
        _1770 = frontier_phi_16_38_ladder_1;
        _1772 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_848, _849, _850), _1686);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1868;
    float _1870;
    float _1872;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1832 = fma(_909, cbModelParam._m0[21u].z, fma(_905, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901)) + cbModelParam._m0[21u].w;
        float _1836 = fma(_909, cbModelParam._m0[22u].z, fma(_905, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901)) + cbModelParam._m0[22u].w;
        float _1840 = fma(_909, cbModelParam._m0[23u].z, fma(_905, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901)) + cbModelParam._m0[23u].w;
        float _1843 = fma(_850, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848));
        float _1846 = fma(_850, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848));
        float _1849 = fma(_850, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848));
        float _1987;
        if (_1843 > 0.0)
        {
            _1987 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1987 = frontier_phi_28_24_ladder;
        }
        float _2252;
        if (_1846 > 0.0)
        {
            _2252 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2252 = frontier_phi_40_35_ladder;
        }
        float _2457;
        if (_1849 > 0.0)
        {
            _2457 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2457 = frontier_phi_49_46_ladder;
        }
        float _2459 = isnan(_2252) ? _1987 : (isnan(_1987) ? _2252 : min(_1987, _2252));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1843) + _1832;
        float _2465 = (_2460 * _1846) + _1836;
        float _2466 = (_2460 * _1849) + _1840;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2467;
        float _2470 = _2467 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2466 > _2470) || ((_2466 < _2468) || ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 < _2468) || (_2464 > _2470))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2466, cbModelParam._m0[17u].z, fma(_2465, cbModelParam._m0[17u].y, _2464 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2466, cbModelParam._m0[18u].z, fma(_2465, cbModelParam._m0[18u].y, _2464 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2466, cbModelParam._m0[19u].z, fma(_2465, cbModelParam._m0[19u].y, _2464 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_25_49_ladder = _2665.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2665.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2665.x * cbModelParam._m0[1u].z;
        }
        _1868 = frontier_phi_25_49_ladder_2;
        _1870 = frontier_phi_25_49_ladder_1;
        _1872 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_848, _849, _850), _1777);
        _1868 = _1852.x * cbModelParam._m0[1u].z;
        _1870 = _1852.y * cbModelParam._m0[1u].z;
        _1872 = _1852.z * cbModelParam._m0[1u].z;
    }
    float _1884 = ((((1.0 - _869) * ((_856 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_869 * _856)) * _840;
    float _1885 = _1884 * ((cbModelParam._m0[1u].w * (_1868 - _1768)) + _1768);
    float _1886 = _1884 * ((cbModelParam._m0[1u].w * (_1870 - _1770)) + _1770);
    float _1887 = _1884 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1890 = fma(_1887, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1885 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1887, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1885 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1887, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1885 * cbSceneParam._m0[91u].x));
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1916 = _840 + (-1.0);
    float _1921 = (cbLight._m0[_1909].x * _1916) + 1.0;
    float _1922 = (cbLight._m0[_1909].y * _1916) + 1.0;
    float _1923 = (cbLight._m0[_1909].z * _1916) + 1.0;
    float _1924 = (cbLight._m0[_1909].w * _1916) + 1.0;
    uint _1925 = _1908 + 5u;
    float _1931 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1935 = _1908 + 4u;
    float _1941 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1945 = _1908 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_678, _679, _680));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_678, _679, _680));
    float _4156 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _4167 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1925].x * _1931) * _1966) + ((cbLight._m0[_1935].x * _1941) * _1964);
    float _1974 = ((_1931 * cbLight._m0[_1925].y) * _1966) + ((_1941 * cbLight._m0[_1935].y) * _1964);
    float _1975 = ((_1931 * cbLight._m0[_1925].z) * _1966) + ((_1941 * cbLight._m0[_1935].z) * _1964);
    uvec4 _1979 = floatBitsToUint(cbLight._m0[_1908 + 12u]);
    bool _1981 = _1979.x == 0u;
    float _1992;
    float _1994;
    float _1996;
    if (_1981)
    {
        _1992 = _1973;
        _1994 = _1974;
        _1996 = _1975;
    }
    else
    {
        uint _2000 = _1908 + 6u;
        float _2016 = (dot(vec3(cbLight._m0[_1908 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _4178 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _2019 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _1992 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1973;
        _1994 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1974;
        _1996 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1975;
    }
    bool _1999 = _1979.y == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_1999)
    {
        _2037 = _1992;
        _2039 = _1994;
        _2041 = _1996;
    }
    else
    {
        uint _2196 = _1908 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1908 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4194 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2215 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2037 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1992;
        _2039 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1994;
        _2041 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1996;
    }
    uint _2044 = _1908 + 8u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _681) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1908].x + _757;
    float _2060 = cbLight._m0[_1908].y + _758;
    float _2061 = cbLight._m0[_1908].z + _759;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1908].xyz));
    float _4210 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2073 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2074 = dot(vec3(_678, _679, _680), vec3(_2066, _2067, _2068));
    float _4232 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2066, _2067, _2068));
    float _4243 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2058 * _2058;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2058;
    float _2109 = (0.5 / (((_2073 * ((_2072 * _2098) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2098) + _2058) * _2072))) * _2072;
    float _4254 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    uint _2122 = _1908 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _681) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1945].x + _757;
    float _2136 = cbLight._m0[_1945].y + _758;
    float _2137 = cbLight._m0[_1945].z + _759;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_1945].xyz));
    float _4265 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2149 = dot(vec3(_678, _679, _680), vec3(_2142, _2143, _2144));
    float _4276 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2142, _2143, _2144));
    float _4287 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2134;
    float _2181 = (0.5 / (((_2073 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2171) + _2134) * _2148))) * _2148;
    float _4298 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2193 = (((_2170 * cbLight._m0[_2122].x) * _2183) * _1931) + (((_2097 * cbLight._m0[_2044].x) * _2111) * _1941);
    float _2194 = (((_2170 * cbLight._m0[_2122].y) * _2183) * _1931) + (((_2097 * cbLight._m0[_2044].y) * _2111) * _1941);
    float _2195 = (((_2170 * cbLight._m0[_2122].z) * _2183) * _1931) + (((_2097 * cbLight._m0[_2044].z) * _2111) * _1941);
    float _2257;
    float _2259;
    float _2261;
    if (_1981)
    {
        _2257 = _2193;
        _2259 = _2194;
        _2261 = _2195;
    }
    else
    {
        uint _2263 = _1908 + 2u;
        uint _2267 = _1908 + 10u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _681) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _757;
        float _2284 = cbLight._m0[_2263].y + _758;
        float _2285 = cbLight._m0[_2263].z + _759;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2263].xyz));
        float _4309 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2297 = dot(vec3(_678, _679, _680), vec3(_2290, _2291, _2292));
        float _4320 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4331 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2319 = 1.0 - _2282;
        float _2329 = (0.5 / (((_2073 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2319) + _2282) * _2296))) * _2296;
        float _4342 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2257 = (((_2318 * cbLight._m0[_2267].x) * _2331) * _2332) + _2193;
        _2259 = (((_2318 * cbLight._m0[_2267].y) * _2331) * _2332) + _2194;
        _2261 = (((_2318 * cbLight._m0[_2267].z) * _2331) * _2332) + _2195;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1999)
    {
        _2367 = _2257;
        _2369 = _2259;
        _2371 = _2261;
    }
    else
    {
        uint _2378 = _1908 + 3u;
        uint _2382 = _1908 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _681) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _757;
        float _2399 = cbLight._m0[_2378].y + _758;
        float _2400 = cbLight._m0[_2378].z + _759;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2378].xyz));
        float _4358 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2412 = dot(vec3(_678, _679, _680), vec3(_2405, _2406, _2407));
        float _4369 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4380 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2073 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2434) + _2397) * _2411))) * _2411;
        float _4391 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2367 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2257;
        _2369 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2259;
        _2371 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2261;
    }
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    if (_1906.y == 0u)
    {
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2522;
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2522;
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2522;
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.x;
        uint _2549 = uint((float(_2537.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2538))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2538)));
        float _2559 = (log2(_2525 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2560 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        uint _2563 = uint(isnan(14.0) ? _2560 : (isnan(_2560) ? 14.0 : min(_2560, 14.0)));
        uvec4 _2568 = texelFetch(g_lightClusterGridBuffer, int(((_2563 << 2u) + (_2549 << 6u)) >> 2u));
        uint _2569 = _2568.x;
        uint _2570 = _2537.z;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((((1u << ((_2570 >> 4u) & 15u)) + 4294967295u) & _2569) == 0u) || ((_2570 & 240u) == 0u))
        {
            _2670 = 0.0;
            _2672 = 0.0;
            _2674 = 0.0;
            _2676 = 0.0;
            _2678 = 0.0;
            _2680 = 0.0;
        }
        else
        {
            float _2671;
            float _2673;
            float _2675;
            float _2677;
            float _2679;
            float _2681;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            float _2828 = 0.0;
            uint _2829 = 0u;
            uint _2838;
            bool _2839;
            for (;;)
            {
                _2838 = texelFetch(g_lightClassification, int((((_2563 << 5u) + (_2549 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                _2839 = _2838 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2839)
                {
                    frontier_phi_66_pred = _2823;
                    frontier_phi_66_pred_1 = _2828;
                    frontier_phi_66_pred_2 = _2827;
                    frontier_phi_66_pred_3 = _2826;
                    frontier_phi_66_pred_4 = _2825;
                    frontier_phi_66_pred_5 = _2824;
                }
                else
                {
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    uint _2974;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2828;
                    _2974 = _2838;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    float _2900;
                    for (;;)
                    {
                        uint _2978 = uint(findLSB(_2974)) + (_2829 << 5u);
                        uint _2975 = (_2974 + 4294967295u) & _2974;
                        uint _2980 = _2978 * 48u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _3000 = (_2978 * 48u) + 4u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3019 = (_2978 * 48u) + 8u;
                        vec3 _3030 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x));
                        float _3034 = _2994.x - _2523;
                        float _3035 = _2994.y - _2524;
                        float _3036 = _2994.z - _2525;
                        float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                        float _3040 = inversesqrt(_3037);
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3044 = dot(vec3(_796, _799, _802), vec3(_3041, _3042, _3043));
                        float _3049 = 1.0 - (_3037 * _2994.w);
                        float _4417 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3051 = sqrt(_3037) * _3013.w;
                        float _3054 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _3044) + _3055;
                        float _3061 = _3051 * _3051;
                        float _3065 = ((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3050) / ((_3061 * 0.699999988079071044921875) + 1.0);
                        float _3069 = (-0.0) - _2523;
                        float _3070 = (-0.0) - _2524;
                        float _3071 = (-0.0) - _2525;
                        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                        float _3076 = _3075 * _3069;
                        float _3077 = _3075 * _3070;
                        float _3078 = _3075 * _3071;
                        float _3086 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                        float _3087 = 1.0 - _856;
                        float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                        float _3095 = _3094 * _3094;
                        float _3096 = _3095 * _3095;
                        float _3097 = _3076 + _3041;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3107 = dot(vec3(_796, _799, _802), vec3(_3076, _3077, _3078));
                        float _4433 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3110 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3111 = dot(vec3(_796, _799, _802), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                        float _4444 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                        float _3119 = _3054 * _3095;
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3044) + _3120;
                        float _4455 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                        float _3125 = 1.0 - _3095;
                        float _3135 = (0.5 / (((_3124 * ((_3110 * _3125) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3095) * _3110))) * _3124;
                        float _4466 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3146 = (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3118 * _3118) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125))) * _3050;
                        _2898 = (_3065 * _3013.x) + _2971;
                        _2899 = (_3065 * _3013.y) + _2972;
                        _2900 = (_3065 * _3013.z) + _2973;
                        _2895 = (_3146 * _3030.x) + _2968;
                        _2896 = (_3146 * _3030.y) + _2969;
                        _2897 = (_3146 * _3030.z) + _2970;
                        if (_2975 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2900;
                            _2974 = _2975;
                        }
                    }
                    frontier_phi_66_pred = _2895;
                    frontier_phi_66_pred_1 = _2900;
                    frontier_phi_66_pred_2 = _2899;
                    frontier_phi_66_pred_3 = _2898;
                    frontier_phi_66_pred_4 = _2897;
                    frontier_phi_66_pred_5 = _2896;
                }
                _2671 = frontier_phi_66_pred;
                _2681 = frontier_phi_66_pred_1;
                _2679 = frontier_phi_66_pred_2;
                _2677 = frontier_phi_66_pred_3;
                _2675 = frontier_phi_66_pred_4;
                _2673 = frontier_phi_66_pred_5;
                uint _2830 = _2829 + 1u;
                if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2823 = _2671;
                    _2824 = _2673;
                    _2825 = _2675;
                    _2826 = _2677;
                    _2827 = _2679;
                    _2828 = _2681;
                    _2829 = _2830;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2670 = _2671;
            _2672 = _2673;
            _2674 = _2675;
            _2676 = _2677;
            _2678 = _2679;
            _2680 = _2681;
        }
        uvec4 _2684 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2685 = _2684.z;
        uint _2687 = (_2685 >> 8u) & 15u;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        if (((4294967295u << _2687) & _2569) == 0u)
        {
            _2791 = _2670;
            _2793 = _2672;
            _2795 = _2674;
            _2797 = _2676;
            _2799 = _2678;
            _2801 = _2680;
        }
        else
        {
            float _2816 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
            float _2817 = _2816 * _2523;
            float _2818 = _2816 * _2524;
            float _2819 = _2816 * _2525;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2687 < ((_2685 >> 12u) & 15u))
            {
                float _2792;
                float _2794;
                float _2796;
                float _2798;
                float _2800;
                float _2802;
                float _2951 = _2670;
                float _2952 = _2672;
                float _2953 = _2674;
                float _2954 = _2676;
                float _2955 = _2678;
                float _2956 = _2680;
                uint _2957 = _2687;
                uint _2966;
                bool _2967;
                for (;;)
                {
                    _2966 = texelFetch(g_lightClassification, int((((_2563 << 5u) + (_2549 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                    _2967 = _2966 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2967)
                    {
                        frontier_phi_77_pred = _2956;
                        frontier_phi_77_pred_1 = _2955;
                        frontier_phi_77_pred_2 = _2954;
                        frontier_phi_77_pred_3 = _2953;
                        frontier_phi_77_pred_4 = _2952;
                        frontier_phi_77_pred_5 = _2951;
                    }
                    else
                    {
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3173 = _2951;
                        float _3174 = _2952;
                        float _3175 = _2953;
                        float _3176 = _2954;
                        float _3177 = _2955;
                        float _3178 = _2956;
                        uint _3179 = _2966;
                        uint _3180;
                        vec4 _3205;
                        float _3206;
                        vec4 _3221;
                        vec3 _3233;
                        vec4 _3248;
                        vec4 _3263;
                        float _3309;
                        bool _3310;
                        for (;;)
                        {
                            uint _3190 = ((_2957 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3179));
                            _3180 = (_3179 + 4294967295u) & _3179;
                            uint _3192 = _3190 * 40u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            _3206 = _3205.w;
                            uint _3208 = (_3190 * 40u) + 4u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3190 * 40u) + 8u;
                            _3233 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x));
                            uint _3235 = (_3190 * 40u) + 16u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            uint _3250 = (_3190 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3190 * 40u) + 24u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3284 = (_3190 * 40u) + 28u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            _3309 = fma(_2525, _3297.z, fma(_2524, _3297.y, _3297.x * _2523)) + _3297.w;
                            _3310 = !((fma(_2525, _3278.z, fma(_2524, _3278.y, _3278.x * _2523)) + _3278.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3310)
                            {
                                float _3337 = _3205.x - _2523;
                                float _3338 = _3205.y - _2524;
                                float _3339 = _3205.z - _2525;
                                float _3340 = dot(vec3(_3337, _3338, _3339), vec3(_3337, _3338, _3339));
                                float _3343 = inversesqrt(_3340);
                                float _3344 = _3343 * _3337;
                                float _3345 = _3343 * _3338;
                                float _3346 = _3343 * _3339;
                                float _3350 = 1.0 - (_3340 / (_3206 * _3206));
                                float _4477 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3355 = sqrt(_3340) * _3221.w;
                                float _3357 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                                float _3358 = _3357 * _3357;
                                float _3361 = ((1.0 - _3358) * dot(vec3(_3344, _3345, _3346), vec3(_796, _799, _802))) + _3358;
                                float _3364 = _3355 * _3355;
                                float _3368 = (fma(_2525, _3248.z, fma(_2524, _3248.y, _3248.x * _2523)) + _3248.w) / _3309;
                                float _3369 = (fma(_2525, _3263.z, fma(_2524, _3263.y, _3263.x * _2523)) + _3263.w) / _3309;
                                float _3373 = 1.0 - dot(vec2(_3368, _3369), vec2(_3368, _3369));
                                float _4493 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3374 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3375 = _3374 * (((isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0))) * _3351) / ((_3364 * 0.699999988079071044921875) + 1.0));
                                float _3387 = exp2(log2(1.0 / ((_3364 * 3.5) + 5.0)) * 0.25);
                                float _3388 = 1.0 - _856;
                                float _3395 = sqrt(1.0 - ((1.0 - (_3388 * _3388)) * (1.0 - (_3387 * _3387))));
                                float _3396 = _3395 * _3395;
                                float _3397 = _3396 * _3396;
                                float _3398 = _3344 - _2817;
                                float _3399 = _3345 - _2818;
                                float _3400 = _3346 - _2819;
                                float _3404 = inversesqrt(dot(vec3(_3398, _3399, _3400), vec3(_3398, _3399, _3400)));
                                float _3408 = dot(vec3(_796, _799, _802), vec3((-0.0) - _2817, (-0.0) - _2818, (-0.0) - _2819));
                                float _4504 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3411 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3412 = dot(vec3(_796, _799, _802), vec3(_3404 * _3398, _3404 * _3399, _3404 * _3400));
                                float _4515 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3415 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3419 = ((_3415 * _3415) * (_3397 + (-1.0))) + 1.0;
                                float _3420 = _3357 * _3396;
                                float _3421 = _3420 * _3420;
                                float _3427 = ((1.0 - _3421) * dot(vec3(_796, _799, _802), vec3(_3344, _3345, _3346))) + _3421;
                                float _4526 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3429 = 1.0 - _3396;
                                float _3439 = (0.5 / (((_3428 * ((_3411 * _3429) + _3396)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3396) * _3411))) * _3428;
                                float _4537 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3449 = (_3374 * _3351) * (((_3397 * 3.1415927410125732421875) * (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) / ((_3419 * _3419) * ((_3364 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3375 * _3221.y;
                                frontier_phi_83_pred_1 = _3375 * _3221.x;
                                frontier_phi_83_pred_2 = _3449 * _3233.z;
                                frontier_phi_83_pred_3 = _3449 * _3233.y;
                                frontier_phi_83_pred_4 = _3449 * _3233.x;
                                frontier_phi_83_pred_5 = _3375 * _3221.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3457 = frontier_phi_83_pred;
                            _3456 = frontier_phi_83_pred_1;
                            _3455 = frontier_phi_83_pred_2;
                            _3454 = frontier_phi_83_pred_3;
                            _3453 = frontier_phi_83_pred_4;
                            _3458 = frontier_phi_83_pred_5;
                            _3163 = _3456 + _3176;
                            _3164 = _3457 + _3177;
                            _3165 = _3458 + _3178;
                            _3160 = _3453 + _3173;
                            _3161 = _3454 + _3174;
                            _3162 = _3455 + _3175;
                            if (_3180 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3164;
                                _3178 = _3165;
                                _3179 = _3180;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3165;
                        frontier_phi_77_pred_1 = _3164;
                        frontier_phi_77_pred_2 = _3163;
                        frontier_phi_77_pred_3 = _3162;
                        frontier_phi_77_pred_4 = _3161;
                        frontier_phi_77_pred_5 = _3160;
                    }
                    _2802 = frontier_phi_77_pred;
                    _2800 = frontier_phi_77_pred_1;
                    _2798 = frontier_phi_77_pred_2;
                    _2796 = frontier_phi_77_pred_3;
                    _2794 = frontier_phi_77_pred_4;
                    _2792 = frontier_phi_77_pred_5;
                    uint _2958 = _2957 + 1u;
                    if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2951 = _2792;
                        _2952 = _2794;
                        _2953 = _2796;
                        _2954 = _2798;
                        _2955 = _2800;
                        _2956 = _2802;
                        _2957 = _2958;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2796;
                frontier_phi_58_59_ladder_1 = _2802;
                frontier_phi_58_59_ladder_2 = _2800;
                frontier_phi_58_59_ladder_3 = _2798;
                frontier_phi_58_59_ladder_4 = _2794;
                frontier_phi_58_59_ladder_5 = _2792;
            }
            else
            {
                frontier_phi_58_59_ladder = _2674;
                frontier_phi_58_59_ladder_1 = _2680;
                frontier_phi_58_59_ladder_2 = _2678;
                frontier_phi_58_59_ladder_3 = _2676;
                frontier_phi_58_59_ladder_4 = _2672;
                frontier_phi_58_59_ladder_5 = _2670;
            }
            _2791 = frontier_phi_58_59_ladder_5;
            _2793 = frontier_phi_58_59_ladder_4;
            _2795 = frontier_phi_58_59_ladder;
            _2797 = frontier_phi_58_59_ladder_3;
            _2799 = frontier_phi_58_59_ladder_2;
            _2801 = frontier_phi_58_59_ladder_1;
        }
        float _2806 = isnan(1.0) ? _840 : (isnan(_840) ? 1.0 : min(_840, 1.0));
        _2582 = (_2806 * _2797) + _2037;
        _2584 = (_2806 * _2799) + _2039;
        _2586 = (_2806 * _2801) + _2041;
        _2588 = ((_2791 * 0.039999999105930328369140625) * _2806) + _2367;
        _2590 = ((_2793 * 0.039999999105930328369140625) * _2806) + _2369;
        _2592 = ((_2795 * 0.039999999105930328369140625) * _2806) + _2371;
    }
    else
    {
        _2582 = _2037;
        _2584 = _2039;
        _2586 = _2041;
        _2588 = _2367;
        _2590 = _2369;
        _2592 = _2371;
    }
    float _4553 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4564 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4575 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2609 = ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2582 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _840))) + ((_2588 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    float _2610 = ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2584 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _840))) + ((_2590 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    float _2611 = ((isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2586 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _840))) + ((_2592 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    uint _2612 = _247 + 6u;
    float _2620 = _777 / cbSceneParam._m0[86u].x;
    float _2621 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2635 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2637 = _2635.x;
    float _2638 = _2635.y;
    float _2639 = _2635.z;
    float _2640 = _2635.w;
    float _2733;
    float _2735;
    float _2737;
    float _2739;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2695 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2696 = _2695 / _699;
        float _2707 = _2696 * _750;
        float _2708 = _751 * _2696;
        float _2709 = (-0.0) - _2708;
        float _2711 = _2696 * _752;
        float _2713 = (cbSceneParam._m0[77u].w * _2709) / _2695;
        float _2714 = _2713 + cbSceneParam._m0[79u].w;
        float _2715 = cbSceneParam._m0[79u].w - _2708;
        float _2721 = sqrt(((_2707 * _2707) + (_2708 * _2708)) + (_2711 * _2711));
        float _2724 = (1.0 - (cbSceneParam._m0[77u].w / _2695)) * _2721;
        float _2729 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2731 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2908;
        if (abs((_2709 - _2713) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2908 = ((((_2714 > 0.0) ? exp2(_2729 * _2714) : (2.0 - exp2(_2731 * _2714))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2724;
        }
        else
        {
            float _2852 = 1.0 / cbSceneParam._m0[80u].x;
            float _2853 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : max(_2714, _2715));
            float _2854 = isnan(_2715) ? _2714 : (isnan(_2714) ? _2715 : min(_2714, _2715));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            float _2864 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : min(_2854, 0.0));
            _2908 = ((abs(_2721 / _2709) * cbSceneParam._m0[80u].y) * ((((_2863 - _2864) * 2.0) - ((exp2(_2729 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0)))) - exp2(_2729 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0))))) * _2852)) - ((exp2(_2731 * _2863) - exp2(_2731 * _2864)) * _2852))) + (_2724 * cbSceneParam._m0[80u].z);
        }
        vec4 _2910 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2620, _2621, 1.0), 0.0);
        float _2919 = exp2((_2908 * (-1.44269502162933349609375)) * (1.0 - _2910.w));
        float _2920 = log2(_2919);
        float _2936 = log2(_2640);
        _2733 = (exp2(_2936 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].x)) * _2910.x) / cbSceneParam._m0[78u].x)) + _2637;
        _2735 = (exp2(_2936 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].y)) * _2910.y) / cbSceneParam._m0[78u].y)) + _2638;
        _2737 = (exp2(_2936 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2920 * cbSceneParam._m0[78u].z)) * _2910.z) / cbSceneParam._m0[78u].z)) + _2639;
        _2739 = _2919 * _2640;
    }
    else
    {
        _2733 = _2637;
        _2735 = _2638;
        _2737 = _2639;
        _2739 = _2640;
    }
    bool _2946;
    vec4 _2749;
    vec4 _2771;
    float _2773;
    float _2777;
    float _2778;
    float _2779;
    float _2780;
    bool _2790;
    for (;;)
    {
        _2749 = cbMatDynParam._m0[0u];
        float _2751 = roundEven(_2749.y);
        bool _2752 = _2751 == 3.0;
        float _2753 = log2(_2739);
        float _2760 = exp2(_2753 * cbSceneParam._m0[78u].x) * _2609;
        float _2761 = exp2(_2753 * cbSceneParam._m0[78u].y) * _2610;
        float _2762 = exp2(_2753 * cbSceneParam._m0[78u].z) * _2611;
        float _2769 = _766 + (-0.5);
        _2771 = cbMtdParam._m0[1u];
        _2773 = _2771.y * _2769;
        float _2776 = (_2751 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2777 = _2776 * (_2752 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2733)));
        _2778 = _2776 * (_2752 ? _2761 : (_2761 + (cbSceneParam._m0[72u].w * _2735)));
        _2779 = _2776 * (_2752 ? _2762 : (_2762 + (cbSceneParam._m0[72u].w * _2737)));
        _2780 = _2769 * 0.999000012874603271484375;
        _2790 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2790)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2780) < 0.5)
            {
                _2946 = true;
                break;
            }
        }
        uint _2887 = _815 + uint(_2749.w);
        if ((cbInstanceData._m0[_2887].w < 1.0) && ((cbInstanceData._m0[_2887].w + _2780) < 0.5))
        {
            _2946 = true;
            break;
        }
        if ((_2773 + 1.0) < _2771.x)
        {
            _2946 = true;
            break;
        }
        _2946 = false;
        break;
    }
    float _3151;
    if (_2946)
    {
        discard_state = true;
        _3151 = 0.0;
    }
    else
    {
        _3151 = cbInstanceData._m0[_2612].w;
    }
    SV_Target.x = _2777;
    SV_Target.y = _2778;
    SV_Target.z = _2779;
    SV_Target.w = _3151;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2612].w;
    discard_exit();
}


