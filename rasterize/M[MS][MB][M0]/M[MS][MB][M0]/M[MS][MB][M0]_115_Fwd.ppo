#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1224;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3530 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3541 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3552 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3563 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) + _428;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _512 = ((_482.z - _503) * _409) + _503;
    float _515 = ((((_482.x - _501) * _409) + _501) * 2.0) + (-1.0);
    float _516 = ((((_482.y - _502) * _409) + _502) * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3574 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _554 = (_515 + ((((_455.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_542.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _555 = (_516 + ((((_455.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_542.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _558 = fma(_522, _227, fma(_555, _234, _554 * _220));
    float _561 = fma(_522, _228, fma(_555, _235, _554 * _221));
    float _564 = fma(_522, _229, fma(_555, _236, _554 * _222));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _604 = ((_599 - _600) * cbMtdParam._m0[24u].z) + _600;
    float _606 = (cbMtdParam._m0[19u].x + dot(vec4(_568 * _558, _568 * _561, _568 * _564, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_604 * cbMtdParam._m0[21u].z);
    float _3585 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _622 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_604 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3596 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _627 = ((_607 * (cbMtdParam._m0[17u].x - _435)) * _623) + _435;
    float _628 = ((_607 * (cbMtdParam._m0[17u].y - _436)) * _623) + _436;
    float _629 = ((_607 * (cbMtdParam._m0[17u].z - _437)) * _623) + _437;
    float _634 = (((_455.z - _512) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _512;
    float _638 = ((_542.z - _634) * cbMtdParam._m0[19u].w) + _634;
    vec4 _651 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _658 = (_651.x * 2.0) + (-1.0);
    float _659 = (_651.y * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _3607 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _669 = (((_651.z - _638) * _607) * _623) + _638;
    float _684 = (((cbMtdParam._m0[21u].x * _554) + ((_658 - _554) * _607)) * _623) + _554;
    float _685 = (((cbMtdParam._m0[21u].x * _555) + ((_659 - _555) * _607)) * _623) + _555;
    float _686 = (((sqrt(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) - _522) * _607) * _623) + _522;
    float _688 = cbMtdParam._m0[22u].x + _542.w;
    float _691 = fma(_686, _227, fma(_685, _234, _684 * _220));
    float _694 = fma(_686, _228, fma(_685, _235, _684 * _221));
    float _697 = fma(_686, _229, fma(_685, _236, _684 * _222));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _3618 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _705 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _3640 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3651 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3662 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _723 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _809 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _812 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _815 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _829 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _835 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_829].x;
    float _836 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_829].y;
    float _837 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_829].z;
    float _3673 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    vec4 _849 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _853 = ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * TEXCOORD_5.w) * _849.x;
    float _854 = dot(vec3(_702, _703, _704), vec3(_782, _783, _784));
    float _857 = _854 * 2.0;
    float _861 = (_857 * _702) - _782;
    float _862 = (_857 * _703) - _783;
    float _863 = (_857 * _704) - _784;
    float _867 = abs(dot(vec3(_782, _783, _784), vec3(_702, _703, _704)));
    float _3706 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _869 = sqrt(_705);
    float _882 = exp2((_869 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_869 * 3.0));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1223;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _952 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _956 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _981 = _914 + _702;
        float _982 = _918 + _703;
        float _983 = _922 + _704;
        float _993 = fma(_983, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981)) - _948;
        float _994 = fma(_983, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981)) - _952;
        float _995 = fma(_983, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981)) - _956;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_948 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_952 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[34u].z) + ((((((_956 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1051 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1017.x + (-0.5));
        float _1053 = _1051 * (_1017.y + (-0.5));
        float _1054 = _1051 * (_1017.z + (-0.5));
        float _1061 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1024.x + (-0.5));
        float _1063 = _1061 * (_1024.y + (-0.5));
        float _1064 = _1061 * (_1024.z + (-0.5));
        float _1071 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1031.x + (-0.5));
        float _1073 = _1071 * (_1031.y + (-0.5));
        float _1074 = _1071 * (_1031.z + (-0.5));
        float _1081 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1038.x + (-0.5));
        float _1083 = _1081 * (_1038.y + (-0.5));
        float _1084 = _1081 * (_1038.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1105 = (dot(vec3(_702, _703, _704), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1115 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3754 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1117 + 1.0))) + _1122) * _1085;
        float _1132 = _1053 * 0.5;
        float _1133 = _1063 * 0.5;
        float _1134 = _1073 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_702, _703, _704), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3787 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1159 + 1.0))) + _1164) * _1086;
        float _1174 = _1054 * 0.5;
        float _1175 = _1064 * 0.5;
        float _1176 = _1074 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_702, _703, _704), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3820 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1201 + 1.0))) + _1206) * _1087;
        _1223 = _1054;
        _1225 = _1053;
        _1226 = _1052;
        _1227 = _1064;
        _1228 = _1063;
        _1229 = _1062;
        _1230 = _1074;
        _1231 = _1073;
        _1232 = _1072;
        _1233 = _1087;
        _1234 = _1086;
        _1235 = _1085;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _1224;
        _1225 = _1224;
        _1226 = _1224;
        _1227 = _1224;
        _1228 = _1224;
        _1229 = _1224;
        _1230 = _1224;
        _1231 = _1224;
        _1232 = _1224;
        _1233 = _1224;
        _1234 = _1224;
        _1235 = _1224;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1263 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1267 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1271 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1294 = _914 + _702;
        float _1295 = _918 + _703;
        float _1296 = _922 + _704;
        float _1306 = fma(_1296, cbModelParam._m0[30u].z, fma(_1295, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1294)) - _1263;
        float _1307 = fma(_1296, cbModelParam._m0[31u].z, fma(_1295, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1294)) - _1267;
        float _1308 = fma(_1296, cbModelParam._m0[32u].z, fma(_1295, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1294)) - _1271;
        float _1312 = inversesqrt(dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308)));
        float _1325 = ((_1312 * _1306) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1263 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1312 * _1307) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1267 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1327 = ((_1312 * _1308) / cbModelParam._m0[35u].z) + ((((((_1271 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1325, _1326, _1327), 0.0);
        float _1362 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1329.x + (-0.5));
        float _1364 = _1362 * (_1329.y + (-0.5));
        float _1365 = _1362 * (_1329.z + (-0.5));
        float _1372 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1336.x + (-0.5));
        float _1374 = _1372 * (_1336.y + (-0.5));
        float _1375 = _1372 * (_1336.z + (-0.5));
        float _1382 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1343.x + (-0.5));
        float _1384 = _1382 * (_1343.y + (-0.5));
        float _1385 = _1382 * (_1343.z + (-0.5));
        float _1392 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1350.x + (-0.5));
        float _1394 = _1392 * (_1350.y + (-0.5));
        float _1395 = _1392 * (_1350.z + (-0.5));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = _1363 * 0.5;
        float _1400 = _1373 * 0.5;
        float _1401 = _1383 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_702, _703, _704), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3883 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1426 + 1.0))) + _1431) * _1396;
        float _1441 = _1364 * 0.5;
        float _1442 = _1374 * 0.5;
        float _1443 = _1384 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_702, _703, _704), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _3916 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1468 + 1.0))) + _1473) * _1397;
        float _1483 = _1365 * 0.5;
        float _1484 = _1375 * 0.5;
        float _1485 = _1385 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_702, _703, _704), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _3949 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1510 + 1.0))) + _1515) * _1398;
        _1532 = _1365;
        _1533 = _1364;
        _1534 = _1363;
        _1535 = _1375;
        _1536 = _1374;
        _1537 = _1373;
        _1538 = _1385;
        _1539 = _1384;
        _1540 = _1383;
        _1541 = _1398;
        _1542 = _1397;
        _1543 = _1396;
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
    }
    else
    {
        _1532 = _1224;
        _1533 = _1224;
        _1534 = _1224;
        _1535 = _1224;
        _1536 = _1224;
        _1537 = _1224;
        _1538 = _1224;
        _1539 = _1224;
        _1540 = _1224;
        _1541 = _1224;
        _1542 = _1224;
        _1543 = _1224;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1236)) + _1236;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1238)) + _1238;
    float _1579 = fma(_1558, cbSceneParam._m0[89u].z, fma(_1557, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1582 = fma(_1558, cbSceneParam._m0[90u].z, fma(_1557, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1585 = fma(_1558, cbSceneParam._m0[91u].z, fma(_1557, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1556));
    float _1600 = _861 * 0.5;
    float _1601 = _862 * 0.5;
    float _1602 = _863 * 0.5;
    float _1603 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1606 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1609 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1643;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1616 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1223, _1227, _1230, _1233));
        float _1620 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1624 = dot(vec4(_1600, _1601, _1602, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1631 = dot(vec4(cbModelParam._m0[39u]), vec4(_1600, _1601, _1602, 1.0));
        _1643 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1631) ? 0.0 : (isnan(0.0) ? _1631 : max(0.0, _1631))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1643 = 1.0;
    }
    float _1654;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1645 = dot(vec4(cbModelParam._m0[40u]), vec4(_1600, _1601, _1602, 1.0));
        _1654 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1654 = 1.0;
    }
    float _1658 = (_1654 * cbModelParam._m0[1u].x) + (_1643 * (1.0 - cbModelParam._m0[1u].x));
    float _1668 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1669 = isnan(_1668) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1668 : min(cbModelParam._m0[25u].z, _1668));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_863, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861));
        float _1731 = fma(_863, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861));
        float _1734 = fma(_863, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1762 = frontier_phi_14_12_ladder;
        }
        float _1963;
        if (_1731 > 0.0)
        {
            _1963 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1963 = frontier_phi_23_19_ladder;
        }
        float _2206;
        if (_1734 > 0.0)
        {
            _2206 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2206 = frontier_phi_35_30_ladder;
        }
        float _2208 = isnan(_1963) ? _1762 : (isnan(_1762) ? _1963 : min(_1762, _1963));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1728) + _1717;
        float _2214 = (_2209 * _1731) + _1721;
        float _2215 = (_2209 * _1734) + _1725;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1669);
            frontier_phi_13_35_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_13_35_ladder_2;
        _1752 = frontier_phi_13_35_ladder_1;
        _1754 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_861, _862, _863), _1669);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_863, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861));
        float _1827 = fma(_863, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861));
        float _1830 = fma(_863, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861));
        float _1968;
        if (_1824 > 0.0)
        {
            _1968 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1968 = frontier_phi_25_21_ladder;
        }
        float _2233;
        if (_1827 > 0.0)
        {
            _2233 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2233 = frontier_phi_37_32_ladder;
        }
        float _2438;
        if (_1830 > 0.0)
        {
            _2438 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2438 = frontier_phi_46_43_ladder;
        }
        float _2440 = isnan(_2233) ? _1968 : (isnan(_1968) ? _2233 : min(_1968, _2233));
        float _2441 = isnan(_2438) ? _2440 : (isnan(_2440) ? _2438 : min(_2440, _2438));
        float _2445 = (_2441 * _1824) + _1813;
        float _2446 = (_2441 * _1827) + _1817;
        float _2447 = (_2441 * _1830) + _1821;
        float _2448 = _2441 * 9.9999997473787516355514526367188e-05;
        float _2449 = (-1.0) - _2448;
        float _2451 = _2448 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2447 > _2451) || ((_2447 < _2449) || ((_2446 > _2451) || ((_2446 < _2449) || ((_2445 < _2449) || (_2445 > _2451))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2447, cbModelParam._m0[17u].z, fma(_2446, cbModelParam._m0[17u].y, _2445 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2447, cbModelParam._m0[18u].z, fma(_2446, cbModelParam._m0[18u].y, _2445 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2447, cbModelParam._m0[19u].z, fma(_2446, cbModelParam._m0[19u].y, _2445 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_22_46_ladder = _2646.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2646.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2646.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_22_46_ladder_2;
        _1851 = frontier_phi_22_46_ladder_1;
        _1853 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_861, _862, _863), _1759);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1865 = ((((1.0 - _882) * ((_869 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_882 * _869)) * _853;
    float _1866 = _1865 * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1867 = _1865 * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1868 = _1865 * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1871 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    uvec4 _1887 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1889 = _1887.x * 14u;
    uint _1890 = _1889 + 13u;
    float _1897 = _853 + (-1.0);
    float _1902 = (cbLight._m0[_1890].x * _1897) + 1.0;
    float _1903 = (cbLight._m0[_1890].y * _1897) + 1.0;
    float _1904 = (cbLight._m0[_1890].z * _1897) + 1.0;
    float _1905 = (cbLight._m0[_1890].w * _1897) + 1.0;
    uint _1906 = _1889 + 5u;
    float _1912 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
    uint _1916 = _1889 + 4u;
    float _1922 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    uint _1926 = _1889 | 1u;
    float _1937 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_702, _703, _704));
    float _1940 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_702, _703, _704));
    float _4085 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _4096 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1945 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.3183098733425140380859375;
    float _1947 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1954 = ((cbLight._m0[_1906].x * _1912) * _1947) + ((cbLight._m0[_1916].x * _1922) * _1945);
    float _1955 = ((_1912 * cbLight._m0[_1906].y) * _1947) + ((_1922 * cbLight._m0[_1916].y) * _1945);
    float _1956 = ((_1912 * cbLight._m0[_1906].z) * _1947) + ((_1922 * cbLight._m0[_1916].z) * _1945);
    uvec4 _1960 = floatBitsToUint(cbLight._m0[_1889 + 12u]);
    bool _1962 = _1960.x == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1962)
    {
        _1973 = _1954;
        _1975 = _1955;
        _1977 = _1956;
    }
    else
    {
        uint _1981 = _1889 + 6u;
        float _1997 = (dot(vec3(cbLight._m0[_1889 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _4107 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2000 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _1973 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1954;
        _1975 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1955;
        _1977 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1956;
    }
    bool _1980 = _1960.y == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_1980)
    {
        _2018 = _1973;
        _2020 = _1975;
        _2022 = _1977;
    }
    else
    {
        uint _2177 = _1889 + 7u;
        float _2193 = (dot(vec3(cbLight._m0[_1889 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2194 = _2193 * _2193;
        float _4123 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2195 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2196 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2018 = (((cbLight._m0[_2177].x * 0.3183098733425140380859375) * _2195) * _2196) + _1973;
        _2020 = (((cbLight._m0[_2177].y * 0.3183098733425140380859375) * _2195) * _2196) + _1975;
        _2022 = (((cbLight._m0[_2177].z * 0.3183098733425140380859375) * _2195) * _2196) + _1977;
    }
    uint _2025 = _1889 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _705) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1889].x + _782;
    float _2041 = cbLight._m0[_1889].y + _783;
    float _2042 = cbLight._m0[_1889].z + _784;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1889].xyz));
    float _4139 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2054 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2055 = dot(vec3(_702, _703, _704), vec3(_2047, _2048, _2049));
    float _4161 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2047, _2048, _2049));
    float _4172 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2078 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2079 = 1.0 - _2039;
    float _2090 = (0.5 / (((_2054 * ((_2053 * _2079) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2079) + _2039) * _2053))) * _2053;
    float _4183 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2092 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2103 = _1889 + 9u;
    float _2114 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _705) * 0.949999988079071044921875);
    float _2115 = _2114 * _2114;
    float _2116 = cbLight._m0[_1926].x + _782;
    float _2117 = cbLight._m0[_1926].y + _783;
    float _2118 = cbLight._m0[_1926].z + _784;
    float _2122 = inversesqrt(dot(vec3(_2116, _2117, _2118), vec3(_2116, _2117, _2118)));
    float _2123 = _2122 * _2116;
    float _2124 = _2122 * _2117;
    float _2125 = _2122 * _2118;
    float _2126 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1926].xyz));
    float _4194 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2129 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2130 = dot(vec3(_702, _703, _704), vec3(_2123, _2124, _2125));
    float _4205 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_2123, _2124, _2125));
    float _4216 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2115 * _2115;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2152 = 1.0 - _2115;
    float _2162 = (0.5 / (((_2054 * ((_2129 * _2152) + _2115)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2152) + _2115) * _2129))) * _2129;
    float _4227 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2164 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    float _2174 = (((_2151 * cbLight._m0[_2103].x) * _2164) * _1912) + (((_2078 * cbLight._m0[_2025].x) * _2092) * _1922);
    float _2175 = (((_2151 * cbLight._m0[_2103].y) * _2164) * _1912) + (((_2078 * cbLight._m0[_2025].y) * _2092) * _1922);
    float _2176 = (((_2151 * cbLight._m0[_2103].z) * _2164) * _1912) + (((_2078 * cbLight._m0[_2025].z) * _2092) * _1922);
    float _2238;
    float _2240;
    float _2242;
    if (_1962)
    {
        _2238 = _2174;
        _2240 = _2175;
        _2242 = _2176;
    }
    else
    {
        uint _2244 = _1889 + 2u;
        uint _2248 = _1889 + 10u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _705) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _782;
        float _2265 = cbLight._m0[_2244].y + _783;
        float _2266 = cbLight._m0[_2244].z + _784;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2244].xyz));
        float _4238 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2278 = dot(vec3(_702, _703, _704), vec3(_2271, _2272, _2273));
        float _4249 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4260 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_2054 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2300) + _2263) * _2277))) * _2277;
        float _4271 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1904 : (isnan(_1904) ? 1.0 : min(_1904, 1.0));
        _2238 = (((_2299 * cbLight._m0[_2248].x) * _2312) * _2313) + _2174;
        _2240 = (((_2299 * cbLight._m0[_2248].y) * _2312) * _2313) + _2175;
        _2242 = (((_2299 * cbLight._m0[_2248].z) * _2312) * _2313) + _2176;
    }
    float _2348;
    float _2350;
    float _2352;
    if (_1980)
    {
        _2348 = _2238;
        _2350 = _2240;
        _2352 = _2242;
    }
    else
    {
        uint _2359 = _1889 + 3u;
        uint _2363 = _1889 + 11u;
        float _2377 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2359].w)) * _705) * 0.949999988079071044921875);
        float _2378 = _2377 * _2377;
        float _2379 = cbLight._m0[_2359].x + _782;
        float _2380 = cbLight._m0[_2359].y + _783;
        float _2381 = cbLight._m0[_2359].z + _784;
        float _2385 = inversesqrt(dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381)));
        float _2386 = _2385 * _2379;
        float _2387 = _2385 * _2380;
        float _2388 = _2385 * _2381;
        float _2389 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2359].xyz));
        float _4287 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2392 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2393 = dot(vec3(_702, _703, _704), vec3(_2386, _2387, _2388));
        float _4298 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
        float _2396 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2397 = dot(vec3(cbLight._m0[_2359].xyz), vec3(_2386, _2387, _2388));
        float _4309 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2401 = _2378 * _2378;
        float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
        float _2414 = (exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2415 = 1.0 - _2378;
        float _2425 = (0.5 / (((_2054 * ((_2392 * _2415) + _2378)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2415) + _2378) * _2392))) * _2392;
        float _4320 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2427 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
        float _2428 = isnan(1.0) ? _1905 : (isnan(_1905) ? 1.0 : min(_1905, 1.0));
        _2348 = (((_2414 * cbLight._m0[_2363].x) * _2427) * _2428) + _2238;
        _2350 = (((_2414 * cbLight._m0[_2363].y) * _2427) * _2428) + _2240;
        _2352 = (((_2414 * cbLight._m0[_2363].z) * _2427) * _2428) + _2242;
    }
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_1887.y == 0u)
    {
        float _2503 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2504 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2503;
        float _2505 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2503;
        float _2506 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2503;
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2519)));
        float _2540 = (log2(_2506 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        float _2661;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
        }
        else
        {
            float _2652;
            float _2654;
            float _2656;
            float _2658;
            float _2660;
            float _2662;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            float _2801 = 0.0;
            uint _2802 = 0u;
            uint _2811;
            bool _2812;
            for (;;)
            {
                _2811 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2802 << 2u)) >> 2u)).x;
                _2812 = _2811 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2812)
                {
                    frontier_phi_61_pred = _2796;
                    frontier_phi_61_pred_1 = _2801;
                    frontier_phi_61_pred_2 = _2800;
                    frontier_phi_61_pred_3 = _2799;
                    frontier_phi_61_pred_4 = _2798;
                    frontier_phi_61_pred_5 = _2797;
                }
                else
                {
                    float _2920;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    uint _2926;
                    _2920 = _2796;
                    _2921 = _2797;
                    _2922 = _2798;
                    _2923 = _2799;
                    _2924 = _2800;
                    _2925 = _2801;
                    _2926 = _2811;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    for (;;)
                    {
                        uint _2930 = uint(findLSB(_2926)) + (_2802 << 5u);
                        uint _2927 = (_2926 + 4294967295u) & _2926;
                        uint _2932 = _2930 * 48u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2952 = (_2930 * 48u) + 4u;
                        vec4 _2965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2971 = (_2930 * 48u) + 8u;
                        vec3 _2982 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2971)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2971 + 2u)).x));
                        float _2986 = _2946.x - _2504;
                        float _2987 = _2946.y - _2505;
                        float _2988 = _2946.z - _2506;
                        float _2989 = dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988));
                        float _2992 = inversesqrt(_2989);
                        float _2993 = _2992 * _2986;
                        float _2994 = _2992 * _2987;
                        float _2995 = _2992 * _2988;
                        float _2996 = dot(vec3(_809, _812, _815), vec3(_2993, _2994, _2995));
                        float _3001 = 1.0 - (_2989 * _2946.w);
                        float _4346 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3003 = sqrt(_2989) * _2965.w;
                        float _3006 = 1.39999997615814208984375 / (_3003 + 1.39999997615814208984375);
                        float _3007 = _3006 * _3006;
                        float _3010 = ((1.0 - _3007) * _2996) + _3007;
                        float _3013 = _3003 * _3003;
                        float _3017 = ((isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))) * _3002) / ((_3013 * 0.699999988079071044921875) + 1.0);
                        float _3021 = (-0.0) - _2504;
                        float _3022 = (-0.0) - _2505;
                        float _3023 = (-0.0) - _2506;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3038 = exp2(log2(1.0 / ((_3013 * 3.5) + 5.0)) * 0.25);
                        float _3039 = 1.0 - _869;
                        float _3046 = sqrt(1.0 - ((1.0 - (_3039 * _3039)) * (1.0 - (_3038 * _3038))));
                        float _3047 = _3046 * _3046;
                        float _3048 = _3047 * _3047;
                        float _3049 = _3028 + _2993;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3055 = inversesqrt(dot(vec3(_3049, _3050, _3051), vec3(_3049, _3050, _3051)));
                        float _3059 = dot(vec3(_809, _812, _815), vec3(_3028, _3029, _3030));
                        float _4362 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3062 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3063 = dot(vec3(_809, _812, _815), vec3(_3055 * _3049, _3055 * _3050, _3055 * _3051));
                        float _4373 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3066 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3070 = ((_3066 * _3066) * (_3048 + (-1.0))) + 1.0;
                        float _3071 = _3006 * _3047;
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _2996) + _3072;
                        float _4384 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3077 = 1.0 - _3047;
                        float _3087 = (0.5 / (((_3076 * ((_3062 * _3077) + _3047)) + 9.9999999392252902907785028219223e-09) + (((_3076 * _3077) + _3047) * _3062))) * _3076;
                        float _4395 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3098 = (((_3048 * 3.1415927410125732421875) * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) / ((_3070 * _3070) * ((_3013 * 2.1991131305694580078125) + 3.141590118408203125))) * _3002;
                        _2855 = (_3017 * _2965.x) + _2923;
                        _2856 = (_3017 * _2965.y) + _2924;
                        _2857 = (_3017 * _2965.z) + _2925;
                        _2852 = (_3098 * _2982.x) + _2920;
                        _2853 = (_3098 * _2982.y) + _2921;
                        _2854 = (_3098 * _2982.z) + _2922;
                        if (_2927 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2920 = _2852;
                            _2921 = _2853;
                            _2922 = _2854;
                            _2923 = _2855;
                            _2924 = _2856;
                            _2925 = _2857;
                            _2926 = _2927;
                        }
                    }
                    frontier_phi_61_pred = _2852;
                    frontier_phi_61_pred_1 = _2857;
                    frontier_phi_61_pred_2 = _2856;
                    frontier_phi_61_pred_3 = _2855;
                    frontier_phi_61_pred_4 = _2854;
                    frontier_phi_61_pred_5 = _2853;
                }
                _2652 = frontier_phi_61_pred;
                _2662 = frontier_phi_61_pred_1;
                _2660 = frontier_phi_61_pred_2;
                _2658 = frontier_phi_61_pred_3;
                _2656 = frontier_phi_61_pred_4;
                _2654 = frontier_phi_61_pred_5;
                uint _2803 = _2802 + 1u;
                if (_2803 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2796 = _2652;
                    _2797 = _2654;
                    _2798 = _2656;
                    _2799 = _2658;
                    _2800 = _2660;
                    _2801 = _2662;
                    _2802 = _2803;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
        }
        uvec4 _2665 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2666 = _2665.z;
        uint _2668 = (_2666 >> 8u) & 15u;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((4294967295u << _2668) & _2550) == 0u)
        {
            _2764 = _2651;
            _2766 = _2653;
            _2768 = _2655;
            _2770 = _2657;
            _2772 = _2659;
            _2774 = _2661;
        }
        else
        {
            float _2789 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
            float _2790 = _2789 * _2504;
            float _2791 = _2789 * _2505;
            float _2792 = _2789 * _2506;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2668 < ((_2666 >> 12u) & 15u))
            {
                float _2765;
                float _2767;
                float _2769;
                float _2771;
                float _2773;
                float _2775;
                float _2903 = _2651;
                float _2904 = _2653;
                float _2905 = _2655;
                float _2906 = _2657;
                float _2907 = _2659;
                float _2908 = _2661;
                uint _2909 = _2668;
                uint _2918;
                bool _2919;
                for (;;)
                {
                    _2918 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                    _2919 = _2918 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2919)
                    {
                        frontier_phi_67_pred = _2906;
                        frontier_phi_67_pred_1 = _2907;
                        frontier_phi_67_pred_2 = _2908;
                        frontier_phi_67_pred_3 = _2905;
                        frontier_phi_67_pred_4 = _2904;
                        frontier_phi_67_pred_5 = _2903;
                    }
                    else
                    {
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3116 = _2903;
                        float _3117 = _2904;
                        float _3118 = _2905;
                        float _3119 = _2906;
                        float _3120 = _2907;
                        float _3121 = _2908;
                        uint _3122 = _2918;
                        uint _3123;
                        vec4 _3148;
                        float _3149;
                        vec4 _3164;
                        vec3 _3176;
                        vec4 _3191;
                        vec4 _3206;
                        float _3252;
                        bool _3253;
                        for (;;)
                        {
                            uint _3133 = ((_2909 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3122));
                            _3123 = (_3122 + 4294967295u) & _3122;
                            uint _3135 = _3133 * 40u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3149 = _3148.w;
                            uint _3151 = (_3133 * 40u) + 4u;
                            _3164 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3151 + 3u)).x));
                            uint _3166 = (_3133 * 40u) + 8u;
                            _3176 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x));
                            uint _3178 = (_3133 * 40u) + 16u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3133 * 40u) + 20u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3133 * 40u) + 24u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3227 = (_3133 * 40u) + 28u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            _3252 = fma(_2506, _3240.z, fma(_2505, _3240.y, _3240.x * _2504)) + _3240.w;
                            _3253 = !((fma(_2506, _3221.z, fma(_2505, _3221.y, _3221.x * _2504)) + _3221.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3253)
                            {
                                float _3280 = _3148.x - _2504;
                                float _3281 = _3148.y - _2505;
                                float _3282 = _3148.z - _2506;
                                float _3283 = dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282));
                                float _3286 = inversesqrt(_3283);
                                float _3287 = _3286 * _3280;
                                float _3288 = _3286 * _3281;
                                float _3289 = _3286 * _3282;
                                float _3293 = 1.0 - (_3283 / (_3149 * _3149));
                                float _4406 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3298 = sqrt(_3283) * _3164.w;
                                float _3300 = 1.39999997615814208984375 / (_3298 + 1.39999997615814208984375);
                                float _3301 = _3300 * _3300;
                                float _3304 = ((1.0 - _3301) * dot(vec3(_3287, _3288, _3289), vec3(_809, _812, _815))) + _3301;
                                float _3307 = _3298 * _3298;
                                float _3311 = (fma(_2506, _3191.z, fma(_2505, _3191.y, _3191.x * _2504)) + _3191.w) / _3252;
                                float _3312 = (fma(_2506, _3206.z, fma(_2505, _3206.y, _3206.x * _2504)) + _3206.w) / _3252;
                                float _3316 = 1.0 - dot(vec2(_3311, _3312), vec2(_3311, _3312));
                                float _4422 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3318 = _3317 * (((isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0))) * _3294) / ((_3307 * 0.699999988079071044921875) + 1.0));
                                float _3330 = exp2(log2(1.0 / ((_3307 * 3.5) + 5.0)) * 0.25);
                                float _3331 = 1.0 - _869;
                                float _3338 = sqrt(1.0 - ((1.0 - (_3331 * _3331)) * (1.0 - (_3330 * _3330))));
                                float _3339 = _3338 * _3338;
                                float _3340 = _3339 * _3339;
                                float _3341 = _3287 - _2790;
                                float _3342 = _3288 - _2791;
                                float _3343 = _3289 - _2792;
                                float _3347 = inversesqrt(dot(vec3(_3341, _3342, _3343), vec3(_3341, _3342, _3343)));
                                float _3351 = dot(vec3(_809, _812, _815), vec3((-0.0) - _2790, (-0.0) - _2791, (-0.0) - _2792));
                                float _4433 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3354 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3355 = dot(vec3(_809, _812, _815), vec3(_3347 * _3341, _3347 * _3342, _3347 * _3343));
                                float _4444 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3358 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3362 = ((_3358 * _3358) * (_3340 + (-1.0))) + 1.0;
                                float _3363 = _3300 * _3339;
                                float _3364 = _3363 * _3363;
                                float _3370 = ((1.0 - _3364) * dot(vec3(_809, _812, _815), vec3(_3287, _3288, _3289))) + _3364;
                                float _4455 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3372 = 1.0 - _3339;
                                float _3382 = (0.5 / (((_3371 * ((_3354 * _3372) + _3339)) + 9.9999999392252902907785028219223e-09) + (((_3371 * _3372) + _3339) * _3354))) * _3371;
                                float _4466 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3392 = (_3317 * _3294) * (((_3340 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3362 * _3362) * ((_3307 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3392 * _3176.x;
                                frontier_phi_73_pred_1 = _3392 * _3176.y;
                                frontier_phi_73_pred_2 = _3318 * _3164.z;
                                frontier_phi_73_pred_3 = _3318 * _3164.y;
                                frontier_phi_73_pred_4 = _3318 * _3164.x;
                                frontier_phi_73_pred_5 = _3392 * _3176.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3396 = frontier_phi_73_pred;
                            _3397 = frontier_phi_73_pred_1;
                            _3401 = frontier_phi_73_pred_2;
                            _3400 = frontier_phi_73_pred_3;
                            _3399 = frontier_phi_73_pred_4;
                            _3398 = frontier_phi_73_pred_5;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            _3108 = _3401 + _3121;
                            _3103 = _3396 + _3116;
                            _3104 = _3397 + _3117;
                            _3105 = _3398 + _3118;
                            if (_3123 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3123;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3106;
                        frontier_phi_67_pred_1 = _3107;
                        frontier_phi_67_pred_2 = _3108;
                        frontier_phi_67_pred_3 = _3105;
                        frontier_phi_67_pred_4 = _3104;
                        frontier_phi_67_pred_5 = _3103;
                    }
                    _2771 = frontier_phi_67_pred;
                    _2773 = frontier_phi_67_pred_1;
                    _2775 = frontier_phi_67_pred_2;
                    _2769 = frontier_phi_67_pred_3;
                    _2767 = frontier_phi_67_pred_4;
                    _2765 = frontier_phi_67_pred_5;
                    uint _2910 = _2909 + 1u;
                    if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2903 = _2765;
                        _2904 = _2767;
                        _2905 = _2769;
                        _2906 = _2771;
                        _2907 = _2773;
                        _2908 = _2775;
                        _2909 = _2910;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2773;
                frontier_phi_55_56_ladder_1 = _2775;
                frontier_phi_55_56_ladder_2 = _2771;
                frontier_phi_55_56_ladder_3 = _2769;
                frontier_phi_55_56_ladder_4 = _2767;
                frontier_phi_55_56_ladder_5 = _2765;
            }
            else
            {
                frontier_phi_55_56_ladder = _2659;
                frontier_phi_55_56_ladder_1 = _2661;
                frontier_phi_55_56_ladder_2 = _2657;
                frontier_phi_55_56_ladder_3 = _2655;
                frontier_phi_55_56_ladder_4 = _2653;
                frontier_phi_55_56_ladder_5 = _2651;
            }
            _2764 = frontier_phi_55_56_ladder_5;
            _2766 = frontier_phi_55_56_ladder_4;
            _2768 = frontier_phi_55_56_ladder_3;
            _2770 = frontier_phi_55_56_ladder_2;
            _2772 = frontier_phi_55_56_ladder;
            _2774 = frontier_phi_55_56_ladder_1;
        }
        float _2779 = isnan(1.0) ? _853 : (isnan(_853) ? 1.0 : min(_853, 1.0));
        _2563 = (_2779 * _2770) + _2018;
        _2565 = (_2779 * _2772) + _2020;
        _2567 = (_2779 * _2774) + _2022;
        _2569 = ((_2764 * 0.039999999105930328369140625) * _2779) + _2348;
        _2571 = ((_2766 * 0.039999999105930328369140625) * _2779) + _2350;
        _2573 = ((_2768 * 0.039999999105930328369140625) * _2779) + _2352;
    }
    else
    {
        _2563 = _2018;
        _2565 = _2020;
        _2567 = _2022;
        _2569 = _2348;
        _2571 = _2350;
        _2573 = _2352;
    }
    float _4482 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4493 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4504 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    uint _2593 = _260 + 6u;
    float _2601 = _790 / cbSceneParam._m0[86u].x;
    float _2602 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2616 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, (log2((isnan(cbSceneParam._m0[77u].w) ? _723 : (isnan(_723) ? cbSceneParam._m0[77u].w : min(_723, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2618 = _2616.x;
    float _2619 = _2616.y;
    float _2620 = _2616.z;
    float _2621 = _2616.w;
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    if (_723 > cbSceneParam._m0[78u].w)
    {
        float _2676 = isnan(_723) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _723 : min(cbSceneParam._m0[80u].w, _723));
        float _2677 = _2676 / _723;
        float _2688 = _2677 * _775;
        float _2689 = _776 * _2677;
        float _2690 = (-0.0) - _2689;
        float _2692 = _2677 * _777;
        float _2694 = (cbSceneParam._m0[77u].w * _2690) / _2676;
        float _2695 = _2694 + cbSceneParam._m0[79u].w;
        float _2696 = cbSceneParam._m0[79u].w - _2689;
        float _2702 = sqrt(((_2688 * _2688) + (_2689 * _2689)) + (_2692 * _2692));
        float _2705 = (1.0 - (cbSceneParam._m0[77u].w / _2676)) * _2702;
        float _2710 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2712 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2865;
        if (abs((_2690 - _2694) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2865 = ((((_2695 > 0.0) ? exp2(_2710 * _2695) : (2.0 - exp2(_2712 * _2695))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2705;
        }
        else
        {
            float _2825 = 1.0 / cbSceneParam._m0[80u].x;
            float _2826 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : max(_2695, _2696));
            float _2827 = isnan(_2696) ? _2695 : (isnan(_2695) ? _2696 : min(_2695, _2696));
            float _2836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : min(_2826, 0.0));
            float _2837 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : min(_2827, 0.0));
            _2865 = ((abs(_2702 / _2690) * cbSceneParam._m0[80u].y) * ((((_2836 - _2837) * 2.0) - ((exp2(_2710 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0)))) - exp2(_2710 * (isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))))) * _2825)) - ((exp2(_2712 * _2836) - exp2(_2712 * _2837)) * _2825))) + (_2705 * cbSceneParam._m0[80u].z);
        }
        vec4 _2867 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2601, _2602, 1.0), 0.0);
        float _2876 = exp2((_2865 * (-1.44269502162933349609375)) * (1.0 - _2867.w));
        float _2877 = log2(_2876);
        float _2893 = log2(_2621);
        _2714 = (exp2(_2893 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].x)) * _2867.x) / cbSceneParam._m0[78u].x)) + _2618;
        _2716 = (exp2(_2893 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].y)) * _2867.y) / cbSceneParam._m0[78u].y)) + _2619;
        _2718 = (exp2(_2893 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].z)) * _2867.z) / cbSceneParam._m0[78u].z)) + _2620;
        _2720 = _2876 * _2621;
    }
    else
    {
        _2714 = _2618;
        _2716 = _2619;
        _2718 = _2620;
        _2720 = _2621;
    }
    float _2732 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2733 = _2732 == 3.0;
    float _2734 = log2(_2720);
    float _2741 = exp2(_2734 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2563 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _853))) + ((_2569 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _2742 = exp2(_2734 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2565 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _853))) + ((_2571 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _2743 = exp2(_2734 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2567 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _853))) + ((_2573 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1658)) * cbPerFrame._m0[3u].x));
    float _2752 = (_2732 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2752 * (_2733 ? _2741 : (_2741 + (cbSceneParam._m0[72u].w * _2714)));
    SV_Target.y = _2752 * (_2733 ? _2742 : (_2742 + (cbSceneParam._m0[72u].w * _2716)));
    SV_Target.z = _2752 * (_2733 ? _2743 : (_2743 + (cbSceneParam._m0[72u].w * _2718)));
    SV_Target.w = cbInstanceData._m0[_2593].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2593].w;
}


