#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1176;
float _3537;
float _3538;
float _3539;
float _3540;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _334 = (_325.x * 2.0) + (-1.0);
    float _336 = (_325.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3549 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))));
    float _346 = fma(_343, _227, fma(_336, _234, _334 * _220));
    float _349 = fma(_343, _228, fma(_336, _235, _334 * _221));
    float _352 = fma(_343, _229, fma(_336, _236, _334 * _222));
    float _356 = inversesqrt(dot(vec3(_346, _349, _352), vec3(_346, _349, _352)));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _394 = _392.x;
    float _395 = 1.0 - _394;
    float _402 = ((_394 - _395) * cbMtdParam._m0[24u].z) + _395;
    float _404 = (cbMtdParam._m0[19u].x + dot(vec4(_356 * _346, _356 * _349, _356 * _352, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_402 * cbMtdParam._m0[21u].z);
    float _3560 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _407 = (-0.0) - cbMtdParam._m0[24u].y;
    float _409 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    float _417 = _405 - ((_405 * TEXCOORD_8.x) * _410);
    float _418 = _405 - ((_405 * TEXCOORD_8.y) * _410);
    float _419 = _405 - ((_405 * TEXCOORD_8.z) * _410);
    float _426 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _430 = ((isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : min(_426, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _438 = (_430 - (((_402 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _430))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3591 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _443 = ((_417 * ((_305.x * cbMtdParam._m0[18u].x) - _284)) * _439) + _284;
    float _444 = ((_418 * ((_305.y * cbMtdParam._m0[18u].y) - _285)) * _439) + _285;
    float _445 = ((_419 * ((_305.z * cbMtdParam._m0[18u].z) - _286)) * _439) + _286;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _459 = _457.x;
    float _460 = 1.0 - _459;
    float _489 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_459 - _460) * cbMtdParam._m0[24u].w) + _460) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3602 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
    float _498 = ((((cbMtdParam._m0[10u].x - _443) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _490) + _443;
    float _499 = ((((cbMtdParam._m0[10u].y - _444) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _490) + _444;
    float _500 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _445)) * _490) + _445;
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3613 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _532 = (((_514.z - _329) * _417) * _439) + _329;
    float _535 = ((cbMtdParam._m0[23u].y - _532) * _490) + _532;
    vec4 _554 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _560 = (_554.x * 2.0) + (-1.0);
    float _561 = (_554.y * 2.0) + (-1.0);
    float _562 = dot(vec2(_560, _561), vec2(_560, _561));
    float _3624 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _582 = (((cbMtdParam._m0[21u].x * _334) + ((_521 - _334) * _417)) * _439) + _334;
    float _583 = (((cbMtdParam._m0[21u].x * _336) + ((_522 - _336) * _418)) * _439) + _336;
    float _584 = (((sqrt(1.0 - (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) - _343) * _419) * _439) + _343;
    float _595 = (((_560 - _582) + (_582 * cbMtdParam._m0[22u].z)) * _490) + _582;
    float _596 = (((_561 - _583) + (_583 * cbMtdParam._m0[22u].z)) * _490) + _583;
    float _597 = ((sqrt(1.0 - (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) - _584) * _490) + _584;
    float _599 = cbMtdParam._m0[22u].x + _325.w;
    float _602 = fma(_597, _227, fma(_596, _234, _595 * _220));
    float _605 = fma(_597, _228, fma(_596, _235, _595 * _221));
    float _608 = fma(_597, _229, fma(_596, _236, _595 * _222));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3635 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _616 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3657 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3668 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3679 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    vec4 _698 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _700 = _698.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _857 = sqrt(((_684 * _684) + (_685 * _685)) + (_686 * _686));
        float _863 = (cbMatDynParam._m0[5u].x * _857) + cbMatDynParam._m0[5u].y;
        float _3690 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _868 = (cbMatDynParam._m0[5u].z * _857) + cbMatDynParam._m0[5u].w;
        float _3701 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) - _864)) + _864) < ((_700 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _712 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _713 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _733 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _736 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _739 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _752 = _239 + 9u;
    uint _753 = _752 + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3712 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    vec4 _773 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713));
    float _777 = ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * TEXCOORD_5.w) * _773.x;
    float _778 = dot(vec3(_613, _614, _615), vec3(_691, _692, _693));
    float _781 = _778 * 2.0;
    float _785 = (_781 * _613) - _691;
    float _786 = (_781 * _614) - _692;
    float _787 = (_781 * _615) - _693;
    float _791 = abs(dot(vec3(_691, _692, _693), vec3(_613, _614, _615)));
    float _3745 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _793 = sqrt(_616);
    float _806 = exp2((_793 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_793 * 3.0));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_846, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838));
        float _904 = fma(_846, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838));
        float _908 = fma(_846, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838));
        float _933 = _838 + _613;
        float _934 = _842 + _614;
        float _935 = _846 + _615;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_613, _614, _615), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3793 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_613, _614, _615), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3826 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_613, _614, _615), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3859 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1218 = fma(_846, cbModelParam._m0[30u].z, fma(_842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _838));
        float _1222 = fma(_846, cbModelParam._m0[31u].z, fma(_842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _838));
        float _1226 = fma(_846, cbModelParam._m0[32u].z, fma(_842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _838));
        float _1249 = _838 + _613;
        float _1250 = _842 + _614;
        float _1251 = _846 + _615;
        float _1261 = fma(_1251, cbModelParam._m0[30u].z, fma(_1250, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249)) - _1218;
        float _1262 = fma(_1251, cbModelParam._m0[31u].z, fma(_1250, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249)) - _1222;
        float _1263 = fma(_1251, cbModelParam._m0[32u].z, fma(_1250, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249)) - _1226;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1218 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1222 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[35u].z) + ((((((_1226 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1317 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1284.x + (-0.5));
        float _1319 = _1317 * (_1284.y + (-0.5));
        float _1320 = _1317 * (_1284.z + (-0.5));
        float _1327 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1291.x + (-0.5));
        float _1329 = _1327 * (_1291.y + (-0.5));
        float _1330 = _1327 * (_1291.z + (-0.5));
        float _1337 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1298.x + (-0.5));
        float _1339 = _1337 * (_1298.y + (-0.5));
        float _1340 = _1337 * (_1298.z + (-0.5));
        float _1347 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1305.x + (-0.5));
        float _1349 = _1347 * (_1305.y + (-0.5));
        float _1350 = _1347 * (_1305.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_613, _614, _615), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3922 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1381 + 1.0))) + _1386) * _1351;
        float _1396 = _1319 * 0.5;
        float _1397 = _1329 * 0.5;
        float _1398 = _1339 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_613, _614, _615), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3955 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1423 + 1.0))) + _1428) * _1352;
        float _1438 = _1320 * 0.5;
        float _1439 = _1330 * 0.5;
        float _1440 = _1340 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_613, _614, _615), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _3988 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1465 + 1.0))) + _1470) * _1353;
        _1487 = _1320;
        _1488 = _1319;
        _1489 = _1318;
        _1490 = _1330;
        _1491 = _1329;
        _1492 = _1328;
        _1493 = _1340;
        _1494 = _1339;
        _1495 = _1338;
        _1496 = _1353;
        _1497 = _1352;
        _1498 = _1351;
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1176;
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = _1176;
        _1498 = _1176;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1188)) + _1188;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1190)) + _1190;
    float _1534 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1511));
    float _1555 = _785 * 0.5;
    float _1556 = _786 * 0.5;
    float _1557 = _787 * 0.5;
    float _1558 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1561 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1564 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1598;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1571 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1575 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1579 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1586 = dot(vec4(cbModelParam._m0[39u]), vec4(_1555, _1556, _1557, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1609;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1600 = dot(vec4(cbModelParam._m0[40u]), vec4(_1555, _1556, _1557, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1613 = (_1609 * cbModelParam._m0[1u].x) + (_1598 * (1.0 - cbModelParam._m0[1u].x));
    float _1623 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1623 : min(cbModelParam._m0[25u].z, _1623));
    float _1704;
    float _1706;
    float _1708;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1671 = fma(_846, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _838)) + cbModelParam._m0[13u].w;
        float _1675 = fma(_846, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _838)) + cbModelParam._m0[14u].w;
        float _1679 = fma(_846, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _838)) + cbModelParam._m0[15u].w;
        float _1682 = fma(_787, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785));
        float _1685 = fma(_787, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785));
        float _1688 = fma(_787, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785));
        float _1716;
        if (_1682 > 0.0)
        {
            _1716 = abs((1.0 - _1671) / _1682);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1671 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1716 = frontier_phi_17_15_ladder;
        }
        float _1918;
        if (_1685 > 0.0)
        {
            _1918 = abs((1.0 - _1675) / _1685);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1675 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1918 = frontier_phi_26_22_ladder;
        }
        float _2161;
        if (_1688 > 0.0)
        {
            _2161 = abs((1.0 - _1679) / _1688);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1679 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2161 = frontier_phi_38_33_ladder;
        }
        float _2163 = isnan(_1918) ? _1716 : (isnan(_1716) ? _1918 : min(_1716, _1918));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1682) + _1671;
        float _2169 = (_2164 * _1685) + _1675;
        float _2170 = (_2164 * _1688) + _1679;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1624);
            frontier_phi_16_38_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1704 = frontier_phi_16_38_ladder_2;
        _1706 = frontier_phi_16_38_ladder_1;
        _1708 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_785, _786, _787), _1624);
        _1704 = _1692.x * cbModelParam._m0[1u].y;
        _1706 = _1692.y * cbModelParam._m0[1u].y;
        _1708 = _1692.z * cbModelParam._m0[1u].y;
    }
    float _1712 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1713 = isnan(_1712) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1712 : min(cbModelParam._m0[25u].w, _1712));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1766 = fma(_846, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _838)) + cbModelParam._m0[21u].w;
        float _1770 = fma(_846, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _838)) + cbModelParam._m0[22u].w;
        float _1774 = fma(_846, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _838)) + cbModelParam._m0[23u].w;
        float _1777 = fma(_787, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785));
        float _1780 = fma(_787, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785));
        float _1783 = fma(_787, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785));
        float _1923;
        if (_1777 > 0.0)
        {
            _1923 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1923 = frontier_phi_28_24_ladder;
        }
        float _2188;
        if (_1780 > 0.0)
        {
            _2188 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2188 = frontier_phi_40_35_ladder;
        }
        float _2393;
        if (_1783 > 0.0)
        {
            _2393 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2393 = frontier_phi_49_46_ladder;
        }
        float _2395 = isnan(_2188) ? _1923 : (isnan(_1923) ? _2188 : min(_1923, _2188));
        float _2396 = isnan(_2393) ? _2395 : (isnan(_2395) ? _2393 : min(_2395, _2393));
        float _2400 = (_2396 * _1777) + _1766;
        float _2401 = (_2396 * _1780) + _1770;
        float _2402 = (_2396 * _1783) + _1774;
        float _2403 = _2396 * 9.9999997473787516355514526367188e-05;
        float _2404 = (-1.0) - _2403;
        float _2406 = _2403 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2402 > _2406) || ((_2402 < _2404) || ((_2401 > _2406) || ((_2401 < _2404) || ((_2400 < _2404) || (_2400 > _2406))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2402, cbModelParam._m0[17u].z, fma(_2401, cbModelParam._m0[17u].y, _2400 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2402, cbModelParam._m0[18u].z, fma(_2401, cbModelParam._m0[18u].y, _2400 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2402, cbModelParam._m0[19u].z, fma(_2401, cbModelParam._m0[19u].y, _2400 * cbModelParam._m0[19u].x))), _1713);
            frontier_phi_25_49_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1802 = frontier_phi_25_49_ladder_2;
        _1804 = frontier_phi_25_49_ladder_1;
        _1806 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_785, _786, _787), _1713);
        _1802 = _1786.x * cbModelParam._m0[1u].z;
        _1804 = _1786.y * cbModelParam._m0[1u].z;
        _1806 = _1786.z * cbModelParam._m0[1u].z;
    }
    float _1818 = ((((1.0 - _806) * ((_793 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_806 * _793)) * _777;
    float _1819 = _1818 * ((cbModelParam._m0[1u].w * (_1802 - _1704)) + _1704);
    float _1820 = _1818 * ((cbModelParam._m0[1u].w * (_1804 - _1706)) + _1706);
    float _1821 = _1818 * ((cbModelParam._m0[1u].w * (_1806 - _1708)) + _1708);
    float _1824 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, _1819 * cbSceneParam._m0[91u].x));
    uvec4 _1840 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1842 = _1840.x * 14u;
    uint _1843 = _1842 + 13u;
    float _1850 = _777 + (-1.0);
    float _1855 = (cbLight._m0[_1843].x * _1850) + 1.0;
    float _1856 = (cbLight._m0[_1843].y * _1850) + 1.0;
    float _1857 = (cbLight._m0[_1843].z * _1850) + 1.0;
    float _1858 = (cbLight._m0[_1843].w * _1850) + 1.0;
    uint _1859 = _1842 + 5u;
    float _1865 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
    uint _1869 = _1842 + 4u;
    float _1876 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1880 = _1842 | 1u;
    float _1891 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_613, _614, _615));
    float _1894 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_613, _614, _615));
    float _4124 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _4135 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1899 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.3183098733425140380859375;
    float _1901 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * 0.3183098733425140380859375;
    float _1908 = ((cbLight._m0[_1859].x * _1865) * _1901) + ((cbLight._m0[_1869].x * _1876) * _1899);
    float _1909 = ((_1865 * cbLight._m0[_1859].y) * _1901) + ((_1876 * cbLight._m0[_1869].y) * _1899);
    float _1910 = ((_1865 * cbLight._m0[_1859].z) * _1901) + ((_1876 * cbLight._m0[_1869].z) * _1899);
    uvec4 _1915 = floatBitsToUint(cbLight._m0[_1842 + 12u]);
    bool _1917 = _1915.x == 0u;
    float _1928;
    float _1930;
    float _1932;
    if (_1917)
    {
        _1928 = _1908;
        _1930 = _1909;
        _1932 = _1910;
    }
    else
    {
        uint _1936 = _1842 + 6u;
        float _1952 = (dot(vec3(cbLight._m0[_1842 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _1953 = _1952 * _1952;
        float _4146 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1955 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _1928 = (((cbLight._m0[_1936].x * 0.3183098733425140380859375) * _1954) * _1955) + _1908;
        _1930 = (((cbLight._m0[_1936].y * 0.3183098733425140380859375) * _1954) * _1955) + _1909;
        _1932 = (((cbLight._m0[_1936].z * 0.3183098733425140380859375) * _1954) * _1955) + _1910;
    }
    bool _1935 = _1915.y == 0u;
    float _1973;
    float _1975;
    float _1977;
    if (_1935)
    {
        _1973 = _1928;
        _1975 = _1930;
        _1977 = _1932;
    }
    else
    {
        uint _2132 = _1842 + 7u;
        float _2148 = (dot(vec3(cbLight._m0[_1842 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4162 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2151 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _1973 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _1928;
        _1975 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _1930;
        _1977 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _1932;
    }
    uint _1980 = _1842 + 8u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _616) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1842].x + _691;
    float _1996 = cbLight._m0[_1842].y + _692;
    float _1997 = cbLight._m0[_1842].z + _693;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1842].xyz));
    float _4178 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2009 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2010 = dot(vec3(_613, _614, _615), vec3(_2002, _2003, _2004));
    float _4200 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_2002, _2003, _2004));
    float _4211 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1994 * _1994;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2033 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2034 = 1.0 - _1994;
    float _2045 = (0.5 / (((_2009 * ((_2008 * _2034) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2034) + _1994) * _2008))) * _2008;
    float _4222 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    uint _2058 = _1842 + 9u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1880].w)) * _616) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1880].x + _691;
    float _2072 = cbLight._m0[_1880].y + _692;
    float _2073 = cbLight._m0[_1880].z + _693;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1880].xyz));
    float _4233 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2085 = dot(vec3(_613, _614, _615), vec3(_2078, _2079, _2080));
    float _4244 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_2078, _2079, _2080));
    float _4255 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2070 * _2070;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2070;
    float _2117 = (0.5 / (((_2009 * ((_2084 * _2107) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2107) + _2070) * _2084))) * _2084;
    float _4266 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2119 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    float _2129 = (((_2106 * cbLight._m0[_2058].x) * _2119) * _1865) + (((_2033 * cbLight._m0[_1980].x) * _2047) * _1876);
    float _2130 = (((_2106 * cbLight._m0[_2058].y) * _2119) * _1865) + (((_2033 * cbLight._m0[_1980].y) * _2047) * _1876);
    float _2131 = (((_2106 * cbLight._m0[_2058].z) * _2119) * _1865) + (((_2033 * cbLight._m0[_1980].z) * _2047) * _1876);
    float _2193;
    float _2195;
    float _2197;
    if (_1917)
    {
        _2193 = _2129;
        _2195 = _2130;
        _2197 = _2131;
    }
    else
    {
        uint _2199 = _1842 + 2u;
        uint _2203 = _1842 + 10u;
        float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2199].w)) * _616) * 0.949999988079071044921875);
        float _2218 = _2217 * _2217;
        float _2219 = cbLight._m0[_2199].x + _691;
        float _2220 = cbLight._m0[_2199].y + _692;
        float _2221 = cbLight._m0[_2199].z + _693;
        float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
        float _2226 = _2225 * _2219;
        float _2227 = _2225 * _2220;
        float _2228 = _2225 * _2221;
        float _2229 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2199].xyz));
        float _4277 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2232 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2233 = dot(vec3(_613, _614, _615), vec3(_2226, _2227, _2228));
        float _4288 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2237 = dot(vec3(cbLight._m0[_2199].xyz), vec3(_2226, _2227, _2228));
        float _4299 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2241 = _2218 * _2218;
        float _2245 = ((_2236 * _2236) * (_2241 + (-1.0))) + 1.0;
        float _2254 = (exp2(log2(1.0 - (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2255 = 1.0 - _2218;
        float _2265 = (0.5 / (((_2009 * ((_2232 * _2255) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2255) + _2218) * _2232))) * _2232;
        float _4310 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2267 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2241 / ((_2245 * _2245) * 3.141590118408203125));
        float _2268 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2193 = (((_2254 * cbLight._m0[_2203].x) * _2267) * _2268) + _2129;
        _2195 = (((_2254 * cbLight._m0[_2203].y) * _2267) * _2268) + _2130;
        _2197 = (((_2254 * cbLight._m0[_2203].z) * _2267) * _2268) + _2131;
    }
    float _2303;
    float _2305;
    float _2307;
    if (_1935)
    {
        _2303 = _2193;
        _2305 = _2195;
        _2307 = _2197;
    }
    else
    {
        uint _2314 = _1842 + 3u;
        uint _2318 = _1842 + 11u;
        float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _616) * 0.949999988079071044921875);
        float _2333 = _2332 * _2332;
        float _2334 = cbLight._m0[_2314].x + _691;
        float _2335 = cbLight._m0[_2314].y + _692;
        float _2336 = cbLight._m0[_2314].z + _693;
        float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
        float _2341 = _2340 * _2334;
        float _2342 = _2340 * _2335;
        float _2343 = _2340 * _2336;
        float _2344 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2314].xyz));
        float _4326 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2347 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2348 = dot(vec3(_613, _614, _615), vec3(_2341, _2342, _2343));
        float _4337 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2352 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2341, _2342, _2343));
        float _4348 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2356 = _2333 * _2333;
        float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
        float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2370 = 1.0 - _2333;
        float _2380 = (0.5 / (((_2009 * ((_2347 * _2370) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2009 * _2370) + _2333) * _2347))) * _2347;
        float _4359 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2382 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
        float _2383 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
        _2303 = (((_2369 * cbLight._m0[_2318].x) * _2382) * _2383) + _2193;
        _2305 = (((_2369 * cbLight._m0[_2318].y) * _2382) * _2383) + _2195;
        _2307 = (((_2369 * cbLight._m0[_2318].z) * _2382) * _2383) + _2197;
    }
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    if (_1840.y == 0u)
    {
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2458;
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2458;
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2458;
        uvec4 _2473 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2474 = _2473.x;
        uint _2485 = uint((float(_2473.y) * floor(float(uint(cbSceneParam._m0[85u].y * _713) / _2474))) + floor(float(uint(cbSceneParam._m0[85u].x * _712) / _2474)));
        float _2495 = (log2(_2461 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2496 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        uint _2499 = uint(isnan(14.0) ? _2496 : (isnan(_2496) ? 14.0 : min(_2496, 14.0)));
        uvec4 _2504 = texelFetch(g_lightClusterGridBuffer, int(((_2499 << 2u) + (_2485 << 6u)) >> 2u));
        uint _2505 = _2504.x;
        uint _2506 = _2473.z;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((((1u << ((_2506 >> 4u) & 15u)) + 4294967295u) & _2505) == 0u) || ((_2506 & 240u) == 0u))
        {
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
        }
        else
        {
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            uint _2764 = 0u;
            uint _2773;
            bool _2774;
            for (;;)
            {
                _2773 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                _2774 = _2773 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2774)
                {
                    frontier_phi_66_pred = _2758;
                    frontier_phi_66_pred_1 = _2763;
                    frontier_phi_66_pred_2 = _2762;
                    frontier_phi_66_pred_3 = _2761;
                    frontier_phi_66_pred_4 = _2760;
                    frontier_phi_66_pred_5 = _2759;
                }
                else
                {
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    uint _2909;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2762;
                    _2908 = _2763;
                    _2909 = _2773;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    for (;;)
                    {
                        uint _2913 = uint(findLSB(_2909)) + (_2764 << 5u);
                        uint _2910 = (_2909 + 4294967295u) & _2909;
                        uint _2915 = _2913 * 48u;
                        vec4 _2929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2935 = (_2913 * 48u) + 4u;
                        vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2935)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2935 + 3u)).x));
                        uint _2954 = (_2913 * 48u) + 8u;
                        vec3 _2965 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2954)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2954 + 2u)).x));
                        float _2969 = _2929.x - _2459;
                        float _2970 = _2929.y - _2460;
                        float _2971 = _2929.z - _2461;
                        float _2972 = dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971));
                        float _2975 = inversesqrt(_2972);
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2979 = dot(vec3(_733, _736, _739), vec3(_2976, _2977, _2978));
                        float _2984 = 1.0 - (_2972 * _2929.w);
                        float _4385 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2985 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _2986 = sqrt(_2972) * _2948.w;
                        float _2989 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2979) + _2990;
                        float _2996 = _2986 * _2986;
                        float _3000 = ((isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0))) * _2985) / ((_2996 * 0.699999988079071044921875) + 1.0);
                        float _3004 = (-0.0) - _2459;
                        float _3005 = (-0.0) - _2460;
                        float _3006 = (-0.0) - _2461;
                        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                        float _3011 = _3010 * _3004;
                        float _3012 = _3010 * _3005;
                        float _3013 = _3010 * _3006;
                        float _3021 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                        float _3022 = 1.0 - _793;
                        float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                        float _3030 = _3029 * _3029;
                        float _3031 = _3030 * _3030;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                        float _3042 = dot(vec3(_733, _736, _739), vec3(_3011, _3012, _3013));
                        float _4401 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3046 = dot(vec3(_733, _736, _739), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                        float _4412 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                        float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                        float _3054 = _2989 * _3030;
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _2979) + _3055;
                        float _4423 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3059 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                        float _3060 = 1.0 - _3030;
                        float _3070 = (0.5 / (((_3059 * ((_3045 * _3060) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3030) * _3045))) * _3059;
                        float _4434 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3081 = (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3053 * _3053) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125))) * _2985;
                        _2833 = (_3000 * _2948.x) + _2906;
                        _2834 = (_3000 * _2948.y) + _2907;
                        _2835 = (_3000 * _2948.z) + _2908;
                        _2830 = (_3081 * _2965.x) + _2903;
                        _2831 = (_3081 * _2965.y) + _2904;
                        _2832 = (_3081 * _2965.z) + _2905;
                        if (_2910 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2834;
                            _2908 = _2835;
                            _2909 = _2910;
                        }
                    }
                    frontier_phi_66_pred = _2830;
                    frontier_phi_66_pred_1 = _2835;
                    frontier_phi_66_pred_2 = _2834;
                    frontier_phi_66_pred_3 = _2833;
                    frontier_phi_66_pred_4 = _2832;
                    frontier_phi_66_pred_5 = _2831;
                }
                _2607 = frontier_phi_66_pred;
                _2617 = frontier_phi_66_pred_1;
                _2615 = frontier_phi_66_pred_2;
                _2613 = frontier_phi_66_pred_3;
                _2611 = frontier_phi_66_pred_4;
                _2609 = frontier_phi_66_pred_5;
                uint _2765 = _2764 + 1u;
                if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2758 = _2607;
                    _2759 = _2609;
                    _2760 = _2611;
                    _2761 = _2613;
                    _2762 = _2615;
                    _2763 = _2617;
                    _2764 = _2765;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
        }
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.z;
        uint _2623 = (_2621 >> 8u) & 15u;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((4294967295u << _2623) & _2505) == 0u)
        {
            _2726 = _2606;
            _2728 = _2608;
            _2730 = _2610;
            _2732 = _2612;
            _2734 = _2614;
            _2736 = _2616;
        }
        else
        {
            float _2751 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
            float _2752 = _2751 * _2459;
            float _2753 = _2751 * _2460;
            float _2754 = _2751 * _2461;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2623 < ((_2621 >> 12u) & 15u))
            {
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2886 = _2606;
                float _2887 = _2608;
                float _2888 = _2610;
                float _2889 = _2612;
                float _2890 = _2614;
                float _2891 = _2616;
                uint _2892 = _2623;
                uint _2901;
                bool _2902;
                for (;;)
                {
                    _2901 = texelFetch(g_lightClassification, int((((_2499 << 5u) + (_2485 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                    _2902 = _2901 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2902)
                    {
                        frontier_phi_77_pred = _2891;
                        frontier_phi_77_pred_1 = _2890;
                        frontier_phi_77_pred_2 = _2889;
                        frontier_phi_77_pred_3 = _2888;
                        frontier_phi_77_pred_4 = _2887;
                        frontier_phi_77_pred_5 = _2886;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        float _3112 = _2890;
                        float _3113 = _2891;
                        uint _3114 = _2901;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3184;
                        vec4 _3200;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3125 = ((_2892 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3171 = (_3125 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3187 = (_3125 * 40u) + 20u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3125 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3125 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2461, _3234.z, fma(_2460, _3234.y, _3234.x * _2459)) + _3234.w;
                            _3247 = !((fma(_2461, _3215.z, fma(_2460, _3215.y, _3215.x * _2459)) + _3215.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3140.x - _2459;
                                float _3275 = _3140.y - _2460;
                                float _3276 = _3140.z - _2461;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3141 * _3141));
                                float _4445 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3292 = sqrt(_3277) * _3156.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_733, _736, _739))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2461, _3184.z, fma(_2460, _3184.y, _3184.x * _2459)) + _3184.w) / _3246;
                                float _3306 = (fma(_2461, _3200.z, fma(_2460, _3200.y, _3200.x * _2459)) + _3200.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4461 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _793;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2752;
                                float _3336 = _3282 - _2753;
                                float _3337 = _3283 - _2754;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_733, _736, _739), vec3((-0.0) - _2752, (-0.0) - _2753, (-0.0) - _2754));
                                float _4472 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3349 = dot(vec3(_733, _736, _739), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4483 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_733, _736, _739), vec3(_3281, _3282, _3283))) + _3358;
                                float _4494 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4505 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3312 * _3156.y;
                                frontier_phi_83_pred_1 = _3312 * _3156.x;
                                frontier_phi_83_pred_2 = _3386 * _3168.z;
                                frontier_phi_83_pred_3 = _3386 * _3168.y;
                                frontier_phi_83_pred_4 = _3386 * _3168.x;
                                frontier_phi_83_pred_5 = _3312 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3394 = frontier_phi_83_pred;
                            _3393 = frontier_phi_83_pred_1;
                            _3392 = frontier_phi_83_pred_2;
                            _3391 = frontier_phi_83_pred_3;
                            _3390 = frontier_phi_83_pred_4;
                            _3395 = frontier_phi_83_pred_5;
                            _3098 = _3393 + _3111;
                            _3099 = _3394 + _3112;
                            _3100 = _3395 + _3113;
                            _3095 = _3390 + _3108;
                            _3096 = _3391 + _3109;
                            _3097 = _3392 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3100;
                        frontier_phi_77_pred_1 = _3099;
                        frontier_phi_77_pred_2 = _3098;
                        frontier_phi_77_pred_3 = _3097;
                        frontier_phi_77_pred_4 = _3096;
                        frontier_phi_77_pred_5 = _3095;
                    }
                    _2737 = frontier_phi_77_pred;
                    _2735 = frontier_phi_77_pred_1;
                    _2733 = frontier_phi_77_pred_2;
                    _2731 = frontier_phi_77_pred_3;
                    _2729 = frontier_phi_77_pred_4;
                    _2727 = frontier_phi_77_pred_5;
                    uint _2893 = _2892 + 1u;
                    if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2886 = _2727;
                        _2887 = _2729;
                        _2888 = _2731;
                        _2889 = _2733;
                        _2890 = _2735;
                        _2891 = _2737;
                        _2892 = _2893;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2731;
                frontier_phi_58_59_ladder_1 = _2737;
                frontier_phi_58_59_ladder_2 = _2735;
                frontier_phi_58_59_ladder_3 = _2733;
                frontier_phi_58_59_ladder_4 = _2729;
                frontier_phi_58_59_ladder_5 = _2727;
            }
            else
            {
                frontier_phi_58_59_ladder = _2610;
                frontier_phi_58_59_ladder_1 = _2616;
                frontier_phi_58_59_ladder_2 = _2614;
                frontier_phi_58_59_ladder_3 = _2612;
                frontier_phi_58_59_ladder_4 = _2608;
                frontier_phi_58_59_ladder_5 = _2606;
            }
            _2726 = frontier_phi_58_59_ladder_5;
            _2728 = frontier_phi_58_59_ladder_4;
            _2730 = frontier_phi_58_59_ladder;
            _2732 = frontier_phi_58_59_ladder_3;
            _2734 = frontier_phi_58_59_ladder_2;
            _2736 = frontier_phi_58_59_ladder_1;
        }
        float _2741 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        _2518 = (_2741 * _2732) + _1973;
        _2520 = (_2741 * _2734) + _1975;
        _2522 = (_2741 * _2736) + _1977;
        _2524 = ((_2726 * 0.039999999105930328369140625) * _2741) + _2303;
        _2526 = ((_2728 * 0.039999999105930328369140625) * _2741) + _2305;
        _2528 = ((_2730 * 0.039999999105930328369140625) * _2741) + _2307;
    }
    else
    {
        _2518 = _1973;
        _2520 = _1975;
        _2522 = _1977;
        _2524 = _2303;
        _2526 = _2305;
        _2528 = _2307;
    }
    float _4521 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4532 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4543 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _2545 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2518 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _777))) + ((_2524 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2546 = ((isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (_2520 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _777))) + ((_2526 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2547 = ((isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2522 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _777))) + ((_2528 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    uint _2548 = _239 + 6u;
    float _2556 = _712 / cbSceneParam._m0[86u].x;
    float _2557 = _713 / cbSceneParam._m0[86u].y;
    vec4 _2571 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2556, _2557, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2573 = _2571.x;
    float _2574 = _2571.y;
    float _2575 = _2571.z;
    float _2576 = _2571.w;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2631 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2632 = _2631 / _634;
        float _2643 = _2632 * _684;
        float _2644 = _685 * _2632;
        float _2645 = (-0.0) - _2644;
        float _2646 = _2632 * _686;
        float _2648 = (cbSceneParam._m0[77u].w * _2645) / _2631;
        float _2649 = _2648 + cbSceneParam._m0[79u].w;
        float _2650 = cbSceneParam._m0[79u].w - _2644;
        float _2656 = sqrt(((_2643 * _2643) + (_2644 * _2644)) + (_2646 * _2646));
        float _2659 = (1.0 - (cbSceneParam._m0[77u].w / _2631)) * _2656;
        float _2664 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2666 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2843;
        if (abs((_2645 - _2648) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2843 = ((((_2649 > 0.0) ? exp2(_2664 * _2649) : (2.0 - exp2(_2666 * _2649))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2659;
        }
        else
        {
            float _2787 = 1.0 / cbSceneParam._m0[80u].x;
            float _2788 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : max(_2649, _2650));
            float _2789 = isnan(_2650) ? _2649 : (isnan(_2649) ? _2650 : min(_2649, _2650));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            _2843 = ((abs(_2656 / _2645) * cbSceneParam._m0[80u].y) * ((((_2798 - _2799) * 2.0) - ((exp2(_2664 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0)))) - exp2(_2664 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0))))) * _2787)) - ((exp2(_2666 * _2798) - exp2(_2666 * _2799)) * _2787))) + (_2659 * cbSceneParam._m0[80u].z);
        }
        vec4 _2845 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2556, _2557, 1.0), 0.0);
        float _2854 = exp2((_2843 * (-1.44269502162933349609375)) * (1.0 - _2845.w));
        float _2855 = log2(_2854);
        float _2871 = log2(_2576);
        _2668 = (exp2(_2871 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].x)) * _2845.x) / cbSceneParam._m0[78u].x)) + _2573;
        _2670 = (exp2(_2871 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].y)) * _2845.y) / cbSceneParam._m0[78u].y)) + _2574;
        _2672 = (exp2(_2871 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2855 * cbSceneParam._m0[78u].z)) * _2845.z) / cbSceneParam._m0[78u].z)) + _2575;
        _2674 = _2854 * _2576;
    }
    else
    {
        _2668 = _2573;
        _2670 = _2574;
        _2672 = _2575;
        _2674 = _2576;
    }
    bool _2881;
    vec4 _2684;
    vec4 _2706;
    float _2708;
    float _2712;
    float _2713;
    float _2714;
    float _2715;
    bool _2725;
    for (;;)
    {
        _2684 = cbMatDynParam._m0[0u];
        float _2686 = roundEven(_2684.y);
        bool _2687 = _2686 == 3.0;
        float _2688 = log2(_2674);
        float _2695 = exp2(_2688 * cbSceneParam._m0[78u].x) * _2545;
        float _2696 = exp2(_2688 * cbSceneParam._m0[78u].y) * _2546;
        float _2697 = exp2(_2688 * cbSceneParam._m0[78u].z) * _2547;
        float _2704 = _700 + (-0.5);
        _2706 = cbMtdParam._m0[1u];
        _2708 = _2706.y * _2704;
        float _2711 = (_2686 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2712 = _2711 * (_2687 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2668)));
        _2713 = _2711 * (_2687 ? _2696 : (_2696 + (cbSceneParam._m0[72u].w * _2670)));
        _2714 = _2711 * (_2687 ? _2697 : (_2697 + (cbSceneParam._m0[72u].w * _2672)));
        _2715 = _2704 * 0.999000012874603271484375;
        _2725 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2725)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2715) < 0.5)
            {
                _2881 = true;
                break;
            }
        }
        uint _2822 = _752 + uint(_2684.w);
        if ((cbInstanceData._m0[_2822].w < 1.0) && ((cbInstanceData._m0[_2822].w + _2715) < 0.5))
        {
            _2881 = true;
            break;
        }
        if ((_2708 + 1.0) < _2706.x)
        {
            _2881 = true;
            break;
        }
        _2881 = false;
        break;
    }
    float _3086;
    if (_2881)
    {
        discard_state = true;
        _3086 = 0.0;
    }
    else
    {
        _3086 = cbInstanceData._m0[_2548].w;
    }
    SV_Target.x = _2712;
    SV_Target.y = _2713;
    SV_Target.z = _2714;
    SV_Target.w = _3086;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2548].w;
    discard_exit();
}


