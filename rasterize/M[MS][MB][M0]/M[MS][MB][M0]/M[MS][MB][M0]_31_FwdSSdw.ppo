#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1076;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3408 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3419 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3430 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) + _325;
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _378 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = _378.z;
    float _386 = (_378.x * 2.0) + (-1.0);
    float _387 = (_378.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3441 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))));
    float _398 = _386 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_352.x * 2.0) + (-1.0)));
    float _399 = _387 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_352.y * 2.0) + (-1.0)));
    float _402 = fma(_393, _219, fma(_399, _226, _398 * _212));
    float _405 = fma(_393, _220, fma(_399, _227, _398 * _213));
    float _408 = fma(_393, _221, fma(_399, _228, _398 * _214));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _450 = _448.x;
    float _451 = 1.0 - _450;
    float _458 = ((_450 - _451) * cbMtdParam._m0[24u].z) + _451;
    float _460 = (cbMtdParam._m0[19u].x + dot(vec4(_412 * _402, _412 * _405, _412 * _408, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_458 * cbMtdParam._m0[21u].z);
    float _3452 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _476 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_458 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3463 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _481 = ((_461 * (cbMtdParam._m0[17u].x - _332)) * _477) + _332;
    float _482 = ((_461 * (cbMtdParam._m0[17u].y - _333)) * _477) + _333;
    float _483 = ((_461 * (cbMtdParam._m0[17u].z - _334)) * _477) + _334;
    float _488 = (((_352.z - _382) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _382;
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _508 = (_501.x * 2.0) + (-1.0);
    float _509 = (_501.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3474 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _519 = (((_501.z - _488) * _461) * _477) + _488;
    float _534 = (((cbMtdParam._m0[21u].x * _398) + ((_508 - _398) * _461)) * _477) + _398;
    float _535 = (((cbMtdParam._m0[21u].x * _399) + ((_509 - _399) * _461)) * _477) + _399;
    float _536 = (((sqrt(1.0 - (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) - _393) * _461) * _477) + _393;
    float _538 = cbMtdParam._m0[22u].x + _378.w;
    float _541 = fma(_536, _219, fma(_535, _226, _534 * _212));
    float _544 = fma(_536, _220, fma(_535, _227, _534 * _213));
    float _547 = fma(_536, _221, fma(_535, _228, _534 * _214));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3485 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _555 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3507 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3518 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3529 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    float _639 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _640 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _664 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _667 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _681 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3540 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _639, cbSceneParam._m0[86u].y * _640));
    float _705 = ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * TEXCOORD_5.w) * _701.x;
    float _706 = dot(vec3(_552, _553, _554), vec3(_631, _632, _633));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _552) - _631;
    float _714 = (_709 * _553) - _632;
    float _715 = (_709 * _554) - _633;
    float _719 = abs(dot(vec3(_631, _632, _633), vec3(_552, _553, _554)));
    float _3573 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_555);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _804 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _808 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _833 = _766 + _552;
        float _834 = _770 + _553;
        float _835 = _774 + _554;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _800;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _804;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _808;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_552, _553, _554), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3621 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_552, _553, _554), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3654 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_552, _553, _554), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3687 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1119 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1123 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1146 = _766 + _552;
        float _1147 = _770 + _553;
        float _1148 = _774 + _554;
        float _1158 = fma(_1148, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146)) - _1115;
        float _1159 = fma(_1148, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146)) - _1119;
        float _1160 = fma(_1148, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146)) - _1123;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1115 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1119 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[35u].z) + ((((((_1123 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1214 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1181.x + (-0.5));
        float _1216 = _1214 * (_1181.y + (-0.5));
        float _1217 = _1214 * (_1181.z + (-0.5));
        float _1224 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1188.x + (-0.5));
        float _1226 = _1224 * (_1188.y + (-0.5));
        float _1227 = _1224 * (_1188.z + (-0.5));
        float _1234 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1195.x + (-0.5));
        float _1236 = _1234 * (_1195.y + (-0.5));
        float _1237 = _1234 * (_1195.z + (-0.5));
        float _1244 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1202.x + (-0.5));
        float _1246 = _1244 * (_1202.y + (-0.5));
        float _1247 = _1244 * (_1202.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_552, _553, _554), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3750 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1278 + 1.0))) + _1283) * _1248;
        float _1293 = _1216 * 0.5;
        float _1294 = _1226 * 0.5;
        float _1295 = _1236 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_552, _553, _554), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3783 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1320 + 1.0))) + _1325) * _1249;
        float _1335 = _1217 * 0.5;
        float _1336 = _1227 * 0.5;
        float _1337 = _1237 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_552, _553, _554), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3816 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1362 + 1.0))) + _1367) * _1250;
        _1384 = _1217;
        _1385 = _1216;
        _1386 = _1215;
        _1387 = _1227;
        _1388 = _1226;
        _1389 = _1225;
        _1390 = _1237;
        _1391 = _1236;
        _1392 = _1235;
        _1393 = _1250;
        _1394 = _1249;
        _1395 = _1248;
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _1076;
        _1385 = _1076;
        _1386 = _1076;
        _1387 = _1076;
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = _1076;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1088)) + _1088;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1089)) + _1089;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1090)) + _1090;
    float _1431 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1408));
    float _1452 = _713 * 0.5;
    float _1453 = _714 * 0.5;
    float _1454 = _715 * 0.5;
    float _1455 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1458 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1461 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1495;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1468 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1472 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1476 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1483 = dot(vec4(cbModelParam._m0[39u]), vec4(_1452, _1453, _1454, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1506;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1497 = dot(vec4(cbModelParam._m0[40u]), vec4(_1452, _1453, _1454, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1510 = (_1506 * cbModelParam._m0[1u].x) + (_1495 * (1.0 - cbModelParam._m0[1u].x));
    float _1520 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1520 : min(cbModelParam._m0[25u].z, _1520));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1569 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1573 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1577 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1580 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1583 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1586 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1614;
        if (_1580 > 0.0)
        {
            _1614 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1614 = frontier_phi_14_12_ladder;
        }
        float _1838;
        if (_1583 > 0.0)
        {
            _1838 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1838 = frontier_phi_23_19_ladder;
        }
        float _2084;
        if (_1586 > 0.0)
        {
            _2084 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2084 = frontier_phi_35_30_ladder;
        }
        float _2086 = isnan(_1838) ? _1614 : (isnan(_1614) ? _1838 : min(_1614, _1838));
        float _2087 = isnan(_2084) ? _2086 : (isnan(_2086) ? _2084 : min(_2086, _2084));
        float _2091 = (_2087 * _1580) + _1569;
        float _2092 = (_2087 * _1583) + _1573;
        float _2093 = (_2087 * _1586) + _1577;
        float _2094 = _2087 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2094;
        float _2098 = _2094 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 > _2098) || ((_2092 < _2096) || ((_2091 < _2096) || (_2091 > _2098))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2093, cbModelParam._m0[9u].z, fma(_2092, cbModelParam._m0[9u].y, _2091 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2093, cbModelParam._m0[10u].z, fma(_2092, cbModelParam._m0[10u].y, _2091 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2093, cbModelParam._m0[11u].z, fma(_2092, cbModelParam._m0[11u].y, _2091 * cbModelParam._m0[11u].x))), _1521);
            frontier_phi_13_35_ladder = _2217.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2217.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2217.x * cbModelParam._m0[1u].y;
        }
        _1602 = frontier_phi_13_35_ladder_2;
        _1604 = frontier_phi_13_35_ladder_1;
        _1606 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1521);
        _1602 = _1590.x * cbModelParam._m0[1u].y;
        _1604 = _1590.y * cbModelParam._m0[1u].y;
        _1606 = _1590.z * cbModelParam._m0[1u].y;
    }
    float _1610 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1610 : min(cbModelParam._m0[25u].w, _1610));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1679 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1682 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1843;
        if (_1676 > 0.0)
        {
            _1843 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1843 = frontier_phi_25_21_ladder;
        }
        float _2111;
        if (_1679 > 0.0)
        {
            _2111 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2111 = frontier_phi_37_32_ladder;
        }
        float _2316;
        if (_1682 > 0.0)
        {
            _2316 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2316 = frontier_phi_46_43_ladder;
        }
        float _2318 = isnan(_2111) ? _1843 : (isnan(_1843) ? _2111 : min(_1843, _2111));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1676) + _1665;
        float _2324 = (_2319 * _1679) + _1669;
        float _2325 = (_2319 * _1682) + _1673;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2326;
        float _2329 = _2326 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2325 > _2329) || ((_2325 < _2327) || ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 < _2327) || (_2323 > _2329))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2325, cbModelParam._m0[17u].z, fma(_2324, cbModelParam._m0[17u].y, _2323 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2325, cbModelParam._m0[18u].z, fma(_2324, cbModelParam._m0[18u].y, _2323 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2325, cbModelParam._m0[19u].z, fma(_2324, cbModelParam._m0[19u].y, _2323 * cbModelParam._m0[19u].x))), _1611);
            frontier_phi_22_46_ladder = _2524.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2524.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2524.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_22_46_ladder_2;
        _1703 = frontier_phi_22_46_ladder_1;
        _1705 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1611);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1717 = ((((1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_734 * _721)) * _705;
    float _1718 = _1717 * ((cbModelParam._m0[1u].w * (_1701 - _1602)) + _1602);
    float _1719 = _1717 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1720 = _1717 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1719, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1719, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1719, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1737 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_639, _640));
    float _1739 = _1737.w;
    float _1751 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1739);
    float _1752 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1739);
    float _1753 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1739);
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1767 = _705 + (-1.0);
    float _1772 = (cbLight._m0[_1760].x * _1767) + 1.0;
    float _1773 = (cbLight._m0[_1760].y * _1767) + 1.0;
    float _1774 = (cbLight._m0[_1760].z * _1767) + 1.0;
    float _1775 = (cbLight._m0[_1760].w * _1767) + 1.0;
    uint _1776 = _1759 + 5u;
    float _1782 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1786 = _1759 + 4u;
    float _1796 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1800 = _1759 | 1u;
    float _1811 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_552, _553, _554));
    float _1814 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_552, _553, _554));
    float _3952 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _3963 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1819 = (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * 0.3183098733425140380859375;
    float _1821 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * 0.3183098733425140380859375;
    float _1828 = ((cbLight._m0[_1776].x * _1782) * _1821) + (((cbLight._m0[_1786].x * _1751) * _1796) * _1819);
    float _1829 = ((_1782 * cbLight._m0[_1776].y) * _1821) + (((cbLight._m0[_1786].y * _1752) * _1796) * _1819);
    float _1830 = ((_1782 * cbLight._m0[_1776].z) * _1821) + (((cbLight._m0[_1786].z * _1753) * _1796) * _1819);
    uvec4 _1835 = floatBitsToUint(cbLight._m0[_1759 + 12u]);
    bool _1837 = _1835.x == 0u;
    float _1848;
    float _1850;
    float _1852;
    if (_1837)
    {
        _1848 = _1828;
        _1850 = _1829;
        _1852 = _1830;
    }
    else
    {
        uint _1856 = _1759 + 6u;
        float _1872 = (dot(vec3(cbLight._m0[_1759 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _3974 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1875 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1848 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1828;
        _1850 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1829;
        _1852 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1830;
    }
    bool _1855 = _1835.y == 0u;
    float _1893;
    float _1895;
    float _1897;
    if (_1855)
    {
        _1893 = _1848;
        _1895 = _1850;
        _1897 = _1852;
    }
    else
    {
        uint _2055 = _1759 + 7u;
        float _2071 = (dot(vec3(cbLight._m0[_1759 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2072 = _2071 * _2071;
        float _3990 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2073 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _2074 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1893 = (((cbLight._m0[_2055].x * 0.3183098733425140380859375) * _2073) * _2074) + _1848;
        _1895 = (((cbLight._m0[_2055].y * 0.3183098733425140380859375) * _2073) * _2074) + _1850;
        _1897 = (((cbLight._m0[_2055].z * 0.3183098733425140380859375) * _2073) * _2074) + _1852;
    }
    uint _1900 = _1759 + 8u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _555) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1759].x + _631;
    float _1916 = cbLight._m0[_1759].y + _632;
    float _1917 = cbLight._m0[_1759].z + _633;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1759].xyz));
    float _4006 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1929 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1930 = dot(vec3(_552, _553, _554), vec3(_1922, _1923, _1924));
    float _4028 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1922, _1923, _1924));
    float _4039 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1914 * _1914;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1929 * ((_1928 * _1954) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _1954) + _1914) * _1928))) * _1928;
    float _4050 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    uint _1981 = _1759 + 9u;
    float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _555) * 0.949999988079071044921875);
    float _1993 = _1992 * _1992;
    float _1994 = cbLight._m0[_1800].x + _631;
    float _1995 = cbLight._m0[_1800].y + _632;
    float _1996 = cbLight._m0[_1800].z + _633;
    float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
    float _2001 = _2000 * _1994;
    float _2002 = _2000 * _1995;
    float _2003 = _2000 * _1996;
    float _2004 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1800].xyz));
    float _4061 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _2008 = dot(vec3(_552, _553, _554), vec3(_2001, _2002, _2003));
    float _4072 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_2001, _2002, _2003));
    float _4083 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1993 * _1993;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2029 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2030 = 1.0 - _1993;
    float _2040 = (0.5 / (((_1929 * ((_2007 * _2030) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2030) + _1993) * _2007))) * _2007;
    float _4094 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    float _2052 = (((_2029 * cbLight._m0[_1981].x) * _2042) * _1782) + ((((cbLight._m0[_1900].x * _1751) * _1953) * _1967) * _1796);
    float _2053 = (((_2029 * cbLight._m0[_1981].y) * _2042) * _1782) + ((((cbLight._m0[_1900].y * _1752) * _1953) * _1967) * _1796);
    float _2054 = (((_2029 * cbLight._m0[_1981].z) * _2042) * _1782) + ((((cbLight._m0[_1900].z * _1753) * _1953) * _1967) * _1796);
    float _2116;
    float _2118;
    float _2120;
    if (_1837)
    {
        _2116 = _2052;
        _2118 = _2053;
        _2120 = _2054;
    }
    else
    {
        uint _2122 = _1759 + 2u;
        uint _2126 = _1759 + 10u;
        float _2140 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _555) * 0.949999988079071044921875);
        float _2141 = _2140 * _2140;
        float _2142 = cbLight._m0[_2122].x + _631;
        float _2143 = cbLight._m0[_2122].y + _632;
        float _2144 = cbLight._m0[_2122].z + _633;
        float _2148 = inversesqrt(dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144)));
        float _2149 = _2148 * _2142;
        float _2150 = _2148 * _2143;
        float _2151 = _2148 * _2144;
        float _2152 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2122].xyz));
        float _4105 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2155 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2156 = dot(vec3(_552, _553, _554), vec3(_2149, _2150, _2151));
        float _4116 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2159 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _2160 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2149, _2150, _2151));
        float _4127 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2164 = _2141 * _2141;
        float _2168 = ((_2159 * _2159) * (_2164 + (-1.0))) + 1.0;
        float _2177 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2178 = 1.0 - _2141;
        float _2188 = (0.5 / (((_1929 * ((_2155 * _2178) + _2141)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2178) + _2141) * _2155))) * _2155;
        float _4138 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2190 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2164 / ((_2168 * _2168) * 3.141590118408203125));
        float _2191 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2116 = (((_2177 * cbLight._m0[_2126].x) * _2190) * _2191) + _2052;
        _2118 = (((_2177 * cbLight._m0[_2126].y) * _2190) * _2191) + _2053;
        _2120 = (((_2177 * cbLight._m0[_2126].z) * _2190) * _2191) + _2054;
    }
    float _2226;
    float _2228;
    float _2230;
    if (_1855)
    {
        _2226 = _2116;
        _2228 = _2118;
        _2230 = _2120;
    }
    else
    {
        uint _2237 = _1759 + 3u;
        uint _2241 = _1759 + 11u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _555) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _631;
        float _2258 = cbLight._m0[_2237].y + _632;
        float _2259 = cbLight._m0[_2237].z + _633;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2237].xyz));
        float _4154 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _2271 = dot(vec3(_552, _553, _554), vec3(_2264, _2265, _2266));
        float _4165 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4176 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2293 = 1.0 - _2256;
        float _2303 = (0.5 / (((_1929 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2293) + _2256) * _2270))) * _2270;
        float _4187 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2226 = (((_2292 * cbLight._m0[_2241].x) * _2305) * _2306) + _2116;
        _2228 = (((_2292 * cbLight._m0[_2241].y) * _2305) * _2306) + _2118;
        _2230 = (((_2292 * cbLight._m0[_2241].z) * _2305) * _2306) + _2120;
    }
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    if (_1757.y == 0u)
    {
        float _2381 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2382 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2381;
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2381;
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2381;
        uvec4 _2396 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2397 = _2396.x;
        uint _2408 = uint((float(_2396.y) * floor(float(uint(cbSceneParam._m0[85u].y * _640) / _2397))) + floor(float(uint(cbSceneParam._m0[85u].x * _639) / _2397)));
        float _2418 = (log2(_2384 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2419 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        uint _2422 = uint(isnan(14.0) ? _2419 : (isnan(_2419) ? 14.0 : min(_2419, 14.0)));
        uvec4 _2427 = texelFetch(g_lightClusterGridBuffer, int(((_2422 << 2u) + (_2408 << 6u)) >> 2u));
        uint _2428 = _2427.x;
        uint _2429 = _2396.z;
        float _2529;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        if (((((1u << ((_2429 >> 4u) & 15u)) + 4294967295u) & _2428) == 0u) || ((_2429 & 240u) == 0u))
        {
            _2529 = 0.0;
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
        }
        else
        {
            float _2530;
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2690)
                {
                    frontier_phi_61_pred = _2674;
                    frontier_phi_61_pred_1 = _2679;
                    frontier_phi_61_pred_2 = _2678;
                    frontier_phi_61_pred_3 = _2677;
                    frontier_phi_61_pred_4 = _2676;
                    frontier_phi_61_pred_5 = _2675;
                }
                else
                {
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    uint _2804;
                    _2798 = _2674;
                    _2799 = _2675;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2689;
                    float _2730;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    for (;;)
                    {
                        uint _2808 = uint(findLSB(_2804)) + (_2680 << 5u);
                        uint _2805 = (_2804 + 4294967295u) & _2804;
                        uint _2810 = _2808 * 48u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2830 = (_2808 * 48u) + 4u;
                        vec4 _2843 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2849 = (_2808 * 48u) + 8u;
                        vec3 _2860 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x));
                        float _2864 = _2824.x - _2382;
                        float _2865 = _2824.y - _2383;
                        float _2866 = _2824.z - _2384;
                        float _2867 = dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866));
                        float _2870 = inversesqrt(_2867);
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2874 = dot(vec3(_661, _664, _667), vec3(_2871, _2872, _2873));
                        float _2879 = 1.0 - (_2867 * _2824.w);
                        float _4213 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2881 = sqrt(_2867) * _2843.w;
                        float _2884 = 1.39999997615814208984375 / (_2881 + 1.39999997615814208984375);
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2874) + _2885;
                        float _2891 = _2881 * _2881;
                        float _2895 = ((isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))) * _2880) / ((_2891 * 0.699999988079071044921875) + 1.0);
                        float _2899 = (-0.0) - _2382;
                        float _2900 = (-0.0) - _2383;
                        float _2901 = (-0.0) - _2384;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2906 = _2905 * _2899;
                        float _2907 = _2905 * _2900;
                        float _2908 = _2905 * _2901;
                        float _2916 = exp2(log2(1.0 / ((_2891 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _721;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2929 = _2908 + _2873;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_661, _664, _667), vec3(_2906, _2907, _2908));
                        float _4229 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2941 = dot(vec3(_661, _664, _667), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4240 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2884 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2874) + _2950;
                        float _4251 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4262 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2976 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) / ((_2948 * _2948) * ((_2891 * 2.1991131305694580078125) + 3.141590118408203125))) * _2880;
                        _2733 = (_2895 * _2843.x) + _2801;
                        _2734 = (_2895 * _2843.y) + _2802;
                        _2735 = (_2895 * _2843.z) + _2803;
                        _2730 = (_2976 * _2860.x) + _2798;
                        _2731 = (_2976 * _2860.y) + _2799;
                        _2732 = (_2976 * _2860.z) + _2800;
                        if (_2805 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2798 = _2730;
                            _2799 = _2731;
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2805;
                        }
                    }
                    frontier_phi_61_pred = _2730;
                    frontier_phi_61_pred_1 = _2735;
                    frontier_phi_61_pred_2 = _2734;
                    frontier_phi_61_pred_3 = _2733;
                    frontier_phi_61_pred_4 = _2732;
                    frontier_phi_61_pred_5 = _2731;
                }
                _2530 = frontier_phi_61_pred;
                _2540 = frontier_phi_61_pred_1;
                _2538 = frontier_phi_61_pred_2;
                _2536 = frontier_phi_61_pred_3;
                _2534 = frontier_phi_61_pred_4;
                _2532 = frontier_phi_61_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2530;
                    _2675 = _2532;
                    _2676 = _2534;
                    _2677 = _2536;
                    _2678 = _2538;
                    _2679 = _2540;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2529 = _2530;
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
        }
        uvec4 _2543 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2544 = _2543.z;
        uint _2546 = (_2544 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2546) & _2428) == 0u)
        {
            _2642 = _2529;
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
            float _2668 = _2667 * _2382;
            float _2669 = _2667 * _2383;
            float _2670 = _2667 * _2384;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2546 < ((_2544 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2781 = _2529;
                float _2782 = _2531;
                float _2783 = _2533;
                float _2784 = _2535;
                float _2785 = _2537;
                float _2786 = _2539;
                uint _2787 = _2546;
                uint _2796;
                bool _2797;
                for (;;)
                {
                    _2796 = texelFetch(g_lightClassification, int((((_2422 << 5u) + (_2408 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                    _2797 = _2796 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2797)
                    {
                        frontier_phi_67_pred = _2784;
                        frontier_phi_67_pred_1 = _2785;
                        frontier_phi_67_pred_2 = _2786;
                        frontier_phi_67_pred_3 = _2783;
                        frontier_phi_67_pred_4 = _2782;
                        frontier_phi_67_pred_5 = _2781;
                    }
                    else
                    {
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _2994 = _2781;
                        float _2995 = _2782;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        uint _3000 = _2796;
                        uint _3001;
                        vec4 _3026;
                        float _3027;
                        vec4 _3042;
                        vec3 _3054;
                        vec4 _3069;
                        vec4 _3084;
                        float _3130;
                        bool _3131;
                        for (;;)
                        {
                            uint _3011 = ((_2787 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3000));
                            _3001 = (_3000 + 4294967295u) & _3000;
                            uint _3013 = _3011 * 40u;
                            _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            _3027 = _3026.w;
                            uint _3029 = (_3011 * 40u) + 4u;
                            _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3044 = (_3011 * 40u) + 8u;
                            _3054 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x));
                            uint _3056 = (_3011 * 40u) + 16u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3011 * 40u) + 20u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3011 * 40u) + 24u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3105 = (_3011 * 40u) + 28u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            _3130 = fma(_2384, _3118.z, fma(_2383, _3118.y, _3118.x * _2382)) + _3118.w;
                            _3131 = !((fma(_2384, _3099.z, fma(_2383, _3099.y, _3099.x * _2382)) + _3099.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3131)
                            {
                                float _3158 = _3026.x - _2382;
                                float _3159 = _3026.y - _2383;
                                float _3160 = _3026.z - _2384;
                                float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                                float _3164 = inversesqrt(_3161);
                                float _3165 = _3164 * _3158;
                                float _3166 = _3164 * _3159;
                                float _3167 = _3164 * _3160;
                                float _3171 = 1.0 - (_3161 / (_3027 * _3027));
                                float _4273 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3176 = sqrt(_3161) * _3042.w;
                                float _3178 = 1.39999997615814208984375 / (_3176 + 1.39999997615814208984375);
                                float _3179 = _3178 * _3178;
                                float _3182 = ((1.0 - _3179) * dot(vec3(_3165, _3166, _3167), vec3(_661, _664, _667))) + _3179;
                                float _3185 = _3176 * _3176;
                                float _3189 = (fma(_2384, _3069.z, fma(_2383, _3069.y, _3069.x * _2382)) + _3069.w) / _3130;
                                float _3190 = (fma(_2384, _3084.z, fma(_2383, _3084.y, _3084.x * _2382)) + _3084.w) / _3130;
                                float _3194 = 1.0 - dot(vec2(_3189, _3190), vec2(_3189, _3190));
                                float _4289 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3196 = _3195 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3172) / ((_3185 * 0.699999988079071044921875) + 1.0));
                                float _3208 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3209 = 1.0 - _721;
                                float _3216 = sqrt(1.0 - ((1.0 - (_3209 * _3209)) * (1.0 - (_3208 * _3208))));
                                float _3217 = _3216 * _3216;
                                float _3218 = _3217 * _3217;
                                float _3219 = _3165 - _2668;
                                float _3220 = _3166 - _2669;
                                float _3221 = _3167 - _2670;
                                float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                                float _3229 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4300 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3232 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3233 = dot(vec3(_661, _664, _667), vec3(_3225 * _3219, _3225 * _3220, _3225 * _3221));
                                float _4311 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3236 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3240 = ((_3236 * _3236) * (_3218 + (-1.0))) + 1.0;
                                float _3241 = _3178 * _3217;
                                float _3242 = _3241 * _3241;
                                float _3248 = ((1.0 - _3242) * dot(vec3(_661, _664, _667), vec3(_3165, _3166, _3167))) + _3242;
                                float _4322 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3250 = 1.0 - _3217;
                                float _3260 = (0.5 / (((_3249 * ((_3232 * _3250) + _3217)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3217) * _3232))) * _3249;
                                float _4333 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3270 = (_3195 * _3172) * (((_3218 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3240 * _3240) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3270 * _3054.x;
                                frontier_phi_73_pred_1 = _3270 * _3054.y;
                                frontier_phi_73_pred_2 = _3196 * _3042.z;
                                frontier_phi_73_pred_3 = _3196 * _3042.y;
                                frontier_phi_73_pred_4 = _3196 * _3042.x;
                                frontier_phi_73_pred_5 = _3270 * _3054.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3274 = frontier_phi_73_pred;
                            _3275 = frontier_phi_73_pred_1;
                            _3279 = frontier_phi_73_pred_2;
                            _3278 = frontier_phi_73_pred_3;
                            _3277 = frontier_phi_73_pred_4;
                            _3276 = frontier_phi_73_pred_5;
                            _2984 = _3277 + _2997;
                            _2985 = _3278 + _2998;
                            _2986 = _3279 + _2999;
                            _2981 = _3274 + _2994;
                            _2982 = _3275 + _2995;
                            _2983 = _3276 + _2996;
                            if (_3001 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _3001;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2984;
                        frontier_phi_67_pred_1 = _2985;
                        frontier_phi_67_pred_2 = _2986;
                        frontier_phi_67_pred_3 = _2983;
                        frontier_phi_67_pred_4 = _2982;
                        frontier_phi_67_pred_5 = _2981;
                    }
                    _2649 = frontier_phi_67_pred;
                    _2651 = frontier_phi_67_pred_1;
                    _2653 = frontier_phi_67_pred_2;
                    _2647 = frontier_phi_67_pred_3;
                    _2645 = frontier_phi_67_pred_4;
                    _2643 = frontier_phi_67_pred_5;
                    uint _2788 = _2787 + 1u;
                    if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2781 = _2643;
                        _2782 = _2645;
                        _2783 = _2647;
                        _2784 = _2649;
                        _2785 = _2651;
                        _2786 = _2653;
                        _2787 = _2788;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2651;
                frontier_phi_55_56_ladder_1 = _2653;
                frontier_phi_55_56_ladder_2 = _2649;
                frontier_phi_55_56_ladder_3 = _2647;
                frontier_phi_55_56_ladder_4 = _2645;
                frontier_phi_55_56_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_55_56_ladder = _2537;
                frontier_phi_55_56_ladder_1 = _2539;
                frontier_phi_55_56_ladder_2 = _2535;
                frontier_phi_55_56_ladder_3 = _2533;
                frontier_phi_55_56_ladder_4 = _2531;
                frontier_phi_55_56_ladder_5 = _2529;
            }
            _2642 = frontier_phi_55_56_ladder_5;
            _2644 = frontier_phi_55_56_ladder_4;
            _2646 = frontier_phi_55_56_ladder_3;
            _2648 = frontier_phi_55_56_ladder_2;
            _2650 = frontier_phi_55_56_ladder;
            _2652 = frontier_phi_55_56_ladder_1;
        }
        float _2657 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2441 = (_2657 * _2648) + _1893;
        _2443 = (_2657 * _2650) + _1895;
        _2445 = (_2657 * _2652) + _1897;
        _2447 = ((_2642 * 0.039999999105930328369140625) * _2657) + _2226;
        _2449 = ((_2644 * 0.039999999105930328369140625) * _2657) + _2228;
        _2451 = ((_2646 * 0.039999999105930328369140625) * _2657) + _2230;
    }
    else
    {
        _2441 = _1893;
        _2443 = _1895;
        _2445 = _1897;
        _2447 = _2226;
        _2449 = _2228;
        _2451 = _2230;
    }
    float _4349 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4360 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4371 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    uint _2471 = _252 + 6u;
    float _2479 = _639 / cbSceneParam._m0[86u].x;
    float _2480 = _640 / cbSceneParam._m0[86u].y;
    vec4 _2494 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2496 = _2494.x;
    float _2497 = _2494.y;
    float _2498 = _2494.z;
    float _2499 = _2494.w;
    float _2592;
    float _2594;
    float _2596;
    float _2598;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2554 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2555 = _2554 / _573;
        float _2566 = _2555 * _624;
        float _2567 = _625 * _2555;
        float _2568 = (-0.0) - _2567;
        float _2570 = _2555 * _626;
        float _2572 = (cbSceneParam._m0[77u].w * _2568) / _2554;
        float _2573 = _2572 + cbSceneParam._m0[79u].w;
        float _2574 = cbSceneParam._m0[79u].w - _2567;
        float _2580 = sqrt(((_2566 * _2566) + (_2567 * _2567)) + (_2570 * _2570));
        float _2583 = (1.0 - (cbSceneParam._m0[77u].w / _2554)) * _2580;
        float _2588 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2590 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2743;
        if (abs((_2568 - _2572) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2743 = ((((_2573 > 0.0) ? exp2(_2588 * _2573) : (2.0 - exp2(_2590 * _2573))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2583;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2574) ? _2573 : (isnan(_2573) ? _2574 : max(_2573, _2574));
            float _2705 = isnan(_2574) ? _2573 : (isnan(_2573) ? _2574 : min(_2573, _2574));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2743 = ((abs(_2580 / _2568) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2588 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2588 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2590 * _2714) - exp2(_2590 * _2715)) * _2703))) + (_2583 * cbSceneParam._m0[80u].z);
        }
        vec4 _2745 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2479, _2480, 1.0), 0.0);
        float _2754 = exp2((_2743 * (-1.44269502162933349609375)) * (1.0 - _2745.w));
        float _2755 = log2(_2754);
        float _2771 = log2(_2499);
        _2592 = (exp2(_2771 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].x)) * _2745.x) / cbSceneParam._m0[78u].x)) + _2496;
        _2594 = (exp2(_2771 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].y)) * _2745.y) / cbSceneParam._m0[78u].y)) + _2497;
        _2596 = (exp2(_2771 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2755 * cbSceneParam._m0[78u].z)) * _2745.z) / cbSceneParam._m0[78u].z)) + _2498;
        _2598 = _2754 * _2499;
    }
    else
    {
        _2592 = _2496;
        _2594 = _2497;
        _2596 = _2498;
        _2598 = _2499;
    }
    float _2610 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2611 = _2610 == 3.0;
    float _2612 = log2(_2598);
    float _2619 = exp2(_2612 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2441 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _705))) + ((_2447 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2620 = exp2(_2612 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2443 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _705))) + ((_2449 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2621 = exp2(_2612 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2445 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _705))) + ((_2451 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1510)) * cbPerFrame._m0[3u].x));
    float _2630 = (_2610 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2630 * (_2611 ? _2619 : (_2619 + (cbSceneParam._m0[72u].w * _2592)));
    SV_Target.y = _2630 * (_2611 ? _2620 : (_2620 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.z = _2630 * (_2611 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.w = cbInstanceData._m0[_2471].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2471].w;
}


