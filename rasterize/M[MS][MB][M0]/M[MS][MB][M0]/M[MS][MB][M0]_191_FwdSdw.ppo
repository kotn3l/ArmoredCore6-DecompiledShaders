#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1354;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _367 = _365.x;
    float _377 = dot(vec4(_367, _365.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _394 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_367 - _377) * cbMtdParam._m0[24u].x) + _377) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3942 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _402 = (_395 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _403 = (_395 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _404 = (_395 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _453 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _467 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_443 - _453) * cbMtdParam._m0[24u].x) + _453) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3953 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _475 = (_468 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _476 = (_468 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _477 = (_468 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _545 = ((_517.x - _536) * _395) + _536;
    float _546 = ((_517.y - _537) * _395) + _537;
    float _547 = ((_517.z - _538) * _395) + _538;
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _572 = ((_559.z - _547) * _468) + _547;
    float _575 = ((((_559.x - _545) * _468) + _545) * 2.0) + (-1.0);
    float _576 = ((((_559.y - _546) * _468) + _546) * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3964 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))));
    vec4 _596 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _621 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _623 = _621.x;
    float _624 = 1.0 - _623;
    float _630 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _633 = ((isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : min(_630, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _642 = (_633 - ((((((_623 - _624) * cbMtdParam._m0[24u].z) + _624) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _633))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3985 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _650 = (_643 * (cbMtdParam._m0[17u].x - _475)) + _475;
    float _651 = (_643 * (cbMtdParam._m0[17u].y - _476)) + _476;
    float _652 = (_643 * (cbMtdParam._m0[17u].z - _477)) + _477;
    vec4 _664 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _666 = _664.x;
    float _667 = 1.0 - _666;
    float _694 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_666 - _667) * cbMtdParam._m0[24u].w) + _667) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3996 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _703 = ((((cbMtdParam._m0[10u].x - _650) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _695) + _650;
    float _704 = ((((cbMtdParam._m0[10u].y - _651) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _695) + _651;
    float _705 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _652)) * _695) + _652;
    float _710 = (((_494.z - _572) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _572;
    float _714 = ((_596.z - _710) * cbMtdParam._m0[19u].w) + _710;
    vec4 _728 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4007 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = (_643 * (_728.z - _714)) + _714;
    float _748 = ((cbMtdParam._m0[23u].y - _745) * _695) + _745;
    vec4 _767 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _773 = (_767.x * 2.0) + (-1.0);
    float _774 = (_767.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4018 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _789 = (_575 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)))) + (((_596.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _790 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)))) + (((_596.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _802 = (((_735 - _789) + (cbMtdParam._m0[21u].x * _789)) * _643) + _789;
    float _803 = (((_736 - _790) + (cbMtdParam._m0[21u].x * _790)) * _643) + _790;
    float _804 = (_643 * (sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _582)) + _582;
    float _815 = (((_773 - _802) + (_802 * cbMtdParam._m0[22u].z)) * _695) + _802;
    float _816 = (((_774 - _803) + (_803 * cbMtdParam._m0[22u].z)) * _695) + _803;
    float _817 = ((sqrt(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) - _804) * _695) + _804;
    float _819 = cbMtdParam._m0[22u].x + _596.w;
    float _822 = fma(_817, _246 * NORMAL.x, fma(_816, _253 * TANGENT.x, (_239 * _231) * _815));
    float _825 = fma(_817, _246 * NORMAL.y, fma(_816, _253 * TANGENT.y, (_239 * _232) * _815));
    float _828 = fma(_817, _246 * NORMAL.z, fma(_816, _253 * TANGENT.z, (_239 * _233) * _815));
    float _832 = inversesqrt(dot(vec3(_822, _825, _828), vec3(_822, _825, _828)));
    float _833 = _832 * _822;
    float _834 = _832 * _825;
    float _835 = _832 * _828;
    float _4029 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _836 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4051 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4062 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4073 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _854 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _895 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _905 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _895);
    float _906 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _895);
    float _907 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _895);
    float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
    float _912 = _905 * _911;
    float _913 = _906 * _911;
    float _914 = _907 * _911;
    float _920 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _921 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _939 = fma(_835, cbSceneParam._m0[5u].z, fma(_834, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _833));
    float _942 = fma(_835, cbSceneParam._m0[6u].z, fma(_834, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _833));
    float _945 = fma(_835, cbSceneParam._m0[7u].z, fma(_834, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _833));
    uint _959 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _965 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_959].x;
    float _966 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_959].y;
    float _967 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_959].z;
    float _4084 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _920, cbSceneParam._m0[86u].y * _921));
    float _983 = ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * TEXCOORD_5.w) * _979.x;
    float _984 = dot(vec3(_833, _834, _835), vec3(_912, _913, _914));
    float _987 = _984 * 2.0;
    float _991 = (_987 * _833) - _912;
    float _992 = (_987 * _834) - _913;
    float _993 = (_987 * _835) - _914;
    float _997 = abs(dot(vec3(_912, _913, _914), vec3(_833, _834, _835)));
    float _4117 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _999 = sqrt(_836);
    float _1012 = exp2((_999 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_999 * 3.0));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1353;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1078 = fma(_1052, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044));
        float _1082 = fma(_1052, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044));
        float _1086 = fma(_1052, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044));
        float _1111 = _1044 + _833;
        float _1112 = _1048 + _834;
        float _1113 = _1052 + _835;
        float _1123 = fma(_1113, cbModelParam._m0[26u].z, fma(_1112, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1111)) - _1078;
        float _1124 = fma(_1113, cbModelParam._m0[27u].z, fma(_1112, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1111)) - _1082;
        float _1125 = fma(_1113, cbModelParam._m0[28u].z, fma(_1112, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1111)) - _1086;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1078 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1082 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[34u].z) + ((((((_1086 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1181 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1147.x + (-0.5));
        float _1183 = _1181 * (_1147.y + (-0.5));
        float _1184 = _1181 * (_1147.z + (-0.5));
        float _1191 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1154.x + (-0.5));
        float _1193 = _1191 * (_1154.y + (-0.5));
        float _1194 = _1191 * (_1154.z + (-0.5));
        float _1201 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1161.x + (-0.5));
        float _1203 = _1201 * (_1161.y + (-0.5));
        float _1204 = _1201 * (_1161.z + (-0.5));
        float _1211 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1168.x + (-0.5));
        float _1213 = _1211 * (_1168.y + (-0.5));
        float _1214 = _1211 * (_1168.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1235 = (dot(vec3(_833, _834, _835), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1245 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _4165 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1247 + 1.0))) + _1252) * _1215;
        float _1262 = _1183 * 0.5;
        float _1263 = _1193 * 0.5;
        float _1264 = _1203 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_833, _834, _835), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4198 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1289 + 1.0))) + _1294) * _1216;
        float _1304 = _1184 * 0.5;
        float _1305 = _1194 * 0.5;
        float _1306 = _1204 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_833, _834, _835), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4231 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1331 + 1.0))) + _1336) * _1217;
        _1353 = _1184;
        _1355 = _1183;
        _1356 = _1182;
        _1357 = _1194;
        _1358 = _1193;
        _1359 = _1192;
        _1360 = _1204;
        _1361 = _1203;
        _1362 = _1202;
        _1363 = _1217;
        _1364 = _1216;
        _1365 = _1215;
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1354;
        _1355 = _1354;
        _1356 = _1354;
        _1357 = _1354;
        _1358 = _1354;
        _1359 = _1354;
        _1360 = _1354;
        _1361 = _1354;
        _1362 = _1354;
        _1363 = _1354;
        _1364 = _1354;
        _1365 = _1354;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1052, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044));
        float _1396 = fma(_1052, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044));
        float _1400 = fma(_1052, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044));
        float _1423 = _1044 + _833;
        float _1424 = _1048 + _834;
        float _1425 = _1052 + _835;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_833, _834, _835), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4294 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_833, _834, _835), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4327 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_833, _834, _835), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4360 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1354;
        _1662 = _1354;
        _1663 = _1354;
        _1664 = _1354;
        _1665 = _1354;
        _1666 = _1354;
        _1667 = _1354;
        _1668 = _1354;
        _1669 = _1354;
        _1670 = _1354;
        _1671 = _1354;
        _1672 = _1354;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1366)) + _1366;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1367)) + _1367;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1368)) + _1368;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _991 * 0.5;
    float _1730 = _992 * 0.5;
    float _1731 = _993 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1353, _1357, _1360, _1363));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _836);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1052, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1052, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1052, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_993, cbModelParam._m0[13u].z, fma(_992, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991));
        float _1860 = fma(_993, cbModelParam._m0[14u].z, fma(_992, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991));
        float _1863 = fma(_993, cbModelParam._m0[15u].z, fma(_992, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1891 = frontier_phi_14_12_ladder;
        }
        float _2061;
        if (_1860 > 0.0)
        {
            _2061 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2061 = frontier_phi_23_19_ladder;
        }
        float _2356;
        if (_1863 > 0.0)
        {
            _2356 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2356 = frontier_phi_35_30_ladder;
        }
        float _2358 = isnan(_2061) ? _1891 : (isnan(_1891) ? _2061 : min(_1891, _2061));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1857) + _1846;
        float _2364 = (_2359 * _1860) + _1850;
        float _2365 = (_2359 * _1863) + _1854;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2366;
        float _2370 = _2366 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 > _2370) || ((_2364 < _2368) || ((_2363 < _2368) || (_2363 > _2370))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2365, cbModelParam._m0[9u].z, fma(_2364, cbModelParam._m0[9u].y, _2363 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2365, cbModelParam._m0[10u].z, fma(_2364, cbModelParam._m0[10u].y, _2363 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2365, cbModelParam._m0[11u].z, fma(_2364, cbModelParam._m0[11u].y, _2363 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_13_35_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_13_35_ladder_2;
        _1881 = frontier_phi_13_35_ladder_1;
        _1883 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_991, _992, _993), _1798);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _836);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1052, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1052, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1052, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_993, cbModelParam._m0[21u].z, fma(_992, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991));
        float _1956 = fma(_993, cbModelParam._m0[22u].z, fma(_992, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991));
        float _1959 = fma(_993, cbModelParam._m0[23u].z, fma(_992, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991));
        float _2066;
        if (_1953 > 0.0)
        {
            _2066 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2066 = frontier_phi_25_21_ladder;
        }
        float _2383;
        if (_1956 > 0.0)
        {
            _2383 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2383 = frontier_phi_37_32_ladder;
        }
        float _2710;
        if (_1959 > 0.0)
        {
            _2710 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2710 = frontier_phi_47_44_ladder;
        }
        float _2712 = isnan(_2383) ? _2066 : (isnan(_2066) ? _2383 : min(_2066, _2383));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _1953) + _1942;
        float _2718 = (_2713 * _1956) + _1946;
        float _2719 = (_2713 * _1959) + _1950;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2721 = (-1.0) - _2720;
        float _2723 = _2720 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2719 > _2723) || ((_2719 < _2721) || ((_2718 > _2723) || ((_2718 < _2721) || ((_2717 < _2721) || (_2717 > _2723))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2719, cbModelParam._m0[17u].z, fma(_2718, cbModelParam._m0[17u].y, _2717 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2719, cbModelParam._m0[18u].z, fma(_2718, cbModelParam._m0[18u].y, _2717 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2719, cbModelParam._m0[19u].z, fma(_2718, cbModelParam._m0[19u].y, _2717 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_22_47_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_22_47_ladder_2;
        _1980 = frontier_phi_22_47_ladder_1;
        _1982 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_991, _992, _993), _1888);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1994 = ((((1.0 - _1012) * ((_999 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1012 * _999)) * _983;
    float _1995 = _1994 * ((cbModelParam._m0[1u].w * (_1978 - _1879)) + _1879);
    float _1996 = _1994 * ((cbModelParam._m0[1u].w * (_1980 - _1881)) + _1881);
    float _1997 = _1994 * ((cbModelParam._m0[1u].w * (_1982 - _1883)) + _1883);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2053 = _2040 / _2052;
    float _2054 = _2044 / _2052;
    float _2055 = _2048 / _2052;
    float _2202;
    float _2203;
    float _2204;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2082 = ((uint(_2055 > cbSceneParam._m0[59u].y) + uint(_2055 > cbSceneParam._m0[59u].x)) + uint(_2055 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2083 = _2082 + 43u;
        uint _2091 = _2082 + 44u;
        uint _2099 = _2082 + 45u;
        uint _2107 = _2082 + 46u;
        float _2118 = fma(_2052, cbSceneParam._m0[_2083].w, fma(_2048, cbSceneParam._m0[_2083].z, fma(_2044, cbSceneParam._m0[_2083].y, _2040 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2052, cbSceneParam._m0[_2091].w, fma(_2048, cbSceneParam._m0[_2091].z, fma(_2044, cbSceneParam._m0[_2091].y, _2040 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2052, cbSceneParam._m0[_2107].w, fma(_2048, cbSceneParam._m0[_2107].z, fma(_2044, cbSceneParam._m0[_2107].y, _2040 * cbSceneParam._m0[_2107].x)));
        float _2135 = cbSceneParam._m0[33u].z * _2130;
        float _2137 = cbSceneParam._m0[33u].w * _2130;
        float _2140 = fma(_2052, cbSceneParam._m0[_2099].w, fma(_2048, cbSceneParam._m0[_2099].z, fma(_2044, cbSceneParam._m0[_2099].y, _2040 * cbSceneParam._m0[_2099].x))) / _2130;
        float _2188 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
        float _4486 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2195 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 + _2118) / _2130, (_2137 + _2122) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 + _2118) / _2130, (_2122 - _2135) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2135) / _2130, (_2122 - _2137) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2137) / _2130, (_2135 + _2122) / _2130), _2140), 0.0)).x), vec4(0.25)));
        _2202 = 1.0 - (_2195 * cbSceneParam._m0[34u].x);
        _2203 = 1.0 - (_2195 * cbSceneParam._m0[34u].y);
        _2204 = 1.0 - (_2195 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2202 = 1.0;
        _2203 = 1.0;
        _2204 = 1.0;
    }
    float _2268;
    float _2270;
    float _2272;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2256 = fma(_2052, cbSceneParam._m0[63u].w, fma(_2048, cbSceneParam._m0[63u].z, fma(_2044, cbSceneParam._m0[63u].y, _2040 * cbSceneParam._m0[63u].x)));
        float _2257 = fma(_2052, cbSceneParam._m0[60u].w, fma(_2048, cbSceneParam._m0[60u].z, fma(_2044, cbSceneParam._m0[60u].y, _2040 * cbSceneParam._m0[60u].x))) / _2256;
        float _2258 = fma(_2052, cbSceneParam._m0[61u].w, fma(_2048, cbSceneParam._m0[61u].z, fma(_2044, cbSceneParam._m0[61u].y, _2040 * cbSceneParam._m0[61u].x))) / _2256;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2257 >= cbSceneParam._m0[64u].x) && (_2258 >= cbSceneParam._m0[64u].y)) && (_2257 <= cbSceneParam._m0[64u].z)) && (_2258 <= cbSceneParam._m0[64u].w))
        {
            float _2396 = fma(_2052, cbSceneParam._m0[62u].w, fma(_2048, cbSceneParam._m0[62u].z, fma(_2044, cbSceneParam._m0[62u].y, _2040 * cbSceneParam._m0[62u].x))) / _2256;
            float _2400 = isnan(cbSceneParam._m0[41u].w) ? _2396 : (isnan(_2396) ? cbSceneParam._m0[41u].w : max(_2396, cbSceneParam._m0[41u].w));
            float _2443 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
            float _4502 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
            float _2450 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2257, cbSceneParam._m0[33u].w + _2258), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2257, _2258 - cbSceneParam._m0[33u].z), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].z, _2258 - cbSceneParam._m0[33u].w), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2258), _2400), 0.0)).x), vec4(0.25)));
            float _2454 = 1.0 - (_2450 * cbSceneParam._m0[34u].x);
            float _2455 = 1.0 - (_2450 * cbSceneParam._m0[34u].y);
            float _2456 = 1.0 - (_2450 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
            frontier_phi_34_33_ladder_1 = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
            frontier_phi_34_33_ladder_2 = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
        }
        else
        {
            frontier_phi_34_33_ladder = _2204;
            frontier_phi_34_33_ladder_1 = _2203;
            frontier_phi_34_33_ladder_2 = _2202;
        }
        _2268 = frontier_phi_34_33_ladder_2;
        _2270 = frontier_phi_34_33_ladder_1;
        _2272 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2268 = _2202;
        _2270 = _2203;
        _2272 = _2204;
    }
    uvec4 _2277 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2279 = _2277.x * 14u;
    uint _2280 = _2279 + 13u;
    float _2287 = _983 + (-1.0);
    float _2292 = (cbLight._m0[_2280].x * _2287) + 1.0;
    float _2293 = (cbLight._m0[_2280].y * _2287) + 1.0;
    float _2294 = (cbLight._m0[_2280].z * _2287) + 1.0;
    float _2295 = (cbLight._m0[_2280].w * _2287) + 1.0;
    uint _2296 = _2279 + 5u;
    float _2302 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2306 = _2279 + 4u;
    float _2315 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2319 = _2279 | 1u;
    float _2330 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_833, _834, _835));
    float _2333 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_833, _834, _835));
    float _4538 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _4549 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2340 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2347 = ((cbLight._m0[_2296].x * _2302) * _2340) + (((cbLight._m0[_2306].x * _2268) * _2315) * _2338);
    float _2348 = ((_2302 * cbLight._m0[_2296].y) * _2340) + (((cbLight._m0[_2306].y * _2270) * _2315) * _2338);
    float _2349 = ((_2302 * cbLight._m0[_2296].z) * _2340) + (((cbLight._m0[_2306].z * _2272) * _2315) * _2338);
    uvec4 _2353 = floatBitsToUint(cbLight._m0[_2279 + 12u]);
    bool _2355 = _2353.x == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2355)
    {
        _2457 = _2347;
        _2459 = _2348;
        _2461 = _2349;
    }
    else
    {
        uint _2465 = _2279 + 6u;
        float _2481 = (dot(vec3(cbLight._m0[_2279 + 2u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4560 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2484 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2457 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2347;
        _2459 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2348;
        _2461 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2349;
    }
    bool _2464 = _2353.y == 0u;
    float _2519;
    float _2521;
    float _2523;
    if (_2464)
    {
        _2519 = _2457;
        _2521 = _2459;
        _2523 = _2461;
    }
    else
    {
        uint _2681 = _2279 + 7u;
        float _2697 = (dot(vec3(cbLight._m0[_2279 + 3u].xyz), vec3(_833, _834, _835)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4576 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2700 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2519 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2457;
        _2521 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2459;
        _2523 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2461;
    }
    uint _2526 = _2279 + 8u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _836) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2279].x + _912;
    float _2542 = cbLight._m0[_2279].y + _913;
    float _2543 = cbLight._m0[_2279].z + _914;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2279].xyz));
    float _4592 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _2555 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2556 = dot(vec3(_833, _834, _835), vec3(_2548, _2549, _2550));
    float _4614 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2548, _2549, _2550));
    float _4625 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2540 * _2540;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2579 = (exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2580 = 1.0 - _2540;
    float _2591 = (0.5 / (((_2555 * ((_2554 * _2580) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2580) + _2540) * _2554))) * _2554;
    float _4636 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    uint _2607 = _2279 + 9u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _836) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2319].x + _912;
    float _2621 = cbLight._m0[_2319].y + _913;
    float _2622 = cbLight._m0[_2319].z + _914;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2319].xyz));
    float _4647 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2634 = dot(vec3(_833, _834, _835), vec3(_2627, _2628, _2629));
    float _4658 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2627, _2628, _2629));
    float _4669 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2619 * _2619;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2656 = 1.0 - _2619;
    float _2666 = (0.5 / (((_2555 * ((_2633 * _2656) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2656) + _2619) * _2633))) * _2633;
    float _4680 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    float _2678 = (((_2655 * cbLight._m0[_2607].x) * _2668) * _2302) + ((((cbLight._m0[_2526].x * _2268) * _2579) * _2593) * _2315);
    float _2679 = (((_2655 * cbLight._m0[_2607].y) * _2668) * _2302) + ((((cbLight._m0[_2526].y * _2270) * _2579) * _2593) * _2315);
    float _2680 = (((_2655 * cbLight._m0[_2607].z) * _2668) * _2302) + ((((cbLight._m0[_2526].z * _2272) * _2579) * _2593) * _2315);
    float _2736;
    float _2738;
    float _2740;
    if (_2355)
    {
        _2736 = _2678;
        _2738 = _2679;
        _2740 = _2680;
    }
    else
    {
        uint _2742 = _2279 + 2u;
        uint _2746 = _2279 + 10u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _836) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _912;
        float _2763 = cbLight._m0[_2742].y + _913;
        float _2764 = cbLight._m0[_2742].z + _914;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2742].xyz));
        float _4691 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2776 = dot(vec3(_833, _834, _835), vec3(_2769, _2770, _2771));
        float _4702 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4713 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2797 = (exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2798 = 1.0 - _2761;
        float _2808 = (0.5 / (((_2555 * ((_2775 * _2798) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2798) + _2761) * _2775))) * _2775;
        float _4724 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2736 = (((_2797 * cbLight._m0[_2746].x) * _2810) * _2811) + _2678;
        _2738 = (((_2797 * cbLight._m0[_2746].y) * _2810) * _2811) + _2679;
        _2740 = (((_2797 * cbLight._m0[_2746].z) * _2810) * _2811) + _2680;
    }
    float _2842;
    float _2844;
    float _2846;
    if (_2464)
    {
        _2842 = _2736;
        _2844 = _2738;
        _2846 = _2740;
    }
    else
    {
        uint _2853 = _2279 + 3u;
        uint _2857 = _2279 + 11u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _836) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _912;
        float _2874 = cbLight._m0[_2853].y + _913;
        float _2875 = cbLight._m0[_2853].z + _914;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_833, _834, _835), vec3(cbLight._m0[_2853].xyz));
        float _4740 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2887 = dot(vec3(_833, _834, _835), vec3(_2880, _2881, _2882));
        float _4751 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _4762 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2908 = (exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2909 = 1.0 - _2872;
        float _2919 = (0.5 / (((_2555 * ((_2886 * _2909) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2909) + _2872) * _2886))) * _2886;
        float _4773 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2921 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2922 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2842 = (((_2908 * cbLight._m0[_2857].x) * _2921) * _2922) + _2736;
        _2844 = (((_2908 * cbLight._m0[_2857].y) * _2921) * _2922) + _2738;
        _2846 = (((_2908 * cbLight._m0[_2857].z) * _2921) * _2922) + _2740;
    }
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_2277.y == 0u)
    {
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.x;
        uint _2955 = uint((float(_2943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _921) / _2944))) + floor(float(uint(cbSceneParam._m0[85u].x * _920) / _2944)));
        float _2965 = (log2(_2055 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2966 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        uint _2969 = uint(isnan(14.0) ? _2966 : (isnan(_2966) ? 14.0 : min(_2966, 14.0)));
        uvec4 _2974 = texelFetch(g_lightClusterGridBuffer, int(((_2969 << 2u) + (_2955 << 6u)) >> 2u));
        uint _2975 = _2974.x;
        uint _2976 = _2943.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2976 >> 4u) & 15u)) + 4294967295u) & _2975) == 0u) || ((_2976 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            uint _3206 = 0u;
            uint _3215;
            bool _3216;
            for (;;)
            {
                _3215 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3206 << 2u)) >> 2u)).x;
                _3216 = _3215 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3216)
                {
                    frontier_phi_66_pred = _3205;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                else
                {
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    float _3329;
                    uint _3330;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3205;
                    _3330 = _3215;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    for (;;)
                    {
                        uint _3334 = uint(findLSB(_3330)) + (_3206 << 5u);
                        uint _3331 = (_3330 + 4294967295u) & _3330;
                        uint _3336 = _3334 * 48u;
                        vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 3u)).x));
                        uint _3356 = (_3334 * 48u) + 4u;
                        vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3375 = (_3334 * 48u) + 8u;
                        vec3 _3386 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3375)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3375 + 2u)).x));
                        float _3390 = _3350.x - _2053;
                        float _3391 = _3350.y - _2054;
                        float _3392 = _3350.z - _2055;
                        float _3393 = dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392));
                        float _3396 = inversesqrt(_3393);
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3400 = dot(vec3(_939, _942, _945), vec3(_3397, _3398, _3399));
                        float _3405 = 1.0 - (_3393 * _3350.w);
                        float _4799 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3406 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3407 = sqrt(_3393) * _3369.w;
                        float _3410 = 1.39999997615814208984375 / (_3407 + 1.39999997615814208984375);
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3400) + _3411;
                        float _3417 = _3407 * _3407;
                        float _3421 = ((isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0))) * _3406) / ((_3417 * 0.699999988079071044921875) + 1.0);
                        float _3425 = (-0.0) - _2053;
                        float _3426 = (-0.0) - _2054;
                        float _3427 = (-0.0) - _2055;
                        float _3431 = inversesqrt(dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427)));
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3441 = exp2(log2(1.0 / ((_3417 * 3.5) + 5.0)) * 0.25);
                        float _3442 = 1.0 - _999;
                        float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                        float _3450 = _3449 * _3449;
                        float _3451 = _3450 * _3450;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3454 = _3434 + _3399;
                        float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                        float _3462 = dot(vec3(_939, _942, _945), vec3(_3432, _3433, _3434));
                        float _4815 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3465 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3466 = dot(vec3(_939, _942, _945), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                        float _4826 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                        float _3474 = _3410 * _3450;
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3400) + _3475;
                        float _4837 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3479 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3480 = 1.0 - _3450;
                        float _3490 = (0.5 / (((_3479 * ((_3465 * _3480) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3450) * _3465))) * _3479;
                        float _4848 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3501 = (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3473 * _3473) * ((_3417 * 2.1991131305694580078125) + 3.141590118408203125))) * _3406;
                        _3259 = (_3421 * _3369.x) + _3327;
                        _3260 = (_3421 * _3369.y) + _3328;
                        _3261 = (_3421 * _3369.z) + _3329;
                        _3256 = (_3501 * _3386.x) + _3324;
                        _3257 = (_3501 * _3386.y) + _3325;
                        _3258 = (_3501 * _3386.z) + _3326;
                        if (_3331 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3261;
                            _3330 = _3331;
                        }
                    }
                    frontier_phi_66_pred = _3261;
                    frontier_phi_66_pred_1 = _3260;
                    frontier_phi_66_pred_2 = _3259;
                    frontier_phi_66_pred_3 = _3258;
                    frontier_phi_66_pred_4 = _3257;
                    frontier_phi_66_pred_5 = _3256;
                }
                _3066 = frontier_phi_66_pred;
                _3064 = frontier_phi_66_pred_1;
                _3062 = frontier_phi_66_pred_2;
                _3060 = frontier_phi_66_pred_3;
                _3058 = frontier_phi_66_pred_4;
                _3056 = frontier_phi_66_pred_5;
                uint _3207 = _3206 + 1u;
                if (_3207 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3200 = _3056;
                    _3201 = _3058;
                    _3202 = _3060;
                    _3203 = _3062;
                    _3204 = _3064;
                    _3205 = _3066;
                    _3206 = _3207;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((4294967295u << _3072) & _2975) == 0u)
        {
            _3168 = _3055;
            _3170 = _3057;
            _3172 = _3059;
            _3174 = _3061;
            _3176 = _3063;
            _3178 = _3065;
        }
        else
        {
            float _3193 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
            float _3194 = _3193 * _2053;
            float _3195 = _3193 * _2054;
            float _3196 = _3193 * _2055;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3307 = _3055;
                float _3308 = _3057;
                float _3309 = _3059;
                float _3310 = _3061;
                float _3311 = _3063;
                float _3312 = _3065;
                uint _3313 = _3072;
                uint _3322;
                bool _3323;
                for (;;)
                {
                    _3322 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                    _3323 = _3322 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3323)
                    {
                        frontier_phi_72_pred = _3312;
                        frontier_phi_72_pred_1 = _3311;
                        frontier_phi_72_pred_2 = _3310;
                        frontier_phi_72_pred_3 = _3309;
                        frontier_phi_72_pred_4 = _3308;
                        frontier_phi_72_pred_5 = _3307;
                    }
                    else
                    {
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        float _3524 = _3312;
                        uint _3525 = _3322;
                        uint _3526;
                        vec4 _3551;
                        float _3552;
                        vec4 _3567;
                        vec3 _3579;
                        vec4 _3594;
                        vec4 _3609;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3536 = ((_3313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3525));
                            _3526 = (_3525 + 4294967295u) & _3525;
                            uint _3538 = _3536 * 40u;
                            _3551 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3538)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3538 + 3u)).x));
                            _3552 = _3551.w;
                            uint _3554 = (_3536 * 40u) + 4u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3536 * 40u) + 8u;
                            _3579 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x));
                            uint _3581 = (_3536 * 40u) + 16u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3536 * 40u) + 20u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3536 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3536 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_2055, _3643.z, fma(_2054, _3643.y, _3643.x * _2053)) + _3643.w;
                            _3656 = !((fma(_2055, _3624.z, fma(_2054, _3624.y, _3624.x * _2053)) + _3624.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3551.x - _2053;
                                float _3684 = _3551.y - _2054;
                                float _3685 = _3551.z - _2055;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3552 * _3552));
                                float _4859 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3701 = sqrt(_3686) * _3567.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_939, _942, _945))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_2055, _3594.z, fma(_2054, _3594.y, _3594.x * _2053)) + _3594.w) / _3655;
                                float _3715 = (fma(_2055, _3609.z, fma(_2054, _3609.y, _3609.x * _2053)) + _3609.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4875 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _999;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3194;
                                float _3745 = _3691 - _3195;
                                float _3746 = _3692 - _3196;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_939, _942, _945), vec3((-0.0) - _3194, (-0.0) - _3195, (-0.0) - _3196));
                                float _4886 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3758 = dot(vec3(_939, _942, _945), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4897 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_939, _942, _945), vec3(_3690, _3691, _3692))) + _3767;
                                float _4908 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4919 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3721 * _3567.y;
                                frontier_phi_78_pred_1 = _3721 * _3567.x;
                                frontier_phi_78_pred_2 = _3795 * _3579.z;
                                frontier_phi_78_pred_3 = _3795 * _3579.y;
                                frontier_phi_78_pred_4 = _3795 * _3579.x;
                                frontier_phi_78_pred_5 = _3721 * _3567.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3803 = frontier_phi_78_pred;
                            _3802 = frontier_phi_78_pred_1;
                            _3801 = frontier_phi_78_pred_2;
                            _3800 = frontier_phi_78_pred_3;
                            _3799 = frontier_phi_78_pred_4;
                            _3804 = frontier_phi_78_pred_5;
                            _3509 = _3802 + _3522;
                            _3510 = _3803 + _3523;
                            _3511 = _3804 + _3524;
                            _3506 = _3799 + _3519;
                            _3507 = _3800 + _3520;
                            _3508 = _3801 + _3521;
                            if (_3526 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3526;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3511;
                        frontier_phi_72_pred_1 = _3510;
                        frontier_phi_72_pred_2 = _3509;
                        frontier_phi_72_pred_3 = _3508;
                        frontier_phi_72_pred_4 = _3507;
                        frontier_phi_72_pred_5 = _3506;
                    }
                    _3179 = frontier_phi_72_pred;
                    _3177 = frontier_phi_72_pred_1;
                    _3175 = frontier_phi_72_pred_2;
                    _3173 = frontier_phi_72_pred_3;
                    _3171 = frontier_phi_72_pred_4;
                    _3169 = frontier_phi_72_pred_5;
                    uint _3314 = _3313 + 1u;
                    if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3307 = _3169;
                        _3308 = _3171;
                        _3309 = _3173;
                        _3310 = _3175;
                        _3311 = _3177;
                        _3312 = _3179;
                        _3313 = _3314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3179;
                frontier_phi_60_61_ladder_1 = _3177;
                frontier_phi_60_61_ladder_2 = _3173;
                frontier_phi_60_61_ladder_3 = _3171;
                frontier_phi_60_61_ladder_4 = _3169;
                frontier_phi_60_61_ladder_5 = _3175;
            }
            else
            {
                frontier_phi_60_61_ladder = _3065;
                frontier_phi_60_61_ladder_1 = _3063;
                frontier_phi_60_61_ladder_2 = _3059;
                frontier_phi_60_61_ladder_3 = _3057;
                frontier_phi_60_61_ladder_4 = _3055;
                frontier_phi_60_61_ladder_5 = _3061;
            }
            _3168 = frontier_phi_60_61_ladder_4;
            _3170 = frontier_phi_60_61_ladder_3;
            _3172 = frontier_phi_60_61_ladder_2;
            _3174 = frontier_phi_60_61_ladder_5;
            _3176 = frontier_phi_60_61_ladder_1;
            _3178 = frontier_phi_60_61_ladder;
        }
        float _3183 = isnan(1.0) ? _983 : (isnan(_983) ? 1.0 : min(_983, 1.0));
        _2988 = (_3183 * _3174) + _2519;
        _2990 = (_3183 * _3176) + _2521;
        _2992 = (_3183 * _3178) + _2523;
        _2994 = ((_3168 * 0.039999999105930328369140625) * _3183) + _2842;
        _2996 = ((_3170 * 0.039999999105930328369140625) * _3183) + _2844;
        _2998 = ((_3172 * 0.039999999105930328369140625) * _3183) + _2846;
    }
    else
    {
        _2988 = _2519;
        _2990 = _2521;
        _2992 = _2523;
        _2994 = _2842;
        _2996 = _2844;
        _2998 = _2846;
    }
    float _4935 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4946 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4957 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    uint _3018 = _259 + 6u;
    float _3026 = _920 / cbSceneParam._m0[86u].x;
    float _3027 = _921 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _854 : (isnan(_854) ? cbSceneParam._m0[77u].w : min(_854, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3118;
    float _3120;
    float _3122;
    float _3124;
    if (_854 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_854) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _854 : min(cbSceneParam._m0[80u].w, _854));
        float _3081 = _3080 / _854;
        float _3092 = _3081 * _905;
        float _3093 = _906 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3096 = _3081 * _907;
        float _3098 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3099 = _3098 + cbSceneParam._m0[79u].w;
        float _3100 = cbSceneParam._m0[79u].w - _3093;
        float _3106 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3096 * _3096));
        float _3109 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3106;
        float _3114 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3116 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3269;
        if (abs((_3094 - _3098) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3269 = ((((_3099 > 0.0) ? exp2(_3114 * _3099) : (2.0 - exp2(_3116 * _3099))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3109;
        }
        else
        {
            float _3229 = 1.0 / cbSceneParam._m0[80u].x;
            float _3230 = isnan(_3100) ? _3099 : (isnan(_3099) ? _3100 : max(_3099, _3100));
            float _3231 = isnan(_3100) ? _3099 : (isnan(_3099) ? _3100 : min(_3099, _3100));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            float _3241 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : min(_3231, 0.0));
            _3269 = ((abs(_3106 / _3094) * cbSceneParam._m0[80u].y) * ((((_3240 - _3241) * 2.0) - ((exp2(_3114 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0)))) - exp2(_3114 * (isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0))))) * _3229)) - ((exp2(_3116 * _3240) - exp2(_3116 * _3241)) * _3229))) + (_3109 * cbSceneParam._m0[80u].z);
        }
        vec4 _3271 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3280 = exp2((_3269 * (-1.44269502162933349609375)) * (1.0 - _3271.w));
        float _3281 = log2(_3280);
        float _3297 = log2(_3046);
        _3118 = (exp2(_3297 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].x)) * _3271.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3120 = (exp2(_3297 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].y)) * _3271.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3122 = (exp2(_3297 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].z)) * _3271.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3124 = _3280 * _3046;
    }
    else
    {
        _3118 = _3043;
        _3120 = _3044;
        _3122 = _3045;
        _3124 = _3046;
    }
    float _3136 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3137 = _3136 == 3.0;
    float _3138 = log2(_3124);
    float _3145 = exp2(_3138 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2988 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _983))) + ((_2994 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1787)) * cbPerFrame._m0[3u].x));
    float _3146 = exp2(_3138 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2990 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _983))) + ((_2996 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1787)) * cbPerFrame._m0[3u].x));
    float _3147 = exp2(_3138 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2992 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _983))) + ((_2998 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1787)) * cbPerFrame._m0[3u].x));
    float _3156 = (_3136 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3156 * (_3137 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3118)));
    SV_Target.y = _3156 * (_3137 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3120)));
    SV_Target.z = _3156 * (_3137 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3122)));
    SV_Target.w = cbInstanceData._m0[_3018].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3018].w;
}


