#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1161;
float _3545;
float _3546;
float _3547;
float _3548;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3557 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _376) + _449;
    float _461 = ((((_428.x - _447) * _376) + _447) * 2.0) + (-1.0);
    float _462 = ((((_428.y - _448) * _376) + _448) * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3568 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))));
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _501 = _499.x;
    float _502 = 1.0 - _501;
    float _515 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_501 - _502) * cbMtdParam._m0[24u].z) + _502) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3579 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _523 = (_516 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _524 = (_516 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _525 = (_516 * (cbMtdParam._m0[17u].z - _385)) + _385;
    float _530 = (((_403.z - _458) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _458;
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _550 = (_543.x * 2.0) + (-1.0);
    float _551 = (_543.y * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3590 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _560 = (_516 * (_543.z - _530)) + _530;
    float _565 = _461 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_403.x * 2.0) + (-1.0)));
    float _566 = _462 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_403.y * 2.0) + (-1.0)));
    float _578 = (((_550 - _565) + (cbMtdParam._m0[21u].x * _565)) * _516) + _565;
    float _579 = (((_551 - _566) + (cbMtdParam._m0[21u].x * _566)) * _516) + _566;
    float _580 = (_516 * (sqrt(1.0 - (isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0)))) - _468)) + _468;
    float _585 = cbMtdParam._m0[22u].x + _481.w;
    float _588 = fma(_580, _227 * NORMAL.x, fma(_579, _234 * TANGENT.x, (_220 * _212) * _578));
    float _591 = fma(_580, _227 * NORMAL.y, fma(_579, _234 * TANGENT.y, (_220 * _213) * _578));
    float _594 = fma(_580, _227 * NORMAL.z, fma(_579, _234 * TANGENT.z, (_220 * _214) * _578));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = _598 * _588;
    float _600 = _598 * _591;
    float _601 = _598 * _594;
    float _3601 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _602 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _3612 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3623 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3634 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3645 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _620 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _672 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _662);
    float _673 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _662);
    float _674 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _662);
    float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
    float _679 = _672 * _678;
    float _680 = _673 * _678;
    float _681 = _674 * _678;
    vec4 _686 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _688 = _686.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _842 = sqrt(((_672 * _672) + (_673 * _673)) + (_674 * _674));
        float _848 = (cbMatDynParam._m0[5u].x * _842) + cbMatDynParam._m0[5u].y;
        float _3656 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _853 = (cbMatDynParam._m0[5u].z * _842) + cbMatDynParam._m0[5u].w;
        float _3667 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) - _849)) + _849) < ((_688 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _718 = fma(_601, cbSceneParam._m0[5u].z, fma(_600, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _599));
    float _721 = fma(_601, cbSceneParam._m0[6u].z, fma(_600, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _599));
    float _724 = fma(_601, cbSceneParam._m0[7u].z, fma(_600, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _599));
    uint _737 = _240 + 9u;
    uint _738 = _737 + uint(cbMatDynParam._m0[0u].w);
    float _744 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_738].x;
    float _745 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) * cbInstanceData._m0[_738].y;
    float _746 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_738].z;
    float _3678 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    vec4 _758 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _762 = ((isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * TEXCOORD_5.w) * _758.x;
    float _763 = dot(vec3(_599, _600, _601), vec3(_679, _680, _681));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _599) - _679;
    float _771 = (_766 * _600) - _680;
    float _772 = (_766 * _601) - _681;
    float _776 = abs(dot(vec3(_679, _680, _681), vec3(_599, _600, _601)));
    float _3711 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_602);
    float _791 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1160;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _885 = fma(_831, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823));
        float _889 = fma(_831, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823));
        float _893 = fma(_831, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823));
        float _918 = _823 + _599;
        float _919 = _827 + _600;
        float _920 = _831 + _601;
        float _930 = fma(_920, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918)) - _885;
        float _931 = fma(_920, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918)) - _889;
        float _932 = fma(_920, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918)) - _893;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_885 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_889 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[34u].z) + ((((((_893 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _988 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_954.x + (-0.5));
        float _990 = _988 * (_954.y + (-0.5));
        float _991 = _988 * (_954.z + (-0.5));
        float _998 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_961.x + (-0.5));
        float _1000 = _998 * (_961.y + (-0.5));
        float _1001 = _998 * (_961.z + (-0.5));
        float _1008 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_968.x + (-0.5));
        float _1010 = _1008 * (_968.y + (-0.5));
        float _1011 = _1008 * (_968.z + (-0.5));
        float _1018 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_975.x + (-0.5));
        float _1020 = _1018 * (_975.y + (-0.5));
        float _1021 = _1018 * (_975.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1042 = (dot(vec3(_599, _600, _601), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1052 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3759 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1054 + 1.0))) + _1059) * _1022;
        float _1069 = _990 * 0.5;
        float _1070 = _1000 * 0.5;
        float _1071 = _1010 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_599, _600, _601), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3792 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1096 + 1.0))) + _1101) * _1023;
        float _1111 = _991 * 0.5;
        float _1112 = _1001 * 0.5;
        float _1113 = _1011 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_599, _600, _601), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3825 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1138 + 1.0))) + _1143) * _1024;
        _1160 = _991;
        _1162 = _990;
        _1163 = _989;
        _1164 = _1001;
        _1165 = _1000;
        _1166 = _999;
        _1167 = _1011;
        _1168 = _1010;
        _1169 = _1009;
        _1170 = _1024;
        _1171 = _1023;
        _1172 = _1022;
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _1161;
        _1162 = _1161;
        _1163 = _1161;
        _1164 = _1161;
        _1165 = _1161;
        _1166 = _1161;
        _1167 = _1161;
        _1168 = _1161;
        _1169 = _1161;
        _1170 = _1161;
        _1171 = _1161;
        _1172 = _1161;
        _1173 = 0.0;
        _1174 = 0.0;
        _1175 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_831, cbModelParam._m0[30u].z, fma(_827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _823));
        float _1207 = fma(_831, cbModelParam._m0[31u].z, fma(_827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _823));
        float _1211 = fma(_831, cbModelParam._m0[32u].z, fma(_827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _823));
        float _1234 = _823 + _599;
        float _1235 = _827 + _600;
        float _1236 = _831 + _601;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_599, _600, _601), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3888 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_599, _600, _601), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3921 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_599, _600, _601), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3932 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3943 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3954 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1161;
        _1473 = _1161;
        _1474 = _1161;
        _1475 = _1161;
        _1476 = _1161;
        _1477 = _1161;
        _1478 = _1161;
        _1479 = _1161;
        _1480 = _1161;
        _1481 = _1161;
        _1482 = _1161;
        _1483 = _1161;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1173)) + _1173;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1174)) + _1174;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1175)) + _1175;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _770 * 0.5;
    float _1541 = _771 * 0.5;
    float _1542 = _772 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1160, _1164, _1167, _1170));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1657 = fma(_831, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823)) + cbModelParam._m0[13u].w;
        float _1661 = fma(_831, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823)) + cbModelParam._m0[14u].w;
        float _1665 = fma(_831, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823)) + cbModelParam._m0[15u].w;
        float _1668 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1671 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1674 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1702;
        if (_1668 > 0.0)
        {
            _1702 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1702 = frontier_phi_17_15_ladder;
        }
        float _1924;
        if (_1671 > 0.0)
        {
            _1924 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1924 = frontier_phi_26_22_ladder;
        }
        float _2170;
        if (_1674 > 0.0)
        {
            _2170 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2170 = frontier_phi_38_33_ladder;
        }
        float _2172 = isnan(_1924) ? _1702 : (isnan(_1702) ? _1924 : min(_1702, _1924));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1668) + _1657;
        float _2178 = (_2173 * _1671) + _1661;
        float _2179 = (_2173 * _1674) + _1665;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2180;
        float _2184 = _2180 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 > _2184) || ((_2178 < _2182) || ((_2177 < _2182) || (_2177 > _2184))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2303 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2179, cbModelParam._m0[9u].z, fma(_2178, cbModelParam._m0[9u].y, _2177 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2179, cbModelParam._m0[10u].z, fma(_2178, cbModelParam._m0[10u].y, _2177 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2179, cbModelParam._m0[11u].z, fma(_2178, cbModelParam._m0[11u].y, _2177 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_16_38_ladder = _2303.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2303.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2303.x * cbModelParam._m0[1u].y;
        }
        _1690 = frontier_phi_16_38_ladder_2;
        _1692 = frontier_phi_16_38_ladder_1;
        _1694 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1609);
        _1690 = _1678.x * cbModelParam._m0[1u].y;
        _1692 = _1678.y * cbModelParam._m0[1u].y;
        _1694 = _1678.z * cbModelParam._m0[1u].y;
    }
    float _1698 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1698 : min(cbModelParam._m0[25u].w, _1698));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_831, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_831, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_831, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1767 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1770 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1929;
        if (_1764 > 0.0)
        {
            _1929 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1929 = frontier_phi_28_24_ladder;
        }
        float _2197;
        if (_1767 > 0.0)
        {
            _2197 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2197 = frontier_phi_40_35_ladder;
        }
        float _2402;
        if (_1770 > 0.0)
        {
            _2402 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2402 = frontier_phi_49_46_ladder;
        }
        float _2404 = isnan(_2197) ? _1929 : (isnan(_1929) ? _2197 : min(_1929, _2197));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1764) + _1753;
        float _2410 = (_2405 * _1767) + _1757;
        float _2411 = (_2405 * _1770) + _1761;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2411, cbModelParam._m0[17u].z, fma(_2410, cbModelParam._m0[17u].y, _2409 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2411, cbModelParam._m0[18u].z, fma(_2410, cbModelParam._m0[18u].y, _2409 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2411, cbModelParam._m0[19u].z, fma(_2410, cbModelParam._m0[19u].y, _2409 * cbModelParam._m0[19u].x))), _1699);
            frontier_phi_25_49_ladder = _2610.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2610.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2610.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_25_49_ladder_2;
        _1791 = frontier_phi_25_49_ladder_1;
        _1793 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1699);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1805 = ((((1.0 - _791) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_791 * _778)) * _762;
    float _1806 = _1805 * ((cbModelParam._m0[1u].w * (_1789 - _1690)) + _1690);
    float _1807 = _1805 * ((cbModelParam._m0[1u].w * (_1791 - _1692)) + _1692);
    float _1808 = _1805 * ((cbModelParam._m0[1u].w * (_1793 - _1694)) + _1694);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    vec4 _1825 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_699, _700));
    float _1827 = _1825.w;
    float _1839 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1827);
    float _1840 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1827);
    float _1841 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1827);
    uvec4 _1845 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1847 = _1845.x * 14u;
    uint _1848 = _1847 + 13u;
    float _1855 = _762 + (-1.0);
    float _1860 = (cbLight._m0[_1848].x * _1855) + 1.0;
    float _1861 = (cbLight._m0[_1848].y * _1855) + 1.0;
    float _1862 = (cbLight._m0[_1848].z * _1855) + 1.0;
    float _1863 = (cbLight._m0[_1848].w * _1855) + 1.0;
    uint _1864 = _1847 + 5u;
    float _1870 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
    uint _1874 = _1847 + 4u;
    float _1883 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1887 = _1847 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_599, _600, _601));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_599, _600, _601));
    float _4090 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4101 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1864].x * _1870) * _1908) + (((cbLight._m0[_1874].x * _1839) * _1883) * _1906);
    float _1916 = ((_1870 * cbLight._m0[_1864].y) * _1908) + (((cbLight._m0[_1874].y * _1840) * _1883) * _1906);
    float _1917 = ((_1870 * cbLight._m0[_1864].z) * _1908) + (((cbLight._m0[_1874].z * _1841) * _1883) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1847 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _1934;
    float _1936;
    float _1938;
    if (_1923)
    {
        _1934 = _1915;
        _1936 = _1916;
        _1938 = _1917;
    }
    else
    {
        uint _1942 = _1847 + 6u;
        float _1958 = (dot(vec3(cbLight._m0[_1847 + 2u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _4112 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1961 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _1934 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1915;
        _1936 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1916;
        _1938 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1917;
    }
    bool _1941 = _1921.y == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1941)
    {
        _1979 = _1934;
        _1981 = _1936;
        _1983 = _1938;
    }
    else
    {
        uint _2141 = _1847 + 7u;
        float _2157 = (dot(vec3(cbLight._m0[_1847 + 3u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _2158 = _2157 * _2157;
        float _4128 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2159 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2160 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _1979 = (((cbLight._m0[_2141].x * 0.3183098733425140380859375) * _2159) * _2160) + _1934;
        _1981 = (((cbLight._m0[_2141].y * 0.3183098733425140380859375) * _2159) * _2160) + _1936;
        _1983 = (((cbLight._m0[_2141].z * 0.3183098733425140380859375) * _2159) * _2160) + _1938;
    }
    uint _1986 = _1847 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _602) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1847].x + _679;
    float _2002 = cbLight._m0[_1847].y + _680;
    float _2003 = cbLight._m0[_1847].z + _681;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1847].xyz));
    float _4144 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _2015 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2016 = dot(vec3(_599, _600, _601), vec3(_2008, _2009, _2010));
    float _4166 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2008, _2009, _2010));
    float _4177 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2000;
    float _2051 = (0.5 / (((_2015 * ((_2014 * _2040) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2040) + _2000) * _2014))) * _2014;
    float _4188 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2067 = _1847 + 9u;
    float _2078 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _602) * 0.949999988079071044921875);
    float _2079 = _2078 * _2078;
    float _2080 = cbLight._m0[_1887].x + _679;
    float _2081 = cbLight._m0[_1887].y + _680;
    float _2082 = cbLight._m0[_1887].z + _681;
    float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
    float _2087 = _2086 * _2080;
    float _2088 = _2086 * _2081;
    float _2089 = _2086 * _2082;
    float _2090 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1887].xyz));
    float _4199 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _2094 = dot(vec3(_599, _600, _601), vec3(_2087, _2088, _2089));
    float _4210 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2098 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2087, _2088, _2089));
    float _4221 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = _2079 * _2079;
    float _2106 = ((_2097 * _2097) * (_2102 + (-1.0))) + 1.0;
    float _2115 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2116 = 1.0 - _2079;
    float _2126 = (0.5 / (((_2015 * ((_2093 * _2116) + _2079)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2116) + _2079) * _2093))) * _2093;
    float _4232 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2102 / ((_2106 * _2106) * 3.141590118408203125));
    float _2138 = (((_2115 * cbLight._m0[_2067].x) * _2128) * _1870) + ((((cbLight._m0[_1986].x * _1839) * _2039) * _2053) * _1883);
    float _2139 = (((_2115 * cbLight._m0[_2067].y) * _2128) * _1870) + ((((cbLight._m0[_1986].y * _1840) * _2039) * _2053) * _1883);
    float _2140 = (((_2115 * cbLight._m0[_2067].z) * _2128) * _1870) + ((((cbLight._m0[_1986].z * _1841) * _2039) * _2053) * _1883);
    float _2202;
    float _2204;
    float _2206;
    if (_1923)
    {
        _2202 = _2138;
        _2204 = _2139;
        _2206 = _2140;
    }
    else
    {
        uint _2208 = _1847 + 2u;
        uint _2212 = _1847 + 10u;
        float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _602) * 0.949999988079071044921875);
        float _2227 = _2226 * _2226;
        float _2228 = cbLight._m0[_2208].x + _679;
        float _2229 = cbLight._m0[_2208].y + _680;
        float _2230 = cbLight._m0[_2208].z + _681;
        float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
        float _2235 = _2234 * _2228;
        float _2236 = _2234 * _2229;
        float _2237 = _2234 * _2230;
        float _2238 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2208].xyz));
        float _4243 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2241 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2242 = dot(vec3(_599, _600, _601), vec3(_2235, _2236, _2237));
        float _4254 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2245 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2246 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2235, _2236, _2237));
        float _4265 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2250 = _2227 * _2227;
        float _2254 = ((_2245 * _2245) * (_2250 + (-1.0))) + 1.0;
        float _2263 = (exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2264 = 1.0 - _2227;
        float _2274 = (0.5 / (((_2015 * ((_2241 * _2264) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2264) + _2227) * _2241))) * _2241;
        float _4276 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2276 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2250 / ((_2254 * _2254) * 3.141590118408203125));
        float _2277 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2202 = (((_2263 * cbLight._m0[_2212].x) * _2276) * _2277) + _2138;
        _2204 = (((_2263 * cbLight._m0[_2212].y) * _2276) * _2277) + _2139;
        _2206 = (((_2263 * cbLight._m0[_2212].z) * _2276) * _2277) + _2140;
    }
    float _2312;
    float _2314;
    float _2316;
    if (_1941)
    {
        _2312 = _2202;
        _2314 = _2204;
        _2316 = _2206;
    }
    else
    {
        uint _2323 = _1847 + 3u;
        uint _2327 = _1847 + 11u;
        float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2323].w)) * _602) * 0.949999988079071044921875);
        float _2342 = _2341 * _2341;
        float _2343 = cbLight._m0[_2323].x + _679;
        float _2344 = cbLight._m0[_2323].y + _680;
        float _2345 = cbLight._m0[_2323].z + _681;
        float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
        float _2350 = _2349 * _2343;
        float _2351 = _2349 * _2344;
        float _2352 = _2349 * _2345;
        float _2353 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2323].xyz));
        float _4292 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2357 = dot(vec3(_599, _600, _601), vec3(_2350, _2351, _2352));
        float _4303 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2361 = dot(vec3(cbLight._m0[_2323].xyz), vec3(_2350, _2351, _2352));
        float _4314 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2365 = _2342 * _2342;
        float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
        float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2379 = 1.0 - _2342;
        float _2389 = (0.5 / (((_2015 * ((_2356 * _2379) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2379) + _2342) * _2356))) * _2356;
        float _4325 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
        float _2391 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
        float _2392 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
        _2312 = (((_2378 * cbLight._m0[_2327].x) * _2391) * _2392) + _2202;
        _2314 = (((_2378 * cbLight._m0[_2327].y) * _2391) * _2392) + _2204;
        _2316 = (((_2378 * cbLight._m0[_2327].z) * _2391) * _2392) + _2206;
    }
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    if (_1845.y == 0u)
    {
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2467;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2467;
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2467;
        uvec4 _2482 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2483 = _2482.x;
        uint _2494 = uint((float(_2482.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2483))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2483)));
        float _2504 = (log2(_2470 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2505 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        uint _2508 = uint(isnan(14.0) ? _2505 : (isnan(_2505) ? 14.0 : min(_2505, 14.0)));
        uvec4 _2513 = texelFetch(g_lightClusterGridBuffer, int(((_2508 << 2u) + (_2494 << 6u)) >> 2u));
        uint _2514 = _2513.x;
        uint _2515 = _2482.z;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        if (((((1u << ((_2515 >> 4u) & 15u)) + 4294967295u) & _2514) == 0u) || ((_2515 & 240u) == 0u))
        {
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
        }
        else
        {
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            uint _2774 = 0u;
            uint _2783;
            bool _2784;
            for (;;)
            {
                _2783 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                _2784 = _2783 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2784)
                {
                    frontier_phi_66_pred = _2768;
                    frontier_phi_66_pred_1 = _2773;
                    frontier_phi_66_pred_2 = _2772;
                    frontier_phi_66_pred_3 = _2771;
                    frontier_phi_66_pred_4 = _2770;
                    frontier_phi_66_pred_5 = _2769;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2771;
                    _2917 = _2772;
                    _2918 = _2773;
                    _2919 = _2783;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2774 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2468;
                        float _2980 = _2939.y - _2469;
                        float _2981 = _2939.z - _2470;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_718, _721, _724), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4351 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2468;
                        float _3015 = (-0.0) - _2469;
                        float _3016 = (-0.0) - _2470;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _778;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_718, _721, _724), vec3(_3021, _3022, _3023));
                        float _4367 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3056 = dot(vec3(_718, _721, _724), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4378 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4389 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4400 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2843 = (_3010 * _2958.x) + _2916;
                        _2844 = (_3010 * _2958.y) + _2917;
                        _2845 = (_3010 * _2958.z) + _2918;
                        _2840 = (_3091 * _2975.x) + _2913;
                        _2841 = (_3091 * _2975.y) + _2914;
                        _2842 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2844;
                            _2918 = _2845;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_66_pred = _2840;
                    frontier_phi_66_pred_1 = _2845;
                    frontier_phi_66_pred_2 = _2844;
                    frontier_phi_66_pred_3 = _2843;
                    frontier_phi_66_pred_4 = _2842;
                    frontier_phi_66_pred_5 = _2841;
                }
                _2616 = frontier_phi_66_pred;
                _2626 = frontier_phi_66_pred_1;
                _2624 = frontier_phi_66_pred_2;
                _2622 = frontier_phi_66_pred_3;
                _2620 = frontier_phi_66_pred_4;
                _2618 = frontier_phi_66_pred_5;
                uint _2775 = _2774 + 1u;
                if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2768 = _2616;
                    _2769 = _2618;
                    _2770 = _2620;
                    _2771 = _2622;
                    _2772 = _2624;
                    _2773 = _2626;
                    _2774 = _2775;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
        }
        uvec4 _2629 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2630 = _2629.z;
        uint _2632 = (_2630 >> 8u) & 15u;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((4294967295u << _2632) & _2514) == 0u)
        {
            _2736 = _2615;
            _2738 = _2617;
            _2740 = _2619;
            _2742 = _2621;
            _2744 = _2623;
            _2746 = _2625;
        }
        else
        {
            float _2761 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
            float _2762 = _2761 * _2468;
            float _2763 = _2761 * _2469;
            float _2764 = _2761 * _2470;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2632 < ((_2630 >> 12u) & 15u))
            {
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2896 = _2615;
                float _2897 = _2617;
                float _2898 = _2619;
                float _2899 = _2621;
                float _2900 = _2623;
                float _2901 = _2625;
                uint _2902 = _2632;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2508 << 5u) + (_2494 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2912)
                    {
                        frontier_phi_77_pred = _2901;
                        frontier_phi_77_pred_1 = _2900;
                        frontier_phi_77_pred_2 = _2899;
                        frontier_phi_77_pred_3 = _2898;
                        frontier_phi_77_pred_4 = _2897;
                        frontier_phi_77_pred_5 = _2896;
                    }
                    else
                    {
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3403;
                        float _3118 = _2896;
                        float _3119 = _2897;
                        float _3120 = _2898;
                        float _3121 = _2899;
                        float _3122 = _2900;
                        float _3123 = _2901;
                        uint _3124 = _2911;
                        uint _3125;
                        vec4 _3150;
                        float _3151;
                        vec4 _3166;
                        vec3 _3178;
                        vec4 _3193;
                        vec4 _3208;
                        float _3254;
                        bool _3255;
                        for (;;)
                        {
                            uint _3135 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3124));
                            _3125 = (_3124 + 4294967295u) & _3124;
                            uint _3137 = _3135 * 40u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3151 = _3150.w;
                            uint _3153 = (_3135 * 40u) + 4u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3168 = (_3135 * 40u) + 8u;
                            _3178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x));
                            uint _3180 = (_3135 * 40u) + 16u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3135 * 40u) + 20u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3210 = (_3135 * 40u) + 24u;
                            vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 3u)).x));
                            uint _3229 = (_3135 * 40u) + 28u;
                            vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3254 = fma(_2470, _3242.z, fma(_2469, _3242.y, _3242.x * _2468)) + _3242.w;
                            _3255 = !((fma(_2470, _3223.z, fma(_2469, _3223.y, _3223.x * _2468)) + _3223.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3255)
                            {
                                float _3282 = _3150.x - _2468;
                                float _3283 = _3150.y - _2469;
                                float _3284 = _3150.z - _2470;
                                float _3285 = dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284));
                                float _3288 = inversesqrt(_3285);
                                float _3289 = _3288 * _3282;
                                float _3290 = _3288 * _3283;
                                float _3291 = _3288 * _3284;
                                float _3295 = 1.0 - (_3285 / (_3151 * _3151));
                                float _4411 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3300 = sqrt(_3285) * _3166.w;
                                float _3302 = 1.39999997615814208984375 / (_3300 + 1.39999997615814208984375);
                                float _3303 = _3302 * _3302;
                                float _3306 = ((1.0 - _3303) * dot(vec3(_3289, _3290, _3291), vec3(_718, _721, _724))) + _3303;
                                float _3309 = _3300 * _3300;
                                float _3313 = (fma(_2470, _3193.z, fma(_2469, _3193.y, _3193.x * _2468)) + _3193.w) / _3254;
                                float _3314 = (fma(_2470, _3208.z, fma(_2469, _3208.y, _3208.x * _2468)) + _3208.w) / _3254;
                                float _3318 = 1.0 - dot(vec2(_3313, _3314), vec2(_3313, _3314));
                                float _4427 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3320 = _3319 * (((isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0))) * _3296) / ((_3309 * 0.699999988079071044921875) + 1.0));
                                float _3332 = exp2(log2(1.0 / ((_3309 * 3.5) + 5.0)) * 0.25);
                                float _3333 = 1.0 - _778;
                                float _3340 = sqrt(1.0 - ((1.0 - (_3333 * _3333)) * (1.0 - (_3332 * _3332))));
                                float _3341 = _3340 * _3340;
                                float _3342 = _3341 * _3341;
                                float _3343 = _3289 - _2762;
                                float _3344 = _3290 - _2763;
                                float _3345 = _3291 - _2764;
                                float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                                float _3353 = dot(vec3(_718, _721, _724), vec3((-0.0) - _2762, (-0.0) - _2763, (-0.0) - _2764));
                                float _4438 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3356 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3357 = dot(vec3(_718, _721, _724), vec3(_3349 * _3343, _3349 * _3344, _3349 * _3345));
                                float _4449 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3360 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3364 = ((_3360 * _3360) * (_3342 + (-1.0))) + 1.0;
                                float _3365 = _3302 * _3341;
                                float _3366 = _3365 * _3365;
                                float _3372 = ((1.0 - _3366) * dot(vec3(_718, _721, _724), vec3(_3289, _3290, _3291))) + _3366;
                                float _4460 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3374 = 1.0 - _3341;
                                float _3384 = (0.5 / (((_3373 * ((_3356 * _3374) + _3341)) + 9.9999999392252902907785028219223e-09) + (((_3373 * _3374) + _3341) * _3356))) * _3373;
                                float _4471 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3394 = (_3319 * _3296) * (((_3342 * 3.1415927410125732421875) * (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) / ((_3364 * _3364) * ((_3309 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3320 * _3166.y;
                                frontier_phi_83_pred_1 = _3320 * _3166.x;
                                frontier_phi_83_pred_2 = _3394 * _3178.z;
                                frontier_phi_83_pred_3 = _3394 * _3178.y;
                                frontier_phi_83_pred_4 = _3394 * _3178.x;
                                frontier_phi_83_pred_5 = _3320 * _3166.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_83_pred;
                            _3401 = frontier_phi_83_pred_1;
                            _3400 = frontier_phi_83_pred_2;
                            _3399 = frontier_phi_83_pred_3;
                            _3398 = frontier_phi_83_pred_4;
                            _3403 = frontier_phi_83_pred_5;
                            _3108 = _3401 + _3121;
                            _3109 = _3402 + _3122;
                            _3110 = _3403 + _3123;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            if (_3125 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3108;
                                _3122 = _3109;
                                _3123 = _3110;
                                _3124 = _3125;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3110;
                        frontier_phi_77_pred_1 = _3109;
                        frontier_phi_77_pred_2 = _3108;
                        frontier_phi_77_pred_3 = _3107;
                        frontier_phi_77_pred_4 = _3106;
                        frontier_phi_77_pred_5 = _3105;
                    }
                    _2747 = frontier_phi_77_pred;
                    _2745 = frontier_phi_77_pred_1;
                    _2743 = frontier_phi_77_pred_2;
                    _2741 = frontier_phi_77_pred_3;
                    _2739 = frontier_phi_77_pred_4;
                    _2737 = frontier_phi_77_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2737;
                        _2897 = _2739;
                        _2898 = _2741;
                        _2899 = _2743;
                        _2900 = _2745;
                        _2901 = _2747;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2741;
                frontier_phi_58_59_ladder_1 = _2747;
                frontier_phi_58_59_ladder_2 = _2745;
                frontier_phi_58_59_ladder_3 = _2743;
                frontier_phi_58_59_ladder_4 = _2739;
                frontier_phi_58_59_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_58_59_ladder = _2619;
                frontier_phi_58_59_ladder_1 = _2625;
                frontier_phi_58_59_ladder_2 = _2623;
                frontier_phi_58_59_ladder_3 = _2621;
                frontier_phi_58_59_ladder_4 = _2617;
                frontier_phi_58_59_ladder_5 = _2615;
            }
            _2736 = frontier_phi_58_59_ladder_5;
            _2738 = frontier_phi_58_59_ladder_4;
            _2740 = frontier_phi_58_59_ladder;
            _2742 = frontier_phi_58_59_ladder_3;
            _2744 = frontier_phi_58_59_ladder_2;
            _2746 = frontier_phi_58_59_ladder_1;
        }
        float _2751 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2527 = (_2751 * _2742) + _1979;
        _2529 = (_2751 * _2744) + _1981;
        _2531 = (_2751 * _2746) + _1983;
        _2533 = ((_2736 * 0.039999999105930328369140625) * _2751) + _2312;
        _2535 = ((_2738 * 0.039999999105930328369140625) * _2751) + _2314;
        _2537 = ((_2740 * 0.039999999105930328369140625) * _2751) + _2316;
    }
    else
    {
        _2527 = _1979;
        _2529 = _1981;
        _2531 = _1983;
        _2533 = _2312;
        _2535 = _2314;
        _2537 = _2316;
    }
    float _4487 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4498 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4509 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2554 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2527 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _762))) + ((_2533 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2555 = ((isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_2529 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _762))) + ((_2535 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2556 = ((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2531 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _762))) + ((_2537 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    uint _2557 = _240 + 6u;
    float _2565 = _699 / cbSceneParam._m0[86u].x;
    float _2566 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2580 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, (log2((isnan(cbSceneParam._m0[77u].w) ? _620 : (isnan(_620) ? cbSceneParam._m0[77u].w : min(_620, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2582 = _2580.x;
    float _2583 = _2580.y;
    float _2584 = _2580.z;
    float _2585 = _2580.w;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    if (_620 > cbSceneParam._m0[78u].w)
    {
        float _2640 = isnan(_620) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _620 : min(cbSceneParam._m0[80u].w, _620));
        float _2641 = _2640 / _620;
        float _2652 = _2641 * _672;
        float _2653 = _673 * _2641;
        float _2654 = (-0.0) - _2653;
        float _2656 = _2641 * _674;
        float _2658 = (cbSceneParam._m0[77u].w * _2654) / _2640;
        float _2659 = _2658 + cbSceneParam._m0[79u].w;
        float _2660 = cbSceneParam._m0[79u].w - _2653;
        float _2666 = sqrt(((_2652 * _2652) + (_2653 * _2653)) + (_2656 * _2656));
        float _2669 = (1.0 - (cbSceneParam._m0[77u].w / _2640)) * _2666;
        float _2674 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2676 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2853;
        if (abs((_2654 - _2658) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2853 = ((((_2659 > 0.0) ? exp2(_2674 * _2659) : (2.0 - exp2(_2676 * _2659))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2669;
        }
        else
        {
            float _2797 = 1.0 / cbSceneParam._m0[80u].x;
            float _2798 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : max(_2659, _2660));
            float _2799 = isnan(_2660) ? _2659 : (isnan(_2659) ? _2660 : min(_2659, _2660));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            _2853 = ((abs(_2666 / _2654) * cbSceneParam._m0[80u].y) * ((((_2808 - _2809) * 2.0) - ((exp2(_2674 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0)))) - exp2(_2674 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))))) * _2797)) - ((exp2(_2676 * _2808) - exp2(_2676 * _2809)) * _2797))) + (_2669 * cbSceneParam._m0[80u].z);
        }
        vec4 _2855 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2565, _2566, 1.0), 0.0);
        float _2864 = exp2((_2853 * (-1.44269502162933349609375)) * (1.0 - _2855.w));
        float _2865 = log2(_2864);
        float _2881 = log2(_2585);
        _2678 = (exp2(_2881 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].x)) * _2855.x) / cbSceneParam._m0[78u].x)) + _2582;
        _2680 = (exp2(_2881 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].y)) * _2855.y) / cbSceneParam._m0[78u].y)) + _2583;
        _2682 = (exp2(_2881 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].z)) * _2855.z) / cbSceneParam._m0[78u].z)) + _2584;
        _2684 = _2864 * _2585;
    }
    else
    {
        _2678 = _2582;
        _2680 = _2583;
        _2682 = _2584;
        _2684 = _2585;
    }
    bool _2891;
    vec4 _2694;
    vec4 _2716;
    float _2718;
    float _2722;
    float _2723;
    float _2724;
    float _2725;
    bool _2735;
    for (;;)
    {
        _2694 = cbMatDynParam._m0[0u];
        float _2696 = roundEven(_2694.y);
        bool _2697 = _2696 == 3.0;
        float _2698 = log2(_2684);
        float _2705 = exp2(_2698 * cbSceneParam._m0[78u].x) * _2554;
        float _2706 = exp2(_2698 * cbSceneParam._m0[78u].y) * _2555;
        float _2707 = exp2(_2698 * cbSceneParam._m0[78u].z) * _2556;
        float _2714 = _688 + (-0.5);
        _2716 = cbMtdParam._m0[1u];
        _2718 = _2716.y * _2714;
        float _2721 = (_2696 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2722 = _2721 * (_2697 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2678)));
        _2723 = _2721 * (_2697 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2680)));
        _2724 = _2721 * (_2697 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2682)));
        _2725 = _2714 * 0.999000012874603271484375;
        _2735 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2735)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2725) < 0.5)
            {
                _2891 = true;
                break;
            }
        }
        uint _2832 = _737 + uint(_2694.w);
        if ((cbInstanceData._m0[_2832].w < 1.0) && ((cbInstanceData._m0[_2832].w + _2725) < 0.5))
        {
            _2891 = true;
            break;
        }
        if ((_2718 + 1.0) < _2716.x)
        {
            _2891 = true;
            break;
        }
        _2891 = false;
        break;
    }
    float _3096;
    if (_2891)
    {
        discard_state = true;
        _3096 = 0.0;
    }
    else
    {
        _3096 = cbInstanceData._m0[_2557].w;
    }
    SV_Target.x = _2722;
    SV_Target.y = _2723;
    SV_Target.z = _2724;
    SV_Target.w = _3096;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2557].w;
    discard_exit();
}


