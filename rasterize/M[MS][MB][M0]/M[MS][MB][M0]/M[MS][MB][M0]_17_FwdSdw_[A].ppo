#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1106;
float _3753;
float _3754;
float _3755;
float _3756;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _310 = _306.z;
    float _315 = (_306.x * 2.0) + (-1.0);
    float _317 = (_306.y * 2.0) + (-1.0);
    float _318 = dot(vec2(_315, _317), vec2(_315, _317));
    float _3765 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _324 = sqrt(1.0 - (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _343 = _341.x;
    float _344 = 1.0 - _343;
    float _353 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _356 = ((isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : min(_353, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _365 = (_356 - ((((((_343 - _344) * cbMtdParam._m0[24u].z) + _344) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _356))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3786 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _373 = (_366 * (cbMtdParam._m0[17u].x - _286)) + _286;
    float _374 = (_366 * (cbMtdParam._m0[17u].y - _287)) + _287;
    float _375 = (_366 * (cbMtdParam._m0[17u].z - _288)) + _288;
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _390 = _388.x;
    float _391 = 1.0 - _390;
    float _420 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_390 - _391) * cbMtdParam._m0[24u].w) + _391) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3797 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _429 = ((((cbMtdParam._m0[10u].x - _373) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _421) + _373;
    float _430 = ((((cbMtdParam._m0[10u].y - _374) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _421) + _374;
    float _431 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _375)) * _421) + _375;
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _452 = (_445.x * 2.0) + (-1.0);
    float _453 = (_445.y * 2.0) + (-1.0);
    float _454 = dot(vec2(_452, _453), vec2(_452, _453));
    float _3808 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _462 = (_366 * (_445.z - _310)) + _310;
    float _465 = ((cbMtdParam._m0[23u].y - _462) * _421) + _462;
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _493 = (_487.x * 2.0) + (-1.0);
    float _494 = (_487.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3819 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _512 = (((_452 - _315) + (cbMtdParam._m0[21u].x * _315)) * _366) + _315;
    float _513 = (((_453 - _317) + (cbMtdParam._m0[21u].x * _317)) * _366) + _317;
    float _514 = (_366 * (sqrt(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) - _324)) + _324;
    float _525 = (((_493 - _512) + (_512 * cbMtdParam._m0[22u].z)) * _421) + _512;
    float _526 = (((_494 - _513) + (_513 * cbMtdParam._m0[22u].z)) * _421) + _513;
    float _527 = ((sqrt(1.0 - (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) - _514) * _421) + _514;
    float _529 = cbMtdParam._m0[22u].x + _306.w;
    float _532 = fma(_527, _228 * NORMAL.x, fma(_526, _235 * TANGENT.x, (_221 * _213) * _525));
    float _535 = fma(_527, _228 * NORMAL.y, fma(_526, _235 * TANGENT.y, (_221 * _214) * _525));
    float _538 = fma(_527, _228 * NORMAL.z, fma(_526, _235 * TANGENT.z, (_221 * _215) * _525));
    float _542 = inversesqrt(dot(vec3(_532, _535, _538), vec3(_532, _535, _538)));
    float _543 = _542 * _532;
    float _544 = _542 * _535;
    float _545 = _542 * _538;
    float _3830 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _546 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _3852 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3863 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3874 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    vec4 _628 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _630 = _628.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _787 = sqrt(((_614 * _614) + (_615 * _615)) + (_616 * _616));
        float _793 = (cbMatDynParam._m0[5u].x * _787) + cbMatDynParam._m0[5u].y;
        float _3885 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _798 = (cbMatDynParam._m0[5u].z * _787) + cbMatDynParam._m0[5u].w;
        float _3896 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) - _794)) + _794) < ((_630 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _642 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _643 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _663 = fma(_545, cbSceneParam._m0[5u].z, fma(_544, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _543));
    float _666 = fma(_545, cbSceneParam._m0[6u].z, fma(_544, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _543));
    float _669 = fma(_545, cbSceneParam._m0[7u].z, fma(_544, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _543));
    uint _682 = _241 + 9u;
    uint _683 = _682 + uint(cbMatDynParam._m0[0u].w);
    float _689 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * cbInstanceData._m0[_683].x;
    float _690 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) * cbInstanceData._m0[_683].y;
    float _691 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * cbInstanceData._m0[_683].z;
    float _3907 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _3918 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _3929 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    vec4 _703 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _642, cbSceneParam._m0[86u].y * _643));
    float _707 = ((isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * TEXCOORD_5.w) * _703.x;
    float _708 = dot(vec3(_543, _544, _545), vec3(_621, _622, _623));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _543) - _621;
    float _716 = (_711 * _544) - _622;
    float _717 = (_711 * _545) - _623;
    float _721 = abs(dot(vec3(_621, _622, _623), vec3(_543, _544, _545)));
    float _3940 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_546);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1105;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _830 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _834 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _838 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _863 = _768 + _543;
        float _864 = _772 + _544;
        float _865 = _776 + _545;
        float _875 = fma(_865, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863)) - _830;
        float _876 = fma(_865, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863)) - _834;
        float _877 = fma(_865, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863)) - _838;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_830 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_834 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[34u].z) + ((((((_838 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _933 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_899.x + (-0.5));
        float _935 = _933 * (_899.y + (-0.5));
        float _936 = _933 * (_899.z + (-0.5));
        float _943 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_906.x + (-0.5));
        float _945 = _943 * (_906.y + (-0.5));
        float _946 = _943 * (_906.z + (-0.5));
        float _953 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_913.x + (-0.5));
        float _955 = _953 * (_913.y + (-0.5));
        float _956 = _953 * (_913.z + (-0.5));
        float _963 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_920.x + (-0.5));
        float _965 = _963 * (_920.y + (-0.5));
        float _966 = _963 * (_920.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _987 = (dot(vec3(_543, _544, _545), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _997 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3988 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_999 + 1.0))) + _1004) * _967;
        float _1014 = _935 * 0.5;
        float _1015 = _945 * 0.5;
        float _1016 = _955 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_543, _544, _545), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _4021 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1041 + 1.0))) + _1046) * _968;
        float _1056 = _936 * 0.5;
        float _1057 = _946 * 0.5;
        float _1058 = _956 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_543, _544, _545), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _4054 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1083 + 1.0))) + _1088) * _969;
        _1105 = _936;
        _1107 = _935;
        _1108 = _934;
        _1109 = _946;
        _1110 = _945;
        _1111 = _944;
        _1112 = _956;
        _1113 = _955;
        _1114 = _954;
        _1115 = _969;
        _1116 = _968;
        _1117 = _967;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _1106;
        _1107 = _1106;
        _1108 = _1106;
        _1109 = _1106;
        _1110 = _1106;
        _1111 = _1106;
        _1112 = _1106;
        _1113 = _1106;
        _1114 = _1106;
        _1115 = _1106;
        _1116 = _1106;
        _1117 = _1106;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1152 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1156 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1179 = _768 + _543;
        float _1180 = _772 + _544;
        float _1181 = _776 + _545;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_543, _544, _545), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _4117 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_543, _544, _545), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _4150 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_543, _544, _545), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _4183 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1106;
        _1418 = _1106;
        _1419 = _1106;
        _1420 = _1106;
        _1421 = _1106;
        _1422 = _1106;
        _1423 = _1106;
        _1424 = _1106;
        _1425 = _1106;
        _1426 = _1106;
        _1427 = _1106;
        _1428 = _1106;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1118)) + _1118;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1119)) + _1119;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1120)) + _1120;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _715 * 0.5;
    float _1486 = _716 * 0.5;
    float _1487 = _717 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1105, _1109, _1112, _1115));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _546);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1616 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1619 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1647 = frontier_phi_17_15_ladder;
        }
        float _1818;
        if (_1616 > 0.0)
        {
            _1818 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1818 = frontier_phi_26_22_ladder;
        }
        float _2114;
        if (_1619 > 0.0)
        {
            _2114 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2114 = frontier_phi_38_33_ladder;
        }
        float _2116 = isnan(_1818) ? _1647 : (isnan(_1647) ? _1818 : min(_1647, _1818));
        float _2117 = isnan(_2114) ? _2116 : (isnan(_2116) ? _2114 : min(_2116, _2114));
        float _2121 = (_2117 * _1613) + _1602;
        float _2122 = (_2117 * _1616) + _1606;
        float _2123 = (_2117 * _1619) + _1610;
        float _2124 = _2117 * 9.9999997473787516355514526367188e-05;
        float _2126 = (-1.0) - _2124;
        float _2128 = _2124 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2123 > _2128) || ((_2123 < _2126) || ((_2122 > _2128) || ((_2122 < _2126) || ((_2121 < _2126) || (_2121 > _2128))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2268 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2123, cbModelParam._m0[9u].z, fma(_2122, cbModelParam._m0[9u].y, _2121 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2123, cbModelParam._m0[10u].z, fma(_2122, cbModelParam._m0[10u].y, _2121 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2123, cbModelParam._m0[11u].z, fma(_2122, cbModelParam._m0[11u].y, _2121 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_16_38_ladder = _2268.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2268.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2268.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_16_38_ladder_2;
        _1637 = frontier_phi_16_38_ladder_1;
        _1639 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1554);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _546);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1698 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1702 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1706 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1709 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1712 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1715 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1823;
        if (_1709 > 0.0)
        {
            _1823 = abs((1.0 - _1698) / _1709);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1698 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1823 = frontier_phi_28_24_ladder;
        }
        float _2141;
        if (_1712 > 0.0)
        {
            _2141 = abs((1.0 - _1702) / _1712);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1702 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2141 = frontier_phi_40_35_ladder;
        }
        float _2468;
        if (_1715 > 0.0)
        {
            _2468 = abs((1.0 - _1706) / _1715);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1706 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2468 = frontier_phi_50_47_ladder;
        }
        float _2470 = isnan(_2141) ? _1823 : (isnan(_1823) ? _2141 : min(_1823, _2141));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1709) + _1698;
        float _2476 = (_2471 * _1712) + _1702;
        float _2477 = (_2471 * _1715) + _1706;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_25_50_ladder = _2595.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2595.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2595.x * cbModelParam._m0[1u].z;
        }
        _1734 = frontier_phi_25_50_ladder_2;
        _1736 = frontier_phi_25_50_ladder_1;
        _1738 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1644);
        _1734 = _1718.x * cbModelParam._m0[1u].z;
        _1736 = _1718.y * cbModelParam._m0[1u].z;
        _1738 = _1718.z * cbModelParam._m0[1u].z;
    }
    float _1750 = ((((1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_736 * _723)) * _707;
    float _1751 = _1750 * ((cbModelParam._m0[1u].w * (_1734 - _1635)) + _1635);
    float _1752 = _1750 * ((cbModelParam._m0[1u].w * (_1736 - _1637)) + _1637);
    float _1753 = _1750 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1756 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1751 * cbSceneParam._m0[91u].x));
    float _1797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1801 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1805 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1810 = _1797 / _1809;
    float _1811 = _1801 / _1809;
    float _1812 = _1805 / _1809;
    float _1959;
    float _1960;
    float _1961;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1839 = ((uint(_1812 > cbSceneParam._m0[59u].y) + uint(_1812 > cbSceneParam._m0[59u].x)) + uint(_1812 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1840 = _1839 + 43u;
        uint _1848 = _1839 + 44u;
        uint _1856 = _1839 + 45u;
        uint _1864 = _1839 + 46u;
        float _1875 = fma(_1809, cbSceneParam._m0[_1840].w, fma(_1805, cbSceneParam._m0[_1840].z, fma(_1801, cbSceneParam._m0[_1840].y, _1797 * cbSceneParam._m0[_1840].x)));
        float _1879 = fma(_1809, cbSceneParam._m0[_1848].w, fma(_1805, cbSceneParam._m0[_1848].z, fma(_1801, cbSceneParam._m0[_1848].y, _1797 * cbSceneParam._m0[_1848].x)));
        float _1887 = fma(_1809, cbSceneParam._m0[_1864].w, fma(_1805, cbSceneParam._m0[_1864].z, fma(_1801, cbSceneParam._m0[_1864].y, _1797 * cbSceneParam._m0[_1864].x)));
        float _1892 = cbSceneParam._m0[33u].z * _1887;
        float _1894 = cbSceneParam._m0[33u].w * _1887;
        float _1897 = fma(_1809, cbSceneParam._m0[_1856].w, fma(_1805, cbSceneParam._m0[_1856].z, fma(_1801, cbSceneParam._m0[_1856].y, _1797 * cbSceneParam._m0[_1856].x))) / _1887;
        float _1945 = (cbSceneParam._m0[33u].x - sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812))) * cbSceneParam._m0[33u].y;
        float _4309 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1952 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 + _1875) / _1887, (_1894 + _1879) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1894 + _1875) / _1887, (_1879 - _1892) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 - _1892) / _1887, (_1879 - _1894) / _1887), _1897), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 - _1894) / _1887, (_1892 + _1879) / _1887), _1897), 0.0)).x), vec4(0.25)));
        _1959 = 1.0 - (_1952 * cbSceneParam._m0[34u].x);
        _1960 = 1.0 - (_1952 * cbSceneParam._m0[34u].y);
        _1961 = 1.0 - (_1952 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1959 = 1.0;
        _1960 = 1.0;
        _1961 = 1.0;
    }
    float _2025;
    float _2027;
    float _2029;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2013 = fma(_1809, cbSceneParam._m0[63u].w, fma(_1805, cbSceneParam._m0[63u].z, fma(_1801, cbSceneParam._m0[63u].y, _1797 * cbSceneParam._m0[63u].x)));
        float _2014 = fma(_1809, cbSceneParam._m0[60u].w, fma(_1805, cbSceneParam._m0[60u].z, fma(_1801, cbSceneParam._m0[60u].y, _1797 * cbSceneParam._m0[60u].x))) / _2013;
        float _2015 = fma(_1809, cbSceneParam._m0[61u].w, fma(_1805, cbSceneParam._m0[61u].z, fma(_1801, cbSceneParam._m0[61u].y, _1797 * cbSceneParam._m0[61u].x))) / _2013;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2014 >= cbSceneParam._m0[64u].x) && (_2015 >= cbSceneParam._m0[64u].y)) && (_2014 <= cbSceneParam._m0[64u].z)) && (_2015 <= cbSceneParam._m0[64u].w))
        {
            float _2154 = fma(_1809, cbSceneParam._m0[62u].w, fma(_1805, cbSceneParam._m0[62u].z, fma(_1801, cbSceneParam._m0[62u].y, _1797 * cbSceneParam._m0[62u].x))) / _2013;
            float _2158 = isnan(cbSceneParam._m0[41u].w) ? _2154 : (isnan(_2154) ? cbSceneParam._m0[41u].w : max(_2154, cbSceneParam._m0[41u].w));
            float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_1811 * _1811) + (_1810 * _1810)) + (_1812 * _1812))) * cbSceneParam._m0[33u].y;
            float _4325 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
            float _2208 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2014, cbSceneParam._m0[33u].w + _2015), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2014, _2015 - cbSceneParam._m0[33u].z), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2014 - cbSceneParam._m0[33u].z, _2015 - cbSceneParam._m0[33u].w), _2158), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2014 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2015), _2158), 0.0)).x), vec4(0.25)));
            float _2212 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
            float _2213 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
            float _2214 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2214) ? _1961 : (isnan(_1961) ? _2214 : min(_1961, _2214));
            frontier_phi_37_36_ladder_1 = isnan(_2213) ? _1960 : (isnan(_1960) ? _2213 : min(_1960, _2213));
            frontier_phi_37_36_ladder_2 = isnan(_2212) ? _1959 : (isnan(_1959) ? _2212 : min(_1959, _2212));
        }
        else
        {
            frontier_phi_37_36_ladder = _1961;
            frontier_phi_37_36_ladder_1 = _1960;
            frontier_phi_37_36_ladder_2 = _1959;
        }
        _2025 = frontier_phi_37_36_ladder_2;
        _2027 = frontier_phi_37_36_ladder_1;
        _2029 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2025 = _1959;
        _2027 = _1960;
        _2029 = _1961;
    }
    uvec4 _2034 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _2036 = _2034.x * 14u;
    uint _2037 = _2036 + 13u;
    float _2044 = _707 + (-1.0);
    float _2049 = (cbLight._m0[_2037].x * _2044) + 1.0;
    float _2050 = (cbLight._m0[_2037].y * _2044) + 1.0;
    float _2051 = (cbLight._m0[_2037].z * _2044) + 1.0;
    float _2052 = (cbLight._m0[_2037].w * _2044) + 1.0;
    uint _2053 = _2036 + 5u;
    float _2059 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2063 = _2036 + 4u;
    float _2073 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2077 = _2036 | 1u;
    float _2088 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_543, _544, _545));
    float _2091 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_543, _544, _545));
    float _4361 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _4372 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2096 = (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.3183098733425140380859375;
    float _2098 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * 0.3183098733425140380859375;
    float _2105 = ((cbLight._m0[_2053].x * _2059) * _2098) + (((cbLight._m0[_2063].x * _2025) * _2073) * _2096);
    float _2106 = ((_2059 * cbLight._m0[_2053].y) * _2098) + (((cbLight._m0[_2063].y * _2027) * _2073) * _2096);
    float _2107 = ((_2059 * cbLight._m0[_2053].z) * _2098) + (((cbLight._m0[_2063].z * _2029) * _2073) * _2096);
    uvec4 _2111 = floatBitsToUint(cbLight._m0[_2036 + 12u]);
    bool _2113 = _2111.x == 0u;
    float _2215;
    float _2217;
    float _2219;
    if (_2113)
    {
        _2215 = _2105;
        _2217 = _2106;
        _2219 = _2107;
    }
    else
    {
        uint _2223 = _2036 + 6u;
        float _2239 = (dot(vec3(cbLight._m0[_2036 + 2u].xyz), vec3(_543, _544, _545)) * 0.5) + 0.5;
        float _2240 = _2239 * _2239;
        float _4383 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2241 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2242 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2215 = (((cbLight._m0[_2223].x * 0.3183098733425140380859375) * _2241) * _2242) + _2105;
        _2217 = (((cbLight._m0[_2223].y * 0.3183098733425140380859375) * _2241) * _2242) + _2106;
        _2219 = (((cbLight._m0[_2223].z * 0.3183098733425140380859375) * _2241) * _2242) + _2107;
    }
    bool _2222 = _2111.y == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2222)
    {
        _2277 = _2215;
        _2279 = _2217;
        _2281 = _2219;
    }
    else
    {
        uint _2439 = _2036 + 7u;
        float _2455 = (dot(vec3(cbLight._m0[_2036 + 3u].xyz), vec3(_543, _544, _545)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4399 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2458 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2277 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2215;
        _2279 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2217;
        _2281 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2219;
    }
    uint _2284 = _2036 + 8u;
    float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _546) * 0.949999988079071044921875);
    float _2298 = _2297 * _2297;
    float _2299 = cbLight._m0[_2036].x + _621;
    float _2300 = cbLight._m0[_2036].y + _622;
    float _2301 = cbLight._m0[_2036].z + _623;
    float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
    float _2306 = _2305 * _2299;
    float _2307 = _2305 * _2300;
    float _2308 = _2305 * _2301;
    float _2309 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2036].xyz));
    float _4415 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2313 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    float _2314 = dot(vec3(_543, _544, _545), vec3(_2306, _2307, _2308));
    float _4437 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2306, _2307, _2308));
    float _4448 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2298 * _2298;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2338 = 1.0 - _2298;
    float _2349 = (0.5 / (((_2313 * ((_2312 * _2338) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2338) + _2298) * _2312))) * _2312;
    float _4459 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2351 = (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    uint _2365 = _2036 + 9u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _546) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2077].x + _621;
    float _2379 = cbLight._m0[_2077].y + _622;
    float _2380 = cbLight._m0[_2077].z + _623;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2077].xyz));
    float _4470 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2392 = dot(vec3(_543, _544, _545), vec3(_2385, _2386, _2387));
    float _4481 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2395 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
    float _2396 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2385, _2386, _2387));
    float _4492 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2400 = _2377 * _2377;
    float _2404 = ((_2395 * _2395) * (_2400 + (-1.0))) + 1.0;
    float _2413 = (exp2(log2(1.0 - (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2414 = 1.0 - _2377;
    float _2424 = (0.5 / (((_2313 * ((_2391 * _2414) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2414) + _2377) * _2391))) * _2391;
    float _4503 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2426 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2400 / ((_2404 * _2404) * 3.141590118408203125));
    float _2436 = (((_2413 * cbLight._m0[_2365].x) * _2426) * _2059) + ((((cbLight._m0[_2284].x * _2025) * _2337) * _2351) * _2073);
    float _2437 = (((_2413 * cbLight._m0[_2365].y) * _2426) * _2059) + ((((cbLight._m0[_2284].y * _2027) * _2337) * _2351) * _2073);
    float _2438 = (((_2413 * cbLight._m0[_2365].z) * _2426) * _2059) + ((((cbLight._m0[_2284].z * _2029) * _2337) * _2351) * _2073);
    float _2494;
    float _2496;
    float _2498;
    if (_2113)
    {
        _2494 = _2436;
        _2496 = _2437;
        _2498 = _2438;
    }
    else
    {
        uint _2500 = _2036 + 2u;
        uint _2504 = _2036 + 10u;
        float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _546) * 0.949999988079071044921875);
        float _2519 = _2518 * _2518;
        float _2520 = cbLight._m0[_2500].x + _621;
        float _2521 = cbLight._m0[_2500].y + _622;
        float _2522 = cbLight._m0[_2500].z + _623;
        float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
        float _2527 = _2526 * _2520;
        float _2528 = _2526 * _2521;
        float _2529 = _2526 * _2522;
        float _2530 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2500].xyz));
        float _4514 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2533 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2534 = dot(vec3(_543, _544, _545), vec3(_2527, _2528, _2529));
        float _4525 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2538 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2527, _2528, _2529));
        float _4536 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2542 = _2519 * _2519;
        float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
        float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2556 = 1.0 - _2519;
        float _2566 = (0.5 / (((_2313 * ((_2533 * _2556) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2556) + _2519) * _2533))) * _2533;
        float _4547 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2568 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
        float _2569 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2494 = (((_2555 * cbLight._m0[_2504].x) * _2568) * _2569) + _2436;
        _2496 = (((_2555 * cbLight._m0[_2504].y) * _2568) * _2569) + _2437;
        _2498 = (((_2555 * cbLight._m0[_2504].z) * _2568) * _2569) + _2438;
    }
    float _2600;
    float _2602;
    float _2604;
    if (_2222)
    {
        _2600 = _2494;
        _2602 = _2496;
        _2604 = _2498;
    }
    else
    {
        uint _2611 = _2036 + 3u;
        uint _2615 = _2036 + 11u;
        float _2629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2611].w)) * _546) * 0.949999988079071044921875);
        float _2630 = _2629 * _2629;
        float _2631 = cbLight._m0[_2611].x + _621;
        float _2632 = cbLight._m0[_2611].y + _622;
        float _2633 = cbLight._m0[_2611].z + _623;
        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
        float _2638 = _2637 * _2631;
        float _2639 = _2637 * _2632;
        float _2640 = _2637 * _2633;
        float _2641 = dot(vec3(_543, _544, _545), vec3(cbLight._m0[_2611].xyz));
        float _4563 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2645 = dot(vec3(_543, _544, _545), vec3(_2638, _2639, _2640));
        float _4574 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2648 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2649 = dot(vec3(cbLight._m0[_2611].xyz), vec3(_2638, _2639, _2640));
        float _4585 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2653 = _2630 * _2630;
        float _2657 = ((_2648 * _2648) * (_2653 + (-1.0))) + 1.0;
        float _2666 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2667 = 1.0 - _2630;
        float _2677 = (0.5 / (((_2313 * ((_2644 * _2667) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2313 * _2667) + _2630) * _2644))) * _2644;
        float _4596 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2653 / ((_2657 * _2657) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2600 = (((_2666 * cbLight._m0[_2615].x) * _2679) * _2680) + _2494;
        _2602 = (((_2666 * cbLight._m0[_2615].y) * _2679) * _2680) + _2496;
        _2604 = (((_2666 * cbLight._m0[_2615].z) * _2679) * _2680) + _2498;
    }
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_2034.y == 0u)
    {
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.x;
        uint _2713 = uint((float(_2701.y) * floor(float(uint(cbSceneParam._m0[85u].y * _643) / _2702))) + floor(float(uint(cbSceneParam._m0[85u].x * _642) / _2702)));
        float _2723 = (log2(_1812 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2724 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        uint _2727 = uint(isnan(14.0) ? _2724 : (isnan(_2724) ? 14.0 : min(_2724, 14.0)));
        uvec4 _2732 = texelFetch(g_lightClusterGridBuffer, int(((_2727 << 2u) + (_2713 << 6u)) >> 2u));
        uint _2733 = _2732.x;
        uint _2734 = _2701.z;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((((1u << ((_2734 >> 4u) & 15u)) + 4294967295u) & _2733) == 0u) || ((_2734 & 240u) == 0u))
        {
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
        }
        else
        {
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            uint _2972 = 0u;
            uint _2981;
            bool _2982;
            for (;;)
            {
                _2981 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_2972 << 2u)) >> 2u)).x;
                _2982 = _2981 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2982)
                {
                    frontier_phi_71_pred = _2971;
                    frontier_phi_71_pred_1 = _2970;
                    frontier_phi_71_pred_2 = _2969;
                    frontier_phi_71_pred_3 = _2968;
                    frontier_phi_71_pred_4 = _2967;
                    frontier_phi_71_pred_5 = _2966;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2981;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2972 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _1810;
                        float _3178 = _3137.y - _1811;
                        float _3179 = _3137.z - _1812;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_663, _666, _669), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4622 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _1810;
                        float _3213 = (-0.0) - _1811;
                        float _3214 = (-0.0) - _1812;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _723;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_663, _666, _669), vec3(_3219, _3220, _3221));
                        float _4638 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3253 = dot(vec3(_663, _666, _669), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4649 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4660 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4671 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3041 = (_3208 * _3156.x) + _3114;
                        _3042 = (_3208 * _3156.y) + _3115;
                        _3043 = (_3208 * _3156.z) + _3116;
                        _3038 = (_3288 * _3173.x) + _3111;
                        _3039 = (_3288 * _3173.y) + _3112;
                        _3040 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_71_pred = _3043;
                    frontier_phi_71_pred_1 = _3042;
                    frontier_phi_71_pred_2 = _3041;
                    frontier_phi_71_pred_3 = _3040;
                    frontier_phi_71_pred_4 = _3039;
                    frontier_phi_71_pred_5 = _3038;
                }
                _2824 = frontier_phi_71_pred;
                _2822 = frontier_phi_71_pred_1;
                _2820 = frontier_phi_71_pred_2;
                _2818 = frontier_phi_71_pred_3;
                _2816 = frontier_phi_71_pred_4;
                _2814 = frontier_phi_71_pred_5;
                uint _2973 = _2972 + 1u;
                if (_2973 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2966 = _2814;
                    _2967 = _2816;
                    _2968 = _2818;
                    _2969 = _2820;
                    _2970 = _2822;
                    _2971 = _2824;
                    _2972 = _2973;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
        }
        uvec4 _2827 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2828 = _2827.z;
        uint _2830 = (_2828 >> 8u) & 15u;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        if (((4294967295u << _2830) & _2733) == 0u)
        {
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
        }
        else
        {
            float _2959 = inversesqrt(dot(vec3(_1810, _1811, _1812), vec3(_1810, _1811, _1812)));
            float _2960 = _2959 * _1810;
            float _2961 = _2959 * _1811;
            float _2962 = _2959 * _1812;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2830 < ((_2828 >> 12u) & 15u))
            {
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _3094 = _2813;
                float _3095 = _2815;
                float _3096 = _2817;
                float _3097 = _2819;
                float _3098 = _2821;
                float _3099 = _2823;
                uint _3100 = _2830;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2727 << 5u) + (_2713 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3110)
                    {
                        frontier_phi_82_pred = _3099;
                        frontier_phi_82_pred_1 = _3098;
                        frontier_phi_82_pred_2 = _3097;
                        frontier_phi_82_pred_3 = _3096;
                        frontier_phi_82_pred_4 = _3095;
                        frontier_phi_82_pred_5 = _3094;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        float _3317 = _3096;
                        float _3318 = _3097;
                        float _3319 = _3098;
                        float _3320 = _3099;
                        uint _3321 = _3109;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3391;
                        vec4 _3407;
                        float _3453;
                        bool _3454;
                        for (;;)
                        {
                            uint _3332 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3378 = (_3332 * 40u) + 16u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3332 * 40u) + 20u;
                            _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3409 = (_3332 * 40u) + 24u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3428 = (_3332 * 40u) + 28u;
                            vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            _3453 = fma(_1812, _3441.z, fma(_1811, _3441.y, _3441.x * _1810)) + _3441.w;
                            _3454 = !((fma(_1812, _3422.z, fma(_1811, _3422.y, _3422.x * _1810)) + _3422.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3454)
                            {
                                float _3481 = _3347.x - _1810;
                                float _3482 = _3347.y - _1811;
                                float _3483 = _3347.z - _1812;
                                float _3484 = dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483));
                                float _3487 = inversesqrt(_3484);
                                float _3488 = _3487 * _3481;
                                float _3489 = _3487 * _3482;
                                float _3490 = _3487 * _3483;
                                float _3494 = 1.0 - (_3484 / (_3348 * _3348));
                                float _4682 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3499 = sqrt(_3484) * _3363.w;
                                float _3501 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                                float _3502 = _3501 * _3501;
                                float _3505 = ((1.0 - _3502) * dot(vec3(_3488, _3489, _3490), vec3(_663, _666, _669))) + _3502;
                                float _3508 = _3499 * _3499;
                                float _3512 = (fma(_1812, _3391.z, fma(_1811, _3391.y, _3391.x * _1810)) + _3391.w) / _3453;
                                float _3513 = (fma(_1812, _3407.z, fma(_1811, _3407.y, _3407.x * _1810)) + _3407.w) / _3453;
                                float _3517 = 1.0 - dot(vec2(_3512, _3513), vec2(_3512, _3513));
                                float _4698 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3518 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3519 = _3518 * (((isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0))) * _3495) / ((_3508 * 0.699999988079071044921875) + 1.0));
                                float _3531 = exp2(log2(1.0 / ((_3508 * 3.5) + 5.0)) * 0.25);
                                float _3532 = 1.0 - _723;
                                float _3539 = sqrt(1.0 - ((1.0 - (_3532 * _3532)) * (1.0 - (_3531 * _3531))));
                                float _3540 = _3539 * _3539;
                                float _3541 = _3540 * _3540;
                                float _3542 = _3488 - _2960;
                                float _3543 = _3489 - _2961;
                                float _3544 = _3490 - _2962;
                                float _3548 = inversesqrt(dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544)));
                                float _3552 = dot(vec3(_663, _666, _669), vec3((-0.0) - _2960, (-0.0) - _2961, (-0.0) - _2962));
                                float _4709 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3556 = dot(vec3(_663, _666, _669), vec3(_3548 * _3542, _3548 * _3543, _3548 * _3544));
                                float _4720 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3563 = ((_3559 * _3559) * (_3541 + (-1.0))) + 1.0;
                                float _3564 = _3501 * _3540;
                                float _3565 = _3564 * _3564;
                                float _3571 = ((1.0 - _3565) * dot(vec3(_663, _666, _669), vec3(_3488, _3489, _3490))) + _3565;
                                float _4731 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3573 = 1.0 - _3540;
                                float _3583 = (0.5 / (((_3572 * ((_3555 * _3573) + _3540)) + 9.9999999392252902907785028219223e-09) + (((_3572 * _3573) + _3540) * _3555))) * _3572;
                                float _4742 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3593 = (_3518 * _3495) * (((_3541 * 3.1415927410125732421875) * (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) / ((_3563 * _3563) * ((_3508 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3519 * _3363.z;
                                frontier_phi_88_pred_1 = _3519 * _3363.y;
                                frontier_phi_88_pred_2 = _3519 * _3363.x;
                                frontier_phi_88_pred_3 = _3593 * _3375.z;
                                frontier_phi_88_pred_4 = _3593 * _3375.y;
                                frontier_phi_88_pred_5 = _3593 * _3375.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3602 = frontier_phi_88_pred;
                            _3601 = frontier_phi_88_pred_1;
                            _3600 = frontier_phi_88_pred_2;
                            _3599 = frontier_phi_88_pred_3;
                            _3598 = frontier_phi_88_pred_4;
                            _3597 = frontier_phi_88_pred_5;
                            _3305 = _3600 + _3318;
                            _3306 = _3601 + _3319;
                            _3307 = _3602 + _3320;
                            _3302 = _3597 + _3315;
                            _3303 = _3598 + _3316;
                            _3304 = _3599 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3307;
                        frontier_phi_82_pred_1 = _3306;
                        frontier_phi_82_pred_2 = _3305;
                        frontier_phi_82_pred_3 = _3304;
                        frontier_phi_82_pred_4 = _3303;
                        frontier_phi_82_pred_5 = _3302;
                    }
                    _2945 = frontier_phi_82_pred;
                    _2943 = frontier_phi_82_pred_1;
                    _2941 = frontier_phi_82_pred_2;
                    _2939 = frontier_phi_82_pred_3;
                    _2937 = frontier_phi_82_pred_4;
                    _2935 = frontier_phi_82_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2935;
                        _3095 = _2937;
                        _3096 = _2939;
                        _3097 = _2941;
                        _3098 = _2943;
                        _3099 = _2945;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2941;
                frontier_phi_63_64_ladder_1 = _2945;
                frontier_phi_63_64_ladder_2 = _2943;
                frontier_phi_63_64_ladder_3 = _2939;
                frontier_phi_63_64_ladder_4 = _2937;
                frontier_phi_63_64_ladder_5 = _2935;
            }
            else
            {
                frontier_phi_63_64_ladder = _2819;
                frontier_phi_63_64_ladder_1 = _2823;
                frontier_phi_63_64_ladder_2 = _2821;
                frontier_phi_63_64_ladder_3 = _2817;
                frontier_phi_63_64_ladder_4 = _2815;
                frontier_phi_63_64_ladder_5 = _2813;
            }
            _2934 = frontier_phi_63_64_ladder_5;
            _2936 = frontier_phi_63_64_ladder_4;
            _2938 = frontier_phi_63_64_ladder_3;
            _2940 = frontier_phi_63_64_ladder;
            _2942 = frontier_phi_63_64_ladder_2;
            _2944 = frontier_phi_63_64_ladder_1;
        }
        float _2949 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2746 = (_2949 * _2940) + _2277;
        _2748 = (_2949 * _2942) + _2279;
        _2750 = (_2949 * _2944) + _2281;
        _2752 = ((_2934 * 0.039999999105930328369140625) * _2949) + _2600;
        _2754 = ((_2936 * 0.039999999105930328369140625) * _2949) + _2602;
        _2756 = ((_2938 * 0.039999999105930328369140625) * _2949) + _2604;
    }
    else
    {
        _2746 = _2277;
        _2748 = _2279;
        _2750 = _2281;
        _2752 = _2600;
        _2754 = _2602;
        _2756 = _2604;
    }
    float _4758 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4769 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4780 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _2773 = ((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2746 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _707))) + ((_2752 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1543)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (_2748 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _707))) + ((_2754 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1543)) * cbPerFrame._m0[3u].x);
    float _2775 = ((isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2750 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _707))) + ((_2756 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1543)) * cbPerFrame._m0[3u].x);
    uint _2776 = _241 + 6u;
    float _2784 = _642 / cbSceneParam._m0[86u].x;
    float _2785 = _643 / cbSceneParam._m0[86u].y;
    vec4 _2799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2801 = _2799.x;
    float _2802 = _2799.y;
    float _2803 = _2799.z;
    float _2804 = _2799.w;
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _2838 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _2839 = _2838 / _564;
        float _2850 = _2839 * _614;
        float _2851 = _615 * _2839;
        float _2852 = (-0.0) - _2851;
        float _2854 = _2839 * _616;
        float _2856 = (cbSceneParam._m0[77u].w * _2852) / _2838;
        float _2857 = _2856 + cbSceneParam._m0[79u].w;
        float _2858 = cbSceneParam._m0[79u].w - _2851;
        float _2864 = sqrt(((_2850 * _2850) + (_2851 * _2851)) + (_2854 * _2854));
        float _2867 = (1.0 - (cbSceneParam._m0[77u].w / _2838)) * _2864;
        float _2872 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2874 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2852 - _2856) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2857 > 0.0) ? exp2(_2872 * _2857) : (2.0 - exp2(_2874 * _2857))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2867;
        }
        else
        {
            float _2995 = 1.0 / cbSceneParam._m0[80u].x;
            float _2996 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : max(_2857, _2858));
            float _2997 = isnan(_2858) ? _2857 : (isnan(_2857) ? _2858 : min(_2857, _2858));
            float _3006 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : min(_2996, 0.0));
            float _3007 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : min(_2997, 0.0));
            _3051 = ((abs(_2864 / _2852) * cbSceneParam._m0[80u].y) * ((((_3006 - _3007) * 2.0) - ((exp2(_2872 * (isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0)))) - exp2(_2872 * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))))) * _2995)) - ((exp2(_2874 * _3006) - exp2(_2874 * _3007)) * _2995))) + (_2867 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2784, _2785, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2804);
        _2876 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2801;
        _2878 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2802;
        _2880 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2803;
        _2882 = _3062 * _2804;
    }
    else
    {
        _2876 = _2801;
        _2878 = _2802;
        _2880 = _2803;
        _2882 = _2804;
    }
    bool _3089;
    vec4 _2892;
    vec4 _2914;
    float _2916;
    float _2920;
    float _2921;
    float _2922;
    float _2923;
    bool _2933;
    for (;;)
    {
        _2892 = cbMatDynParam._m0[0u];
        float _2894 = roundEven(_2892.y);
        bool _2895 = _2894 == 3.0;
        float _2896 = log2(_2882);
        float _2903 = exp2(_2896 * cbSceneParam._m0[78u].x) * _2773;
        float _2904 = exp2(_2896 * cbSceneParam._m0[78u].y) * _2774;
        float _2905 = exp2(_2896 * cbSceneParam._m0[78u].z) * _2775;
        float _2912 = _630 + (-0.5);
        _2914 = cbMtdParam._m0[1u];
        _2916 = _2914.y * _2912;
        float _2919 = (_2894 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2920 = _2919 * (_2895 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2876)));
        _2921 = _2919 * (_2895 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2878)));
        _2922 = _2919 * (_2895 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2880)));
        _2923 = _2912 * 0.999000012874603271484375;
        _2933 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2933)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2923) < 0.5)
            {
                _3089 = true;
                break;
            }
        }
        uint _3030 = _682 + uint(_2892.w);
        if ((cbInstanceData._m0[_3030].w < 1.0) && ((cbInstanceData._m0[_3030].w + _2923) < 0.5))
        {
            _3089 = true;
            break;
        }
        if ((_2916 + 1.0) < _2914.x)
        {
            _3089 = true;
            break;
        }
        _3089 = false;
        break;
    }
    float _3293;
    if (_3089)
    {
        discard_state = true;
        _3293 = 0.0;
    }
    else
    {
        _3293 = cbInstanceData._m0[_2776].w;
    }
    SV_Target.x = _2920;
    SV_Target.y = _2921;
    SV_Target.z = _2922;
    SV_Target.w = _3293;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2776].w;
    discard_exit();
}


