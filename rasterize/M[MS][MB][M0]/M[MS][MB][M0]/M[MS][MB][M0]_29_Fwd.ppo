#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _977;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _198 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _199 = _198 * _190;
    float _200 = _198 * _191;
    float _201 = _198 * _192;
    float _205 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = _205 * NORMAL.x;
    float _207 = _205 * NORMAL.y;
    float _208 = _205 * NORMAL.z;
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    uint _218 = uint(roundEven(NORMAL.w)) * 13u;
    uint _224 = _218 + 1u;
    uint _228 = _218 + 2u;
    float _237 = sqrt(((cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x) + (cbInstanceData._m0[_218].x * cbInstanceData._m0[_218].x)) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x));
    float _238 = _237 * TEXCOORD.z;
    float _239 = _237 * TEXCOORD.w;
    vec4 _258 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _264 = _258.x * cbMtdParam._m0[9u].x;
    float _265 = _258.y * cbMtdParam._m0[9u].y;
    float _266 = _258.z * cbMtdParam._m0[9u].z;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _288 = _284.z;
    float _293 = (_284.x * 2.0) + (-1.0);
    float _295 = (_284.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3287 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))));
    float _305 = fma(_302, _206, fma(_295, _213, _293 * _199));
    float _308 = fma(_302, _207, fma(_295, _214, _293 * _200));
    float _311 = fma(_302, _208, fma(_295, _215, _293 * _201));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    vec4 _351 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _238) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _239) + cbTextureTilingScale._m0[11u].w));
    float _353 = _351.x;
    float _354 = 1.0 - _353;
    float _361 = ((_353 - _354) * cbMtdParam._m0[24u].z) + _354;
    float _363 = (cbMtdParam._m0[19u].x + dot(vec4(_315 * _305, _315 * _308, _315 * _311, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_361 * cbMtdParam._m0[21u].z);
    float _3298 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _379 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_361 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3309 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
    float _384 = ((_364 * (cbMtdParam._m0[17u].x - _264)) * _380) + _264;
    float _385 = ((_364 * (cbMtdParam._m0[17u].y - _265)) * _380) + _265;
    float _386 = ((_364 * (cbMtdParam._m0[17u].z - _266)) * _380) + _266;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _238) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _239) + cbTextureTilingScale._m0[15u].w));
    float _406 = (_399.x * 2.0) + (-1.0);
    float _407 = (_399.y * 2.0) + (-1.0);
    float _408 = dot(vec2(_406, _407), vec2(_406, _407));
    float _3320 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _417 = (((_399.z - _288) * _364) * _380) + _288;
    float _432 = (((cbMtdParam._m0[21u].x * _293) + ((_406 - _293) * _364)) * _380) + _293;
    float _433 = (((cbMtdParam._m0[21u].x * _295) + ((_407 - _295) * _364)) * _380) + _295;
    float _434 = (((sqrt(1.0 - (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) - _302) * _364) * _380) + _302;
    float _439 = cbMtdParam._m0[22u].x + _284.w;
    float _442 = fma(_434, _206, fma(_433, _213, _432 * _199));
    float _445 = fma(_434, _207, fma(_433, _214, _432 * _200));
    float _448 = fma(_434, _208, fma(_433, _215, _432 * _201));
    float _452 = inversesqrt(dot(vec3(_442, _445, _448), vec3(_442, _445, _448)));
    float _453 = _452 * _442;
    float _454 = _452 * _445;
    float _455 = _452 * _448;
    float _3331 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _456 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _3342 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3353 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3364 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3375 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _474 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _525 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _515);
    float _526 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _515);
    float _527 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _515);
    float _531 = inversesqrt(dot(vec3(_525, _526, _527), vec3(_525, _526, _527)));
    float _532 = _525 * _531;
    float _533 = _526 * _531;
    float _534 = _527 * _531;
    float _540 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _541 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _562 = fma(_455, cbSceneParam._m0[5u].z, fma(_454, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _453));
    float _565 = fma(_455, cbSceneParam._m0[6u].z, fma(_454, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _453));
    float _568 = fma(_455, cbSceneParam._m0[7u].z, fma(_454, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _453));
    uint _582 = (_218 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _588 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_582].x;
    float _589 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_582].y;
    float _590 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_582].z;
    float _3386 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    float _3408 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _540, cbSceneParam._m0[86u].y * _541));
    float _606 = ((isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0))) * TEXCOORD_5.w) * _602.x;
    float _607 = dot(vec3(_453, _454, _455), vec3(_532, _533, _534));
    float _610 = _607 * 2.0;
    float _614 = (_610 * _453) - _532;
    float _615 = (_610 * _454) - _533;
    float _616 = (_610 * _455) - _534;
    float _620 = abs(dot(vec3(_532, _533, _534), vec3(_453, _454, _455)));
    float _3419 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _622 = sqrt(_456);
    float _635 = exp2((_622 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_622 * 3.0));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_675, cbModelParam._m0[26u].z, fma(_671, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667));
        float _705 = fma(_675, cbModelParam._m0[27u].z, fma(_671, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667));
        float _709 = fma(_675, cbModelParam._m0[28u].z, fma(_671, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667));
        float _734 = _667 + _453;
        float _735 = _671 + _454;
        float _736 = _675 + _455;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_453, _454, _455), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3467 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_453, _454, _455), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3500 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_453, _454, _455), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3533 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1016 = fma(_675, cbModelParam._m0[30u].z, fma(_671, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _667));
        float _1020 = fma(_675, cbModelParam._m0[31u].z, fma(_671, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _667));
        float _1024 = fma(_675, cbModelParam._m0[32u].z, fma(_671, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _667));
        float _1047 = _667 + _453;
        float _1048 = _671 + _454;
        float _1049 = _675 + _455;
        float _1059 = fma(_1049, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047)) - _1016;
        float _1060 = fma(_1049, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047)) - _1020;
        float _1061 = fma(_1049, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047)) - _1024;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1016 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1020 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[35u].z) + ((((((_1024 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1115 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1082.x + (-0.5));
        float _1117 = _1115 * (_1082.y + (-0.5));
        float _1118 = _1115 * (_1082.z + (-0.5));
        float _1125 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1089.x + (-0.5));
        float _1127 = _1125 * (_1089.y + (-0.5));
        float _1128 = _1125 * (_1089.z + (-0.5));
        float _1135 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1096.x + (-0.5));
        float _1137 = _1135 * (_1096.y + (-0.5));
        float _1138 = _1135 * (_1096.z + (-0.5));
        float _1145 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1103.x + (-0.5));
        float _1147 = _1145 * (_1103.y + (-0.5));
        float _1148 = _1145 * (_1103.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_453, _454, _455), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3596 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1179 + 1.0))) + _1184) * _1149;
        float _1194 = _1117 * 0.5;
        float _1195 = _1127 * 0.5;
        float _1196 = _1137 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_453, _454, _455), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3629 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1221 + 1.0))) + _1226) * _1150;
        float _1236 = _1118 * 0.5;
        float _1237 = _1128 * 0.5;
        float _1238 = _1138 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_453, _454, _455), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3662 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1263 + 1.0))) + _1268) * _1151;
        _1285 = _1118;
        _1286 = _1117;
        _1287 = _1116;
        _1288 = _1128;
        _1289 = _1127;
        _1290 = _1126;
        _1291 = _1138;
        _1292 = _1137;
        _1293 = _1136;
        _1294 = _1151;
        _1295 = _1150;
        _1296 = _1149;
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _977;
        _1286 = _977;
        _1287 = _977;
        _1288 = _977;
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _989)) + _989;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _990)) + _990;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _991)) + _991;
    float _1332 = fma(_1311, cbSceneParam._m0[89u].z, fma(_1310, cbSceneParam._m0[89u].y, _1309 * cbSceneParam._m0[89u].x));
    float _1335 = fma(_1311, cbSceneParam._m0[90u].z, fma(_1310, cbSceneParam._m0[90u].y, _1309 * cbSceneParam._m0[90u].x));
    float _1338 = fma(_1311, cbSceneParam._m0[91u].z, fma(_1310, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1309));
    float _1353 = _614 * 0.5;
    float _1354 = _615 * 0.5;
    float _1355 = _616 * 0.5;
    float _1356 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1359 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1362 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1396;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1369 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_976, _980, _983, _986));
        float _1373 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_978, _981, _984, _987));
        float _1377 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_979, _982, _985, _988));
        float _1384 = dot(vec4(cbModelParam._m0[39u]), vec4(_1353, _1354, _1355, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1407;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1398 = dot(vec4(cbModelParam._m0[40u]), vec4(_1353, _1354, _1355, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1411 = (_1407 * cbModelParam._m0[1u].x) + (_1396 * (1.0 - cbModelParam._m0[1u].x));
    float _1421 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _456);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1421 : min(cbModelParam._m0[25u].z, _1421));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1470 = fma(_675, cbModelParam._m0[13u].z, fma(_671, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _667)) + cbModelParam._m0[13u].w;
        float _1474 = fma(_675, cbModelParam._m0[14u].z, fma(_671, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _667)) + cbModelParam._m0[14u].w;
        float _1478 = fma(_675, cbModelParam._m0[15u].z, fma(_671, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _667)) + cbModelParam._m0[15u].w;
        float _1481 = fma(_616, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _614));
        float _1484 = fma(_616, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _614));
        float _1487 = fma(_616, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _614));
        float _1515;
        if (_1481 > 0.0)
        {
            _1515 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1515 = frontier_phi_14_12_ladder;
        }
        float _1718;
        if (_1484 > 0.0)
        {
            _1718 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1718 = frontier_phi_23_19_ladder;
        }
        float _1961;
        if (_1487 > 0.0)
        {
            _1961 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1961 = frontier_phi_35_30_ladder;
        }
        float _1963 = isnan(_1718) ? _1515 : (isnan(_1515) ? _1718 : min(_1515, _1718));
        float _1964 = isnan(_1961) ? _1963 : (isnan(_1963) ? _1961 : min(_1963, _1961));
        float _1968 = (_1964 * _1481) + _1470;
        float _1969 = (_1964 * _1484) + _1474;
        float _1970 = (_1964 * _1487) + _1478;
        float _1971 = _1964 * 9.9999997473787516355514526367188e-05;
        float _1973 = (-1.0) - _1971;
        float _1975 = _1971 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1970 > _1975) || ((_1970 < _1973) || ((_1969 > _1975) || ((_1969 < _1973) || ((_1968 < _1973) || (_1968 > _1975))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2094 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1970, cbModelParam._m0[9u].z, fma(_1969, cbModelParam._m0[9u].y, _1968 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1970, cbModelParam._m0[10u].z, fma(_1969, cbModelParam._m0[10u].y, _1968 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1970, cbModelParam._m0[11u].z, fma(_1969, cbModelParam._m0[11u].y, _1968 * cbModelParam._m0[11u].x))), _1422);
            frontier_phi_13_35_ladder = _2094.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2094.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2094.x * cbModelParam._m0[1u].y;
        }
        _1503 = frontier_phi_13_35_ladder_2;
        _1505 = frontier_phi_13_35_ladder_1;
        _1507 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_614, _615, _616), _1422);
        _1503 = _1491.x * cbModelParam._m0[1u].y;
        _1505 = _1491.y * cbModelParam._m0[1u].y;
        _1507 = _1491.z * cbModelParam._m0[1u].y;
    }
    float _1511 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _456);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1511 : min(cbModelParam._m0[25u].w, _1511));
    float _1602;
    float _1604;
    float _1606;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1566 = fma(_675, cbModelParam._m0[21u].z, fma(_671, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _667)) + cbModelParam._m0[21u].w;
        float _1570 = fma(_675, cbModelParam._m0[22u].z, fma(_671, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _667)) + cbModelParam._m0[22u].w;
        float _1574 = fma(_675, cbModelParam._m0[23u].z, fma(_671, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _667)) + cbModelParam._m0[23u].w;
        float _1577 = fma(_616, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _614));
        float _1580 = fma(_616, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _614));
        float _1583 = fma(_616, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _614));
        float _1723;
        if (_1577 > 0.0)
        {
            _1723 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1723 = frontier_phi_25_21_ladder;
        }
        float _1988;
        if (_1580 > 0.0)
        {
            _1988 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1988 = frontier_phi_37_32_ladder;
        }
        float _2193;
        if (_1583 > 0.0)
        {
            _2193 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2193 = frontier_phi_46_43_ladder;
        }
        float _2195 = isnan(_1988) ? _1723 : (isnan(_1723) ? _1988 : min(_1723, _1988));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1577) + _1566;
        float _2201 = (_2196 * _1580) + _1570;
        float _2202 = (_2196 * _1583) + _1574;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2203;
        float _2206 = _2203 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2202 > _2206) || ((_2202 < _2204) || ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 < _2204) || (_2200 > _2206))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2202, cbModelParam._m0[17u].z, fma(_2201, cbModelParam._m0[17u].y, _2200 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2202, cbModelParam._m0[18u].z, fma(_2201, cbModelParam._m0[18u].y, _2200 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2202, cbModelParam._m0[19u].z, fma(_2201, cbModelParam._m0[19u].y, _2200 * cbModelParam._m0[19u].x))), _1512);
            frontier_phi_22_46_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1602 = frontier_phi_22_46_ladder_2;
        _1604 = frontier_phi_22_46_ladder_1;
        _1606 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1586 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_614, _615, _616), _1512);
        _1602 = _1586.x * cbModelParam._m0[1u].z;
        _1604 = _1586.y * cbModelParam._m0[1u].z;
        _1606 = _1586.z * cbModelParam._m0[1u].z;
    }
    float _1618 = ((((1.0 - _635) * ((_622 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_635 * _622)) * _606;
    float _1619 = _1618 * ((cbModelParam._m0[1u].w * (_1602 - _1503)) + _1503);
    float _1620 = _1618 * ((cbModelParam._m0[1u].w * (_1604 - _1505)) + _1505);
    float _1621 = _1618 * ((cbModelParam._m0[1u].w * (_1606 - _1507)) + _1507);
    float _1624 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, _1619 * cbSceneParam._m0[91u].x));
    uvec4 _1640 = floatBitsToUint(cbInstanceData._m0[_218 + 5u]);
    uint _1642 = _1640.x * 14u;
    uint _1643 = _1642 + 13u;
    float _1650 = _606 + (-1.0);
    float _1655 = (cbLight._m0[_1643].x * _1650) + 1.0;
    float _1656 = (cbLight._m0[_1643].y * _1650) + 1.0;
    float _1657 = (cbLight._m0[_1643].z * _1650) + 1.0;
    float _1658 = (cbLight._m0[_1643].w * _1650) + 1.0;
    uint _1659 = _1642 + 5u;
    float _1665 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1669 = _1642 + 4u;
    float _1676 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1680 = _1642 | 1u;
    float _1691 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_453, _454, _455));
    float _1694 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_453, _454, _455));
    float _3798 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _3809 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1699 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1701 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.3183098733425140380859375;
    float _1708 = ((cbLight._m0[_1659].x * _1665) * _1701) + ((cbLight._m0[_1669].x * _1676) * _1699);
    float _1709 = ((_1665 * cbLight._m0[_1659].y) * _1701) + ((_1676 * cbLight._m0[_1669].y) * _1699);
    float _1710 = ((_1665 * cbLight._m0[_1659].z) * _1701) + ((_1676 * cbLight._m0[_1669].z) * _1699);
    uvec4 _1715 = floatBitsToUint(cbLight._m0[_1642 + 12u]);
    bool _1717 = _1715.x == 0u;
    float _1728;
    float _1730;
    float _1732;
    if (_1717)
    {
        _1728 = _1708;
        _1730 = _1709;
        _1732 = _1710;
    }
    else
    {
        uint _1736 = _1642 + 6u;
        float _1752 = (dot(vec3(cbLight._m0[_1642 + 2u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _1753 = _1752 * _1752;
        float _3820 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1755 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1728 = (((cbLight._m0[_1736].x * 0.3183098733425140380859375) * _1754) * _1755) + _1708;
        _1730 = (((cbLight._m0[_1736].y * 0.3183098733425140380859375) * _1754) * _1755) + _1709;
        _1732 = (((cbLight._m0[_1736].z * 0.3183098733425140380859375) * _1754) * _1755) + _1710;
    }
    bool _1735 = _1715.y == 0u;
    float _1773;
    float _1775;
    float _1777;
    if (_1735)
    {
        _1773 = _1728;
        _1775 = _1730;
        _1777 = _1732;
    }
    else
    {
        uint _1932 = _1642 + 7u;
        float _1948 = (dot(vec3(cbLight._m0[_1642 + 3u].xyz), vec3(_453, _454, _455)) * 0.5) + 0.5;
        float _1949 = _1948 * _1948;
        float _3836 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1951 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1773 = (((cbLight._m0[_1932].x * 0.3183098733425140380859375) * _1950) * _1951) + _1728;
        _1775 = (((cbLight._m0[_1932].y * 0.3183098733425140380859375) * _1950) * _1951) + _1730;
        _1777 = (((cbLight._m0[_1932].z * 0.3183098733425140380859375) * _1950) * _1951) + _1732;
    }
    uint _1780 = _1642 + 8u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _456) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1642].x + _532;
    float _1796 = cbLight._m0[_1642].y + _533;
    float _1797 = cbLight._m0[_1642].z + _534;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1642].xyz));
    float _3852 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _3863 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _1809 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1810 = dot(vec3(_453, _454, _455), vec3(_1802, _1803, _1804));
    float _3874 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1802, _1803, _1804));
    float _3885 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1794 * _1794;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1833 = (exp2(log2(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1834 = 1.0 - _1794;
    float _1845 = (0.5 / (((_1809 * ((_1808 * _1834) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1834) + _1794) * _1808))) * _1808;
    float _3896 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1847 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    uint _1858 = _1642 + 9u;
    float _1869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1680].w)) * _456) * 0.949999988079071044921875);
    float _1870 = _1869 * _1869;
    float _1871 = cbLight._m0[_1680].x + _532;
    float _1872 = cbLight._m0[_1680].y + _533;
    float _1873 = cbLight._m0[_1680].z + _534;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1878 = _1877 * _1871;
    float _1879 = _1877 * _1872;
    float _1880 = _1877 * _1873;
    float _1881 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1680].xyz));
    float _3907 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1885 = dot(vec3(_453, _454, _455), vec3(_1878, _1879, _1880));
    float _3918 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1680].xyz), vec3(_1878, _1879, _1880));
    float _3929 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1870 * _1870;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1906 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1907 = 1.0 - _1870;
    float _1917 = (0.5 / (((_1809 * ((_1884 * _1907) + _1870)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1907) + _1870) * _1884))) * _1884;
    float _3940 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    float _1929 = (((_1906 * cbLight._m0[_1858].x) * _1919) * _1665) + (((_1833 * cbLight._m0[_1780].x) * _1847) * _1676);
    float _1930 = (((_1906 * cbLight._m0[_1858].y) * _1919) * _1665) + (((_1833 * cbLight._m0[_1780].y) * _1847) * _1676);
    float _1931 = (((_1906 * cbLight._m0[_1858].z) * _1919) * _1665) + (((_1833 * cbLight._m0[_1780].z) * _1847) * _1676);
    float _1993;
    float _1995;
    float _1997;
    if (_1717)
    {
        _1993 = _1929;
        _1995 = _1930;
        _1997 = _1931;
    }
    else
    {
        uint _1999 = _1642 + 2u;
        uint _2003 = _1642 + 10u;
        float _2017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _456) * 0.949999988079071044921875);
        float _2018 = _2017 * _2017;
        float _2019 = cbLight._m0[_1999].x + _532;
        float _2020 = cbLight._m0[_1999].y + _533;
        float _2021 = cbLight._m0[_1999].z + _534;
        float _2025 = inversesqrt(dot(vec3(_2019, _2020, _2021), vec3(_2019, _2020, _2021)));
        float _2026 = _2025 * _2019;
        float _2027 = _2025 * _2020;
        float _2028 = _2025 * _2021;
        float _2029 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_1999].xyz));
        float _3951 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2032 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2033 = dot(vec3(_453, _454, _455), vec3(_2026, _2027, _2028));
        float _3962 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2036 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _2037 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2026, _2027, _2028));
        float _3973 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2041 = _2018 * _2018;
        float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
        float _2054 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2055 = 1.0 - _2018;
        float _2065 = (0.5 / (((_1809 * ((_2032 * _2055) + _2018)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _2055) + _2018) * _2032))) * _2032;
        float _3984 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2067 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
        float _2068 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
        _1993 = (((_2054 * cbLight._m0[_2003].x) * _2067) * _2068) + _1929;
        _1995 = (((_2054 * cbLight._m0[_2003].y) * _2067) * _2068) + _1930;
        _1997 = (((_2054 * cbLight._m0[_2003].z) * _2067) * _2068) + _1931;
    }
    float _2103;
    float _2105;
    float _2107;
    if (_1735)
    {
        _2103 = _1993;
        _2105 = _1995;
        _2107 = _1997;
    }
    else
    {
        uint _2114 = _1642 + 3u;
        uint _2118 = _1642 + 11u;
        float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2114].w)) * _456) * 0.949999988079071044921875);
        float _2133 = _2132 * _2132;
        float _2134 = cbLight._m0[_2114].x + _532;
        float _2135 = cbLight._m0[_2114].y + _533;
        float _2136 = cbLight._m0[_2114].z + _534;
        float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
        float _2141 = _2140 * _2134;
        float _2142 = _2140 * _2135;
        float _2143 = _2140 * _2136;
        float _2144 = dot(vec3(_453, _454, _455), vec3(cbLight._m0[_2114].xyz));
        float _4000 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2148 = dot(vec3(_453, _454, _455), vec3(_2141, _2142, _2143));
        float _4011 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2151 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2152 = dot(vec3(cbLight._m0[_2114].xyz), vec3(_2141, _2142, _2143));
        float _4022 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2156 = _2133 * _2133;
        float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
        float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2170 = 1.0 - _2133;
        float _2180 = (0.5 / (((_1809 * ((_2147 * _2170) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _2170) + _2133) * _2147))) * _2147;
        float _4033 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2103 = (((_2169 * cbLight._m0[_2118].x) * _2182) * _2183) + _1993;
        _2105 = (((_2169 * cbLight._m0[_2118].y) * _2182) * _2183) + _1995;
        _2107 = (((_2169 * cbLight._m0[_2118].z) * _2182) * _2183) + _1997;
    }
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    float _2328;
    if (_1640.y == 0u)
    {
        float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2258;
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2258;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2258;
        uvec4 _2273 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2274 = _2273.x;
        uint _2285 = uint((float(_2273.y) * floor(float(uint(cbSceneParam._m0[85u].y * _541) / _2274))) + floor(float(uint(cbSceneParam._m0[85u].x * _540) / _2274)));
        float _2295 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2296 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        uint _2299 = uint(isnan(14.0) ? _2296 : (isnan(_2296) ? 14.0 : min(_2296, 14.0)));
        uvec4 _2304 = texelFetch(g_lightClusterGridBuffer, int(((_2299 << 2u) + (_2285 << 6u)) >> 2u));
        uint _2305 = _2304.x;
        uint _2306 = _2273.z;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        if (((((1u << ((_2306 >> 4u) & 15u)) + 4294967295u) & _2305) == 0u) || ((_2306 & 240u) == 0u))
        {
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
        }
        else
        {
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2417;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2567)
                {
                    frontier_phi_61_pred = _2551;
                    frontier_phi_61_pred_1 = _2556;
                    frontier_phi_61_pred_2 = _2555;
                    frontier_phi_61_pred_3 = _2554;
                    frontier_phi_61_pred_4 = _2553;
                    frontier_phi_61_pred_5 = _2552;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2566;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2557 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2259;
                        float _2742 = _2701.y - _2260;
                        float _2743 = _2701.z - _2261;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_562, _565, _568), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4059 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2259;
                        float _2777 = (-0.0) - _2260;
                        float _2778 = (-0.0) - _2261;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _622;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_562, _565, _568), vec3(_2783, _2784, _2785));
                        float _4075 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2818 = dot(vec3(_562, _565, _568), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4086 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4097 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4108 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2610 = (_2772 * _2720.x) + _2678;
                        _2611 = (_2772 * _2720.y) + _2679;
                        _2612 = (_2772 * _2720.z) + _2680;
                        _2607 = (_2853 * _2737.x) + _2675;
                        _2608 = (_2853 * _2737.y) + _2676;
                        _2609 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_61_pred = _2607;
                    frontier_phi_61_pred_1 = _2612;
                    frontier_phi_61_pred_2 = _2611;
                    frontier_phi_61_pred_3 = _2610;
                    frontier_phi_61_pred_4 = _2609;
                    frontier_phi_61_pred_5 = _2608;
                }
                _2407 = frontier_phi_61_pred;
                _2417 = frontier_phi_61_pred_1;
                _2415 = frontier_phi_61_pred_2;
                _2413 = frontier_phi_61_pred_3;
                _2411 = frontier_phi_61_pred_4;
                _2409 = frontier_phi_61_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2407;
                    _2552 = _2409;
                    _2553 = _2411;
                    _2554 = _2413;
                    _2555 = _2415;
                    _2556 = _2417;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
        }
        uvec4 _2420 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2421 = _2420.z;
        uint _2423 = (_2421 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2423) & _2305) == 0u)
        {
            _2519 = _2406;
            _2521 = _2408;
            _2523 = _2410;
            _2525 = _2412;
            _2527 = _2414;
            _2529 = _2416;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _2545 = _2544 * _2259;
            float _2546 = _2544 * _2260;
            float _2547 = _2544 * _2261;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2423 < ((_2421 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2658 = _2406;
                float _2659 = _2408;
                float _2660 = _2410;
                float _2661 = _2412;
                float _2662 = _2414;
                float _2663 = _2416;
                uint _2664 = _2423;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2299 << 5u) + (_2285 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2674)
                    {
                        frontier_phi_67_pred = _2661;
                        frontier_phi_67_pred_1 = _2662;
                        frontier_phi_67_pred_2 = _2663;
                        frontier_phi_67_pred_3 = _2660;
                        frontier_phi_67_pred_4 = _2659;
                        frontier_phi_67_pred_5 = _2658;
                    }
                    else
                    {
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        uint _2877 = _2673;
                        uint _2878;
                        vec4 _2903;
                        float _2904;
                        vec4 _2919;
                        vec3 _2931;
                        vec4 _2947;
                        vec4 _2963;
                        float _3009;
                        bool _3010;
                        for (;;)
                        {
                            uint _2888 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2877));
                            _2878 = (_2877 + 4294967295u) & _2877;
                            uint _2890 = _2888 * 40u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2904 = _2903.w;
                            uint _2906 = (_2888 * 40u) + 4u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2921 = (_2888 * 40u) + 8u;
                            _2931 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x));
                            uint _2934 = (_2888 * 40u) + 16u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2888 * 40u) + 20u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2888 * 40u) + 24u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2984 = (_2888 * 40u) + 28u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _3009 = fma(_2261, _2997.z, fma(_2260, _2997.y, _2997.x * _2259)) + _2997.w;
                            _3010 = !((fma(_2261, _2978.z, fma(_2260, _2978.y, _2978.x * _2259)) + _2978.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3010)
                            {
                                float _3037 = _2903.x - _2259;
                                float _3038 = _2903.y - _2260;
                                float _3039 = _2903.z - _2261;
                                float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                                float _3043 = inversesqrt(_3040);
                                float _3044 = _3043 * _3037;
                                float _3045 = _3043 * _3038;
                                float _3046 = _3043 * _3039;
                                float _3050 = 1.0 - (_3040 / (_2904 * _2904));
                                float _4119 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3055 = sqrt(_3040) * _2919.w;
                                float _3057 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                                float _3058 = _3057 * _3057;
                                float _3061 = ((1.0 - _3058) * dot(vec3(_3044, _3045, _3046), vec3(_562, _565, _568))) + _3058;
                                float _3064 = _3055 * _3055;
                                float _3068 = (fma(_2261, _2947.z, fma(_2260, _2947.y, _2947.x * _2259)) + _2947.w) / _3009;
                                float _3069 = (fma(_2261, _2963.z, fma(_2260, _2963.y, _2963.x * _2259)) + _2963.w) / _3009;
                                float _3073 = 1.0 - dot(vec2(_3068, _3069), vec2(_3068, _3069));
                                float _4135 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3075 = _3074 * (((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3051) / ((_3064 * 0.699999988079071044921875) + 1.0));
                                float _3087 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                                float _3088 = 1.0 - _622;
                                float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                                float _3096 = _3095 * _3095;
                                float _3097 = _3096 * _3096;
                                float _3098 = _3044 - _2545;
                                float _3099 = _3045 - _2546;
                                float _3100 = _3046 - _2547;
                                float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                                float _3108 = dot(vec3(_562, _565, _568), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4146 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3112 = dot(vec3(_562, _565, _568), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                                float _4157 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3115 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                                float _3120 = _3057 * _3096;
                                float _3121 = _3120 * _3120;
                                float _3127 = ((1.0 - _3121) * dot(vec3(_562, _565, _568), vec3(_3044, _3045, _3046))) + _3121;
                                float _4168 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3129 = 1.0 - _3096;
                                float _3139 = (0.5 / (((_3128 * ((_3111 * _3129) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3096) * _3111))) * _3128;
                                float _4179 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3149 = (_3074 * _3051) * (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) / ((_3119 * _3119) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3149 * _2931.x;
                                frontier_phi_73_pred_1 = _3149 * _2931.y;
                                frontier_phi_73_pred_2 = _3075 * _2919.z;
                                frontier_phi_73_pred_3 = _3075 * _2919.y;
                                frontier_phi_73_pred_4 = _3075 * _2919.x;
                                frontier_phi_73_pred_5 = _3149 * _2931.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_73_pred;
                            _3154 = frontier_phi_73_pred_1;
                            _3158 = frontier_phi_73_pred_2;
                            _3157 = frontier_phi_73_pred_3;
                            _3156 = frontier_phi_73_pred_4;
                            _3155 = frontier_phi_73_pred_5;
                            _2861 = _3156 + _2874;
                            _2862 = _3157 + _2875;
                            _2863 = _3158 + _2876;
                            _2858 = _3153 + _2871;
                            _2859 = _3154 + _2872;
                            _2860 = _3155 + _2873;
                            if (_2878 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2878;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2861;
                        frontier_phi_67_pred_1 = _2862;
                        frontier_phi_67_pred_2 = _2863;
                        frontier_phi_67_pred_3 = _2860;
                        frontier_phi_67_pred_4 = _2859;
                        frontier_phi_67_pred_5 = _2858;
                    }
                    _2526 = frontier_phi_67_pred;
                    _2528 = frontier_phi_67_pred_1;
                    _2530 = frontier_phi_67_pred_2;
                    _2524 = frontier_phi_67_pred_3;
                    _2522 = frontier_phi_67_pred_4;
                    _2520 = frontier_phi_67_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2520;
                        _2659 = _2522;
                        _2660 = _2524;
                        _2661 = _2526;
                        _2662 = _2528;
                        _2663 = _2530;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2528;
                frontier_phi_55_56_ladder_1 = _2530;
                frontier_phi_55_56_ladder_2 = _2526;
                frontier_phi_55_56_ladder_3 = _2524;
                frontier_phi_55_56_ladder_4 = _2522;
                frontier_phi_55_56_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_55_56_ladder = _2414;
                frontier_phi_55_56_ladder_1 = _2416;
                frontier_phi_55_56_ladder_2 = _2412;
                frontier_phi_55_56_ladder_3 = _2410;
                frontier_phi_55_56_ladder_4 = _2408;
                frontier_phi_55_56_ladder_5 = _2406;
            }
            _2519 = frontier_phi_55_56_ladder_5;
            _2521 = frontier_phi_55_56_ladder_4;
            _2523 = frontier_phi_55_56_ladder_3;
            _2525 = frontier_phi_55_56_ladder_2;
            _2527 = frontier_phi_55_56_ladder;
            _2529 = frontier_phi_55_56_ladder_1;
        }
        float _2534 = isnan(1.0) ? _606 : (isnan(_606) ? 1.0 : min(_606, 1.0));
        _2318 = (_2534 * _2525) + _1773;
        _2320 = (_2534 * _2527) + _1775;
        _2322 = (_2534 * _2529) + _1777;
        _2324 = ((_2519 * 0.039999999105930328369140625) * _2534) + _2103;
        _2326 = ((_2521 * 0.039999999105930328369140625) * _2534) + _2105;
        _2328 = ((_2523 * 0.039999999105930328369140625) * _2534) + _2107;
    }
    else
    {
        _2318 = _1773;
        _2320 = _1775;
        _2322 = _1777;
        _2324 = _2103;
        _2326 = _2105;
        _2328 = _2107;
    }
    float _4195 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4206 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4217 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    uint _2348 = _218 + 6u;
    float _2356 = _540 / cbSceneParam._m0[86u].x;
    float _2357 = _541 / cbSceneParam._m0[86u].y;
    vec4 _2371 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, (log2((isnan(cbSceneParam._m0[77u].w) ? _474 : (isnan(_474) ? cbSceneParam._m0[77u].w : min(_474, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2373 = _2371.x;
    float _2374 = _2371.y;
    float _2375 = _2371.z;
    float _2376 = _2371.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_474 > cbSceneParam._m0[78u].w)
    {
        float _2431 = isnan(_474) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _474 : min(cbSceneParam._m0[80u].w, _474));
        float _2432 = _2431 / _474;
        float _2443 = _2432 * _525;
        float _2444 = _526 * _2432;
        float _2445 = (-0.0) - _2444;
        float _2447 = _2432 * _527;
        float _2449 = (cbSceneParam._m0[77u].w * _2445) / _2431;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2444;
        float _2457 = sqrt(((_2443 * _2443) + (_2444 * _2444)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2431)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2620;
        if (abs((_2445 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2620 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2582 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2620 = ((abs(_2457 / _2445) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2467 * _2591) - exp2(_2467 * _2592)) * _2580))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2622 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2356, _2357, 1.0), 0.0);
        float _2631 = exp2((_2620 * (-1.44269502162933349609375)) * (1.0 - _2622.w));
        float _2632 = log2(_2631);
        float _2648 = log2(_2376);
        _2469 = (exp2(_2648 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].x)) * _2622.x) / cbSceneParam._m0[78u].x)) + _2373;
        _2471 = (exp2(_2648 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].y)) * _2622.y) / cbSceneParam._m0[78u].y)) + _2374;
        _2473 = (exp2(_2648 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].z)) * _2622.z) / cbSceneParam._m0[78u].z)) + _2375;
        _2475 = _2631 * _2376;
    }
    else
    {
        _2469 = _2373;
        _2471 = _2374;
        _2473 = _2375;
        _2475 = _2376;
    }
    float _2487 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2488 = _2487 == 3.0;
    float _2489 = log2(_2475);
    float _2496 = exp2(_2489 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2318 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _606))) + ((_2324 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _1411)) * cbPerFrame._m0[3u].x));
    float _2497 = exp2(_2489 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2320 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _606))) + ((_2326 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1411)) * cbPerFrame._m0[3u].x));
    float _2498 = exp2(_2489 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_2322 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _606))) + ((_2328 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1411)) * cbPerFrame._m0[3u].x));
    float _2507 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2507 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.y = _2507 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.z = _2507 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.w = cbInstanceData._m0[_2348].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2348].w;
}


