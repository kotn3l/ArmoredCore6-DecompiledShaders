#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1191;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3498 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3509 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _479 = _477.x;
    float _480 = 1.0 - _479;
    float _486 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _489 = ((isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : min(_486, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _498 = (_489 - ((((((_479 - _480) * cbMtdParam._m0[24u].z) + _480) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _489))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3530 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _506 = (_499 * (cbMtdParam._m0[17u].x - _385)) + _385;
    float _507 = (_499 * (cbMtdParam._m0[17u].y - _386)) + _386;
    float _508 = (_499 * (cbMtdParam._m0[17u].z - _387)) + _387;
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _522 = _520.x;
    float _523 = 1.0 - _522;
    float _550 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_522 - _523) * cbMtdParam._m0[24u].w) + _523) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3541 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _559 = ((((cbMtdParam._m0[10u].x - _506) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _551) + _506;
    float _560 = ((((cbMtdParam._m0[10u].y - _507) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _551) + _507;
    float _561 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _508)) * _551) + _508;
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _582 = (_575.x * 2.0) + (-1.0);
    float _583 = (_575.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3552 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _592 = (_499 * (_575.z - _435)) + _435;
    float _595 = ((cbMtdParam._m0[23u].y - _592) * _551) + _592;
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _620 = (_614.x * 2.0) + (-1.0);
    float _621 = (_614.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_620, _621), vec2(_620, _621));
    float _3563 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _639 = (((_582 - _438) + (cbMtdParam._m0[21u].x * _438)) * _499) + _438;
    float _640 = (((_583 - _440) + (cbMtdParam._m0[21u].x * _440)) * _499) + _440;
    float _641 = (_499 * (sqrt(1.0 - (isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0)))) - _446)) + _446;
    float _652 = (((_620 - _639) + (_639 * cbMtdParam._m0[22u].z)) * _551) + _639;
    float _653 = (((_621 - _640) + (_640 * cbMtdParam._m0[22u].z)) * _551) + _640;
    float _654 = ((sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0)))) - _641) * _551) + _641;
    float _656 = cbMtdParam._m0[22u].x + _459.w;
    float _659 = fma(_654, _230 * NORMAL.x, fma(_653, _237 * TANGENT.x, (_223 * _215) * _652));
    float _662 = fma(_654, _230 * NORMAL.y, fma(_653, _237 * TANGENT.y, (_223 * _216) * _652));
    float _665 = fma(_654, _230 * NORMAL.z, fma(_653, _237 * TANGENT.z, (_223 * _217) * _652));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3574 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _673 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3596 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3607 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3618 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _742 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _732);
    float _743 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _732);
    float _744 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _732);
    float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
    float _749 = _742 * _748;
    float _750 = _743 * _748;
    float _751 = _744 * _748;
    float _757 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _758 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _776 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _779 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _782 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _796 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _802 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_796].x;
    float _803 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_796].y;
    float _804 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_796].z;
    float _3629 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    vec4 _816 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _757, cbSceneParam._m0[86u].y * _758));
    float _820 = ((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * TEXCOORD_5.w) * _816.x;
    float _821 = dot(vec3(_670, _671, _672), vec3(_749, _750, _751));
    float _824 = _821 * 2.0;
    float _828 = (_824 * _670) - _749;
    float _829 = (_824 * _671) - _750;
    float _830 = (_824 * _672) - _751;
    float _834 = abs(dot(vec3(_749, _750, _751), vec3(_670, _671, _672)));
    float _3662 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _836 = sqrt(_673);
    float _849 = exp2((_836 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_836 * 3.0));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1190;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _915 = fma(_889, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881));
        float _919 = fma(_889, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881));
        float _923 = fma(_889, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881));
        float _948 = _881 + _670;
        float _949 = _885 + _671;
        float _950 = _889 + _672;
        float _960 = fma(_950, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _948)) - _915;
        float _961 = fma(_950, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _948)) - _919;
        float _962 = fma(_950, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _948)) - _923;
        float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
        float _979 = ((_966 * _960) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_915 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _980 = ((_966 * _961) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_919 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_966 * _962) / cbModelParam._m0[34u].z) + ((((((_923 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_979, _980, _981), 0.0);
        float _1018 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_984.x + (-0.5));
        float _1020 = _1018 * (_984.y + (-0.5));
        float _1021 = _1018 * (_984.z + (-0.5));
        float _1028 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_991.x + (-0.5));
        float _1030 = _1028 * (_991.y + (-0.5));
        float _1031 = _1028 * (_991.z + (-0.5));
        float _1038 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_998.x + (-0.5));
        float _1040 = _1038 * (_998.y + (-0.5));
        float _1041 = _1038 * (_998.z + (-0.5));
        float _1048 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1005.x + (-0.5));
        float _1050 = _1048 * (_1005.y + (-0.5));
        float _1051 = _1048 * (_1005.z + (-0.5));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = _1019 * 0.5;
        float _1056 = _1029 * 0.5;
        float _1057 = _1039 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1072 = (dot(vec3(_670, _671, _672), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1082 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3710 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1084 + 1.0))) + _1089) * _1052;
        float _1099 = _1020 * 0.5;
        float _1100 = _1030 * 0.5;
        float _1101 = _1040 * 0.5;
        float _1102 = dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101));
        float _1107 = (_1102 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1102);
        float _1115 = (dot(vec3(_670, _671, _672), vec3(_1107 * _1099, _1107 * _1100, _1107 * _1101)) + 1.0) * 0.5;
        float _3721 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1124 = sqrt(((_1100 * _1100) + (_1099 * _1099)) + (_1101 * _1101)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3732 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1126 = _1125 * 2.0;
        float _1130 = (1.0 - _1125) / (_1125 + 1.0);
        float _3743 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1140 = ((((1.0 - _1131) * (_1126 + 2.0)) * exp2(log2(isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1126 + 1.0))) + _1131) * _1053;
        float _1141 = _1021 * 0.5;
        float _1142 = _1031 * 0.5;
        float _1143 = _1041 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1157 = (dot(vec3(_670, _671, _672), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1166 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1168 = _1167 * 2.0;
        float _1172 = (1.0 - _1167) / (_1167 + 1.0);
        float _3776 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1182 = ((((1.0 - _1173) * (_1168 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1168 + 1.0))) + _1173) * _1054;
        _1190 = _1021;
        _1192 = _1020;
        _1193 = _1019;
        _1194 = _1031;
        _1195 = _1030;
        _1196 = _1029;
        _1197 = _1041;
        _1198 = _1040;
        _1199 = _1039;
        _1200 = _1054;
        _1201 = _1053;
        _1202 = _1052;
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)));
    }
    else
    {
        _1190 = _1191;
        _1192 = _1191;
        _1193 = _1191;
        _1194 = _1191;
        _1195 = _1191;
        _1196 = _1191;
        _1197 = _1191;
        _1198 = _1191;
        _1199 = _1191;
        _1200 = _1191;
        _1201 = _1191;
        _1202 = _1191;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1230 = fma(_889, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881));
        float _1234 = fma(_889, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881));
        float _1238 = fma(_889, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881));
        float _1261 = _881 + _670;
        float _1262 = _885 + _671;
        float _1263 = _889 + _672;
        float _1273 = fma(_1263, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1261)) - _1230;
        float _1274 = fma(_1263, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1261)) - _1234;
        float _1275 = fma(_1263, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1261)) - _1238;
        float _1279 = inversesqrt(dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275)));
        float _1292 = ((_1279 * _1273) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1230 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1279 * _1274) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1234 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1279 * _1275) / cbModelParam._m0[35u].z) + ((((((_1238 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1292, _1293, _1294), 0.0);
        float _1329 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1296.x + (-0.5));
        float _1331 = _1329 * (_1296.y + (-0.5));
        float _1332 = _1329 * (_1296.z + (-0.5));
        float _1339 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1303.x + (-0.5));
        float _1341 = _1339 * (_1303.y + (-0.5));
        float _1342 = _1339 * (_1303.z + (-0.5));
        float _1349 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1310.x + (-0.5));
        float _1351 = _1349 * (_1310.y + (-0.5));
        float _1352 = _1349 * (_1310.z + (-0.5));
        float _1359 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1317.x + (-0.5));
        float _1361 = _1359 * (_1317.y + (-0.5));
        float _1362 = _1359 * (_1317.z + (-0.5));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = _1330 * 0.5;
        float _1367 = _1340 * 0.5;
        float _1368 = _1350 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_670, _671, _672), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3839 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1393 + 1.0))) + _1398) * _1363;
        float _1408 = _1331 * 0.5;
        float _1409 = _1341 * 0.5;
        float _1410 = _1351 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_670, _671, _672), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3872 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1435 + 1.0))) + _1440) * _1364;
        float _1450 = _1332 * 0.5;
        float _1451 = _1342 * 0.5;
        float _1452 = _1352 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_670, _671, _672), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _3905 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1477 + 1.0))) + _1482) * _1365;
        _1499 = _1332;
        _1500 = _1331;
        _1501 = _1330;
        _1502 = _1342;
        _1503 = _1341;
        _1504 = _1340;
        _1505 = _1352;
        _1506 = _1351;
        _1507 = _1350;
        _1508 = _1365;
        _1509 = _1364;
        _1510 = _1363;
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1191;
        _1500 = _1191;
        _1501 = _1191;
        _1502 = _1191;
        _1503 = _1191;
        _1504 = _1191;
        _1505 = _1191;
        _1506 = _1191;
        _1507 = _1191;
        _1508 = _1191;
        _1509 = _1191;
        _1510 = _1191;
        _1511 = 0.0;
        _1512 = 0.0;
        _1513 = 0.0;
    }
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1203)) + _1203;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1204)) + _1204;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1546 = fma(_1525, cbSceneParam._m0[89u].z, fma(_1524, cbSceneParam._m0[89u].y, _1523 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1525, cbSceneParam._m0[90u].z, fma(_1524, cbSceneParam._m0[90u].y, _1523 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1525, cbSceneParam._m0[91u].z, fma(_1524, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1523));
    float _1567 = _828 * 0.5;
    float _1568 = _829 * 0.5;
    float _1569 = _830 * 0.5;
    float _1570 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1573 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1576 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1610;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1583 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1190, _1194, _1197, _1200));
        float _1587 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1192, _1195, _1198, _1201));
        float _1591 = dot(vec4(_1567, _1568, _1569, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1598 = dot(vec4(cbModelParam._m0[39u]), vec4(_1567, _1568, _1569, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1621;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1612 = dot(vec4(cbModelParam._m0[40u]), vec4(_1567, _1568, _1569, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1612) ? 0.0 : (isnan(0.0) ? _1612 : max(0.0, _1612))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1625 = (_1621 * cbModelParam._m0[1u].x) + (_1610 * (1.0 - cbModelParam._m0[1u].x));
    float _1635 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1636 = isnan(_1635) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1635 : min(cbModelParam._m0[25u].z, _1635));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_889, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_889, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_889, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_830, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828));
        float _1698 = fma(_830, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828));
        float _1701 = fma(_830, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1930;
        if (_1698 > 0.0)
        {
            _1930 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1930 = frontier_phi_23_19_ladder;
        }
        float _2173;
        if (_1701 > 0.0)
        {
            _2173 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2173 = frontier_phi_35_30_ladder;
        }
        float _2175 = isnan(_1930) ? _1729 : (isnan(_1729) ? _1930 : min(_1729, _1930));
        float _2176 = isnan(_2173) ? _2175 : (isnan(_2175) ? _2173 : min(_2175, _2173));
        float _2180 = (_2176 * _1695) + _1684;
        float _2181 = (_2176 * _1698) + _1688;
        float _2182 = (_2176 * _1701) + _1692;
        float _2183 = _2176 * 9.9999997473787516355514526367188e-05;
        float _2185 = (-1.0) - _2183;
        float _2187 = _2183 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2182 > _2187) || ((_2182 < _2185) || ((_2181 > _2187) || ((_2181 < _2185) || ((_2180 < _2185) || (_2180 > _2187))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2182, cbModelParam._m0[9u].z, fma(_2181, cbModelParam._m0[9u].y, _2180 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2182, cbModelParam._m0[10u].z, fma(_2181, cbModelParam._m0[10u].y, _2180 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2182, cbModelParam._m0[11u].z, fma(_2181, cbModelParam._m0[11u].y, _2180 * cbModelParam._m0[11u].x))), _1636);
            frontier_phi_13_35_ladder = _2306.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2306.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2306.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_828, _829, _830), _1636);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1816;
    float _1818;
    float _1820;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1780 = fma(_889, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881)) + cbModelParam._m0[21u].w;
        float _1784 = fma(_889, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881)) + cbModelParam._m0[22u].w;
        float _1788 = fma(_889, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881)) + cbModelParam._m0[23u].w;
        float _1791 = fma(_830, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828));
        float _1794 = fma(_830, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828));
        float _1797 = fma(_830, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828));
        float _1935;
        if (_1791 > 0.0)
        {
            _1935 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2200;
        if (_1794 > 0.0)
        {
            _2200 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2200 = frontier_phi_37_32_ladder;
        }
        float _2405;
        if (_1797 > 0.0)
        {
            _2405 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2405 = frontier_phi_46_43_ladder;
        }
        float _2407 = isnan(_2200) ? _1935 : (isnan(_1935) ? _2200 : min(_1935, _2200));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1791) + _1780;
        float _2413 = (_2408 * _1794) + _1784;
        float _2414 = (_2408 * _1797) + _1788;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2613 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_46_ladder = _2613.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2613.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2613.x * cbModelParam._m0[1u].z;
        }
        _1816 = frontier_phi_22_46_ladder_2;
        _1818 = frontier_phi_22_46_ladder_1;
        _1820 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_828, _829, _830), _1726);
        _1816 = _1800.x * cbModelParam._m0[1u].z;
        _1818 = _1800.y * cbModelParam._m0[1u].z;
        _1820 = _1800.z * cbModelParam._m0[1u].z;
    }
    float _1832 = ((((1.0 - _849) * ((_836 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_849 * _836)) * _820;
    float _1833 = _1832 * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1834 = _1832 * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1835 = _1832 * ((cbModelParam._m0[1u].w * (_1820 - _1721)) + _1721);
    float _1838 = fma(_1835, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1833 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1835, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1833 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1835, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, _1833 * cbSceneParam._m0[91u].x));
    uvec4 _1854 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1856 = _1854.x * 14u;
    uint _1857 = _1856 + 13u;
    float _1864 = _820 + (-1.0);
    float _1869 = (cbLight._m0[_1857].x * _1864) + 1.0;
    float _1870 = (cbLight._m0[_1857].y * _1864) + 1.0;
    float _1871 = (cbLight._m0[_1857].z * _1864) + 1.0;
    float _1872 = (cbLight._m0[_1857].w * _1864) + 1.0;
    uint _1873 = _1856 + 5u;
    float _1879 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1883 = _1856 + 4u;
    float _1889 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1893 = _1856 | 1u;
    float _1904 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_670, _671, _672));
    float _1907 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_670, _671, _672));
    float _4041 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _4052 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1912 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * 0.3183098733425140380859375;
    float _1914 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1921 = ((cbLight._m0[_1873].x * _1879) * _1914) + ((cbLight._m0[_1883].x * _1889) * _1912);
    float _1922 = ((_1879 * cbLight._m0[_1873].y) * _1914) + ((_1889 * cbLight._m0[_1883].y) * _1912);
    float _1923 = ((_1879 * cbLight._m0[_1873].z) * _1914) + ((_1889 * cbLight._m0[_1883].z) * _1912);
    uvec4 _1927 = floatBitsToUint(cbLight._m0[_1856 + 12u]);
    bool _1929 = _1927.x == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1929)
    {
        _1940 = _1921;
        _1942 = _1922;
        _1944 = _1923;
    }
    else
    {
        uint _1948 = _1856 + 6u;
        float _1964 = (dot(vec3(cbLight._m0[_1856 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _4063 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1967 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1940 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1921;
        _1942 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1922;
        _1944 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1923;
    }
    bool _1947 = _1927.y == 0u;
    float _1985;
    float _1987;
    float _1989;
    if (_1947)
    {
        _1985 = _1940;
        _1987 = _1942;
        _1989 = _1944;
    }
    else
    {
        uint _2144 = _1856 + 7u;
        float _2160 = (dot(vec3(cbLight._m0[_1856 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4079 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2163 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _1985 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _1940;
        _1987 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _1942;
        _1989 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _1944;
    }
    uint _1992 = _1856 + 8u;
    float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _673) * 0.949999988079071044921875);
    float _2006 = _2005 * _2005;
    float _2007 = cbLight._m0[_1856].x + _749;
    float _2008 = cbLight._m0[_1856].y + _750;
    float _2009 = cbLight._m0[_1856].z + _751;
    float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
    float _2014 = _2013 * _2007;
    float _2015 = _2013 * _2008;
    float _2016 = _2013 * _2009;
    float _2017 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1856].xyz));
    float _4095 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _2021 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2022 = dot(vec3(_670, _671, _672), vec3(_2014, _2015, _2016));
    float _4117 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2026 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2014, _2015, _2016));
    float _4128 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2030 = _2006 * _2006;
    float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2046 = 1.0 - _2006;
    float _2057 = (0.5 / (((_2021 * ((_2020 * _2046) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2046) + _2006) * _2020))) * _2020;
    float _4139 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2059 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
    uint _2070 = _1856 + 9u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1893].w)) * _673) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_1893].x + _749;
    float _2084 = cbLight._m0[_1893].y + _750;
    float _2085 = cbLight._m0[_1893].z + _751;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1893].xyz));
    float _4150 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2097 = dot(vec3(_670, _671, _672), vec3(_2090, _2091, _2092));
    float _4161 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1893].xyz), vec3(_2090, _2091, _2092));
    float _4172 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2082 * _2082;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2118 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2119 = 1.0 - _2082;
    float _2129 = (0.5 / (((_2021 * ((_2096 * _2119) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2119) + _2082) * _2096))) * _2096;
    float _4183 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2131 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    float _2141 = (((_2118 * cbLight._m0[_2070].x) * _2131) * _1879) + (((_2045 * cbLight._m0[_1992].x) * _2059) * _1889);
    float _2142 = (((_2118 * cbLight._m0[_2070].y) * _2131) * _1879) + (((_2045 * cbLight._m0[_1992].y) * _2059) * _1889);
    float _2143 = (((_2118 * cbLight._m0[_2070].z) * _2131) * _1879) + (((_2045 * cbLight._m0[_1992].z) * _2059) * _1889);
    float _2205;
    float _2207;
    float _2209;
    if (_1929)
    {
        _2205 = _2141;
        _2207 = _2142;
        _2209 = _2143;
    }
    else
    {
        uint _2211 = _1856 + 2u;
        uint _2215 = _1856 + 10u;
        float _2229 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _673) * 0.949999988079071044921875);
        float _2230 = _2229 * _2229;
        float _2231 = cbLight._m0[_2211].x + _749;
        float _2232 = cbLight._m0[_2211].y + _750;
        float _2233 = cbLight._m0[_2211].z + _751;
        float _2237 = inversesqrt(dot(vec3(_2231, _2232, _2233), vec3(_2231, _2232, _2233)));
        float _2238 = _2237 * _2231;
        float _2239 = _2237 * _2232;
        float _2240 = _2237 * _2233;
        float _2241 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2211].xyz));
        float _4194 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _2245 = dot(vec3(_670, _671, _672), vec3(_2238, _2239, _2240));
        float _4205 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2249 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2238, _2239, _2240));
        float _4216 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2253 = _2230 * _2230;
        float _2257 = ((_2248 * _2248) * (_2253 + (-1.0))) + 1.0;
        float _2266 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2267 = 1.0 - _2230;
        float _2277 = (0.5 / (((_2021 * ((_2244 * _2267) + _2230)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2267) + _2230) * _2244))) * _2244;
        float _4227 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2279 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2253 / ((_2257 * _2257) * 3.141590118408203125));
        float _2280 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2205 = (((_2266 * cbLight._m0[_2215].x) * _2279) * _2280) + _2141;
        _2207 = (((_2266 * cbLight._m0[_2215].y) * _2279) * _2280) + _2142;
        _2209 = (((_2266 * cbLight._m0[_2215].z) * _2279) * _2280) + _2143;
    }
    float _2315;
    float _2317;
    float _2319;
    if (_1947)
    {
        _2315 = _2205;
        _2317 = _2207;
        _2319 = _2209;
    }
    else
    {
        uint _2326 = _1856 + 3u;
        uint _2330 = _1856 + 11u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _673) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _749;
        float _2347 = cbLight._m0[_2326].y + _750;
        float _2348 = cbLight._m0[_2326].z + _751;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2326].xyz));
        float _4243 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _2360 = dot(vec3(_670, _671, _672), vec3(_2353, _2354, _2355));
        float _4254 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4265 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2382 = 1.0 - _2345;
        float _2392 = (0.5 / (((_2021 * ((_2359 * _2382) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2021 * _2382) + _2345) * _2359))) * _2359;
        float _4276 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2394 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2395 = isnan(1.0) ? _1872 : (isnan(_1872) ? 1.0 : min(_1872, 1.0));
        _2315 = (((_2381 * cbLight._m0[_2330].x) * _2394) * _2395) + _2205;
        _2317 = (((_2381 * cbLight._m0[_2330].y) * _2394) * _2395) + _2207;
        _2319 = (((_2381 * cbLight._m0[_2330].z) * _2394) * _2395) + _2209;
    }
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_1854.y == 0u)
    {
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2470;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2470;
        float _2473 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2470;
        uvec4 _2485 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2486 = _2485.x;
        uint _2497 = uint((float(_2485.y) * floor(float(uint(cbSceneParam._m0[85u].y * _758) / _2486))) + floor(float(uint(cbSceneParam._m0[85u].x * _757) / _2486)));
        float _2507 = (log2(_2473 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2508 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        uint _2511 = uint(isnan(14.0) ? _2508 : (isnan(_2508) ? 14.0 : min(_2508, 14.0)));
        uvec4 _2516 = texelFetch(g_lightClusterGridBuffer, int(((_2511 << 2u) + (_2497 << 6u)) >> 2u));
        uint _2517 = _2516.x;
        uint _2518 = _2485.z;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        if (((((1u << ((_2518 >> 4u) & 15u)) + 4294967295u) & _2517) == 0u) || ((_2518 & 240u) == 0u))
        {
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
        }
        else
        {
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            uint _2769 = 0u;
            uint _2778;
            bool _2779;
            for (;;)
            {
                _2778 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                _2779 = _2778 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2779)
                {
                    frontier_phi_61_pred = _2763;
                    frontier_phi_61_pred_1 = _2768;
                    frontier_phi_61_pred_2 = _2767;
                    frontier_phi_61_pred_3 = _2766;
                    frontier_phi_61_pred_4 = _2765;
                    frontier_phi_61_pred_5 = _2764;
                }
                else
                {
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    uint _2893;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2778;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    for (;;)
                    {
                        uint _2897 = uint(findLSB(_2893)) + (_2769 << 5u);
                        uint _2894 = (_2893 + 4294967295u) & _2893;
                        uint _2899 = _2897 * 48u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2919 = (_2897 * 48u) + 4u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2938 = (_2897 * 48u) + 8u;
                        vec3 _2949 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x));
                        float _2953 = _2913.x - _2471;
                        float _2954 = _2913.y - _2472;
                        float _2955 = _2913.z - _2473;
                        float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                        float _2959 = inversesqrt(_2956);
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2963 = dot(vec3(_776, _779, _782), vec3(_2960, _2961, _2962));
                        float _2968 = 1.0 - (_2956 * _2913.w);
                        float _4302 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                        float _2970 = sqrt(_2956) * _2932.w;
                        float _2973 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2963) + _2974;
                        float _2980 = _2970 * _2970;
                        float _2984 = ((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2969) / ((_2980 * 0.699999988079071044921875) + 1.0);
                        float _2988 = (-0.0) - _2471;
                        float _2989 = (-0.0) - _2472;
                        float _2990 = (-0.0) - _2473;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _3005 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                        float _3006 = 1.0 - _836;
                        float _3013 = sqrt(1.0 - ((1.0 - (_3006 * _3006)) * (1.0 - (_3005 * _3005))));
                        float _3014 = _3013 * _3013;
                        float _3015 = _3014 * _3014;
                        float _3016 = _2995 + _2960;
                        float _3017 = _2996 + _2961;
                        float _3018 = _2997 + _2962;
                        float _3022 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
                        float _3026 = dot(vec3(_776, _779, _782), vec3(_2995, _2996, _2997));
                        float _4318 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3030 = dot(vec3(_776, _779, _782), vec3(_3022 * _3016, _3022 * _3017, _3022 * _3018));
                        float _4329 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3033 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3037 = ((_3033 * _3033) * (_3015 + (-1.0))) + 1.0;
                        float _3038 = _2973 * _3014;
                        float _3039 = _3038 * _3038;
                        float _3042 = ((1.0 - _3039) * _2963) + _3039;
                        float _4340 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3043 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3044 = 1.0 - _3014;
                        float _3054 = (0.5 / (((_3043 * ((_3029 * _3044) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_3043 * _3044) + _3014) * _3029))) * _3043;
                        float _4351 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3065 = (((_3015 * 3.1415927410125732421875) * (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) / ((_3037 * _3037) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125))) * _2969;
                        _2822 = (_2984 * _2932.x) + _2890;
                        _2823 = (_2984 * _2932.y) + _2891;
                        _2824 = (_2984 * _2932.z) + _2892;
                        _2819 = (_3065 * _2949.x) + _2887;
                        _2820 = (_3065 * _2949.y) + _2888;
                        _2821 = (_3065 * _2949.z) + _2889;
                        if (_2894 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2894;
                        }
                    }
                    frontier_phi_61_pred = _2819;
                    frontier_phi_61_pred_1 = _2824;
                    frontier_phi_61_pred_2 = _2823;
                    frontier_phi_61_pred_3 = _2822;
                    frontier_phi_61_pred_4 = _2821;
                    frontier_phi_61_pred_5 = _2820;
                }
                _2619 = frontier_phi_61_pred;
                _2629 = frontier_phi_61_pred_1;
                _2627 = frontier_phi_61_pred_2;
                _2625 = frontier_phi_61_pred_3;
                _2623 = frontier_phi_61_pred_4;
                _2621 = frontier_phi_61_pred_5;
                uint _2770 = _2769 + 1u;
                if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2763 = _2619;
                    _2764 = _2621;
                    _2765 = _2623;
                    _2766 = _2625;
                    _2767 = _2627;
                    _2768 = _2629;
                    _2769 = _2770;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
        }
        uvec4 _2632 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2633 = _2632.z;
        uint _2635 = (_2633 >> 8u) & 15u;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        if (((4294967295u << _2635) & _2517) == 0u)
        {
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
            _2741 = _2628;
        }
        else
        {
            float _2756 = inversesqrt(dot(vec3(_2471, _2472, _2473), vec3(_2471, _2472, _2473)));
            float _2757 = _2756 * _2471;
            float _2758 = _2756 * _2472;
            float _2759 = _2756 * _2473;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2635 < ((_2633 >> 12u) & 15u))
            {
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2870 = _2618;
                float _2871 = _2620;
                float _2872 = _2622;
                float _2873 = _2624;
                float _2874 = _2626;
                float _2875 = _2628;
                uint _2876 = _2635;
                uint _2885;
                bool _2886;
                for (;;)
                {
                    _2885 = texelFetch(g_lightClassification, int((((_2511 << 5u) + (_2497 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                    _2886 = _2885 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2886)
                    {
                        frontier_phi_67_pred = _2873;
                        frontier_phi_67_pred_1 = _2874;
                        frontier_phi_67_pred_2 = _2875;
                        frontier_phi_67_pred_3 = _2872;
                        frontier_phi_67_pred_4 = _2871;
                        frontier_phi_67_pred_5 = _2870;
                    }
                    else
                    {
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        uint _3089 = _2885;
                        uint _3090;
                        vec4 _3115;
                        float _3116;
                        vec4 _3131;
                        vec3 _3143;
                        vec4 _3158;
                        vec4 _3174;
                        float _3220;
                        bool _3221;
                        for (;;)
                        {
                            uint _3100 = ((_2876 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3089));
                            _3090 = (_3089 + 4294967295u) & _3089;
                            uint _3102 = _3100 * 40u;
                            _3115 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 3u)).x));
                            _3116 = _3115.w;
                            uint _3118 = (_3100 * 40u) + 4u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3100 * 40u) + 8u;
                            _3143 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x));
                            uint _3145 = (_3100 * 40u) + 16u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3161 = (_3100 * 40u) + 20u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3100 * 40u) + 24u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3195 = (_3100 * 40u) + 28u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            _3220 = fma(_2473, _3208.z, fma(_2472, _3208.y, _3208.x * _2471)) + _3208.w;
                            _3221 = !((fma(_2473, _3189.z, fma(_2472, _3189.y, _3189.x * _2471)) + _3189.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3221)
                            {
                                float _3248 = _3115.x - _2471;
                                float _3249 = _3115.y - _2472;
                                float _3250 = _3115.z - _2473;
                                float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                                float _3254 = inversesqrt(_3251);
                                float _3255 = _3254 * _3248;
                                float _3256 = _3254 * _3249;
                                float _3257 = _3254 * _3250;
                                float _3261 = 1.0 - (_3251 / (_3116 * _3116));
                                float _4362 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                                float _3266 = sqrt(_3251) * _3131.w;
                                float _3268 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                                float _3269 = _3268 * _3268;
                                float _3272 = ((1.0 - _3269) * dot(vec3(_3255, _3256, _3257), vec3(_776, _779, _782))) + _3269;
                                float _3275 = _3266 * _3266;
                                float _3279 = (fma(_2473, _3158.z, fma(_2472, _3158.y, _3158.x * _2471)) + _3158.w) / _3220;
                                float _3280 = (fma(_2473, _3174.z, fma(_2472, _3174.y, _3174.x * _2471)) + _3174.w) / _3220;
                                float _3284 = 1.0 - dot(vec2(_3279, _3280), vec2(_3279, _3280));
                                float _4378 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3286 = _3285 * (((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3262) / ((_3275 * 0.699999988079071044921875) + 1.0));
                                float _3298 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                                float _3299 = 1.0 - _836;
                                float _3306 = sqrt(1.0 - ((1.0 - (_3299 * _3299)) * (1.0 - (_3298 * _3298))));
                                float _3307 = _3306 * _3306;
                                float _3308 = _3307 * _3307;
                                float _3309 = _3255 - _2757;
                                float _3310 = _3256 - _2758;
                                float _3311 = _3257 - _2759;
                                float _3315 = inversesqrt(dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311)));
                                float _3319 = dot(vec3(_776, _779, _782), vec3((-0.0) - _2757, (-0.0) - _2758, (-0.0) - _2759));
                                float _4389 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3322 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3323 = dot(vec3(_776, _779, _782), vec3(_3315 * _3309, _3315 * _3310, _3315 * _3311));
                                float _4400 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3330 = ((_3326 * _3326) * (_3308 + (-1.0))) + 1.0;
                                float _3331 = _3268 * _3307;
                                float _3332 = _3331 * _3331;
                                float _3338 = ((1.0 - _3332) * dot(vec3(_776, _779, _782), vec3(_3255, _3256, _3257))) + _3332;
                                float _4411 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3339 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3340 = 1.0 - _3307;
                                float _3350 = (0.5 / (((_3339 * ((_3322 * _3340) + _3307)) + 9.9999999392252902907785028219223e-09) + (((_3339 * _3340) + _3307) * _3322))) * _3339;
                                float _4422 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3360 = (_3285 * _3262) * (((_3308 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3330 * _3330) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3360 * _3143.x;
                                frontier_phi_73_pred_1 = _3360 * _3143.y;
                                frontier_phi_73_pred_2 = _3286 * _3131.z;
                                frontier_phi_73_pred_3 = _3286 * _3131.y;
                                frontier_phi_73_pred_4 = _3286 * _3131.x;
                                frontier_phi_73_pred_5 = _3360 * _3143.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3364 = frontier_phi_73_pred;
                            _3365 = frontier_phi_73_pred_1;
                            _3369 = frontier_phi_73_pred_2;
                            _3368 = frontier_phi_73_pred_3;
                            _3367 = frontier_phi_73_pred_4;
                            _3366 = frontier_phi_73_pred_5;
                            _3073 = _3367 + _3086;
                            _3074 = _3368 + _3087;
                            _3075 = _3369 + _3088;
                            _3070 = _3364 + _3083;
                            _3071 = _3365 + _3084;
                            _3072 = _3366 + _3085;
                            if (_3090 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3090;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3073;
                        frontier_phi_67_pred_1 = _3074;
                        frontier_phi_67_pred_2 = _3075;
                        frontier_phi_67_pred_3 = _3072;
                        frontier_phi_67_pred_4 = _3071;
                        frontier_phi_67_pred_5 = _3070;
                    }
                    _2738 = frontier_phi_67_pred;
                    _2740 = frontier_phi_67_pred_1;
                    _2742 = frontier_phi_67_pred_2;
                    _2736 = frontier_phi_67_pred_3;
                    _2734 = frontier_phi_67_pred_4;
                    _2732 = frontier_phi_67_pred_5;
                    uint _2877 = _2876 + 1u;
                    if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2870 = _2732;
                        _2871 = _2734;
                        _2872 = _2736;
                        _2873 = _2738;
                        _2874 = _2740;
                        _2875 = _2742;
                        _2876 = _2877;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2740;
                frontier_phi_55_56_ladder_1 = _2742;
                frontier_phi_55_56_ladder_2 = _2738;
                frontier_phi_55_56_ladder_3 = _2736;
                frontier_phi_55_56_ladder_4 = _2734;
                frontier_phi_55_56_ladder_5 = _2732;
            }
            else
            {
                frontier_phi_55_56_ladder = _2626;
                frontier_phi_55_56_ladder_1 = _2628;
                frontier_phi_55_56_ladder_2 = _2624;
                frontier_phi_55_56_ladder_3 = _2622;
                frontier_phi_55_56_ladder_4 = _2620;
                frontier_phi_55_56_ladder_5 = _2618;
            }
            _2731 = frontier_phi_55_56_ladder_5;
            _2733 = frontier_phi_55_56_ladder_4;
            _2735 = frontier_phi_55_56_ladder_3;
            _2737 = frontier_phi_55_56_ladder_2;
            _2739 = frontier_phi_55_56_ladder;
            _2741 = frontier_phi_55_56_ladder_1;
        }
        float _2746 = isnan(1.0) ? _820 : (isnan(_820) ? 1.0 : min(_820, 1.0));
        _2530 = (_2746 * _2737) + _1985;
        _2532 = (_2746 * _2739) + _1987;
        _2534 = (_2746 * _2741) + _1989;
        _2536 = ((_2731 * 0.039999999105930328369140625) * _2746) + _2315;
        _2538 = ((_2733 * 0.039999999105930328369140625) * _2746) + _2317;
        _2540 = ((_2735 * 0.039999999105930328369140625) * _2746) + _2319;
    }
    else
    {
        _2530 = _1985;
        _2532 = _1987;
        _2534 = _1989;
        _2536 = _2315;
        _2538 = _2317;
        _2540 = _2319;
    }
    float _4438 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4449 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4460 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    uint _2560 = _243 + 6u;
    float _2568 = _757 / cbSceneParam._m0[86u].x;
    float _2569 = _758 / cbSceneParam._m0[86u].y;
    vec4 _2583 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2585 = _2583.x;
    float _2586 = _2583.y;
    float _2587 = _2583.z;
    float _2588 = _2583.w;
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2643 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2644 = _2643 / _691;
        float _2655 = _2644 * _742;
        float _2656 = _743 * _2644;
        float _2657 = (-0.0) - _2656;
        float _2659 = _2644 * _744;
        float _2661 = (cbSceneParam._m0[77u].w * _2657) / _2643;
        float _2662 = _2661 + cbSceneParam._m0[79u].w;
        float _2663 = cbSceneParam._m0[79u].w - _2656;
        float _2669 = sqrt(((_2655 * _2655) + (_2656 * _2656)) + (_2659 * _2659));
        float _2672 = (1.0 - (cbSceneParam._m0[77u].w / _2643)) * _2669;
        float _2677 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2679 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2832;
        if (abs((_2657 - _2661) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2832 = ((((_2662 > 0.0) ? exp2(_2677 * _2662) : (2.0 - exp2(_2679 * _2662))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2672;
        }
        else
        {
            float _2792 = 1.0 / cbSceneParam._m0[80u].x;
            float _2793 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : max(_2662, _2663));
            float _2794 = isnan(_2663) ? _2662 : (isnan(_2662) ? _2663 : min(_2662, _2663));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            float _2804 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : min(_2794, 0.0));
            _2832 = ((abs(_2669 / _2657) * cbSceneParam._m0[80u].y) * ((((_2803 - _2804) * 2.0) - ((exp2(_2677 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0)))) - exp2(_2677 * (isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))))) * _2792)) - ((exp2(_2679 * _2803) - exp2(_2679 * _2804)) * _2792))) + (_2672 * cbSceneParam._m0[80u].z);
        }
        vec4 _2834 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2568, _2569, 1.0), 0.0);
        float _2843 = exp2((_2832 * (-1.44269502162933349609375)) * (1.0 - _2834.w));
        float _2844 = log2(_2843);
        float _2860 = log2(_2588);
        _2681 = (exp2(_2860 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].x)) * _2834.x) / cbSceneParam._m0[78u].x)) + _2585;
        _2683 = (exp2(_2860 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].y)) * _2834.y) / cbSceneParam._m0[78u].y)) + _2586;
        _2685 = (exp2(_2860 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].z)) * _2834.z) / cbSceneParam._m0[78u].z)) + _2587;
        _2687 = _2843 * _2588;
    }
    else
    {
        _2681 = _2585;
        _2683 = _2586;
        _2685 = _2587;
        _2687 = _2588;
    }
    float _2699 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2700 = _2699 == 3.0;
    float _2701 = log2(_2687);
    float _2708 = exp2(_2701 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2530 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _820))) + ((_2536 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _2709 = exp2(_2701 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2532 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _820))) + ((_2538 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _2710 = exp2(_2701 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2534 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _820))) + ((_2540 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1625)) * cbPerFrame._m0[3u].x));
    float _2719 = (_2699 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2719 * (_2700 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.y = _2719 * (_2700 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2683)));
    SV_Target.z = _2719 * (_2700 ? _2710 : (_2710 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.w = cbInstanceData._m0[_2560].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2560].w;
}


