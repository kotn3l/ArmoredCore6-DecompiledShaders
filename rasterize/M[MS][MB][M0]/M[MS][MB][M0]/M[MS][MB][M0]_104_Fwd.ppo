#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1259;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3564 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _436 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _455 = _453.x;
    float _456 = _453.y;
    float _457 = _453.z;
    float _466 = ((_436.z - _457) * _382) + _457;
    float _469 = ((((_436.x - _455) * _382) + _455) * 2.0) + (-1.0);
    float _470 = ((((_436.y - _456) * _382) + _456) * 2.0) + (-1.0);
    float _471 = dot(vec2(_469, _470), vec2(_469, _470));
    float _3575 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))));
    float _479 = _469 + ((((_409.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _480 = _470 + ((((_409.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _483 = fma(_476, _235, fma(_480, _242, _479 * _228));
    float _486 = fma(_476, _236, fma(_480, _243, _479 * _229));
    float _489 = fma(_476, _237, fma(_480, _244, _479 * _230));
    float _493 = inversesqrt(dot(vec3(_483, _486, _489), vec3(_483, _486, _489)));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _539 = _537.x;
    float _540 = 1.0 - _539;
    float _546 = (cbMtdParam._m0[19u].x + dot(vec4(_493 * _483, _493 * _486, _493 * _489, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_539 - _540) * cbMtdParam._m0[24u].z) + _540) * cbMtdParam._m0[21u].z);
    float _3586 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
    float _549 = (-0.0) - cbMtdParam._m0[24u].y;
    float _551 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _551 : (isnan(_551) ? 1.0 : min(_551, 1.0));
    float _559 = _547 - ((_547 * TEXCOORD_8.x) * _552);
    float _560 = _547 - ((_547 * TEXCOORD_8.y) * _552);
    float _561 = _547 - ((_547 * TEXCOORD_8.z) * _552);
    float _568 = (_559 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _569 = (_560 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _570 = (_561 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _613 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_584 - _585) * cbMtdParam._m0[24u].w) + _585) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3607 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _622 = ((((cbMtdParam._m0[10u].x - _568) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _614) + _568;
    float _623 = ((((cbMtdParam._m0[10u].y - _569) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _614) + _569;
    float _624 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _570)) * _614) + _570;
    float _629 = (((_409.z - _466) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _466;
    vec4 _643 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _650 = (_643.x * 2.0) + (-1.0);
    float _651 = (_643.y * 2.0) + (-1.0);
    float _652 = dot(vec2(_650, _651), vec2(_650, _651));
    float _3618 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _660 = ((_643.z - _629) * _559) + _629;
    float _663 = ((cbMtdParam._m0[23u].y - _660) * _614) + _660;
    vec4 _682 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _688 = (_682.x * 2.0) + (-1.0);
    float _689 = (_682.y * 2.0) + (-1.0);
    float _690 = dot(vec2(_688, _689), vec2(_688, _689));
    float _3629 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _705 = ((sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) - _476) * _561) + _476;
    float _708 = (((_650 - _479) * _559) + _479) + (cbMtdParam._m0[21u].x * _479);
    float _709 = (((_651 - _480) * _560) + _480) + (cbMtdParam._m0[21u].x * _480);
    float _720 = (((_688 - _708) + (_708 * cbMtdParam._m0[22u].z)) * _614) + _708;
    float _721 = (((_689 - _709) + (_709 * cbMtdParam._m0[22u].z)) * _614) + _709;
    float _722 = (_614 * (sqrt(1.0 - (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) - _705)) + _705;
    float _724 = cbMtdParam._m0[22u].x + _509.w;
    float _727 = fma(_722, _235, fma(_721, _242, _720 * _228));
    float _730 = fma(_722, _236, fma(_721, _243, _720 * _229));
    float _733 = fma(_722, _237, fma(_721, _244, _720 * _230));
    float _737 = inversesqrt(dot(vec3(_727, _730, _733), vec3(_727, _730, _733)));
    float _738 = _737 * _727;
    float _739 = _737 * _730;
    float _740 = _737 * _733;
    float _3640 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _741 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3662 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3673 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3684 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _810 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _800);
    float _811 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _800);
    float _812 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _800);
    float _816 = inversesqrt(dot(vec3(_810, _811, _812), vec3(_810, _811, _812)));
    float _817 = _810 * _816;
    float _818 = _811 * _816;
    float _819 = _812 * _816;
    float _825 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _826 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _844 = fma(_740, cbSceneParam._m0[5u].z, fma(_739, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _738));
    float _847 = fma(_740, cbSceneParam._m0[6u].z, fma(_739, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _738));
    float _850 = fma(_740, cbSceneParam._m0[7u].z, fma(_739, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _738));
    uint _864 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) * cbInstanceData._m0[_864].z;
    float _3695 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _825, cbSceneParam._m0[86u].y * _826));
    float _888 = ((isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * TEXCOORD_5.w) * _884.x;
    float _889 = dot(vec3(_738, _739, _740), vec3(_817, _818, _819));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _738) - _817;
    float _897 = (_892 * _739) - _818;
    float _898 = (_892 * _740) - _819;
    float _902 = abs(dot(vec3(_817, _818, _819), vec3(_738, _739, _740)));
    float _3728 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_741);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1258;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _987 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _991 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1016 = _949 + _738;
        float _1017 = _953 + _739;
        float _1018 = _957 + _740;
        float _1028 = fma(_1018, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016)) - _983;
        float _1029 = fma(_1018, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016)) - _987;
        float _1030 = fma(_1018, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016)) - _991;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1086 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1052.x + (-0.5));
        float _1088 = _1086 * (_1052.y + (-0.5));
        float _1089 = _1086 * (_1052.z + (-0.5));
        float _1096 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1059.x + (-0.5));
        float _1098 = _1096 * (_1059.y + (-0.5));
        float _1099 = _1096 * (_1059.z + (-0.5));
        float _1106 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1066.x + (-0.5));
        float _1108 = _1106 * (_1066.y + (-0.5));
        float _1109 = _1106 * (_1066.z + (-0.5));
        float _1116 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1073.x + (-0.5));
        float _1118 = _1116 * (_1073.y + (-0.5));
        float _1119 = _1116 * (_1073.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1140 = (dot(vec3(_738, _739, _740), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1150 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3776 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1152 + 1.0))) + _1157) * _1120;
        float _1167 = _1088 * 0.5;
        float _1168 = _1098 * 0.5;
        float _1169 = _1108 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_738, _739, _740), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3809 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1194 + 1.0))) + _1199) * _1121;
        float _1209 = _1089 * 0.5;
        float _1210 = _1099 * 0.5;
        float _1211 = _1109 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_738, _739, _740), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3842 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1236 + 1.0))) + _1241) * _1122;
        _1258 = _1089;
        _1260 = _1088;
        _1261 = _1087;
        _1262 = _1099;
        _1263 = _1098;
        _1264 = _1097;
        _1265 = _1109;
        _1266 = _1108;
        _1267 = _1107;
        _1268 = _1122;
        _1269 = _1121;
        _1270 = _1120;
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _1259;
        _1260 = _1259;
        _1261 = _1259;
        _1262 = _1259;
        _1263 = _1259;
        _1264 = _1259;
        _1265 = _1259;
        _1266 = _1259;
        _1267 = _1259;
        _1268 = _1259;
        _1269 = _1259;
        _1270 = _1259;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1298 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1302 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1306 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1329 = _949 + _738;
        float _1330 = _953 + _739;
        float _1331 = _957 + _740;
        float _1341 = fma(_1331, cbModelParam._m0[30u].z, fma(_1330, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1329)) - _1298;
        float _1342 = fma(_1331, cbModelParam._m0[31u].z, fma(_1330, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1329)) - _1302;
        float _1343 = fma(_1331, cbModelParam._m0[32u].z, fma(_1330, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1329)) - _1306;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1360 = ((_1347 * _1341) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1298 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1347 * _1342) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1302 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1347 * _1343) / cbModelParam._m0[35u].z) + ((((((_1306 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        float _1397 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1364.x + (-0.5));
        float _1399 = _1397 * (_1364.y + (-0.5));
        float _1400 = _1397 * (_1364.z + (-0.5));
        float _1407 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1371.x + (-0.5));
        float _1409 = _1407 * (_1371.y + (-0.5));
        float _1410 = _1407 * (_1371.z + (-0.5));
        float _1417 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1378.x + (-0.5));
        float _1419 = _1417 * (_1378.y + (-0.5));
        float _1420 = _1417 * (_1378.z + (-0.5));
        float _1427 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1385.x + (-0.5));
        float _1429 = _1427 * (_1385.y + (-0.5));
        float _1430 = _1427 * (_1385.z + (-0.5));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = _1398 * 0.5;
        float _1435 = _1408 * 0.5;
        float _1436 = _1418 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_738, _739, _740), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3905 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1461 + 1.0))) + _1466) * _1431;
        float _1476 = _1399 * 0.5;
        float _1477 = _1409 * 0.5;
        float _1478 = _1419 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_738, _739, _740), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _3938 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1503 + 1.0))) + _1508) * _1432;
        float _1518 = _1400 * 0.5;
        float _1519 = _1410 * 0.5;
        float _1520 = _1420 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_738, _739, _740), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _3971 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1545 + 1.0))) + _1550) * _1433;
        _1567 = _1400;
        _1568 = _1399;
        _1569 = _1398;
        _1570 = _1410;
        _1571 = _1409;
        _1572 = _1408;
        _1573 = _1420;
        _1574 = _1419;
        _1575 = _1418;
        _1576 = _1433;
        _1577 = _1432;
        _1578 = _1431;
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
    }
    else
    {
        _1567 = _1259;
        _1568 = _1259;
        _1569 = _1259;
        _1570 = _1259;
        _1571 = _1259;
        _1572 = _1259;
        _1573 = _1259;
        _1574 = _1259;
        _1575 = _1259;
        _1576 = _1259;
        _1577 = _1259;
        _1578 = _1259;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1271)) + _1271;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1272)) + _1272;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1273)) + _1273;
    float _1614 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1591 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1591 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1591));
    float _1635 = _896 * 0.5;
    float _1636 = _897 * 0.5;
    float _1637 = _898 * 0.5;
    float _1638 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1641 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1644 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1678;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1651 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1258, _1262, _1265, _1268));
        float _1655 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1659 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1666 = dot(vec4(cbModelParam._m0[39u]), vec4(_1635, _1636, _1637, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1689;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1680 = dot(vec4(cbModelParam._m0[40u]), vec4(_1635, _1636, _1637, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1693 = (_1689 * cbModelParam._m0[1u].x) + (_1678 * (1.0 - cbModelParam._m0[1u].x));
    float _1703 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _741);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1703 : min(cbModelParam._m0[25u].z, _1703));
    float _1785;
    float _1787;
    float _1789;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1752 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1756 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1760 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1763 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1766 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1769 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1797;
        if (_1763 > 0.0)
        {
            _1797 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1797 = frontier_phi_14_12_ladder;
        }
        float _1998;
        if (_1766 > 0.0)
        {
            _1998 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1998 = frontier_phi_23_19_ladder;
        }
        float _2241;
        if (_1769 > 0.0)
        {
            _2241 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2241 = frontier_phi_35_30_ladder;
        }
        float _2243 = isnan(_1998) ? _1797 : (isnan(_1797) ? _1998 : min(_1797, _1998));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1763) + _1752;
        float _2249 = (_2244 * _1766) + _1756;
        float _2250 = (_2244 * _1769) + _1760;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2251;
        float _2255 = _2251 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 > _2255) || ((_2249 < _2253) || ((_2248 < _2253) || (_2248 > _2255))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2374 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2250, cbModelParam._m0[9u].z, fma(_2249, cbModelParam._m0[9u].y, _2248 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2250, cbModelParam._m0[10u].z, fma(_2249, cbModelParam._m0[10u].y, _2248 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2250, cbModelParam._m0[11u].z, fma(_2249, cbModelParam._m0[11u].y, _2248 * cbModelParam._m0[11u].x))), _1704);
            frontier_phi_13_35_ladder = _2374.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2374.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2374.x * cbModelParam._m0[1u].y;
        }
        _1785 = frontier_phi_13_35_ladder_2;
        _1787 = frontier_phi_13_35_ladder_1;
        _1789 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1704);
        _1785 = _1773.x * cbModelParam._m0[1u].y;
        _1787 = _1773.y * cbModelParam._m0[1u].y;
        _1789 = _1773.z * cbModelParam._m0[1u].y;
    }
    float _1793 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _741);
    float _1794 = isnan(_1793) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1793 : min(cbModelParam._m0[25u].w, _1793));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1848 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1852 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1856 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1859 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1862 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1865 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2003;
        if (_1859 > 0.0)
        {
            _2003 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2268;
        if (_1862 > 0.0)
        {
            _2268 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2268 = frontier_phi_37_32_ladder;
        }
        float _2473;
        if (_1865 > 0.0)
        {
            _2473 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2473 = frontier_phi_46_43_ladder;
        }
        float _2475 = isnan(_2268) ? _2003 : (isnan(_2003) ? _2268 : min(_2003, _2268));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1859) + _1848;
        float _2481 = (_2476 * _1862) + _1852;
        float _2482 = (_2476 * _1865) + _1856;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1794);
            frontier_phi_22_46_ladder = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2681.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2681.x * cbModelParam._m0[1u].z;
        }
        _1884 = frontier_phi_22_46_ladder_2;
        _1886 = frontier_phi_22_46_ladder_1;
        _1888 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1794);
        _1884 = _1868.x * cbModelParam._m0[1u].z;
        _1886 = _1868.y * cbModelParam._m0[1u].z;
        _1888 = _1868.z * cbModelParam._m0[1u].z;
    }
    float _1900 = ((((1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_917 * _904)) * _888;
    float _1901 = _1900 * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1902 = _1900 * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1903 = _1900 * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1906 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1909 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1912 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, _1901 * cbSceneParam._m0[91u].x));
    uvec4 _1922 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1924 = _1922.x * 14u;
    uint _1925 = _1924 + 13u;
    float _1932 = _888 + (-1.0);
    float _1937 = (cbLight._m0[_1925].x * _1932) + 1.0;
    float _1938 = (cbLight._m0[_1925].y * _1932) + 1.0;
    float _1939 = (cbLight._m0[_1925].z * _1932) + 1.0;
    float _1940 = (cbLight._m0[_1925].w * _1932) + 1.0;
    uint _1941 = _1924 + 5u;
    float _1947 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1951 = _1924 + 4u;
    float _1957 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1961 = _1924 | 1u;
    float _1972 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_738, _739, _740));
    float _1975 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_738, _739, _740));
    float _4107 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _4118 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1980 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * 0.3183098733425140380859375;
    float _1982 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _1989 = ((cbLight._m0[_1941].x * _1947) * _1982) + ((cbLight._m0[_1951].x * _1957) * _1980);
    float _1990 = ((_1947 * cbLight._m0[_1941].y) * _1982) + ((_1957 * cbLight._m0[_1951].y) * _1980);
    float _1991 = ((_1947 * cbLight._m0[_1941].z) * _1982) + ((_1957 * cbLight._m0[_1951].z) * _1980);
    uvec4 _1995 = floatBitsToUint(cbLight._m0[_1924 + 12u]);
    bool _1997 = _1995.x == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1997)
    {
        _2008 = _1989;
        _2010 = _1990;
        _2012 = _1991;
    }
    else
    {
        uint _2016 = _1924 + 6u;
        float _2032 = (dot(vec3(cbLight._m0[_1924 + 2u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _4129 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2035 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2008 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1989;
        _2010 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1990;
        _2012 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1991;
    }
    bool _2015 = _1995.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_2015)
    {
        _2053 = _2008;
        _2055 = _2010;
        _2057 = _2012;
    }
    else
    {
        uint _2212 = _1924 + 7u;
        float _2228 = (dot(vec3(cbLight._m0[_1924 + 3u].xyz), vec3(_738, _739, _740)) * 0.5) + 0.5;
        float _2229 = _2228 * _2228;
        float _4145 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2230 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2231 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2053 = (((cbLight._m0[_2212].x * 0.3183098733425140380859375) * _2230) * _2231) + _2008;
        _2055 = (((cbLight._m0[_2212].y * 0.3183098733425140380859375) * _2230) * _2231) + _2010;
        _2057 = (((cbLight._m0[_2212].z * 0.3183098733425140380859375) * _2230) * _2231) + _2012;
    }
    uint _2060 = _1924 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1924].w)) * _741) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1924].x + _817;
    float _2076 = cbLight._m0[_1924].y + _818;
    float _2077 = cbLight._m0[_1924].z + _819;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_1924].xyz));
    float _4161 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2089 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2090 = dot(vec3(_738, _739, _740), vec3(_2082, _2083, _2084));
    float _4183 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1924].xyz), vec3(_2082, _2083, _2084));
    float _4194 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2114 = 1.0 - _2074;
    float _2125 = (0.5 / (((_2089 * ((_2088 * _2114) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2114) + _2074) * _2088))) * _2088;
    float _4205 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2138 = _1924 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _741) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_1961].x + _817;
    float _2152 = cbLight._m0[_1961].y + _818;
    float _2153 = cbLight._m0[_1961].z + _819;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_1961].xyz));
    float _4216 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _2165 = dot(vec3(_738, _739, _740), vec3(_2158, _2159, _2160));
    float _4227 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2158, _2159, _2160));
    float _4238 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2150;
    float _2197 = (0.5 / (((_2089 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2187) + _2150) * _2164))) * _2164;
    float _4249 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2209 = (((_2186 * cbLight._m0[_2138].x) * _2199) * _1947) + (((_2113 * cbLight._m0[_2060].x) * _2127) * _1957);
    float _2210 = (((_2186 * cbLight._m0[_2138].y) * _2199) * _1947) + (((_2113 * cbLight._m0[_2060].y) * _2127) * _1957);
    float _2211 = (((_2186 * cbLight._m0[_2138].z) * _2199) * _1947) + (((_2113 * cbLight._m0[_2060].z) * _2127) * _1957);
    float _2273;
    float _2275;
    float _2277;
    if (_1997)
    {
        _2273 = _2209;
        _2275 = _2210;
        _2277 = _2211;
    }
    else
    {
        uint _2279 = _1924 + 2u;
        uint _2283 = _1924 + 10u;
        float _2297 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _741) * 0.949999988079071044921875);
        float _2298 = _2297 * _2297;
        float _2299 = cbLight._m0[_2279].x + _817;
        float _2300 = cbLight._m0[_2279].y + _818;
        float _2301 = cbLight._m0[_2279].z + _819;
        float _2305 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
        float _2306 = _2305 * _2299;
        float _2307 = _2305 * _2300;
        float _2308 = _2305 * _2301;
        float _2309 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2279].xyz));
        float _4260 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2313 = dot(vec3(_738, _739, _740), vec3(_2306, _2307, _2308));
        float _4271 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2317 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2306, _2307, _2308));
        float _4282 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2321 = _2298 * _2298;
        float _2325 = ((_2316 * _2316) * (_2321 + (-1.0))) + 1.0;
        float _2334 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2335 = 1.0 - _2298;
        float _2345 = (0.5 / (((_2089 * ((_2312 * _2335) + _2298)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2335) + _2298) * _2312))) * _2312;
        float _4293 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2347 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2321 / ((_2325 * _2325) * 3.141590118408203125));
        float _2348 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
        _2273 = (((_2334 * cbLight._m0[_2283].x) * _2347) * _2348) + _2209;
        _2275 = (((_2334 * cbLight._m0[_2283].y) * _2347) * _2348) + _2210;
        _2277 = (((_2334 * cbLight._m0[_2283].z) * _2347) * _2348) + _2211;
    }
    float _2383;
    float _2385;
    float _2387;
    if (_2015)
    {
        _2383 = _2273;
        _2385 = _2275;
        _2387 = _2277;
    }
    else
    {
        uint _2394 = _1924 + 3u;
        uint _2398 = _1924 + 11u;
        float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _741) * 0.949999988079071044921875);
        float _2413 = _2412 * _2412;
        float _2414 = cbLight._m0[_2394].x + _817;
        float _2415 = cbLight._m0[_2394].y + _818;
        float _2416 = cbLight._m0[_2394].z + _819;
        float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
        float _2421 = _2420 * _2414;
        float _2422 = _2420 * _2415;
        float _2423 = _2420 * _2416;
        float _2424 = dot(vec3(_738, _739, _740), vec3(cbLight._m0[_2394].xyz));
        float _4309 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2428 = dot(vec3(_738, _739, _740), vec3(_2421, _2422, _2423));
        float _4320 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2432 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2421, _2422, _2423));
        float _4331 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2436 = _2413 * _2413;
        float _2440 = ((_2431 * _2431) * (_2436 + (-1.0))) + 1.0;
        float _2449 = (exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2450 = 1.0 - _2413;
        float _2460 = (0.5 / (((_2089 * ((_2427 * _2450) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2450) + _2413) * _2427))) * _2427;
        float _4342 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2436 / ((_2440 * _2440) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1940 : (isnan(_1940) ? 1.0 : min(_1940, 1.0));
        _2383 = (((_2449 * cbLight._m0[_2398].x) * _2462) * _2463) + _2273;
        _2385 = (((_2449 * cbLight._m0[_2398].y) * _2462) * _2463) + _2275;
        _2387 = (((_2449 * cbLight._m0[_2398].z) * _2462) * _2463) + _2277;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1922.y == 0u)
    {
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2538;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2538;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2538;
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _826) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _825) / _2554)));
        float _2575 = (log2(_2541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2846)
                {
                    frontier_phi_61_pred = _2830;
                    frontier_phi_61_pred_1 = _2835;
                    frontier_phi_61_pred_2 = _2834;
                    frontier_phi_61_pred_3 = _2833;
                    frontier_phi_61_pred_4 = _2832;
                    frontier_phi_61_pred_5 = _2831;
                }
                else
                {
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    uint _2960;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2845;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    for (;;)
                    {
                        uint _2964 = uint(findLSB(_2960)) + (_2836 << 5u);
                        uint _2961 = (_2960 + 4294967295u) & _2960;
                        uint _2966 = _2964 * 48u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2986 = (_2964 * 48u) + 4u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3005 = (_2964 * 48u) + 8u;
                        vec3 _3016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x));
                        float _3020 = _2980.x - _2539;
                        float _3021 = _2980.y - _2540;
                        float _3022 = _2980.z - _2541;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_844, _847, _850), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2980.w);
                        float _4368 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3037 = sqrt(_3023) * _2999.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _3030) + _3041;
                        float _3047 = _3037 * _3037;
                        float _3051 = ((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3036) / ((_3047 * 0.699999988079071044921875) + 1.0);
                        float _3055 = (-0.0) - _2539;
                        float _3056 = (-0.0) - _2540;
                        float _3057 = (-0.0) - _2541;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3072 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                        float _3073 = 1.0 - _904;
                        float _3080 = sqrt(1.0 - ((1.0 - (_3073 * _3073)) * (1.0 - (_3072 * _3072))));
                        float _3081 = _3080 * _3080;
                        float _3082 = _3081 * _3081;
                        float _3083 = _3062 + _3027;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3093 = dot(vec3(_844, _847, _850), vec3(_3062, _3063, _3064));
                        float _4384 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3096 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3097 = dot(vec3(_844, _847, _850), vec3(_3089 * _3083, _3089 * _3084, _3089 * _3085));
                        float _4395 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3100 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3104 = ((_3100 * _3100) * (_3082 + (-1.0))) + 1.0;
                        float _3105 = _3040 * _3081;
                        float _3106 = _3105 * _3105;
                        float _3109 = ((1.0 - _3106) * _3030) + _3106;
                        float _4406 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3110 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3111 = 1.0 - _3081;
                        float _3121 = (0.5 / (((_3110 * ((_3096 * _3111) + _3081)) + 9.9999999392252902907785028219223e-09) + (((_3110 * _3111) + _3081) * _3096))) * _3110;
                        float _4417 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3132 = (((_3082 * 3.1415927410125732421875) * (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) / ((_3104 * _3104) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2889 = (_3051 * _2999.x) + _2957;
                        _2890 = (_3051 * _2999.y) + _2958;
                        _2891 = (_3051 * _2999.z) + _2959;
                        _2886 = (_3132 * _3016.x) + _2954;
                        _2887 = (_3132 * _3016.y) + _2955;
                        _2888 = (_3132 * _3016.z) + _2956;
                        if (_2961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2961;
                        }
                    }
                    frontier_phi_61_pred = _2886;
                    frontier_phi_61_pred_1 = _2891;
                    frontier_phi_61_pred_2 = _2890;
                    frontier_phi_61_pred_3 = _2889;
                    frontier_phi_61_pred_4 = _2888;
                    frontier_phi_61_pred_5 = _2887;
                }
                _2687 = frontier_phi_61_pred;
                _2697 = frontier_phi_61_pred_1;
                _2695 = frontier_phi_61_pred_2;
                _2693 = frontier_phi_61_pred_3;
                _2691 = frontier_phi_61_pred_4;
                _2689 = frontier_phi_61_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2687;
                    _2831 = _2689;
                    _2832 = _2691;
                    _2833 = _2693;
                    _2834 = _2695;
                    _2835 = _2697;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2703) & _2585) == 0u)
        {
            _2798 = _2686;
            _2800 = _2688;
            _2802 = _2690;
            _2804 = _2692;
            _2806 = _2694;
            _2808 = _2696;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
            float _2824 = _2823 * _2539;
            float _2825 = _2823 * _2540;
            float _2826 = _2823 * _2541;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2937 = _2686;
                float _2938 = _2688;
                float _2939 = _2690;
                float _2940 = _2692;
                float _2941 = _2694;
                float _2942 = _2696;
                uint _2943 = _2703;
                uint _2952;
                bool _2953;
                for (;;)
                {
                    _2952 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                    _2953 = _2952 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2953)
                    {
                        frontier_phi_67_pred = _2940;
                        frontier_phi_67_pred_1 = _2941;
                        frontier_phi_67_pred_2 = _2942;
                        frontier_phi_67_pred_3 = _2939;
                        frontier_phi_67_pred_4 = _2938;
                        frontier_phi_67_pred_5 = _2937;
                    }
                    else
                    {
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3150 = _2937;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        uint _3156 = _2952;
                        uint _3157;
                        vec4 _3182;
                        float _3183;
                        vec4 _3198;
                        vec3 _3210;
                        vec4 _3225;
                        vec4 _3240;
                        float _3286;
                        bool _3287;
                        for (;;)
                        {
                            uint _3167 = ((_2943 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3156));
                            _3157 = (_3156 + 4294967295u) & _3156;
                            uint _3169 = _3167 * 40u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            _3183 = _3182.w;
                            uint _3185 = (_3167 * 40u) + 4u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3200 = (_3167 * 40u) + 8u;
                            _3210 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x));
                            uint _3212 = (_3167 * 40u) + 16u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3227 = (_3167 * 40u) + 20u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3167 * 40u) + 24u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            uint _3261 = (_3167 * 40u) + 28u;
                            vec4 _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            _3286 = fma(_2541, _3274.z, fma(_2540, _3274.y, _3274.x * _2539)) + _3274.w;
                            _3287 = !((fma(_2541, _3255.z, fma(_2540, _3255.y, _3255.x * _2539)) + _3255.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3287)
                            {
                                float _3314 = _3182.x - _2539;
                                float _3315 = _3182.y - _2540;
                                float _3316 = _3182.z - _2541;
                                float _3317 = dot(vec3(_3314, _3315, _3316), vec3(_3314, _3315, _3316));
                                float _3320 = inversesqrt(_3317);
                                float _3321 = _3320 * _3314;
                                float _3322 = _3320 * _3315;
                                float _3323 = _3320 * _3316;
                                float _3327 = 1.0 - (_3317 / (_3183 * _3183));
                                float _4428 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3332 = sqrt(_3317) * _3198.w;
                                float _3334 = 1.39999997615814208984375 / (_3332 + 1.39999997615814208984375);
                                float _3335 = _3334 * _3334;
                                float _3338 = ((1.0 - _3335) * dot(vec3(_3321, _3322, _3323), vec3(_844, _847, _850))) + _3335;
                                float _3341 = _3332 * _3332;
                                float _3345 = (fma(_2541, _3225.z, fma(_2540, _3225.y, _3225.x * _2539)) + _3225.w) / _3286;
                                float _3346 = (fma(_2541, _3240.z, fma(_2540, _3240.y, _3240.x * _2539)) + _3240.w) / _3286;
                                float _3350 = 1.0 - dot(vec2(_3345, _3346), vec2(_3345, _3346));
                                float _4444 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3352 = _3351 * (((isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))) * _3328) / ((_3341 * 0.699999988079071044921875) + 1.0));
                                float _3364 = exp2(log2(1.0 / ((_3341 * 3.5) + 5.0)) * 0.25);
                                float _3365 = 1.0 - _904;
                                float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                                float _3373 = _3372 * _3372;
                                float _3374 = _3373 * _3373;
                                float _3375 = _3321 - _2824;
                                float _3376 = _3322 - _2825;
                                float _3377 = _3323 - _2826;
                                float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                                float _3385 = dot(vec3(_844, _847, _850), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4455 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3388 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3389 = dot(vec3(_844, _847, _850), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                                float _4466 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                                float _3397 = _3334 * _3373;
                                float _3398 = _3397 * _3397;
                                float _3404 = ((1.0 - _3398) * dot(vec3(_844, _847, _850), vec3(_3321, _3322, _3323))) + _3398;
                                float _4477 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3406 = 1.0 - _3373;
                                float _3416 = (0.5 / (((_3405 * ((_3388 * _3406) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3405 * _3406) + _3373) * _3388))) * _3405;
                                float _4488 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3426 = (_3351 * _3328) * (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) / ((_3396 * _3396) * ((_3341 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3426 * _3210.x;
                                frontier_phi_73_pred_1 = _3426 * _3210.y;
                                frontier_phi_73_pred_2 = _3352 * _3198.z;
                                frontier_phi_73_pred_3 = _3352 * _3198.y;
                                frontier_phi_73_pred_4 = _3352 * _3198.x;
                                frontier_phi_73_pred_5 = _3426 * _3210.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3430 = frontier_phi_73_pred;
                            _3431 = frontier_phi_73_pred_1;
                            _3435 = frontier_phi_73_pred_2;
                            _3434 = frontier_phi_73_pred_3;
                            _3433 = frontier_phi_73_pred_4;
                            _3432 = frontier_phi_73_pred_5;
                            _3140 = _3433 + _3153;
                            _3141 = _3434 + _3154;
                            _3142 = _3435 + _3155;
                            _3137 = _3430 + _3150;
                            _3138 = _3431 + _3151;
                            _3139 = _3432 + _3152;
                            if (_3157 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3157;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3140;
                        frontier_phi_67_pred_1 = _3141;
                        frontier_phi_67_pred_2 = _3142;
                        frontier_phi_67_pred_3 = _3139;
                        frontier_phi_67_pred_4 = _3138;
                        frontier_phi_67_pred_5 = _3137;
                    }
                    _2805 = frontier_phi_67_pred;
                    _2807 = frontier_phi_67_pred_1;
                    _2809 = frontier_phi_67_pred_2;
                    _2803 = frontier_phi_67_pred_3;
                    _2801 = frontier_phi_67_pred_4;
                    _2799 = frontier_phi_67_pred_5;
                    uint _2944 = _2943 + 1u;
                    if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2937 = _2799;
                        _2938 = _2801;
                        _2939 = _2803;
                        _2940 = _2805;
                        _2941 = _2807;
                        _2942 = _2809;
                        _2943 = _2944;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2807;
                frontier_phi_55_56_ladder_1 = _2809;
                frontier_phi_55_56_ladder_2 = _2805;
                frontier_phi_55_56_ladder_3 = _2803;
                frontier_phi_55_56_ladder_4 = _2801;
                frontier_phi_55_56_ladder_5 = _2799;
            }
            else
            {
                frontier_phi_55_56_ladder = _2694;
                frontier_phi_55_56_ladder_1 = _2696;
                frontier_phi_55_56_ladder_2 = _2692;
                frontier_phi_55_56_ladder_3 = _2690;
                frontier_phi_55_56_ladder_4 = _2688;
                frontier_phi_55_56_ladder_5 = _2686;
            }
            _2798 = frontier_phi_55_56_ladder_5;
            _2800 = frontier_phi_55_56_ladder_4;
            _2802 = frontier_phi_55_56_ladder_3;
            _2804 = frontier_phi_55_56_ladder_2;
            _2806 = frontier_phi_55_56_ladder;
            _2808 = frontier_phi_55_56_ladder_1;
        }
        float _2813 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2598 = (_2813 * _2804) + _2053;
        _2600 = (_2813 * _2806) + _2055;
        _2602 = (_2813 * _2808) + _2057;
        _2604 = ((_2798 * 0.039999999105930328369140625) * _2813) + _2383;
        _2606 = ((_2800 * 0.039999999105930328369140625) * _2813) + _2385;
        _2608 = ((_2802 * 0.039999999105930328369140625) * _2813) + _2387;
    }
    else
    {
        _2598 = _2053;
        _2600 = _2055;
        _2602 = _2057;
        _2604 = _2383;
        _2606 = _2385;
        _2608 = _2387;
    }
    float _4504 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4515 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4526 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    uint _2628 = _247 + 6u;
    float _2636 = _825 / cbSceneParam._m0[86u].x;
    float _2637 = _826 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2712 = _2711 / _759;
        float _2723 = _2712 * _810;
        float _2724 = _811 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2726 = _2712 * _812;
        float _2728 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2724;
        float _2736 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2899;
        if (abs((_2725 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2899 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2861 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2899 = ((abs(_2736 / _2725) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2746 * _2870) - exp2(_2746 * _2871)) * _2859))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2901 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2910 = exp2((_2899 * (-1.44269502162933349609375)) * (1.0 - _2901.w));
        float _2911 = log2(_2910);
        float _2927 = log2(_2656);
        _2748 = (exp2(_2927 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].x)) * _2901.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2750 = (exp2(_2927 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].y)) * _2901.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2752 = (exp2(_2927 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].z)) * _2901.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2754 = _2910 * _2656;
    }
    else
    {
        _2748 = _2653;
        _2750 = _2654;
        _2752 = _2655;
        _2754 = _2656;
    }
    float _2766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2767 = _2766 == 3.0;
    float _2768 = log2(_2754);
    float _2775 = exp2(_2768 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2598 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _888))) + ((_2604 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1693)) * cbPerFrame._m0[3u].x));
    float _2776 = exp2(_2768 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2600 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _888))) + ((_2606 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1693)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2768 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2602 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _888))) + ((_2608 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1693)) * cbPerFrame._m0[3u].x));
    float _2786 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2786 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.y = _2786 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.z = _2786 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.w = cbInstanceData._m0[_2628].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
}


