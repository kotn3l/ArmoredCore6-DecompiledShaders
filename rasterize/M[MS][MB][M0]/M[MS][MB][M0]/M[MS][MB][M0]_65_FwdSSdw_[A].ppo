#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1138;
float _3524;
float _3525;
float _3526;
float _3527;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3536 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3547 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3558 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3569 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) + _428;
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _505 = ((_475.z - _496) * _409) + _496;
    float _508 = ((((_475.x - _494) * _409) + _494) * 2.0) + (-1.0);
    float _509 = ((((_475.y - _495) * _409) + _495) * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3580 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _515 = sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _549 = (_508 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_450.x * 2.0) + (-1.0)))) + (((_537.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _550 = (_509 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_450.y * 2.0) + (-1.0)))) + (((_537.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _555 = (((_450.z - _505) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _505;
    float _559 = ((_537.z - _555) * cbMtdParam._m0[19u].w) + _555;
    float _561 = cbMtdParam._m0[22u].x + _537.w;
    float _564 = fma(_515, _226 * NORMAL.x, fma(_550, _233 * TANGENT.x, (_219 * _211) * _549));
    float _567 = fma(_515, _226 * NORMAL.y, fma(_550, _233 * TANGENT.y, (_219 * _212) * _549));
    float _570 = fma(_515, _226 * NORMAL.z, fma(_550, _233 * TANGENT.z, (_219 * _213) * _549));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3591 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _578 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3613 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3624 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3635 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _648 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _638);
    float _649 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _638);
    float _650 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _638);
    float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
    float _655 = _648 * _654;
    float _656 = _649 * _654;
    float _657 = _650 * _654;
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _818 = sqrt(((_648 * _648) + (_649 * _649)) + (_650 * _650));
        float _824 = (cbMatDynParam._m0[5u].x * _818) + cbMatDynParam._m0[5u].y;
        float _3646 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _829 = (cbMatDynParam._m0[5u].z * _818) + cbMatDynParam._m0[5u].w;
        float _3657 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) - _825)) + _825) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _697 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _700 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _713 = _260 + 9u;
    uint _714 = _713 + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3668 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _738 = ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * TEXCOORD_5.w) * _734.x;
    float _739 = dot(vec3(_575, _576, _577), vec3(_655, _656, _657));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _575) - _655;
    float _747 = (_742 * _576) - _656;
    float _748 = (_742 * _577) - _657;
    float _752 = abs(dot(vec3(_655, _656, _657), vec3(_575, _576, _577)));
    float _3701 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_578);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1137;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _866 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _870 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _895 = _799 + _575;
        float _896 = _803 + _576;
        float _897 = _807 + _577;
        float _907 = fma(_897, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895)) - _862;
        float _908 = fma(_897, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895)) - _866;
        float _909 = fma(_897, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895)) - _870;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_862 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_866 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[34u].z) + ((((((_870 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _965 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_931.x + (-0.5));
        float _967 = _965 * (_931.y + (-0.5));
        float _968 = _965 * (_931.z + (-0.5));
        float _975 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_938.x + (-0.5));
        float _977 = _975 * (_938.y + (-0.5));
        float _978 = _975 * (_938.z + (-0.5));
        float _985 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_945.x + (-0.5));
        float _987 = _985 * (_945.y + (-0.5));
        float _988 = _985 * (_945.z + (-0.5));
        float _995 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_952.x + (-0.5));
        float _997 = _995 * (_952.y + (-0.5));
        float _998 = _995 * (_952.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1019 = (dot(vec3(_575, _576, _577), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1029 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3749 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1031 + 1.0))) + _1036) * _999;
        float _1046 = _967 * 0.5;
        float _1047 = _977 * 0.5;
        float _1048 = _987 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_575, _576, _577), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3782 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1073 + 1.0))) + _1078) * _1000;
        float _1088 = _968 * 0.5;
        float _1089 = _978 * 0.5;
        float _1090 = _988 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_575, _576, _577), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3815 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1115 + 1.0))) + _1120) * _1001;
        _1137 = _968;
        _1139 = _967;
        _1140 = _966;
        _1141 = _978;
        _1142 = _977;
        _1143 = _976;
        _1144 = _988;
        _1145 = _987;
        _1146 = _986;
        _1147 = _1001;
        _1148 = _1000;
        _1149 = _999;
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _1138;
        _1139 = _1138;
        _1140 = _1138;
        _1141 = _1138;
        _1142 = _1138;
        _1143 = _1138;
        _1144 = _1138;
        _1145 = _1138;
        _1146 = _1138;
        _1147 = _1138;
        _1148 = _1138;
        _1149 = _1138;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1180 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1184 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1188 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1211 = _799 + _575;
        float _1212 = _803 + _576;
        float _1213 = _807 + _577;
        float _1223 = fma(_1213, cbModelParam._m0[30u].z, fma(_1212, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211)) - _1180;
        float _1224 = fma(_1213, cbModelParam._m0[31u].z, fma(_1212, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211)) - _1184;
        float _1225 = fma(_1213, cbModelParam._m0[32u].z, fma(_1212, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211)) - _1188;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1180 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1184 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[35u].z) + ((((((_1188 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1279 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1246.x + (-0.5));
        float _1281 = _1279 * (_1246.y + (-0.5));
        float _1282 = _1279 * (_1246.z + (-0.5));
        float _1289 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1253.x + (-0.5));
        float _1291 = _1289 * (_1253.y + (-0.5));
        float _1292 = _1289 * (_1253.z + (-0.5));
        float _1299 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1260.x + (-0.5));
        float _1301 = _1299 * (_1260.y + (-0.5));
        float _1302 = _1299 * (_1260.z + (-0.5));
        float _1309 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1267.x + (-0.5));
        float _1311 = _1309 * (_1267.y + (-0.5));
        float _1312 = _1309 * (_1267.z + (-0.5));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = _1280 * 0.5;
        float _1317 = _1290 * 0.5;
        float _1318 = _1300 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_575, _576, _577), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3878 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1343 + 1.0))) + _1348) * _1313;
        float _1358 = _1281 * 0.5;
        float _1359 = _1291 * 0.5;
        float _1360 = _1301 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_575, _576, _577), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3911 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1385 + 1.0))) + _1390) * _1314;
        float _1400 = _1282 * 0.5;
        float _1401 = _1292 * 0.5;
        float _1402 = _1302 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_575, _576, _577), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3944 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1427 + 1.0))) + _1432) * _1315;
        _1449 = _1282;
        _1450 = _1281;
        _1451 = _1280;
        _1452 = _1292;
        _1453 = _1291;
        _1454 = _1290;
        _1455 = _1302;
        _1456 = _1301;
        _1457 = _1300;
        _1458 = _1315;
        _1459 = _1314;
        _1460 = _1313;
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1138;
        _1450 = _1138;
        _1451 = _1138;
        _1452 = _1138;
        _1453 = _1138;
        _1454 = _1138;
        _1455 = _1138;
        _1456 = _1138;
        _1457 = _1138;
        _1458 = _1138;
        _1459 = _1138;
        _1460 = _1138;
        _1461 = 0.0;
        _1462 = 0.0;
        _1463 = 0.0;
    }
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1150)) + _1150;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1151)) + _1151;
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1152)) + _1152;
    float _1496 = fma(_1475, cbSceneParam._m0[89u].z, fma(_1474, cbSceneParam._m0[89u].y, _1473 * cbSceneParam._m0[89u].x));
    float _1499 = fma(_1475, cbSceneParam._m0[90u].z, fma(_1474, cbSceneParam._m0[90u].y, _1473 * cbSceneParam._m0[90u].x));
    float _1502 = fma(_1475, cbSceneParam._m0[91u].z, fma(_1474, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1473));
    float _1517 = _746 * 0.5;
    float _1518 = _747 * 0.5;
    float _1519 = _748 * 0.5;
    float _1520 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1523 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1526 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1560;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1533 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1137, _1141, _1144, _1147));
        float _1537 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1541 = dot(vec4(_1517, _1518, _1519, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1548 = dot(vec4(cbModelParam._m0[39u]), vec4(_1517, _1518, _1519, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1571;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1562 = dot(vec4(cbModelParam._m0[40u]), vec4(_1517, _1518, _1519, 1.0));
        _1571 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1571 = 1.0;
    }
    float _1575 = (_1571 * cbModelParam._m0[1u].x) + (_1560 * (1.0 - cbModelParam._m0[1u].x));
    float _1585 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1585 : min(cbModelParam._m0[25u].z, _1585));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1635 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1639 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1643 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1646 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1649 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1652 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1680;
        if (_1646 > 0.0)
        {
            _1680 = abs((1.0 - _1635) / _1646);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1635 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1680 = frontier_phi_17_15_ladder;
        }
        float _1903;
        if (_1649 > 0.0)
        {
            _1903 = abs((1.0 - _1639) / _1649);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1639 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1903 = frontier_phi_26_22_ladder;
        }
        float _2149;
        if (_1652 > 0.0)
        {
            _2149 = abs((1.0 - _1643) / _1652);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1643 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2149 = frontier_phi_38_33_ladder;
        }
        float _2151 = isnan(_1903) ? _1680 : (isnan(_1680) ? _1903 : min(_1680, _1903));
        float _2152 = isnan(_2149) ? _2151 : (isnan(_2151) ? _2149 : min(_2151, _2149));
        float _2156 = (_2152 * _1646) + _1635;
        float _2157 = (_2152 * _1649) + _1639;
        float _2158 = (_2152 * _1652) + _1643;
        float _2159 = _2152 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2159;
        float _2163 = _2159 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 > _2163) || ((_2157 < _2161) || ((_2156 < _2161) || (_2156 > _2163))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2282 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2158, cbModelParam._m0[9u].z, fma(_2157, cbModelParam._m0[9u].y, _2156 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2158, cbModelParam._m0[10u].z, fma(_2157, cbModelParam._m0[10u].y, _2156 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2158, cbModelParam._m0[11u].z, fma(_2157, cbModelParam._m0[11u].y, _2156 * cbModelParam._m0[11u].x))), _1586);
            frontier_phi_16_38_ladder = _2282.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2282.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2282.x * cbModelParam._m0[1u].y;
        }
        _1668 = frontier_phi_16_38_ladder_2;
        _1670 = frontier_phi_16_38_ladder_1;
        _1672 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1586);
        _1668 = _1656.x * cbModelParam._m0[1u].y;
        _1670 = _1656.y * cbModelParam._m0[1u].y;
        _1672 = _1656.z * cbModelParam._m0[1u].y;
    }
    float _1676 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1677 = isnan(_1676) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1676 : min(cbModelParam._m0[25u].w, _1676));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1732 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1736 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1740 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1743 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1746 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1749 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1908;
        if (_1743 > 0.0)
        {
            _1908 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1908 = frontier_phi_28_24_ladder;
        }
        float _2176;
        if (_1746 > 0.0)
        {
            _2176 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2176 = frontier_phi_40_35_ladder;
        }
        float _2381;
        if (_1749 > 0.0)
        {
            _2381 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2381 = frontier_phi_49_46_ladder;
        }
        float _2383 = isnan(_2176) ? _1908 : (isnan(_1908) ? _2176 : min(_1908, _2176));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1743) + _1732;
        float _2389 = (_2384 * _1746) + _1736;
        float _2390 = (_2384 * _1749) + _1740;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2390, cbModelParam._m0[17u].z, fma(_2389, cbModelParam._m0[17u].y, _2388 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2390, cbModelParam._m0[18u].z, fma(_2389, cbModelParam._m0[18u].y, _2388 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2390, cbModelParam._m0[19u].z, fma(_2389, cbModelParam._m0[19u].y, _2388 * cbModelParam._m0[19u].x))), _1677);
            frontier_phi_25_49_ladder = _2589.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2589.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2589.x * cbModelParam._m0[1u].z;
        }
        _1768 = frontier_phi_25_49_ladder_2;
        _1770 = frontier_phi_25_49_ladder_1;
        _1772 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1677);
        _1768 = _1752.x * cbModelParam._m0[1u].z;
        _1770 = _1752.y * cbModelParam._m0[1u].z;
        _1772 = _1752.z * cbModelParam._m0[1u].z;
    }
    float _1784 = ((((1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_767 * _754)) * _738;
    float _1785 = _1784 * ((cbModelParam._m0[1u].w * (_1768 - _1668)) + _1668);
    float _1786 = _1784 * ((cbModelParam._m0[1u].w * (_1770 - _1670)) + _1670);
    float _1787 = _1784 * ((cbModelParam._m0[1u].w * (_1772 - _1672)) + _1672);
    float _1790 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, _1785 * cbSceneParam._m0[91u].x));
    vec4 _1804 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_675, _676));
    float _1806 = _1804.w;
    float _1818 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1806);
    float _1819 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1806);
    float _1820 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1806);
    uvec4 _1824 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1826 = _1824.x * 14u;
    uint _1827 = _1826 + 13u;
    float _1834 = _738 + (-1.0);
    float _1839 = (cbLight._m0[_1827].x * _1834) + 1.0;
    float _1840 = (cbLight._m0[_1827].y * _1834) + 1.0;
    float _1841 = (cbLight._m0[_1827].z * _1834) + 1.0;
    float _1842 = (cbLight._m0[_1827].w * _1834) + 1.0;
    uint _1843 = _1826 + 5u;
    float _1849 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
    uint _1853 = _1826 + 4u;
    float _1862 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1866 = _1826 | 1u;
    float _1877 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_575, _576, _577));
    float _1880 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_575, _576, _577));
    float _4080 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _4091 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1885 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1887 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.3183098733425140380859375;
    float _1894 = ((cbLight._m0[_1843].x * _1849) * _1887) + (((cbLight._m0[_1853].x * _1818) * _1862) * _1885);
    float _1895 = ((_1849 * cbLight._m0[_1843].y) * _1887) + (((cbLight._m0[_1853].y * _1819) * _1862) * _1885);
    float _1896 = ((_1849 * cbLight._m0[_1843].z) * _1887) + (((cbLight._m0[_1853].z * _1820) * _1862) * _1885);
    uvec4 _1900 = floatBitsToUint(cbLight._m0[_1826 + 12u]);
    bool _1902 = _1900.x == 0u;
    float _1913;
    float _1915;
    float _1917;
    if (_1902)
    {
        _1913 = _1894;
        _1915 = _1895;
        _1917 = _1896;
    }
    else
    {
        uint _1921 = _1826 + 6u;
        float _1937 = (dot(vec3(cbLight._m0[_1826 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _1938 = _1937 * _1937;
        float _4102 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1940 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _1913 = (((cbLight._m0[_1921].x * 0.3183098733425140380859375) * _1939) * _1940) + _1894;
        _1915 = (((cbLight._m0[_1921].y * 0.3183098733425140380859375) * _1939) * _1940) + _1895;
        _1917 = (((cbLight._m0[_1921].z * 0.3183098733425140380859375) * _1939) * _1940) + _1896;
    }
    bool _1920 = _1900.y == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1920)
    {
        _1958 = _1913;
        _1960 = _1915;
        _1962 = _1917;
    }
    else
    {
        uint _2120 = _1826 + 7u;
        float _2136 = (dot(vec3(cbLight._m0[_1826 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2137 = _2136 * _2136;
        float _4118 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2138 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _2139 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _1958 = (((cbLight._m0[_2120].x * 0.3183098733425140380859375) * _2138) * _2139) + _1913;
        _1960 = (((cbLight._m0[_2120].y * 0.3183098733425140380859375) * _2138) * _2139) + _1915;
        _1962 = (((cbLight._m0[_2120].z * 0.3183098733425140380859375) * _2138) * _2139) + _1917;
    }
    uint _1965 = _1826 + 8u;
    float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _578) * 0.949999988079071044921875);
    float _1979 = _1978 * _1978;
    float _1980 = cbLight._m0[_1826].x + _655;
    float _1981 = cbLight._m0[_1826].y + _656;
    float _1982 = cbLight._m0[_1826].z + _657;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1987 = _1986 * _1980;
    float _1988 = _1986 * _1981;
    float _1989 = _1986 * _1982;
    float _1990 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1826].xyz));
    float _4134 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1994 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _1995 = dot(vec3(_575, _576, _577), vec3(_1987, _1988, _1989));
    float _4156 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_1987, _1988, _1989));
    float _4167 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2003 = _1979 * _1979;
    float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
    float _2018 = (exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2019 = 1.0 - _1979;
    float _2030 = (0.5 / (((_1994 * ((_1993 * _2019) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2019) + _1979) * _1993))) * _1993;
    float _4178 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
    uint _2046 = _1826 + 9u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _578) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1866].x + _655;
    float _2060 = cbLight._m0[_1866].y + _656;
    float _2061 = cbLight._m0[_1866].z + _657;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1866].xyz));
    float _4189 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2073 = dot(vec3(_575, _576, _577), vec3(_2066, _2067, _2068));
    float _4200 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2066, _2067, _2068));
    float _4211 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2058 * _2058;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2095 = 1.0 - _2058;
    float _2105 = (0.5 / (((_1994 * ((_2072 * _2095) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2095) + _2058) * _2072))) * _2072;
    float _4222 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    float _2117 = (((_2094 * cbLight._m0[_2046].x) * _2107) * _1849) + ((((cbLight._m0[_1965].x * _1818) * _2018) * _2032) * _1862);
    float _2118 = (((_2094 * cbLight._m0[_2046].y) * _2107) * _1849) + ((((cbLight._m0[_1965].y * _1819) * _2018) * _2032) * _1862);
    float _2119 = (((_2094 * cbLight._m0[_2046].z) * _2107) * _1849) + ((((cbLight._m0[_1965].z * _1820) * _2018) * _2032) * _1862);
    float _2181;
    float _2183;
    float _2185;
    if (_1902)
    {
        _2181 = _2117;
        _2183 = _2118;
        _2185 = _2119;
    }
    else
    {
        uint _2187 = _1826 + 2u;
        uint _2191 = _1826 + 10u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _578) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _655;
        float _2208 = cbLight._m0[_2187].y + _656;
        float _2209 = cbLight._m0[_2187].z + _657;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2187].xyz));
        float _4233 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2221 = dot(vec3(_575, _576, _577), vec3(_2214, _2215, _2216));
        float _4244 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4255 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2243 = 1.0 - _2206;
        float _2253 = (0.5 / (((_1994 * ((_2220 * _2243) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2243) + _2206) * _2220))) * _2220;
        float _4266 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2255 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2256 = isnan(1.0) ? _1841 : (isnan(_1841) ? 1.0 : min(_1841, 1.0));
        _2181 = (((_2242 * cbLight._m0[_2191].x) * _2255) * _2256) + _2117;
        _2183 = (((_2242 * cbLight._m0[_2191].y) * _2255) * _2256) + _2118;
        _2185 = (((_2242 * cbLight._m0[_2191].z) * _2255) * _2256) + _2119;
    }
    float _2291;
    float _2293;
    float _2295;
    if (_1920)
    {
        _2291 = _2181;
        _2293 = _2183;
        _2295 = _2185;
    }
    else
    {
        uint _2302 = _1826 + 3u;
        uint _2306 = _1826 + 11u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _578) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _655;
        float _2323 = cbLight._m0[_2302].y + _656;
        float _2324 = cbLight._m0[_2302].z + _657;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2302].xyz));
        float _4282 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2336 = dot(vec3(_575, _576, _577), vec3(_2329, _2330, _2331));
        float _4293 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4304 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2357 = (exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2358 = 1.0 - _2321;
        float _2368 = (0.5 / (((_1994 * ((_2335 * _2358) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_1994 * _2358) + _2321) * _2335))) * _2335;
        float _4315 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2370 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2371 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
        _2291 = (((_2357 * cbLight._m0[_2306].x) * _2370) * _2371) + _2181;
        _2293 = (((_2357 * cbLight._m0[_2306].y) * _2370) * _2371) + _2183;
        _2295 = (((_2357 * cbLight._m0[_2306].z) * _2370) * _2371) + _2185;
    }
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    if (_1824.y == 0u)
    {
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2446;
        float _2448 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2446;
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2446;
        uvec4 _2461 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2462 = _2461.x;
        uint _2473 = uint((float(_2461.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2462))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2462)));
        float _2483 = (log2(_2449 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2484 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        uint _2487 = uint(isnan(14.0) ? _2484 : (isnan(_2484) ? 14.0 : min(_2484, 14.0)));
        uvec4 _2492 = texelFetch(g_lightClusterGridBuffer, int(((_2487 << 2u) + (_2473 << 6u)) >> 2u));
        uint _2493 = _2492.x;
        uint _2494 = _2461.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2494 >> 4u) & 15u)) + 4294967295u) & _2493) == 0u) || ((_2494 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            uint _2753 = 0u;
            uint _2762;
            bool _2763;
            for (;;)
            {
                _2762 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2753 << 2u)) >> 2u)).x;
                _2763 = _2762 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2763)
                {
                    frontier_phi_66_pred = _2747;
                    frontier_phi_66_pred_1 = _2752;
                    frontier_phi_66_pred_2 = _2751;
                    frontier_phi_66_pred_3 = _2750;
                    frontier_phi_66_pred_4 = _2749;
                    frontier_phi_66_pred_5 = _2748;
                }
                else
                {
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    uint _2898;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2751;
                    _2897 = _2752;
                    _2898 = _2762;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    float _2824;
                    for (;;)
                    {
                        uint _2902 = uint(findLSB(_2898)) + (_2753 << 5u);
                        uint _2899 = (_2898 + 4294967295u) & _2898;
                        uint _2904 = _2902 * 48u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2924 = (_2902 * 48u) + 4u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 3u)).x));
                        uint _2943 = (_2902 * 48u) + 8u;
                        vec3 _2954 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x));
                        float _2958 = _2918.x - _2447;
                        float _2959 = _2918.y - _2448;
                        float _2960 = _2918.z - _2449;
                        float _2961 = dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960));
                        float _2964 = inversesqrt(_2961);
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2968 = dot(vec3(_694, _697, _700), vec3(_2965, _2966, _2967));
                        float _2973 = 1.0 - (_2961 * _2918.w);
                        float _4341 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _2975 = sqrt(_2961) * _2937.w;
                        float _2978 = 1.39999997615814208984375 / (_2975 + 1.39999997615814208984375);
                        float _2979 = _2978 * _2978;
                        float _2982 = ((1.0 - _2979) * _2968) + _2979;
                        float _2985 = _2975 * _2975;
                        float _2989 = ((isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))) * _2974) / ((_2985 * 0.699999988079071044921875) + 1.0);
                        float _2993 = (-0.0) - _2447;
                        float _2994 = (-0.0) - _2448;
                        float _2995 = (-0.0) - _2449;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3010 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                        float _3011 = 1.0 - _754;
                        float _3018 = sqrt(1.0 - ((1.0 - (_3011 * _3011)) * (1.0 - (_3010 * _3010))));
                        float _3019 = _3018 * _3018;
                        float _3020 = _3019 * _3019;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3031 = dot(vec3(_694, _697, _700), vec3(_3000, _3001, _3002));
                        float _4357 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3035 = dot(vec3(_694, _697, _700), vec3(_3027 * _3021, _3027 * _3022, _3027 * _3023));
                        float _4368 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3042 = ((_3038 * _3038) * (_3020 + (-1.0))) + 1.0;
                        float _3043 = _2978 * _3019;
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _2968) + _3044;
                        float _4379 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3049 = 1.0 - _3019;
                        float _3059 = (0.5 / (((_3048 * ((_3034 * _3049) + _3019)) + 9.9999999392252902907785028219223e-09) + (((_3048 * _3049) + _3019) * _3034))) * _3048;
                        float _4390 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3070 = (((_3020 * 3.1415927410125732421875) * (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) / ((_3042 * _3042) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125))) * _2974;
                        _2822 = (_2989 * _2937.x) + _2895;
                        _2823 = (_2989 * _2937.y) + _2896;
                        _2824 = (_2989 * _2937.z) + _2897;
                        _2819 = (_3070 * _2954.x) + _2892;
                        _2820 = (_3070 * _2954.y) + _2893;
                        _2821 = (_3070 * _2954.z) + _2894;
                        if (_2899 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2823;
                            _2897 = _2824;
                            _2898 = _2899;
                        }
                    }
                    frontier_phi_66_pred = _2819;
                    frontier_phi_66_pred_1 = _2824;
                    frontier_phi_66_pred_2 = _2823;
                    frontier_phi_66_pred_3 = _2822;
                    frontier_phi_66_pred_4 = _2821;
                    frontier_phi_66_pred_5 = _2820;
                }
                _2595 = frontier_phi_66_pred;
                _2605 = frontier_phi_66_pred_1;
                _2603 = frontier_phi_66_pred_2;
                _2601 = frontier_phi_66_pred_3;
                _2599 = frontier_phi_66_pred_4;
                _2597 = frontier_phi_66_pred_5;
                uint _2754 = _2753 + 1u;
                if (_2754 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2747 = _2595;
                    _2748 = _2597;
                    _2749 = _2599;
                    _2750 = _2601;
                    _2751 = _2603;
                    _2752 = _2605;
                    _2753 = _2754;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        if (((4294967295u << _2611) & _2493) == 0u)
        {
            _2715 = _2594;
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
        }
        else
        {
            float _2740 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
            float _2741 = _2740 * _2447;
            float _2742 = _2740 * _2448;
            float _2743 = _2740 * _2449;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2875 = _2594;
                float _2876 = _2596;
                float _2877 = _2598;
                float _2878 = _2600;
                float _2879 = _2602;
                float _2880 = _2604;
                uint _2881 = _2611;
                uint _2890;
                bool _2891;
                for (;;)
                {
                    _2890 = texelFetch(g_lightClassification, int((((_2487 << 5u) + (_2473 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                    _2891 = _2890 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2891)
                    {
                        frontier_phi_77_pred = _2880;
                        frontier_phi_77_pred_1 = _2879;
                        frontier_phi_77_pred_2 = _2878;
                        frontier_phi_77_pred_3 = _2877;
                        frontier_phi_77_pred_4 = _2876;
                        frontier_phi_77_pred_5 = _2875;
                    }
                    else
                    {
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        float _3101 = _2879;
                        float _3102 = _2880;
                        uint _3103 = _2890;
                        uint _3104;
                        vec4 _3129;
                        float _3130;
                        vec4 _3145;
                        vec3 _3157;
                        vec4 _3172;
                        vec4 _3187;
                        float _3233;
                        bool _3234;
                        for (;;)
                        {
                            uint _3114 = ((_2881 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3103));
                            _3104 = (_3103 + 4294967295u) & _3103;
                            uint _3116 = _3114 * 40u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            _3130 = _3129.w;
                            uint _3132 = (_3114 * 40u) + 4u;
                            _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            uint _3147 = (_3114 * 40u) + 8u;
                            _3157 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x));
                            uint _3159 = (_3114 * 40u) + 16u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3114 * 40u) + 20u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3114 * 40u) + 24u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3208 = (_3114 * 40u) + 28u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3233 = fma(_2449, _3221.z, fma(_2448, _3221.y, _3221.x * _2447)) + _3221.w;
                            _3234 = !((fma(_2449, _3202.z, fma(_2448, _3202.y, _3202.x * _2447)) + _3202.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3234)
                            {
                                float _3261 = _3129.x - _2447;
                                float _3262 = _3129.y - _2448;
                                float _3263 = _3129.z - _2449;
                                float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                                float _3267 = inversesqrt(_3264);
                                float _3268 = _3267 * _3261;
                                float _3269 = _3267 * _3262;
                                float _3270 = _3267 * _3263;
                                float _3274 = 1.0 - (_3264 / (_3130 * _3130));
                                float _4401 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3279 = sqrt(_3264) * _3145.w;
                                float _3281 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                                float _3282 = _3281 * _3281;
                                float _3285 = ((1.0 - _3282) * dot(vec3(_3268, _3269, _3270), vec3(_694, _697, _700))) + _3282;
                                float _3288 = _3279 * _3279;
                                float _3292 = (fma(_2449, _3172.z, fma(_2448, _3172.y, _3172.x * _2447)) + _3172.w) / _3233;
                                float _3293 = (fma(_2449, _3187.z, fma(_2448, _3187.y, _3187.x * _2447)) + _3187.w) / _3233;
                                float _3297 = 1.0 - dot(vec2(_3292, _3293), vec2(_3292, _3293));
                                float _4417 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3299 = _3298 * (((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3275) / ((_3288 * 0.699999988079071044921875) + 1.0));
                                float _3311 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                                float _3312 = 1.0 - _754;
                                float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                                float _3320 = _3319 * _3319;
                                float _3321 = _3320 * _3320;
                                float _3322 = _3268 - _2741;
                                float _3323 = _3269 - _2742;
                                float _3324 = _3270 - _2743;
                                float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                                float _3332 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2741, (-0.0) - _2742, (-0.0) - _2743));
                                float _4428 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3336 = dot(vec3(_694, _697, _700), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                                float _4439 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                                float _3344 = _3281 * _3320;
                                float _3345 = _3344 * _3344;
                                float _3351 = ((1.0 - _3345) * dot(vec3(_694, _697, _700), vec3(_3268, _3269, _3270))) + _3345;
                                float _4450 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3353 = 1.0 - _3320;
                                float _3363 = (0.5 / (((_3352 * ((_3335 * _3353) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3320) * _3335))) * _3352;
                                float _4461 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3373 = (_3298 * _3275) * (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) / ((_3343 * _3343) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3299 * _3145.y;
                                frontier_phi_83_pred_1 = _3299 * _3145.x;
                                frontier_phi_83_pred_2 = _3373 * _3157.z;
                                frontier_phi_83_pred_3 = _3373 * _3157.y;
                                frontier_phi_83_pred_4 = _3373 * _3157.x;
                                frontier_phi_83_pred_5 = _3299 * _3145.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3381 = frontier_phi_83_pred;
                            _3380 = frontier_phi_83_pred_1;
                            _3379 = frontier_phi_83_pred_2;
                            _3378 = frontier_phi_83_pred_3;
                            _3377 = frontier_phi_83_pred_4;
                            _3382 = frontier_phi_83_pred_5;
                            _3087 = _3380 + _3100;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            _3084 = _3377 + _3097;
                            _3085 = _3378 + _3098;
                            _3086 = _3379 + _3099;
                            if (_3104 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3104;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3089;
                        frontier_phi_77_pred_1 = _3088;
                        frontier_phi_77_pred_2 = _3087;
                        frontier_phi_77_pred_3 = _3086;
                        frontier_phi_77_pred_4 = _3085;
                        frontier_phi_77_pred_5 = _3084;
                    }
                    _2726 = frontier_phi_77_pred;
                    _2724 = frontier_phi_77_pred_1;
                    _2722 = frontier_phi_77_pred_2;
                    _2720 = frontier_phi_77_pred_3;
                    _2718 = frontier_phi_77_pred_4;
                    _2716 = frontier_phi_77_pred_5;
                    uint _2882 = _2881 + 1u;
                    if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2875 = _2716;
                        _2876 = _2718;
                        _2877 = _2720;
                        _2878 = _2722;
                        _2879 = _2724;
                        _2880 = _2726;
                        _2881 = _2882;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2720;
                frontier_phi_58_59_ladder_1 = _2726;
                frontier_phi_58_59_ladder_2 = _2724;
                frontier_phi_58_59_ladder_3 = _2722;
                frontier_phi_58_59_ladder_4 = _2718;
                frontier_phi_58_59_ladder_5 = _2716;
            }
            else
            {
                frontier_phi_58_59_ladder = _2598;
                frontier_phi_58_59_ladder_1 = _2604;
                frontier_phi_58_59_ladder_2 = _2602;
                frontier_phi_58_59_ladder_3 = _2600;
                frontier_phi_58_59_ladder_4 = _2596;
                frontier_phi_58_59_ladder_5 = _2594;
            }
            _2715 = frontier_phi_58_59_ladder_5;
            _2717 = frontier_phi_58_59_ladder_4;
            _2719 = frontier_phi_58_59_ladder;
            _2721 = frontier_phi_58_59_ladder_3;
            _2723 = frontier_phi_58_59_ladder_2;
            _2725 = frontier_phi_58_59_ladder_1;
        }
        float _2730 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2506 = (_2730 * _2721) + _1958;
        _2508 = (_2730 * _2723) + _1960;
        _2510 = (_2730 * _2725) + _1962;
        _2512 = ((_2715 * 0.039999999105930328369140625) * _2730) + _2291;
        _2514 = ((_2717 * 0.039999999105930328369140625) * _2730) + _2293;
        _2516 = ((_2719 * 0.039999999105930328369140625) * _2730) + _2295;
    }
    else
    {
        _2506 = _1958;
        _2508 = _1960;
        _2510 = _1962;
        _2512 = _2291;
        _2514 = _2293;
        _2516 = _2295;
    }
    float _4477 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4488 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4499 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2533 = ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2506 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _738))) + ((_2512 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    float _2534 = ((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2508 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _738))) + ((_2514 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    float _2535 = ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2510 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _738))) + ((_2516 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1575)) * cbPerFrame._m0[3u].x);
    uint _2536 = _260 + 6u;
    float _2544 = _675 / cbSceneParam._m0[86u].x;
    float _2545 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2559 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2561 = _2559.x;
    float _2562 = _2559.y;
    float _2563 = _2559.z;
    float _2564 = _2559.w;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2620 = _2619 / _596;
        float _2631 = _2620 * _648;
        float _2632 = _649 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2635 = _2620 * _650;
        float _2637 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2638 = _2637 + cbSceneParam._m0[79u].w;
        float _2639 = cbSceneParam._m0[79u].w - _2632;
        float _2645 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2635 * _2635));
        float _2648 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2645;
        float _2653 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2655 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2832;
        if (abs((_2633 - _2637) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2832 = ((((_2638 > 0.0) ? exp2(_2653 * _2638) : (2.0 - exp2(_2655 * _2638))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2648;
        }
        else
        {
            float _2776 = 1.0 / cbSceneParam._m0[80u].x;
            float _2777 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : max(_2638, _2639));
            float _2778 = isnan(_2639) ? _2638 : (isnan(_2638) ? _2639 : min(_2638, _2639));
            float _2787 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : min(_2777, 0.0));
            float _2788 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : min(_2778, 0.0));
            _2832 = ((abs(_2645 / _2633) * cbSceneParam._m0[80u].y) * ((((_2787 - _2788) * 2.0) - ((exp2(_2653 * (isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0)))) - exp2(_2653 * (isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))))) * _2776)) - ((exp2(_2655 * _2787) - exp2(_2655 * _2788)) * _2776))) + (_2648 * cbSceneParam._m0[80u].z);
        }
        vec4 _2834 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2544, _2545, 1.0), 0.0);
        float _2843 = exp2((_2832 * (-1.44269502162933349609375)) * (1.0 - _2834.w));
        float _2844 = log2(_2843);
        float _2860 = log2(_2564);
        _2657 = (exp2(_2860 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].x)) * _2834.x) / cbSceneParam._m0[78u].x)) + _2561;
        _2659 = (exp2(_2860 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].y)) * _2834.y) / cbSceneParam._m0[78u].y)) + _2562;
        _2661 = (exp2(_2860 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2844 * cbSceneParam._m0[78u].z)) * _2834.z) / cbSceneParam._m0[78u].z)) + _2563;
        _2663 = _2843 * _2564;
    }
    else
    {
        _2657 = _2561;
        _2659 = _2562;
        _2661 = _2563;
        _2663 = _2564;
    }
    bool _2870;
    vec4 _2673;
    vec4 _2695;
    float _2697;
    float _2701;
    float _2702;
    float _2703;
    float _2704;
    bool _2714;
    for (;;)
    {
        _2673 = cbMatDynParam._m0[0u];
        float _2675 = roundEven(_2673.y);
        bool _2676 = _2675 == 3.0;
        float _2677 = log2(_2663);
        float _2684 = exp2(_2677 * cbSceneParam._m0[78u].x) * _2533;
        float _2685 = exp2(_2677 * cbSceneParam._m0[78u].y) * _2534;
        float _2686 = exp2(_2677 * cbSceneParam._m0[78u].z) * _2535;
        float _2693 = _664 + (-0.5);
        _2695 = cbMtdParam._m0[1u];
        _2697 = _2695.y * _2693;
        float _2700 = (_2675 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2701 = _2700 * (_2676 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2657)));
        _2702 = _2700 * (_2676 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2659)));
        _2703 = _2700 * (_2676 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2661)));
        _2704 = _2693 * 0.999000012874603271484375;
        _2714 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2714)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _2704) < 0.5)
            {
                _2870 = true;
                break;
            }
        }
        uint _2811 = _713 + uint(_2673.w);
        if ((cbInstanceData._m0[_2811].w < 1.0) && ((cbInstanceData._m0[_2811].w + _2704) < 0.5))
        {
            _2870 = true;
            break;
        }
        if ((_2697 + 1.0) < _2695.x)
        {
            _2870 = true;
            break;
        }
        _2870 = false;
        break;
    }
    float _3075;
    if (_2870)
    {
        discard_state = true;
        _3075 = 0.0;
    }
    else
    {
        _3075 = cbInstanceData._m0[_2536].w;
    }
    SV_Target.x = _2701;
    SV_Target.y = _2702;
    SV_Target.z = _2703;
    SV_Target.w = _3075;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2536].w;
    discard_exit();
}


