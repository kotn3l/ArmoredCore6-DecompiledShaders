#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1055;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _208 = _207 * _199;
    float _209 = _207 * _200;
    float _210 = _207 * _201;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _235 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _238 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3363 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3374 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3385 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _253 = _248 + 1u;
    uint _257 = _248 + 2u;
    float _266 = sqrt(((cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x));
    float _267 = _266 * TEXCOORD.z;
    float _268 = _266 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _267) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _268) + cbTextureTilingScale._m0[13u].w));
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _309 = _304.x * cbMtdParam._m0[9u].x;
    float _310 = _304.y * cbMtdParam._m0[9u].y;
    float _311 = _304.z * cbMtdParam._m0[9u].z;
    float _315 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _281.x) * _309;
    float _318 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _281.y) * _310;
    float _321 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _281.z) * _311;
    float _328 = ((_309 - _315) * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) + _315;
    float _329 = ((_310 - _318) * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) + _318;
    float _330 = ((_311 - _321) * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) + _321;
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _267) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _268) + cbTextureTilingScale._m0[20u].w));
    vec4 _374 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _378 = _374.z;
    float _382 = (_374.x * 2.0) + (-1.0);
    float _383 = (_374.y * 2.0) + (-1.0);
    float _384 = dot(vec2(_382, _383), vec2(_382, _383));
    float _3396 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _389 = sqrt(1.0 - (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))));
    float _394 = _382 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_348.x * 2.0) + (-1.0)));
    float _395 = _383 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_348.y * 2.0) + (-1.0)));
    float _398 = fma(_389, _215, fma(_395, _222, _394 * _208));
    float _401 = fma(_389, _216, fma(_395, _223, _394 * _209));
    float _404 = fma(_389, _217, fma(_395, _224, _394 * _210));
    float _408 = inversesqrt(dot(vec3(_398, _401, _404), vec3(_398, _401, _404)));
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _267) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _268) + cbTextureTilingScale._m0[11u].w));
    float _446 = _444.x;
    float _447 = 1.0 - _446;
    float _456 = (cbMtdParam._m0[19u].x + dot(vec4(_408 * _398, _408 * _401, _408 * _404, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_446 - _447) * cbMtdParam._m0[24u].z) + _447) * cbMtdParam._m0[21u].z);
    float _3407 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _464 = (_457 * (cbMtdParam._m0[17u].x - _328)) + _328;
    float _465 = (_457 * (cbMtdParam._m0[17u].y - _329)) + _329;
    float _466 = (_457 * (cbMtdParam._m0[17u].z - _330)) + _330;
    float _471 = (((_348.z - _378) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _378;
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _267) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _268) + cbTextureTilingScale._m0[15u].w));
    float _491 = (_484.x * 2.0) + (-1.0);
    float _492 = (_484.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3418 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _501 = ((_484.z - _471) * _457) + _471;
    float _511 = ((sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0)))) - _389) * _457) + _389;
    float _514 = (((_491 - _394) * _457) + _394) + (cbMtdParam._m0[21u].x * _394);
    float _515 = (((_492 - _395) * _457) + _395) + (cbMtdParam._m0[21u].x * _395);
    float _517 = cbMtdParam._m0[22u].x + _374.w;
    float _520 = fma(_511, _215, fma(_515, _222, _514 * _208));
    float _523 = fma(_511, _216, fma(_515, _223, _514 * _209));
    float _526 = fma(_511, _217, fma(_515, _224, _514 * _210));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3429 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _534 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3451 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3462 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3473 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _552 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _603 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _593);
    float _604 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _593);
    float _605 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _593);
    float _609 = inversesqrt(dot(vec3(_603, _604, _605), vec3(_603, _604, _605)));
    float _610 = _603 * _609;
    float _611 = _604 * _609;
    float _612 = _605 * _609;
    float _618 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _619 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _640 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _643 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _646 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _660 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _666 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_660].x;
    float _667 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_660].y;
    float _668 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_660].z;
    float _3484 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    float _3506 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    vec4 _680 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _618, cbSceneParam._m0[86u].y * _619));
    float _684 = ((isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * TEXCOORD_5.w) * _680.x;
    float _685 = dot(vec3(_531, _532, _533), vec3(_610, _611, _612));
    float _688 = _685 * 2.0;
    float _692 = (_688 * _531) - _610;
    float _693 = (_688 * _532) - _611;
    float _694 = (_688 * _533) - _612;
    float _698 = abs(dot(vec3(_610, _611, _612), vec3(_531, _532, _533)));
    float _3517 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _700 = sqrt(_534);
    float _713 = exp2((_700 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_700 * 3.0));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1054;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _779 = fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745));
        float _783 = fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745));
        float _787 = fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745));
        float _812 = _745 + _531;
        float _813 = _749 + _532;
        float _814 = _753 + _533;
        float _824 = fma(_814, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812)) - _779;
        float _825 = fma(_814, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812)) - _783;
        float _826 = fma(_814, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812)) - _787;
        float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
        float _843 = ((_830 * _824) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_779 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_830 * _825) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_783 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_830 * _826) / cbModelParam._m0[34u].z) + ((((((_787 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _848 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_843, _844, _845), 0.0);
        float _882 = exp2((_848.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_848.x + (-0.5));
        float _884 = _882 * (_848.y + (-0.5));
        float _885 = _882 * (_848.z + (-0.5));
        float _892 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_855.x + (-0.5));
        float _894 = _892 * (_855.y + (-0.5));
        float _895 = _892 * (_855.z + (-0.5));
        float _902 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_862.x + (-0.5));
        float _904 = _902 * (_862.y + (-0.5));
        float _905 = _902 * (_862.z + (-0.5));
        float _912 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_869.x + (-0.5));
        float _914 = _912 * (_869.y + (-0.5));
        float _915 = _912 * (_869.z + (-0.5));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = _883 * 0.5;
        float _920 = _893 * 0.5;
        float _921 = _903 * 0.5;
        float _922 = dot(vec3(_919, _920, _921), vec3(_919, _920, _921));
        float _927 = (_922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_922);
        float _936 = (dot(vec3(_531, _532, _533), vec3(_927 * _919, _927 * _920, _927 * _921)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _946 = sqrt(((_920 * _920) + (_919 * _919)) + (_921 * _921)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3565 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_948 + 1.0))) + _953) * _916;
        float _963 = _884 * 0.5;
        float _964 = _894 * 0.5;
        float _965 = _904 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_531, _532, _533), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3598 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_990 + 1.0))) + _995) * _917;
        float _1005 = _885 * 0.5;
        float _1006 = _895 * 0.5;
        float _1007 = _905 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_531, _532, _533), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3631 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1032 + 1.0))) + _1037) * _918;
        _1054 = _885;
        _1056 = _884;
        _1057 = _883;
        _1058 = _895;
        _1059 = _894;
        _1060 = _893;
        _1061 = _905;
        _1062 = _904;
        _1063 = _903;
        _1064 = _918;
        _1065 = _917;
        _1066 = _916;
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
    }
    else
    {
        _1054 = _1055;
        _1056 = _1055;
        _1057 = _1055;
        _1058 = _1055;
        _1059 = _1055;
        _1060 = _1055;
        _1061 = _1055;
        _1062 = _1055;
        _1063 = _1055;
        _1064 = _1055;
        _1065 = _1055;
        _1066 = _1055;
        _1067 = 0.0;
        _1068 = 0.0;
        _1069 = 0.0;
    }
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1094 = fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745));
        float _1098 = fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745));
        float _1102 = fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745));
        float _1125 = _745 + _531;
        float _1126 = _749 + _532;
        float _1127 = _753 + _533;
        float _1137 = fma(_1127, cbModelParam._m0[30u].z, fma(_1126, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1125)) - _1094;
        float _1138 = fma(_1127, cbModelParam._m0[31u].z, fma(_1126, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1125)) - _1098;
        float _1139 = fma(_1127, cbModelParam._m0[32u].z, fma(_1126, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1125)) - _1102;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1094 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1098 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[35u].z) + ((((((_1102 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1193 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1160.x + (-0.5));
        float _1195 = _1193 * (_1160.y + (-0.5));
        float _1196 = _1193 * (_1160.z + (-0.5));
        float _1203 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1167.x + (-0.5));
        float _1205 = _1203 * (_1167.y + (-0.5));
        float _1206 = _1203 * (_1167.z + (-0.5));
        float _1213 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1174.x + (-0.5));
        float _1215 = _1213 * (_1174.y + (-0.5));
        float _1216 = _1213 * (_1174.z + (-0.5));
        float _1223 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1181.x + (-0.5));
        float _1225 = _1223 * (_1181.y + (-0.5));
        float _1226 = _1223 * (_1181.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_531, _532, _533), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3694 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1257 + 1.0))) + _1262) * _1227;
        float _1272 = _1195 * 0.5;
        float _1273 = _1205 * 0.5;
        float _1274 = _1215 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_531, _532, _533), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3727 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1299 + 1.0))) + _1304) * _1228;
        float _1314 = _1196 * 0.5;
        float _1315 = _1206 * 0.5;
        float _1316 = _1216 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_531, _532, _533), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3760 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1341 + 1.0))) + _1346) * _1229;
        _1363 = _1196;
        _1364 = _1195;
        _1365 = _1194;
        _1366 = _1206;
        _1367 = _1205;
        _1368 = _1204;
        _1369 = _1216;
        _1370 = _1215;
        _1371 = _1214;
        _1372 = _1229;
        _1373 = _1228;
        _1374 = _1227;
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
    }
    else
    {
        _1363 = _1055;
        _1364 = _1055;
        _1365 = _1055;
        _1366 = _1055;
        _1367 = _1055;
        _1368 = _1055;
        _1369 = _1055;
        _1370 = _1055;
        _1371 = _1055;
        _1372 = _1055;
        _1373 = _1055;
        _1374 = _1055;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1067)) + _1067;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1068)) + _1068;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1410 = fma(_1389, cbSceneParam._m0[89u].z, fma(_1388, cbSceneParam._m0[89u].y, _1387 * cbSceneParam._m0[89u].x));
    float _1413 = fma(_1389, cbSceneParam._m0[90u].z, fma(_1388, cbSceneParam._m0[90u].y, _1387 * cbSceneParam._m0[90u].x));
    float _1416 = fma(_1389, cbSceneParam._m0[91u].z, fma(_1388, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1387));
    float _1431 = _692 * 0.5;
    float _1432 = _693 * 0.5;
    float _1433 = _694 * 0.5;
    float _1434 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1437 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1440 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1474;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1447 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1054, _1058, _1061, _1064));
        float _1451 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1455 = dot(vec4(_1431, _1432, _1433, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1462 = dot(vec4(cbModelParam._m0[39u]), vec4(_1431, _1432, _1433, 1.0));
        _1474 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1474 = 1.0;
    }
    float _1485;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1476 = dot(vec4(cbModelParam._m0[40u]), vec4(_1431, _1432, _1433, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1489 = (_1485 * cbModelParam._m0[1u].x) + (_1474 * (1.0 - cbModelParam._m0[1u].x));
    float _1499 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1500 = isnan(_1499) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1499 : min(cbModelParam._m0[25u].z, _1499));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1548 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1552 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1556 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1559 = fma(_694, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692));
        float _1562 = fma(_694, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692));
        float _1565 = fma(_694, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692));
        float _1593;
        if (_1559 > 0.0)
        {
            _1593 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1593 = frontier_phi_14_12_ladder;
        }
        float _1796;
        if (_1562 > 0.0)
        {
            _1796 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1796 = frontier_phi_23_19_ladder;
        }
        float _2039;
        if (_1565 > 0.0)
        {
            _2039 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2039 = frontier_phi_35_30_ladder;
        }
        float _2041 = isnan(_1796) ? _1593 : (isnan(_1593) ? _1796 : min(_1593, _1796));
        float _2042 = isnan(_2039) ? _2041 : (isnan(_2041) ? _2039 : min(_2041, _2039));
        float _2046 = (_2042 * _1559) + _1548;
        float _2047 = (_2042 * _1562) + _1552;
        float _2048 = (_2042 * _1565) + _1556;
        float _2049 = _2042 * 9.9999997473787516355514526367188e-05;
        float _2051 = (-1.0) - _2049;
        float _2053 = _2049 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2048 > _2053) || ((_2048 < _2051) || ((_2047 > _2053) || ((_2047 < _2051) || ((_2046 < _2051) || (_2046 > _2053))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2172 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2048, cbModelParam._m0[9u].z, fma(_2047, cbModelParam._m0[9u].y, _2046 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2048, cbModelParam._m0[10u].z, fma(_2047, cbModelParam._m0[10u].y, _2046 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2048, cbModelParam._m0[11u].z, fma(_2047, cbModelParam._m0[11u].y, _2046 * cbModelParam._m0[11u].x))), _1500);
            frontier_phi_13_35_ladder = _2172.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2172.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2172.x * cbModelParam._m0[1u].y;
        }
        _1581 = frontier_phi_13_35_ladder_2;
        _1583 = frontier_phi_13_35_ladder_1;
        _1585 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_692, _693, _694), _1500);
        _1581 = _1569.x * cbModelParam._m0[1u].y;
        _1583 = _1569.y * cbModelParam._m0[1u].y;
        _1585 = _1569.z * cbModelParam._m0[1u].y;
    }
    float _1589 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1589 : min(cbModelParam._m0[25u].w, _1589));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_694, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692));
        float _1658 = fma(_694, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692));
        float _1661 = fma(_694, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692));
        float _1801;
        if (_1655 > 0.0)
        {
            _1801 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1801 = frontier_phi_25_21_ladder;
        }
        float _2066;
        if (_1658 > 0.0)
        {
            _2066 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2066 = frontier_phi_37_32_ladder;
        }
        float _2271;
        if (_1661 > 0.0)
        {
            _2271 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2271 = frontier_phi_46_43_ladder;
        }
        float _2273 = isnan(_2066) ? _1801 : (isnan(_1801) ? _2066 : min(_1801, _2066));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1655) + _1644;
        float _2279 = (_2274 * _1658) + _1648;
        float _2280 = (_2274 * _1661) + _1652;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2280, cbModelParam._m0[17u].z, fma(_2279, cbModelParam._m0[17u].y, _2278 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2280, cbModelParam._m0[18u].z, fma(_2279, cbModelParam._m0[18u].y, _2278 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2280, cbModelParam._m0[19u].z, fma(_2279, cbModelParam._m0[19u].y, _2278 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_22_46_ladder = _2479.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2479.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2479.x * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_22_46_ladder_2;
        _1682 = frontier_phi_22_46_ladder_1;
        _1684 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_692, _693, _694), _1590);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1696 = ((((1.0 - _713) * ((_700 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_713 * _700)) * _684;
    float _1697 = _1696 * ((cbModelParam._m0[1u].w * (_1680 - _1581)) + _1581);
    float _1698 = _1696 * ((cbModelParam._m0[1u].w * (_1682 - _1583)) + _1583);
    float _1699 = _1696 * ((cbModelParam._m0[1u].w * (_1684 - _1585)) + _1585);
    float _1702 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1705 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1708 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, _1697 * cbSceneParam._m0[91u].x));
    uvec4 _1718 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _1720 = _1718.x * 14u;
    uint _1721 = _1720 + 13u;
    float _1728 = _684 + (-1.0);
    float _1733 = (cbLight._m0[_1721].x * _1728) + 1.0;
    float _1734 = (cbLight._m0[_1721].y * _1728) + 1.0;
    float _1735 = (cbLight._m0[_1721].z * _1728) + 1.0;
    float _1736 = (cbLight._m0[_1721].w * _1728) + 1.0;
    uint _1737 = _1720 + 5u;
    float _1743 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1747 = _1720 + 4u;
    float _1754 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1758 = _1720 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_531, _532, _533));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_531, _532, _533));
    float _3896 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3907 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1737].x * _1743) * _1779) + ((cbLight._m0[_1747].x * _1754) * _1777);
    float _1787 = ((_1743 * cbLight._m0[_1737].y) * _1779) + ((_1754 * cbLight._m0[_1747].y) * _1777);
    float _1788 = ((_1743 * cbLight._m0[_1737].z) * _1779) + ((_1754 * cbLight._m0[_1747].z) * _1777);
    uvec4 _1793 = floatBitsToUint(cbLight._m0[_1720 + 12u]);
    bool _1795 = _1793.x == 0u;
    float _1806;
    float _1808;
    float _1810;
    if (_1795)
    {
        _1806 = _1786;
        _1808 = _1787;
        _1810 = _1788;
    }
    else
    {
        uint _1814 = _1720 + 6u;
        float _1830 = (dot(vec3(cbLight._m0[_1720 + 2u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _1831 = _1830 * _1830;
        float _3918 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1833 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1806 = (((cbLight._m0[_1814].x * 0.3183098733425140380859375) * _1832) * _1833) + _1786;
        _1808 = (((cbLight._m0[_1814].y * 0.3183098733425140380859375) * _1832) * _1833) + _1787;
        _1810 = (((cbLight._m0[_1814].z * 0.3183098733425140380859375) * _1832) * _1833) + _1788;
    }
    bool _1813 = _1793.y == 0u;
    float _1851;
    float _1853;
    float _1855;
    if (_1813)
    {
        _1851 = _1806;
        _1853 = _1808;
        _1855 = _1810;
    }
    else
    {
        uint _2010 = _1720 + 7u;
        float _2026 = (dot(vec3(cbLight._m0[_1720 + 3u].xyz), vec3(_531, _532, _533)) * 0.5) + 0.5;
        float _2027 = _2026 * _2026;
        float _3934 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2028 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _2029 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1851 = (((cbLight._m0[_2010].x * 0.3183098733425140380859375) * _2028) * _2029) + _1806;
        _1853 = (((cbLight._m0[_2010].y * 0.3183098733425140380859375) * _2028) * _2029) + _1808;
        _1855 = (((cbLight._m0[_2010].z * 0.3183098733425140380859375) * _2028) * _2029) + _1810;
    }
    uint _1858 = _1720 + 8u;
    float _1871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1720].w)) * _534) * 0.949999988079071044921875);
    float _1872 = _1871 * _1871;
    float _1873 = cbLight._m0[_1720].x + _610;
    float _1874 = cbLight._m0[_1720].y + _611;
    float _1875 = cbLight._m0[_1720].z + _612;
    float _1879 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
    float _1880 = _1879 * _1873;
    float _1881 = _1879 * _1874;
    float _1882 = _1879 * _1875;
    float _1883 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1720].xyz));
    float _3950 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _1887 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1888 = dot(vec3(_531, _532, _533), vec3(_1880, _1881, _1882));
    float _3972 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1892 = dot(vec3(cbLight._m0[_1720].xyz), vec3(_1880, _1881, _1882));
    float _3983 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1896 = _1872 * _1872;
    float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
    float _1911 = (exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1912 = 1.0 - _1872;
    float _1923 = (0.5 / (((_1887 * ((_1886 * _1912) + _1872)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1912) + _1872) * _1886))) * _1886;
    float _3994 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1925 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
    uint _1936 = _1720 + 9u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _534) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1758].x + _610;
    float _1950 = cbLight._m0[_1758].y + _611;
    float _1951 = cbLight._m0[_1758].z + _612;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1758].xyz));
    float _4005 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1963 = dot(vec3(_531, _532, _533), vec3(_1956, _1957, _1958));
    float _4016 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1967 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1956, _1957, _1958));
    float _4027 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1971 = _1948 * _1948;
    float _1975 = ((_1966 * _1966) * (_1971 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1948;
    float _1995 = (0.5 / (((_1887 * ((_1962 * _1985) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _1985) + _1948) * _1962))) * _1962;
    float _4038 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1997 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1971 / ((_1975 * _1975) * 3.141590118408203125));
    float _2007 = (((_1984 * cbLight._m0[_1936].x) * _1997) * _1743) + (((_1911 * cbLight._m0[_1858].x) * _1925) * _1754);
    float _2008 = (((_1984 * cbLight._m0[_1936].y) * _1997) * _1743) + (((_1911 * cbLight._m0[_1858].y) * _1925) * _1754);
    float _2009 = (((_1984 * cbLight._m0[_1936].z) * _1997) * _1743) + (((_1911 * cbLight._m0[_1858].z) * _1925) * _1754);
    float _2071;
    float _2073;
    float _2075;
    if (_1795)
    {
        _2071 = _2007;
        _2073 = _2008;
        _2075 = _2009;
    }
    else
    {
        uint _2077 = _1720 + 2u;
        uint _2081 = _1720 + 10u;
        float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _534) * 0.949999988079071044921875);
        float _2096 = _2095 * _2095;
        float _2097 = cbLight._m0[_2077].x + _610;
        float _2098 = cbLight._m0[_2077].y + _611;
        float _2099 = cbLight._m0[_2077].z + _612;
        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
        float _2104 = _2103 * _2097;
        float _2105 = _2103 * _2098;
        float _2106 = _2103 * _2099;
        float _2107 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2077].xyz));
        float _4049 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2110 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2111 = dot(vec3(_531, _532, _533), vec3(_2104, _2105, _2106));
        float _4060 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2114 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2115 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2104, _2105, _2106));
        float _4071 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2119 = _2096 * _2096;
        float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
        float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2133 = 1.0 - _2096;
        float _2143 = (0.5 / (((_1887 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _2133) + _2096) * _2110))) * _2110;
        float _4082 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2145 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
        float _2146 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2071 = (((_2132 * cbLight._m0[_2081].x) * _2145) * _2146) + _2007;
        _2073 = (((_2132 * cbLight._m0[_2081].y) * _2145) * _2146) + _2008;
        _2075 = (((_2132 * cbLight._m0[_2081].z) * _2145) * _2146) + _2009;
    }
    float _2181;
    float _2183;
    float _2185;
    if (_1813)
    {
        _2181 = _2071;
        _2183 = _2073;
        _2185 = _2075;
    }
    else
    {
        uint _2192 = _1720 + 3u;
        uint _2196 = _1720 + 11u;
        float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _534) * 0.949999988079071044921875);
        float _2211 = _2210 * _2210;
        float _2212 = cbLight._m0[_2192].x + _610;
        float _2213 = cbLight._m0[_2192].y + _611;
        float _2214 = cbLight._m0[_2192].z + _612;
        float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
        float _2219 = _2218 * _2212;
        float _2220 = _2218 * _2213;
        float _2221 = _2218 * _2214;
        float _2222 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_2192].xyz));
        float _4098 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2226 = dot(vec3(_531, _532, _533), vec3(_2219, _2220, _2221));
        float _4109 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2230 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2219, _2220, _2221));
        float _4120 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2234 = _2211 * _2211;
        float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
        float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2248 = 1.0 - _2211;
        float _2258 = (0.5 / (((_1887 * ((_2225 * _2248) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_1887 * _2248) + _2211) * _2225))) * _2225;
        float _4131 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2181 = (((_2247 * cbLight._m0[_2196].x) * _2260) * _2261) + _2071;
        _2183 = (((_2247 * cbLight._m0[_2196].y) * _2260) * _2261) + _2073;
        _2185 = (((_2247 * cbLight._m0[_2196].z) * _2260) * _2261) + _2075;
    }
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    float _2406;
    if (_1718.y == 0u)
    {
        float _2336 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2336;
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2336;
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2336;
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.x;
        uint _2363 = uint((float(_2351.y) * floor(float(uint(cbSceneParam._m0[85u].y * _619) / _2352))) + floor(float(uint(cbSceneParam._m0[85u].x * _618) / _2352)));
        float _2373 = (log2(_2339 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2374 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        uint _2377 = uint(isnan(14.0) ? _2374 : (isnan(_2374) ? 14.0 : min(_2374, 14.0)));
        uvec4 _2382 = texelFetch(g_lightClusterGridBuffer, int(((_2377 << 2u) + (_2363 << 6u)) >> 2u));
        uint _2383 = _2382.x;
        uint _2384 = _2351.z;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        if (((((1u << ((_2384 >> 4u) & 15u)) + 4294967295u) & _2383) == 0u) || ((_2384 & 240u) == 0u))
        {
            _2484 = 0.0;
            _2486 = 0.0;
            _2488 = 0.0;
            _2490 = 0.0;
            _2492 = 0.0;
            _2494 = 0.0;
        }
        else
        {
            float _2485;
            float _2487;
            float _2489;
            float _2491;
            float _2493;
            float _2495;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            uint _2635 = 0u;
            uint _2644;
            bool _2645;
            for (;;)
            {
                _2644 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                _2645 = _2644 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2645)
                {
                    frontier_phi_61_pred = _2629;
                    frontier_phi_61_pred_1 = _2634;
                    frontier_phi_61_pred_2 = _2633;
                    frontier_phi_61_pred_3 = _2632;
                    frontier_phi_61_pred_4 = _2631;
                    frontier_phi_61_pred_5 = _2630;
                }
                else
                {
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    uint _2759;
                    _2753 = _2629;
                    _2754 = _2630;
                    _2755 = _2631;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2644;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    for (;;)
                    {
                        uint _2763 = uint(findLSB(_2759)) + (_2635 << 5u);
                        uint _2760 = (_2759 + 4294967295u) & _2759;
                        uint _2765 = _2763 * 48u;
                        vec4 _2779 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2785 = (_2763 * 48u) + 4u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2785)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2785 + 3u)).x));
                        uint _2804 = (_2763 * 48u) + 8u;
                        vec3 _2815 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x));
                        float _2819 = _2779.x - _2337;
                        float _2820 = _2779.y - _2338;
                        float _2821 = _2779.z - _2339;
                        float _2822 = dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821));
                        float _2825 = inversesqrt(_2822);
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2829 = dot(vec3(_640, _643, _646), vec3(_2826, _2827, _2828));
                        float _2834 = 1.0 - (_2822 * _2779.w);
                        float _4157 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2835 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                        float _2836 = sqrt(_2822) * _2798.w;
                        float _2839 = 1.39999997615814208984375 / (_2836 + 1.39999997615814208984375);
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2829) + _2840;
                        float _2846 = _2836 * _2836;
                        float _2850 = ((isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0))) * _2835) / ((_2846 * 0.699999988079071044921875) + 1.0);
                        float _2854 = (-0.0) - _2337;
                        float _2855 = (-0.0) - _2338;
                        float _2856 = (-0.0) - _2339;
                        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2871 = exp2(log2(1.0 / ((_2846 * 3.5) + 5.0)) * 0.25);
                        float _2872 = 1.0 - _700;
                        float _2879 = sqrt(1.0 - ((1.0 - (_2872 * _2872)) * (1.0 - (_2871 * _2871))));
                        float _2880 = _2879 * _2879;
                        float _2881 = _2880 * _2880;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2884 = _2863 + _2828;
                        float _2888 = inversesqrt(dot(vec3(_2882, _2883, _2884), vec3(_2882, _2883, _2884)));
                        float _2892 = dot(vec3(_640, _643, _646), vec3(_2861, _2862, _2863));
                        float _4173 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2895 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2896 = dot(vec3(_640, _643, _646), vec3(_2888 * _2882, _2888 * _2883, _2888 * _2884));
                        float _4184 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2899 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2903 = ((_2899 * _2899) * (_2881 + (-1.0))) + 1.0;
                        float _2904 = _2839 * _2880;
                        float _2905 = _2904 * _2904;
                        float _2908 = ((1.0 - _2905) * _2829) + _2905;
                        float _4195 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2909 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2910 = 1.0 - _2880;
                        float _2920 = (0.5 / (((_2909 * ((_2895 * _2910) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2909 * _2910) + _2880) * _2895))) * _2909;
                        float _4206 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2931 = (((_2881 * 3.1415927410125732421875) * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) / ((_2903 * _2903) * ((_2846 * 2.1991131305694580078125) + 3.141590118408203125))) * _2835;
                        _2688 = (_2850 * _2798.x) + _2756;
                        _2689 = (_2850 * _2798.y) + _2757;
                        _2690 = (_2850 * _2798.z) + _2758;
                        _2685 = (_2931 * _2815.x) + _2753;
                        _2686 = (_2931 * _2815.y) + _2754;
                        _2687 = (_2931 * _2815.z) + _2755;
                        if (_2760 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2753 = _2685;
                            _2754 = _2686;
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2760;
                        }
                    }
                    frontier_phi_61_pred = _2685;
                    frontier_phi_61_pred_1 = _2690;
                    frontier_phi_61_pred_2 = _2689;
                    frontier_phi_61_pred_3 = _2688;
                    frontier_phi_61_pred_4 = _2687;
                    frontier_phi_61_pred_5 = _2686;
                }
                _2485 = frontier_phi_61_pred;
                _2495 = frontier_phi_61_pred_1;
                _2493 = frontier_phi_61_pred_2;
                _2491 = frontier_phi_61_pred_3;
                _2489 = frontier_phi_61_pred_4;
                _2487 = frontier_phi_61_pred_5;
                uint _2636 = _2635 + 1u;
                if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2629 = _2485;
                    _2630 = _2487;
                    _2631 = _2489;
                    _2632 = _2491;
                    _2633 = _2493;
                    _2634 = _2495;
                    _2635 = _2636;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2484 = _2485;
            _2486 = _2487;
            _2488 = _2489;
            _2490 = _2491;
            _2492 = _2493;
            _2494 = _2495;
        }
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.z;
        uint _2501 = (_2499 >> 8u) & 15u;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((4294967295u << _2501) & _2383) == 0u)
        {
            _2597 = _2484;
            _2599 = _2486;
            _2601 = _2488;
            _2603 = _2490;
            _2605 = _2492;
            _2607 = _2494;
        }
        else
        {
            float _2622 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
            float _2623 = _2622 * _2337;
            float _2624 = _2622 * _2338;
            float _2625 = _2622 * _2339;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2501 < ((_2499 >> 12u) & 15u))
            {
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2736 = _2484;
                float _2737 = _2486;
                float _2738 = _2488;
                float _2739 = _2490;
                float _2740 = _2492;
                float _2741 = _2494;
                uint _2742 = _2501;
                uint _2751;
                bool _2752;
                for (;;)
                {
                    _2751 = texelFetch(g_lightClassification, int((((_2377 << 5u) + (_2363 << 9u)) + (_2742 << 2u)) >> 2u)).x;
                    _2752 = _2751 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2752)
                    {
                        frontier_phi_67_pred = _2739;
                        frontier_phi_67_pred_1 = _2740;
                        frontier_phi_67_pred_2 = _2741;
                        frontier_phi_67_pred_3 = _2738;
                        frontier_phi_67_pred_4 = _2737;
                        frontier_phi_67_pred_5 = _2736;
                    }
                    else
                    {
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _2949 = _2736;
                        float _2950 = _2737;
                        float _2951 = _2738;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        uint _2955 = _2751;
                        uint _2956;
                        vec4 _2981;
                        float _2982;
                        vec4 _2997;
                        vec3 _3009;
                        vec4 _3024;
                        vec4 _3039;
                        float _3085;
                        bool _3086;
                        for (;;)
                        {
                            uint _2966 = ((_2742 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2955));
                            _2956 = (_2955 + 4294967295u) & _2955;
                            uint _2968 = _2966 * 40u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            _2982 = _2981.w;
                            uint _2984 = (_2966 * 40u) + 4u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _2999 = (_2966 * 40u) + 8u;
                            _3009 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x));
                            uint _3011 = (_2966 * 40u) + 16u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3026 = (_2966 * 40u) + 20u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3041 = (_2966 * 40u) + 24u;
                            vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3041)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3041 + 3u)).x));
                            uint _3060 = (_2966 * 40u) + 28u;
                            vec4 _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            _3085 = fma(_2339, _3073.z, fma(_2338, _3073.y, _3073.x * _2337)) + _3073.w;
                            _3086 = !((fma(_2339, _3054.z, fma(_2338, _3054.y, _3054.x * _2337)) + _3054.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3086)
                            {
                                float _3113 = _2981.x - _2337;
                                float _3114 = _2981.y - _2338;
                                float _3115 = _2981.z - _2339;
                                float _3116 = dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115));
                                float _3119 = inversesqrt(_3116);
                                float _3120 = _3119 * _3113;
                                float _3121 = _3119 * _3114;
                                float _3122 = _3119 * _3115;
                                float _3126 = 1.0 - (_3116 / (_2982 * _2982));
                                float _4217 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3127 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3131 = sqrt(_3116) * _2997.w;
                                float _3133 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                                float _3134 = _3133 * _3133;
                                float _3137 = ((1.0 - _3134) * dot(vec3(_3120, _3121, _3122), vec3(_640, _643, _646))) + _3134;
                                float _3140 = _3131 * _3131;
                                float _3144 = (fma(_2339, _3024.z, fma(_2338, _3024.y, _3024.x * _2337)) + _3024.w) / _3085;
                                float _3145 = (fma(_2339, _3039.z, fma(_2338, _3039.y, _3039.x * _2337)) + _3039.w) / _3085;
                                float _3149 = 1.0 - dot(vec2(_3144, _3145), vec2(_3144, _3145));
                                float _4233 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3151 = _3150 * (((isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0))) * _3127) / ((_3140 * 0.699999988079071044921875) + 1.0));
                                float _3163 = exp2(log2(1.0 / ((_3140 * 3.5) + 5.0)) * 0.25);
                                float _3164 = 1.0 - _700;
                                float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                                float _3172 = _3171 * _3171;
                                float _3173 = _3172 * _3172;
                                float _3174 = _3120 - _2623;
                                float _3175 = _3121 - _2624;
                                float _3176 = _3122 - _2625;
                                float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                                float _3184 = dot(vec3(_640, _643, _646), vec3((-0.0) - _2623, (-0.0) - _2624, (-0.0) - _2625));
                                float _4244 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3187 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3188 = dot(vec3(_640, _643, _646), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                                float _4255 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3191 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                                float _3196 = _3133 * _3172;
                                float _3197 = _3196 * _3196;
                                float _3203 = ((1.0 - _3197) * dot(vec3(_640, _643, _646), vec3(_3120, _3121, _3122))) + _3197;
                                float _4266 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3205 = 1.0 - _3172;
                                float _3215 = (0.5 / (((_3204 * ((_3187 * _3205) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3172) * _3187))) * _3204;
                                float _4277 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3225 = (_3150 * _3127) * (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) / ((_3195 * _3195) * ((_3140 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3225 * _3009.x;
                                frontier_phi_73_pred_1 = _3225 * _3009.y;
                                frontier_phi_73_pred_2 = _3151 * _2997.z;
                                frontier_phi_73_pred_3 = _3151 * _2997.y;
                                frontier_phi_73_pred_4 = _3151 * _2997.x;
                                frontier_phi_73_pred_5 = _3225 * _3009.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3229 = frontier_phi_73_pred;
                            _3230 = frontier_phi_73_pred_1;
                            _3234 = frontier_phi_73_pred_2;
                            _3233 = frontier_phi_73_pred_3;
                            _3232 = frontier_phi_73_pred_4;
                            _3231 = frontier_phi_73_pred_5;
                            _2939 = _3232 + _2952;
                            _2940 = _3233 + _2953;
                            _2941 = _3234 + _2954;
                            _2936 = _3229 + _2949;
                            _2937 = _3230 + _2950;
                            _2938 = _3231 + _2951;
                            if (_2956 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2956;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2939;
                        frontier_phi_67_pred_1 = _2940;
                        frontier_phi_67_pred_2 = _2941;
                        frontier_phi_67_pred_3 = _2938;
                        frontier_phi_67_pred_4 = _2937;
                        frontier_phi_67_pred_5 = _2936;
                    }
                    _2604 = frontier_phi_67_pred;
                    _2606 = frontier_phi_67_pred_1;
                    _2608 = frontier_phi_67_pred_2;
                    _2602 = frontier_phi_67_pred_3;
                    _2600 = frontier_phi_67_pred_4;
                    _2598 = frontier_phi_67_pred_5;
                    uint _2743 = _2742 + 1u;
                    if (_2743 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2736 = _2598;
                        _2737 = _2600;
                        _2738 = _2602;
                        _2739 = _2604;
                        _2740 = _2606;
                        _2741 = _2608;
                        _2742 = _2743;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2606;
                frontier_phi_55_56_ladder_1 = _2608;
                frontier_phi_55_56_ladder_2 = _2604;
                frontier_phi_55_56_ladder_3 = _2602;
                frontier_phi_55_56_ladder_4 = _2600;
                frontier_phi_55_56_ladder_5 = _2598;
            }
            else
            {
                frontier_phi_55_56_ladder = _2492;
                frontier_phi_55_56_ladder_1 = _2494;
                frontier_phi_55_56_ladder_2 = _2490;
                frontier_phi_55_56_ladder_3 = _2488;
                frontier_phi_55_56_ladder_4 = _2486;
                frontier_phi_55_56_ladder_5 = _2484;
            }
            _2597 = frontier_phi_55_56_ladder_5;
            _2599 = frontier_phi_55_56_ladder_4;
            _2601 = frontier_phi_55_56_ladder_3;
            _2603 = frontier_phi_55_56_ladder_2;
            _2605 = frontier_phi_55_56_ladder;
            _2607 = frontier_phi_55_56_ladder_1;
        }
        float _2612 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
        _2396 = (_2612 * _2603) + _1851;
        _2398 = (_2612 * _2605) + _1853;
        _2400 = (_2612 * _2607) + _1855;
        _2402 = ((_2597 * 0.039999999105930328369140625) * _2612) + _2181;
        _2404 = ((_2599 * 0.039999999105930328369140625) * _2612) + _2183;
        _2406 = ((_2601 * 0.039999999105930328369140625) * _2612) + _2185;
    }
    else
    {
        _2396 = _1851;
        _2398 = _1853;
        _2400 = _1855;
        _2402 = _2181;
        _2404 = _2183;
        _2406 = _2185;
    }
    float _4293 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4304 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4315 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    uint _2426 = _248 + 6u;
    float _2434 = _618 / cbSceneParam._m0[86u].x;
    float _2435 = _619 / cbSceneParam._m0[86u].y;
    vec4 _2449 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2434, _2435, (log2((isnan(cbSceneParam._m0[77u].w) ? _552 : (isnan(_552) ? cbSceneParam._m0[77u].w : min(_552, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2451 = _2449.x;
    float _2452 = _2449.y;
    float _2453 = _2449.z;
    float _2454 = _2449.w;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_552 > cbSceneParam._m0[78u].w)
    {
        float _2509 = isnan(_552) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _552 : min(cbSceneParam._m0[80u].w, _552));
        float _2510 = _2509 / _552;
        float _2521 = _2510 * _603;
        float _2522 = _604 * _2510;
        float _2523 = (-0.0) - _2522;
        float _2525 = _2510 * _605;
        float _2527 = (cbSceneParam._m0[77u].w * _2523) / _2509;
        float _2528 = _2527 + cbSceneParam._m0[79u].w;
        float _2529 = cbSceneParam._m0[79u].w - _2522;
        float _2535 = sqrt(((_2521 * _2521) + (_2522 * _2522)) + (_2525 * _2525));
        float _2538 = (1.0 - (cbSceneParam._m0[77u].w / _2509)) * _2535;
        float _2543 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2545 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2698;
        if (abs((_2523 - _2527) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2698 = ((((_2528 > 0.0) ? exp2(_2543 * _2528) : (2.0 - exp2(_2545 * _2528))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2538;
        }
        else
        {
            float _2658 = 1.0 / cbSceneParam._m0[80u].x;
            float _2659 = isnan(_2529) ? _2528 : (isnan(_2528) ? _2529 : max(_2528, _2529));
            float _2660 = isnan(_2529) ? _2528 : (isnan(_2528) ? _2529 : min(_2528, _2529));
            float _2669 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : min(_2659, 0.0));
            float _2670 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : min(_2660, 0.0));
            _2698 = ((abs(_2535 / _2523) * cbSceneParam._m0[80u].y) * ((((_2669 - _2670) * 2.0) - ((exp2(_2543 * (isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0)))) - exp2(_2543 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))))) * _2658)) - ((exp2(_2545 * _2669) - exp2(_2545 * _2670)) * _2658))) + (_2538 * cbSceneParam._m0[80u].z);
        }
        vec4 _2700 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2434, _2435, 1.0), 0.0);
        float _2709 = exp2((_2698 * (-1.44269502162933349609375)) * (1.0 - _2700.w));
        float _2710 = log2(_2709);
        float _2726 = log2(_2454);
        _2547 = (exp2(_2726 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].x)) * _2700.x) / cbSceneParam._m0[78u].x)) + _2451;
        _2549 = (exp2(_2726 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].y)) * _2700.y) / cbSceneParam._m0[78u].y)) + _2452;
        _2551 = (exp2(_2726 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].z)) * _2700.z) / cbSceneParam._m0[78u].z)) + _2453;
        _2553 = _2709 * _2454;
    }
    else
    {
        _2547 = _2451;
        _2549 = _2452;
        _2551 = _2453;
        _2553 = _2454;
    }
    float _2565 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2566 = _2565 == 3.0;
    float _2567 = log2(_2553);
    float _2574 = exp2(_2567 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2396 + ((isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))) * _684))) + ((_2402 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2575 = exp2(_2567 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2398 + ((isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))) * _684))) + ((_2404 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2576 = exp2(_2567 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2400 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _684))) + ((_2406 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1489)) * cbPerFrame._m0[3u].x));
    float _2585 = (_2565 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2585 * (_2566 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2547)));
    SV_Target.y = _2585 * (_2566 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.z = _2585 * (_2566 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.w = cbInstanceData._m0[_2426].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2426].w;
}


