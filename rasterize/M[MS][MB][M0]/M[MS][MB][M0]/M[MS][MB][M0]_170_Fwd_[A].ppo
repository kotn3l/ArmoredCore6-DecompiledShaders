#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1181;
float _3542;
float _3543;
float _3544;
float _3545;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3554 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3565 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _520 = ((_492.x - _511) * _375) + _511;
    float _521 = ((_492.y - _512) * _375) + _512;
    float _522 = ((_492.z - _513) * _375) + _513;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _547 = ((_534.z - _522) * _448) + _522;
    float _550 = ((((_534.x - _520) * _448) + _520) * 2.0) + (-1.0);
    float _551 = ((((_534.y - _521) * _448) + _521) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3576 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _589 = (_550 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)))) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (_551 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)))) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _595 = (((_469.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _599 = ((_577.z - _595) * cbMtdParam._m0[19u].w) + _595;
    float _604 = cbMtdParam._m0[22u].x + _577.w;
    float _607 = fma(_557, _225 * NORMAL.x, fma(_590, _232 * TANGENT.x, (_218 * _210) * _589));
    float _610 = fma(_557, _225 * NORMAL.y, fma(_590, _232 * TANGENT.y, (_218 * _211) * _589));
    float _613 = fma(_557, _225 * NORMAL.z, fma(_590, _232 * TANGENT.z, (_218 * _212) * _589));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3587 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _621 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3609 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3620 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3631 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _861 = sqrt(((_691 * _691) + (_692 * _692)) + (_693 * _693));
        float _867 = (cbMatDynParam._m0[5u].x * _861) + cbMatDynParam._m0[5u].y;
        float _3642 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _872 = (cbMatDynParam._m0[5u].z * _861) + cbMatDynParam._m0[5u].w;
        float _3653 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) - _868)) + _868) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _740 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _743 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _756 = _238 + 9u;
    uint _757 = _756 + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3664 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _781 = ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * TEXCOORD_5.w) * _777.x;
    float _782 = dot(vec3(_618, _619, _620), vec3(_698, _699, _700));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _618) - _698;
    float _790 = (_785 * _619) - _699;
    float _791 = (_785 * _620) - _700;
    float _795 = abs(dot(vec3(_698, _699, _700), vec3(_618, _619, _620)));
    float _3697 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_621);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1180;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _909 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _913 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _938 = _842 + _618;
        float _939 = _846 + _619;
        float _940 = _850 + _620;
        float _950 = fma(_940, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938)) - _905;
        float _951 = fma(_940, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938)) - _909;
        float _952 = fma(_940, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938)) - _913;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1008 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_974.x + (-0.5));
        float _1010 = _1008 * (_974.y + (-0.5));
        float _1011 = _1008 * (_974.z + (-0.5));
        float _1018 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_981.x + (-0.5));
        float _1020 = _1018 * (_981.y + (-0.5));
        float _1021 = _1018 * (_981.z + (-0.5));
        float _1028 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_988.x + (-0.5));
        float _1030 = _1028 * (_988.y + (-0.5));
        float _1031 = _1028 * (_988.z + (-0.5));
        float _1038 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_995.x + (-0.5));
        float _1040 = _1038 * (_995.y + (-0.5));
        float _1041 = _1038 * (_995.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1062 = (dot(vec3(_618, _619, _620), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1072 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3745 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_1074 + 1.0))) + _1079) * _1042;
        float _1089 = _1010 * 0.5;
        float _1090 = _1020 * 0.5;
        float _1091 = _1030 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_618, _619, _620), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3778 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_1116 + 1.0))) + _1121) * _1043;
        float _1131 = _1011 * 0.5;
        float _1132 = _1021 * 0.5;
        float _1133 = _1031 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_618, _619, _620), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3811 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_1158 + 1.0))) + _1163) * _1044;
        _1180 = _1011;
        _1182 = _1010;
        _1183 = _1009;
        _1184 = _1021;
        _1185 = _1020;
        _1186 = _1019;
        _1187 = _1031;
        _1188 = _1030;
        _1189 = _1029;
        _1190 = _1044;
        _1191 = _1043;
        _1192 = _1042;
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _1181;
        _1182 = _1181;
        _1183 = _1181;
        _1184 = _1181;
        _1185 = _1181;
        _1186 = _1181;
        _1187 = _1181;
        _1188 = _1181;
        _1189 = _1181;
        _1190 = _1181;
        _1191 = _1181;
        _1192 = _1181;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1222 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1226 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1230 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1253 = _842 + _618;
        float _1254 = _846 + _619;
        float _1255 = _850 + _620;
        float _1265 = fma(_1255, cbModelParam._m0[30u].z, fma(_1254, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1253)) - _1222;
        float _1266 = fma(_1255, cbModelParam._m0[31u].z, fma(_1254, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1253)) - _1226;
        float _1267 = fma(_1255, cbModelParam._m0[32u].z, fma(_1254, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1253)) - _1230;
        float _1271 = inversesqrt(dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267)));
        float _1284 = ((_1271 * _1265) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1222 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1271 * _1266) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1226 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1271 * _1267) / cbModelParam._m0[35u].z) + ((((((_1230 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1284, _1285, _1286), 0.0);
        float _1321 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1288.x + (-0.5));
        float _1323 = _1321 * (_1288.y + (-0.5));
        float _1324 = _1321 * (_1288.z + (-0.5));
        float _1331 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1295.x + (-0.5));
        float _1333 = _1331 * (_1295.y + (-0.5));
        float _1334 = _1331 * (_1295.z + (-0.5));
        float _1341 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1302.x + (-0.5));
        float _1343 = _1341 * (_1302.y + (-0.5));
        float _1344 = _1341 * (_1302.z + (-0.5));
        float _1351 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1309.x + (-0.5));
        float _1353 = _1351 * (_1309.y + (-0.5));
        float _1354 = _1351 * (_1309.z + (-0.5));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = _1322 * 0.5;
        float _1359 = _1332 * 0.5;
        float _1360 = _1342 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_618, _619, _620), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3874 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1385 + 1.0))) + _1390) * _1355;
        float _1400 = _1323 * 0.5;
        float _1401 = _1333 * 0.5;
        float _1402 = _1343 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_618, _619, _620), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _3907 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1427 + 1.0))) + _1432) * _1356;
        float _1442 = _1324 * 0.5;
        float _1443 = _1334 * 0.5;
        float _1444 = _1344 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_618, _619, _620), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3940 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1469 + 1.0))) + _1474) * _1357;
        _1491 = _1324;
        _1492 = _1323;
        _1493 = _1322;
        _1494 = _1334;
        _1495 = _1333;
        _1496 = _1332;
        _1497 = _1344;
        _1498 = _1343;
        _1499 = _1342;
        _1500 = _1357;
        _1501 = _1356;
        _1502 = _1355;
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
    }
    else
    {
        _1491 = _1181;
        _1492 = _1181;
        _1493 = _1181;
        _1494 = _1181;
        _1495 = _1181;
        _1496 = _1181;
        _1497 = _1181;
        _1498 = _1181;
        _1499 = _1181;
        _1500 = _1181;
        _1501 = _1181;
        _1502 = _1181;
        _1503 = 0.0;
        _1504 = 0.0;
        _1505 = 0.0;
    }
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1193)) + _1193;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1194)) + _1194;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1195)) + _1195;
    float _1538 = fma(_1517, cbSceneParam._m0[89u].z, fma(_1516, cbSceneParam._m0[89u].y, _1515 * cbSceneParam._m0[89u].x));
    float _1541 = fma(_1517, cbSceneParam._m0[90u].z, fma(_1516, cbSceneParam._m0[90u].y, _1515 * cbSceneParam._m0[90u].x));
    float _1544 = fma(_1517, cbSceneParam._m0[91u].z, fma(_1516, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1515));
    float _1559 = _789 * 0.5;
    float _1560 = _790 * 0.5;
    float _1561 = _791 * 0.5;
    float _1562 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1565 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1568 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1602;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1575 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1180, _1184, _1187, _1190));
        float _1579 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1583 = dot(vec4(_1559, _1560, _1561, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1590 = dot(vec4(cbModelParam._m0[39u]), vec4(_1559, _1560, _1561, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1613;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1604 = dot(vec4(cbModelParam._m0[40u]), vec4(_1559, _1560, _1561, 1.0));
        _1613 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1604) ? 0.0 : (isnan(0.0) ? _1604 : max(0.0, _1604))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1613 = 1.0;
    }
    float _1617 = (_1613 * cbModelParam._m0[1u].x) + (_1602 * (1.0 - cbModelParam._m0[1u].x));
    float _1627 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1628 = isnan(_1627) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1627 : min(cbModelParam._m0[25u].z, _1627));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1677 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1681 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1685 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1688 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1691 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1694 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1722;
        if (_1688 > 0.0)
        {
            _1722 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1722 = frontier_phi_17_15_ladder;
        }
        float _1924;
        if (_1691 > 0.0)
        {
            _1924 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1924 = frontier_phi_26_22_ladder;
        }
        float _2167;
        if (_1694 > 0.0)
        {
            _2167 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2167 = frontier_phi_38_33_ladder;
        }
        float _2169 = isnan(_1924) ? _1722 : (isnan(_1722) ? _1924 : min(_1722, _1924));
        float _2170 = isnan(_2167) ? _2169 : (isnan(_2169) ? _2167 : min(_2169, _2167));
        float _2174 = (_2170 * _1688) + _1677;
        float _2175 = (_2170 * _1691) + _1681;
        float _2176 = (_2170 * _1694) + _1685;
        float _2177 = _2170 * 9.9999997473787516355514526367188e-05;
        float _2179 = (-1.0) - _2177;
        float _2181 = _2177 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2176 > _2181) || ((_2176 < _2179) || ((_2175 > _2181) || ((_2175 < _2179) || ((_2174 < _2179) || (_2174 > _2181))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2176, cbModelParam._m0[9u].z, fma(_2175, cbModelParam._m0[9u].y, _2174 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2176, cbModelParam._m0[10u].z, fma(_2175, cbModelParam._m0[10u].y, _2174 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2176, cbModelParam._m0[11u].z, fma(_2175, cbModelParam._m0[11u].y, _2174 * cbModelParam._m0[11u].x))), _1628);
            frontier_phi_16_38_ladder = _2300.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2300.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2300.x * cbModelParam._m0[1u].y;
        }
        _1710 = frontier_phi_16_38_ladder_2;
        _1712 = frontier_phi_16_38_ladder_1;
        _1714 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1628);
        _1710 = _1698.x * cbModelParam._m0[1u].y;
        _1712 = _1698.y * cbModelParam._m0[1u].y;
        _1714 = _1698.z * cbModelParam._m0[1u].y;
    }
    float _1718 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1718 : min(cbModelParam._m0[25u].w, _1718));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1774 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1778 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1782 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1785 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1788 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1791 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1929;
        if (_1785 > 0.0)
        {
            _1929 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1929 = frontier_phi_28_24_ladder;
        }
        float _2194;
        if (_1788 > 0.0)
        {
            _2194 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2194 = frontier_phi_40_35_ladder;
        }
        float _2399;
        if (_1791 > 0.0)
        {
            _2399 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2399 = frontier_phi_49_46_ladder;
        }
        float _2401 = isnan(_2194) ? _1929 : (isnan(_1929) ? _2194 : min(_1929, _2194));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1785) + _1774;
        float _2407 = (_2402 * _1788) + _1778;
        float _2408 = (_2402 * _1791) + _1782;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2410 = (-1.0) - _2409;
        float _2412 = _2409 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2408 > _2412) || ((_2408 < _2410) || ((_2407 > _2412) || ((_2407 < _2410) || ((_2406 < _2410) || (_2406 > _2412))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2607 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2408, cbModelParam._m0[17u].z, fma(_2407, cbModelParam._m0[17u].y, _2406 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2408, cbModelParam._m0[18u].z, fma(_2407, cbModelParam._m0[18u].y, _2406 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2408, cbModelParam._m0[19u].z, fma(_2407, cbModelParam._m0[19u].y, _2406 * cbModelParam._m0[19u].x))), _1719);
            frontier_phi_25_49_ladder = _2607.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2607.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2607.x * cbModelParam._m0[1u].z;
        }
        _1810 = frontier_phi_25_49_ladder_2;
        _1812 = frontier_phi_25_49_ladder_1;
        _1814 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1719);
        _1810 = _1794.x * cbModelParam._m0[1u].z;
        _1812 = _1794.y * cbModelParam._m0[1u].z;
        _1814 = _1794.z * cbModelParam._m0[1u].z;
    }
    float _1826 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1827 = _1826 * ((cbModelParam._m0[1u].w * (_1810 - _1710)) + _1710);
    float _1828 = _1826 * ((cbModelParam._m0[1u].w * (_1812 - _1712)) + _1712);
    float _1829 = _1826 * ((cbModelParam._m0[1u].w * (_1814 - _1714)) + _1714);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, _1827 * cbSceneParam._m0[91u].x));
    uvec4 _1848 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _1850 = _1848.x * 14u;
    uint _1851 = _1850 + 13u;
    float _1858 = _781 + (-1.0);
    float _1863 = (cbLight._m0[_1851].x * _1858) + 1.0;
    float _1864 = (cbLight._m0[_1851].y * _1858) + 1.0;
    float _1865 = (cbLight._m0[_1851].z * _1858) + 1.0;
    float _1866 = (cbLight._m0[_1851].w * _1858) + 1.0;
    uint _1867 = _1850 + 5u;
    float _1873 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1877 = _1850 + 4u;
    float _1883 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1887 = _1850 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_618, _619, _620));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_618, _619, _620));
    float _4076 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4087 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1867].x * _1873) * _1908) + ((cbLight._m0[_1877].x * _1883) * _1906);
    float _1916 = ((_1873 * cbLight._m0[_1867].y) * _1908) + ((_1883 * cbLight._m0[_1877].y) * _1906);
    float _1917 = ((_1873 * cbLight._m0[_1867].z) * _1908) + ((_1883 * cbLight._m0[_1877].z) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1850 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _1934;
    float _1936;
    float _1938;
    if (_1923)
    {
        _1934 = _1915;
        _1936 = _1916;
        _1938 = _1917;
    }
    else
    {
        uint _1942 = _1850 + 6u;
        float _1958 = (dot(vec3(cbLight._m0[_1850 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _4098 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1961 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1934 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1915;
        _1936 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1916;
        _1938 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1917;
    }
    bool _1941 = _1921.y == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1941)
    {
        _1979 = _1934;
        _1981 = _1936;
        _1983 = _1938;
    }
    else
    {
        uint _2138 = _1850 + 7u;
        float _2154 = (dot(vec3(cbLight._m0[_1850 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4114 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2157 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _1979 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _1934;
        _1981 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _1936;
        _1983 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _1938;
    }
    uint _1986 = _1850 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _621) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1850].x + _698;
    float _2002 = cbLight._m0[_1850].y + _699;
    float _2003 = cbLight._m0[_1850].z + _700;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1850].xyz));
    float _4130 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2015 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2016 = dot(vec3(_618, _619, _620), vec3(_2008, _2009, _2010));
    float _4152 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2008, _2009, _2010));
    float _4163 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2000;
    float _2051 = (0.5 / (((_2015 * ((_2014 * _2040) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2040) + _2000) * _2014))) * _2014;
    float _4174 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2064 = _1850 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _621) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1887].x + _698;
    float _2078 = cbLight._m0[_1887].y + _699;
    float _2079 = cbLight._m0[_1887].z + _700;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_1887].xyz));
    float _4185 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _2091 = dot(vec3(_618, _619, _620), vec3(_2084, _2085, _2086));
    float _4196 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2084, _2085, _2086));
    float _4207 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2076;
    float _2123 = (0.5 / (((_2015 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2113) + _2076) * _2090))) * _2090;
    float _4218 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2135 = (((_2112 * cbLight._m0[_2064].x) * _2125) * _1873) + (((_2039 * cbLight._m0[_1986].x) * _2053) * _1883);
    float _2136 = (((_2112 * cbLight._m0[_2064].y) * _2125) * _1873) + (((_2039 * cbLight._m0[_1986].y) * _2053) * _1883);
    float _2137 = (((_2112 * cbLight._m0[_2064].z) * _2125) * _1873) + (((_2039 * cbLight._m0[_1986].z) * _2053) * _1883);
    float _2199;
    float _2201;
    float _2203;
    if (_1923)
    {
        _2199 = _2135;
        _2201 = _2136;
        _2203 = _2137;
    }
    else
    {
        uint _2205 = _1850 + 2u;
        uint _2209 = _1850 + 10u;
        float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _621) * 0.949999988079071044921875);
        float _2224 = _2223 * _2223;
        float _2225 = cbLight._m0[_2205].x + _698;
        float _2226 = cbLight._m0[_2205].y + _699;
        float _2227 = cbLight._m0[_2205].z + _700;
        float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
        float _2232 = _2231 * _2225;
        float _2233 = _2231 * _2226;
        float _2234 = _2231 * _2227;
        float _2235 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2205].xyz));
        float _4229 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _2239 = dot(vec3(_618, _619, _620), vec3(_2232, _2233, _2234));
        float _4240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2243 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2232, _2233, _2234));
        float _4251 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2247 = _2224 * _2224;
        float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
        float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2261 = 1.0 - _2224;
        float _2271 = (0.5 / (((_2015 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2261) + _2224) * _2238))) * _2238;
        float _4262 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2273 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
        float _2274 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2199 = (((_2260 * cbLight._m0[_2209].x) * _2273) * _2274) + _2135;
        _2201 = (((_2260 * cbLight._m0[_2209].y) * _2273) * _2274) + _2136;
        _2203 = (((_2260 * cbLight._m0[_2209].z) * _2273) * _2274) + _2137;
    }
    float _2309;
    float _2311;
    float _2313;
    if (_1941)
    {
        _2309 = _2199;
        _2311 = _2201;
        _2313 = _2203;
    }
    else
    {
        uint _2320 = _1850 + 3u;
        uint _2324 = _1850 + 11u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _621) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _698;
        float _2341 = cbLight._m0[_2320].y + _699;
        float _2342 = cbLight._m0[_2320].z + _700;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2320].xyz));
        float _4278 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2354 = dot(vec3(_618, _619, _620), vec3(_2347, _2348, _2349));
        float _4289 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4300 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2375 = (exp2(log2(1.0 - (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2376 = 1.0 - _2339;
        float _2386 = (0.5 / (((_2015 * ((_2353 * _2376) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2376) + _2339) * _2353))) * _2353;
        float _4311 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2388 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2389 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2309 = (((_2375 * cbLight._m0[_2324].x) * _2388) * _2389) + _2199;
        _2311 = (((_2375 * cbLight._m0[_2324].y) * _2388) * _2389) + _2201;
        _2313 = (((_2375 * cbLight._m0[_2324].z) * _2388) * _2389) + _2203;
    }
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    if (_1848.y == 0u)
    {
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2464;
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2464;
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2464;
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.x;
        uint _2491 = uint((float(_2479.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2480))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2480)));
        float _2501 = (log2(_2467 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2502 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        uint _2505 = uint(isnan(14.0) ? _2502 : (isnan(_2502) ? 14.0 : min(_2502, 14.0)));
        uvec4 _2510 = texelFetch(g_lightClusterGridBuffer, int(((_2505 << 2u) + (_2491 << 6u)) >> 2u));
        uint _2511 = _2510.x;
        uint _2512 = _2479.z;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        if (((((1u << ((_2512 >> 4u) & 15u)) + 4294967295u) & _2511) == 0u) || ((_2512 & 240u) == 0u))
        {
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
        }
        else
        {
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            uint _2771 = 0u;
            uint _2780;
            bool _2781;
            for (;;)
            {
                _2780 = texelFetch(g_lightClassification, int((((_2505 << 5u) + (_2491 << 9u)) + (_2771 << 2u)) >> 2u)).x;
                _2781 = _2780 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2781)
                {
                    frontier_phi_66_pred = _2765;
                    frontier_phi_66_pred_1 = _2770;
                    frontier_phi_66_pred_2 = _2769;
                    frontier_phi_66_pred_3 = _2768;
                    frontier_phi_66_pred_4 = _2767;
                    frontier_phi_66_pred_5 = _2766;
                }
                else
                {
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    uint _2916;
                    _2910 = _2765;
                    _2911 = _2766;
                    _2912 = _2767;
                    _2913 = _2768;
                    _2914 = _2769;
                    _2915 = _2770;
                    _2916 = _2780;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    for (;;)
                    {
                        uint _2920 = uint(findLSB(_2916)) + (_2771 << 5u);
                        uint _2917 = (_2916 + 4294967295u) & _2916;
                        uint _2922 = _2920 * 48u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2942 = (_2920 * 48u) + 4u;
                        vec4 _2955 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2961 = (_2920 * 48u) + 8u;
                        vec3 _2972 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x));
                        float _2976 = _2936.x - _2465;
                        float _2977 = _2936.y - _2466;
                        float _2978 = _2936.z - _2467;
                        float _2979 = dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978));
                        float _2982 = inversesqrt(_2979);
                        float _2983 = _2982 * _2976;
                        float _2984 = _2982 * _2977;
                        float _2985 = _2982 * _2978;
                        float _2986 = dot(vec3(_737, _740, _743), vec3(_2983, _2984, _2985));
                        float _2991 = 1.0 - (_2979 * _2936.w);
                        float _4337 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _2993 = sqrt(_2979) * _2955.w;
                        float _2996 = 1.39999997615814208984375 / (_2993 + 1.39999997615814208984375);
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2986) + _2997;
                        float _3003 = _2993 * _2993;
                        float _3007 = ((isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))) * _2992) / ((_3003 * 0.699999988079071044921875) + 1.0);
                        float _3011 = (-0.0) - _2465;
                        float _3012 = (-0.0) - _2466;
                        float _3013 = (-0.0) - _2467;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3018 = _3017 * _3011;
                        float _3019 = _3017 * _3012;
                        float _3020 = _3017 * _3013;
                        float _3028 = exp2(log2(1.0 / ((_3003 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _797;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_737, _740, _743), vec3(_3018, _3019, _3020));
                        float _4353 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3053 = dot(vec3(_737, _740, _743), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4364 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2996 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2986) + _3062;
                        float _4375 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4386 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3088 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) / ((_3060 * _3060) * ((_3003 * 2.1991131305694580078125) + 3.141590118408203125))) * _2992;
                        _2840 = (_3007 * _2955.x) + _2913;
                        _2841 = (_3007 * _2955.y) + _2914;
                        _2842 = (_3007 * _2955.z) + _2915;
                        _2837 = (_3088 * _2972.x) + _2910;
                        _2838 = (_3088 * _2972.y) + _2911;
                        _2839 = (_3088 * _2972.z) + _2912;
                        if (_2917 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2910 = _2837;
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2917;
                        }
                    }
                    frontier_phi_66_pred = _2837;
                    frontier_phi_66_pred_1 = _2842;
                    frontier_phi_66_pred_2 = _2841;
                    frontier_phi_66_pred_3 = _2840;
                    frontier_phi_66_pred_4 = _2839;
                    frontier_phi_66_pred_5 = _2838;
                }
                _2613 = frontier_phi_66_pred;
                _2623 = frontier_phi_66_pred_1;
                _2621 = frontier_phi_66_pred_2;
                _2619 = frontier_phi_66_pred_3;
                _2617 = frontier_phi_66_pred_4;
                _2615 = frontier_phi_66_pred_5;
                uint _2772 = _2771 + 1u;
                if (_2772 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2765 = _2613;
                    _2766 = _2615;
                    _2767 = _2617;
                    _2768 = _2619;
                    _2769 = _2621;
                    _2770 = _2623;
                    _2771 = _2772;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
        }
        uvec4 _2626 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2627 = _2626.z;
        uint _2629 = (_2627 >> 8u) & 15u;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((4294967295u << _2629) & _2511) == 0u)
        {
            _2733 = _2612;
            _2735 = _2614;
            _2737 = _2616;
            _2739 = _2618;
            _2741 = _2620;
            _2743 = _2622;
        }
        else
        {
            float _2758 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
            float _2759 = _2758 * _2465;
            float _2760 = _2758 * _2466;
            float _2761 = _2758 * _2467;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2629 < ((_2627 >> 12u) & 15u))
            {
                float _2734;
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2893 = _2612;
                float _2894 = _2614;
                float _2895 = _2616;
                float _2896 = _2618;
                float _2897 = _2620;
                float _2898 = _2622;
                uint _2899 = _2629;
                uint _2908;
                bool _2909;
                for (;;)
                {
                    _2908 = texelFetch(g_lightClassification, int((((_2505 << 5u) + (_2491 << 9u)) + (_2899 << 2u)) >> 2u)).x;
                    _2909 = _2908 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2909)
                    {
                        frontier_phi_77_pred = _2898;
                        frontier_phi_77_pred_1 = _2897;
                        frontier_phi_77_pred_2 = _2896;
                        frontier_phi_77_pred_3 = _2895;
                        frontier_phi_77_pred_4 = _2894;
                        frontier_phi_77_pred_5 = _2893;
                    }
                    else
                    {
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3115 = _2893;
                        float _3116 = _2894;
                        float _3117 = _2895;
                        float _3118 = _2896;
                        float _3119 = _2897;
                        float _3120 = _2898;
                        uint _3121 = _2908;
                        uint _3122;
                        vec4 _3147;
                        float _3148;
                        vec4 _3163;
                        vec3 _3175;
                        vec4 _3190;
                        vec4 _3205;
                        float _3251;
                        bool _3252;
                        for (;;)
                        {
                            uint _3132 = ((_2899 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3121));
                            _3122 = (_3121 + 4294967295u) & _3121;
                            uint _3134 = _3132 * 40u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3148 = _3147.w;
                            uint _3150 = (_3132 * 40u) + 4u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3132 * 40u) + 8u;
                            _3175 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x));
                            uint _3177 = (_3132 * 40u) + 16u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3132 * 40u) + 20u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3207 = (_3132 * 40u) + 24u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3226 = (_3132 * 40u) + 28u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            _3251 = fma(_2467, _3239.z, fma(_2466, _3239.y, _3239.x * _2465)) + _3239.w;
                            _3252 = !((fma(_2467, _3220.z, fma(_2466, _3220.y, _3220.x * _2465)) + _3220.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3252)
                            {
                                float _3279 = _3147.x - _2465;
                                float _3280 = _3147.y - _2466;
                                float _3281 = _3147.z - _2467;
                                float _3282 = dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281));
                                float _3285 = inversesqrt(_3282);
                                float _3286 = _3285 * _3279;
                                float _3287 = _3285 * _3280;
                                float _3288 = _3285 * _3281;
                                float _3292 = 1.0 - (_3282 / (_3148 * _3148));
                                float _4397 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3293 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3297 = sqrt(_3282) * _3163.w;
                                float _3299 = 1.39999997615814208984375 / (_3297 + 1.39999997615814208984375);
                                float _3300 = _3299 * _3299;
                                float _3303 = ((1.0 - _3300) * dot(vec3(_3286, _3287, _3288), vec3(_737, _740, _743))) + _3300;
                                float _3306 = _3297 * _3297;
                                float _3310 = (fma(_2467, _3190.z, fma(_2466, _3190.y, _3190.x * _2465)) + _3190.w) / _3251;
                                float _3311 = (fma(_2467, _3205.z, fma(_2466, _3205.y, _3205.x * _2465)) + _3205.w) / _3251;
                                float _3315 = 1.0 - dot(vec2(_3310, _3311), vec2(_3310, _3311));
                                float _4413 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3317 = _3316 * (((isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0))) * _3293) / ((_3306 * 0.699999988079071044921875) + 1.0));
                                float _3329 = exp2(log2(1.0 / ((_3306 * 3.5) + 5.0)) * 0.25);
                                float _3330 = 1.0 - _797;
                                float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                                float _3338 = _3337 * _3337;
                                float _3339 = _3338 * _3338;
                                float _3340 = _3286 - _2759;
                                float _3341 = _3287 - _2760;
                                float _3342 = _3288 - _2761;
                                float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                                float _3350 = dot(vec3(_737, _740, _743), vec3((-0.0) - _2759, (-0.0) - _2760, (-0.0) - _2761));
                                float _4424 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3353 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3354 = dot(vec3(_737, _740, _743), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                                float _4435 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3357 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                                float _3362 = _3299 * _3338;
                                float _3363 = _3362 * _3362;
                                float _3369 = ((1.0 - _3363) * dot(vec3(_737, _740, _743), vec3(_3286, _3287, _3288))) + _3363;
                                float _4446 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                                float _3371 = 1.0 - _3338;
                                float _3381 = (0.5 / (((_3370 * ((_3353 * _3371) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3370 * _3371) + _3338) * _3353))) * _3370;
                                float _4457 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3391 = (_3316 * _3293) * (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) / ((_3361 * _3361) * ((_3306 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3317 * _3163.y;
                                frontier_phi_83_pred_1 = _3317 * _3163.x;
                                frontier_phi_83_pred_2 = _3391 * _3175.z;
                                frontier_phi_83_pred_3 = _3391 * _3175.y;
                                frontier_phi_83_pred_4 = _3391 * _3175.x;
                                frontier_phi_83_pred_5 = _3317 * _3163.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3399 = frontier_phi_83_pred;
                            _3398 = frontier_phi_83_pred_1;
                            _3397 = frontier_phi_83_pred_2;
                            _3396 = frontier_phi_83_pred_3;
                            _3395 = frontier_phi_83_pred_4;
                            _3400 = frontier_phi_83_pred_5;
                            _3105 = _3398 + _3118;
                            _3106 = _3399 + _3119;
                            _3107 = _3400 + _3120;
                            _3102 = _3395 + _3115;
                            _3103 = _3396 + _3116;
                            _3104 = _3397 + _3117;
                            if (_3122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3122;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3107;
                        frontier_phi_77_pred_1 = _3106;
                        frontier_phi_77_pred_2 = _3105;
                        frontier_phi_77_pred_3 = _3104;
                        frontier_phi_77_pred_4 = _3103;
                        frontier_phi_77_pred_5 = _3102;
                    }
                    _2744 = frontier_phi_77_pred;
                    _2742 = frontier_phi_77_pred_1;
                    _2740 = frontier_phi_77_pred_2;
                    _2738 = frontier_phi_77_pred_3;
                    _2736 = frontier_phi_77_pred_4;
                    _2734 = frontier_phi_77_pred_5;
                    uint _2900 = _2899 + 1u;
                    if (_2900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2893 = _2734;
                        _2894 = _2736;
                        _2895 = _2738;
                        _2896 = _2740;
                        _2897 = _2742;
                        _2898 = _2744;
                        _2899 = _2900;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2738;
                frontier_phi_58_59_ladder_1 = _2744;
                frontier_phi_58_59_ladder_2 = _2742;
                frontier_phi_58_59_ladder_3 = _2740;
                frontier_phi_58_59_ladder_4 = _2736;
                frontier_phi_58_59_ladder_5 = _2734;
            }
            else
            {
                frontier_phi_58_59_ladder = _2616;
                frontier_phi_58_59_ladder_1 = _2622;
                frontier_phi_58_59_ladder_2 = _2620;
                frontier_phi_58_59_ladder_3 = _2618;
                frontier_phi_58_59_ladder_4 = _2614;
                frontier_phi_58_59_ladder_5 = _2612;
            }
            _2733 = frontier_phi_58_59_ladder_5;
            _2735 = frontier_phi_58_59_ladder_4;
            _2737 = frontier_phi_58_59_ladder;
            _2739 = frontier_phi_58_59_ladder_3;
            _2741 = frontier_phi_58_59_ladder_2;
            _2743 = frontier_phi_58_59_ladder_1;
        }
        float _2748 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2524 = (_2748 * _2739) + _1979;
        _2526 = (_2748 * _2741) + _1981;
        _2528 = (_2748 * _2743) + _1983;
        _2530 = ((_2733 * 0.039999999105930328369140625) * _2748) + _2309;
        _2532 = ((_2735 * 0.039999999105930328369140625) * _2748) + _2311;
        _2534 = ((_2737 * 0.039999999105930328369140625) * _2748) + _2313;
    }
    else
    {
        _2524 = _1979;
        _2526 = _1981;
        _2528 = _1983;
        _2530 = _2309;
        _2532 = _2311;
        _2534 = _2313;
    }
    float _4473 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4484 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4495 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2551 = ((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2524 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _781))) + ((_2530 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1617)) * cbPerFrame._m0[3u].x);
    float _2552 = ((isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2526 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _781))) + ((_2532 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1617)) * cbPerFrame._m0[3u].x);
    float _2553 = ((isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2528 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _781))) + ((_2534 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1617)) * cbPerFrame._m0[3u].x);
    uint _2554 = _238 + 6u;
    float _2562 = _718 / cbSceneParam._m0[86u].x;
    float _2563 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2577 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2579 = _2577.x;
    float _2580 = _2577.y;
    float _2581 = _2577.z;
    float _2582 = _2577.w;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2637 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2638 = _2637 / _639;
        float _2649 = _2638 * _691;
        float _2650 = _692 * _2638;
        float _2651 = (-0.0) - _2650;
        float _2653 = _2638 * _693;
        float _2655 = (cbSceneParam._m0[77u].w * _2651) / _2637;
        float _2656 = _2655 + cbSceneParam._m0[79u].w;
        float _2657 = cbSceneParam._m0[79u].w - _2650;
        float _2663 = sqrt(((_2649 * _2649) + (_2650 * _2650)) + (_2653 * _2653));
        float _2666 = (1.0 - (cbSceneParam._m0[77u].w / _2637)) * _2663;
        float _2671 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2673 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2850;
        if (abs((_2651 - _2655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2850 = ((((_2656 > 0.0) ? exp2(_2671 * _2656) : (2.0 - exp2(_2673 * _2656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2666;
        }
        else
        {
            float _2794 = 1.0 / cbSceneParam._m0[80u].x;
            float _2795 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : max(_2656, _2657));
            float _2796 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : min(_2656, _2657));
            float _2805 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : min(_2795, 0.0));
            float _2806 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : min(_2796, 0.0));
            _2850 = ((abs(_2663 / _2651) * cbSceneParam._m0[80u].y) * ((((_2805 - _2806) * 2.0) - ((exp2(_2671 * (isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0)))) - exp2(_2671 * (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))))) * _2794)) - ((exp2(_2673 * _2805) - exp2(_2673 * _2806)) * _2794))) + (_2666 * cbSceneParam._m0[80u].z);
        }
        vec4 _2852 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2562, _2563, 1.0), 0.0);
        float _2861 = exp2((_2850 * (-1.44269502162933349609375)) * (1.0 - _2852.w));
        float _2862 = log2(_2861);
        float _2878 = log2(_2582);
        _2675 = (exp2(_2878 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].x)) * _2852.x) / cbSceneParam._m0[78u].x)) + _2579;
        _2677 = (exp2(_2878 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].y)) * _2852.y) / cbSceneParam._m0[78u].y)) + _2580;
        _2679 = (exp2(_2878 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2862 * cbSceneParam._m0[78u].z)) * _2852.z) / cbSceneParam._m0[78u].z)) + _2581;
        _2681 = _2861 * _2582;
    }
    else
    {
        _2675 = _2579;
        _2677 = _2580;
        _2679 = _2581;
        _2681 = _2582;
    }
    bool _2888;
    vec4 _2691;
    vec4 _2713;
    float _2715;
    float _2719;
    float _2720;
    float _2721;
    float _2722;
    bool _2732;
    for (;;)
    {
        _2691 = cbMatDynParam._m0[0u];
        float _2693 = roundEven(_2691.y);
        bool _2694 = _2693 == 3.0;
        float _2695 = log2(_2681);
        float _2702 = exp2(_2695 * cbSceneParam._m0[78u].x) * _2551;
        float _2703 = exp2(_2695 * cbSceneParam._m0[78u].y) * _2552;
        float _2704 = exp2(_2695 * cbSceneParam._m0[78u].z) * _2553;
        float _2711 = _707 + (-0.5);
        _2713 = cbMtdParam._m0[1u];
        _2715 = _2713.y * _2711;
        float _2718 = (_2693 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2719 = _2718 * (_2694 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2675)));
        _2720 = _2718 * (_2694 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2677)));
        _2721 = _2718 * (_2694 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2679)));
        _2722 = _2711 * 0.999000012874603271484375;
        _2732 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2732)
        {
            if ((cbInstanceData._m0[_238 + 7u].x + _2722) < 0.5)
            {
                _2888 = true;
                break;
            }
        }
        uint _2829 = _756 + uint(_2691.w);
        if ((cbInstanceData._m0[_2829].w < 1.0) && ((cbInstanceData._m0[_2829].w + _2722) < 0.5))
        {
            _2888 = true;
            break;
        }
        if ((_2715 + 1.0) < _2713.x)
        {
            _2888 = true;
            break;
        }
        _2888 = false;
        break;
    }
    float _3093;
    if (_2888)
    {
        discard_state = true;
        _3093 = 0.0;
    }
    else
    {
        _3093 = cbInstanceData._m0[_2554].w;
    }
    SV_Target.x = _2719;
    SV_Target.y = _2720;
    SV_Target.z = _2721;
    SV_Target.w = _3093;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2554].w;
    discard_exit();
}


