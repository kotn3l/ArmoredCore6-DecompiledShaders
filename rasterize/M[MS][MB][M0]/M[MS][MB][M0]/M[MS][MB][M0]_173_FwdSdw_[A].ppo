#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1243;
float _3887;
float _3888;
float _3889;
float _3890;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _369 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _369) * cbMtdParam._m0[24u].x) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3899 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _394 = (_387 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _395 = (_387 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _396 = (_387 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].x) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3910 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _510 = ((_482.x - _501) * _387) + _501;
    float _511 = ((_482.y - _502) * _387) + _502;
    float _512 = ((_482.z - _503) * _387) + _503;
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _537 = ((_524.z - _512) * _460) + _512;
    float _540 = ((((_524.x - _510) * _460) + _510) * 2.0) + (-1.0);
    float _542 = ((((_524.y - _511) * _460) + _511) * 2.0) + (-1.0);
    float _543 = dot(vec2(_540, _542), vec2(_540, _542));
    float _3921 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _548 = sqrt(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _577 = _575.x;
    float _578 = 1.0 - _577;
    float _606 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_577 - _578) * cbMtdParam._m0[24u].w) + _578) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3932 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _615 = ((((cbMtdParam._m0[10u].x - _467) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _607) + _467;
    float _616 = ((((cbMtdParam._m0[10u].y - _468) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _607) + _468;
    float _617 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _469)) * _607) + _469;
    float _621 = ((cbMtdParam._m0[23u].y - _537) * _607) + _537;
    vec4 _640 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _646 = (_640.x * 2.0) + (-1.0);
    float _647 = (_640.y * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _3943 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _664 = (_607 * (((cbMtdParam._m0[22u].z * _540) - _540) + _646)) + _540;
    float _665 = (_607 * (((cbMtdParam._m0[22u].z * _542) - _542) + _647)) + _542;
    float _666 = (_607 * (sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) - _548)) + _548;
    float _668 = cbMtdParam._m0[22u].x + _561.w;
    float _671 = fma(_666, _238 * NORMAL.x, fma(_665, _245 * TANGENT.x, (_231 * _223) * _664));
    float _674 = fma(_666, _238 * NORMAL.y, fma(_665, _245 * TANGENT.y, (_231 * _224) * _664));
    float _677 = fma(_666, _238 * NORMAL.z, fma(_665, _245 * TANGENT.z, (_231 * _225) * _664));
    float _681 = inversesqrt(dot(vec3(_671, _674, _677), vec3(_671, _674, _677)));
    float _682 = _681 * _671;
    float _683 = _681 * _674;
    float _684 = _681 * _677;
    float _3954 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _685 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3976 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3987 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3998 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _703 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _754 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _744);
    float _755 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _744);
    float _756 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _744);
    float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
    float _761 = _754 * _760;
    float _762 = _755 * _760;
    float _763 = _756 * _760;
    vec4 _768 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _770 = _768.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _924 = sqrt(((_754 * _754) + (_755 * _755)) + (_756 * _756));
        float _930 = (cbMatDynParam._m0[5u].x * _924) + cbMatDynParam._m0[5u].y;
        float _4009 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _935 = (cbMatDynParam._m0[5u].z * _924) + cbMatDynParam._m0[5u].w;
        float _4020 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) - _931)) + _931) < ((_770 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_684, cbSceneParam._m0[5u].z, fma(_683, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _682));
    float _803 = fma(_684, cbSceneParam._m0[6u].z, fma(_683, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _682));
    float _806 = fma(_684, cbSceneParam._m0[7u].z, fma(_683, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _682));
    uint _819 = _251 + 9u;
    uint _820 = _819 + uint(cbMatDynParam._m0[0u].w);
    float _826 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_820].x;
    float _827 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_820].y;
    float _828 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_820].z;
    float _4031 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _4053 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    vec4 _840 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _844 = ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * TEXCOORD_5.w) * _840.x;
    float _845 = dot(vec3(_682, _683, _684), vec3(_761, _762, _763));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _682) - _761;
    float _853 = (_848 * _683) - _762;
    float _854 = (_848 * _684) - _763;
    float _858 = abs(dot(vec3(_761, _762, _763), vec3(_682, _683, _684)));
    float _4064 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_685);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1242;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _967 = fma(_913, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905));
        float _971 = fma(_913, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905));
        float _975 = fma(_913, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905));
        float _1000 = _905 + _682;
        float _1001 = _909 + _683;
        float _1002 = _913 + _684;
        float _1012 = fma(_1002, cbModelParam._m0[26u].z, fma(_1001, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1000)) - _967;
        float _1013 = fma(_1002, cbModelParam._m0[27u].z, fma(_1001, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1000)) - _971;
        float _1014 = fma(_1002, cbModelParam._m0[28u].z, fma(_1001, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1000)) - _975;
        float _1018 = inversesqrt(dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014)));
        float _1031 = ((_1018 * _1012) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_967 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1018 * _1013) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_971 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1018 * _1014) / cbModelParam._m0[34u].z) + ((((((_975 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1031, _1032, _1033), 0.0);
        float _1070 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1036.x + (-0.5));
        float _1072 = _1070 * (_1036.y + (-0.5));
        float _1073 = _1070 * (_1036.z + (-0.5));
        float _1080 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1043.x + (-0.5));
        float _1082 = _1080 * (_1043.y + (-0.5));
        float _1083 = _1080 * (_1043.z + (-0.5));
        float _1090 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1050.x + (-0.5));
        float _1092 = _1090 * (_1050.y + (-0.5));
        float _1093 = _1090 * (_1050.z + (-0.5));
        float _1100 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1057.x + (-0.5));
        float _1102 = _1100 * (_1057.y + (-0.5));
        float _1103 = _1100 * (_1057.z + (-0.5));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = _1071 * 0.5;
        float _1108 = _1081 * 0.5;
        float _1109 = _1091 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1124 = (dot(vec3(_682, _683, _684), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4090 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1134 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _4101 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4112 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_1136 + 1.0))) + _1141) * _1104;
        float _1151 = _1072 * 0.5;
        float _1152 = _1082 * 0.5;
        float _1153 = _1092 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_682, _683, _684), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _4145 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1178 + 1.0))) + _1183) * _1105;
        float _1193 = _1073 * 0.5;
        float _1194 = _1083 * 0.5;
        float _1195 = _1093 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_682, _683, _684), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4178 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1220 + 1.0))) + _1225) * _1106;
        _1242 = _1073;
        _1244 = _1072;
        _1245 = _1071;
        _1246 = _1083;
        _1247 = _1082;
        _1248 = _1081;
        _1249 = _1093;
        _1250 = _1092;
        _1251 = _1091;
        _1252 = _1106;
        _1253 = _1105;
        _1254 = _1104;
        _1255 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
    }
    else
    {
        _1242 = _1243;
        _1244 = _1243;
        _1245 = _1243;
        _1246 = _1243;
        _1247 = _1243;
        _1248 = _1243;
        _1249 = _1243;
        _1250 = _1243;
        _1251 = _1243;
        _1252 = _1243;
        _1253 = _1243;
        _1254 = _1243;
        _1255 = 0.0;
        _1256 = 0.0;
        _1257 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_913, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905));
        float _1288 = fma(_913, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905));
        float _1292 = fma(_913, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905));
        float _1315 = _905 + _682;
        float _1316 = _909 + _683;
        float _1317 = _913 + _684;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_682, _683, _684), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4241 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_682, _683, _684), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4274 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_682, _683, _684), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4307 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1243;
        _1554 = _1243;
        _1555 = _1243;
        _1556 = _1243;
        _1557 = _1243;
        _1558 = _1243;
        _1559 = _1243;
        _1560 = _1243;
        _1561 = _1243;
        _1562 = _1243;
        _1563 = _1243;
        _1564 = _1243;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1255)) + _1255;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1256)) + _1256;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1257)) + _1257;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _852 * 0.5;
    float _1622 = _853 * 0.5;
    float _1623 = _854 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1242, _1246, _1249, _1252));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1244, _1247, _1250, _1253));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _685);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_913, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_913, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_913, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1753 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1756 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1784 = frontier_phi_17_15_ladder;
        }
        float _1955;
        if (_1753 > 0.0)
        {
            _1955 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1955 = frontier_phi_26_22_ladder;
        }
        float _2250;
        if (_1756 > 0.0)
        {
            _2250 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2250 = frontier_phi_38_33_ladder;
        }
        float _2252 = isnan(_1955) ? _1784 : (isnan(_1784) ? _1955 : min(_1784, _1955));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1750) + _1739;
        float _2258 = (_2253 * _1753) + _1743;
        float _2259 = (_2253 * _1756) + _1747;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2260;
        float _2264 = _2260 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 > _2264) || ((_2258 < _2262) || ((_2257 < _2262) || (_2257 > _2264))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2259, cbModelParam._m0[9u].z, fma(_2258, cbModelParam._m0[9u].y, _2257 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2259, cbModelParam._m0[10u].z, fma(_2258, cbModelParam._m0[10u].y, _2257 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2259, cbModelParam._m0[11u].z, fma(_2258, cbModelParam._m0[11u].y, _2257 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_16_38_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_16_38_ladder_2;
        _1774 = frontier_phi_16_38_ladder_1;
        _1776 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1690);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _685);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1872;
    float _1874;
    float _1876;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1836 = fma(_913, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905)) + cbModelParam._m0[21u].w;
        float _1840 = fma(_913, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905)) + cbModelParam._m0[22u].w;
        float _1844 = fma(_913, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905)) + cbModelParam._m0[23u].w;
        float _1847 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1850 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1853 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1960;
        if (_1847 > 0.0)
        {
            _1960 = abs((1.0 - _1836) / _1847);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1836 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1960 = frontier_phi_28_24_ladder;
        }
        float _2277;
        if (_1850 > 0.0)
        {
            _2277 = abs((1.0 - _1840) / _1850);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1840 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2277 = frontier_phi_40_35_ladder;
        }
        float _2604;
        if (_1853 > 0.0)
        {
            _2604 = abs((1.0 - _1844) / _1853);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1844 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2604 = frontier_phi_50_47_ladder;
        }
        float _2606 = isnan(_2277) ? _1960 : (isnan(_1960) ? _2277 : min(_1960, _2277));
        float _2607 = isnan(_2604) ? _2606 : (isnan(_2606) ? _2604 : min(_2606, _2604));
        float _2611 = (_2607 * _1847) + _1836;
        float _2612 = (_2607 * _1850) + _1840;
        float _2613 = (_2607 * _1853) + _1844;
        float _2614 = _2607 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2614;
        float _2617 = _2614 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2613 > _2617) || ((_2613 < _2615) || ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 < _2615) || (_2611 > _2617))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2613, cbModelParam._m0[17u].z, fma(_2612, cbModelParam._m0[17u].y, _2611 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2613, cbModelParam._m0[18u].z, fma(_2612, cbModelParam._m0[18u].y, _2611 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2613, cbModelParam._m0[19u].z, fma(_2612, cbModelParam._m0[19u].y, _2611 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_25_50_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1872 = frontier_phi_25_50_ladder_2;
        _1874 = frontier_phi_25_50_ladder_1;
        _1876 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1856 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1781);
        _1872 = _1856.x * cbModelParam._m0[1u].z;
        _1874 = _1856.y * cbModelParam._m0[1u].z;
        _1876 = _1856.z * cbModelParam._m0[1u].z;
    }
    float _1888 = ((((1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_873 * _860)) * _844;
    float _1889 = _1888 * ((cbModelParam._m0[1u].w * (_1872 - _1772)) + _1772);
    float _1890 = _1888 * ((cbModelParam._m0[1u].w * (_1874 - _1774)) + _1774);
    float _1891 = _1888 * ((cbModelParam._m0[1u].w * (_1876 - _1776)) + _1776);
    float _1894 = fma(_1891, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1889 * cbSceneParam._m0[89u].x));
    float _1897 = fma(_1891, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1889 * cbSceneParam._m0[90u].x));
    float _1900 = fma(_1891, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1889 * cbSceneParam._m0[91u].x));
    float _1934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1938 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1947 = _1934 / _1946;
    float _1948 = _1938 / _1946;
    float _1949 = _1942 / _1946;
    float _2096;
    float _2097;
    float _2098;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1976 = ((uint(_1949 > cbSceneParam._m0[59u].y) + uint(_1949 > cbSceneParam._m0[59u].x)) + uint(_1949 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1977 = _1976 + 43u;
        uint _1985 = _1976 + 44u;
        uint _1993 = _1976 + 45u;
        uint _2001 = _1976 + 46u;
        float _2012 = fma(_1946, cbSceneParam._m0[_1977].w, fma(_1942, cbSceneParam._m0[_1977].z, fma(_1938, cbSceneParam._m0[_1977].y, _1934 * cbSceneParam._m0[_1977].x)));
        float _2016 = fma(_1946, cbSceneParam._m0[_1985].w, fma(_1942, cbSceneParam._m0[_1985].z, fma(_1938, cbSceneParam._m0[_1985].y, _1934 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1946, cbSceneParam._m0[_2001].w, fma(_1942, cbSceneParam._m0[_2001].z, fma(_1938, cbSceneParam._m0[_2001].y, _1934 * cbSceneParam._m0[_2001].x)));
        float _2029 = cbSceneParam._m0[33u].z * _2024;
        float _2031 = cbSceneParam._m0[33u].w * _2024;
        float _2034 = fma(_1946, cbSceneParam._m0[_1993].w, fma(_1942, cbSceneParam._m0[_1993].z, fma(_1938, cbSceneParam._m0[_1993].y, _1934 * cbSceneParam._m0[_1993].x))) / _2024;
        float _2082 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
        float _4433 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2089 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2029 + _2012) / _2024, (_2031 + _2016) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 + _2012) / _2024, (_2016 - _2029) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2029) / _2024, (_2016 - _2031) / _2024), _2034), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 - _2031) / _2024, (_2029 + _2016) / _2024), _2034), 0.0)).x), vec4(0.25)));
        _2096 = 1.0 - (_2089 * cbSceneParam._m0[34u].x);
        _2097 = 1.0 - (_2089 * cbSceneParam._m0[34u].y);
        _2098 = 1.0 - (_2089 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2096 = 1.0;
        _2097 = 1.0;
        _2098 = 1.0;
    }
    float _2162;
    float _2164;
    float _2166;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2150 = fma(_1946, cbSceneParam._m0[63u].w, fma(_1942, cbSceneParam._m0[63u].z, fma(_1938, cbSceneParam._m0[63u].y, _1934 * cbSceneParam._m0[63u].x)));
        float _2151 = fma(_1946, cbSceneParam._m0[60u].w, fma(_1942, cbSceneParam._m0[60u].z, fma(_1938, cbSceneParam._m0[60u].y, _1934 * cbSceneParam._m0[60u].x))) / _2150;
        float _2152 = fma(_1946, cbSceneParam._m0[61u].w, fma(_1942, cbSceneParam._m0[61u].z, fma(_1938, cbSceneParam._m0[61u].y, _1934 * cbSceneParam._m0[61u].x))) / _2150;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2151 >= cbSceneParam._m0[64u].x) && (_2152 >= cbSceneParam._m0[64u].y)) && (_2151 <= cbSceneParam._m0[64u].z)) && (_2152 <= cbSceneParam._m0[64u].w))
        {
            float _2290 = fma(_1946, cbSceneParam._m0[62u].w, fma(_1942, cbSceneParam._m0[62u].z, fma(_1938, cbSceneParam._m0[62u].y, _1934 * cbSceneParam._m0[62u].x))) / _2150;
            float _2294 = isnan(cbSceneParam._m0[41u].w) ? _2290 : (isnan(_2290) ? cbSceneParam._m0[41u].w : max(_2290, cbSceneParam._m0[41u].w));
            float _2337 = (cbSceneParam._m0[33u].x - sqrt(((_1948 * _1948) + (_1947 * _1947)) + (_1949 * _1949))) * cbSceneParam._m0[33u].y;
            float _4449 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
            float _2344 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2151, cbSceneParam._m0[33u].w + _2152), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2151, _2152 - cbSceneParam._m0[33u].z), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].z, _2152 - cbSceneParam._m0[33u].w), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2151 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2152), _2294), 0.0)).x), vec4(0.25)));
            float _2348 = 1.0 - (_2344 * cbSceneParam._m0[34u].x);
            float _2349 = 1.0 - (_2344 * cbSceneParam._m0[34u].y);
            float _2350 = 1.0 - (_2344 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2350) ? _2098 : (isnan(_2098) ? _2350 : min(_2098, _2350));
            frontier_phi_37_36_ladder_1 = isnan(_2349) ? _2097 : (isnan(_2097) ? _2349 : min(_2097, _2349));
            frontier_phi_37_36_ladder_2 = isnan(_2348) ? _2096 : (isnan(_2096) ? _2348 : min(_2096, _2348));
        }
        else
        {
            frontier_phi_37_36_ladder = _2098;
            frontier_phi_37_36_ladder_1 = _2097;
            frontier_phi_37_36_ladder_2 = _2096;
        }
        _2162 = frontier_phi_37_36_ladder_2;
        _2164 = frontier_phi_37_36_ladder_1;
        _2166 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2162 = _2096;
        _2164 = _2097;
        _2166 = _2098;
    }
    uvec4 _2171 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2173 = _2171.x * 14u;
    uint _2174 = _2173 + 13u;
    float _2181 = _844 + (-1.0);
    float _2186 = (cbLight._m0[_2174].x * _2181) + 1.0;
    float _2187 = (cbLight._m0[_2174].y * _2181) + 1.0;
    float _2188 = (cbLight._m0[_2174].z * _2181) + 1.0;
    float _2189 = (cbLight._m0[_2174].w * _2181) + 1.0;
    uint _2190 = _2173 + 5u;
    float _2196 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2200 = _2173 + 4u;
    float _2209 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2213 = _2173 | 1u;
    float _2224 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_682, _683, _684));
    float _2227 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_682, _683, _684));
    float _4485 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _4496 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2232 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2234 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * 0.3183098733425140380859375;
    float _2241 = ((cbLight._m0[_2190].x * _2196) * _2234) + (((cbLight._m0[_2200].x * _2162) * _2209) * _2232);
    float _2242 = ((_2196 * cbLight._m0[_2190].y) * _2234) + (((cbLight._m0[_2200].y * _2164) * _2209) * _2232);
    float _2243 = ((_2196 * cbLight._m0[_2190].z) * _2234) + (((cbLight._m0[_2200].z * _2166) * _2209) * _2232);
    uvec4 _2247 = floatBitsToUint(cbLight._m0[_2173 + 12u]);
    bool _2249 = _2247.x == 0u;
    float _2351;
    float _2353;
    float _2355;
    if (_2249)
    {
        _2351 = _2241;
        _2353 = _2242;
        _2355 = _2243;
    }
    else
    {
        uint _2359 = _2173 + 6u;
        float _2375 = (dot(vec3(cbLight._m0[_2173 + 2u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4507 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _2378 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2351 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2241;
        _2353 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2242;
        _2355 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2243;
    }
    bool _2358 = _2247.y == 0u;
    float _2413;
    float _2415;
    float _2417;
    if (_2358)
    {
        _2413 = _2351;
        _2415 = _2353;
        _2417 = _2355;
    }
    else
    {
        uint _2575 = _2173 + 7u;
        float _2591 = (dot(vec3(cbLight._m0[_2173 + 3u].xyz), vec3(_682, _683, _684)) * 0.5) + 0.5;
        float _2592 = _2591 * _2591;
        float _4523 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2593 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2594 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2413 = (((cbLight._m0[_2575].x * 0.3183098733425140380859375) * _2593) * _2594) + _2351;
        _2415 = (((cbLight._m0[_2575].y * 0.3183098733425140380859375) * _2593) * _2594) + _2353;
        _2417 = (((cbLight._m0[_2575].z * 0.3183098733425140380859375) * _2593) * _2594) + _2355;
    }
    uint _2420 = _2173 + 8u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _685) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2173].x + _761;
    float _2436 = cbLight._m0[_2173].y + _762;
    float _2437 = cbLight._m0[_2173].z + _763;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2173].xyz));
    float _4539 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _4550 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2449 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2450 = dot(vec3(_682, _683, _684), vec3(_2442, _2443, _2444));
    float _4561 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _2454 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2442, _2443, _2444));
    float _4572 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2458 = _2434 * _2434;
    float _2462 = ((_2453 * _2453) * (_2458 + (-1.0))) + 1.0;
    float _2473 = (exp2(log2(1.0 - (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2474 = 1.0 - _2434;
    float _2485 = (0.5 / (((_2449 * ((_2448 * _2474) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2474) + _2434) * _2448))) * _2448;
    float _4583 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2458 / ((_2462 * _2462) * 3.141590118408203125));
    uint _2501 = _2173 + 9u;
    float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _685) * 0.949999988079071044921875);
    float _2513 = _2512 * _2512;
    float _2514 = cbLight._m0[_2213].x + _761;
    float _2515 = cbLight._m0[_2213].y + _762;
    float _2516 = cbLight._m0[_2213].z + _763;
    float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
    float _2521 = _2520 * _2514;
    float _2522 = _2520 * _2515;
    float _2523 = _2520 * _2516;
    float _2524 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2213].xyz));
    float _4594 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
    float _2527 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2528 = dot(vec3(_682, _683, _684), vec3(_2521, _2522, _2523));
    float _4605 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
    float _2532 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2521, _2522, _2523));
    float _4616 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2536 = _2513 * _2513;
    float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
    float _2549 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2550 = 1.0 - _2513;
    float _2560 = (0.5 / (((_2449 * ((_2527 * _2550) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2550) + _2513) * _2527))) * _2527;
    float _4627 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2562 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
    float _2572 = (((_2549 * cbLight._m0[_2501].x) * _2562) * _2196) + ((((cbLight._m0[_2420].x * _2162) * _2473) * _2487) * _2209);
    float _2573 = (((_2549 * cbLight._m0[_2501].y) * _2562) * _2196) + ((((cbLight._m0[_2420].y * _2164) * _2473) * _2487) * _2209);
    float _2574 = (((_2549 * cbLight._m0[_2501].z) * _2562) * _2196) + ((((cbLight._m0[_2420].z * _2166) * _2473) * _2487) * _2209);
    float _2630;
    float _2632;
    float _2634;
    if (_2249)
    {
        _2630 = _2572;
        _2632 = _2573;
        _2634 = _2574;
    }
    else
    {
        uint _2636 = _2173 + 2u;
        uint _2640 = _2173 + 10u;
        float _2654 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2636].w)) * _685) * 0.949999988079071044921875);
        float _2655 = _2654 * _2654;
        float _2656 = cbLight._m0[_2636].x + _761;
        float _2657 = cbLight._m0[_2636].y + _762;
        float _2658 = cbLight._m0[_2636].z + _763;
        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
        float _2663 = _2662 * _2656;
        float _2664 = _2662 * _2657;
        float _2665 = _2662 * _2658;
        float _2666 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2636].xyz));
        float _4638 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2670 = dot(vec3(_682, _683, _684), vec3(_2663, _2664, _2665));
        float _4649 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2673 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2674 = dot(vec3(cbLight._m0[_2636].xyz), vec3(_2663, _2664, _2665));
        float _4660 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2678 = _2655 * _2655;
        float _2682 = ((_2673 * _2673) * (_2678 + (-1.0))) + 1.0;
        float _2691 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2692 = 1.0 - _2655;
        float _2702 = (0.5 / (((_2449 * ((_2669 * _2692) + _2655)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2692) + _2655) * _2669))) * _2669;
        float _4671 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2678 / ((_2682 * _2682) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2630 = (((_2691 * cbLight._m0[_2640].x) * _2704) * _2705) + _2572;
        _2632 = (((_2691 * cbLight._m0[_2640].y) * _2704) * _2705) + _2573;
        _2634 = (((_2691 * cbLight._m0[_2640].z) * _2704) * _2705) + _2574;
    }
    float _2736;
    float _2738;
    float _2740;
    if (_2358)
    {
        _2736 = _2630;
        _2738 = _2632;
        _2740 = _2634;
    }
    else
    {
        uint _2747 = _2173 + 3u;
        uint _2751 = _2173 + 11u;
        float _2765 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2747].w)) * _685) * 0.949999988079071044921875);
        float _2766 = _2765 * _2765;
        float _2767 = cbLight._m0[_2747].x + _761;
        float _2768 = cbLight._m0[_2747].y + _762;
        float _2769 = cbLight._m0[_2747].z + _763;
        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
        float _2774 = _2773 * _2767;
        float _2775 = _2773 * _2768;
        float _2776 = _2773 * _2769;
        float _2777 = dot(vec3(_682, _683, _684), vec3(cbLight._m0[_2747].xyz));
        float _4687 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2780 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2781 = dot(vec3(_682, _683, _684), vec3(_2774, _2775, _2776));
        float _4698 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
        float _2784 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2785 = dot(vec3(cbLight._m0[_2747].xyz), vec3(_2774, _2775, _2776));
        float _4709 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2789 = _2766 * _2766;
        float _2793 = ((_2784 * _2784) * (_2789 + (-1.0))) + 1.0;
        float _2802 = (exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2803 = 1.0 - _2766;
        float _2813 = (0.5 / (((_2449 * ((_2780 * _2803) + _2766)) + 9.9999999392252902907785028219223e-09) + (((_2449 * _2803) + _2766) * _2780))) * _2780;
        float _4720 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        float _2815 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2789 / ((_2793 * _2793) * 3.141590118408203125));
        float _2816 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2736 = (((_2802 * cbLight._m0[_2751].x) * _2815) * _2816) + _2630;
        _2738 = (((_2802 * cbLight._m0[_2751].y) * _2815) * _2816) + _2632;
        _2740 = (((_2802 * cbLight._m0[_2751].z) * _2815) * _2816) + _2634;
    }
    float _2882;
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_2171.y == 0u)
    {
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.x;
        uint _2849 = uint((float(_2837.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2838))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2838)));
        float _2859 = (log2(_1949 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2860 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        uint _2863 = uint(isnan(14.0) ? _2860 : (isnan(_2860) ? 14.0 : min(_2860, 14.0)));
        uvec4 _2868 = texelFetch(g_lightClusterGridBuffer, int(((_2863 << 2u) + (_2849 << 6u)) >> 2u));
        uint _2869 = _2868.x;
        uint _2870 = _2837.z;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((((1u << ((_2870 >> 4u) & 15u)) + 4294967295u) & _2869) == 0u) || ((_2870 & 240u) == 0u))
        {
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
        }
        else
        {
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _2958;
            float _2960;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            float _3106 = 0.0;
            float _3107 = 0.0;
            uint _3108 = 0u;
            uint _3117;
            bool _3118;
            for (;;)
            {
                _3117 = texelFetch(g_lightClassification, int((((_2863 << 5u) + (_2849 << 9u)) + (_3108 << 2u)) >> 2u)).x;
                _3118 = _3117 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3118)
                {
                    frontier_phi_71_pred = _3107;
                    frontier_phi_71_pred_1 = _3106;
                    frontier_phi_71_pred_2 = _3105;
                    frontier_phi_71_pred_3 = _3104;
                    frontier_phi_71_pred_4 = _3103;
                    frontier_phi_71_pred_5 = _3102;
                }
                else
                {
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    uint _3253;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3104;
                    _3250 = _3105;
                    _3251 = _3106;
                    _3252 = _3107;
                    _3253 = _3117;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    for (;;)
                    {
                        uint _3257 = uint(findLSB(_3253)) + (_3108 << 5u);
                        uint _3254 = (_3253 + 4294967295u) & _3253;
                        uint _3259 = _3257 * 48u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3259)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3259 + 3u)).x));
                        uint _3279 = (_3257 * 48u) + 4u;
                        vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 3u)).x));
                        uint _3298 = (_3257 * 48u) + 8u;
                        vec3 _3309 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x));
                        float _3313 = _3273.x - _1947;
                        float _3314 = _3273.y - _1948;
                        float _3315 = _3273.z - _1949;
                        float _3316 = dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315));
                        float _3319 = inversesqrt(_3316);
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3323 = dot(vec3(_800, _803, _806), vec3(_3320, _3321, _3322));
                        float _3328 = 1.0 - (_3316 * _3273.w);
                        float _4746 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                        float _3330 = sqrt(_3316) * _3292.w;
                        float _3333 = 1.39999997615814208984375 / (_3330 + 1.39999997615814208984375);
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3323) + _3334;
                        float _3340 = _3330 * _3330;
                        float _3344 = ((isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0))) * _3329) / ((_3340 * 0.699999988079071044921875) + 1.0);
                        float _3348 = (-0.0) - _1947;
                        float _3349 = (-0.0) - _1948;
                        float _3350 = (-0.0) - _1949;
                        float _3354 = inversesqrt(dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350)));
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3364 = exp2(log2(1.0 / ((_3340 * 3.5) + 5.0)) * 0.25);
                        float _3365 = 1.0 - _860;
                        float _3372 = sqrt(1.0 - ((1.0 - (_3365 * _3365)) * (1.0 - (_3364 * _3364))));
                        float _3373 = _3372 * _3372;
                        float _3374 = _3373 * _3373;
                        float _3375 = _3355 + _3320;
                        float _3376 = _3356 + _3321;
                        float _3377 = _3357 + _3322;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3385 = dot(vec3(_800, _803, _806), vec3(_3355, _3356, _3357));
                        float _4762 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3389 = dot(vec3(_800, _803, _806), vec3(_3381 * _3375, _3381 * _3376, _3381 * _3377));
                        float _4773 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3392 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3396 = ((_3392 * _3392) * (_3374 + (-1.0))) + 1.0;
                        float _3397 = _3333 * _3373;
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3323) + _3398;
                        float _4784 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3402 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3403 = 1.0 - _3373;
                        float _3413 = (0.5 / (((_3402 * ((_3388 * _3403) + _3373)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3373) * _3388))) * _3402;
                        float _4795 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3424 = (((_3374 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3396 * _3396) * ((_3340 * 2.1991131305694580078125) + 3.141590118408203125))) * _3329;
                        _3177 = (_3344 * _3292.x) + _3250;
                        _3178 = (_3344 * _3292.y) + _3251;
                        _3179 = (_3344 * _3292.z) + _3252;
                        _3174 = (_3424 * _3309.x) + _3247;
                        _3175 = (_3424 * _3309.y) + _3248;
                        _3176 = (_3424 * _3309.z) + _3249;
                        if (_3254 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3176;
                            _3250 = _3177;
                            _3251 = _3178;
                            _3252 = _3179;
                            _3253 = _3254;
                        }
                    }
                    frontier_phi_71_pred = _3179;
                    frontier_phi_71_pred_1 = _3178;
                    frontier_phi_71_pred_2 = _3177;
                    frontier_phi_71_pred_3 = _3176;
                    frontier_phi_71_pred_4 = _3175;
                    frontier_phi_71_pred_5 = _3174;
                }
                _2960 = frontier_phi_71_pred;
                _2958 = frontier_phi_71_pred_1;
                _2956 = frontier_phi_71_pred_2;
                _2954 = frontier_phi_71_pred_3;
                _2952 = frontier_phi_71_pred_4;
                _2950 = frontier_phi_71_pred_5;
                uint _3109 = _3108 + 1u;
                if (_3109 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3102 = _2950;
                    _3103 = _2952;
                    _3104 = _2954;
                    _3105 = _2956;
                    _3106 = _2958;
                    _3107 = _2960;
                    _3108 = _3109;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
        }
        uvec4 _2963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2964 = _2963.z;
        uint _2966 = (_2964 >> 8u) & 15u;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        float _3080;
        if (((4294967295u << _2966) & _2869) == 0u)
        {
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
            _3076 = _2955;
            _3078 = _2957;
            _3080 = _2959;
        }
        else
        {
            float _3095 = inversesqrt(dot(vec3(_1947, _1948, _1949), vec3(_1947, _1948, _1949)));
            float _3096 = _3095 * _1947;
            float _3097 = _3095 * _1948;
            float _3098 = _3095 * _1949;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2966 < ((_2964 >> 12u) & 15u))
            {
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3081;
                float _3230 = _2949;
                float _3231 = _2951;
                float _3232 = _2953;
                float _3233 = _2955;
                float _3234 = _2957;
                float _3235 = _2959;
                uint _3236 = _2966;
                uint _3245;
                bool _3246;
                for (;;)
                {
                    _3245 = texelFetch(g_lightClassification, int((((_2863 << 5u) + (_2849 << 9u)) + (_3236 << 2u)) >> 2u)).x;
                    _3246 = _3245 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3246)
                    {
                        frontier_phi_82_pred = _3235;
                        frontier_phi_82_pred_1 = _3234;
                        frontier_phi_82_pred_2 = _3233;
                        frontier_phi_82_pred_3 = _3232;
                        frontier_phi_82_pred_4 = _3231;
                        frontier_phi_82_pred_5 = _3230;
                    }
                    else
                    {
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _3451 = _3230;
                        float _3452 = _3231;
                        float _3453 = _3232;
                        float _3454 = _3233;
                        float _3455 = _3234;
                        float _3456 = _3235;
                        uint _3457 = _3245;
                        uint _3458;
                        vec4 _3483;
                        float _3484;
                        vec4 _3499;
                        vec3 _3511;
                        vec4 _3526;
                        vec4 _3541;
                        float _3587;
                        bool _3588;
                        for (;;)
                        {
                            uint _3468 = ((_3236 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3457));
                            _3458 = (_3457 + 4294967295u) & _3457;
                            uint _3470 = _3468 * 40u;
                            _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3484 = _3483.w;
                            uint _3486 = (_3468 * 40u) + 4u;
                            _3499 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3486)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3486 + 3u)).x));
                            uint _3501 = (_3468 * 40u) + 8u;
                            _3511 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x));
                            uint _3513 = (_3468 * 40u) + 16u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            uint _3528 = (_3468 * 40u) + 20u;
                            _3541 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3528)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3528 + 3u)).x));
                            uint _3543 = (_3468 * 40u) + 24u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            uint _3562 = (_3468 * 40u) + 28u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            _3587 = fma(_1949, _3575.z, fma(_1948, _3575.y, _3575.x * _1947)) + _3575.w;
                            _3588 = !((fma(_1949, _3556.z, fma(_1948, _3556.y, _3556.x * _1947)) + _3556.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3588)
                            {
                                float _3615 = _3483.x - _1947;
                                float _3616 = _3483.y - _1948;
                                float _3617 = _3483.z - _1949;
                                float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                                float _3621 = inversesqrt(_3618);
                                float _3622 = _3621 * _3615;
                                float _3623 = _3621 * _3616;
                                float _3624 = _3621 * _3617;
                                float _3628 = 1.0 - (_3618 / (_3484 * _3484));
                                float _4806 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3633 = sqrt(_3618) * _3499.w;
                                float _3635 = 1.39999997615814208984375 / (_3633 + 1.39999997615814208984375);
                                float _3636 = _3635 * _3635;
                                float _3639 = ((1.0 - _3636) * dot(vec3(_3622, _3623, _3624), vec3(_800, _803, _806))) + _3636;
                                float _3642 = _3633 * _3633;
                                float _3646 = (fma(_1949, _3526.z, fma(_1948, _3526.y, _3526.x * _1947)) + _3526.w) / _3587;
                                float _3647 = (fma(_1949, _3541.z, fma(_1948, _3541.y, _3541.x * _1947)) + _3541.w) / _3587;
                                float _3651 = 1.0 - dot(vec2(_3646, _3647), vec2(_3646, _3647));
                                float _4822 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3652 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3653 = _3652 * (((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3629) / ((_3642 * 0.699999988079071044921875) + 1.0));
                                float _3665 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                                float _3666 = 1.0 - _860;
                                float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                                float _3674 = _3673 * _3673;
                                float _3675 = _3674 * _3674;
                                float _3676 = _3622 - _3096;
                                float _3677 = _3623 - _3097;
                                float _3678 = _3624 - _3098;
                                float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                                float _3686 = dot(vec3(_800, _803, _806), vec3((-0.0) - _3096, (-0.0) - _3097, (-0.0) - _3098));
                                float _4833 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3690 = dot(vec3(_800, _803, _806), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                                float _4844 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3693 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                                float _3698 = _3635 * _3674;
                                float _3699 = _3698 * _3698;
                                float _3705 = ((1.0 - _3699) * dot(vec3(_800, _803, _806), vec3(_3622, _3623, _3624))) + _3699;
                                float _4855 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                                float _3707 = 1.0 - _3674;
                                float _3717 = (0.5 / (((_3706 * ((_3689 * _3707) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3706 * _3707) + _3674) * _3689))) * _3706;
                                float _4866 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3727 = (_3652 * _3629) * (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) / ((_3697 * _3697) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3653 * _3499.z;
                                frontier_phi_88_pred_1 = _3653 * _3499.y;
                                frontier_phi_88_pred_2 = _3653 * _3499.x;
                                frontier_phi_88_pred_3 = _3727 * _3511.z;
                                frontier_phi_88_pred_4 = _3727 * _3511.y;
                                frontier_phi_88_pred_5 = _3727 * _3511.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3736 = frontier_phi_88_pred;
                            _3735 = frontier_phi_88_pred_1;
                            _3734 = frontier_phi_88_pred_2;
                            _3733 = frontier_phi_88_pred_3;
                            _3732 = frontier_phi_88_pred_4;
                            _3731 = frontier_phi_88_pred_5;
                            _3441 = _3734 + _3454;
                            _3442 = _3735 + _3455;
                            _3443 = _3736 + _3456;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            if (_3458 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3441;
                                _3455 = _3442;
                                _3456 = _3443;
                                _3457 = _3458;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3443;
                        frontier_phi_82_pred_1 = _3442;
                        frontier_phi_82_pred_2 = _3441;
                        frontier_phi_82_pred_3 = _3440;
                        frontier_phi_82_pred_4 = _3439;
                        frontier_phi_82_pred_5 = _3438;
                    }
                    _3081 = frontier_phi_82_pred;
                    _3079 = frontier_phi_82_pred_1;
                    _3077 = frontier_phi_82_pred_2;
                    _3075 = frontier_phi_82_pred_3;
                    _3073 = frontier_phi_82_pred_4;
                    _3071 = frontier_phi_82_pred_5;
                    uint _3237 = _3236 + 1u;
                    if (_3237 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3230 = _3071;
                        _3231 = _3073;
                        _3232 = _3075;
                        _3233 = _3077;
                        _3234 = _3079;
                        _3235 = _3081;
                        _3236 = _3237;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3077;
                frontier_phi_63_64_ladder_1 = _3081;
                frontier_phi_63_64_ladder_2 = _3079;
                frontier_phi_63_64_ladder_3 = _3075;
                frontier_phi_63_64_ladder_4 = _3073;
                frontier_phi_63_64_ladder_5 = _3071;
            }
            else
            {
                frontier_phi_63_64_ladder = _2955;
                frontier_phi_63_64_ladder_1 = _2959;
                frontier_phi_63_64_ladder_2 = _2957;
                frontier_phi_63_64_ladder_3 = _2953;
                frontier_phi_63_64_ladder_4 = _2951;
                frontier_phi_63_64_ladder_5 = _2949;
            }
            _3070 = frontier_phi_63_64_ladder_5;
            _3072 = frontier_phi_63_64_ladder_4;
            _3074 = frontier_phi_63_64_ladder_3;
            _3076 = frontier_phi_63_64_ladder;
            _3078 = frontier_phi_63_64_ladder_2;
            _3080 = frontier_phi_63_64_ladder_1;
        }
        float _3085 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2882 = (_3085 * _3076) + _2413;
        _2884 = (_3085 * _3078) + _2415;
        _2886 = (_3085 * _3080) + _2417;
        _2888 = ((_3070 * 0.039999999105930328369140625) * _3085) + _2736;
        _2890 = ((_3072 * 0.039999999105930328369140625) * _3085) + _2738;
        _2892 = ((_3074 * 0.039999999105930328369140625) * _3085) + _2740;
    }
    else
    {
        _2882 = _2413;
        _2884 = _2415;
        _2886 = _2417;
        _2888 = _2736;
        _2890 = _2738;
        _2892 = _2740;
    }
    float _4882 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4893 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4904 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _2909 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2882 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _844))) + ((_2888 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2910 = ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2884 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _844))) + ((_2890 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    float _2911 = ((isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0))) * (_2886 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _844))) + ((_2892 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1679)) * cbPerFrame._m0[3u].x);
    uint _2912 = _251 + 6u;
    float _2920 = _781 / cbSceneParam._m0[86u].x;
    float _2921 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2935 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, (log2((isnan(cbSceneParam._m0[77u].w) ? _703 : (isnan(_703) ? cbSceneParam._m0[77u].w : min(_703, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2937 = _2935.x;
    float _2938 = _2935.y;
    float _2939 = _2935.z;
    float _2940 = _2935.w;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    if (_703 > cbSceneParam._m0[78u].w)
    {
        float _2974 = isnan(_703) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _703 : min(cbSceneParam._m0[80u].w, _703));
        float _2975 = _2974 / _703;
        float _2986 = _2975 * _754;
        float _2987 = _755 * _2975;
        float _2988 = (-0.0) - _2987;
        float _2990 = _2975 * _756;
        float _2992 = (cbSceneParam._m0[77u].w * _2988) / _2974;
        float _2993 = _2992 + cbSceneParam._m0[79u].w;
        float _2994 = cbSceneParam._m0[79u].w - _2987;
        float _3000 = sqrt(((_2986 * _2986) + (_2987 * _2987)) + (_2990 * _2990));
        float _3003 = (1.0 - (cbSceneParam._m0[77u].w / _2974)) * _3000;
        float _3008 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3010 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3187;
        if (abs((_2988 - _2992) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3187 = ((((_2993 > 0.0) ? exp2(_3008 * _2993) : (2.0 - exp2(_3010 * _2993))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3003;
        }
        else
        {
            float _3131 = 1.0 / cbSceneParam._m0[80u].x;
            float _3132 = isnan(_2994) ? _2993 : (isnan(_2993) ? _2994 : max(_2993, _2994));
            float _3133 = isnan(_2994) ? _2993 : (isnan(_2993) ? _2994 : min(_2993, _2994));
            float _3142 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : min(_3132, 0.0));
            float _3143 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : min(_3133, 0.0));
            _3187 = ((abs(_3000 / _2988) * cbSceneParam._m0[80u].y) * ((((_3142 - _3143) * 2.0) - ((exp2(_3008 * (isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0)))) - exp2(_3008 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0))))) * _3131)) - ((exp2(_3010 * _3142) - exp2(_3010 * _3143)) * _3131))) + (_3003 * cbSceneParam._m0[80u].z);
        }
        vec4 _3189 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2920, _2921, 1.0), 0.0);
        float _3198 = exp2((_3187 * (-1.44269502162933349609375)) * (1.0 - _3189.w));
        float _3199 = log2(_3198);
        float _3215 = log2(_2940);
        _3012 = (exp2(_3215 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].x)) * _3189.x) / cbSceneParam._m0[78u].x)) + _2937;
        _3014 = (exp2(_3215 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].y)) * _3189.y) / cbSceneParam._m0[78u].y)) + _2938;
        _3016 = (exp2(_3215 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].z)) * _3189.z) / cbSceneParam._m0[78u].z)) + _2939;
        _3018 = _3198 * _2940;
    }
    else
    {
        _3012 = _2937;
        _3014 = _2938;
        _3016 = _2939;
        _3018 = _2940;
    }
    bool _3225;
    vec4 _3028;
    vec4 _3050;
    float _3052;
    float _3056;
    float _3057;
    float _3058;
    float _3059;
    bool _3069;
    for (;;)
    {
        _3028 = cbMatDynParam._m0[0u];
        float _3030 = roundEven(_3028.y);
        bool _3031 = _3030 == 3.0;
        float _3032 = log2(_3018);
        float _3039 = exp2(_3032 * cbSceneParam._m0[78u].x) * _2909;
        float _3040 = exp2(_3032 * cbSceneParam._m0[78u].y) * _2910;
        float _3041 = exp2(_3032 * cbSceneParam._m0[78u].z) * _2911;
        float _3048 = _770 + (-0.5);
        _3050 = cbMtdParam._m0[1u];
        _3052 = _3050.y * _3048;
        float _3055 = (_3030 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3056 = _3055 * (_3031 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3012)));
        _3057 = _3055 * (_3031 ? _3040 : (_3040 + (cbSceneParam._m0[72u].w * _3014)));
        _3058 = _3055 * (_3031 ? _3041 : (_3041 + (cbSceneParam._m0[72u].w * _3016)));
        _3059 = _3048 * 0.999000012874603271484375;
        _3069 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3069)
        {
            if ((cbInstanceData._m0[_251 + 7u].x + _3059) < 0.5)
            {
                _3225 = true;
                break;
            }
        }
        uint _3166 = _819 + uint(_3028.w);
        if ((cbInstanceData._m0[_3166].w < 1.0) && ((cbInstanceData._m0[_3166].w + _3059) < 0.5))
        {
            _3225 = true;
            break;
        }
        if ((_3052 + 1.0) < _3050.x)
        {
            _3225 = true;
            break;
        }
        _3225 = false;
        break;
    }
    float _3429;
    if (_3225)
    {
        discard_state = true;
        _3429 = 0.0;
    }
    else
    {
        _3429 = cbInstanceData._m0[_2912].w;
    }
    SV_Target.x = _3056;
    SV_Target.y = _3057;
    SV_Target.z = _3058;
    SV_Target.w = _3429;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2912].w;
    discard_exit();
}


