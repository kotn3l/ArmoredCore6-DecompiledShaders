#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1201;
float _3587;
float _3588;
float _3589;
float _3590;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3599 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3610 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3621 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0)))) + _342;
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _399 = _395.z;
    float _403 = (_395.x * 2.0) + (-1.0);
    float _404 = (_395.y * 2.0) + (-1.0);
    float _405 = dot(vec2(_403, _404), vec2(_403, _404));
    float _3632 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _410 = sqrt(1.0 - (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))));
    float _415 = _403 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_369.x * 2.0) + (-1.0)));
    float _416 = _404 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_369.y * 2.0) + (-1.0)));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _435 = _433.x;
    float _436 = 1.0 - _435;
    float _445 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _448 = ((isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : min(_445, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _457 = (_448 - ((((((_435 - _436) * cbMtdParam._m0[24u].z) + _436) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _448))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3653 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _465 = (_458 * (cbMtdParam._m0[17u].x - _349)) + _349;
    float _466 = (_458 * (cbMtdParam._m0[17u].y - _350)) + _350;
    float _467 = (_458 * (cbMtdParam._m0[17u].z - _351)) + _351;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _482 = _480.x;
    float _483 = 1.0 - _482;
    float _510 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_482 - _483) * cbMtdParam._m0[24u].w) + _483) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3664 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _519 = ((((cbMtdParam._m0[10u].x - _465) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _511) + _465;
    float _520 = ((((cbMtdParam._m0[10u].y - _466) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _511) + _466;
    float _521 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _467)) * _511) + _467;
    float _526 = (((_369.z - _399) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _399;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _547 = (_540.x * 2.0) + (-1.0);
    float _548 = (_540.y * 2.0) + (-1.0);
    float _549 = dot(vec2(_547, _548), vec2(_547, _548));
    float _3675 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _557 = (_458 * (_540.z - _526)) + _526;
    float _560 = ((cbMtdParam._m0[23u].y - _557) * _511) + _557;
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _588 = (_582.x * 2.0) + (-1.0);
    float _589 = (_582.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3686 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _607 = (((_547 - _415) + (cbMtdParam._m0[21u].x * _415)) * _458) + _415;
    float _608 = (((_548 - _416) + (cbMtdParam._m0[21u].x * _416)) * _458) + _416;
    float _609 = (_458 * (sqrt(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) - _410)) + _410;
    float _620 = (((_588 - _607) + (_607 * cbMtdParam._m0[22u].z)) * _511) + _607;
    float _621 = (((_589 - _608) + (_608 * cbMtdParam._m0[22u].z)) * _511) + _608;
    float _622 = ((sqrt(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) - _609) * _511) + _609;
    float _624 = cbMtdParam._m0[22u].x + _395.w;
    float _627 = fma(_622, _237 * NORMAL.x, fma(_621, _244 * TANGENT.x, (_230 * _222) * _620));
    float _630 = fma(_622, _237 * NORMAL.y, fma(_621, _244 * TANGENT.y, (_230 * _223) * _620));
    float _633 = fma(_622, _237 * NORMAL.z, fma(_621, _244 * TANGENT.z, (_230 * _224) * _620));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3697 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _641 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _3708 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3719 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3730 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3741 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _709 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _699);
    float _710 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _699);
    float _711 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _699);
    float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
    float _716 = _709 * _715;
    float _717 = _710 * _715;
    float _718 = _711 * _715;
    vec4 _723 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _725 = _723.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _882 = sqrt(((_709 * _709) + (_710 * _710)) + (_711 * _711));
        float _888 = (cbMatDynParam._m0[5u].x * _882) + cbMatDynParam._m0[5u].y;
        float _3752 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _893 = (cbMatDynParam._m0[5u].z * _882) + cbMatDynParam._m0[5u].w;
        float _3763 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) - _889)) + _889) < ((_725 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _761 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _764 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _777 = _269 + 9u;
    uint _778 = _777 + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3774 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _3785 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _802 = ((isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * TEXCOORD_5.w) * _798.x;
    float _803 = dot(vec3(_638, _639, _640), vec3(_716, _717, _718));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _638) - _716;
    float _811 = (_806 * _639) - _717;
    float _812 = (_806 * _640) - _718;
    float _816 = abs(dot(vec3(_716, _717, _718), vec3(_638, _639, _640)));
    float _3807 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_641);
    float _831 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1200;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _925 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _929 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _933 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _958 = _863 + _638;
        float _959 = _867 + _639;
        float _960 = _871 + _640;
        float _970 = fma(_960, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _958)) - _925;
        float _971 = fma(_960, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _958)) - _929;
        float _972 = fma(_960, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _958)) - _933;
        float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
        float _989 = ((_976 * _970) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_925 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_976 * _971) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_929 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _991 = ((_976 * _972) / cbModelParam._m0[34u].z) + ((((((_933 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_989, _990, _991), 0.0);
        float _1028 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_994.x + (-0.5));
        float _1030 = _1028 * (_994.y + (-0.5));
        float _1031 = _1028 * (_994.z + (-0.5));
        float _1038 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1001.x + (-0.5));
        float _1040 = _1038 * (_1001.y + (-0.5));
        float _1041 = _1038 * (_1001.z + (-0.5));
        float _1048 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1008.x + (-0.5));
        float _1050 = _1048 * (_1008.y + (-0.5));
        float _1051 = _1048 * (_1008.z + (-0.5));
        float _1058 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1015.x + (-0.5));
        float _1060 = _1058 * (_1015.y + (-0.5));
        float _1061 = _1058 * (_1015.z + (-0.5));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = _1029 * 0.5;
        float _1066 = _1039 * 0.5;
        float _1067 = _1049 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1082 = (dot(vec3(_638, _639, _640), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3833 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1092 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3844 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3855 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1094 + 1.0))) + _1099) * _1062;
        float _1109 = _1030 * 0.5;
        float _1110 = _1040 * 0.5;
        float _1111 = _1050 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_638, _639, _640), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3866 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3877 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3888 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (_1136 + 1.0))) + _1141) * _1063;
        float _1151 = _1031 * 0.5;
        float _1152 = _1041 * 0.5;
        float _1153 = _1051 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1167 = (dot(vec3(_638, _639, _640), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3899 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1176 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3910 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1178 = _1177 * 2.0;
        float _1182 = (1.0 - _1177) / (_1177 + 1.0);
        float _3921 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1192 = ((((1.0 - _1183) * (_1178 + 2.0)) * exp2(log2(isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1178 + 1.0))) + _1183) * _1064;
        _1200 = _1031;
        _1202 = _1030;
        _1203 = _1029;
        _1204 = _1041;
        _1205 = _1040;
        _1206 = _1039;
        _1207 = _1051;
        _1208 = _1050;
        _1209 = _1049;
        _1210 = _1064;
        _1211 = _1063;
        _1212 = _1062;
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)));
    }
    else
    {
        _1200 = _1201;
        _1202 = _1201;
        _1203 = _1201;
        _1204 = _1201;
        _1205 = _1201;
        _1206 = _1201;
        _1207 = _1201;
        _1208 = _1201;
        _1209 = _1201;
        _1210 = _1201;
        _1211 = _1201;
        _1212 = _1201;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1243 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1247 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1251 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1274 = _863 + _638;
        float _1275 = _867 + _639;
        float _1276 = _871 + _640;
        float _1286 = fma(_1276, cbModelParam._m0[30u].z, fma(_1275, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1274)) - _1243;
        float _1287 = fma(_1276, cbModelParam._m0[31u].z, fma(_1275, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1274)) - _1247;
        float _1288 = fma(_1276, cbModelParam._m0[32u].z, fma(_1275, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1274)) - _1251;
        float _1292 = inversesqrt(dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288)));
        float _1305 = ((_1292 * _1286) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1243 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1292 * _1287) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1247 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1292 * _1288) / cbModelParam._m0[35u].z) + ((((((_1251 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1305, _1306, _1307), 0.0);
        float _1342 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1309.x + (-0.5));
        float _1344 = _1342 * (_1309.y + (-0.5));
        float _1345 = _1342 * (_1309.z + (-0.5));
        float _1352 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1316.x + (-0.5));
        float _1354 = _1352 * (_1316.y + (-0.5));
        float _1355 = _1352 * (_1316.z + (-0.5));
        float _1362 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1323.x + (-0.5));
        float _1364 = _1362 * (_1323.y + (-0.5));
        float _1365 = _1362 * (_1323.z + (-0.5));
        float _1372 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1330.x + (-0.5));
        float _1374 = _1372 * (_1330.y + (-0.5));
        float _1375 = _1372 * (_1330.z + (-0.5));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1379 = _1343 * 0.5;
        float _1380 = _1353 * 0.5;
        float _1381 = _1363 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_638, _639, _640), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3984 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1406 + 1.0))) + _1411) * _1376;
        float _1421 = _1344 * 0.5;
        float _1422 = _1354 * 0.5;
        float _1423 = _1364 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_638, _639, _640), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4017 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1448 + 1.0))) + _1453) * _1377;
        float _1463 = _1345 * 0.5;
        float _1464 = _1355 * 0.5;
        float _1465 = _1365 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1479 = (dot(vec3(_638, _639, _640), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1488 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1378 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1490 = _1489 * 2.0;
        float _1494 = (1.0 - _1489) / (_1489 + 1.0);
        float _4050 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1504 = ((((1.0 - _1495) * (_1490 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1490 + 1.0))) + _1495) * _1378;
        _1512 = _1345;
        _1513 = _1344;
        _1514 = _1343;
        _1515 = _1355;
        _1516 = _1354;
        _1517 = _1353;
        _1518 = _1365;
        _1519 = _1364;
        _1520 = _1363;
        _1521 = _1378;
        _1522 = _1377;
        _1523 = _1376;
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
        _1526 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)));
    }
    else
    {
        _1512 = _1201;
        _1513 = _1201;
        _1514 = _1201;
        _1515 = _1201;
        _1516 = _1201;
        _1517 = _1201;
        _1518 = _1201;
        _1519 = _1201;
        _1520 = _1201;
        _1521 = _1201;
        _1522 = _1201;
        _1523 = _1201;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1213)) + _1213;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1214)) + _1214;
    float _1538 = (cbModelParam._m0[1u].x * (_1526 - _1215)) + _1215;
    float _1559 = fma(_1538, cbSceneParam._m0[89u].z, fma(_1537, cbSceneParam._m0[89u].y, _1536 * cbSceneParam._m0[89u].x));
    float _1562 = fma(_1538, cbSceneParam._m0[90u].z, fma(_1537, cbSceneParam._m0[90u].y, _1536 * cbSceneParam._m0[90u].x));
    float _1565 = fma(_1538, cbSceneParam._m0[91u].z, fma(_1537, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1536));
    float _1580 = _810 * 0.5;
    float _1581 = _811 * 0.5;
    float _1582 = _812 * 0.5;
    float _1583 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1514, _1517, _1520, _1523));
    float _1586 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1589 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1623;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1596 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1200, _1204, _1207, _1210));
        float _1600 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1604 = dot(vec4(_1580, _1581, _1582, 1.0), vec4(_1203, _1206, _1209, _1212));
        float _1611 = dot(vec4(cbModelParam._m0[39u]), vec4(_1580, _1581, _1582, 1.0));
        _1623 = dot(vec3(isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1623 = 1.0;
    }
    float _1634;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1625 = dot(vec4(cbModelParam._m0[40u]), vec4(_1580, _1581, _1582, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1638 = (_1634 * cbModelParam._m0[1u].x) + (_1623 * (1.0 - cbModelParam._m0[1u].x));
    float _1648 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1648 : min(cbModelParam._m0[25u].z, _1648));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1711 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1714 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1742 = frontier_phi_17_15_ladder;
        }
        float _1966;
        if (_1711 > 0.0)
        {
            _1966 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1966 = frontier_phi_26_22_ladder;
        }
        float _2212;
        if (_1714 > 0.0)
        {
            _2212 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2212 = frontier_phi_38_33_ladder;
        }
        float _2214 = isnan(_1966) ? _1742 : (isnan(_1742) ? _1966 : min(_1742, _1966));
        float _2215 = isnan(_2212) ? _2214 : (isnan(_2214) ? _2212 : min(_2214, _2212));
        float _2219 = (_2215 * _1708) + _1697;
        float _2220 = (_2215 * _1711) + _1701;
        float _2221 = (_2215 * _1714) + _1705;
        float _2222 = _2215 * 9.9999997473787516355514526367188e-05;
        float _2224 = (-1.0) - _2222;
        float _2226 = _2222 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2221 > _2226) || ((_2221 < _2224) || ((_2220 > _2226) || ((_2220 < _2224) || ((_2219 < _2224) || (_2219 > _2226))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2221, cbModelParam._m0[9u].z, fma(_2220, cbModelParam._m0[9u].y, _2219 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2221, cbModelParam._m0[10u].z, fma(_2220, cbModelParam._m0[10u].y, _2219 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2221, cbModelParam._m0[11u].z, fma(_2220, cbModelParam._m0[11u].y, _2219 * cbModelParam._m0[11u].x))), _1649);
            frontier_phi_16_38_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_16_38_ladder_2;
        _1732 = frontier_phi_16_38_ladder_1;
        _1734 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1649);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1793 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1797 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1801 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1804 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1807 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1810 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1971;
        if (_1804 > 0.0)
        {
            _1971 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1971 = frontier_phi_28_24_ladder;
        }
        float _2239;
        if (_1807 > 0.0)
        {
            _2239 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2239 = frontier_phi_40_35_ladder;
        }
        float _2444;
        if (_1810 > 0.0)
        {
            _2444 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2444 = frontier_phi_49_46_ladder;
        }
        float _2446 = isnan(_2239) ? _1971 : (isnan(_1971) ? _2239 : min(_1971, _2239));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1804) + _1793;
        float _2452 = (_2447 * _1807) + _1797;
        float _2453 = (_2447 * _1810) + _1801;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_25_49_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1829 = frontier_phi_25_49_ladder_2;
        _1831 = frontier_phi_25_49_ladder_1;
        _1833 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1739);
        _1829 = _1813.x * cbModelParam._m0[1u].z;
        _1831 = _1813.y * cbModelParam._m0[1u].z;
        _1833 = _1813.z * cbModelParam._m0[1u].z;
    }
    float _1845 = ((((1.0 - _831) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_831 * _818)) * _802;
    float _1846 = _1845 * ((cbModelParam._m0[1u].w * (_1829 - _1730)) + _1730);
    float _1847 = _1845 * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1848 = _1845 * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1851 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, _1846 * cbSceneParam._m0[91u].x));
    vec4 _1865 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_737, _738));
    float _1867 = _1865.w;
    float _1879 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1867);
    float _1880 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1867);
    float _1881 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1867);
    uvec4 _1885 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _1887 = _1885.x * 14u;
    uint _1888 = _1887 + 13u;
    float _1895 = _802 + (-1.0);
    float _1900 = (cbLight._m0[_1888].x * _1895) + 1.0;
    float _1901 = (cbLight._m0[_1888].y * _1895) + 1.0;
    float _1902 = (cbLight._m0[_1888].z * _1895) + 1.0;
    float _1903 = (cbLight._m0[_1888].w * _1895) + 1.0;
    uint _1904 = _1887 + 5u;
    float _1910 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1914 = _1887 + 4u;
    float _1924 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1928 = _1887 | 1u;
    float _1939 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_638, _639, _640));
    float _1942 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_638, _639, _640));
    float _4186 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _4197 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1947 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.3183098733425140380859375;
    float _1949 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _1956 = ((cbLight._m0[_1904].x * _1910) * _1949) + (((cbLight._m0[_1914].x * _1879) * _1924) * _1947);
    float _1957 = ((_1910 * cbLight._m0[_1904].y) * _1949) + (((cbLight._m0[_1914].y * _1880) * _1924) * _1947);
    float _1958 = ((_1910 * cbLight._m0[_1904].z) * _1949) + (((cbLight._m0[_1914].z * _1881) * _1924) * _1947);
    uvec4 _1963 = floatBitsToUint(cbLight._m0[_1887 + 12u]);
    bool _1965 = _1963.x == 0u;
    float _1976;
    float _1978;
    float _1980;
    if (_1965)
    {
        _1976 = _1956;
        _1978 = _1957;
        _1980 = _1958;
    }
    else
    {
        uint _1984 = _1887 + 6u;
        float _2000 = (dot(vec3(cbLight._m0[_1887 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2001 = _2000 * _2000;
        float _4208 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2003 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _1976 = (((cbLight._m0[_1984].x * 0.3183098733425140380859375) * _2002) * _2003) + _1956;
        _1978 = (((cbLight._m0[_1984].y * 0.3183098733425140380859375) * _2002) * _2003) + _1957;
        _1980 = (((cbLight._m0[_1984].z * 0.3183098733425140380859375) * _2002) * _2003) + _1958;
    }
    bool _1983 = _1963.y == 0u;
    float _2021;
    float _2023;
    float _2025;
    if (_1983)
    {
        _2021 = _1976;
        _2023 = _1978;
        _2025 = _1980;
    }
    else
    {
        uint _2183 = _1887 + 7u;
        float _2199 = (dot(vec3(cbLight._m0[_1887 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4224 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2202 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2021 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _1976;
        _2023 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _1978;
        _2025 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _1980;
    }
    uint _2028 = _1887 + 8u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _641) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1887].x + _716;
    float _2044 = cbLight._m0[_1887].y + _717;
    float _2045 = cbLight._m0[_1887].z + _718;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1887].xyz));
    float _4240 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2057 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _2058 = dot(vec3(_638, _639, _640), vec3(_2050, _2051, _2052));
    float _4262 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2062 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2050, _2051, _2052));
    float _4273 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2066 = _2042 * _2042;
    float _2070 = ((_2061 * _2061) * (_2066 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2042;
    float _2093 = (0.5 / (((_2057 * ((_2056 * _2082) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2082) + _2042) * _2056))) * _2056;
    float _4284 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2066 / ((_2070 * _2070) * 3.141590118408203125));
    uint _2109 = _1887 + 9u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _641) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_1928].x + _716;
    float _2123 = cbLight._m0[_1928].y + _717;
    float _2124 = cbLight._m0[_1928].z + _718;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1928].xyz));
    float _4295 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2136 = dot(vec3(_638, _639, _640), vec3(_2129, _2130, _2131));
    float _4306 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2140 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2129, _2130, _2131));
    float _4317 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2144 = _2121 * _2121;
    float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
    float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2158 = 1.0 - _2121;
    float _2168 = (0.5 / (((_2057 * ((_2135 * _2158) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2158) + _2121) * _2135))) * _2135;
    float _4328 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
    float _2180 = (((_2157 * cbLight._m0[_2109].x) * _2170) * _1910) + ((((cbLight._m0[_2028].x * _1879) * _2081) * _2095) * _1924);
    float _2181 = (((_2157 * cbLight._m0[_2109].y) * _2170) * _1910) + ((((cbLight._m0[_2028].y * _1880) * _2081) * _2095) * _1924);
    float _2182 = (((_2157 * cbLight._m0[_2109].z) * _2170) * _1910) + ((((cbLight._m0[_2028].z * _1881) * _2081) * _2095) * _1924);
    float _2244;
    float _2246;
    float _2248;
    if (_1965)
    {
        _2244 = _2180;
        _2246 = _2181;
        _2248 = _2182;
    }
    else
    {
        uint _2250 = _1887 + 2u;
        uint _2254 = _1887 + 10u;
        float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _641) * 0.949999988079071044921875);
        float _2269 = _2268 * _2268;
        float _2270 = cbLight._m0[_2250].x + _716;
        float _2271 = cbLight._m0[_2250].y + _717;
        float _2272 = cbLight._m0[_2250].z + _718;
        float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
        float _2277 = _2276 * _2270;
        float _2278 = _2276 * _2271;
        float _2279 = _2276 * _2272;
        float _2280 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2250].xyz));
        float _4339 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2284 = dot(vec3(_638, _639, _640), vec3(_2277, _2278, _2279));
        float _4350 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2287 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2288 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2277, _2278, _2279));
        float _4361 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2292 = _2269 * _2269;
        float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
        float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2306 = 1.0 - _2269;
        float _2316 = (0.5 / (((_2057 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2306) + _2269) * _2283))) * _2283;
        float _4372 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
        _2244 = (((_2305 * cbLight._m0[_2254].x) * _2318) * _2319) + _2180;
        _2246 = (((_2305 * cbLight._m0[_2254].y) * _2318) * _2319) + _2181;
        _2248 = (((_2305 * cbLight._m0[_2254].z) * _2318) * _2319) + _2182;
    }
    float _2354;
    float _2356;
    float _2358;
    if (_1983)
    {
        _2354 = _2244;
        _2356 = _2246;
        _2358 = _2248;
    }
    else
    {
        uint _2365 = _1887 + 3u;
        uint _2369 = _1887 + 11u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _641) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _716;
        float _2386 = cbLight._m0[_2365].y + _717;
        float _2387 = cbLight._m0[_2365].z + _718;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2365].xyz));
        float _4388 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2399 = dot(vec3(_638, _639, _640), vec3(_2392, _2393, _2394));
        float _4399 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4410 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2421 = 1.0 - _2384;
        float _2431 = (0.5 / (((_2057 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2057 * _2421) + _2384) * _2398))) * _2398;
        float _4421 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _1903 : (isnan(_1903) ? 1.0 : min(_1903, 1.0));
        _2354 = (((_2420 * cbLight._m0[_2369].x) * _2433) * _2434) + _2244;
        _2356 = (((_2420 * cbLight._m0[_2369].y) * _2433) * _2434) + _2246;
        _2358 = (((_2420 * cbLight._m0[_2369].z) * _2433) * _2434) + _2248;
    }
    float _2569;
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_1885.y == 0u)
    {
        float _2509 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2510 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2509;
        float _2511 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2509;
        float _2512 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2509;
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.x;
        uint _2536 = uint((float(_2524.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2525))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2525)));
        float _2546 = (log2(_2512 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2547 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        uint _2550 = uint(isnan(14.0) ? _2547 : (isnan(_2547) ? 14.0 : min(_2547, 14.0)));
        uvec4 _2555 = texelFetch(g_lightClusterGridBuffer, int(((_2550 << 2u) + (_2536 << 6u)) >> 2u));
        uint _2556 = _2555.x;
        uint _2557 = _2524.z;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((((1u << ((_2557 >> 4u) & 15u)) + 4294967295u) & _2556) == 0u) || ((_2557 & 240u) == 0u))
        {
            _2657 = 0.0;
            _2659 = 0.0;
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
        }
        else
        {
            float _2658;
            float _2660;
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            uint _2816 = 0u;
            uint _2825;
            bool _2826;
            for (;;)
            {
                _2825 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2816 << 2u)) >> 2u)).x;
                _2826 = _2825 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2826)
                {
                    frontier_phi_66_pred = _2810;
                    frontier_phi_66_pred_1 = _2815;
                    frontier_phi_66_pred_2 = _2814;
                    frontier_phi_66_pred_3 = _2813;
                    frontier_phi_66_pred_4 = _2812;
                    frontier_phi_66_pred_5 = _2811;
                }
                else
                {
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    uint _2961;
                    _2955 = _2810;
                    _2956 = _2811;
                    _2957 = _2812;
                    _2958 = _2813;
                    _2959 = _2814;
                    _2960 = _2815;
                    _2961 = _2825;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    for (;;)
                    {
                        uint _2965 = uint(findLSB(_2961)) + (_2816 << 5u);
                        uint _2962 = (_2961 + 4294967295u) & _2961;
                        uint _2967 = _2965 * 48u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2987 = (_2965 * 48u) + 4u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3006 = (_2965 * 48u) + 8u;
                        vec3 _3017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x));
                        float _3021 = _2981.x - _2510;
                        float _3022 = _2981.y - _2511;
                        float _3023 = _2981.z - _2512;
                        float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                        float _3027 = inversesqrt(_3024);
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3031 = dot(vec3(_758, _761, _764), vec3(_3028, _3029, _3030));
                        float _3036 = 1.0 - (_3024 * _2981.w);
                        float _4447 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3038 = sqrt(_3024) * _3000.w;
                        float _3041 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _3031) + _3042;
                        float _3048 = _3038 * _3038;
                        float _3052 = ((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3037) / ((_3048 * 0.699999988079071044921875) + 1.0);
                        float _3056 = (-0.0) - _2510;
                        float _3057 = (-0.0) - _2511;
                        float _3058 = (-0.0) - _2512;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3073 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                        float _3074 = 1.0 - _818;
                        float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                        float _3082 = _3081 * _3081;
                        float _3083 = _3082 * _3082;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3086 = _3065 + _3030;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3094 = dot(vec3(_758, _761, _764), vec3(_3063, _3064, _3065));
                        float _4463 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3098 = dot(vec3(_758, _761, _764), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                        float _4474 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                        float _3106 = _3041 * _3082;
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3031) + _3107;
                        float _4485 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3112 = 1.0 - _3082;
                        float _3122 = (0.5 / (((_3111 * ((_3097 * _3112) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3082) * _3097))) * _3111;
                        float _4496 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3133 = (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) / ((_3105 * _3105) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125))) * _3037;
                        _2885 = (_3052 * _3000.x) + _2958;
                        _2886 = (_3052 * _3000.y) + _2959;
                        _2887 = (_3052 * _3000.z) + _2960;
                        _2882 = (_3133 * _3017.x) + _2955;
                        _2883 = (_3133 * _3017.y) + _2956;
                        _2884 = (_3133 * _3017.z) + _2957;
                        if (_2962 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2955 = _2882;
                            _2956 = _2883;
                            _2957 = _2884;
                            _2958 = _2885;
                            _2959 = _2886;
                            _2960 = _2887;
                            _2961 = _2962;
                        }
                    }
                    frontier_phi_66_pred = _2882;
                    frontier_phi_66_pred_1 = _2887;
                    frontier_phi_66_pred_2 = _2886;
                    frontier_phi_66_pred_3 = _2885;
                    frontier_phi_66_pred_4 = _2884;
                    frontier_phi_66_pred_5 = _2883;
                }
                _2658 = frontier_phi_66_pred;
                _2668 = frontier_phi_66_pred_1;
                _2666 = frontier_phi_66_pred_2;
                _2664 = frontier_phi_66_pred_3;
                _2662 = frontier_phi_66_pred_4;
                _2660 = frontier_phi_66_pred_5;
                uint _2817 = _2816 + 1u;
                if (_2817 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2810 = _2658;
                    _2811 = _2660;
                    _2812 = _2662;
                    _2813 = _2664;
                    _2814 = _2666;
                    _2815 = _2668;
                    _2816 = _2817;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2657 = _2658;
            _2659 = _2660;
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
        }
        uvec4 _2671 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2672 = _2671.z;
        uint _2674 = (_2672 >> 8u) & 15u;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        if (((4294967295u << _2674) & _2556) == 0u)
        {
            _2778 = _2657;
            _2780 = _2659;
            _2782 = _2661;
            _2784 = _2663;
            _2786 = _2665;
            _2788 = _2667;
        }
        else
        {
            float _2803 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
            float _2804 = _2803 * _2510;
            float _2805 = _2803 * _2511;
            float _2806 = _2803 * _2512;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2674 < ((_2672 >> 12u) & 15u))
            {
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2938 = _2657;
                float _2939 = _2659;
                float _2940 = _2661;
                float _2941 = _2663;
                float _2942 = _2665;
                float _2943 = _2667;
                uint _2944 = _2674;
                uint _2953;
                bool _2954;
                for (;;)
                {
                    _2953 = texelFetch(g_lightClassification, int((((_2550 << 5u) + (_2536 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                    _2954 = _2953 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2954)
                    {
                        frontier_phi_77_pred = _2943;
                        frontier_phi_77_pred_1 = _2942;
                        frontier_phi_77_pred_2 = _2941;
                        frontier_phi_77_pred_3 = _2940;
                        frontier_phi_77_pred_4 = _2939;
                        frontier_phi_77_pred_5 = _2938;
                    }
                    else
                    {
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3440;
                        float _3441;
                        float _3442;
                        float _3443;
                        float _3444;
                        float _3445;
                        float _3160 = _2938;
                        float _3161 = _2939;
                        float _3162 = _2940;
                        float _3163 = _2941;
                        float _3164 = _2942;
                        float _3165 = _2943;
                        uint _3166 = _2953;
                        uint _3167;
                        vec4 _3192;
                        float _3193;
                        vec4 _3208;
                        vec3 _3220;
                        vec4 _3235;
                        vec4 _3250;
                        float _3296;
                        bool _3297;
                        for (;;)
                        {
                            uint _3177 = ((_2944 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3166));
                            _3167 = (_3166 + 4294967295u) & _3166;
                            uint _3179 = _3177 * 40u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            _3193 = _3192.w;
                            uint _3195 = (_3177 * 40u) + 4u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3210 = (_3177 * 40u) + 8u;
                            _3220 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3210 + 2u)).x));
                            uint _3222 = (_3177 * 40u) + 16u;
                            _3235 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3222)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3222 + 3u)).x));
                            uint _3237 = (_3177 * 40u) + 20u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3177 * 40u) + 24u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            uint _3271 = (_3177 * 40u) + 28u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            _3296 = fma(_2512, _3284.z, fma(_2511, _3284.y, _3284.x * _2510)) + _3284.w;
                            _3297 = !((fma(_2512, _3265.z, fma(_2511, _3265.y, _3265.x * _2510)) + _3265.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3297)
                            {
                                float _3324 = _3192.x - _2510;
                                float _3325 = _3192.y - _2511;
                                float _3326 = _3192.z - _2512;
                                float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                                float _3330 = inversesqrt(_3327);
                                float _3331 = _3330 * _3324;
                                float _3332 = _3330 * _3325;
                                float _3333 = _3330 * _3326;
                                float _3337 = 1.0 - (_3327 / (_3193 * _3193));
                                float _4507 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3342 = sqrt(_3327) * _3208.w;
                                float _3344 = 1.39999997615814208984375 / (_3342 + 1.39999997615814208984375);
                                float _3345 = _3344 * _3344;
                                float _3348 = ((1.0 - _3345) * dot(vec3(_3331, _3332, _3333), vec3(_758, _761, _764))) + _3345;
                                float _3351 = _3342 * _3342;
                                float _3355 = (fma(_2512, _3235.z, fma(_2511, _3235.y, _3235.x * _2510)) + _3235.w) / _3296;
                                float _3356 = (fma(_2512, _3250.z, fma(_2511, _3250.y, _3250.x * _2510)) + _3250.w) / _3296;
                                float _3360 = 1.0 - dot(vec2(_3355, _3356), vec2(_3355, _3356));
                                float _4523 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3362 = _3361 * (((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3338) / ((_3351 * 0.699999988079071044921875) + 1.0));
                                float _3374 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                                float _3375 = 1.0 - _818;
                                float _3382 = sqrt(1.0 - ((1.0 - (_3375 * _3375)) * (1.0 - (_3374 * _3374))));
                                float _3383 = _3382 * _3382;
                                float _3384 = _3383 * _3383;
                                float _3385 = _3331 - _2804;
                                float _3386 = _3332 - _2805;
                                float _3387 = _3333 - _2806;
                                float _3391 = inversesqrt(dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387)));
                                float _3395 = dot(vec3(_758, _761, _764), vec3((-0.0) - _2804, (-0.0) - _2805, (-0.0) - _2806));
                                float _4534 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3399 = dot(vec3(_758, _761, _764), vec3(_3391 * _3385, _3391 * _3386, _3391 * _3387));
                                float _4545 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                                float _3402 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3406 = ((_3402 * _3402) * (_3384 + (-1.0))) + 1.0;
                                float _3407 = _3344 * _3383;
                                float _3408 = _3407 * _3407;
                                float _3414 = ((1.0 - _3408) * dot(vec3(_758, _761, _764), vec3(_3331, _3332, _3333))) + _3408;
                                float _4556 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3415 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3416 = 1.0 - _3383;
                                float _3426 = (0.5 / (((_3415 * ((_3398 * _3416) + _3383)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3383) * _3398))) * _3415;
                                float _4567 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3436 = (_3361 * _3338) * (((_3384 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3406 * _3406) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3362 * _3208.y;
                                frontier_phi_83_pred_1 = _3362 * _3208.x;
                                frontier_phi_83_pred_2 = _3436 * _3220.z;
                                frontier_phi_83_pred_3 = _3436 * _3220.y;
                                frontier_phi_83_pred_4 = _3436 * _3220.x;
                                frontier_phi_83_pred_5 = _3362 * _3208.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3444 = frontier_phi_83_pred;
                            _3443 = frontier_phi_83_pred_1;
                            _3442 = frontier_phi_83_pred_2;
                            _3441 = frontier_phi_83_pred_3;
                            _3440 = frontier_phi_83_pred_4;
                            _3445 = frontier_phi_83_pred_5;
                            _3150 = _3443 + _3163;
                            _3151 = _3444 + _3164;
                            _3152 = _3445 + _3165;
                            _3147 = _3440 + _3160;
                            _3148 = _3441 + _3161;
                            _3149 = _3442 + _3162;
                            if (_3167 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3160 = _3147;
                                _3161 = _3148;
                                _3162 = _3149;
                                _3163 = _3150;
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3167;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3152;
                        frontier_phi_77_pred_1 = _3151;
                        frontier_phi_77_pred_2 = _3150;
                        frontier_phi_77_pred_3 = _3149;
                        frontier_phi_77_pred_4 = _3148;
                        frontier_phi_77_pred_5 = _3147;
                    }
                    _2789 = frontier_phi_77_pred;
                    _2787 = frontier_phi_77_pred_1;
                    _2785 = frontier_phi_77_pred_2;
                    _2783 = frontier_phi_77_pred_3;
                    _2781 = frontier_phi_77_pred_4;
                    _2779 = frontier_phi_77_pred_5;
                    uint _2945 = _2944 + 1u;
                    if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2938 = _2779;
                        _2939 = _2781;
                        _2940 = _2783;
                        _2941 = _2785;
                        _2942 = _2787;
                        _2943 = _2789;
                        _2944 = _2945;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2783;
                frontier_phi_58_59_ladder_1 = _2789;
                frontier_phi_58_59_ladder_2 = _2787;
                frontier_phi_58_59_ladder_3 = _2785;
                frontier_phi_58_59_ladder_4 = _2781;
                frontier_phi_58_59_ladder_5 = _2779;
            }
            else
            {
                frontier_phi_58_59_ladder = _2661;
                frontier_phi_58_59_ladder_1 = _2667;
                frontier_phi_58_59_ladder_2 = _2665;
                frontier_phi_58_59_ladder_3 = _2663;
                frontier_phi_58_59_ladder_4 = _2659;
                frontier_phi_58_59_ladder_5 = _2657;
            }
            _2778 = frontier_phi_58_59_ladder_5;
            _2780 = frontier_phi_58_59_ladder_4;
            _2782 = frontier_phi_58_59_ladder;
            _2784 = frontier_phi_58_59_ladder_3;
            _2786 = frontier_phi_58_59_ladder_2;
            _2788 = frontier_phi_58_59_ladder_1;
        }
        float _2793 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2569 = (_2793 * _2784) + _2021;
        _2571 = (_2793 * _2786) + _2023;
        _2573 = (_2793 * _2788) + _2025;
        _2575 = ((_2778 * 0.039999999105930328369140625) * _2793) + _2354;
        _2577 = ((_2780 * 0.039999999105930328369140625) * _2793) + _2356;
        _2579 = ((_2782 * 0.039999999105930328369140625) * _2793) + _2358;
    }
    else
    {
        _2569 = _2021;
        _2571 = _2023;
        _2573 = _2025;
        _2575 = _2354;
        _2577 = _2356;
        _2579 = _2358;
    }
    float _4583 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4594 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4605 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2596 = ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2569 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _802))) + ((_2575 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2597 = ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2571 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _802))) + ((_2577 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    float _2598 = ((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2573 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _802))) + ((_2579 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1638)) * cbPerFrame._m0[3u].x);
    uint _2599 = _269 + 6u;
    float _2607 = _737 / cbSceneParam._m0[86u].x;
    float _2608 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2622 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2624 = _2622.x;
    float _2625 = _2622.y;
    float _2626 = _2622.z;
    float _2627 = _2622.w;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2682 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2683 = _2682 / _659;
        float _2694 = _2683 * _709;
        float _2695 = _710 * _2683;
        float _2696 = (-0.0) - _2695;
        float _2698 = _2683 * _711;
        float _2700 = (cbSceneParam._m0[77u].w * _2696) / _2682;
        float _2701 = _2700 + cbSceneParam._m0[79u].w;
        float _2702 = cbSceneParam._m0[79u].w - _2695;
        float _2708 = sqrt(((_2694 * _2694) + (_2695 * _2695)) + (_2698 * _2698));
        float _2711 = (1.0 - (cbSceneParam._m0[77u].w / _2682)) * _2708;
        float _2716 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2718 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2696 - _2700) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2701 > 0.0) ? exp2(_2716 * _2701) : (2.0 - exp2(_2718 * _2701))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2711;
        }
        else
        {
            float _2839 = 1.0 / cbSceneParam._m0[80u].x;
            float _2840 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : max(_2701, _2702));
            float _2841 = isnan(_2702) ? _2701 : (isnan(_2701) ? _2702 : min(_2701, _2702));
            float _2850 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : min(_2840, 0.0));
            float _2851 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : min(_2841, 0.0));
            _2895 = ((abs(_2708 / _2696) * cbSceneParam._m0[80u].y) * ((((_2850 - _2851) * 2.0) - ((exp2(_2716 * (isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0)))) - exp2(_2716 * (isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))))) * _2839)) - ((exp2(_2718 * _2850) - exp2(_2718 * _2851)) * _2839))) + (_2711 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2607, _2608, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2627);
        _2720 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2624;
        _2722 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2625;
        _2724 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2626;
        _2726 = _2906 * _2627;
    }
    else
    {
        _2720 = _2624;
        _2722 = _2625;
        _2724 = _2626;
        _2726 = _2627;
    }
    bool _2933;
    vec4 _2736;
    vec4 _2758;
    float _2760;
    float _2764;
    float _2765;
    float _2766;
    float _2767;
    bool _2777;
    for (;;)
    {
        _2736 = cbMatDynParam._m0[0u];
        float _2738 = roundEven(_2736.y);
        bool _2739 = _2738 == 3.0;
        float _2740 = log2(_2726);
        float _2747 = exp2(_2740 * cbSceneParam._m0[78u].x) * _2596;
        float _2748 = exp2(_2740 * cbSceneParam._m0[78u].y) * _2597;
        float _2749 = exp2(_2740 * cbSceneParam._m0[78u].z) * _2598;
        float _2756 = _725 + (-0.5);
        _2758 = cbMtdParam._m0[1u];
        _2760 = _2758.y * _2756;
        float _2763 = (_2738 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2764 = _2763 * (_2739 ? _2747 : (_2747 + (cbSceneParam._m0[72u].w * _2720)));
        _2765 = _2763 * (_2739 ? _2748 : (_2748 + (cbSceneParam._m0[72u].w * _2722)));
        _2766 = _2763 * (_2739 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2724)));
        _2767 = _2756 * 0.999000012874603271484375;
        _2777 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2777)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _2767) < 0.5)
            {
                _2933 = true;
                break;
            }
        }
        uint _2874 = _777 + uint(_2736.w);
        if ((cbInstanceData._m0[_2874].w < 1.0) && ((cbInstanceData._m0[_2874].w + _2767) < 0.5))
        {
            _2933 = true;
            break;
        }
        if ((_2760 + 1.0) < _2758.x)
        {
            _2933 = true;
            break;
        }
        _2933 = false;
        break;
    }
    float _3138;
    if (_2933)
    {
        discard_state = true;
        _3138 = 0.0;
    }
    else
    {
        _3138 = cbInstanceData._m0[_2599].w;
    }
    SV_Target.x = _2764;
    SV_Target.y = _2765;
    SV_Target.z = _2766;
    SV_Target.w = _3138;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2599].w;
    discard_exit();
}


