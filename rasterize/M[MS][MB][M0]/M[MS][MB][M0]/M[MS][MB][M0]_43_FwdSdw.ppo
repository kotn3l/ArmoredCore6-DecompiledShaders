#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1182;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3771 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3782 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3793 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _288) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _289) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _330 = _325.x * cbMtdParam._m0[9u].x;
    float _331 = _325.y * cbMtdParam._m0[9u].y;
    float _332 = _325.z * cbMtdParam._m0[9u].z;
    float _336 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _302.x) * _330;
    float _339 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _302.y) * _331;
    float _342 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _302.z) * _332;
    float _349 = ((_330 - _336) * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) + _336;
    float _350 = ((_331 - _339) * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) + _339;
    float _351 = ((_332 - _342) * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) + _342;
    vec4 _370 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _288) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _289) + cbTextureTilingScale._m0[20u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _420 = _416.z;
    float _424 = (_416.x * 2.0) + (-1.0);
    float _425 = (_416.y * 2.0) + (-1.0);
    float _426 = dot(vec2(_424, _425), vec2(_424, _425));
    float _3804 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _431 = sqrt(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))));
    float _436 = _424 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_390.x * 2.0) + (-1.0)));
    float _437 = _425 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_390.y * 2.0) + (-1.0)));
    vec4 _454 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _456 = _454.x;
    float _457 = 1.0 - _456;
    float _466 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _469 = ((isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : min(_466, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _478 = (_469 - ((((((_456 - _457) * cbMtdParam._m0[24u].z) + _457) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _469))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3825 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _486 = (_479 * ((_370.x * cbMtdParam._m0[18u].x) - _349)) + _349;
    float _487 = (_479 * ((_370.y * cbMtdParam._m0[18u].y) - _350)) + _350;
    float _488 = (_479 * ((_370.z * cbMtdParam._m0[18u].z) - _351)) + _351;
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _531 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_503 - _504) * cbMtdParam._m0[24u].w) + _504) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3836 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _540 = ((((cbMtdParam._m0[10u].x - _486) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _532) + _486;
    float _541 = ((((cbMtdParam._m0[10u].y - _487) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _532) + _487;
    float _542 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _488)) * _532) + _488;
    float _547 = (((_390.z - _420) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _420;
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _568 = (_561.x * 2.0) + (-1.0);
    float _569 = (_561.y * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3847 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _578 = (_479 * (_561.z - _547)) + _547;
    float _581 = ((cbMtdParam._m0[23u].y - _578) * _532) + _578;
    vec4 _603 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _609 = (_603.x * 2.0) + (-1.0);
    float _610 = (_603.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3858 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _628 = (((_568 - _436) + (cbMtdParam._m0[21u].x * _436)) * _479) + _436;
    float _629 = (((_569 - _437) + (cbMtdParam._m0[21u].x * _437)) * _479) + _437;
    float _630 = (_479 * (sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _431)) + _431;
    float _641 = (((_609 - _628) + (_628 * cbMtdParam._m0[22u].z)) * _532) + _628;
    float _642 = (((_610 - _629) + (_629 * cbMtdParam._m0[22u].z)) * _532) + _629;
    float _643 = ((sqrt(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) - _630) * _532) + _630;
    float _645 = cbMtdParam._m0[22u].x + _416.w;
    float _648 = fma(_643, _237 * NORMAL.x, fma(_642, _244 * TANGENT.x, (_230 * _222) * _641));
    float _651 = fma(_643, _237 * NORMAL.y, fma(_642, _244 * TANGENT.y, (_230 * _223) * _641));
    float _654 = fma(_643, _237 * NORMAL.z, fma(_642, _244 * TANGENT.z, (_230 * _224) * _641));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3869 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _662 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _3891 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3902 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3913 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _680 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _730 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _720);
    float _731 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _720);
    float _732 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _720);
    float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
    float _737 = _730 * _736;
    float _738 = _731 * _736;
    float _739 = _732 * _736;
    float _745 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _746 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _767 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _770 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _773 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _787 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _793 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_787].x;
    float _794 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_787].y;
    float _795 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_787].z;
    float _3924 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    vec4 _807 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _745, cbSceneParam._m0[86u].y * _746));
    float _811 = ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * TEXCOORD_5.w) * _807.x;
    float _812 = dot(vec3(_659, _660, _661), vec3(_737, _738, _739));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _659) - _737;
    float _820 = (_815 * _660) - _738;
    float _821 = (_815 * _661) - _739;
    float _825 = abs(dot(vec3(_737, _738, _739), vec3(_659, _660, _661)));
    float _3957 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_662);
    float _840 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_880, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _872));
        float _910 = fma(_880, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _872));
        float _914 = fma(_880, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _872));
        float _939 = _872 + _659;
        float _940 = _876 + _660;
        float _941 = _880 + _661;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _906;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _910;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _914;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_659, _660, _661), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _4005 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_659, _660, _661), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4038 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_659, _660, _661), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _4071 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1221 = fma(_880, cbModelParam._m0[30u].z, fma(_876, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _872));
        float _1225 = fma(_880, cbModelParam._m0[31u].z, fma(_876, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _872));
        float _1229 = fma(_880, cbModelParam._m0[32u].z, fma(_876, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _872));
        float _1252 = _872 + _659;
        float _1253 = _876 + _660;
        float _1254 = _880 + _661;
        float _1264 = fma(_1254, cbModelParam._m0[30u].z, fma(_1253, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1252)) - _1221;
        float _1265 = fma(_1254, cbModelParam._m0[31u].z, fma(_1253, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1252)) - _1225;
        float _1266 = fma(_1254, cbModelParam._m0[32u].z, fma(_1253, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1252)) - _1229;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1221 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1225 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[35u].z) + ((((((_1229 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1320 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1287.x + (-0.5));
        float _1322 = _1320 * (_1287.y + (-0.5));
        float _1323 = _1320 * (_1287.z + (-0.5));
        float _1330 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1294.x + (-0.5));
        float _1332 = _1330 * (_1294.y + (-0.5));
        float _1333 = _1330 * (_1294.z + (-0.5));
        float _1340 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1301.x + (-0.5));
        float _1342 = _1340 * (_1301.y + (-0.5));
        float _1343 = _1340 * (_1301.z + (-0.5));
        float _1350 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1308.x + (-0.5));
        float _1352 = _1350 * (_1308.y + (-0.5));
        float _1353 = _1350 * (_1308.z + (-0.5));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = _1321 * 0.5;
        float _1358 = _1331 * 0.5;
        float _1359 = _1341 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_659, _660, _661), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4134 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1384 + 1.0))) + _1389) * _1354;
        float _1399 = _1322 * 0.5;
        float _1400 = _1332 * 0.5;
        float _1401 = _1342 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_659, _660, _661), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _4167 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1426 + 1.0))) + _1431) * _1355;
        float _1441 = _1323 * 0.5;
        float _1442 = _1333 * 0.5;
        float _1443 = _1343 * 0.5;
        float _1444 = dot(vec3(_1441, _1442, _1443), vec3(_1441, _1442, _1443));
        float _1449 = (_1444 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1444);
        float _1457 = (dot(vec3(_659, _660, _661), vec3(_1449 * _1441, _1449 * _1442, _1449 * _1443)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1466 = sqrt(((_1442 * _1442) + (_1441 * _1441)) + (_1443 * _1443)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1468 = _1467 * 2.0;
        float _1472 = (1.0 - _1467) / (_1467 + 1.0);
        float _4200 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1482 = ((((1.0 - _1473) * (_1468 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1468 + 1.0))) + _1473) * _1356;
        _1490 = _1323;
        _1491 = _1322;
        _1492 = _1321;
        _1493 = _1333;
        _1494 = _1332;
        _1495 = _1331;
        _1496 = _1343;
        _1497 = _1342;
        _1498 = _1341;
        _1499 = _1356;
        _1500 = _1355;
        _1501 = _1354;
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)));
    }
    else
    {
        _1490 = _1182;
        _1491 = _1182;
        _1492 = _1182;
        _1493 = _1182;
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = 0.0;
        _1503 = 0.0;
        _1504 = 0.0;
    }
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1194)) + _1194;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1195)) + _1195;
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1196)) + _1196;
    float _1537 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1540 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1543 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1514));
    float _1558 = _819 * 0.5;
    float _1559 = _820 * 0.5;
    float _1560 = _821 * 0.5;
    float _1561 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1564 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1567 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1601;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1574 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1578 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1582 = dot(vec4(_1558, _1559, _1560, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1589 = dot(vec4(cbModelParam._m0[39u]), vec4(_1558, _1559, _1560, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1589) ? 0.0 : (isnan(0.0) ? _1589 : max(0.0, _1589))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1612;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1603 = dot(vec4(cbModelParam._m0[40u]), vec4(_1558, _1559, _1560, 1.0));
        _1612 = dot(vec3(isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1603) ? 0.0 : (isnan(0.0) ? _1603 : max(0.0, _1603))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1612 = 1.0;
    }
    float _1616 = (_1612 * cbModelParam._m0[1u].x) + (_1601 * (1.0 - cbModelParam._m0[1u].x));
    float _1626 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1626 : min(cbModelParam._m0[25u].z, _1626));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1674 = fma(_880, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872)) + cbModelParam._m0[13u].w;
        float _1678 = fma(_880, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872)) + cbModelParam._m0[14u].w;
        float _1682 = fma(_880, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872)) + cbModelParam._m0[15u].w;
        float _1685 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1688 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1691 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1719;
        if (_1685 > 0.0)
        {
            _1719 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1719 = frontier_phi_14_12_ladder;
        }
        float _1889;
        if (_1688 > 0.0)
        {
            _1889 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1889 = frontier_phi_23_19_ladder;
        }
        float _2185;
        if (_1691 > 0.0)
        {
            _2185 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2185 = frontier_phi_35_30_ladder;
        }
        float _2187 = isnan(_1889) ? _1719 : (isnan(_1719) ? _1889 : min(_1719, _1889));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1685) + _1674;
        float _2193 = (_2188 * _1688) + _1678;
        float _2194 = (_2188 * _1691) + _1682;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2195;
        float _2199 = _2195 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 > _2199) || ((_2193 < _2197) || ((_2192 < _2197) || (_2192 > _2199))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2194, cbModelParam._m0[9u].z, fma(_2193, cbModelParam._m0[9u].y, _2192 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2194, cbModelParam._m0[10u].z, fma(_2193, cbModelParam._m0[10u].y, _2192 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2194, cbModelParam._m0[11u].z, fma(_2193, cbModelParam._m0[11u].y, _2192 * cbModelParam._m0[11u].x))), _1627);
            frontier_phi_13_35_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1707 = frontier_phi_13_35_ladder_2;
        _1709 = frontier_phi_13_35_ladder_1;
        _1711 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1627);
        _1707 = _1695.x * cbModelParam._m0[1u].y;
        _1709 = _1695.y * cbModelParam._m0[1u].y;
        _1711 = _1695.z * cbModelParam._m0[1u].y;
    }
    float _1715 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1715 : min(cbModelParam._m0[25u].w, _1715));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1769 = fma(_880, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872)) + cbModelParam._m0[21u].w;
        float _1773 = fma(_880, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872)) + cbModelParam._m0[22u].w;
        float _1777 = fma(_880, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872)) + cbModelParam._m0[23u].w;
        float _1780 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1783 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1786 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1894;
        if (_1780 > 0.0)
        {
            _1894 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1894 = frontier_phi_25_21_ladder;
        }
        float _2212;
        if (_1783 > 0.0)
        {
            _2212 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2212 = frontier_phi_37_32_ladder;
        }
        float _2539;
        if (_1786 > 0.0)
        {
            _2539 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2539 = frontier_phi_47_44_ladder;
        }
        float _2541 = isnan(_2212) ? _1894 : (isnan(_1894) ? _2212 : min(_1894, _2212));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1780) + _1769;
        float _2547 = (_2542 * _1783) + _1773;
        float _2548 = (_2542 * _1786) + _1777;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1716);
            frontier_phi_22_47_ladder = _2666.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2666.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2666.x * cbModelParam._m0[1u].z;
        }
        _1805 = frontier_phi_22_47_ladder_2;
        _1807 = frontier_phi_22_47_ladder_1;
        _1809 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1716);
        _1805 = _1789.x * cbModelParam._m0[1u].z;
        _1807 = _1789.y * cbModelParam._m0[1u].z;
        _1809 = _1789.z * cbModelParam._m0[1u].z;
    }
    float _1821 = ((((1.0 - _840) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_840 * _827)) * _811;
    float _1822 = _1821 * ((cbModelParam._m0[1u].w * (_1805 - _1707)) + _1707);
    float _1823 = _1821 * ((cbModelParam._m0[1u].w * (_1807 - _1709)) + _1709);
    float _1824 = _1821 * ((cbModelParam._m0[1u].w * (_1809 - _1711)) + _1711);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1823, cbSceneParam._m0[89u].y, _1822 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1823, cbSceneParam._m0[90u].y, _1822 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1823, cbSceneParam._m0[91u].y, _1822 * cbSceneParam._m0[91u].x));
    float _1868 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1872 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1881 = _1868 / _1880;
    float _1882 = _1872 / _1880;
    float _1883 = _1876 / _1880;
    float _2030;
    float _2031;
    float _2032;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1910 = ((uint(_1883 > cbSceneParam._m0[59u].y) + uint(_1883 > cbSceneParam._m0[59u].x)) + uint(_1883 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1911 = _1910 + 43u;
        uint _1919 = _1910 + 44u;
        uint _1927 = _1910 + 45u;
        uint _1935 = _1910 + 46u;
        float _1946 = fma(_1880, cbSceneParam._m0[_1911].w, fma(_1876, cbSceneParam._m0[_1911].z, fma(_1872, cbSceneParam._m0[_1911].y, _1868 * cbSceneParam._m0[_1911].x)));
        float _1950 = fma(_1880, cbSceneParam._m0[_1919].w, fma(_1876, cbSceneParam._m0[_1919].z, fma(_1872, cbSceneParam._m0[_1919].y, _1868 * cbSceneParam._m0[_1919].x)));
        float _1958 = fma(_1880, cbSceneParam._m0[_1935].w, fma(_1876, cbSceneParam._m0[_1935].z, fma(_1872, cbSceneParam._m0[_1935].y, _1868 * cbSceneParam._m0[_1935].x)));
        float _1963 = cbSceneParam._m0[33u].z * _1958;
        float _1965 = cbSceneParam._m0[33u].w * _1958;
        float _1968 = fma(_1880, cbSceneParam._m0[_1927].w, fma(_1876, cbSceneParam._m0[_1927].z, fma(_1872, cbSceneParam._m0[_1927].y, _1868 * cbSceneParam._m0[_1927].x))) / _1958;
        float _2016 = (cbSceneParam._m0[33u].x - sqrt(((_1882 * _1882) + (_1881 * _1881)) + (_1883 * _1883))) * cbSceneParam._m0[33u].y;
        float _4326 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2023 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1963 + _1946) / _1958, (_1965 + _1950) / _1958), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 + _1946) / _1958, (_1950 - _1963) / _1958), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 - _1963) / _1958, (_1950 - _1965) / _1958), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1946 - _1965) / _1958, (_1963 + _1950) / _1958), _1968), 0.0)).x), vec4(0.25)));
        _2030 = 1.0 - (_2023 * cbSceneParam._m0[34u].x);
        _2031 = 1.0 - (_2023 * cbSceneParam._m0[34u].y);
        _2032 = 1.0 - (_2023 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2030 = 1.0;
        _2031 = 1.0;
        _2032 = 1.0;
    }
    float _2096;
    float _2098;
    float _2100;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2084 = fma(_1880, cbSceneParam._m0[63u].w, fma(_1876, cbSceneParam._m0[63u].z, fma(_1872, cbSceneParam._m0[63u].y, _1868 * cbSceneParam._m0[63u].x)));
        float _2085 = fma(_1880, cbSceneParam._m0[60u].w, fma(_1876, cbSceneParam._m0[60u].z, fma(_1872, cbSceneParam._m0[60u].y, _1868 * cbSceneParam._m0[60u].x))) / _2084;
        float _2086 = fma(_1880, cbSceneParam._m0[61u].w, fma(_1876, cbSceneParam._m0[61u].z, fma(_1872, cbSceneParam._m0[61u].y, _1868 * cbSceneParam._m0[61u].x))) / _2084;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2085 >= cbSceneParam._m0[64u].x) && (_2086 >= cbSceneParam._m0[64u].y)) && (_2085 <= cbSceneParam._m0[64u].z)) && (_2086 <= cbSceneParam._m0[64u].w))
        {
            float _2225 = fma(_1880, cbSceneParam._m0[62u].w, fma(_1876, cbSceneParam._m0[62u].z, fma(_1872, cbSceneParam._m0[62u].y, _1868 * cbSceneParam._m0[62u].x))) / _2084;
            float _2229 = isnan(cbSceneParam._m0[41u].w) ? _2225 : (isnan(_2225) ? cbSceneParam._m0[41u].w : max(_2225, cbSceneParam._m0[41u].w));
            float _2272 = (cbSceneParam._m0[33u].x - sqrt(((_1882 * _1882) + (_1881 * _1881)) + (_1883 * _1883))) * cbSceneParam._m0[33u].y;
            float _4342 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
            float _2279 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2085, cbSceneParam._m0[33u].w + _2086), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2085, _2086 - cbSceneParam._m0[33u].z), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2085 - cbSceneParam._m0[33u].z, _2086 - cbSceneParam._m0[33u].w), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2085 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2086), _2229), 0.0)).x), vec4(0.25)));
            float _2283 = 1.0 - (_2279 * cbSceneParam._m0[34u].x);
            float _2284 = 1.0 - (_2279 * cbSceneParam._m0[34u].y);
            float _2285 = 1.0 - (_2279 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2285) ? _2032 : (isnan(_2032) ? _2285 : min(_2032, _2285));
            frontier_phi_34_33_ladder_1 = isnan(_2284) ? _2031 : (isnan(_2031) ? _2284 : min(_2031, _2284));
            frontier_phi_34_33_ladder_2 = isnan(_2283) ? _2030 : (isnan(_2030) ? _2283 : min(_2030, _2283));
        }
        else
        {
            frontier_phi_34_33_ladder = _2032;
            frontier_phi_34_33_ladder_1 = _2031;
            frontier_phi_34_33_ladder_2 = _2030;
        }
        _2096 = frontier_phi_34_33_ladder_2;
        _2098 = frontier_phi_34_33_ladder_1;
        _2100 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2096 = _2030;
        _2098 = _2031;
        _2100 = _2032;
    }
    uvec4 _2105 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2107 = _2105.x * 14u;
    uint _2108 = _2107 + 13u;
    float _2115 = _811 + (-1.0);
    float _2120 = (cbLight._m0[_2108].x * _2115) + 1.0;
    float _2121 = (cbLight._m0[_2108].y * _2115) + 1.0;
    float _2122 = (cbLight._m0[_2108].z * _2115) + 1.0;
    float _2123 = (cbLight._m0[_2108].w * _2115) + 1.0;
    uint _2124 = _2107 + 5u;
    float _2130 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2134 = _2107 + 4u;
    float _2144 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2148 = _2107 | 1u;
    float _2159 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_659, _660, _661));
    float _2162 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_659, _660, _661));
    float _4378 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _4389 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2167 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2169 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2176 = ((cbLight._m0[_2124].x * _2130) * _2169) + (((cbLight._m0[_2134].x * _2096) * _2144) * _2167);
    float _2177 = ((_2130 * cbLight._m0[_2124].y) * _2169) + (((cbLight._m0[_2134].y * _2098) * _2144) * _2167);
    float _2178 = ((_2130 * cbLight._m0[_2124].z) * _2169) + (((cbLight._m0[_2134].z * _2100) * _2144) * _2167);
    uvec4 _2182 = floatBitsToUint(cbLight._m0[_2107 + 12u]);
    bool _2184 = _2182.x == 0u;
    float _2286;
    float _2288;
    float _2290;
    if (_2184)
    {
        _2286 = _2176;
        _2288 = _2177;
        _2290 = _2178;
    }
    else
    {
        uint _2294 = _2107 + 6u;
        float _2310 = (dot(vec3(cbLight._m0[_2107 + 2u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2311 = _2310 * _2310;
        float _4400 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2312 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2313 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2286 = (((cbLight._m0[_2294].x * 0.3183098733425140380859375) * _2312) * _2313) + _2176;
        _2288 = (((cbLight._m0[_2294].y * 0.3183098733425140380859375) * _2312) * _2313) + _2177;
        _2290 = (((cbLight._m0[_2294].z * 0.3183098733425140380859375) * _2312) * _2313) + _2178;
    }
    bool _2293 = _2182.y == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2293)
    {
        _2348 = _2286;
        _2350 = _2288;
        _2352 = _2290;
    }
    else
    {
        uint _2510 = _2107 + 7u;
        float _2526 = (dot(vec3(cbLight._m0[_2107 + 3u].xyz), vec3(_659, _660, _661)) * 0.5) + 0.5;
        float _2527 = _2526 * _2526;
        float _4416 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2528 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2529 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2348 = (((cbLight._m0[_2510].x * 0.3183098733425140380859375) * _2528) * _2529) + _2286;
        _2350 = (((cbLight._m0[_2510].y * 0.3183098733425140380859375) * _2528) * _2529) + _2288;
        _2352 = (((cbLight._m0[_2510].z * 0.3183098733425140380859375) * _2528) * _2529) + _2290;
    }
    uint _2355 = _2107 + 8u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2107].w)) * _662) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2107].x + _737;
    float _2371 = cbLight._m0[_2107].y + _738;
    float _2372 = cbLight._m0[_2107].z + _739;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2107].xyz));
    float _4432 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2384 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2385 = dot(vec3(_659, _660, _661), vec3(_2377, _2378, _2379));
    float _4454 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2107].xyz), vec3(_2377, _2378, _2379));
    float _4465 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2369 * _2369;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2409 = 1.0 - _2369;
    float _2420 = (0.5 / (((_2384 * ((_2383 * _2409) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2409) + _2369) * _2383))) * _2383;
    float _4476 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    uint _2436 = _2107 + 9u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _662) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2148].x + _737;
    float _2450 = cbLight._m0[_2148].y + _738;
    float _2451 = cbLight._m0[_2148].z + _739;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2148].xyz));
    float _4487 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2463 = dot(vec3(_659, _660, _661), vec3(_2456, _2457, _2458));
    float _4498 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2467 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2456, _2457, _2458));
    float _4509 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2471 = _2448 * _2448;
    float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
    float _2484 = (exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2485 = 1.0 - _2448;
    float _2495 = (0.5 / (((_2384 * ((_2462 * _2485) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2485) + _2448) * _2462))) * _2462;
    float _4520 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2497 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
    float _2507 = (((_2484 * cbLight._m0[_2436].x) * _2497) * _2130) + ((((cbLight._m0[_2355].x * _2096) * _2408) * _2422) * _2144);
    float _2508 = (((_2484 * cbLight._m0[_2436].y) * _2497) * _2130) + ((((cbLight._m0[_2355].y * _2098) * _2408) * _2422) * _2144);
    float _2509 = (((_2484 * cbLight._m0[_2436].z) * _2497) * _2130) + ((((cbLight._m0[_2355].z * _2100) * _2408) * _2422) * _2144);
    float _2565;
    float _2567;
    float _2569;
    if (_2184)
    {
        _2565 = _2507;
        _2567 = _2508;
        _2569 = _2509;
    }
    else
    {
        uint _2571 = _2107 + 2u;
        uint _2575 = _2107 + 10u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _662) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _737;
        float _2592 = cbLight._m0[_2571].y + _738;
        float _2593 = cbLight._m0[_2571].z + _739;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2571].xyz));
        float _4531 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2605 = dot(vec3(_659, _660, _661), vec3(_2598, _2599, _2600));
        float _4542 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4553 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2627 = 1.0 - _2590;
        float _2637 = (0.5 / (((_2384 * ((_2604 * _2627) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2627) + _2590) * _2604))) * _2604;
        float _4564 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2565 = (((_2626 * cbLight._m0[_2575].x) * _2639) * _2640) + _2507;
        _2567 = (((_2626 * cbLight._m0[_2575].y) * _2639) * _2640) + _2508;
        _2569 = (((_2626 * cbLight._m0[_2575].z) * _2639) * _2640) + _2509;
    }
    float _2671;
    float _2673;
    float _2675;
    if (_2293)
    {
        _2671 = _2565;
        _2673 = _2567;
        _2675 = _2569;
    }
    else
    {
        uint _2682 = _2107 + 3u;
        uint _2686 = _2107 + 11u;
        float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2682].w)) * _662) * 0.949999988079071044921875);
        float _2701 = _2700 * _2700;
        float _2702 = cbLight._m0[_2682].x + _737;
        float _2703 = cbLight._m0[_2682].y + _738;
        float _2704 = cbLight._m0[_2682].z + _739;
        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
        float _2709 = _2708 * _2702;
        float _2710 = _2708 * _2703;
        float _2711 = _2708 * _2704;
        float _2712 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_2682].xyz));
        float _4580 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2716 = dot(vec3(_659, _660, _661), vec3(_2709, _2710, _2711));
        float _4591 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2720 = dot(vec3(cbLight._m0[_2682].xyz), vec3(_2709, _2710, _2711));
        float _4602 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2724 = _2701 * _2701;
        float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
        float _2737 = (exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2738 = 1.0 - _2701;
        float _2748 = (0.5 / (((_2384 * ((_2715 * _2738) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2738) + _2701) * _2715))) * _2715;
        float _4613 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2750 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
        float _2751 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2671 = (((_2737 * cbLight._m0[_2686].x) * _2750) * _2751) + _2565;
        _2673 = (((_2737 * cbLight._m0[_2686].y) * _2750) * _2751) + _2567;
        _2675 = (((_2737 * cbLight._m0[_2686].z) * _2750) * _2751) + _2569;
    }
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_2105.y == 0u)
    {
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.x;
        uint _2784 = uint((float(_2772.y) * floor(float(uint(cbSceneParam._m0[85u].y * _746) / _2773))) + floor(float(uint(cbSceneParam._m0[85u].x * _745) / _2773)));
        float _2794 = (log2(_1883 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2795 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        uint _2798 = uint(isnan(14.0) ? _2795 : (isnan(_2795) ? 14.0 : min(_2795, 14.0)));
        uvec4 _2803 = texelFetch(g_lightClusterGridBuffer, int(((_2798 << 2u) + (_2784 << 6u)) >> 2u));
        uint _2804 = _2803.x;
        uint _2805 = _2772.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2805 >> 4u) & 15u)) + 4294967295u) & _2804) == 0u) || ((_2805 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            float _3034 = 0.0;
            uint _3035 = 0u;
            uint _3044;
            bool _3045;
            for (;;)
            {
                _3044 = texelFetch(g_lightClassification, int((((_2798 << 5u) + (_2784 << 9u)) + (_3035 << 2u)) >> 2u)).x;
                _3045 = _3044 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3045)
                {
                    frontier_phi_66_pred = _3034;
                    frontier_phi_66_pred_1 = _3033;
                    frontier_phi_66_pred_2 = _3032;
                    frontier_phi_66_pred_3 = _3031;
                    frontier_phi_66_pred_4 = _3030;
                    frontier_phi_66_pred_5 = _3029;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3034;
                    _3159 = _3044;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    float _3090;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3035 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _1881;
                        float _3220 = _3179.y - _1882;
                        float _3221 = _3179.z - _1883;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_767, _770, _773), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4639 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _1881;
                        float _3255 = (-0.0) - _1882;
                        float _3256 = (-0.0) - _1883;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3270 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3271 = 1.0 - _827;
                        float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                        float _3279 = _3278 * _3278;
                        float _3280 = _3279 * _3279;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3283 = _3263 + _3228;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3291 = dot(vec3(_767, _770, _773), vec3(_3261, _3262, _3263));
                        float _4655 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3295 = dot(vec3(_767, _770, _773), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                        float _4666 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3298 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                        float _3303 = _3239 * _3279;
                        float _3304 = _3303 * _3303;
                        float _3307 = ((1.0 - _3304) * _3229) + _3304;
                        float _4677 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3308 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3309 = 1.0 - _3279;
                        float _3319 = (0.5 / (((_3308 * ((_3294 * _3309) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3279) * _3294))) * _3308;
                        float _4688 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                        float _3330 = (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3302 * _3302) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3088 = (_3250 * _3198.x) + _3156;
                        _3089 = (_3250 * _3198.y) + _3157;
                        _3090 = (_3250 * _3198.z) + _3158;
                        _3085 = (_3330 * _3215.x) + _3153;
                        _3086 = (_3330 * _3215.y) + _3154;
                        _3087 = (_3330 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3090;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_66_pred = _3090;
                    frontier_phi_66_pred_1 = _3089;
                    frontier_phi_66_pred_2 = _3088;
                    frontier_phi_66_pred_3 = _3087;
                    frontier_phi_66_pred_4 = _3086;
                    frontier_phi_66_pred_5 = _3085;
                }
                _2895 = frontier_phi_66_pred;
                _2893 = frontier_phi_66_pred_1;
                _2891 = frontier_phi_66_pred_2;
                _2889 = frontier_phi_66_pred_3;
                _2887 = frontier_phi_66_pred_4;
                _2885 = frontier_phi_66_pred_5;
                uint _3036 = _3035 + 1u;
                if (_3036 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3029 = _2885;
                    _3030 = _2887;
                    _3031 = _2889;
                    _3032 = _2891;
                    _3033 = _2893;
                    _3034 = _2895;
                    _3035 = _3036;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        if (((4294967295u << _2901) & _2804) == 0u)
        {
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
            _3003 = _2890;
            _3005 = _2892;
            _3007 = _2894;
        }
        else
        {
            float _3022 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
            float _3023 = _3022 * _1881;
            float _3024 = _3022 * _1882;
            float _3025 = _3022 * _1883;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3136 = _2884;
                float _3137 = _2886;
                float _3138 = _2888;
                float _3139 = _2890;
                float _3140 = _2892;
                float _3141 = _2894;
                uint _3142 = _2901;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2798 << 5u) + (_2784 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3152)
                    {
                        frontier_phi_72_pred = _3141;
                        frontier_phi_72_pred_1 = _3140;
                        frontier_phi_72_pred_2 = _3139;
                        frontier_phi_72_pred_3 = _3138;
                        frontier_phi_72_pred_4 = _3137;
                        frontier_phi_72_pred_5 = _3136;
                    }
                    else
                    {
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        float _3353 = _3141;
                        uint _3354 = _3151;
                        uint _3355;
                        vec4 _3380;
                        float _3381;
                        vec4 _3396;
                        vec3 _3408;
                        vec4 _3423;
                        vec4 _3438;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3365 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3354));
                            _3355 = (_3354 + 4294967295u) & _3354;
                            uint _3367 = _3365 * 40u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3381 = _3380.w;
                            uint _3383 = (_3365 * 40u) + 4u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3365 * 40u) + 8u;
                            _3408 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x));
                            uint _3410 = (_3365 * 40u) + 16u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            uint _3425 = (_3365 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3365 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3365 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_1883, _3472.z, fma(_1882, _3472.y, _3472.x * _1881)) + _3472.w;
                            _3485 = !((fma(_1883, _3453.z, fma(_1882, _3453.y, _3453.x * _1881)) + _3453.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3380.x - _1881;
                                float _3513 = _3380.y - _1882;
                                float _3514 = _3380.z - _1883;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3381 * _3381));
                                float _4699 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3530 = sqrt(_3515) * _3396.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_767, _770, _773))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_1883, _3423.z, fma(_1882, _3423.y, _3423.x * _1881)) + _3423.w) / _3484;
                                float _3544 = (fma(_1883, _3438.z, fma(_1882, _3438.y, _3438.x * _1881)) + _3438.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4715 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _827;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _3023;
                                float _3574 = _3520 - _3024;
                                float _3575 = _3521 - _3025;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_767, _770, _773), vec3((-0.0) - _3023, (-0.0) - _3024, (-0.0) - _3025));
                                float _4726 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3587 = dot(vec3(_767, _770, _773), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4737 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_767, _770, _773), vec3(_3519, _3520, _3521))) + _3596;
                                float _4748 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4759 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3550 * _3396.y;
                                frontier_phi_78_pred_1 = _3550 * _3396.x;
                                frontier_phi_78_pred_2 = _3624 * _3408.z;
                                frontier_phi_78_pred_3 = _3624 * _3408.y;
                                frontier_phi_78_pred_4 = _3624 * _3408.x;
                                frontier_phi_78_pred_5 = _3550 * _3396.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3632 = frontier_phi_78_pred;
                            _3631 = frontier_phi_78_pred_1;
                            _3630 = frontier_phi_78_pred_2;
                            _3629 = frontier_phi_78_pred_3;
                            _3628 = frontier_phi_78_pred_4;
                            _3633 = frontier_phi_78_pred_5;
                            _3338 = _3631 + _3351;
                            _3339 = _3632 + _3352;
                            _3340 = _3633 + _3353;
                            _3335 = _3628 + _3348;
                            _3336 = _3629 + _3349;
                            _3337 = _3630 + _3350;
                            if (_3355 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3355;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3340;
                        frontier_phi_72_pred_1 = _3339;
                        frontier_phi_72_pred_2 = _3338;
                        frontier_phi_72_pred_3 = _3337;
                        frontier_phi_72_pred_4 = _3336;
                        frontier_phi_72_pred_5 = _3335;
                    }
                    _3008 = frontier_phi_72_pred;
                    _3006 = frontier_phi_72_pred_1;
                    _3004 = frontier_phi_72_pred_2;
                    _3002 = frontier_phi_72_pred_3;
                    _3000 = frontier_phi_72_pred_4;
                    _2998 = frontier_phi_72_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2998;
                        _3137 = _3000;
                        _3138 = _3002;
                        _3139 = _3004;
                        _3140 = _3006;
                        _3141 = _3008;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3008;
                frontier_phi_60_61_ladder_1 = _3006;
                frontier_phi_60_61_ladder_2 = _3002;
                frontier_phi_60_61_ladder_3 = _3000;
                frontier_phi_60_61_ladder_4 = _2998;
                frontier_phi_60_61_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_60_61_ladder = _2894;
                frontier_phi_60_61_ladder_1 = _2892;
                frontier_phi_60_61_ladder_2 = _2888;
                frontier_phi_60_61_ladder_3 = _2886;
                frontier_phi_60_61_ladder_4 = _2884;
                frontier_phi_60_61_ladder_5 = _2890;
            }
            _2997 = frontier_phi_60_61_ladder_4;
            _2999 = frontier_phi_60_61_ladder_3;
            _3001 = frontier_phi_60_61_ladder_2;
            _3003 = frontier_phi_60_61_ladder_5;
            _3005 = frontier_phi_60_61_ladder_1;
            _3007 = frontier_phi_60_61_ladder;
        }
        float _3012 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2817 = (_3012 * _3003) + _2348;
        _2819 = (_3012 * _3005) + _2350;
        _2821 = (_3012 * _3007) + _2352;
        _2823 = ((_2997 * 0.039999999105930328369140625) * _3012) + _2671;
        _2825 = ((_2999 * 0.039999999105930328369140625) * _3012) + _2673;
        _2827 = ((_3001 * 0.039999999105930328369140625) * _3012) + _2675;
    }
    else
    {
        _2817 = _2348;
        _2819 = _2350;
        _2821 = _2352;
        _2823 = _2671;
        _2825 = _2673;
        _2827 = _2675;
    }
    float _4775 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4786 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4797 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    uint _2847 = _269 + 6u;
    float _2855 = _745 / cbSceneParam._m0[86u].x;
    float _2856 = _746 / cbSceneParam._m0[86u].y;
    vec4 _2870 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, (log2((isnan(cbSceneParam._m0[77u].w) ? _680 : (isnan(_680) ? cbSceneParam._m0[77u].w : min(_680, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2872 = _2870.x;
    float _2873 = _2870.y;
    float _2874 = _2870.z;
    float _2875 = _2870.w;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_680 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_680) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _680 : min(cbSceneParam._m0[80u].w, _680));
        float _2910 = _2909 / _680;
        float _2921 = _2910 * _730;
        float _2922 = _731 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2925 = _2910 * _732;
        float _2927 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2928 = _2927 + cbSceneParam._m0[79u].w;
        float _2929 = cbSceneParam._m0[79u].w - _2922;
        float _2935 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2925 * _2925));
        float _2938 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2935;
        float _2943 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2945 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3098;
        if (abs((_2923 - _2927) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3098 = ((((_2928 > 0.0) ? exp2(_2943 * _2928) : (2.0 - exp2(_2945 * _2928))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2938;
        }
        else
        {
            float _3058 = 1.0 / cbSceneParam._m0[80u].x;
            float _3059 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : max(_2928, _2929));
            float _3060 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : min(_2928, _2929));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            float _3070 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : min(_3060, 0.0));
            _3098 = ((abs(_2935 / _2923) * cbSceneParam._m0[80u].y) * ((((_3069 - _3070) * 2.0) - ((exp2(_2943 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0)))) - exp2(_2943 * (isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0))))) * _3058)) - ((exp2(_2945 * _3069) - exp2(_2945 * _3070)) * _3058))) + (_2938 * cbSceneParam._m0[80u].z);
        }
        vec4 _3100 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, 1.0), 0.0);
        float _3109 = exp2((_3098 * (-1.44269502162933349609375)) * (1.0 - _3100.w));
        float _3110 = log2(_3109);
        float _3126 = log2(_2875);
        _2947 = (exp2(_3126 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].x)) * _3100.x) / cbSceneParam._m0[78u].x)) + _2872;
        _2949 = (exp2(_3126 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].y)) * _3100.y) / cbSceneParam._m0[78u].y)) + _2873;
        _2951 = (exp2(_3126 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3110 * cbSceneParam._m0[78u].z)) * _3100.z) / cbSceneParam._m0[78u].z)) + _2874;
        _2953 = _3109 * _2875;
    }
    else
    {
        _2947 = _2872;
        _2949 = _2873;
        _2951 = _2874;
        _2953 = _2875;
    }
    float _2965 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2966 = _2965 == 3.0;
    float _2967 = log2(_2953);
    float _2974 = exp2(_2967 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2817 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _811))) + ((_2823 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2975 = exp2(_2967 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2819 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _811))) + ((_2825 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2976 = exp2(_2967 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2821 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _811))) + ((_2827 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1616)) * cbPerFrame._m0[3u].x));
    float _2985 = (_2965 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2985 * (_2966 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2947)));
    SV_Target.y = _2985 * (_2966 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2949)));
    SV_Target.z = _2985 * (_2966 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2951)));
    SV_Target.w = cbInstanceData._m0[_2847].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2847].w;
}


