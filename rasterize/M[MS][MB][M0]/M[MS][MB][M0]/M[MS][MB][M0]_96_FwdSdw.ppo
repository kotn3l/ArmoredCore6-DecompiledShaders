#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1095;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3685 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _423 = ((_393.z - _414) * _366) + _414;
    float _426 = ((((_393.x - _412) * _366) + _412) * 2.0) + (-1.0);
    float _428 = ((((_393.y - _413) * _366) + _413) * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3696 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))));
    float _437 = fma(_434, _218, fma(_428, _225, _426 * _211));
    float _440 = fma(_434, _219, fma(_428, _226, _426 * _212));
    float _443 = fma(_434, _220, fma(_428, _227, _426 * _213));
    float _447 = inversesqrt(dot(vec3(_437, _440, _443), vec3(_437, _440, _443)));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _493 = _491.x;
    float _494 = 1.0 - _493;
    float _500 = (cbMtdParam._m0[19u].x + dot(vec4(_447 * _437, _447 * _440, _447 * _443, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_493 - _494) * cbMtdParam._m0[24u].z) + _494) * cbMtdParam._m0[21u].z);
    float _3707 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _508 = (_501 * (cbMtdParam._m0[17u].x - _373)) + _373;
    float _509 = (_501 * (cbMtdParam._m0[17u].y - _374)) + _374;
    float _510 = (_501 * (cbMtdParam._m0[17u].z - _375)) + _375;
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _530 = (_523.x * 2.0) + (-1.0);
    float _531 = (_523.y * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3718 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _540 = ((_523.z - _423) * _501) + _423;
    float _550 = ((sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) - _434) * _501) + _434;
    float _553 = (((_530 - _426) * _501) + _426) + (cbMtdParam._m0[21u].x * _426);
    float _554 = (((_531 - _428) * _501) + _428) + (cbMtdParam._m0[21u].x * _428);
    float _559 = cbMtdParam._m0[22u].x + _463.w;
    float _562 = fma(_550, _218, fma(_554, _225, _553 * _211));
    float _565 = fma(_550, _219, fma(_554, _226, _553 * _212));
    float _568 = fma(_550, _220, fma(_554, _227, _553 * _213));
    float _572 = inversesqrt(dot(vec3(_562, _565, _568), vec3(_562, _565, _568)));
    float _573 = _572 * _562;
    float _574 = _572 * _565;
    float _575 = _572 * _568;
    float _3729 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _576 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3751 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3762 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3773 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _594 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _646 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _636);
    float _647 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _636);
    float _648 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _636);
    float _652 = inversesqrt(dot(vec3(_646, _647, _648), vec3(_646, _647, _648)));
    float _653 = _646 * _652;
    float _654 = _647 * _652;
    float _655 = _648 * _652;
    float _661 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _662 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _680 = fma(_575, cbSceneParam._m0[5u].z, fma(_574, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _573));
    float _683 = fma(_575, cbSceneParam._m0[6u].z, fma(_574, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _573));
    float _686 = fma(_575, cbSceneParam._m0[7u].z, fma(_574, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _573));
    uint _700 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3784 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _3806 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _661, cbSceneParam._m0[86u].y * _662));
    float _724 = ((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * TEXCOORD_5.w) * _720.x;
    float _725 = dot(vec3(_573, _574, _575), vec3(_653, _654, _655));
    float _728 = _725 * 2.0;
    float _732 = (_728 * _573) - _653;
    float _733 = (_728 * _574) - _654;
    float _734 = (_728 * _575) - _655;
    float _738 = abs(dot(vec3(_653, _654, _655), vec3(_573, _574, _575)));
    float _3817 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _740 = sqrt(_576);
    float _753 = exp2((_740 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_740 * 3.0));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1094;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _819 = fma(_793, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785));
        float _823 = fma(_793, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785));
        float _827 = fma(_793, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785));
        float _852 = _785 + _573;
        float _853 = _789 + _574;
        float _854 = _793 + _575;
        float _864 = fma(_854, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852)) - _819;
        float _865 = fma(_854, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852)) - _823;
        float _866 = fma(_854, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852)) - _827;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_819 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_823 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[34u].z) + ((((((_827 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _922 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_888.x + (-0.5));
        float _924 = _922 * (_888.y + (-0.5));
        float _925 = _922 * (_888.z + (-0.5));
        float _932 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_895.x + (-0.5));
        float _934 = _932 * (_895.y + (-0.5));
        float _935 = _932 * (_895.z + (-0.5));
        float _942 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_902.x + (-0.5));
        float _944 = _942 * (_902.y + (-0.5));
        float _945 = _942 * (_902.z + (-0.5));
        float _952 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_909.x + (-0.5));
        float _954 = _952 * (_909.y + (-0.5));
        float _955 = _952 * (_909.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _976 = (dot(vec3(_573, _574, _575), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _986 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3865 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_988 + 1.0))) + _993) * _956;
        float _1003 = _924 * 0.5;
        float _1004 = _934 * 0.5;
        float _1005 = _944 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_573, _574, _575), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3898 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1030 + 1.0))) + _1035) * _957;
        float _1045 = _925 * 0.5;
        float _1046 = _935 * 0.5;
        float _1047 = _945 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_573, _574, _575), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3931 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1072 + 1.0))) + _1077) * _958;
        _1094 = _925;
        _1096 = _924;
        _1097 = _923;
        _1098 = _935;
        _1099 = _934;
        _1100 = _933;
        _1101 = _945;
        _1102 = _944;
        _1103 = _943;
        _1104 = _958;
        _1105 = _957;
        _1106 = _956;
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
    }
    else
    {
        _1094 = _1095;
        _1096 = _1095;
        _1097 = _1095;
        _1098 = _1095;
        _1099 = _1095;
        _1100 = _1095;
        _1101 = _1095;
        _1102 = _1095;
        _1103 = _1095;
        _1104 = _1095;
        _1105 = _1095;
        _1106 = _1095;
        _1107 = 0.0;
        _1108 = 0.0;
        _1109 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_793, cbModelParam._m0[30u].z, fma(_789, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _785));
        float _1138 = fma(_793, cbModelParam._m0[31u].z, fma(_789, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _785));
        float _1142 = fma(_793, cbModelParam._m0[32u].z, fma(_789, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _785));
        float _1165 = _785 + _573;
        float _1166 = _789 + _574;
        float _1167 = _793 + _575;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_573, _574, _575), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3994 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_573, _574, _575), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4027 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_573, _574, _575), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4060 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _1095;
        _1404 = _1095;
        _1405 = _1095;
        _1406 = _1095;
        _1407 = _1095;
        _1408 = _1095;
        _1409 = _1095;
        _1410 = _1095;
        _1411 = _1095;
        _1412 = _1095;
        _1413 = _1095;
        _1414 = _1095;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1107)) + _1107;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1108)) + _1108;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _732 * 0.5;
    float _1472 = _733 * 0.5;
    float _1473 = _734 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1094, _1098, _1101, _1104));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1097, _1100, _1103, _1106));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _576);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_793, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_793, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_793, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_734, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732));
        float _1602 = fma(_734, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732));
        float _1605 = fma(_734, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1633 = frontier_phi_14_12_ladder;
        }
        float _1803;
        if (_1602 > 0.0)
        {
            _1803 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1803 = frontier_phi_23_19_ladder;
        }
        float _2098;
        if (_1605 > 0.0)
        {
            _2098 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2098 = frontier_phi_35_30_ladder;
        }
        float _2100 = isnan(_1803) ? _1633 : (isnan(_1633) ? _1803 : min(_1633, _1803));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1599) + _1588;
        float _2106 = (_2101 * _1602) + _1592;
        float _2107 = (_2101 * _1605) + _1596;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2108;
        float _2112 = _2108 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 > _2112) || ((_2106 < _2110) || ((_2105 < _2110) || (_2105 > _2112))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2107, cbModelParam._m0[9u].z, fma(_2106, cbModelParam._m0[9u].y, _2105 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2107, cbModelParam._m0[10u].z, fma(_2106, cbModelParam._m0[10u].y, _2105 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2107, cbModelParam._m0[11u].z, fma(_2106, cbModelParam._m0[11u].y, _2105 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_13_35_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_13_35_ladder_2;
        _1623 = frontier_phi_13_35_ladder_1;
        _1625 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_732, _733, _734), _1540);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _576);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_793, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_793, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_793, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_734, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732));
        float _1698 = fma(_734, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732));
        float _1701 = fma(_734, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732));
        float _1808;
        if (_1695 > 0.0)
        {
            _1808 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1808 = frontier_phi_25_21_ladder;
        }
        float _2125;
        if (_1698 > 0.0)
        {
            _2125 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2125 = frontier_phi_37_32_ladder;
        }
        float _2452;
        if (_1701 > 0.0)
        {
            _2452 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2452 = frontier_phi_47_44_ladder;
        }
        float _2454 = isnan(_2125) ? _1808 : (isnan(_1808) ? _2125 : min(_1808, _2125));
        float _2455 = isnan(_2452) ? _2454 : (isnan(_2454) ? _2452 : min(_2454, _2452));
        float _2459 = (_2455 * _1695) + _1684;
        float _2460 = (_2455 * _1698) + _1688;
        float _2461 = (_2455 * _1701) + _1692;
        float _2462 = _2455 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2462;
        float _2465 = _2462 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2461 > _2465) || ((_2461 < _2463) || ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 < _2463) || (_2459 > _2465))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2461, cbModelParam._m0[17u].z, fma(_2460, cbModelParam._m0[17u].y, _2459 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2461, cbModelParam._m0[18u].z, fma(_2460, cbModelParam._m0[18u].y, _2459 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2461, cbModelParam._m0[19u].z, fma(_2460, cbModelParam._m0[19u].y, _2459 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_22_47_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_22_47_ladder_2;
        _1722 = frontier_phi_22_47_ladder_1;
        _1724 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_732, _733, _734), _1630);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _753) * ((_740 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_753 * _740)) * _724;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1621)) + _1621);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1623)) + _1623);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1625)) + _1625);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1794 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1795 = _1782 / _1794;
    float _1796 = _1786 / _1794;
    float _1797 = _1790 / _1794;
    float _1944;
    float _1945;
    float _1946;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1824 = ((uint(_1797 > cbSceneParam._m0[59u].y) + uint(_1797 > cbSceneParam._m0[59u].x)) + uint(_1797 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1825 = _1824 + 43u;
        uint _1833 = _1824 + 44u;
        uint _1841 = _1824 + 45u;
        uint _1849 = _1824 + 46u;
        float _1860 = fma(_1794, cbSceneParam._m0[_1825].w, fma(_1790, cbSceneParam._m0[_1825].z, fma(_1786, cbSceneParam._m0[_1825].y, _1782 * cbSceneParam._m0[_1825].x)));
        float _1864 = fma(_1794, cbSceneParam._m0[_1833].w, fma(_1790, cbSceneParam._m0[_1833].z, fma(_1786, cbSceneParam._m0[_1833].y, _1782 * cbSceneParam._m0[_1833].x)));
        float _1872 = fma(_1794, cbSceneParam._m0[_1849].w, fma(_1790, cbSceneParam._m0[_1849].z, fma(_1786, cbSceneParam._m0[_1849].y, _1782 * cbSceneParam._m0[_1849].x)));
        float _1877 = cbSceneParam._m0[33u].z * _1872;
        float _1879 = cbSceneParam._m0[33u].w * _1872;
        float _1882 = fma(_1794, cbSceneParam._m0[_1841].w, fma(_1790, cbSceneParam._m0[_1841].z, fma(_1786, cbSceneParam._m0[_1841].y, _1782 * cbSceneParam._m0[_1841].x))) / _1872;
        float _1930 = (cbSceneParam._m0[33u].x - sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797))) * cbSceneParam._m0[33u].y;
        float _4186 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1937 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 + _1860) / _1872, (_1879 + _1864) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1879 + _1860) / _1872, (_1864 - _1877) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 - _1877) / _1872, (_1864 - _1879) / _1872), _1882), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 - _1879) / _1872, (_1877 + _1864) / _1872), _1882), 0.0)).x), vec4(0.25)));
        _1944 = 1.0 - (_1937 * cbSceneParam._m0[34u].x);
        _1945 = 1.0 - (_1937 * cbSceneParam._m0[34u].y);
        _1946 = 1.0 - (_1937 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1944 = 1.0;
        _1945 = 1.0;
        _1946 = 1.0;
    }
    float _2010;
    float _2012;
    float _2014;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1998 = fma(_1794, cbSceneParam._m0[63u].w, fma(_1790, cbSceneParam._m0[63u].z, fma(_1786, cbSceneParam._m0[63u].y, _1782 * cbSceneParam._m0[63u].x)));
        float _1999 = fma(_1794, cbSceneParam._m0[60u].w, fma(_1790, cbSceneParam._m0[60u].z, fma(_1786, cbSceneParam._m0[60u].y, _1782 * cbSceneParam._m0[60u].x))) / _1998;
        float _2000 = fma(_1794, cbSceneParam._m0[61u].w, fma(_1790, cbSceneParam._m0[61u].z, fma(_1786, cbSceneParam._m0[61u].y, _1782 * cbSceneParam._m0[61u].x))) / _1998;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1999 >= cbSceneParam._m0[64u].x) && (_2000 >= cbSceneParam._m0[64u].y)) && (_1999 <= cbSceneParam._m0[64u].z)) && (_2000 <= cbSceneParam._m0[64u].w))
        {
            float _2138 = fma(_1794, cbSceneParam._m0[62u].w, fma(_1790, cbSceneParam._m0[62u].z, fma(_1786, cbSceneParam._m0[62u].y, _1782 * cbSceneParam._m0[62u].x))) / _1998;
            float _2142 = isnan(cbSceneParam._m0[41u].w) ? _2138 : (isnan(_2138) ? cbSceneParam._m0[41u].w : max(_2138, cbSceneParam._m0[41u].w));
            float _2185 = (cbSceneParam._m0[33u].x - sqrt(((_1796 * _1796) + (_1795 * _1795)) + (_1797 * _1797))) * cbSceneParam._m0[33u].y;
            float _4202 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
            float _2192 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1999, cbSceneParam._m0[33u].w + _2000), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1999, _2000 - cbSceneParam._m0[33u].z), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1999 - cbSceneParam._m0[33u].z, _2000 - cbSceneParam._m0[33u].w), _2142), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1999 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2000), _2142), 0.0)).x), vec4(0.25)));
            float _2196 = 1.0 - (_2192 * cbSceneParam._m0[34u].x);
            float _2197 = 1.0 - (_2192 * cbSceneParam._m0[34u].y);
            float _2198 = 1.0 - (_2192 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2198) ? _1946 : (isnan(_1946) ? _2198 : min(_1946, _2198));
            frontier_phi_34_33_ladder_1 = isnan(_2197) ? _1945 : (isnan(_1945) ? _2197 : min(_1945, _2197));
            frontier_phi_34_33_ladder_2 = isnan(_2196) ? _1944 : (isnan(_1944) ? _2196 : min(_1944, _2196));
        }
        else
        {
            frontier_phi_34_33_ladder = _1946;
            frontier_phi_34_33_ladder_1 = _1945;
            frontier_phi_34_33_ladder_2 = _1944;
        }
        _2010 = frontier_phi_34_33_ladder_2;
        _2012 = frontier_phi_34_33_ladder_1;
        _2014 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2010 = _1944;
        _2012 = _1945;
        _2014 = _1946;
    }
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _724 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2057 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2061 = _2021 | 1u;
    float _2072 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_573, _574, _575));
    float _2075 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_573, _574, _575));
    float _4238 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _4249 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2080 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * 0.3183098733425140380859375;
    float _2082 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.3183098733425140380859375;
    float _2089 = ((cbLight._m0[_2038].x * _2044) * _2082) + (((cbLight._m0[_2048].x * _2010) * _2057) * _2080);
    float _2090 = ((_2044 * cbLight._m0[_2038].y) * _2082) + (((cbLight._m0[_2048].y * _2012) * _2057) * _2080);
    float _2091 = ((_2044 * cbLight._m0[_2038].z) * _2082) + (((cbLight._m0[_2048].z * _2014) * _2057) * _2080);
    uvec4 _2095 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2097 = _2095.x == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2097)
    {
        _2199 = _2089;
        _2201 = _2090;
        _2203 = _2091;
    }
    else
    {
        uint _2207 = _2021 + 6u;
        float _2223 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4260 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2226 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2199 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2089;
        _2201 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2090;
        _2203 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2091;
    }
    bool _2206 = _2095.y == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2206)
    {
        _2261 = _2199;
        _2263 = _2201;
        _2265 = _2203;
    }
    else
    {
        uint _2423 = _2021 + 7u;
        float _2439 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_573, _574, _575)) * 0.5) + 0.5;
        float _2440 = _2439 * _2439;
        float _4276 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2441 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2442 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2261 = (((cbLight._m0[_2423].x * 0.3183098733425140380859375) * _2441) * _2442) + _2199;
        _2263 = (((cbLight._m0[_2423].y * 0.3183098733425140380859375) * _2441) * _2442) + _2201;
        _2265 = (((cbLight._m0[_2423].z * 0.3183098733425140380859375) * _2441) * _2442) + _2203;
    }
    uint _2268 = _2021 + 8u;
    float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _576) * 0.949999988079071044921875);
    float _2282 = _2281 * _2281;
    float _2283 = cbLight._m0[_2021].x + _653;
    float _2284 = cbLight._m0[_2021].y + _654;
    float _2285 = cbLight._m0[_2021].z + _655;
    float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
    float _2290 = _2289 * _2283;
    float _2291 = _2289 * _2284;
    float _2292 = _2289 * _2285;
    float _2293 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2021].xyz));
    float _4292 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _4303 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2297 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2298 = dot(vec3(_573, _574, _575), vec3(_2290, _2291, _2292));
    float _4314 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2290, _2291, _2292));
    float _4325 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2282 * _2282;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2321 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2322 = 1.0 - _2282;
    float _2333 = (0.5 / (((_2297 * ((_2296 * _2322) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2322) + _2282) * _2296))) * _2296;
    float _4336 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    uint _2349 = _2021 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2061].w)) * _576) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2061].x + _653;
    float _2363 = cbLight._m0[_2061].y + _654;
    float _2364 = cbLight._m0[_2061].z + _655;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2061].xyz));
    float _4347 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _2376 = dot(vec3(_573, _574, _575), vec3(_2369, _2370, _2371));
    float _4358 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2061].xyz), vec3(_2369, _2370, _2371));
    float _4369 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2398 = 1.0 - _2361;
    float _2408 = (0.5 / (((_2297 * ((_2375 * _2398) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2398) + _2361) * _2375))) * _2375;
    float _4380 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2410 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2420 = (((_2397 * cbLight._m0[_2349].x) * _2410) * _2044) + ((((cbLight._m0[_2268].x * _2010) * _2321) * _2335) * _2057);
    float _2421 = (((_2397 * cbLight._m0[_2349].y) * _2410) * _2044) + ((((cbLight._m0[_2268].y * _2012) * _2321) * _2335) * _2057);
    float _2422 = (((_2397 * cbLight._m0[_2349].z) * _2410) * _2044) + ((((cbLight._m0[_2268].z * _2014) * _2321) * _2335) * _2057);
    float _2478;
    float _2480;
    float _2482;
    if (_2097)
    {
        _2478 = _2420;
        _2480 = _2421;
        _2482 = _2422;
    }
    else
    {
        uint _2484 = _2021 + 2u;
        uint _2488 = _2021 + 10u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _576) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _653;
        float _2505 = cbLight._m0[_2484].y + _654;
        float _2506 = cbLight._m0[_2484].z + _655;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2484].xyz));
        float _4391 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2518 = dot(vec3(_573, _574, _575), vec3(_2511, _2512, _2513));
        float _4402 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4413 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2539 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2540 = 1.0 - _2503;
        float _2550 = (0.5 / (((_2297 * ((_2517 * _2540) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2540) + _2503) * _2517))) * _2517;
        float _4424 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2478 = (((_2539 * cbLight._m0[_2488].x) * _2552) * _2553) + _2420;
        _2480 = (((_2539 * cbLight._m0[_2488].y) * _2552) * _2553) + _2421;
        _2482 = (((_2539 * cbLight._m0[_2488].z) * _2552) * _2553) + _2422;
    }
    float _2584;
    float _2586;
    float _2588;
    if (_2206)
    {
        _2584 = _2478;
        _2586 = _2480;
        _2588 = _2482;
    }
    else
    {
        uint _2595 = _2021 + 3u;
        uint _2599 = _2021 + 11u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _576) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _653;
        float _2616 = cbLight._m0[_2595].y + _654;
        float _2617 = cbLight._m0[_2595].z + _655;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_573, _574, _575), vec3(cbLight._m0[_2595].xyz));
        float _4440 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _2629 = dot(vec3(_573, _574, _575), vec3(_2622, _2623, _2624));
        float _4451 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4462 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2650 = (exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2651 = 1.0 - _2614;
        float _2661 = (0.5 / (((_2297 * ((_2628 * _2651) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2297 * _2651) + _2614) * _2628))) * _2628;
        float _4473 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2663 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2664 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2584 = (((_2650 * cbLight._m0[_2599].x) * _2663) * _2664) + _2478;
        _2586 = (((_2650 * cbLight._m0[_2599].y) * _2663) * _2664) + _2480;
        _2588 = (((_2650 * cbLight._m0[_2599].z) * _2663) * _2664) + _2482;
    }
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    float _2740;
    if (_2019.y == 0u)
    {
        uvec4 _2685 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2686 = _2685.x;
        uint _2697 = uint((float(_2685.y) * floor(float(uint(cbSceneParam._m0[85u].y * _662) / _2686))) + floor(float(uint(cbSceneParam._m0[85u].x * _661) / _2686)));
        float _2707 = (log2(_1797 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2708 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        uint _2711 = uint(isnan(14.0) ? _2708 : (isnan(_2708) ? 14.0 : min(_2708, 14.0)));
        uvec4 _2716 = texelFetch(g_lightClusterGridBuffer, int(((_2711 << 2u) + (_2697 << 6u)) >> 2u));
        uint _2717 = _2716.x;
        uint _2718 = _2685.z;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((((1u << ((_2718 >> 4u) & 15u)) + 4294967295u) & _2717) == 0u) || ((_2718 & 240u) == 0u))
        {
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
        }
        else
        {
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            uint _2948 = 0u;
            uint _2957;
            bool _2958;
            for (;;)
            {
                _2957 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_2948 << 2u)) >> 2u)).x;
                _2958 = _2957 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2958)
                {
                    frontier_phi_66_pred = _2947;
                    frontier_phi_66_pred_1 = _2946;
                    frontier_phi_66_pred_2 = _2945;
                    frontier_phi_66_pred_3 = _2944;
                    frontier_phi_66_pred_4 = _2943;
                    frontier_phi_66_pred_5 = _2942;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2946;
                    _3071 = _2947;
                    _3072 = _2957;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2948 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _1795;
                        float _3133 = _3092.y - _1796;
                        float _3134 = _3092.z - _1797;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_680, _683, _686), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4499 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _1795;
                        float _3168 = (-0.0) - _1796;
                        float _3169 = (-0.0) - _1797;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3183 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _740;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3174 + _3139;
                        float _3195 = _3175 + _3140;
                        float _3196 = _3176 + _3141;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_680, _683, _686), vec3(_3174, _3175, _3176));
                        float _4515 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                        float _3208 = dot(vec3(_680, _683, _686), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4526 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3152 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3142) + _3217;
                        float _4537 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4548 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0)))) / ((_3215 * _3215) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _3001 = (_3163 * _3111.x) + _3069;
                        _3002 = (_3163 * _3111.y) + _3070;
                        _3003 = (_3163 * _3111.z) + _3071;
                        _2998 = (_3243 * _3128.x) + _3066;
                        _2999 = (_3243 * _3128.y) + _3067;
                        _3000 = (_3243 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3002;
                            _3071 = _3003;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_66_pred = _3003;
                    frontier_phi_66_pred_1 = _3002;
                    frontier_phi_66_pred_2 = _3001;
                    frontier_phi_66_pred_3 = _3000;
                    frontier_phi_66_pred_4 = _2999;
                    frontier_phi_66_pred_5 = _2998;
                }
                _2808 = frontier_phi_66_pred;
                _2806 = frontier_phi_66_pred_1;
                _2804 = frontier_phi_66_pred_2;
                _2802 = frontier_phi_66_pred_3;
                _2800 = frontier_phi_66_pred_4;
                _2798 = frontier_phi_66_pred_5;
                uint _2949 = _2948 + 1u;
                if (_2949 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2942 = _2798;
                    _2943 = _2800;
                    _2944 = _2802;
                    _2945 = _2804;
                    _2946 = _2806;
                    _2947 = _2808;
                    _2948 = _2949;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
        }
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.z;
        uint _2814 = (_2812 >> 8u) & 15u;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        if (((4294967295u << _2814) & _2717) == 0u)
        {
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
            _2920 = _2807;
        }
        else
        {
            float _2935 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
            float _2936 = _2935 * _1795;
            float _2937 = _2935 * _1796;
            float _2938 = _2935 * _1797;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2814 < ((_2812 >> 12u) & 15u))
            {
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _2921;
                float _3049 = _2797;
                float _3050 = _2799;
                float _3051 = _2801;
                float _3052 = _2803;
                float _3053 = _2805;
                float _3054 = _2807;
                uint _3055 = _2814;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2711 << 5u) + (_2697 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3065)
                    {
                        frontier_phi_72_pred = _3054;
                        frontier_phi_72_pred_1 = _3053;
                        frontier_phi_72_pred_2 = _3052;
                        frontier_phi_72_pred_3 = _3051;
                        frontier_phi_72_pred_4 = _3050;
                        frontier_phi_72_pred_5 = _3049;
                    }
                    else
                    {
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3261 = _3049;
                        float _3262 = _3050;
                        float _3263 = _3051;
                        float _3264 = _3052;
                        float _3265 = _3053;
                        float _3266 = _3054;
                        uint _3267 = _3064;
                        uint _3268;
                        vec4 _3293;
                        float _3294;
                        vec4 _3309;
                        vec3 _3321;
                        vec4 _3336;
                        vec4 _3352;
                        float _3398;
                        bool _3399;
                        for (;;)
                        {
                            uint _3278 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3267));
                            _3268 = (_3267 + 4294967295u) & _3267;
                            uint _3280 = _3278 * 40u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            _3294 = _3293.w;
                            uint _3296 = (_3278 * 40u) + 4u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3278 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3278 * 40u) + 16u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3339 = (_3278 * 40u) + 20u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3278 * 40u) + 24u;
                            vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3373 = (_3278 * 40u) + 28u;
                            vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            _3398 = fma(_1797, _3386.z, fma(_1796, _3386.y, _3386.x * _1795)) + _3386.w;
                            _3399 = !((fma(_1797, _3367.z, fma(_1796, _3367.y, _3367.x * _1795)) + _3367.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3399)
                            {
                                float _3426 = _3293.x - _1795;
                                float _3427 = _3293.y - _1796;
                                float _3428 = _3293.z - _1797;
                                float _3429 = dot(vec3(_3426, _3427, _3428), vec3(_3426, _3427, _3428));
                                float _3432 = inversesqrt(_3429);
                                float _3433 = _3432 * _3426;
                                float _3434 = _3432 * _3427;
                                float _3435 = _3432 * _3428;
                                float _3439 = 1.0 - (_3429 / (_3294 * _3294));
                                float _4559 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3444 = sqrt(_3429) * _3309.w;
                                float _3446 = 1.39999997615814208984375 / (_3444 + 1.39999997615814208984375);
                                float _3447 = _3446 * _3446;
                                float _3450 = ((1.0 - _3447) * dot(vec3(_3433, _3434, _3435), vec3(_680, _683, _686))) + _3447;
                                float _3453 = _3444 * _3444;
                                float _3457 = (fma(_1797, _3336.z, fma(_1796, _3336.y, _3336.x * _1795)) + _3336.w) / _3398;
                                float _3458 = (fma(_1797, _3352.z, fma(_1796, _3352.y, _3352.x * _1795)) + _3352.w) / _3398;
                                float _3462 = 1.0 - dot(vec2(_3457, _3458), vec2(_3457, _3458));
                                float _4575 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3463 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3464 = _3463 * (((isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0))) * _3440) / ((_3453 * 0.699999988079071044921875) + 1.0));
                                float _3476 = exp2(log2(1.0 / ((_3453 * 3.5) + 5.0)) * 0.25);
                                float _3477 = 1.0 - _740;
                                float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                                float _3485 = _3484 * _3484;
                                float _3486 = _3485 * _3485;
                                float _3487 = _3433 - _2936;
                                float _3488 = _3434 - _2937;
                                float _3489 = _3435 - _2938;
                                float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                                float _3497 = dot(vec3(_680, _683, _686), vec3((-0.0) - _2936, (-0.0) - _2937, (-0.0) - _2938));
                                float _4586 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3500 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3501 = dot(vec3(_680, _683, _686), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                                float _4597 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3504 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                                float _3509 = _3446 * _3485;
                                float _3510 = _3509 * _3509;
                                float _3516 = ((1.0 - _3510) * dot(vec3(_680, _683, _686), vec3(_3433, _3434, _3435))) + _3510;
                                float _4608 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3518 = 1.0 - _3485;
                                float _3528 = (0.5 / (((_3517 * ((_3500 * _3518) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3517 * _3518) + _3485) * _3500))) * _3517;
                                float _4619 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3538 = (_3463 * _3440) * (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) / ((_3508 * _3508) * ((_3453 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3464 * _3309.y;
                                frontier_phi_78_pred_1 = _3464 * _3309.x;
                                frontier_phi_78_pred_2 = _3538 * _3321.z;
                                frontier_phi_78_pred_3 = _3538 * _3321.y;
                                frontier_phi_78_pred_4 = _3538 * _3321.x;
                                frontier_phi_78_pred_5 = _3464 * _3309.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3546 = frontier_phi_78_pred;
                            _3545 = frontier_phi_78_pred_1;
                            _3544 = frontier_phi_78_pred_2;
                            _3543 = frontier_phi_78_pred_3;
                            _3542 = frontier_phi_78_pred_4;
                            _3547 = frontier_phi_78_pred_5;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3253 = _3547 + _3266;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            _3250 = _3544 + _3263;
                            if (_3268 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3268;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3253;
                        frontier_phi_72_pred_1 = _3252;
                        frontier_phi_72_pred_2 = _3251;
                        frontier_phi_72_pred_3 = _3250;
                        frontier_phi_72_pred_4 = _3249;
                        frontier_phi_72_pred_5 = _3248;
                    }
                    _2921 = frontier_phi_72_pred;
                    _2919 = frontier_phi_72_pred_1;
                    _2917 = frontier_phi_72_pred_2;
                    _2915 = frontier_phi_72_pred_3;
                    _2913 = frontier_phi_72_pred_4;
                    _2911 = frontier_phi_72_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2911;
                        _3050 = _2913;
                        _3051 = _2915;
                        _3052 = _2917;
                        _3053 = _2919;
                        _3054 = _2921;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2921;
                frontier_phi_60_61_ladder_1 = _2919;
                frontier_phi_60_61_ladder_2 = _2915;
                frontier_phi_60_61_ladder_3 = _2913;
                frontier_phi_60_61_ladder_4 = _2911;
                frontier_phi_60_61_ladder_5 = _2917;
            }
            else
            {
                frontier_phi_60_61_ladder = _2807;
                frontier_phi_60_61_ladder_1 = _2805;
                frontier_phi_60_61_ladder_2 = _2801;
                frontier_phi_60_61_ladder_3 = _2799;
                frontier_phi_60_61_ladder_4 = _2797;
                frontier_phi_60_61_ladder_5 = _2803;
            }
            _2910 = frontier_phi_60_61_ladder_4;
            _2912 = frontier_phi_60_61_ladder_3;
            _2914 = frontier_phi_60_61_ladder_2;
            _2916 = frontier_phi_60_61_ladder_5;
            _2918 = frontier_phi_60_61_ladder_1;
            _2920 = frontier_phi_60_61_ladder;
        }
        float _2925 = isnan(1.0) ? _724 : (isnan(_724) ? 1.0 : min(_724, 1.0));
        _2730 = (_2925 * _2916) + _2261;
        _2732 = (_2925 * _2918) + _2263;
        _2734 = (_2925 * _2920) + _2265;
        _2736 = ((_2910 * 0.039999999105930328369140625) * _2925) + _2584;
        _2738 = ((_2912 * 0.039999999105930328369140625) * _2925) + _2586;
        _2740 = ((_2914 * 0.039999999105930328369140625) * _2925) + _2588;
    }
    else
    {
        _2730 = _2261;
        _2732 = _2263;
        _2734 = _2265;
        _2736 = _2584;
        _2738 = _2586;
        _2740 = _2588;
    }
    float _4635 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4646 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4657 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    uint _2760 = _230 + 6u;
    float _2768 = _661 / cbSceneParam._m0[86u].x;
    float _2769 = _662 / cbSceneParam._m0[86u].y;
    vec4 _2783 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, (log2((isnan(cbSceneParam._m0[77u].w) ? _594 : (isnan(_594) ? cbSceneParam._m0[77u].w : min(_594, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2785 = _2783.x;
    float _2786 = _2783.y;
    float _2787 = _2783.z;
    float _2788 = _2783.w;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_594 > cbSceneParam._m0[78u].w)
    {
        float _2822 = isnan(_594) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _594 : min(cbSceneParam._m0[80u].w, _594));
        float _2823 = _2822 / _594;
        float _2834 = _2823 * _646;
        float _2835 = _647 * _2823;
        float _2836 = (-0.0) - _2835;
        float _2838 = _2823 * _648;
        float _2840 = (cbSceneParam._m0[77u].w * _2836) / _2822;
        float _2841 = _2840 + cbSceneParam._m0[79u].w;
        float _2842 = cbSceneParam._m0[79u].w - _2835;
        float _2848 = sqrt(((_2834 * _2834) + (_2835 * _2835)) + (_2838 * _2838));
        float _2851 = (1.0 - (cbSceneParam._m0[77u].w / _2822)) * _2848;
        float _2856 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2858 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2836 - _2840) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2841 > 0.0) ? exp2(_2856 * _2841) : (2.0 - exp2(_2858 * _2841))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2851;
        }
        else
        {
            float _2971 = 1.0 / cbSceneParam._m0[80u].x;
            float _2972 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : max(_2841, _2842));
            float _2973 = isnan(_2842) ? _2841 : (isnan(_2841) ? _2842 : min(_2841, _2842));
            float _2982 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : min(_2972, 0.0));
            float _2983 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : min(_2973, 0.0));
            _3011 = ((abs(_2848 / _2836) * cbSceneParam._m0[80u].y) * ((((_2982 - _2983) * 2.0) - ((exp2(_2856 * (isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0)))) - exp2(_2856 * (isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))))) * _2971)) - ((exp2(_2858 * _2982) - exp2(_2858 * _2983)) * _2971))) + (_2851 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2768, _2769, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2788);
        _2860 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2785;
        _2862 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2786;
        _2864 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2787;
        _2866 = _3022 * _2788;
    }
    else
    {
        _2860 = _2785;
        _2862 = _2786;
        _2864 = _2787;
        _2866 = _2788;
    }
    float _2878 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2879 = _2878 == 3.0;
    float _2880 = log2(_2866);
    float _2887 = exp2(_2880 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2730 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _724))) + ((_2736 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2888 = exp2(_2880 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2732 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _724))) + ((_2738 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2889 = exp2(_2880 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2734 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _724))) + ((_2740 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1529)) * cbPerFrame._m0[3u].x));
    float _2898 = (_2878 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2898 * (_2879 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.y = _2898 * (_2879 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.z = _2898 * (_2879 ? _2889 : (_2889 + (cbSceneParam._m0[72u].w * _2864)));
    SV_Target.w = cbInstanceData._m0[_2760].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2760].w;
}


