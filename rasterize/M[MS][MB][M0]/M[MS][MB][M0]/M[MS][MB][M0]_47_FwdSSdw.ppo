#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1080;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3410 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3421 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3432 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) + _325;
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _271) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _272) + cbTextureTilingScale._m0[14u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _403 = _399.z;
    float _407 = (_399.x * 2.0) + (-1.0);
    float _408 = (_399.y * 2.0) + (-1.0);
    float _409 = dot(vec2(_407, _408), vec2(_407, _408));
    float _3443 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _414 = sqrt(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))));
    float _419 = _407 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_373.x * 2.0) + (-1.0)));
    float _420 = _408 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_373.y * 2.0) + (-1.0)));
    float _423 = fma(_414, _219, fma(_420, _226, _419 * _212));
    float _426 = fma(_414, _220, fma(_420, _227, _419 * _213));
    float _429 = fma(_414, _221, fma(_420, _228, _419 * _214));
    float _433 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _471 = _469.x;
    float _472 = 1.0 - _471;
    float _481 = (cbMtdParam._m0[19u].x + dot(vec4(_433 * _423, _433 * _426, _433 * _429, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_471 - _472) * cbMtdParam._m0[24u].z) + _472) * cbMtdParam._m0[21u].z);
    float _3454 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _489 = (_482 * ((_353.x * cbMtdParam._m0[18u].x) - _332)) + _332;
    float _490 = (_482 * ((_353.y * cbMtdParam._m0[18u].y) - _333)) + _333;
    float _491 = (_482 * ((_353.z * cbMtdParam._m0[18u].z) - _334)) + _334;
    float _496 = (((_373.z - _403) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _403;
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _516 = (_509.x * 2.0) + (-1.0);
    float _517 = (_509.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3465 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _526 = ((_509.z - _496) * _482) + _496;
    float _536 = ((sqrt(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) - _414) * _482) + _414;
    float _539 = (((_516 - _419) * _482) + _419) + (cbMtdParam._m0[21u].x * _419);
    float _540 = (((_517 - _420) * _482) + _420) + (cbMtdParam._m0[21u].x * _420);
    float _542 = cbMtdParam._m0[22u].x + _399.w;
    float _545 = fma(_536, _219, fma(_540, _226, _539 * _212));
    float _548 = fma(_536, _220, fma(_540, _227, _539 * _213));
    float _551 = fma(_536, _221, fma(_540, _228, _539 * _214));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3476 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _559 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3498 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3509 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3520 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _628 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _618);
    float _629 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _618);
    float _630 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _618);
    float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
    float _635 = _628 * _634;
    float _636 = _629 * _634;
    float _637 = _630 * _634;
    float _643 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _644 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _665 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _668 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _671 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _685 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _691 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_685].x;
    float _692 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_685].y;
    float _693 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0)))) * cbInstanceData._m0[_685].z;
    float _3531 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _3542 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    vec4 _705 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _643, cbSceneParam._m0[86u].y * _644));
    float _709 = ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * TEXCOORD_5.w) * _705.x;
    float _710 = dot(vec3(_556, _557, _558), vec3(_635, _636, _637));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _556) - _635;
    float _718 = (_713 * _557) - _636;
    float _719 = (_713 * _558) - _637;
    float _723 = abs(dot(vec3(_635, _636, _637), vec3(_556, _557, _558)));
    float _3564 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_559);
    float _738 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1079;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770));
        float _808 = fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770));
        float _812 = fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770));
        float _837 = _770 + _556;
        float _838 = _774 + _557;
        float _839 = _778 + _558;
        float _849 = fma(_839, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837)) - _804;
        float _850 = fma(_839, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837)) - _808;
        float _851 = fma(_839, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837)) - _812;
        float _855 = inversesqrt(dot(vec3(_849, _850, _851), vec3(_849, _850, _851)));
        float _868 = ((_855 * _849) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_804 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_855 * _850) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_808 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _870 = ((_855 * _851) / cbModelParam._m0[34u].z) + ((((((_812 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_868, _869, _870), 0.0);
        float _907 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_873.x + (-0.5));
        float _909 = _907 * (_873.y + (-0.5));
        float _910 = _907 * (_873.z + (-0.5));
        float _917 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_880.x + (-0.5));
        float _919 = _917 * (_880.y + (-0.5));
        float _920 = _917 * (_880.z + (-0.5));
        float _927 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_887.x + (-0.5));
        float _929 = _927 * (_887.y + (-0.5));
        float _930 = _927 * (_887.z + (-0.5));
        float _937 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_894.x + (-0.5));
        float _939 = _937 * (_894.y + (-0.5));
        float _940 = _937 * (_894.z + (-0.5));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = _908 * 0.5;
        float _945 = _918 * 0.5;
        float _946 = _928 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _961 = (dot(vec3(_556, _557, _558), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3590 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _971 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3601 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _973 = _972 * 2.0;
        float _977 = (1.0 - _972) / (_972 + 1.0);
        float _3612 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _987 = ((((1.0 - _978) * (_973 + 2.0)) * exp2(log2(isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * (_973 + 1.0))) + _978) * _941;
        float _988 = _909 * 0.5;
        float _989 = _919 * 0.5;
        float _990 = _929 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1004 = (dot(vec3(_556, _557, _558), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1013 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3645 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1015 + 1.0))) + _1020) * _942;
        float _1030 = _910 * 0.5;
        float _1031 = _920 * 0.5;
        float _1032 = _930 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_556, _557, _558), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3678 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1057 + 1.0))) + _1062) * _943;
        _1079 = _910;
        _1081 = _909;
        _1082 = _908;
        _1083 = _920;
        _1084 = _919;
        _1085 = _918;
        _1086 = _930;
        _1087 = _929;
        _1088 = _928;
        _1089 = _943;
        _1090 = _942;
        _1091 = _941;
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
    }
    else
    {
        _1079 = _1080;
        _1081 = _1080;
        _1082 = _1080;
        _1083 = _1080;
        _1084 = _1080;
        _1085 = _1080;
        _1086 = _1080;
        _1087 = _1080;
        _1088 = _1080;
        _1089 = _1080;
        _1090 = _1080;
        _1091 = _1080;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1119 = fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770));
        float _1123 = fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770));
        float _1127 = fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770));
        float _1150 = _770 + _556;
        float _1151 = _774 + _557;
        float _1152 = _778 + _558;
        float _1162 = fma(_1152, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1150)) - _1119;
        float _1163 = fma(_1152, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1150)) - _1123;
        float _1164 = fma(_1152, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1150)) - _1127;
        float _1168 = inversesqrt(dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164)));
        float _1181 = ((_1168 * _1162) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1119 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1168 * _1163) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1123 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1183 = ((_1168 * _1164) / cbModelParam._m0[35u].z) + ((((((_1127 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1181, _1182, _1183), 0.0);
        float _1218 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1185.x + (-0.5));
        float _1220 = _1218 * (_1185.y + (-0.5));
        float _1221 = _1218 * (_1185.z + (-0.5));
        float _1228 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1192.x + (-0.5));
        float _1230 = _1228 * (_1192.y + (-0.5));
        float _1231 = _1228 * (_1192.z + (-0.5));
        float _1238 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1199.x + (-0.5));
        float _1240 = _1238 * (_1199.y + (-0.5));
        float _1241 = _1238 * (_1199.z + (-0.5));
        float _1248 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1206.x + (-0.5));
        float _1250 = _1248 * (_1206.y + (-0.5));
        float _1251 = _1248 * (_1206.z + (-0.5));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = _1219 * 0.5;
        float _1256 = _1229 * 0.5;
        float _1257 = _1239 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_556, _557, _558), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3719 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3730 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3741 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (_1282 + 1.0))) + _1287) * _1252;
        float _1297 = _1220 * 0.5;
        float _1298 = _1230 * 0.5;
        float _1299 = _1240 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_556, _557, _558), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3752 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3763 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3774 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))) * (_1324 + 1.0))) + _1329) * _1253;
        float _1339 = _1221 * 0.5;
        float _1340 = _1231 * 0.5;
        float _1341 = _1241 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_556, _557, _558), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3785 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3796 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3807 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1366 + 1.0))) + _1371) * _1254;
        _1388 = _1221;
        _1389 = _1220;
        _1390 = _1219;
        _1391 = _1231;
        _1392 = _1230;
        _1393 = _1229;
        _1394 = _1241;
        _1395 = _1240;
        _1396 = _1239;
        _1397 = _1254;
        _1398 = _1253;
        _1399 = _1252;
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
    }
    else
    {
        _1388 = _1080;
        _1389 = _1080;
        _1390 = _1080;
        _1391 = _1080;
        _1392 = _1080;
        _1393 = _1080;
        _1394 = _1080;
        _1395 = _1080;
        _1396 = _1080;
        _1397 = _1080;
        _1398 = _1080;
        _1399 = _1080;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1092)) + _1092;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1093)) + _1093;
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1094)) + _1094;
    float _1435 = fma(_1414, cbSceneParam._m0[89u].z, fma(_1413, cbSceneParam._m0[89u].y, _1412 * cbSceneParam._m0[89u].x));
    float _1438 = fma(_1414, cbSceneParam._m0[90u].z, fma(_1413, cbSceneParam._m0[90u].y, _1412 * cbSceneParam._m0[90u].x));
    float _1441 = fma(_1414, cbSceneParam._m0[91u].z, fma(_1413, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1412));
    float _1456 = _717 * 0.5;
    float _1457 = _718 * 0.5;
    float _1458 = _719 * 0.5;
    float _1459 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1462 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1465 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1499;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1472 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1079, _1083, _1086, _1089));
        float _1476 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1480 = dot(vec4(_1456, _1457, _1458, 1.0), vec4(_1082, _1085, _1088, _1091));
        float _1487 = dot(vec4(cbModelParam._m0[39u]), vec4(_1456, _1457, _1458, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1510;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1501 = dot(vec4(cbModelParam._m0[40u]), vec4(_1456, _1457, _1458, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1501) ? 0.0 : (isnan(0.0) ? _1501 : max(0.0, _1501))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1514 = (_1510 * cbModelParam._m0[1u].x) + (_1499 * (1.0 - cbModelParam._m0[1u].x));
    float _1524 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1524 : min(cbModelParam._m0[25u].z, _1524));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1572 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1576 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1580 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1583 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1586 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1589 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1617;
        if (_1583 > 0.0)
        {
            _1617 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1617 = frontier_phi_14_12_ladder;
        }
        float _1840;
        if (_1586 > 0.0)
        {
            _1840 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1840 = frontier_phi_23_19_ladder;
        }
        float _2086;
        if (_1589 > 0.0)
        {
            _2086 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2086 = frontier_phi_35_30_ladder;
        }
        float _2088 = isnan(_1840) ? _1617 : (isnan(_1617) ? _1840 : min(_1617, _1840));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1583) + _1572;
        float _2094 = (_2089 * _1586) + _1576;
        float _2095 = (_2089 * _1589) + _1580;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2098 = (-1.0) - _2096;
        float _2100 = _2096 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2095 > _2100) || ((_2095 < _2098) || ((_2094 > _2100) || ((_2094 < _2098) || ((_2093 < _2098) || (_2093 > _2100))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2219 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2095, cbModelParam._m0[9u].z, fma(_2094, cbModelParam._m0[9u].y, _2093 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2095, cbModelParam._m0[10u].z, fma(_2094, cbModelParam._m0[10u].y, _2093 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2095, cbModelParam._m0[11u].z, fma(_2094, cbModelParam._m0[11u].y, _2093 * cbModelParam._m0[11u].x))), _1525);
            frontier_phi_13_35_ladder = _2219.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2219.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2219.x * cbModelParam._m0[1u].y;
        }
        _1605 = frontier_phi_13_35_ladder_2;
        _1607 = frontier_phi_13_35_ladder_1;
        _1609 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1525);
        _1605 = _1593.x * cbModelParam._m0[1u].y;
        _1607 = _1593.y * cbModelParam._m0[1u].y;
        _1609 = _1593.z * cbModelParam._m0[1u].y;
    }
    float _1613 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1613 : min(cbModelParam._m0[25u].w, _1613));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1681 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1684 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1845;
        if (_1678 > 0.0)
        {
            _1845 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1845 = frontier_phi_25_21_ladder;
        }
        float _2113;
        if (_1681 > 0.0)
        {
            _2113 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2113 = frontier_phi_37_32_ladder;
        }
        float _2318;
        if (_1684 > 0.0)
        {
            _2318 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2318 = frontier_phi_46_43_ladder;
        }
        float _2320 = isnan(_2113) ? _1845 : (isnan(_1845) ? _2113 : min(_1845, _2113));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1678) + _1667;
        float _2326 = (_2321 * _1681) + _1671;
        float _2327 = (_2321 * _1684) + _1675;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2329 = (-1.0) - _2328;
        float _2331 = _2328 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2327 > _2331) || ((_2327 < _2329) || ((_2326 > _2331) || ((_2326 < _2329) || ((_2325 < _2329) || (_2325 > _2331))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2327, cbModelParam._m0[17u].z, fma(_2326, cbModelParam._m0[17u].y, _2325 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2327, cbModelParam._m0[18u].z, fma(_2326, cbModelParam._m0[18u].y, _2325 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2327, cbModelParam._m0[19u].z, fma(_2326, cbModelParam._m0[19u].y, _2325 * cbModelParam._m0[19u].x))), _1614);
            frontier_phi_22_46_ladder = _2526.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2526.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2526.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_22_46_ladder_2;
        _1705 = frontier_phi_22_46_ladder_1;
        _1707 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1614);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1719 = ((((1.0 - _738) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_738 * _725)) * _709;
    float _1720 = _1719 * ((cbModelParam._m0[1u].w * (_1703 - _1605)) + _1605);
    float _1721 = _1719 * ((cbModelParam._m0[1u].w * (_1705 - _1607)) + _1607);
    float _1722 = _1719 * ((cbModelParam._m0[1u].w * (_1707 - _1609)) + _1609);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1721, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1721, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1721, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    vec4 _1739 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_643, _644));
    float _1741 = _1739.w;
    float _1753 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1741);
    float _1754 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1741);
    float _1755 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1741);
    uvec4 _1759 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1761 = _1759.x * 14u;
    uint _1762 = _1761 + 13u;
    float _1769 = _709 + (-1.0);
    float _1774 = (cbLight._m0[_1762].x * _1769) + 1.0;
    float _1775 = (cbLight._m0[_1762].y * _1769) + 1.0;
    float _1776 = (cbLight._m0[_1762].z * _1769) + 1.0;
    float _1777 = (cbLight._m0[_1762].w * _1769) + 1.0;
    uint _1778 = _1761 + 5u;
    float _1784 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
    uint _1788 = _1761 + 4u;
    float _1798 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1802 = _1761 | 1u;
    float _1813 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_556, _557, _558));
    float _1816 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_556, _557, _558));
    float _3943 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _3954 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1821 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * 0.3183098733425140380859375;
    float _1823 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * 0.3183098733425140380859375;
    float _1830 = ((cbLight._m0[_1778].x * _1784) * _1823) + (((cbLight._m0[_1788].x * _1753) * _1798) * _1821);
    float _1831 = ((_1784 * cbLight._m0[_1778].y) * _1823) + (((cbLight._m0[_1788].y * _1754) * _1798) * _1821);
    float _1832 = ((_1784 * cbLight._m0[_1778].z) * _1823) + (((cbLight._m0[_1788].z * _1755) * _1798) * _1821);
    uvec4 _1837 = floatBitsToUint(cbLight._m0[_1761 + 12u]);
    bool _1839 = _1837.x == 0u;
    float _1850;
    float _1852;
    float _1854;
    if (_1839)
    {
        _1850 = _1830;
        _1852 = _1831;
        _1854 = _1832;
    }
    else
    {
        uint _1858 = _1761 + 6u;
        float _1874 = (dot(vec3(cbLight._m0[_1761 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _1875 = _1874 * _1874;
        float _3965 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1876 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1877 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1850 = (((cbLight._m0[_1858].x * 0.3183098733425140380859375) * _1876) * _1877) + _1830;
        _1852 = (((cbLight._m0[_1858].y * 0.3183098733425140380859375) * _1876) * _1877) + _1831;
        _1854 = (((cbLight._m0[_1858].z * 0.3183098733425140380859375) * _1876) * _1877) + _1832;
    }
    bool _1857 = _1837.y == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1857)
    {
        _1895 = _1850;
        _1897 = _1852;
        _1899 = _1854;
    }
    else
    {
        uint _2057 = _1761 + 7u;
        float _2073 = (dot(vec3(cbLight._m0[_1761 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _3981 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _2076 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _1895 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _1850;
        _1897 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _1852;
        _1899 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _1854;
    }
    uint _1902 = _1761 + 8u;
    float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _559) * 0.949999988079071044921875);
    float _1916 = _1915 * _1915;
    float _1917 = cbLight._m0[_1761].x + _635;
    float _1918 = cbLight._m0[_1761].y + _636;
    float _1919 = cbLight._m0[_1761].z + _637;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1924 = _1923 * _1917;
    float _1925 = _1923 * _1918;
    float _1926 = _1923 * _1919;
    float _1927 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1761].xyz));
    float _3997 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _1931 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _1932 = dot(vec3(_556, _557, _558), vec3(_1924, _1925, _1926));
    float _4019 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1924, _1925, _1926));
    float _4030 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1916 * _1916;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1956 = 1.0 - _1916;
    float _1967 = (0.5 / (((_1931 * ((_1930 * _1956) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _1956) + _1916) * _1930))) * _1930;
    float _4041 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1969 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    uint _1983 = _1761 + 9u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1802].w)) * _559) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1802].x + _635;
    float _1997 = cbLight._m0[_1802].y + _636;
    float _1998 = cbLight._m0[_1802].z + _637;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1802].xyz));
    float _4052 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _2010 = dot(vec3(_556, _557, _558), vec3(_2003, _2004, _2005));
    float _4063 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _2014 = dot(vec3(cbLight._m0[_1802].xyz), vec3(_2003, _2004, _2005));
    float _4074 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2018 = _1995 * _1995;
    float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
    float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2032 = 1.0 - _1995;
    float _2042 = (0.5 / (((_1931 * ((_2009 * _2032) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2032) + _1995) * _2009))) * _2009;
    float _4085 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
    float _2054 = (((_2031 * cbLight._m0[_1983].x) * _2044) * _1784) + ((((cbLight._m0[_1902].x * _1753) * _1955) * _1969) * _1798);
    float _2055 = (((_2031 * cbLight._m0[_1983].y) * _2044) * _1784) + ((((cbLight._m0[_1902].y * _1754) * _1955) * _1969) * _1798);
    float _2056 = (((_2031 * cbLight._m0[_1983].z) * _2044) * _1784) + ((((cbLight._m0[_1902].z * _1755) * _1955) * _1969) * _1798);
    float _2118;
    float _2120;
    float _2122;
    if (_1839)
    {
        _2118 = _2054;
        _2120 = _2055;
        _2122 = _2056;
    }
    else
    {
        uint _2124 = _1761 + 2u;
        uint _2128 = _1761 + 10u;
        float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _559) * 0.949999988079071044921875);
        float _2143 = _2142 * _2142;
        float _2144 = cbLight._m0[_2124].x + _635;
        float _2145 = cbLight._m0[_2124].y + _636;
        float _2146 = cbLight._m0[_2124].z + _637;
        float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
        float _2151 = _2150 * _2144;
        float _2152 = _2150 * _2145;
        float _2153 = _2150 * _2146;
        float _2154 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2124].xyz));
        float _4096 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2157 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2158 = dot(vec3(_556, _557, _558), vec3(_2151, _2152, _2153));
        float _4107 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2162 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2151, _2152, _2153));
        float _4118 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2166 = _2143 * _2143;
        float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
        float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2180 = 1.0 - _2143;
        float _2190 = (0.5 / (((_1931 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2180) + _2143) * _2157))) * _2157;
        float _4129 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2192 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
        float _2193 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2118 = (((_2179 * cbLight._m0[_2128].x) * _2192) * _2193) + _2054;
        _2120 = (((_2179 * cbLight._m0[_2128].y) * _2192) * _2193) + _2055;
        _2122 = (((_2179 * cbLight._m0[_2128].z) * _2192) * _2193) + _2056;
    }
    float _2228;
    float _2230;
    float _2232;
    if (_1857)
    {
        _2228 = _2118;
        _2230 = _2120;
        _2232 = _2122;
    }
    else
    {
        uint _2239 = _1761 + 3u;
        uint _2243 = _1761 + 11u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _559) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _635;
        float _2260 = cbLight._m0[_2239].y + _636;
        float _2261 = cbLight._m0[_2239].z + _637;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2239].xyz));
        float _4145 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _2273 = dot(vec3(_556, _557, _558), vec3(_2266, _2267, _2268));
        float _4156 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4167 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2295 = 1.0 - _2258;
        float _2305 = (0.5 / (((_1931 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_1931 * _2295) + _2258) * _2272))) * _2272;
        float _4178 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0));
        _2228 = (((_2294 * cbLight._m0[_2243].x) * _2307) * _2308) + _2118;
        _2230 = (((_2294 * cbLight._m0[_2243].y) * _2307) * _2308) + _2120;
        _2232 = (((_2294 * cbLight._m0[_2243].z) * _2307) * _2308) + _2122;
    }
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    float _2451;
    float _2453;
    if (_1759.y == 0u)
    {
        float _2383 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2384 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2383;
        float _2385 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2383;
        float _2386 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2383;
        uvec4 _2398 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2399 = _2398.x;
        uint _2410 = uint((float(_2398.y) * floor(float(uint(cbSceneParam._m0[85u].y * _644) / _2399))) + floor(float(uint(cbSceneParam._m0[85u].x * _643) / _2399)));
        float _2420 = (log2(_2386 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2421 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        uint _2424 = uint(isnan(14.0) ? _2421 : (isnan(_2421) ? 14.0 : min(_2421, 14.0)));
        uvec4 _2429 = texelFetch(g_lightClusterGridBuffer, int(((_2424 << 2u) + (_2410 << 6u)) >> 2u));
        uint _2430 = _2429.x;
        uint _2431 = _2398.z;
        float _2531;
        float _2533;
        float _2535;
        float _2537;
        float _2539;
        float _2541;
        if (((((1u << ((_2431 >> 4u) & 15u)) + 4294967295u) & _2430) == 0u) || ((_2431 & 240u) == 0u))
        {
            _2531 = 0.0;
            _2533 = 0.0;
            _2535 = 0.0;
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
        }
        else
        {
            float _2532;
            float _2534;
            float _2536;
            float _2538;
            float _2540;
            float _2542;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            float _2680 = 0.0;
            float _2681 = 0.0;
            uint _2682 = 0u;
            uint _2691;
            bool _2692;
            for (;;)
            {
                _2691 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2682 << 2u)) >> 2u)).x;
                _2692 = _2691 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2692)
                {
                    frontier_phi_61_pred = _2676;
                    frontier_phi_61_pred_1 = _2681;
                    frontier_phi_61_pred_2 = _2680;
                    frontier_phi_61_pred_3 = _2679;
                    frontier_phi_61_pred_4 = _2678;
                    frontier_phi_61_pred_5 = _2677;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2676;
                    _2801 = _2677;
                    _2802 = _2678;
                    _2803 = _2679;
                    _2804 = _2680;
                    _2805 = _2681;
                    _2806 = _2691;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2682 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _2384;
                        float _2867 = _2826.y - _2385;
                        float _2868 = _2826.z - _2386;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_665, _668, _671), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4204 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2876) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _2384;
                        float _2902 = (-0.0) - _2385;
                        float _2903 = (-0.0) - _2386;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2918 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                        float _2919 = 1.0 - _725;
                        float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                        float _2927 = _2926 * _2926;
                        float _2928 = _2927 * _2927;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2939 = dot(vec3(_665, _668, _671), vec3(_2908, _2909, _2910));
                        float _4220 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2943 = dot(vec3(_665, _668, _671), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                        float _4231 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                        float _2951 = _2886 * _2927;
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2876) + _2952;
                        float _4242 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                        float _2957 = 1.0 - _2927;
                        float _2967 = (0.5 / (((_2956 * ((_2942 * _2957) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2927) * _2942))) * _2956;
                        float _4253 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2978 = (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) / ((_2950 * _2950) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2735 = (_2897 * _2845.x) + _2803;
                        _2736 = (_2897 * _2845.y) + _2804;
                        _2737 = (_2897 * _2845.z) + _2805;
                        _2732 = (_2978 * _2862.x) + _2800;
                        _2733 = (_2978 * _2862.y) + _2801;
                        _2734 = (_2978 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_61_pred = _2732;
                    frontier_phi_61_pred_1 = _2737;
                    frontier_phi_61_pred_2 = _2736;
                    frontier_phi_61_pred_3 = _2735;
                    frontier_phi_61_pred_4 = _2734;
                    frontier_phi_61_pred_5 = _2733;
                }
                _2532 = frontier_phi_61_pred;
                _2542 = frontier_phi_61_pred_1;
                _2540 = frontier_phi_61_pred_2;
                _2538 = frontier_phi_61_pred_3;
                _2536 = frontier_phi_61_pred_4;
                _2534 = frontier_phi_61_pred_5;
                uint _2683 = _2682 + 1u;
                if (_2683 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2676 = _2532;
                    _2677 = _2534;
                    _2678 = _2536;
                    _2679 = _2538;
                    _2680 = _2540;
                    _2681 = _2542;
                    _2682 = _2683;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2531 = _2532;
            _2533 = _2534;
            _2535 = _2536;
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
        }
        uvec4 _2545 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2546 = _2545.z;
        uint _2548 = (_2546 >> 8u) & 15u;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((4294967295u << _2548) & _2430) == 0u)
        {
            _2644 = _2531;
            _2646 = _2533;
            _2648 = _2535;
            _2650 = _2537;
            _2652 = _2539;
            _2654 = _2541;
        }
        else
        {
            float _2669 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
            float _2670 = _2669 * _2384;
            float _2671 = _2669 * _2385;
            float _2672 = _2669 * _2386;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2548 < ((_2546 >> 12u) & 15u))
            {
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2655;
                float _2783 = _2531;
                float _2784 = _2533;
                float _2785 = _2535;
                float _2786 = _2537;
                float _2787 = _2539;
                float _2788 = _2541;
                uint _2789 = _2548;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2424 << 5u) + (_2410 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2799)
                    {
                        frontier_phi_67_pred = _2786;
                        frontier_phi_67_pred_1 = _2787;
                        frontier_phi_67_pred_2 = _2788;
                        frontier_phi_67_pred_3 = _2785;
                        frontier_phi_67_pred_4 = _2784;
                        frontier_phi_67_pred_5 = _2783;
                    }
                    else
                    {
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _2996 = _2783;
                        float _2997 = _2784;
                        float _2998 = _2785;
                        float _2999 = _2786;
                        float _3000 = _2787;
                        float _3001 = _2788;
                        uint _3002 = _2798;
                        uint _3003;
                        vec4 _3028;
                        float _3029;
                        vec4 _3044;
                        vec3 _3056;
                        vec4 _3071;
                        vec4 _3086;
                        float _3132;
                        bool _3133;
                        for (;;)
                        {
                            uint _3013 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3002));
                            _3003 = (_3002 + 4294967295u) & _3002;
                            uint _3015 = _3013 * 40u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            _3029 = _3028.w;
                            uint _3031 = (_3013 * 40u) + 4u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_3013 * 40u) + 8u;
                            _3056 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x));
                            uint _3058 = (_3013 * 40u) + 16u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3013 * 40u) + 20u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3088 = (_3013 * 40u) + 24u;
                            vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3107 = (_3013 * 40u) + 28u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3132 = fma(_2386, _3120.z, fma(_2385, _3120.y, _3120.x * _2384)) + _3120.w;
                            _3133 = !((fma(_2386, _3101.z, fma(_2385, _3101.y, _3101.x * _2384)) + _3101.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3133)
                            {
                                float _3160 = _3028.x - _2384;
                                float _3161 = _3028.y - _2385;
                                float _3162 = _3028.z - _2386;
                                float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                                float _3166 = inversesqrt(_3163);
                                float _3167 = _3166 * _3160;
                                float _3168 = _3166 * _3161;
                                float _3169 = _3166 * _3162;
                                float _3173 = 1.0 - (_3163 / (_3029 * _3029));
                                float _4264 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3178 = sqrt(_3163) * _3044.w;
                                float _3180 = 1.39999997615814208984375 / (_3178 + 1.39999997615814208984375);
                                float _3181 = _3180 * _3180;
                                float _3184 = ((1.0 - _3181) * dot(vec3(_3167, _3168, _3169), vec3(_665, _668, _671))) + _3181;
                                float _3187 = _3178 * _3178;
                                float _3191 = (fma(_2386, _3071.z, fma(_2385, _3071.y, _3071.x * _2384)) + _3071.w) / _3132;
                                float _3192 = (fma(_2386, _3086.z, fma(_2385, _3086.y, _3086.x * _2384)) + _3086.w) / _3132;
                                float _3196 = 1.0 - dot(vec2(_3191, _3192), vec2(_3191, _3192));
                                float _4280 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3197 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3198 = _3197 * (((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3174) / ((_3187 * 0.699999988079071044921875) + 1.0));
                                float _3210 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                                float _3211 = 1.0 - _725;
                                float _3218 = sqrt(1.0 - ((1.0 - (_3211 * _3211)) * (1.0 - (_3210 * _3210))));
                                float _3219 = _3218 * _3218;
                                float _3220 = _3219 * _3219;
                                float _3221 = _3167 - _2670;
                                float _3222 = _3168 - _2671;
                                float _3223 = _3169 - _2672;
                                float _3227 = inversesqrt(dot(vec3(_3221, _3222, _3223), vec3(_3221, _3222, _3223)));
                                float _3231 = dot(vec3(_665, _668, _671), vec3((-0.0) - _2670, (-0.0) - _2671, (-0.0) - _2672));
                                float _4291 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3235 = dot(vec3(_665, _668, _671), vec3(_3227 * _3221, _3227 * _3222, _3227 * _3223));
                                float _4302 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3238 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3242 = ((_3238 * _3238) * (_3220 + (-1.0))) + 1.0;
                                float _3243 = _3180 * _3219;
                                float _3244 = _3243 * _3243;
                                float _3250 = ((1.0 - _3244) * dot(vec3(_665, _668, _671), vec3(_3167, _3168, _3169))) + _3244;
                                float _4313 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                                float _3252 = 1.0 - _3219;
                                float _3262 = (0.5 / (((_3251 * ((_3234 * _3252) + _3219)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3219) * _3234))) * _3251;
                                float _4324 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3272 = (_3197 * _3174) * (((_3220 * 3.1415927410125732421875) * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) / ((_3242 * _3242) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3272 * _3056.x;
                                frontier_phi_73_pred_1 = _3272 * _3056.y;
                                frontier_phi_73_pred_2 = _3198 * _3044.z;
                                frontier_phi_73_pred_3 = _3198 * _3044.y;
                                frontier_phi_73_pred_4 = _3198 * _3044.x;
                                frontier_phi_73_pred_5 = _3272 * _3056.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3276 = frontier_phi_73_pred;
                            _3277 = frontier_phi_73_pred_1;
                            _3281 = frontier_phi_73_pred_2;
                            _3280 = frontier_phi_73_pred_3;
                            _3279 = frontier_phi_73_pred_4;
                            _3278 = frontier_phi_73_pred_5;
                            _2986 = _3279 + _2999;
                            _2987 = _3280 + _3000;
                            _2988 = _3281 + _3001;
                            _2983 = _3276 + _2996;
                            _2984 = _3277 + _2997;
                            _2985 = _3278 + _2998;
                            if (_3003 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _2988;
                                _3002 = _3003;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2986;
                        frontier_phi_67_pred_1 = _2987;
                        frontier_phi_67_pred_2 = _2988;
                        frontier_phi_67_pred_3 = _2985;
                        frontier_phi_67_pred_4 = _2984;
                        frontier_phi_67_pred_5 = _2983;
                    }
                    _2651 = frontier_phi_67_pred;
                    _2653 = frontier_phi_67_pred_1;
                    _2655 = frontier_phi_67_pred_2;
                    _2649 = frontier_phi_67_pred_3;
                    _2647 = frontier_phi_67_pred_4;
                    _2645 = frontier_phi_67_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2645;
                        _2784 = _2647;
                        _2785 = _2649;
                        _2786 = _2651;
                        _2787 = _2653;
                        _2788 = _2655;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2653;
                frontier_phi_55_56_ladder_1 = _2655;
                frontier_phi_55_56_ladder_2 = _2651;
                frontier_phi_55_56_ladder_3 = _2649;
                frontier_phi_55_56_ladder_4 = _2647;
                frontier_phi_55_56_ladder_5 = _2645;
            }
            else
            {
                frontier_phi_55_56_ladder = _2539;
                frontier_phi_55_56_ladder_1 = _2541;
                frontier_phi_55_56_ladder_2 = _2537;
                frontier_phi_55_56_ladder_3 = _2535;
                frontier_phi_55_56_ladder_4 = _2533;
                frontier_phi_55_56_ladder_5 = _2531;
            }
            _2644 = frontier_phi_55_56_ladder_5;
            _2646 = frontier_phi_55_56_ladder_4;
            _2648 = frontier_phi_55_56_ladder_3;
            _2650 = frontier_phi_55_56_ladder_2;
            _2652 = frontier_phi_55_56_ladder;
            _2654 = frontier_phi_55_56_ladder_1;
        }
        float _2659 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2443 = (_2659 * _2650) + _1895;
        _2445 = (_2659 * _2652) + _1897;
        _2447 = (_2659 * _2654) + _1899;
        _2449 = ((_2644 * 0.039999999105930328369140625) * _2659) + _2228;
        _2451 = ((_2646 * 0.039999999105930328369140625) * _2659) + _2230;
        _2453 = ((_2648 * 0.039999999105930328369140625) * _2659) + _2232;
    }
    else
    {
        _2443 = _1895;
        _2445 = _1897;
        _2447 = _1899;
        _2449 = _2228;
        _2451 = _2230;
        _2453 = _2232;
    }
    float _4340 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4351 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4362 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    uint _2473 = _252 + 6u;
    float _2481 = _643 / cbSceneParam._m0[86u].x;
    float _2482 = _644 / cbSceneParam._m0[86u].y;
    vec4 _2496 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2498 = _2496.x;
    float _2499 = _2496.y;
    float _2500 = _2496.z;
    float _2501 = _2496.w;
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2556 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2557 = _2556 / _577;
        float _2568 = _2557 * _628;
        float _2569 = _629 * _2557;
        float _2570 = (-0.0) - _2569;
        float _2572 = _2557 * _630;
        float _2574 = (cbSceneParam._m0[77u].w * _2570) / _2556;
        float _2575 = _2574 + cbSceneParam._m0[79u].w;
        float _2576 = cbSceneParam._m0[79u].w - _2569;
        float _2582 = sqrt(((_2568 * _2568) + (_2569 * _2569)) + (_2572 * _2572));
        float _2585 = (1.0 - (cbSceneParam._m0[77u].w / _2556)) * _2582;
        float _2590 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2592 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2745;
        if (abs((_2570 - _2574) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2745 = ((((_2575 > 0.0) ? exp2(_2590 * _2575) : (2.0 - exp2(_2592 * _2575))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2585;
        }
        else
        {
            float _2705 = 1.0 / cbSceneParam._m0[80u].x;
            float _2706 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : max(_2575, _2576));
            float _2707 = isnan(_2576) ? _2575 : (isnan(_2575) ? _2576 : min(_2575, _2576));
            float _2716 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : min(_2706, 0.0));
            float _2717 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : min(_2707, 0.0));
            _2745 = ((abs(_2582 / _2570) * cbSceneParam._m0[80u].y) * ((((_2716 - _2717) * 2.0) - ((exp2(_2590 * (isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0)))) - exp2(_2590 * (isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))))) * _2705)) - ((exp2(_2592 * _2716) - exp2(_2592 * _2717)) * _2705))) + (_2585 * cbSceneParam._m0[80u].z);
        }
        vec4 _2747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2481, _2482, 1.0), 0.0);
        float _2756 = exp2((_2745 * (-1.44269502162933349609375)) * (1.0 - _2747.w));
        float _2757 = log2(_2756);
        float _2773 = log2(_2501);
        _2594 = (exp2(_2773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].x)) * _2747.x) / cbSceneParam._m0[78u].x)) + _2498;
        _2596 = (exp2(_2773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].y)) * _2747.y) / cbSceneParam._m0[78u].y)) + _2499;
        _2598 = (exp2(_2773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2757 * cbSceneParam._m0[78u].z)) * _2747.z) / cbSceneParam._m0[78u].z)) + _2500;
        _2600 = _2756 * _2501;
    }
    else
    {
        _2594 = _2498;
        _2596 = _2499;
        _2598 = _2500;
        _2600 = _2501;
    }
    float _2612 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2613 = _2612 == 3.0;
    float _2614 = log2(_2600);
    float _2621 = exp2(_2614 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2443 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _709))) + ((_2449 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1514)) * cbPerFrame._m0[3u].x));
    float _2622 = exp2(_2614 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2445 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _709))) + ((_2451 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1514)) * cbPerFrame._m0[3u].x));
    float _2623 = exp2(_2614 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2447 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _709))) + ((_2453 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1514)) * cbPerFrame._m0[3u].x));
    float _2632 = (_2612 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2632 * (_2613 ? _2621 : (_2621 + (cbSceneParam._m0[72u].w * _2594)));
    SV_Target.y = _2632 * (_2613 ? _2622 : (_2622 + (cbSceneParam._m0[72u].w * _2596)));
    SV_Target.z = _2632 * (_2613 ? _2623 : (_2623 + (cbSceneParam._m0[72u].w * _2598)));
    SV_Target.w = cbInstanceData._m0[_2473].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2473].w;
}


