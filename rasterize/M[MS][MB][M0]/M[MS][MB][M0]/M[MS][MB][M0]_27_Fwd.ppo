#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1184;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3491 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3502 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3513 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _280) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _281) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _322 = _317.x * cbMtdParam._m0[9u].x;
    float _323 = _317.y * cbMtdParam._m0[9u].y;
    float _324 = _317.z * cbMtdParam._m0[9u].z;
    float _328 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _294.x) * _322;
    float _331 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _294.y) * _323;
    float _334 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _294.z) * _324;
    float _341 = ((_322 - _328) * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) + _328;
    float _342 = ((_323 - _331) * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) + _331;
    float _343 = ((_324 - _334) * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) + _334;
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _280) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _281) + cbTextureTilingScale._m0[20u].w));
    vec4 _387 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _391 = _387.z;
    float _395 = (_387.x * 2.0) + (-1.0);
    float _396 = (_387.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3524 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _402 = sqrt(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))));
    float _407 = _395 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_361.x * 2.0) + (-1.0)));
    float _408 = _396 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_361.y * 2.0) + (-1.0)));
    float _411 = fma(_402, _230, fma(_408, _237, _407 * _223));
    float _414 = fma(_402, _231, fma(_408, _238, _407 * _224));
    float _417 = fma(_402, _232, fma(_408, _239, _407 * _225));
    float _421 = inversesqrt(dot(vec3(_411, _414, _417), vec3(_411, _414, _417)));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _459 = _457.x;
    float _460 = 1.0 - _459;
    float _469 = (cbMtdParam._m0[19u].x + dot(vec4(_421 * _411, _421 * _414, _421 * _417, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_459 - _460) * cbMtdParam._m0[24u].z) + _460) * cbMtdParam._m0[21u].z);
    float _3535 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _472 = (-0.0) - cbMtdParam._m0[24u].y;
    float _474 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _474 : (isnan(_474) ? 1.0 : min(_474, 1.0));
    float _482 = _470 - ((_470 * TEXCOORD_8.x) * _475);
    float _483 = _470 - ((_470 * TEXCOORD_8.y) * _475);
    float _484 = _470 - ((_470 * TEXCOORD_8.z) * _475);
    float _491 = (_482 * (cbMtdParam._m0[17u].x - _341)) + _341;
    float _492 = (_483 * (cbMtdParam._m0[17u].y - _342)) + _342;
    float _493 = (_484 * (cbMtdParam._m0[17u].z - _343)) + _343;
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _536 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_507 - _508) * cbMtdParam._m0[24u].w) + _508) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3556 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _545 = ((((cbMtdParam._m0[10u].x - _491) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _537) + _491;
    float _546 = ((((cbMtdParam._m0[10u].y - _492) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _537) + _492;
    float _547 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _493)) * _537) + _493;
    float _552 = (((_361.z - _391) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _391;
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _573 = (_566.x * 2.0) + (-1.0);
    float _574 = (_566.y * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3567 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _583 = ((_566.z - _552) * _482) + _552;
    float _586 = ((cbMtdParam._m0[23u].y - _583) * _537) + _583;
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _611 = (_605.x * 2.0) + (-1.0);
    float _612 = (_605.y * 2.0) + (-1.0);
    float _613 = dot(vec2(_611, _612), vec2(_611, _612));
    float _3578 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _628 = ((sqrt(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) - _402) * _484) + _402;
    float _631 = (((_573 - _407) * _482) + _407) + (cbMtdParam._m0[21u].x * _407);
    float _632 = (((_574 - _408) * _483) + _408) + (cbMtdParam._m0[21u].x * _408);
    float _643 = (((_611 - _631) + (_631 * cbMtdParam._m0[22u].z)) * _537) + _631;
    float _644 = (((_612 - _632) + (_632 * cbMtdParam._m0[22u].z)) * _537) + _632;
    float _645 = (_537 * (sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) - _628)) + _628;
    float _647 = cbMtdParam._m0[22u].x + _387.w;
    float _650 = fma(_645, _230, fma(_644, _237, _643 * _223));
    float _653 = fma(_645, _231, fma(_644, _238, _643 * _224));
    float _656 = fma(_645, _232, fma(_644, _239, _643 * _225));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _3589 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _664 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3611 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3622 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3633 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _732 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _722);
    float _733 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _722);
    float _734 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _722);
    float _738 = inversesqrt(dot(vec3(_732, _733, _734), vec3(_732, _733, _734)));
    float _739 = _732 * _738;
    float _740 = _733 * _738;
    float _741 = _734 * _738;
    float _747 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _748 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _769 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _772 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _775 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    uint _789 = (_261 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _795 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_789].x;
    float _796 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_789].y;
    float _797 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_789].z;
    float _3644 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    vec4 _809 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _747, cbSceneParam._m0[86u].y * _748));
    float _813 = ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * TEXCOORD_5.w) * _809.x;
    float _814 = dot(vec3(_661, _662, _663), vec3(_739, _740, _741));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _661) - _739;
    float _822 = (_817 * _662) - _740;
    float _823 = (_817 * _663) - _741;
    float _827 = abs(dot(vec3(_739, _740, _741), vec3(_661, _662, _663)));
    float _3677 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_664);
    float _842 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1183;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _908 = fma(_882, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874));
        float _912 = fma(_882, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874));
        float _916 = fma(_882, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874));
        float _941 = _874 + _661;
        float _942 = _878 + _662;
        float _943 = _882 + _663;
        float _953 = fma(_943, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941)) - _908;
        float _954 = fma(_943, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941)) - _912;
        float _955 = fma(_943, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941)) - _916;
        float _959 = inversesqrt(dot(vec3(_953, _954, _955), vec3(_953, _954, _955)));
        float _972 = ((_959 * _953) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_908 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_959 * _954) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_912 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_959 * _955) / cbModelParam._m0[34u].z) + ((((((_916 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1011 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_977.x + (-0.5));
        float _1013 = _1011 * (_977.y + (-0.5));
        float _1014 = _1011 * (_977.z + (-0.5));
        float _1021 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_984.x + (-0.5));
        float _1023 = _1021 * (_984.y + (-0.5));
        float _1024 = _1021 * (_984.z + (-0.5));
        float _1031 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_991.x + (-0.5));
        float _1033 = _1031 * (_991.y + (-0.5));
        float _1034 = _1031 * (_991.z + (-0.5));
        float _1041 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_998.x + (-0.5));
        float _1043 = _1041 * (_998.y + (-0.5));
        float _1044 = _1041 * (_998.z + (-0.5));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = _1012 * 0.5;
        float _1049 = _1022 * 0.5;
        float _1050 = _1032 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1065 = (dot(vec3(_661, _662, _663), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1075 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3725 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1077 + 1.0))) + _1082) * _1045;
        float _1092 = _1013 * 0.5;
        float _1093 = _1023 * 0.5;
        float _1094 = _1033 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_661, _662, _663), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3758 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1119 + 1.0))) + _1124) * _1046;
        float _1134 = _1014 * 0.5;
        float _1135 = _1024 * 0.5;
        float _1136 = _1034 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1150 = (dot(vec3(_661, _662, _663), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1159 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _3791 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1161 + 1.0))) + _1166) * _1047;
        _1183 = _1014;
        _1185 = _1013;
        _1186 = _1012;
        _1187 = _1024;
        _1188 = _1023;
        _1189 = _1022;
        _1190 = _1034;
        _1191 = _1033;
        _1192 = _1032;
        _1193 = _1047;
        _1194 = _1046;
        _1195 = _1045;
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
    }
    else
    {
        _1183 = _1184;
        _1185 = _1184;
        _1186 = _1184;
        _1187 = _1184;
        _1188 = _1184;
        _1189 = _1184;
        _1190 = _1184;
        _1191 = _1184;
        _1192 = _1184;
        _1193 = _1184;
        _1194 = _1184;
        _1195 = _1184;
        _1196 = 0.0;
        _1197 = 0.0;
        _1198 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_882, cbModelParam._m0[30u].z, fma(_878, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874));
        float _1227 = fma(_882, cbModelParam._m0[31u].z, fma(_878, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874));
        float _1231 = fma(_882, cbModelParam._m0[32u].z, fma(_878, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874));
        float _1254 = _874 + _661;
        float _1255 = _878 + _662;
        float _1256 = _882 + _663;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_661, _662, _663), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3854 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_661, _662, _663), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3887 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_661, _662, _663), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3920 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1184;
        _1493 = _1184;
        _1494 = _1184;
        _1495 = _1184;
        _1496 = _1184;
        _1497 = _1184;
        _1498 = _1184;
        _1499 = _1184;
        _1500 = _1184;
        _1501 = _1184;
        _1502 = _1184;
        _1503 = _1184;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1196)) + _1196;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1197)) + _1197;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1198)) + _1198;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _821 * 0.5;
    float _1561 = _822 * 0.5;
    float _1562 = _823 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1183, _1187, _1190, _1193));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1186, _1189, _1192, _1195));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _664);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1677 = fma(_882, cbModelParam._m0[13u].z, fma(_878, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874)) + cbModelParam._m0[13u].w;
        float _1681 = fma(_882, cbModelParam._m0[14u].z, fma(_878, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874)) + cbModelParam._m0[14u].w;
        float _1685 = fma(_882, cbModelParam._m0[15u].z, fma(_878, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874)) + cbModelParam._m0[15u].w;
        float _1688 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1691 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1694 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1722;
        if (_1688 > 0.0)
        {
            _1722 = abs((1.0 - _1677) / _1688);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1677 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1722 = frontier_phi_14_12_ladder;
        }
        float _1925;
        if (_1691 > 0.0)
        {
            _1925 = abs((1.0 - _1681) / _1691);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1681 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1925 = frontier_phi_23_19_ladder;
        }
        float _2168;
        if (_1694 > 0.0)
        {
            _2168 = abs((1.0 - _1685) / _1694);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1685 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2168 = frontier_phi_35_30_ladder;
        }
        float _2170 = isnan(_1925) ? _1722 : (isnan(_1722) ? _1925 : min(_1722, _1925));
        float _2171 = isnan(_2168) ? _2170 : (isnan(_2170) ? _2168 : min(_2170, _2168));
        float _2175 = (_2171 * _1688) + _1677;
        float _2176 = (_2171 * _1691) + _1681;
        float _2177 = (_2171 * _1694) + _1685;
        float _2178 = _2171 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2178;
        float _2182 = _2178 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 > _2182) || ((_2176 < _2180) || ((_2175 < _2180) || (_2175 > _2182))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2301 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2177, cbModelParam._m0[9u].z, fma(_2176, cbModelParam._m0[9u].y, _2175 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2177, cbModelParam._m0[10u].z, fma(_2176, cbModelParam._m0[10u].y, _2175 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2177, cbModelParam._m0[11u].z, fma(_2176, cbModelParam._m0[11u].y, _2175 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_13_35_ladder = _2301.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2301.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2301.x * cbModelParam._m0[1u].y;
        }
        _1710 = frontier_phi_13_35_ladder_2;
        _1712 = frontier_phi_13_35_ladder_1;
        _1714 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1629);
        _1710 = _1698.x * cbModelParam._m0[1u].y;
        _1712 = _1698.y * cbModelParam._m0[1u].y;
        _1714 = _1698.z * cbModelParam._m0[1u].y;
    }
    float _1718 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _664);
    float _1719 = isnan(_1718) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1718 : min(cbModelParam._m0[25u].w, _1718));
    float _1809;
    float _1811;
    float _1813;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1773 = fma(_882, cbModelParam._m0[21u].z, fma(_878, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874)) + cbModelParam._m0[21u].w;
        float _1777 = fma(_882, cbModelParam._m0[22u].z, fma(_878, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874)) + cbModelParam._m0[22u].w;
        float _1781 = fma(_882, cbModelParam._m0[23u].z, fma(_878, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874)) + cbModelParam._m0[23u].w;
        float _1784 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1787 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1790 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1930;
        if (_1784 > 0.0)
        {
            _1930 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1930 = frontier_phi_25_21_ladder;
        }
        float _2195;
        if (_1787 > 0.0)
        {
            _2195 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2195 = frontier_phi_37_32_ladder;
        }
        float _2400;
        if (_1790 > 0.0)
        {
            _2400 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2400 = frontier_phi_46_43_ladder;
        }
        float _2402 = isnan(_2195) ? _1930 : (isnan(_1930) ? _2195 : min(_1930, _2195));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1784) + _1773;
        float _2408 = (_2403 * _1787) + _1777;
        float _2409 = (_2403 * _1790) + _1781;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2410;
        float _2413 = _2410 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2409 > _2413) || ((_2409 < _2411) || ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 < _2411) || (_2407 > _2413))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2409, cbModelParam._m0[17u].z, fma(_2408, cbModelParam._m0[17u].y, _2407 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2409, cbModelParam._m0[18u].z, fma(_2408, cbModelParam._m0[18u].y, _2407 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2409, cbModelParam._m0[19u].z, fma(_2408, cbModelParam._m0[19u].y, _2407 * cbModelParam._m0[19u].x))), _1719);
            frontier_phi_22_46_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1809 = frontier_phi_22_46_ladder_2;
        _1811 = frontier_phi_22_46_ladder_1;
        _1813 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1719);
        _1809 = _1793.x * cbModelParam._m0[1u].z;
        _1811 = _1793.y * cbModelParam._m0[1u].z;
        _1813 = _1793.z * cbModelParam._m0[1u].z;
    }
    float _1825 = ((((1.0 - _842) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_842 * _829)) * _813;
    float _1826 = _1825 * ((cbModelParam._m0[1u].w * (_1809 - _1710)) + _1710);
    float _1827 = _1825 * ((cbModelParam._m0[1u].w * (_1811 - _1712)) + _1712);
    float _1828 = _1825 * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1831 = fma(_1828, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1826 * cbSceneParam._m0[89u].x));
    float _1834 = fma(_1828, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1826 * cbSceneParam._m0[90u].x));
    float _1837 = fma(_1828, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1826 * cbSceneParam._m0[91u].x));
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1857 = _813 + (-1.0);
    float _1862 = (cbLight._m0[_1850].x * _1857) + 1.0;
    float _1863 = (cbLight._m0[_1850].y * _1857) + 1.0;
    float _1864 = (cbLight._m0[_1850].z * _1857) + 1.0;
    float _1865 = (cbLight._m0[_1850].w * _1857) + 1.0;
    uint _1866 = _1849 + 5u;
    float _1872 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1876 = _1849 + 4u;
    float _1883 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
    uint _1887 = _1849 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_661, _662, _663));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_661, _662, _663));
    float _4056 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4067 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1866].x * _1872) * _1908) + ((cbLight._m0[_1876].x * _1883) * _1906);
    float _1916 = ((_1872 * cbLight._m0[_1866].y) * _1908) + ((_1883 * cbLight._m0[_1876].y) * _1906);
    float _1917 = ((_1872 * cbLight._m0[_1866].z) * _1908) + ((_1883 * cbLight._m0[_1876].z) * _1906);
    uvec4 _1922 = floatBitsToUint(cbLight._m0[_1849 + 12u]);
    bool _1924 = _1922.x == 0u;
    float _1935;
    float _1937;
    float _1939;
    if (_1924)
    {
        _1935 = _1915;
        _1937 = _1916;
        _1939 = _1917;
    }
    else
    {
        uint _1943 = _1849 + 6u;
        float _1959 = (dot(vec3(cbLight._m0[_1849 + 2u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _1960 = _1959 * _1959;
        float _4078 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1961 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1962 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _1935 = (((cbLight._m0[_1943].x * 0.3183098733425140380859375) * _1961) * _1962) + _1915;
        _1937 = (((cbLight._m0[_1943].y * 0.3183098733425140380859375) * _1961) * _1962) + _1916;
        _1939 = (((cbLight._m0[_1943].z * 0.3183098733425140380859375) * _1961) * _1962) + _1917;
    }
    bool _1942 = _1922.y == 0u;
    float _1980;
    float _1982;
    float _1984;
    if (_1942)
    {
        _1980 = _1935;
        _1982 = _1937;
        _1984 = _1939;
    }
    else
    {
        uint _2139 = _1849 + 7u;
        float _2155 = (dot(vec3(cbLight._m0[_1849 + 3u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2156 = _2155 * _2155;
        float _4094 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2157 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2158 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1980 = (((cbLight._m0[_2139].x * 0.3183098733425140380859375) * _2157) * _2158) + _1935;
        _1982 = (((cbLight._m0[_2139].y * 0.3183098733425140380859375) * _2157) * _2158) + _1937;
        _1984 = (((cbLight._m0[_2139].z * 0.3183098733425140380859375) * _2157) * _2158) + _1939;
    }
    uint _1987 = _1849 + 8u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _664) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1849].x + _739;
    float _2003 = cbLight._m0[_1849].y + _740;
    float _2004 = cbLight._m0[_1849].z + _741;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1849].xyz));
    float _4110 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _4121 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2016 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2017 = dot(vec3(_661, _662, _663), vec3(_2009, _2010, _2011));
    float _4132 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2020 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2021 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_2009, _2010, _2011));
    float _4143 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2025 = _2001 * _2001;
    float _2029 = ((_2020 * _2020) * (_2025 + (-1.0))) + 1.0;
    float _2040 = (exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2041 = 1.0 - _2001;
    float _2052 = (0.5 / (((_2016 * ((_2015 * _2041) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2041) + _2001) * _2015))) * _2015;
    float _4154 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2025 / ((_2029 * _2029) * 3.141590118408203125));
    uint _2065 = _1849 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _664) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1887].x + _739;
    float _2079 = cbLight._m0[_1887].y + _740;
    float _2080 = cbLight._m0[_1887].z + _741;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1887].xyz));
    float _4165 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2092 = dot(vec3(_661, _662, _663), vec3(_2085, _2086, _2087));
    float _4176 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2085, _2086, _2087));
    float _4187 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2114 = 1.0 - _2077;
    float _2124 = (0.5 / (((_2016 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2114) + _2077) * _2091))) * _2091;
    float _4198 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2136 = (((_2113 * cbLight._m0[_2065].x) * _2126) * _1872) + (((_2040 * cbLight._m0[_1987].x) * _2054) * _1883);
    float _2137 = (((_2113 * cbLight._m0[_2065].y) * _2126) * _1872) + (((_2040 * cbLight._m0[_1987].y) * _2054) * _1883);
    float _2138 = (((_2113 * cbLight._m0[_2065].z) * _2126) * _1872) + (((_2040 * cbLight._m0[_1987].z) * _2054) * _1883);
    float _2200;
    float _2202;
    float _2204;
    if (_1924)
    {
        _2200 = _2136;
        _2202 = _2137;
        _2204 = _2138;
    }
    else
    {
        uint _2206 = _1849 + 2u;
        uint _2210 = _1849 + 10u;
        float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _664) * 0.949999988079071044921875);
        float _2225 = _2224 * _2224;
        float _2226 = cbLight._m0[_2206].x + _739;
        float _2227 = cbLight._m0[_2206].y + _740;
        float _2228 = cbLight._m0[_2206].z + _741;
        float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
        float _2233 = _2232 * _2226;
        float _2234 = _2232 * _2227;
        float _2235 = _2232 * _2228;
        float _2236 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2206].xyz));
        float _4209 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2240 = dot(vec3(_661, _662, _663), vec3(_2233, _2234, _2235));
        float _4220 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2244 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2233, _2234, _2235));
        float _4231 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2248 = _2225 * _2225;
        float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
        float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2262 = 1.0 - _2225;
        float _2272 = (0.5 / (((_2016 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2262) + _2225) * _2239))) * _2239;
        float _4242 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2274 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
        float _2275 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
        _2200 = (((_2261 * cbLight._m0[_2210].x) * _2274) * _2275) + _2136;
        _2202 = (((_2261 * cbLight._m0[_2210].y) * _2274) * _2275) + _2137;
        _2204 = (((_2261 * cbLight._m0[_2210].z) * _2274) * _2275) + _2138;
    }
    float _2310;
    float _2312;
    float _2314;
    if (_1942)
    {
        _2310 = _2200;
        _2312 = _2202;
        _2314 = _2204;
    }
    else
    {
        uint _2321 = _1849 + 3u;
        uint _2325 = _1849 + 11u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _664) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _739;
        float _2342 = cbLight._m0[_2321].y + _740;
        float _2343 = cbLight._m0[_2321].z + _741;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2321].xyz));
        float _4258 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2355 = dot(vec3(_661, _662, _663), vec3(_2348, _2349, _2350));
        float _4269 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4280 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2377 = 1.0 - _2340;
        float _2387 = (0.5 / (((_2016 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2016 * _2377) + _2340) * _2354))) * _2354;
        float _4291 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2389 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2390 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2310 = (((_2376 * cbLight._m0[_2325].x) * _2389) * _2390) + _2200;
        _2312 = (((_2376 * cbLight._m0[_2325].y) * _2389) * _2390) + _2202;
        _2314 = (((_2376 * cbLight._m0[_2325].z) * _2389) * _2390) + _2204;
    }
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    if (_1847.y == 0u)
    {
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2465;
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2465;
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2465;
        uvec4 _2480 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2481 = _2480.x;
        uint _2492 = uint((float(_2480.y) * floor(float(uint(cbSceneParam._m0[85u].y * _748) / _2481))) + floor(float(uint(cbSceneParam._m0[85u].x * _747) / _2481)));
        float _2502 = (log2(_2468 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2503 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        uint _2506 = uint(isnan(14.0) ? _2503 : (isnan(_2503) ? 14.0 : min(_2503, 14.0)));
        uvec4 _2511 = texelFetch(g_lightClusterGridBuffer, int(((_2506 << 2u) + (_2492 << 6u)) >> 2u));
        uint _2512 = _2511.x;
        uint _2513 = _2480.z;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        if (((((1u << ((_2513 >> 4u) & 15u)) + 4294967295u) & _2512) == 0u) || ((_2513 & 240u) == 0u))
        {
            _2613 = 0.0;
            _2615 = 0.0;
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
        }
        else
        {
            float _2614;
            float _2616;
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            uint _2763 = 0u;
            uint _2772;
            bool _2773;
            for (;;)
            {
                _2772 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2763 << 2u)) >> 2u)).x;
                _2773 = _2772 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2773)
                {
                    frontier_phi_61_pred = _2757;
                    frontier_phi_61_pred_1 = _2762;
                    frontier_phi_61_pred_2 = _2761;
                    frontier_phi_61_pred_3 = _2760;
                    frontier_phi_61_pred_4 = _2759;
                    frontier_phi_61_pred_5 = _2758;
                }
                else
                {
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    uint _2887;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2772;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    for (;;)
                    {
                        uint _2891 = uint(findLSB(_2887)) + (_2763 << 5u);
                        uint _2888 = (_2887 + 4294967295u) & _2887;
                        uint _2893 = _2891 * 48u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2913 = (_2891 * 48u) + 4u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2932 = (_2891 * 48u) + 8u;
                        vec3 _2943 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x));
                        float _2947 = _2907.x - _2466;
                        float _2948 = _2907.y - _2467;
                        float _2949 = _2907.z - _2468;
                        float _2950 = dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949));
                        float _2953 = inversesqrt(_2950);
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2957 = dot(vec3(_769, _772, _775), vec3(_2954, _2955, _2956));
                        float _2962 = 1.0 - (_2950 * _2907.w);
                        float _4317 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _2964 = sqrt(_2950) * _2926.w;
                        float _2967 = 1.39999997615814208984375 / (_2964 + 1.39999997615814208984375);
                        float _2968 = _2967 * _2967;
                        float _2971 = ((1.0 - _2968) * _2957) + _2968;
                        float _2974 = _2964 * _2964;
                        float _2978 = ((isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))) * _2963) / ((_2974 * 0.699999988079071044921875) + 1.0);
                        float _2982 = (-0.0) - _2466;
                        float _2983 = (-0.0) - _2467;
                        float _2984 = (-0.0) - _2468;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2989 = _2988 * _2982;
                        float _2990 = _2988 * _2983;
                        float _2991 = _2988 * _2984;
                        float _2999 = exp2(log2(1.0 / ((_2974 * 3.5) + 5.0)) * 0.25);
                        float _3000 = 1.0 - _829;
                        float _3007 = sqrt(1.0 - ((1.0 - (_3000 * _3000)) * (1.0 - (_2999 * _2999))));
                        float _3008 = _3007 * _3007;
                        float _3009 = _3008 * _3008;
                        float _3010 = _2989 + _2954;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3020 = dot(vec3(_769, _772, _775), vec3(_2989, _2990, _2991));
                        float _4333 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3024 = dot(vec3(_769, _772, _775), vec3(_3016 * _3010, _3016 * _3011, _3016 * _3012));
                        float _4344 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3027 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3031 = ((_3027 * _3027) * (_3009 + (-1.0))) + 1.0;
                        float _3032 = _2967 * _3008;
                        float _3033 = _3032 * _3032;
                        float _3036 = ((1.0 - _3033) * _2957) + _3033;
                        float _4355 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3038 = 1.0 - _3008;
                        float _3048 = (0.5 / (((_3037 * ((_3023 * _3038) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_3037 * _3038) + _3008) * _3023))) * _3037;
                        float _4366 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3059 = (((_3009 * 3.1415927410125732421875) * (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) / ((_3031 * _3031) * ((_2974 * 2.1991131305694580078125) + 3.141590118408203125))) * _2963;
                        _2816 = (_2978 * _2926.x) + _2884;
                        _2817 = (_2978 * _2926.y) + _2885;
                        _2818 = (_2978 * _2926.z) + _2886;
                        _2813 = (_3059 * _2943.x) + _2881;
                        _2814 = (_3059 * _2943.y) + _2882;
                        _2815 = (_3059 * _2943.z) + _2883;
                        if (_2888 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2888;
                        }
                    }
                    frontier_phi_61_pred = _2813;
                    frontier_phi_61_pred_1 = _2818;
                    frontier_phi_61_pred_2 = _2817;
                    frontier_phi_61_pred_3 = _2816;
                    frontier_phi_61_pred_4 = _2815;
                    frontier_phi_61_pred_5 = _2814;
                }
                _2614 = frontier_phi_61_pred;
                _2624 = frontier_phi_61_pred_1;
                _2622 = frontier_phi_61_pred_2;
                _2620 = frontier_phi_61_pred_3;
                _2618 = frontier_phi_61_pred_4;
                _2616 = frontier_phi_61_pred_5;
                uint _2764 = _2763 + 1u;
                if (_2764 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2757 = _2614;
                    _2758 = _2616;
                    _2759 = _2618;
                    _2760 = _2620;
                    _2761 = _2622;
                    _2762 = _2624;
                    _2763 = _2764;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2613 = _2614;
            _2615 = _2616;
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
        }
        uvec4 _2627 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2628 = _2627.z;
        uint _2630 = (_2628 >> 8u) & 15u;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((4294967295u << _2630) & _2512) == 0u)
        {
            _2725 = _2613;
            _2727 = _2615;
            _2729 = _2617;
            _2731 = _2619;
            _2733 = _2621;
            _2735 = _2623;
        }
        else
        {
            float _2750 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
            float _2751 = _2750 * _2466;
            float _2752 = _2750 * _2467;
            float _2753 = _2750 * _2468;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2630 < ((_2628 >> 12u) & 15u))
            {
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2864 = _2613;
                float _2865 = _2615;
                float _2866 = _2617;
                float _2867 = _2619;
                float _2868 = _2621;
                float _2869 = _2623;
                uint _2870 = _2630;
                uint _2879;
                bool _2880;
                for (;;)
                {
                    _2879 = texelFetch(g_lightClassification, int((((_2506 << 5u) + (_2492 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                    _2880 = _2879 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2880)
                    {
                        frontier_phi_67_pred = _2867;
                        frontier_phi_67_pred_1 = _2868;
                        frontier_phi_67_pred_2 = _2869;
                        frontier_phi_67_pred_3 = _2866;
                        frontier_phi_67_pred_4 = _2865;
                        frontier_phi_67_pred_5 = _2864;
                    }
                    else
                    {
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        uint _3083 = _2879;
                        uint _3084;
                        vec4 _3109;
                        float _3110;
                        vec4 _3125;
                        vec3 _3137;
                        vec4 _3152;
                        vec4 _3167;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3094 = ((_2870 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3083));
                            _3084 = (_3083 + 4294967295u) & _3083;
                            uint _3096 = _3094 * 40u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3110 = _3109.w;
                            uint _3112 = (_3094 * 40u) + 4u;
                            _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3127 = (_3094 * 40u) + 8u;
                            _3137 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x));
                            uint _3139 = (_3094 * 40u) + 16u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3094 * 40u) + 20u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3169 = (_3094 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3094 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_2468, _3201.z, fma(_2467, _3201.y, _3201.x * _2466)) + _3201.w;
                            _3214 = !((fma(_2468, _3182.z, fma(_2467, _3182.y, _3182.x * _2466)) + _3182.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3214)
                            {
                                float _3241 = _3109.x - _2466;
                                float _3242 = _3109.y - _2467;
                                float _3243 = _3109.z - _2468;
                                float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                                float _3247 = inversesqrt(_3244);
                                float _3248 = _3247 * _3241;
                                float _3249 = _3247 * _3242;
                                float _3250 = _3247 * _3243;
                                float _3254 = 1.0 - (_3244 / (_3110 * _3110));
                                float _4377 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3255 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3259 = sqrt(_3244) * _3125.w;
                                float _3261 = 1.39999997615814208984375 / (_3259 + 1.39999997615814208984375);
                                float _3262 = _3261 * _3261;
                                float _3265 = ((1.0 - _3262) * dot(vec3(_3248, _3249, _3250), vec3(_769, _772, _775))) + _3262;
                                float _3268 = _3259 * _3259;
                                float _3272 = (fma(_2468, _3152.z, fma(_2467, _3152.y, _3152.x * _2466)) + _3152.w) / _3213;
                                float _3273 = (fma(_2468, _3167.z, fma(_2467, _3167.y, _3167.x * _2466)) + _3167.w) / _3213;
                                float _3277 = 1.0 - dot(vec2(_3272, _3273), vec2(_3272, _3273));
                                float _4393 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3279 = _3278 * (((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3255) / ((_3268 * 0.699999988079071044921875) + 1.0));
                                float _3291 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                                float _3292 = 1.0 - _829;
                                float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                                float _3300 = _3299 * _3299;
                                float _3301 = _3300 * _3300;
                                float _3302 = _3248 - _2751;
                                float _3303 = _3249 - _2752;
                                float _3304 = _3250 - _2753;
                                float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                                float _3312 = dot(vec3(_769, _772, _775), vec3((-0.0) - _2751, (-0.0) - _2752, (-0.0) - _2753));
                                float _4404 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3316 = dot(vec3(_769, _772, _775), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                                float _4415 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3319 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                                float _3324 = _3261 * _3300;
                                float _3325 = _3324 * _3324;
                                float _3331 = ((1.0 - _3325) * dot(vec3(_769, _772, _775), vec3(_3248, _3249, _3250))) + _3325;
                                float _4426 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3333 = 1.0 - _3300;
                                float _3343 = (0.5 / (((_3332 * ((_3315 * _3333) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3332 * _3333) + _3300) * _3315))) * _3332;
                                float _4437 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                                float _3353 = (_3278 * _3255) * (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3323 * _3323) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3353 * _3137.x;
                                frontier_phi_73_pred_1 = _3353 * _3137.y;
                                frontier_phi_73_pred_2 = _3279 * _3125.z;
                                frontier_phi_73_pred_3 = _3279 * _3125.y;
                                frontier_phi_73_pred_4 = _3279 * _3125.x;
                                frontier_phi_73_pred_5 = _3353 * _3137.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_73_pred;
                            _3358 = frontier_phi_73_pred_1;
                            _3362 = frontier_phi_73_pred_2;
                            _3361 = frontier_phi_73_pred_3;
                            _3360 = frontier_phi_73_pred_4;
                            _3359 = frontier_phi_73_pred_5;
                            _3067 = _3360 + _3080;
                            _3068 = _3361 + _3081;
                            _3069 = _3362 + _3082;
                            _3064 = _3357 + _3077;
                            _3065 = _3358 + _3078;
                            _3066 = _3359 + _3079;
                            if (_3084 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3084;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3067;
                        frontier_phi_67_pred_1 = _3068;
                        frontier_phi_67_pred_2 = _3069;
                        frontier_phi_67_pred_3 = _3066;
                        frontier_phi_67_pred_4 = _3065;
                        frontier_phi_67_pred_5 = _3064;
                    }
                    _2732 = frontier_phi_67_pred;
                    _2734 = frontier_phi_67_pred_1;
                    _2736 = frontier_phi_67_pred_2;
                    _2730 = frontier_phi_67_pred_3;
                    _2728 = frontier_phi_67_pred_4;
                    _2726 = frontier_phi_67_pred_5;
                    uint _2871 = _2870 + 1u;
                    if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2864 = _2726;
                        _2865 = _2728;
                        _2866 = _2730;
                        _2867 = _2732;
                        _2868 = _2734;
                        _2869 = _2736;
                        _2870 = _2871;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2734;
                frontier_phi_55_56_ladder_1 = _2736;
                frontier_phi_55_56_ladder_2 = _2732;
                frontier_phi_55_56_ladder_3 = _2730;
                frontier_phi_55_56_ladder_4 = _2728;
                frontier_phi_55_56_ladder_5 = _2726;
            }
            else
            {
                frontier_phi_55_56_ladder = _2621;
                frontier_phi_55_56_ladder_1 = _2623;
                frontier_phi_55_56_ladder_2 = _2619;
                frontier_phi_55_56_ladder_3 = _2617;
                frontier_phi_55_56_ladder_4 = _2615;
                frontier_phi_55_56_ladder_5 = _2613;
            }
            _2725 = frontier_phi_55_56_ladder_5;
            _2727 = frontier_phi_55_56_ladder_4;
            _2729 = frontier_phi_55_56_ladder_3;
            _2731 = frontier_phi_55_56_ladder_2;
            _2733 = frontier_phi_55_56_ladder;
            _2735 = frontier_phi_55_56_ladder_1;
        }
        float _2740 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2525 = (_2740 * _2731) + _1980;
        _2527 = (_2740 * _2733) + _1982;
        _2529 = (_2740 * _2735) + _1984;
        _2531 = ((_2725 * 0.039999999105930328369140625) * _2740) + _2310;
        _2533 = ((_2727 * 0.039999999105930328369140625) * _2740) + _2312;
        _2535 = ((_2729 * 0.039999999105930328369140625) * _2740) + _2314;
    }
    else
    {
        _2525 = _1980;
        _2527 = _1982;
        _2529 = _1984;
        _2531 = _2310;
        _2533 = _2312;
        _2535 = _2314;
    }
    float _4453 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _4464 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _4475 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    uint _2555 = _261 + 6u;
    float _2563 = _747 / cbSceneParam._m0[86u].x;
    float _2564 = _748 / cbSceneParam._m0[86u].y;
    vec4 _2578 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2580 = _2578.x;
    float _2581 = _2578.y;
    float _2582 = _2578.z;
    float _2583 = _2578.w;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2638 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2639 = _2638 / _682;
        float _2650 = _2639 * _732;
        float _2651 = _733 * _2639;
        float _2652 = (-0.0) - _2651;
        float _2653 = _2639 * _734;
        float _2655 = (cbSceneParam._m0[77u].w * _2652) / _2638;
        float _2656 = _2655 + cbSceneParam._m0[79u].w;
        float _2657 = cbSceneParam._m0[79u].w - _2651;
        float _2663 = sqrt(((_2650 * _2650) + (_2651 * _2651)) + (_2653 * _2653));
        float _2666 = (1.0 - (cbSceneParam._m0[77u].w / _2638)) * _2663;
        float _2671 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2673 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2826;
        if (abs((_2652 - _2655) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2826 = ((((_2656 > 0.0) ? exp2(_2671 * _2656) : (2.0 - exp2(_2673 * _2656))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2666;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : max(_2656, _2657));
            float _2788 = isnan(_2657) ? _2656 : (isnan(_2656) ? _2657 : min(_2656, _2657));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _2826 = ((abs(_2663 / _2652) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2671 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2671 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2673 * _2797) - exp2(_2673 * _2798)) * _2786))) + (_2666 * cbSceneParam._m0[80u].z);
        }
        vec4 _2828 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2563, _2564, 1.0), 0.0);
        float _2837 = exp2((_2826 * (-1.44269502162933349609375)) * (1.0 - _2828.w));
        float _2838 = log2(_2837);
        float _2854 = log2(_2583);
        _2675 = (exp2(_2854 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].x)) * _2828.x) / cbSceneParam._m0[78u].x)) + _2580;
        _2677 = (exp2(_2854 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].y)) * _2828.y) / cbSceneParam._m0[78u].y)) + _2581;
        _2679 = (exp2(_2854 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2838 * cbSceneParam._m0[78u].z)) * _2828.z) / cbSceneParam._m0[78u].z)) + _2582;
        _2681 = _2837 * _2583;
    }
    else
    {
        _2675 = _2580;
        _2677 = _2581;
        _2679 = _2582;
        _2681 = _2583;
    }
    float _2693 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2694 = _2693 == 3.0;
    float _2695 = log2(_2681);
    float _2702 = exp2(_2695 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2525 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _813))) + ((_2531 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2703 = exp2(_2695 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2527 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _813))) + ((_2533 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2704 = exp2(_2695 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2529 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _813))) + ((_2535 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1618)) * cbPerFrame._m0[3u].x));
    float _2713 = (_2693 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2713 * (_2694 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.y = _2713 * (_2694 ? _2703 : (_2703 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.z = _2713 * (_2694 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.w = cbInstanceData._m0[_2555].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2555].w;
}


