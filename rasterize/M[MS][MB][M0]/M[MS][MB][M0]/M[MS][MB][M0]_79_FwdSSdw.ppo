#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1223;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3553 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _448 = _446.x;
    float _449 = _446.y;
    float _450 = _446.z;
    float _459 = ((_429.z - _450) * _382) + _450;
    float _462 = ((((_429.x - _448) * _382) + _448) * 2.0) + (-1.0);
    float _463 = ((((_429.y - _449) * _382) + _449) * 2.0) + (-1.0);
    float _464 = dot(vec2(_462, _463), vec2(_462, _463));
    float _3564 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    vec4 _491 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _503 = (_462 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_404.x * 2.0) + (-1.0)))) + (((_491.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _504 = (_463 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_404.y * 2.0) + (-1.0)))) + (((_491.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _547 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_518 - _519) * cbMtdParam._m0[24u].w) + _519) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3575 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _548 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _556 = ((((cbMtdParam._m0[10u].x - _389) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _548) + _389;
    float _557 = ((((cbMtdParam._m0[10u].y - _390) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _548) + _390;
    float _558 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _391)) * _548) + _391;
    float _563 = (((_404.z - _459) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _459;
    float _567 = ((_491.z - _563) * cbMtdParam._m0[19u].w) + _563;
    float _571 = ((cbMtdParam._m0[23u].y - _567) * _548) + _567;
    vec4 _590 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _592 = _590.x;
    float _593 = _590.y;
    float _599 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_235, _236, _237, 0.0));
    vec4 _614 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _266) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _267) + cbTextureTilingScale._m0[18u].w));
    float _616 = _614.x;
    float _621 = fract(_614.w + cbPerFrame._m0[22u].x);
    float _623 = (1.0 - _621) * _616;
    float _628 = ((_621 + (-1.0)) + _616) * 9.0;
    float _630 = ((_616 + (-1.0)) + _621) * 9.0;
    float _631 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _632 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _646 = (_623 * ((_614.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _631 : (isnan(_631) ? 3.0 : min(_631, 3.0))) * 3.1415927410125732421875);
    float _648 = (_623 * ((_614.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _632 : (isnan(_632) ? 3.0 : min(_632, 3.0))) * 3.1415927410125732421875);
    float _652 = inversesqrt(dot(vec3(_646, _648, 1.0), vec3(_646, _648, 1.0)));
    float _668 = (((((0.5 - _592) + ((_646 * 0.5) * _652)) * _599) + _592) * 2.0) + (-1.0);
    float _669 = (((((0.5 - _593) + ((_652 * 0.5) * _648)) * _599) + _593) * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3606 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _686 = ((((cbMtdParam._m0[22u].z * _503) - _503) + _668) * _548) + _503;
    float _687 = ((((cbMtdParam._m0[22u].z * _504) - _504) + _669) * _548) + _504;
    float _688 = (_548 * (sqrt(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) - _469)) + _469;
    float _690 = cbMtdParam._m0[22u].x + _491.w;
    float _693 = fma(_688, _235, fma(_687, _241 * TANGENT.x, (_227 * _219) * _686));
    float _696 = fma(_688, _236, fma(_687, _241 * TANGENT.y, (_227 * _220) * _686));
    float _699 = fma(_688, _237, fma(_687, _241 * TANGENT.z, (_227 * _221) * _686));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _3617 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _707 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _3639 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3650 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3661 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _776 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _766);
    float _777 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _766);
    float _778 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _766);
    float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
    float _783 = _776 * _782;
    float _784 = _777 * _782;
    float _785 = _778 * _782;
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _813 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _816 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _830 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_830].z;
    float _3672 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _854 = ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_704, _705, _706), vec3(_783, _784, _785));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _704) - _783;
    float _863 = (_858 * _705) - _784;
    float _864 = (_858 * _706) - _785;
    float _868 = abs(dot(vec3(_783, _784, _785), vec3(_704, _705, _706)));
    float _3705 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_707);
    float _882 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1222;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _952 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _956 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _980 = _914 + _704;
        float _981 = _918 + _705;
        float _982 = _922 + _706;
        float _992 = fma(_982, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980)) - _948;
        float _993 = fma(_982, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980)) - _952;
        float _994 = fma(_982, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980)) - _956;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_948 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_952 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[34u].z) + ((((((_956 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1050 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1016.x + (-0.5));
        float _1052 = _1050 * (_1016.y + (-0.5));
        float _1053 = _1050 * (_1016.z + (-0.5));
        float _1060 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1023.x + (-0.5));
        float _1062 = _1060 * (_1023.y + (-0.5));
        float _1063 = _1060 * (_1023.z + (-0.5));
        float _1070 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1030.x + (-0.5));
        float _1072 = _1070 * (_1030.y + (-0.5));
        float _1073 = _1070 * (_1030.z + (-0.5));
        float _1080 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1037.x + (-0.5));
        float _1082 = _1080 * (_1037.y + (-0.5));
        float _1083 = _1080 * (_1037.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1104 = (dot(vec3(_704, _705, _706), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1114 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3753 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1116 + 1.0))) + _1121) * _1084;
        float _1131 = _1052 * 0.5;
        float _1132 = _1062 * 0.5;
        float _1133 = _1072 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_704, _705, _706), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3786 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1158 + 1.0))) + _1163) * _1085;
        float _1173 = _1053 * 0.5;
        float _1174 = _1063 * 0.5;
        float _1175 = _1073 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_704, _705, _706), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3819 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1200 + 1.0))) + _1205) * _1086;
        _1222 = _1053;
        _1224 = _1052;
        _1225 = _1051;
        _1226 = _1063;
        _1227 = _1062;
        _1228 = _1061;
        _1229 = _1073;
        _1230 = _1072;
        _1231 = _1071;
        _1232 = _1086;
        _1233 = _1085;
        _1234 = _1084;
        _1235 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _1223;
        _1224 = _1223;
        _1225 = _1223;
        _1226 = _1223;
        _1227 = _1223;
        _1228 = _1223;
        _1229 = _1223;
        _1230 = _1223;
        _1231 = _1223;
        _1232 = _1223;
        _1233 = _1223;
        _1234 = _1223;
        _1235 = 0.0;
        _1236 = 0.0;
        _1237 = 0.0;
    }
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1262 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1266 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1270 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1293 = _914 + _704;
        float _1294 = _918 + _705;
        float _1295 = _922 + _706;
        float _1305 = fma(_1295, cbModelParam._m0[30u].z, fma(_1294, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1293)) - _1262;
        float _1306 = fma(_1295, cbModelParam._m0[31u].z, fma(_1294, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1293)) - _1266;
        float _1307 = fma(_1295, cbModelParam._m0[32u].z, fma(_1294, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1293)) - _1270;
        float _1311 = inversesqrt(dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307)));
        float _1324 = ((_1311 * _1305) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1262 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1325 = ((_1311 * _1306) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1266 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1326 = ((_1311 * _1307) / cbModelParam._m0[35u].z) + ((((((_1270 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        vec4 _1349 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1324, _1325, _1326), 0.0);
        float _1361 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1328.x + (-0.5));
        float _1363 = _1361 * (_1328.y + (-0.5));
        float _1364 = _1361 * (_1328.z + (-0.5));
        float _1371 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1335.x + (-0.5));
        float _1373 = _1371 * (_1335.y + (-0.5));
        float _1374 = _1371 * (_1335.z + (-0.5));
        float _1381 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1342.x + (-0.5));
        float _1383 = _1381 * (_1342.y + (-0.5));
        float _1384 = _1381 * (_1342.z + (-0.5));
        float _1391 = exp2((_1349.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1349.x + (-0.5));
        float _1393 = _1391 * (_1349.y + (-0.5));
        float _1394 = _1391 * (_1349.z + (-0.5));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1397 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1398 = _1362 * 0.5;
        float _1399 = _1372 * 0.5;
        float _1400 = _1382 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_704, _705, _706), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3882 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1425 + 1.0))) + _1430) * _1395;
        float _1440 = _1363 * 0.5;
        float _1441 = _1373 * 0.5;
        float _1442 = _1383 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_704, _705, _706), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1396 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3915 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1467 + 1.0))) + _1472) * _1396;
        float _1482 = _1364 * 0.5;
        float _1483 = _1374 * 0.5;
        float _1484 = _1384 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_704, _705, _706), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1397 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _3948 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1509 + 1.0))) + _1514) * _1397;
        _1531 = _1364;
        _1532 = _1363;
        _1533 = _1362;
        _1534 = _1374;
        _1535 = _1373;
        _1536 = _1372;
        _1537 = _1384;
        _1538 = _1383;
        _1539 = _1382;
        _1540 = _1397;
        _1541 = _1396;
        _1542 = _1395;
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1544 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1545 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1223;
        _1532 = _1223;
        _1533 = _1223;
        _1534 = _1223;
        _1535 = _1223;
        _1536 = _1223;
        _1537 = _1223;
        _1538 = _1223;
        _1539 = _1223;
        _1540 = _1223;
        _1541 = _1223;
        _1542 = _1223;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1235)) + _1235;
    float _1556 = (cbModelParam._m0[1u].x * (_1544 - _1236)) + _1236;
    float _1557 = (cbModelParam._m0[1u].x * (_1545 - _1237)) + _1237;
    float _1578 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1581 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1584 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1555));
    float _1599 = _862 * 0.5;
    float _1600 = _863 * 0.5;
    float _1601 = _864 * 0.5;
    float _1602 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1533, _1536, _1539, _1542));
    float _1605 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1532, _1535, _1538, _1541));
    float _1608 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1642;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1615 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1222, _1226, _1229, _1232));
        float _1619 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1224, _1227, _1230, _1233));
        float _1623 = dot(vec4(_1599, _1600, _1601, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1630 = dot(vec4(cbModelParam._m0[39u]), vec4(_1599, _1600, _1601, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1630) ? 0.0 : (isnan(0.0) ? _1630 : max(0.0, _1630))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1653;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1644 = dot(vec4(cbModelParam._m0[40u]), vec4(_1599, _1600, _1601, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1644) ? 0.0 : (isnan(0.0) ? _1644 : max(0.0, _1644))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1657 = (_1653 * cbModelParam._m0[1u].x) + (_1642 * (1.0 - cbModelParam._m0[1u].x));
    float _1667 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1668 = isnan(_1667) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1667 : min(cbModelParam._m0[25u].z, _1667));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1717 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1721 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1725 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1728 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1731 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1734 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1762;
        if (_1728 > 0.0)
        {
            _1762 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1762 = frontier_phi_14_12_ladder;
        }
        float _1984;
        if (_1731 > 0.0)
        {
            _1984 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1984 = frontier_phi_23_19_ladder;
        }
        float _2230;
        if (_1734 > 0.0)
        {
            _2230 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2230 = frontier_phi_35_30_ladder;
        }
        float _2232 = isnan(_1984) ? _1762 : (isnan(_1762) ? _1984 : min(_1762, _1984));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1728) + _1717;
        float _2238 = (_2233 * _1731) + _1721;
        float _2239 = (_2233 * _1734) + _1725;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1668);
            frontier_phi_13_35_ladder = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2363.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2363.x * cbModelParam._m0[1u].y;
        }
        _1750 = frontier_phi_13_35_ladder_2;
        _1752 = frontier_phi_13_35_ladder_1;
        _1754 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1668);
        _1750 = _1738.x * cbModelParam._m0[1u].y;
        _1752 = _1738.y * cbModelParam._m0[1u].y;
        _1754 = _1738.z * cbModelParam._m0[1u].y;
    }
    float _1758 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1759 = isnan(_1758) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1758 : min(cbModelParam._m0[25u].w, _1758));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1813 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1817 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1821 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1824 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1827 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1830 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1989;
        if (_1824 > 0.0)
        {
            _1989 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1989 = frontier_phi_25_21_ladder;
        }
        float _2257;
        if (_1827 > 0.0)
        {
            _2257 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2257 = frontier_phi_37_32_ladder;
        }
        float _2462;
        if (_1830 > 0.0)
        {
            _2462 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2462 = frontier_phi_46_43_ladder;
        }
        float _2464 = isnan(_2257) ? _1989 : (isnan(_1989) ? _2257 : min(_1989, _2257));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1824) + _1813;
        float _2470 = (_2465 * _1827) + _1817;
        float _2471 = (_2465 * _1830) + _1821;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2473 = (-1.0) - _2472;
        float _2475 = _2472 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2471 > _2475) || ((_2471 < _2473) || ((_2470 > _2475) || ((_2470 < _2473) || ((_2469 < _2473) || (_2469 > _2475))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2471, cbModelParam._m0[17u].z, fma(_2470, cbModelParam._m0[17u].y, _2469 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2471, cbModelParam._m0[18u].z, fma(_2470, cbModelParam._m0[18u].y, _2469 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2471, cbModelParam._m0[19u].z, fma(_2470, cbModelParam._m0[19u].y, _2469 * cbModelParam._m0[19u].x))), _1759);
            frontier_phi_22_46_ladder = _2670.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2670.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2670.x * cbModelParam._m0[1u].z;
        }
        _1849 = frontier_phi_22_46_ladder_2;
        _1851 = frontier_phi_22_46_ladder_1;
        _1853 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1759);
        _1849 = _1833.x * cbModelParam._m0[1u].z;
        _1851 = _1833.y * cbModelParam._m0[1u].z;
        _1853 = _1833.z * cbModelParam._m0[1u].z;
    }
    float _1865 = ((((1.0 - _882) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_882 * _870)) * _854;
    float _1866 = _1865 * ((cbModelParam._m0[1u].w * (_1849 - _1750)) + _1750);
    float _1867 = _1865 * ((cbModelParam._m0[1u].w * (_1851 - _1752)) + _1752);
    float _1868 = _1865 * ((cbModelParam._m0[1u].w * (_1853 - _1754)) + _1754);
    float _1871 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, _1866 * cbSceneParam._m0[91u].x));
    vec4 _1885 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_791, _792));
    float _1887 = _1885.w;
    float _1899 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1887);
    float _1900 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1887);
    float _1901 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1887);
    uvec4 _1905 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1907 = _1905.x * 14u;
    uint _1908 = _1907 + 13u;
    float _1915 = _854 + (-1.0);
    float _1920 = (cbLight._m0[_1908].x * _1915) + 1.0;
    float _1921 = (cbLight._m0[_1908].y * _1915) + 1.0;
    float _1922 = (cbLight._m0[_1908].z * _1915) + 1.0;
    float _1923 = (cbLight._m0[_1908].w * _1915) + 1.0;
    uint _1924 = _1907 + 5u;
    float _1930 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1934 = _1907 + 4u;
    float _1943 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1947 = _1907 | 1u;
    float _1958 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_704, _705, _706));
    float _1961 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_704, _705, _706));
    float _4084 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _4095 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1966 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1968 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.3183098733425140380859375;
    float _1975 = ((cbLight._m0[_1924].x * _1930) * _1968) + (((cbLight._m0[_1934].x * _1899) * _1943) * _1966);
    float _1976 = ((_1930 * cbLight._m0[_1924].y) * _1968) + (((cbLight._m0[_1934].y * _1900) * _1943) * _1966);
    float _1977 = ((_1930 * cbLight._m0[_1924].z) * _1968) + (((cbLight._m0[_1934].z * _1901) * _1943) * _1966);
    uvec4 _1981 = floatBitsToUint(cbLight._m0[_1907 + 12u]);
    bool _1983 = _1981.x == 0u;
    float _1994;
    float _1996;
    float _1998;
    if (_1983)
    {
        _1994 = _1975;
        _1996 = _1976;
        _1998 = _1977;
    }
    else
    {
        uint _2002 = _1907 + 6u;
        float _2018 = (dot(vec3(cbLight._m0[_1907 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2019 = _2018 * _2018;
        float _4106 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2020 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2021 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _1994 = (((cbLight._m0[_2002].x * 0.3183098733425140380859375) * _2020) * _2021) + _1975;
        _1996 = (((cbLight._m0[_2002].y * 0.3183098733425140380859375) * _2020) * _2021) + _1976;
        _1998 = (((cbLight._m0[_2002].z * 0.3183098733425140380859375) * _2020) * _2021) + _1977;
    }
    bool _2001 = _1981.y == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_2001)
    {
        _2039 = _1994;
        _2041 = _1996;
        _2043 = _1998;
    }
    else
    {
        uint _2201 = _1907 + 7u;
        float _2217 = (dot(vec3(cbLight._m0[_1907 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4122 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2220 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2039 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _1994;
        _2041 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _1996;
        _2043 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _1998;
    }
    uint _2046 = _1907 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1907].w)) * _707) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1907].x + _783;
    float _2062 = cbLight._m0[_1907].y + _784;
    float _2063 = cbLight._m0[_1907].z + _785;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1907].xyz));
    float _4138 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2075 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2076 = dot(vec3(_704, _705, _706), vec3(_2068, _2069, _2070));
    float _4160 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1907].xyz), vec3(_2068, _2069, _2070));
    float _4171 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = 1.0 - _2060;
    float _2111 = (0.5 / (((_2075 * ((_2074 * _2100) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2100) + _2060) * _2074))) * _2074;
    float _4182 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2113 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2127 = _1907 + 9u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _707) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1947].x + _783;
    float _2141 = cbLight._m0[_1947].y + _784;
    float _2142 = cbLight._m0[_1947].z + _785;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_1947].xyz));
    float _4193 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2154 = dot(vec3(_704, _705, _706), vec3(_2147, _2148, _2149));
    float _4204 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2147, _2148, _2149));
    float _4215 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2139 * _2139;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2176 = 1.0 - _2139;
    float _2186 = (0.5 / (((_2075 * ((_2153 * _2176) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2176) + _2139) * _2153))) * _2153;
    float _4226 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    float _2198 = (((_2175 * cbLight._m0[_2127].x) * _2188) * _1930) + ((((cbLight._m0[_2046].x * _1899) * _2099) * _2113) * _1943);
    float _2199 = (((_2175 * cbLight._m0[_2127].y) * _2188) * _1930) + ((((cbLight._m0[_2046].y * _1900) * _2099) * _2113) * _1943);
    float _2200 = (((_2175 * cbLight._m0[_2127].z) * _2188) * _1930) + ((((cbLight._m0[_2046].z * _1901) * _2099) * _2113) * _1943);
    float _2262;
    float _2264;
    float _2266;
    if (_1983)
    {
        _2262 = _2198;
        _2264 = _2199;
        _2266 = _2200;
    }
    else
    {
        uint _2268 = _1907 + 2u;
        uint _2272 = _1907 + 10u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _707) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _783;
        float _2289 = cbLight._m0[_2268].y + _784;
        float _2290 = cbLight._m0[_2268].z + _785;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2268].xyz));
        float _4237 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2302 = dot(vec3(_704, _705, _706), vec3(_2295, _2296, _2297));
        float _4248 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4259 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2323 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2324 = 1.0 - _2287;
        float _2334 = (0.5 / (((_2075 * ((_2301 * _2324) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2324) + _2287) * _2301))) * _2301;
        float _4270 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2336 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2337 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
        _2262 = (((_2323 * cbLight._m0[_2272].x) * _2336) * _2337) + _2198;
        _2264 = (((_2323 * cbLight._m0[_2272].y) * _2336) * _2337) + _2199;
        _2266 = (((_2323 * cbLight._m0[_2272].z) * _2336) * _2337) + _2200;
    }
    float _2372;
    float _2374;
    float _2376;
    if (_2001)
    {
        _2372 = _2262;
        _2374 = _2264;
        _2376 = _2266;
    }
    else
    {
        uint _2383 = _1907 + 3u;
        uint _2387 = _1907 + 11u;
        float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _707) * 0.949999988079071044921875);
        float _2402 = _2401 * _2401;
        float _2403 = cbLight._m0[_2383].x + _783;
        float _2404 = cbLight._m0[_2383].y + _784;
        float _2405 = cbLight._m0[_2383].z + _785;
        float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
        float _2410 = _2409 * _2403;
        float _2411 = _2409 * _2404;
        float _2412 = _2409 * _2405;
        float _2413 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2383].xyz));
        float _4286 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2417 = dot(vec3(_704, _705, _706), vec3(_2410, _2411, _2412));
        float _4297 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2421 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2410, _2411, _2412));
        float _4308 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2425 = _2402 * _2402;
        float _2429 = ((_2420 * _2420) * (_2425 + (-1.0))) + 1.0;
        float _2438 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2439 = 1.0 - _2402;
        float _2449 = (0.5 / (((_2075 * ((_2416 * _2439) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2439) + _2402) * _2416))) * _2416;
        float _4319 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2451 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2425 / ((_2429 * _2429) * 3.141590118408203125));
        float _2452 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2372 = (((_2438 * cbLight._m0[_2387].x) * _2451) * _2452) + _2262;
        _2374 = (((_2438 * cbLight._m0[_2387].y) * _2451) * _2452) + _2264;
        _2376 = (((_2438 * cbLight._m0[_2387].z) * _2451) * _2452) + _2266;
    }
    float _2587;
    float _2589;
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    if (_1905.y == 0u)
    {
        float _2527 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2528 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2527;
        float _2529 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2527;
        float _2530 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2527;
        uvec4 _2542 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2543 = _2542.x;
        uint _2554 = uint((float(_2542.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2543))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2543)));
        float _2564 = (log2(_2530 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2565 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        uint _2568 = uint(isnan(14.0) ? _2565 : (isnan(_2565) ? 14.0 : min(_2565, 14.0)));
        uvec4 _2573 = texelFetch(g_lightClusterGridBuffer, int(((_2568 << 2u) + (_2554 << 6u)) >> 2u));
        uint _2574 = _2573.x;
        uint _2575 = _2542.z;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        if (((((1u << ((_2575 >> 4u) & 15u)) + 4294967295u) & _2574) == 0u) || ((_2575 & 240u) == 0u))
        {
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
        }
        else
        {
            float _2676;
            float _2678;
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2820 = 0.0;
            float _2821 = 0.0;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            uint _2826 = 0u;
            uint _2835;
            bool _2836;
            for (;;)
            {
                _2835 = texelFetch(g_lightClassification, int((((_2568 << 5u) + (_2554 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                _2836 = _2835 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2836)
                {
                    frontier_phi_61_pred = _2820;
                    frontier_phi_61_pred_1 = _2825;
                    frontier_phi_61_pred_2 = _2824;
                    frontier_phi_61_pred_3 = _2823;
                    frontier_phi_61_pred_4 = _2822;
                    frontier_phi_61_pred_5 = _2821;
                }
                else
                {
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    uint _2950;
                    _2944 = _2820;
                    _2945 = _2821;
                    _2946 = _2822;
                    _2947 = _2823;
                    _2948 = _2824;
                    _2949 = _2825;
                    _2950 = _2835;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2954 = uint(findLSB(_2950)) + (_2826 << 5u);
                        uint _2951 = (_2950 + 4294967295u) & _2950;
                        uint _2956 = _2954 * 48u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2956)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2956 + 3u)).x));
                        uint _2976 = (_2954 * 48u) + 4u;
                        vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 3u)).x));
                        uint _2995 = (_2954 * 48u) + 8u;
                        vec3 _3006 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2995)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2995 + 2u)).x));
                        float _3010 = _2970.x - _2528;
                        float _3011 = _2970.y - _2529;
                        float _3012 = _2970.z - _2530;
                        float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                        float _3016 = inversesqrt(_3013);
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3020 = dot(vec3(_810, _813, _816), vec3(_3017, _3018, _3019));
                        float _3025 = 1.0 - (_3013 * _2970.w);
                        float _4345 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3026 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3027 = sqrt(_3013) * _2989.w;
                        float _3030 = 1.39999997615814208984375 / (_3027 + 1.39999997615814208984375);
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _3020) + _3031;
                        float _3037 = _3027 * _3027;
                        float _3041 = ((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3026) / ((_3037 * 0.699999988079071044921875) + 1.0);
                        float _3045 = (-0.0) - _2528;
                        float _3046 = (-0.0) - _2529;
                        float _3047 = (-0.0) - _2530;
                        float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3062 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                        float _3063 = 1.0 - _870;
                        float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                        float _3071 = _3070 * _3070;
                        float _3072 = _3071 * _3071;
                        float _3073 = _3052 + _3017;
                        float _3074 = _3053 + _3018;
                        float _3075 = _3054 + _3019;
                        float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                        float _3083 = dot(vec3(_810, _813, _816), vec3(_3052, _3053, _3054));
                        float _4361 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                        float _3086 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3087 = dot(vec3(_810, _813, _816), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                        float _4372 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                        float _3090 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                        float _3095 = _3030 * _3071;
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3020) + _3096;
                        float _4383 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                        float _3100 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3101 = 1.0 - _3071;
                        float _3111 = (0.5 / (((_3100 * ((_3086 * _3101) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3100 * _3101) + _3071) * _3086))) * _3100;
                        float _4394 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3121 = (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3094 * _3094) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125))) * _3026;
                        _2879 = (_3041 * _2989.x) + _2947;
                        _2880 = (_3041 * _2989.y) + _2948;
                        _2881 = (_3041 * _2989.z) + _2949;
                        _2876 = (_3121 * _3006.x) + _2944;
                        _2877 = (_3121 * _3006.y) + _2945;
                        _2878 = (_3121 * _3006.z) + _2946;
                        if (_2951 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2944 = _2876;
                            _2945 = _2877;
                            _2946 = _2878;
                            _2947 = _2879;
                            _2948 = _2880;
                            _2949 = _2881;
                            _2950 = _2951;
                        }
                    }
                    frontier_phi_61_pred = _2876;
                    frontier_phi_61_pred_1 = _2881;
                    frontier_phi_61_pred_2 = _2880;
                    frontier_phi_61_pred_3 = _2879;
                    frontier_phi_61_pred_4 = _2878;
                    frontier_phi_61_pred_5 = _2877;
                }
                _2676 = frontier_phi_61_pred;
                _2686 = frontier_phi_61_pred_1;
                _2684 = frontier_phi_61_pred_2;
                _2682 = frontier_phi_61_pred_3;
                _2680 = frontier_phi_61_pred_4;
                _2678 = frontier_phi_61_pred_5;
                uint _2827 = _2826 + 1u;
                if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2820 = _2676;
                    _2821 = _2678;
                    _2822 = _2680;
                    _2823 = _2682;
                    _2824 = _2684;
                    _2825 = _2686;
                    _2826 = _2827;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
        }
        uvec4 _2689 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2690 = _2689.z;
        uint _2692 = (_2690 >> 8u) & 15u;
        float _2788;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        if (((4294967295u << _2692) & _2574) == 0u)
        {
            _2788 = _2675;
            _2790 = _2677;
            _2792 = _2679;
            _2794 = _2681;
            _2796 = _2683;
            _2798 = _2685;
        }
        else
        {
            float _2813 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
            float _2814 = _2813 * _2528;
            float _2815 = _2813 * _2529;
            float _2816 = _2813 * _2530;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2692 < ((_2690 >> 12u) & 15u))
            {
                float _2789;
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2927 = _2675;
                float _2928 = _2677;
                float _2929 = _2679;
                float _2930 = _2681;
                float _2931 = _2683;
                float _2932 = _2685;
                uint _2933 = _2692;
                uint _2942;
                bool _2943;
                for (;;)
                {
                    _2942 = texelFetch(g_lightClassification, int((((_2568 << 5u) + (_2554 << 9u)) + (_2933 << 2u)) >> 2u)).x;
                    _2943 = _2942 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2943)
                    {
                        frontier_phi_67_pred = _2930;
                        frontier_phi_67_pred_1 = _2931;
                        frontier_phi_67_pred_2 = _2932;
                        frontier_phi_67_pred_3 = _2929;
                        frontier_phi_67_pred_4 = _2928;
                        frontier_phi_67_pred_5 = _2927;
                    }
                    else
                    {
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3139 = _2927;
                        float _3140 = _2928;
                        float _3141 = _2929;
                        float _3142 = _2930;
                        float _3143 = _2931;
                        float _3144 = _2932;
                        uint _3145 = _2942;
                        uint _3146;
                        vec4 _3171;
                        float _3172;
                        vec4 _3187;
                        vec3 _3199;
                        vec4 _3214;
                        vec4 _3229;
                        float _3275;
                        bool _3276;
                        for (;;)
                        {
                            uint _3156 = ((_2933 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3145));
                            _3146 = (_3145 + 4294967295u) & _3145;
                            uint _3158 = _3156 * 40u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3172 = _3171.w;
                            uint _3174 = (_3156 * 40u) + 4u;
                            _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3189 = (_3156 * 40u) + 8u;
                            _3199 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x));
                            uint _3201 = (_3156 * 40u) + 16u;
                            _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3216 = (_3156 * 40u) + 20u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3156 * 40u) + 24u;
                            vec4 _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3250 = (_3156 * 40u) + 28u;
                            vec4 _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            _3275 = fma(_2530, _3263.z, fma(_2529, _3263.y, _3263.x * _2528)) + _3263.w;
                            _3276 = !((fma(_2530, _3244.z, fma(_2529, _3244.y, _3244.x * _2528)) + _3244.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3276)
                            {
                                float _3303 = _3171.x - _2528;
                                float _3304 = _3171.y - _2529;
                                float _3305 = _3171.z - _2530;
                                float _3306 = dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305));
                                float _3309 = inversesqrt(_3306);
                                float _3310 = _3309 * _3303;
                                float _3311 = _3309 * _3304;
                                float _3312 = _3309 * _3305;
                                float _3316 = 1.0 - (_3306 / (_3172 * _3172));
                                float _4405 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3321 = sqrt(_3306) * _3187.w;
                                float _3323 = 1.39999997615814208984375 / (_3321 + 1.39999997615814208984375);
                                float _3324 = _3323 * _3323;
                                float _3327 = ((1.0 - _3324) * dot(vec3(_3310, _3311, _3312), vec3(_810, _813, _816))) + _3324;
                                float _3330 = _3321 * _3321;
                                float _3334 = (fma(_2530, _3214.z, fma(_2529, _3214.y, _3214.x * _2528)) + _3214.w) / _3275;
                                float _3335 = (fma(_2530, _3229.z, fma(_2529, _3229.y, _3229.x * _2528)) + _3229.w) / _3275;
                                float _3339 = 1.0 - dot(vec2(_3334, _3335), vec2(_3334, _3335));
                                float _4421 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3340 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3341 = _3340 * (((isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0))) * _3317) / ((_3330 * 0.699999988079071044921875) + 1.0));
                                float _3353 = exp2(log2(1.0 / ((_3330 * 3.5) + 5.0)) * 0.25);
                                float _3354 = 1.0 - _870;
                                float _3361 = sqrt(1.0 - ((1.0 - (_3354 * _3354)) * (1.0 - (_3353 * _3353))));
                                float _3362 = _3361 * _3361;
                                float _3363 = _3362 * _3362;
                                float _3364 = _3310 - _2814;
                                float _3365 = _3311 - _2815;
                                float _3366 = _3312 - _2816;
                                float _3370 = inversesqrt(dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366)));
                                float _3374 = dot(vec3(_810, _813, _816), vec3((-0.0) - _2814, (-0.0) - _2815, (-0.0) - _2816));
                                float _4432 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3378 = dot(vec3(_810, _813, _816), vec3(_3370 * _3364, _3370 * _3365, _3370 * _3366));
                                float _4443 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                                float _3381 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3385 = ((_3381 * _3381) * (_3363 + (-1.0))) + 1.0;
                                float _3386 = _3323 * _3362;
                                float _3387 = _3386 * _3386;
                                float _3393 = ((1.0 - _3387) * dot(vec3(_810, _813, _816), vec3(_3310, _3311, _3312))) + _3387;
                                float _4454 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3395 = 1.0 - _3362;
                                float _3405 = (0.5 / (((_3394 * ((_3377 * _3395) + _3362)) + 9.9999999392252902907785028219223e-09) + (((_3394 * _3395) + _3362) * _3377))) * _3394;
                                float _4465 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3415 = (_3340 * _3317) * (((_3363 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3385 * _3385) * ((_3330 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3415 * _3199.x;
                                frontier_phi_73_pred_1 = _3415 * _3199.y;
                                frontier_phi_73_pred_2 = _3341 * _3187.z;
                                frontier_phi_73_pred_3 = _3341 * _3187.y;
                                frontier_phi_73_pred_4 = _3341 * _3187.x;
                                frontier_phi_73_pred_5 = _3415 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3419 = frontier_phi_73_pred;
                            _3420 = frontier_phi_73_pred_1;
                            _3424 = frontier_phi_73_pred_2;
                            _3423 = frontier_phi_73_pred_3;
                            _3422 = frontier_phi_73_pred_4;
                            _3421 = frontier_phi_73_pred_5;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            _3131 = _3424 + _3144;
                            _3126 = _3419 + _3139;
                            _3127 = _3420 + _3140;
                            _3128 = _3421 + _3141;
                            if (_3146 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3139 = _3126;
                                _3140 = _3127;
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3146;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3129;
                        frontier_phi_67_pred_1 = _3130;
                        frontier_phi_67_pred_2 = _3131;
                        frontier_phi_67_pred_3 = _3128;
                        frontier_phi_67_pred_4 = _3127;
                        frontier_phi_67_pred_5 = _3126;
                    }
                    _2795 = frontier_phi_67_pred;
                    _2797 = frontier_phi_67_pred_1;
                    _2799 = frontier_phi_67_pred_2;
                    _2793 = frontier_phi_67_pred_3;
                    _2791 = frontier_phi_67_pred_4;
                    _2789 = frontier_phi_67_pred_5;
                    uint _2934 = _2933 + 1u;
                    if (_2934 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2927 = _2789;
                        _2928 = _2791;
                        _2929 = _2793;
                        _2930 = _2795;
                        _2931 = _2797;
                        _2932 = _2799;
                        _2933 = _2934;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2797;
                frontier_phi_55_56_ladder_1 = _2799;
                frontier_phi_55_56_ladder_2 = _2795;
                frontier_phi_55_56_ladder_3 = _2793;
                frontier_phi_55_56_ladder_4 = _2791;
                frontier_phi_55_56_ladder_5 = _2789;
            }
            else
            {
                frontier_phi_55_56_ladder = _2683;
                frontier_phi_55_56_ladder_1 = _2685;
                frontier_phi_55_56_ladder_2 = _2681;
                frontier_phi_55_56_ladder_3 = _2679;
                frontier_phi_55_56_ladder_4 = _2677;
                frontier_phi_55_56_ladder_5 = _2675;
            }
            _2788 = frontier_phi_55_56_ladder_5;
            _2790 = frontier_phi_55_56_ladder_4;
            _2792 = frontier_phi_55_56_ladder_3;
            _2794 = frontier_phi_55_56_ladder_2;
            _2796 = frontier_phi_55_56_ladder;
            _2798 = frontier_phi_55_56_ladder_1;
        }
        float _2803 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2587 = (_2803 * _2794) + _2039;
        _2589 = (_2803 * _2796) + _2041;
        _2591 = (_2803 * _2798) + _2043;
        _2593 = ((_2788 * 0.039999999105930328369140625) * _2803) + _2372;
        _2595 = ((_2790 * 0.039999999105930328369140625) * _2803) + _2374;
        _2597 = ((_2792 * 0.039999999105930328369140625) * _2803) + _2376;
    }
    else
    {
        _2587 = _2039;
        _2589 = _2041;
        _2591 = _2043;
        _2593 = _2372;
        _2595 = _2374;
        _2597 = _2376;
    }
    float _4481 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4492 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4503 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    uint _2617 = _247 + 6u;
    float _2625 = _791 / cbSceneParam._m0[86u].x;
    float _2626 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2640 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2642 = _2640.x;
    float _2643 = _2640.y;
    float _2644 = _2640.z;
    float _2645 = _2640.w;
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _2700 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _2701 = _2700 / _725;
        float _2712 = _2701 * _776;
        float _2713 = _777 * _2701;
        float _2714 = (-0.0) - _2713;
        float _2716 = _2701 * _778;
        float _2718 = (cbSceneParam._m0[77u].w * _2714) / _2700;
        float _2719 = _2718 + cbSceneParam._m0[79u].w;
        float _2720 = cbSceneParam._m0[79u].w - _2713;
        float _2726 = sqrt(((_2712 * _2712) + (_2713 * _2713)) + (_2716 * _2716));
        float _2729 = (1.0 - (cbSceneParam._m0[77u].w / _2700)) * _2726;
        float _2734 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2736 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2714 - _2718) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2719 > 0.0) ? exp2(_2734 * _2719) : (2.0 - exp2(_2736 * _2719))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2729;
        }
        else
        {
            float _2849 = 1.0 / cbSceneParam._m0[80u].x;
            float _2850 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : max(_2719, _2720));
            float _2851 = isnan(_2720) ? _2719 : (isnan(_2719) ? _2720 : min(_2719, _2720));
            float _2860 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : min(_2850, 0.0));
            float _2861 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : min(_2851, 0.0));
            _2889 = ((abs(_2726 / _2714) * cbSceneParam._m0[80u].y) * ((((_2860 - _2861) * 2.0) - ((exp2(_2734 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)))) - exp2(_2734 * (isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0))))) * _2849)) - ((exp2(_2736 * _2860) - exp2(_2736 * _2861)) * _2849))) + (_2729 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2645);
        _2738 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2642;
        _2740 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2643;
        _2742 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2644;
        _2744 = _2900 * _2645;
    }
    else
    {
        _2738 = _2642;
        _2740 = _2643;
        _2742 = _2644;
        _2744 = _2645;
    }
    float _2756 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2757 = _2756 == 3.0;
    float _2758 = log2(_2744);
    float _2765 = exp2(_2758 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2587 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _854))) + ((_2593 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1657)) * cbPerFrame._m0[3u].x));
    float _2766 = exp2(_2758 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2589 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _854))) + ((_2595 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1657)) * cbPerFrame._m0[3u].x));
    float _2767 = exp2(_2758 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2591 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _854))) + ((_2597 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1657)) * cbPerFrame._m0[3u].x));
    float _2776 = (_2756 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2776 * (_2757 ? _2765 : (_2765 + (cbSceneParam._m0[72u].w * _2738)));
    SV_Target.y = _2776 * (_2757 ? _2766 : (_2766 + (cbSceneParam._m0[72u].w * _2740)));
    SV_Target.z = _2776 * (_2757 ? _2767 : (_2767 + (cbSceneParam._m0[72u].w * _2742)));
    SV_Target.w = cbInstanceData._m0[_2617].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2617].w;
}


