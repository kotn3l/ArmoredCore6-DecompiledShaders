#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1319;
float _3701;
float _3702;
float _3703;
float _3704;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3713 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _392) + _486;
    float _498 = ((((_465.x - _484) * _392) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _392) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3724 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _555 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _558 = ((isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : min(_555, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _567 = (_558 - ((((((_548 - _549) * cbMtdParam._m0[24u].z) + _549) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _558))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3745 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _575 = (_568 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) + _399;
    float _576 = (_568 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) + _400;
    float _577 = (_568 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) + _401;
    vec4 _589 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _619 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3756 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _628 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _620) + _575;
    float _629 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _620) + _576;
    float _630 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _620) + _577;
    float _635 = (((_440.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    float _639 = ((_521.z - _635) * cbMtdParam._m0[19u].w) + _635;
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _660 = (_653.x * 2.0) + (-1.0);
    float _661 = (_653.y * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3767 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _670 = (_568 * (_653.z - _639)) + _639;
    float _673 = ((cbMtdParam._m0[23u].y - _670) * _620) + _670;
    vec4 _692 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _698 = (_692.x * 2.0) + (-1.0);
    float _699 = (_692.y * 2.0) + (-1.0);
    float _700 = dot(vec2(_698, _699), vec2(_698, _699));
    float _3778 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _714 = (_498 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_440.x * 2.0) + (-1.0)))) + (((_521.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _715 = (_499 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_440.y * 2.0) + (-1.0)))) + (((_521.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _727 = (((_660 - _714) + (cbMtdParam._m0[21u].x * _714)) * _568) + _714;
    float _728 = (((_661 - _715) + (cbMtdParam._m0[21u].x * _715)) * _568) + _715;
    float _729 = (_568 * (sqrt(1.0 - (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) - _505)) + _505;
    float _740 = (((_698 - _727) + (_727 * cbMtdParam._m0[22u].z)) * _620) + _727;
    float _741 = (((_699 - _728) + (_728 * cbMtdParam._m0[22u].z)) * _620) + _728;
    float _742 = ((sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _729) * _620) + _729;
    float _744 = cbMtdParam._m0[22u].x + _521.w;
    float _747 = fma(_742, _244 * NORMAL.x, fma(_741, _251 * TANGENT.x, (_237 * _229) * _740));
    float _750 = fma(_742, _244 * NORMAL.y, fma(_741, _251 * TANGENT.y, (_237 * _230) * _740));
    float _753 = fma(_742, _244 * NORMAL.z, fma(_741, _251 * TANGENT.z, (_237 * _231) * _740));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3789 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _761 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3811 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3822 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3833 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _830 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _820);
    float _831 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _820);
    float _832 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _820);
    float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
    float _837 = _830 * _836;
    float _838 = _831 * _836;
    float _839 = _832 * _836;
    vec4 _844 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _846 = _844.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1000 = sqrt(((_830 * _830) + (_831 * _831)) + (_832 * _832));
        float _1006 = (cbMatDynParam._m0[5u].x * _1000) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1011 = (cbMatDynParam._m0[5u].z * _1000) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _1007)) + _1007) < ((_846 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _857 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _858 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _876 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _879 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _882 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _895 = _257 + 9u;
    uint _896 = _895 + uint(cbMatDynParam._m0[0u].w);
    float _902 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_896].x;
    float _903 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_896].y;
    float _904 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_896].z;
    float _3866 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    vec4 _916 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _857, cbSceneParam._m0[86u].y * _858));
    float _920 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * TEXCOORD_5.w) * _916.x;
    float _921 = dot(vec3(_758, _759, _760), vec3(_837, _838, _839));
    float _924 = _921 * 2.0;
    float _928 = (_924 * _758) - _837;
    float _929 = (_924 * _759) - _838;
    float _930 = (_924 * _760) - _839;
    float _934 = abs(dot(vec3(_837, _838, _839), vec3(_758, _759, _760)));
    float _3899 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _936 = sqrt(_761);
    float _949 = exp2((_936 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_936 * 3.0));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1047 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1051 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1076 = _981 + _758;
        float _1077 = _985 + _759;
        float _1078 = _989 + _760;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_758, _759, _760), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3947 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_758, _759, _760), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3980 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_758, _759, _760), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4013 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1365 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1369 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1392 = _981 + _758;
        float _1393 = _985 + _759;
        float _1394 = _989 + _760;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_758, _759, _760), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4076 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_758, _759, _760), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4109 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_758, _759, _760), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4142 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = _1319;
        _1641 = _1319;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1331)) + _1331;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1332)) + _1332;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1333)) + _1333;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _928 * 0.5;
    float _1699 = _929 * 0.5;
    float _1700 = _930 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _761);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1814 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1818 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1822 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1825 = fma(_930, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928));
        float _1828 = fma(_930, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928));
        float _1831 = fma(_930, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928));
        float _1859;
        if (_1825 > 0.0)
        {
            _1859 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1859 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1828 > 0.0)
        {
            _2080 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2326;
        if (_1831 > 0.0)
        {
            _2326 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2326 = frontier_phi_38_33_ladder;
        }
        float _2328 = isnan(_2080) ? _1859 : (isnan(_1859) ? _2080 : min(_1859, _2080));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1825) + _1814;
        float _2334 = (_2329 * _1828) + _1818;
        float _2335 = (_2329 * _1831) + _1822;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_16_38_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1847 = frontier_phi_16_38_ladder_2;
        _1849 = frontier_phi_16_38_ladder_1;
        _1851 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_928, _929, _930), _1767);
        _1847 = _1835.x * cbModelParam._m0[1u].y;
        _1849 = _1835.y * cbModelParam._m0[1u].y;
        _1851 = _1835.z * cbModelParam._m0[1u].y;
    }
    float _1855 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _761);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1855 : min(cbModelParam._m0[25u].w, _1855));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_930, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928));
        float _1923 = fma(_930, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928));
        float _1926 = fma(_930, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928));
        float _2085;
        if (_1920 > 0.0)
        {
            _2085 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2353;
        if (_1923 > 0.0)
        {
            _2353 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2353 = frontier_phi_40_35_ladder;
        }
        float _2558;
        if (_1926 > 0.0)
        {
            _2558 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2558 = frontier_phi_49_46_ladder;
        }
        float _2560 = isnan(_2353) ? _2085 : (isnan(_2085) ? _2353 : min(_2085, _2353));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _1920) + _1909;
        float _2566 = (_2561 * _1923) + _1913;
        float _2567 = (_2561 * _1926) + _1917;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2568;
        float _2571 = _2568 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2567 > _2571) || ((_2567 < _2569) || ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 < _2569) || (_2565 > _2571))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2567, cbModelParam._m0[17u].z, fma(_2566, cbModelParam._m0[17u].y, _2565 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2567, cbModelParam._m0[18u].z, fma(_2566, cbModelParam._m0[18u].y, _2565 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2567, cbModelParam._m0[19u].z, fma(_2566, cbModelParam._m0[19u].y, _2565 * cbModelParam._m0[19u].x))), _1856);
            frontier_phi_25_49_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_25_49_ladder_2;
        _1947 = frontier_phi_25_49_ladder_1;
        _1949 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_928, _929, _930), _1856);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1961 = ((((1.0 - _949) * ((_936 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_949 * _936)) * _920;
    float _1962 = _1961 * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1963 = _1961 * ((cbModelParam._m0[1u].w * (_1947 - _1849)) + _1849);
    float _1964 = _1961 * ((cbModelParam._m0[1u].w * (_1949 - _1851)) + _1851);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    vec4 _1981 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_857, _858));
    float _1983 = _1981.w;
    float _1995 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1983);
    float _1996 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1983);
    float _1997 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1983);
    uvec4 _2001 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2003 = _2001.x * 14u;
    uint _2004 = _2003 + 13u;
    float _2011 = _920 + (-1.0);
    float _2016 = (cbLight._m0[_2004].x * _2011) + 1.0;
    float _2017 = (cbLight._m0[_2004].y * _2011) + 1.0;
    float _2018 = (cbLight._m0[_2004].z * _2011) + 1.0;
    float _2019 = (cbLight._m0[_2004].w * _2011) + 1.0;
    uint _2020 = _2003 + 5u;
    float _2026 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2030 = _2003 + 4u;
    float _2039 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2043 = _2003 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_758, _759, _760));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_758, _759, _760));
    float _4278 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4289 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2020].x * _2026) * _2064) + (((cbLight._m0[_2030].x * _1995) * _2039) * _2062);
    float _2072 = ((_2026 * cbLight._m0[_2020].y) * _2064) + (((cbLight._m0[_2030].y * _1996) * _2039) * _2062);
    float _2073 = ((_2026 * cbLight._m0[_2020].z) * _2064) + (((cbLight._m0[_2030].z * _1997) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2003 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2003 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2003 + 2u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4300 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _2117 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2297 = _2003 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_2003 + 3u].xyz), vec3(_758, _759, _760)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4316 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2316 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2135 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2090;
        _2137 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2092;
        _2139 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2094;
    }
    uint _2142 = _2003 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _761) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2003].x + _837;
    float _2158 = cbLight._m0[_2003].y + _838;
    float _2159 = cbLight._m0[_2003].z + _839;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2003].xyz));
    float _4332 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _4343 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2171 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2172 = dot(vec3(_758, _759, _760), vec3(_2164, _2165, _2166));
    float _4354 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2164, _2165, _2166));
    float _4365 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2196 = 1.0 - _2156;
    float _2207 = (0.5 / (((_2171 * ((_2170 * _2196) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2196) + _2156) * _2170))) * _2170;
    float _4376 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2223 = _2003 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _761) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2043].x + _837;
    float _2237 = cbLight._m0[_2043].y + _838;
    float _2238 = cbLight._m0[_2043].z + _839;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2043].xyz));
    float _4387 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2250 = dot(vec3(_758, _759, _760), vec3(_2243, _2244, _2245));
    float _4398 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2243, _2244, _2245));
    float _4409 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2235;
    float _2282 = (0.5 / (((_2171 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2272) + _2235) * _2249))) * _2249;
    float _4420 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2294 = (((_2271 * cbLight._m0[_2223].x) * _2284) * _2026) + ((((cbLight._m0[_2142].x * _1995) * _2195) * _2209) * _2039);
    float _2295 = (((_2271 * cbLight._m0[_2223].y) * _2284) * _2026) + ((((cbLight._m0[_2142].y * _1996) * _2195) * _2209) * _2039);
    float _2296 = (((_2271 * cbLight._m0[_2223].z) * _2284) * _2026) + ((((cbLight._m0[_2142].z * _1997) * _2195) * _2209) * _2039);
    float _2358;
    float _2360;
    float _2362;
    if (_2079)
    {
        _2358 = _2294;
        _2360 = _2295;
        _2362 = _2296;
    }
    else
    {
        uint _2364 = _2003 + 2u;
        uint _2368 = _2003 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _761) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _837;
        float _2385 = cbLight._m0[_2364].y + _838;
        float _2386 = cbLight._m0[_2364].z + _839;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2364].xyz));
        float _4431 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2398 = dot(vec3(_758, _759, _760), vec3(_2391, _2392, _2393));
        float _4442 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4453 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2420 = 1.0 - _2383;
        float _2430 = (0.5 / (((_2171 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2420) + _2383) * _2397))) * _2397;
        float _4464 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2358 = (((_2419 * cbLight._m0[_2368].x) * _2432) * _2433) + _2294;
        _2360 = (((_2419 * cbLight._m0[_2368].y) * _2432) * _2433) + _2295;
        _2362 = (((_2419 * cbLight._m0[_2368].z) * _2432) * _2433) + _2296;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2097)
    {
        _2468 = _2358;
        _2470 = _2360;
        _2472 = _2362;
    }
    else
    {
        uint _2479 = _2003 + 3u;
        uint _2483 = _2003 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _761) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _837;
        float _2500 = cbLight._m0[_2479].y + _838;
        float _2501 = cbLight._m0[_2479].z + _839;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_2479].xyz));
        float _4480 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2513 = dot(vec3(_758, _759, _760), vec3(_2506, _2507, _2508));
        float _4491 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4502 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2171 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2535) + _2498) * _2512))) * _2512;
        float _4513 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2468 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2358;
        _2470 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2360;
        _2472 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2362;
    }
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_2001.y == 0u)
    {
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2623;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2623;
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2623;
        uvec4 _2638 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2639 = _2638.x;
        uint _2650 = uint((float(_2638.y) * floor(float(uint(cbSceneParam._m0[85u].y * _858) / _2639))) + floor(float(uint(cbSceneParam._m0[85u].x * _857) / _2639)));
        float _2660 = (log2(_2626 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2661 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        uint _2664 = uint(isnan(14.0) ? _2661 : (isnan(_2661) ? 14.0 : min(_2661, 14.0)));
        uvec4 _2669 = texelFetch(g_lightClusterGridBuffer, int(((_2664 << 2u) + (_2650 << 6u)) >> 2u));
        uint _2670 = _2669.x;
        uint _2671 = _2638.z;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((((1u << ((_2671 >> 4u) & 15u)) + 4294967295u) & _2670) == 0u) || ((_2671 & 240u) == 0u))
        {
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
        }
        else
        {
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2940)
                {
                    frontier_phi_66_pred = _2924;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                else
                {
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    uint _3075;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2939;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3079 = uint(findLSB(_3075)) + (_2930 << 5u);
                        uint _3076 = (_3075 + 4294967295u) & _3075;
                        uint _3081 = _3079 * 48u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3101 = (_3079 * 48u) + 4u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3120 = (_3079 * 48u) + 8u;
                        vec3 _3131 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x));
                        float _3135 = _3095.x - _2624;
                        float _3136 = _3095.y - _2625;
                        float _3137 = _3095.z - _2626;
                        float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                        float _3141 = inversesqrt(_3138);
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3145 = dot(vec3(_876, _879, _882), vec3(_3142, _3143, _3144));
                        float _3150 = 1.0 - (_3138 * _3095.w);
                        float _4539 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3152 = sqrt(_3138) * _3114.w;
                        float _3155 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3145) + _3156;
                        float _3162 = _3152 * _3152;
                        float _3166 = ((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3151) / ((_3162 * 0.699999988079071044921875) + 1.0);
                        float _3170 = (-0.0) - _2624;
                        float _3171 = (-0.0) - _2625;
                        float _3172 = (-0.0) - _2626;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3187 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                        float _3188 = 1.0 - _936;
                        float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                        float _3196 = _3195 * _3195;
                        float _3197 = _3196 * _3196;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3200 = _3179 + _3144;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3208 = dot(vec3(_876, _879, _882), vec3(_3177, _3178, _3179));
                        float _4555 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3212 = dot(vec3(_876, _879, _882), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                        float _4566 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                        float _3220 = _3155 * _3196;
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3145) + _3221;
                        float _4577 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3226 = 1.0 - _3196;
                        float _3236 = (0.5 / (((_3225 * ((_3211 * _3226) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3196) * _3211))) * _3225;
                        float _4588 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3247 = (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) / ((_3219 * _3219) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125))) * _3151;
                        _2999 = (_3166 * _3114.x) + _3072;
                        _3000 = (_3166 * _3114.y) + _3073;
                        _3001 = (_3166 * _3114.z) + _3074;
                        _2996 = (_3247 * _3131.x) + _3069;
                        _2997 = (_3247 * _3131.y) + _3070;
                        _2998 = (_3247 * _3131.z) + _3071;
                        if (_3076 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3076;
                        }
                    }
                    frontier_phi_66_pred = _2996;
                    frontier_phi_66_pred_1 = _3001;
                    frontier_phi_66_pred_2 = _3000;
                    frontier_phi_66_pred_3 = _2999;
                    frontier_phi_66_pred_4 = _2998;
                    frontier_phi_66_pred_5 = _2997;
                }
                _2772 = frontier_phi_66_pred;
                _2782 = frontier_phi_66_pred_1;
                _2780 = frontier_phi_66_pred_2;
                _2778 = frontier_phi_66_pred_3;
                _2776 = frontier_phi_66_pred_4;
                _2774 = frontier_phi_66_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2772;
                    _2925 = _2774;
                    _2926 = _2776;
                    _2927 = _2778;
                    _2928 = _2780;
                    _2929 = _2782;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
        }
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.z;
        uint _2788 = (_2786 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2788) & _2670) == 0u)
        {
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
            float _2918 = _2917 * _2624;
            float _2919 = _2917 * _2625;
            float _2920 = _2917 * _2626;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2788 < ((_2786 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3052 = _2771;
                float _3053 = _2773;
                float _3054 = _2775;
                float _3055 = _2777;
                float _3056 = _2779;
                float _3057 = _2781;
                uint _3058 = _2788;
                uint _3067;
                bool _3068;
                for (;;)
                {
                    _3067 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                    _3068 = _3067 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3068)
                    {
                        frontier_phi_77_pred = _3057;
                        frontier_phi_77_pred_1 = _3056;
                        frontier_phi_77_pred_2 = _3055;
                        frontier_phi_77_pred_3 = _3054;
                        frontier_phi_77_pred_4 = _3053;
                        frontier_phi_77_pred_5 = _3052;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        uint _3280 = _3067;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3349;
                        vec4 _3364;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3291 = ((_3058 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3336 = (_3291 * 40u) + 16u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3291 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3291 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3291 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_2626, _3398.z, fma(_2625, _3398.y, _3398.x * _2624)) + _3398.w;
                            _3411 = !((fma(_2626, _3379.z, fma(_2625, _3379.y, _3379.x * _2624)) + _3379.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3411)
                            {
                                float _3438 = _3306.x - _2624;
                                float _3439 = _3306.y - _2625;
                                float _3440 = _3306.z - _2626;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3307 * _3307));
                                float _4599 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3456 = sqrt(_3441) * _3322.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3462 = ((1.0 - _3459) * dot(vec3(_3445, _3446, _3447), vec3(_876, _879, _882))) + _3459;
                                float _3465 = _3456 * _3456;
                                float _3469 = (fma(_2626, _3349.z, fma(_2625, _3349.y, _3349.x * _2624)) + _3349.w) / _3410;
                                float _3470 = (fma(_2626, _3364.z, fma(_2625, _3364.y, _3364.x * _2624)) + _3364.w) / _3410;
                                float _3474 = 1.0 - dot(vec2(_3469, _3470), vec2(_3469, _3470));
                                float _4615 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3476 = _3475 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3452) / ((_3465 * 0.699999988079071044921875) + 1.0));
                                float _3488 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                                float _3489 = 1.0 - _936;
                                float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                                float _3497 = _3496 * _3496;
                                float _3498 = _3497 * _3497;
                                float _3499 = _3445 - _2918;
                                float _3500 = _3446 - _2919;
                                float _3501 = _3447 - _2920;
                                float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                                float _3509 = dot(vec3(_876, _879, _882), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4626 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3513 = dot(vec3(_876, _879, _882), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                                float _4637 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                                float _3521 = _3458 * _3497;
                                float _3522 = _3521 * _3521;
                                float _3528 = ((1.0 - _3522) * dot(vec3(_876, _879, _882), vec3(_3445, _3446, _3447))) + _3522;
                                float _4648 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3530 = 1.0 - _3497;
                                float _3540 = (0.5 / (((_3529 * ((_3512 * _3530) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3497) * _3512))) * _3529;
                                float _4659 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3550 = (_3475 * _3452) * (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) / ((_3520 * _3520) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3476 * _3322.y;
                                frontier_phi_83_pred_1 = _3476 * _3322.x;
                                frontier_phi_83_pred_2 = _3550 * _3334.z;
                                frontier_phi_83_pred_3 = _3550 * _3334.y;
                                frontier_phi_83_pred_4 = _3550 * _3334.x;
                                frontier_phi_83_pred_5 = _3476 * _3322.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3558 = frontier_phi_83_pred;
                            _3557 = frontier_phi_83_pred_1;
                            _3556 = frontier_phi_83_pred_2;
                            _3555 = frontier_phi_83_pred_3;
                            _3554 = frontier_phi_83_pred_4;
                            _3559 = frontier_phi_83_pred_5;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3266;
                        frontier_phi_77_pred_1 = _3265;
                        frontier_phi_77_pred_2 = _3264;
                        frontier_phi_77_pred_3 = _3263;
                        frontier_phi_77_pred_4 = _3262;
                        frontier_phi_77_pred_5 = _3261;
                    }
                    _2903 = frontier_phi_77_pred;
                    _2901 = frontier_phi_77_pred_1;
                    _2899 = frontier_phi_77_pred_2;
                    _2897 = frontier_phi_77_pred_3;
                    _2895 = frontier_phi_77_pred_4;
                    _2893 = frontier_phi_77_pred_5;
                    uint _3059 = _3058 + 1u;
                    if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3052 = _2893;
                        _3053 = _2895;
                        _3054 = _2897;
                        _3055 = _2899;
                        _3056 = _2901;
                        _3057 = _2903;
                        _3058 = _3059;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2897;
                frontier_phi_58_59_ladder_1 = _2903;
                frontier_phi_58_59_ladder_2 = _2901;
                frontier_phi_58_59_ladder_3 = _2899;
                frontier_phi_58_59_ladder_4 = _2895;
                frontier_phi_58_59_ladder_5 = _2893;
            }
            else
            {
                frontier_phi_58_59_ladder = _2775;
                frontier_phi_58_59_ladder_1 = _2781;
                frontier_phi_58_59_ladder_2 = _2779;
                frontier_phi_58_59_ladder_3 = _2777;
                frontier_phi_58_59_ladder_4 = _2773;
                frontier_phi_58_59_ladder_5 = _2771;
            }
            _2892 = frontier_phi_58_59_ladder_5;
            _2894 = frontier_phi_58_59_ladder_4;
            _2896 = frontier_phi_58_59_ladder;
            _2898 = frontier_phi_58_59_ladder_3;
            _2900 = frontier_phi_58_59_ladder_2;
            _2902 = frontier_phi_58_59_ladder_1;
        }
        float _2907 = isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0));
        _2683 = (_2907 * _2898) + _2135;
        _2685 = (_2907 * _2900) + _2137;
        _2687 = (_2907 * _2902) + _2139;
        _2689 = ((_2892 * 0.039999999105930328369140625) * _2907) + _2468;
        _2691 = ((_2894 * 0.039999999105930328369140625) * _2907) + _2470;
        _2693 = ((_2896 * 0.039999999105930328369140625) * _2907) + _2472;
    }
    else
    {
        _2683 = _2135;
        _2685 = _2137;
        _2687 = _2139;
        _2689 = _2468;
        _2691 = _2470;
        _2693 = _2472;
    }
    float _4675 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4686 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4697 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _2710 = ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2683 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _920))) + ((_2689 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2711 = ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2685 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _920))) + ((_2691 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    float _2712 = ((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2687 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _920))) + ((_2693 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1756)) * cbPerFrame._m0[3u].x);
    uint _2713 = _257 + 6u;
    float _2721 = _857 / cbSceneParam._m0[86u].x;
    float _2722 = _858 / cbSceneParam._m0[86u].y;
    vec4 _2736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2738 = _2736.x;
    float _2739 = _2736.y;
    float _2740 = _2736.z;
    float _2741 = _2736.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _2796 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _2797 = _2796 / _779;
        float _2808 = _2797 * _830;
        float _2809 = _831 * _2797;
        float _2810 = (-0.0) - _2809;
        float _2812 = _2797 * _832;
        float _2814 = (cbSceneParam._m0[77u].w * _2810) / _2796;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2809;
        float _2822 = sqrt(((_2808 * _2808) + (_2809 * _2809)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2796)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2810 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2955 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _3009 = ((abs(_2822 / _2810) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2832 * _2964) - exp2(_2832 * _2965)) * _2953))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2741);
        _2834 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2738;
        _2836 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2739;
        _2838 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2740;
        _2840 = _3020 * _2741;
    }
    else
    {
        _2834 = _2738;
        _2836 = _2739;
        _2838 = _2740;
        _2840 = _2741;
    }
    bool _3047;
    vec4 _2850;
    vec4 _2872;
    float _2874;
    float _2878;
    float _2879;
    float _2880;
    float _2881;
    bool _2891;
    for (;;)
    {
        _2850 = cbMatDynParam._m0[0u];
        float _2852 = roundEven(_2850.y);
        bool _2853 = _2852 == 3.0;
        float _2854 = log2(_2840);
        float _2861 = exp2(_2854 * cbSceneParam._m0[78u].x) * _2710;
        float _2862 = exp2(_2854 * cbSceneParam._m0[78u].y) * _2711;
        float _2863 = exp2(_2854 * cbSceneParam._m0[78u].z) * _2712;
        float _2870 = _846 + (-0.5);
        _2872 = cbMtdParam._m0[1u];
        _2874 = _2872.y * _2870;
        float _2877 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2878 = _2877 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
        _2879 = _2877 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
        _2880 = _2877 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
        _2881 = _2870 * 0.999000012874603271484375;
        _2891 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2891)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2881) < 0.5)
            {
                _3047 = true;
                break;
            }
        }
        uint _2988 = _895 + uint(_2850.w);
        if ((cbInstanceData._m0[_2988].w < 1.0) && ((cbInstanceData._m0[_2988].w + _2881) < 0.5))
        {
            _3047 = true;
            break;
        }
        if ((_2874 + 1.0) < _2872.x)
        {
            _3047 = true;
            break;
        }
        _3047 = false;
        break;
    }
    float _3252;
    if (_3047)
    {
        discard_state = true;
        _3252 = 0.0;
    }
    else
    {
        _3252 = cbInstanceData._m0[_2713].w;
    }
    SV_Target.x = _2878;
    SV_Target.y = _2879;
    SV_Target.z = _2880;
    SV_Target.w = _3252;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2713].w;
    discard_exit();
}


