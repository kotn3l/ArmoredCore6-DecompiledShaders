#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1170;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3476 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3487 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3498 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3509 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) + _428;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _499 = _497.x;
    float _500 = _497.y;
    float _501 = _497.z;
    float _510 = ((_480.z - _501) * _409) + _501;
    float _513 = ((((_480.x - _499) * _409) + _499) * 2.0) + (-1.0);
    float _514 = ((((_480.y - _500) * _409) + _500) * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3520 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))));
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _553 = _551.x;
    float _554 = 1.0 - _553;
    float _567 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_553 - _554) * cbMtdParam._m0[24u].z) + _554) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3531 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _575 = (_568 * (cbMtdParam._m0[17u].x - _435)) + _435;
    float _576 = (_568 * (cbMtdParam._m0[17u].y - _436)) + _436;
    float _577 = (_568 * (cbMtdParam._m0[17u].z - _437)) + _437;
    float _582 = (((_455.z - _510) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _510;
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _602 = (_595.x * 2.0) + (-1.0);
    float _603 = (_595.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3542 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _612 = (_568 * (_595.z - _582)) + _582;
    float _617 = _513 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_455.x * 2.0) + (-1.0)));
    float _618 = _514 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_455.y * 2.0) + (-1.0)));
    float _630 = (((_602 - _617) + (cbMtdParam._m0[21u].x * _617)) * _568) + _617;
    float _631 = (((_603 - _618) + (cbMtdParam._m0[21u].x * _618)) * _568) + _618;
    float _632 = (_568 * (sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) - _520)) + _520;
    float _634 = cbMtdParam._m0[22u].x + _533.w;
    float _637 = fma(_632, _226 * NORMAL.x, fma(_631, _233 * TANGENT.x, (_219 * _211) * _630));
    float _640 = fma(_632, _226 * NORMAL.y, fma(_631, _233 * TANGENT.y, (_219 * _212) * _630));
    float _643 = fma(_632, _226 * NORMAL.z, fma(_631, _233 * TANGENT.z, (_219 * _213) * _630));
    float _647 = inversesqrt(dot(vec3(_637, _640, _643), vec3(_637, _640, _643)));
    float _648 = _647 * _637;
    float _649 = _647 * _640;
    float _650 = _647 * _643;
    float _3553 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _651 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _3575 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3586 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3597 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_650, cbSceneParam._m0[5u].z, fma(_649, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _648));
    float _758 = fma(_650, cbSceneParam._m0[6u].z, fma(_649, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _648));
    float _761 = fma(_650, cbSceneParam._m0[7u].z, fma(_649, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _648));
    uint _775 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_775].z;
    float _3608 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    vec4 _795 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _799 = ((isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * TEXCOORD_5.w) * _795.x;
    float _800 = dot(vec3(_648, _649, _650), vec3(_728, _729, _730));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _648) - _728;
    float _808 = (_803 * _649) - _729;
    float _809 = (_803 * _650) - _730;
    float _813 = abs(dot(vec3(_728, _729, _730), vec3(_648, _649, _650)));
    float _3641 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_651);
    float _828 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1169;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _898 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _902 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _927 = _860 + _648;
        float _928 = _864 + _649;
        float _929 = _868 + _650;
        float _939 = fma(_929, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927)) - _894;
        float _940 = fma(_929, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927)) - _898;
        float _941 = fma(_929, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927)) - _902;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _997 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_963.x + (-0.5));
        float _999 = _997 * (_963.y + (-0.5));
        float _1000 = _997 * (_963.z + (-0.5));
        float _1007 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_970.x + (-0.5));
        float _1009 = _1007 * (_970.y + (-0.5));
        float _1010 = _1007 * (_970.z + (-0.5));
        float _1017 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_977.x + (-0.5));
        float _1019 = _1017 * (_977.y + (-0.5));
        float _1020 = _1017 * (_977.z + (-0.5));
        float _1027 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_984.x + (-0.5));
        float _1029 = _1027 * (_984.y + (-0.5));
        float _1030 = _1027 * (_984.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1051 = (dot(vec3(_648, _649, _650), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1061 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3689 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1063 + 1.0))) + _1068) * _1031;
        float _1078 = _999 * 0.5;
        float _1079 = _1009 * 0.5;
        float _1080 = _1019 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_648, _649, _650), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3722 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1105 + 1.0))) + _1110) * _1032;
        float _1120 = _1000 * 0.5;
        float _1121 = _1010 * 0.5;
        float _1122 = _1020 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_648, _649, _650), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3755 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1147 + 1.0))) + _1152) * _1033;
        _1169 = _1000;
        _1171 = _999;
        _1172 = _998;
        _1173 = _1010;
        _1174 = _1009;
        _1175 = _1008;
        _1176 = _1020;
        _1177 = _1019;
        _1178 = _1018;
        _1179 = _1033;
        _1180 = _1032;
        _1181 = _1031;
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _1170;
        _1171 = _1170;
        _1172 = _1170;
        _1173 = _1170;
        _1174 = _1170;
        _1175 = _1170;
        _1176 = _1170;
        _1177 = _1170;
        _1178 = _1170;
        _1179 = _1170;
        _1180 = _1170;
        _1181 = _1170;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1209 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1213 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1217 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1240 = _860 + _648;
        float _1241 = _864 + _649;
        float _1242 = _868 + _650;
        float _1252 = fma(_1242, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1240)) - _1209;
        float _1253 = fma(_1242, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1240)) - _1213;
        float _1254 = fma(_1242, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1240)) - _1217;
        float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
        float _1271 = ((_1258 * _1252) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1209 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1258 * _1253) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1213 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1258 * _1254) / cbModelParam._m0[35u].z) + ((((((_1217 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1271, _1272, _1273), 0.0);
        float _1308 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1275.x + (-0.5));
        float _1310 = _1308 * (_1275.y + (-0.5));
        float _1311 = _1308 * (_1275.z + (-0.5));
        float _1318 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1282.x + (-0.5));
        float _1320 = _1318 * (_1282.y + (-0.5));
        float _1321 = _1318 * (_1282.z + (-0.5));
        float _1328 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1289.x + (-0.5));
        float _1330 = _1328 * (_1289.y + (-0.5));
        float _1331 = _1328 * (_1289.z + (-0.5));
        float _1338 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1296.x + (-0.5));
        float _1340 = _1338 * (_1296.y + (-0.5));
        float _1341 = _1338 * (_1296.z + (-0.5));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = _1309 * 0.5;
        float _1346 = _1319 * 0.5;
        float _1347 = _1329 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_648, _649, _650), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3818 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1372 + 1.0))) + _1377) * _1342;
        float _1387 = _1310 * 0.5;
        float _1388 = _1320 * 0.5;
        float _1389 = _1330 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_648, _649, _650), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3851 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1414 + 1.0))) + _1419) * _1343;
        float _1429 = _1311 * 0.5;
        float _1430 = _1321 * 0.5;
        float _1431 = _1331 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_648, _649, _650), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _3884 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1456 + 1.0))) + _1461) * _1344;
        _1478 = _1311;
        _1479 = _1310;
        _1480 = _1309;
        _1481 = _1321;
        _1482 = _1320;
        _1483 = _1319;
        _1484 = _1331;
        _1485 = _1330;
        _1486 = _1329;
        _1487 = _1344;
        _1488 = _1343;
        _1489 = _1342;
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
    }
    else
    {
        _1478 = _1170;
        _1479 = _1170;
        _1480 = _1170;
        _1481 = _1170;
        _1482 = _1170;
        _1483 = _1170;
        _1484 = _1170;
        _1485 = _1170;
        _1486 = _1170;
        _1487 = _1170;
        _1488 = _1170;
        _1489 = _1170;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1182)) + _1182;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1525 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1503, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1528 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1503, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1531 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1503, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1502));
    float _1546 = _807 * 0.5;
    float _1547 = _808 * 0.5;
    float _1548 = _809 * 0.5;
    float _1549 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1552 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1555 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1589;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1562 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1169, _1173, _1176, _1179));
        float _1566 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1570 = dot(vec4(_1546, _1547, _1548, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1577 = dot(vec4(cbModelParam._m0[39u]), vec4(_1546, _1547, _1548, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1577) ? 0.0 : (isnan(0.0) ? _1577 : max(0.0, _1577))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1600;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1591 = dot(vec4(cbModelParam._m0[40u]), vec4(_1546, _1547, _1548, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1604 = (_1600 * cbModelParam._m0[1u].x) + (_1589 * (1.0 - cbModelParam._m0[1u].x));
    float _1614 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _651);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1614 : min(cbModelParam._m0[25u].z, _1614));
    float _1696;
    float _1698;
    float _1700;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1663 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1667 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1671 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1674 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1677 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1680 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1708;
        if (_1674 > 0.0)
        {
            _1708 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1708 = frontier_phi_14_12_ladder;
        }
        float _1909;
        if (_1677 > 0.0)
        {
            _1909 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1909 = frontier_phi_23_19_ladder;
        }
        float _2152;
        if (_1680 > 0.0)
        {
            _2152 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2152 = frontier_phi_35_30_ladder;
        }
        float _2154 = isnan(_1909) ? _1708 : (isnan(_1708) ? _1909 : min(_1708, _1909));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1674) + _1663;
        float _2160 = (_2155 * _1677) + _1667;
        float _2161 = (_2155 * _1680) + _1671;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2164 = (-1.0) - _2162;
        float _2166 = _2162 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2161 > _2166) || ((_2161 < _2164) || ((_2160 > _2166) || ((_2160 < _2164) || ((_2159 < _2164) || (_2159 > _2166))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2161, cbModelParam._m0[9u].z, fma(_2160, cbModelParam._m0[9u].y, _2159 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2161, cbModelParam._m0[10u].z, fma(_2160, cbModelParam._m0[10u].y, _2159 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2161, cbModelParam._m0[11u].z, fma(_2160, cbModelParam._m0[11u].y, _2159 * cbModelParam._m0[11u].x))), _1615);
            frontier_phi_13_35_ladder = _2285.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2285.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2285.x * cbModelParam._m0[1u].y;
        }
        _1696 = frontier_phi_13_35_ladder_2;
        _1698 = frontier_phi_13_35_ladder_1;
        _1700 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1615);
        _1696 = _1684.x * cbModelParam._m0[1u].y;
        _1698 = _1684.y * cbModelParam._m0[1u].y;
        _1700 = _1684.z * cbModelParam._m0[1u].y;
    }
    float _1704 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _651);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1704 : min(cbModelParam._m0[25u].w, _1704));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1759 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1763 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1767 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1770 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1773 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1776 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1914;
        if (_1770 > 0.0)
        {
            _1914 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1914 = frontier_phi_25_21_ladder;
        }
        float _2179;
        if (_1773 > 0.0)
        {
            _2179 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2179 = frontier_phi_37_32_ladder;
        }
        float _2384;
        if (_1776 > 0.0)
        {
            _2384 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2384 = frontier_phi_46_43_ladder;
        }
        float _2386 = isnan(_2179) ? _1914 : (isnan(_1914) ? _2179 : min(_1914, _2179));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1770) + _1759;
        float _2392 = (_2387 * _1773) + _1763;
        float _2393 = (_2387 * _1776) + _1767;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1705);
            frontier_phi_22_46_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1795 = frontier_phi_22_46_ladder_2;
        _1797 = frontier_phi_22_46_ladder_1;
        _1799 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1779 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1705);
        _1795 = _1779.x * cbModelParam._m0[1u].z;
        _1797 = _1779.y * cbModelParam._m0[1u].z;
        _1799 = _1779.z * cbModelParam._m0[1u].z;
    }
    float _1811 = ((((1.0 - _828) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_828 * _815)) * _799;
    float _1812 = _1811 * ((cbModelParam._m0[1u].w * (_1795 - _1696)) + _1696);
    float _1813 = _1811 * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1814 = _1811 * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1817 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1820 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1823 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, _1812 * cbSceneParam._m0[91u].x));
    uvec4 _1833 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1835 = _1833.x * 14u;
    uint _1836 = _1835 + 13u;
    float _1843 = _799 + (-1.0);
    float _1848 = (cbLight._m0[_1836].x * _1843) + 1.0;
    float _1849 = (cbLight._m0[_1836].y * _1843) + 1.0;
    float _1850 = (cbLight._m0[_1836].z * _1843) + 1.0;
    float _1851 = (cbLight._m0[_1836].w * _1843) + 1.0;
    uint _1852 = _1835 + 5u;
    float _1858 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1862 = _1835 + 4u;
    float _1868 = isnan(1.0) ? _1848 : (isnan(_1848) ? 1.0 : min(_1848, 1.0));
    uint _1872 = _1835 | 1u;
    float _1883 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_648, _649, _650));
    float _1886 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_648, _649, _650));
    float _4020 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _4031 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1891 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * 0.3183098733425140380859375;
    float _1893 = (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * 0.3183098733425140380859375;
    float _1900 = ((cbLight._m0[_1852].x * _1858) * _1893) + ((cbLight._m0[_1862].x * _1868) * _1891);
    float _1901 = ((_1858 * cbLight._m0[_1852].y) * _1893) + ((_1868 * cbLight._m0[_1862].y) * _1891);
    float _1902 = ((_1858 * cbLight._m0[_1852].z) * _1893) + ((_1868 * cbLight._m0[_1862].z) * _1891);
    uvec4 _1906 = floatBitsToUint(cbLight._m0[_1835 + 12u]);
    bool _1908 = _1906.x == 0u;
    float _1919;
    float _1921;
    float _1923;
    if (_1908)
    {
        _1919 = _1900;
        _1921 = _1901;
        _1923 = _1902;
    }
    else
    {
        uint _1927 = _1835 + 6u;
        float _1943 = (dot(vec3(cbLight._m0[_1835 + 2u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _4042 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1946 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _1919 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1900;
        _1921 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1901;
        _1923 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1902;
    }
    bool _1926 = _1906.y == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1926)
    {
        _1964 = _1919;
        _1966 = _1921;
        _1968 = _1923;
    }
    else
    {
        uint _2123 = _1835 + 7u;
        float _2139 = (dot(vec3(cbLight._m0[_1835 + 3u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4058 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _2142 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _1964 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _1919;
        _1966 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _1921;
        _1968 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _1923;
    }
    uint _1971 = _1835 + 8u;
    float _1984 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _651) * 0.949999988079071044921875);
    float _1985 = _1984 * _1984;
    float _1986 = cbLight._m0[_1835].x + _728;
    float _1987 = cbLight._m0[_1835].y + _729;
    float _1988 = cbLight._m0[_1835].z + _730;
    float _1992 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
    float _1993 = _1992 * _1986;
    float _1994 = _1992 * _1987;
    float _1995 = _1992 * _1988;
    float _1996 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_1835].xyz));
    float _4074 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1999 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2000 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _2001 = dot(vec3(_648, _649, _650), vec3(_1993, _1994, _1995));
    float _4096 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1993, _1994, _1995));
    float _4107 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1985 * _1985;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2025 = 1.0 - _1985;
    float _2036 = (0.5 / (((_2000 * ((_1999 * _2025) + _1985)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2025) + _1985) * _1999))) * _1999;
    float _4118 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2038 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    uint _2049 = _1835 + 9u;
    float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _651) * 0.949999988079071044921875);
    float _2061 = _2060 * _2060;
    float _2062 = cbLight._m0[_1872].x + _728;
    float _2063 = cbLight._m0[_1872].y + _729;
    float _2064 = cbLight._m0[_1872].z + _730;
    float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
    float _2069 = _2068 * _2062;
    float _2070 = _2068 * _2063;
    float _2071 = _2068 * _2064;
    float _2072 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_1872].xyz));
    float _4129 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _2076 = dot(vec3(_648, _649, _650), vec3(_2069, _2070, _2071));
    float _4140 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2069, _2070, _2071));
    float _4151 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2061 * _2061;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2061;
    float _2108 = (0.5 / (((_2000 * ((_2075 * _2098) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2098) + _2061) * _2075))) * _2075;
    float _4162 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    float _2120 = (((_2097 * cbLight._m0[_2049].x) * _2110) * _1858) + (((_2024 * cbLight._m0[_1971].x) * _2038) * _1868);
    float _2121 = (((_2097 * cbLight._m0[_2049].y) * _2110) * _1858) + (((_2024 * cbLight._m0[_1971].y) * _2038) * _1868);
    float _2122 = (((_2097 * cbLight._m0[_2049].z) * _2110) * _1858) + (((_2024 * cbLight._m0[_1971].z) * _2038) * _1868);
    float _2184;
    float _2186;
    float _2188;
    if (_1908)
    {
        _2184 = _2120;
        _2186 = _2121;
        _2188 = _2122;
    }
    else
    {
        uint _2190 = _1835 + 2u;
        uint _2194 = _1835 + 10u;
        float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2190].w)) * _651) * 0.949999988079071044921875);
        float _2209 = _2208 * _2208;
        float _2210 = cbLight._m0[_2190].x + _728;
        float _2211 = cbLight._m0[_2190].y + _729;
        float _2212 = cbLight._m0[_2190].z + _730;
        float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
        float _2217 = _2216 * _2210;
        float _2218 = _2216 * _2211;
        float _2219 = _2216 * _2212;
        float _2220 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2190].xyz));
        float _4173 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2223 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _2224 = dot(vec3(_648, _649, _650), vec3(_2217, _2218, _2219));
        float _4184 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2190].xyz), vec3(_2217, _2218, _2219));
        float _4195 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2232 = _2209 * _2209;
        float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
        float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2246 = 1.0 - _2209;
        float _2256 = (0.5 / (((_2000 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2246) + _2209) * _2223))) * _2223;
        float _4206 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2258 = (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
        float _2259 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
        _2184 = (((_2245 * cbLight._m0[_2194].x) * _2258) * _2259) + _2120;
        _2186 = (((_2245 * cbLight._m0[_2194].y) * _2258) * _2259) + _2121;
        _2188 = (((_2245 * cbLight._m0[_2194].z) * _2258) * _2259) + _2122;
    }
    float _2294;
    float _2296;
    float _2298;
    if (_1926)
    {
        _2294 = _2184;
        _2296 = _2186;
        _2298 = _2188;
    }
    else
    {
        uint _2305 = _1835 + 3u;
        uint _2309 = _1835 + 11u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _651) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _728;
        float _2326 = cbLight._m0[_2305].y + _729;
        float _2327 = cbLight._m0[_2305].z + _730;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2305].xyz));
        float _4222 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2339 = dot(vec3(_648, _649, _650), vec3(_2332, _2333, _2334));
        float _4233 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4244 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2361 = 1.0 - _2324;
        float _2371 = (0.5 / (((_2000 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2000 * _2361) + _2324) * _2338))) * _2338;
        float _4255 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
        _2294 = (((_2360 * cbLight._m0[_2309].x) * _2373) * _2374) + _2184;
        _2296 = (((_2360 * cbLight._m0[_2309].y) * _2373) * _2374) + _2186;
        _2298 = (((_2360 * cbLight._m0[_2309].z) * _2373) * _2374) + _2188;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1833.y == 0u)
    {
        float _2449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2449;
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2449;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2449;
        uvec4 _2464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2465 = _2464.x;
        uint _2476 = uint((float(_2464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2465))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2465)));
        float _2486 = (log2(_2452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2487 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        uint _2490 = uint(isnan(14.0) ? _2487 : (isnan(_2487) ? 14.0 : min(_2487, 14.0)));
        uvec4 _2495 = texelFetch(g_lightClusterGridBuffer, int(((_2490 << 2u) + (_2476 << 6u)) >> 2u));
        uint _2496 = _2495.x;
        uint _2497 = _2464.z;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        if (((((1u << ((_2497 >> 4u) & 15u)) + 4294967295u) & _2496) == 0u) || ((_2497 & 240u) == 0u))
        {
            _2597 = 0.0;
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
        }
        else
        {
            float _2598;
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            uint _2748 = 0u;
            uint _2757;
            bool _2758;
            for (;;)
            {
                _2757 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                _2758 = _2757 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2758)
                {
                    frontier_phi_61_pred = _2742;
                    frontier_phi_61_pred_1 = _2747;
                    frontier_phi_61_pred_2 = _2746;
                    frontier_phi_61_pred_3 = _2745;
                    frontier_phi_61_pred_4 = _2744;
                    frontier_phi_61_pred_5 = _2743;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2742;
                    _2867 = _2743;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2757;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2748 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _2450;
                        float _2933 = _2892.y - _2451;
                        float _2934 = _2892.z - _2452;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_755, _758, _761), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4281 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _2450;
                        float _2968 = (-0.0) - _2451;
                        float _2969 = (-0.0) - _2452;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2984 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2985 = 1.0 - _815;
                        float _2992 = sqrt(1.0 - ((1.0 - (_2985 * _2985)) * (1.0 - (_2984 * _2984))));
                        float _2993 = _2992 * _2992;
                        float _2994 = _2993 * _2993;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _3001 = inversesqrt(dot(vec3(_2995, _2996, _2997), vec3(_2995, _2996, _2997)));
                        float _3005 = dot(vec3(_755, _758, _761), vec3(_2974, _2975, _2976));
                        float _4297 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3008 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                        float _3009 = dot(vec3(_755, _758, _761), vec3(_3001 * _2995, _3001 * _2996, _3001 * _2997));
                        float _4308 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3012 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _3016 = ((_3012 * _3012) * (_2994 + (-1.0))) + 1.0;
                        float _3017 = _2952 * _2993;
                        float _3018 = _3017 * _3017;
                        float _3021 = ((1.0 - _3018) * _2942) + _3018;
                        float _4319 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _3023 = 1.0 - _2993;
                        float _3033 = (0.5 / (((_3022 * ((_3008 * _3023) + _2993)) + 9.9999999392252902907785028219223e-09) + (((_3022 * _3023) + _2993) * _3008))) * _3022;
                        float _4330 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3044 = (((_2994 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3016 * _3016) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2801 = (_2963 * _2911.x) + _2869;
                        _2802 = (_2963 * _2911.y) + _2870;
                        _2803 = (_2963 * _2911.z) + _2871;
                        _2798 = (_3044 * _2928.x) + _2866;
                        _2799 = (_3044 * _2928.y) + _2867;
                        _2800 = (_3044 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_61_pred = _2798;
                    frontier_phi_61_pred_1 = _2803;
                    frontier_phi_61_pred_2 = _2802;
                    frontier_phi_61_pred_3 = _2801;
                    frontier_phi_61_pred_4 = _2800;
                    frontier_phi_61_pred_5 = _2799;
                }
                _2598 = frontier_phi_61_pred;
                _2608 = frontier_phi_61_pred_1;
                _2606 = frontier_phi_61_pred_2;
                _2604 = frontier_phi_61_pred_3;
                _2602 = frontier_phi_61_pred_4;
                _2600 = frontier_phi_61_pred_5;
                uint _2749 = _2748 + 1u;
                if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2742 = _2598;
                    _2743 = _2600;
                    _2744 = _2602;
                    _2745 = _2604;
                    _2746 = _2606;
                    _2747 = _2608;
                    _2748 = _2749;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2597 = _2598;
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
        }
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.z;
        uint _2614 = (_2612 >> 8u) & 15u;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((4294967295u << _2614) & _2496) == 0u)
        {
            _2710 = _2597;
            _2712 = _2599;
            _2714 = _2601;
            _2716 = _2603;
            _2718 = _2605;
            _2720 = _2607;
        }
        else
        {
            float _2735 = inversesqrt(dot(vec3(_2450, _2451, _2452), vec3(_2450, _2451, _2452)));
            float _2736 = _2735 * _2450;
            float _2737 = _2735 * _2451;
            float _2738 = _2735 * _2452;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2614 < ((_2612 >> 12u) & 15u))
            {
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2849 = _2597;
                float _2850 = _2599;
                float _2851 = _2601;
                float _2852 = _2603;
                float _2853 = _2605;
                float _2854 = _2607;
                uint _2855 = _2614;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2490 << 5u) + (_2476 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2865)
                    {
                        frontier_phi_67_pred = _2852;
                        frontier_phi_67_pred_1 = _2853;
                        frontier_phi_67_pred_2 = _2854;
                        frontier_phi_67_pred_3 = _2851;
                        frontier_phi_67_pred_4 = _2850;
                        frontier_phi_67_pred_5 = _2849;
                    }
                    else
                    {
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3062 = _2849;
                        float _3063 = _2850;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        uint _3068 = _2864;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        vec3 _3122;
                        vec4 _3137;
                        vec4 _3152;
                        float _3198;
                        bool _3199;
                        for (;;)
                        {
                            uint _3079 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3112 = (_3079 * 40u) + 8u;
                            _3122 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x));
                            uint _3124 = (_3079 * 40u) + 16u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            uint _3139 = (_3079 * 40u) + 20u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3079 * 40u) + 24u;
                            vec4 _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3173 = (_3079 * 40u) + 28u;
                            vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3198 = fma(_2452, _3186.z, fma(_2451, _3186.y, _3186.x * _2450)) + _3186.w;
                            _3199 = !((fma(_2452, _3167.z, fma(_2451, _3167.y, _3167.x * _2450)) + _3167.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3199)
                            {
                                float _3226 = _3094.x - _2450;
                                float _3227 = _3094.y - _2451;
                                float _3228 = _3094.z - _2452;
                                float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                                float _3232 = inversesqrt(_3229);
                                float _3233 = _3232 * _3226;
                                float _3234 = _3232 * _3227;
                                float _3235 = _3232 * _3228;
                                float _3239 = 1.0 - (_3229 / (_3095 * _3095));
                                float _4341 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3244 = sqrt(_3229) * _3110.w;
                                float _3246 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                                float _3247 = _3246 * _3246;
                                float _3250 = ((1.0 - _3247) * dot(vec3(_3233, _3234, _3235), vec3(_755, _758, _761))) + _3247;
                                float _3253 = _3244 * _3244;
                                float _3257 = (fma(_2452, _3137.z, fma(_2451, _3137.y, _3137.x * _2450)) + _3137.w) / _3198;
                                float _3258 = (fma(_2452, _3152.z, fma(_2451, _3152.y, _3152.x * _2450)) + _3152.w) / _3198;
                                float _3262 = 1.0 - dot(vec2(_3257, _3258), vec2(_3257, _3258));
                                float _4357 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                                float _3264 = _3263 * (((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3240) / ((_3253 * 0.699999988079071044921875) + 1.0));
                                float _3276 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                                float _3277 = 1.0 - _815;
                                float _3284 = sqrt(1.0 - ((1.0 - (_3277 * _3277)) * (1.0 - (_3276 * _3276))));
                                float _3285 = _3284 * _3284;
                                float _3286 = _3285 * _3285;
                                float _3287 = _3233 - _2736;
                                float _3288 = _3234 - _2737;
                                float _3289 = _3235 - _2738;
                                float _3293 = inversesqrt(dot(vec3(_3287, _3288, _3289), vec3(_3287, _3288, _3289)));
                                float _3297 = dot(vec3(_755, _758, _761), vec3((-0.0) - _2736, (-0.0) - _2737, (-0.0) - _2738));
                                float _4368 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3300 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3301 = dot(vec3(_755, _758, _761), vec3(_3293 * _3287, _3293 * _3288, _3293 * _3289));
                                float _4379 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3304 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3308 = ((_3304 * _3304) * (_3286 + (-1.0))) + 1.0;
                                float _3309 = _3246 * _3285;
                                float _3310 = _3309 * _3309;
                                float _3316 = ((1.0 - _3310) * dot(vec3(_755, _758, _761), vec3(_3233, _3234, _3235))) + _3310;
                                float _4390 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                                float _3317 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3318 = 1.0 - _3285;
                                float _3328 = (0.5 / (((_3317 * ((_3300 * _3318) + _3285)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3285) * _3300))) * _3317;
                                float _4401 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3338 = (_3263 * _3240) * (((_3286 * 3.1415927410125732421875) * (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) / ((_3308 * _3308) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3338 * _3122.x;
                                frontier_phi_73_pred_1 = _3338 * _3122.y;
                                frontier_phi_73_pred_2 = _3264 * _3110.z;
                                frontier_phi_73_pred_3 = _3264 * _3110.y;
                                frontier_phi_73_pred_4 = _3264 * _3110.x;
                                frontier_phi_73_pred_5 = _3338 * _3122.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3342 = frontier_phi_73_pred;
                            _3343 = frontier_phi_73_pred_1;
                            _3347 = frontier_phi_73_pred_2;
                            _3346 = frontier_phi_73_pred_3;
                            _3345 = frontier_phi_73_pred_4;
                            _3344 = frontier_phi_73_pred_5;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            _3054 = _3347 + _3067;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            _3051 = _3344 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3052;
                        frontier_phi_67_pred_1 = _3053;
                        frontier_phi_67_pred_2 = _3054;
                        frontier_phi_67_pred_3 = _3051;
                        frontier_phi_67_pred_4 = _3050;
                        frontier_phi_67_pred_5 = _3049;
                    }
                    _2717 = frontier_phi_67_pred;
                    _2719 = frontier_phi_67_pred_1;
                    _2721 = frontier_phi_67_pred_2;
                    _2715 = frontier_phi_67_pred_3;
                    _2713 = frontier_phi_67_pred_4;
                    _2711 = frontier_phi_67_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2711;
                        _2850 = _2713;
                        _2851 = _2715;
                        _2852 = _2717;
                        _2853 = _2719;
                        _2854 = _2721;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2719;
                frontier_phi_55_56_ladder_1 = _2721;
                frontier_phi_55_56_ladder_2 = _2717;
                frontier_phi_55_56_ladder_3 = _2715;
                frontier_phi_55_56_ladder_4 = _2713;
                frontier_phi_55_56_ladder_5 = _2711;
            }
            else
            {
                frontier_phi_55_56_ladder = _2605;
                frontier_phi_55_56_ladder_1 = _2607;
                frontier_phi_55_56_ladder_2 = _2603;
                frontier_phi_55_56_ladder_3 = _2601;
                frontier_phi_55_56_ladder_4 = _2599;
                frontier_phi_55_56_ladder_5 = _2597;
            }
            _2710 = frontier_phi_55_56_ladder_5;
            _2712 = frontier_phi_55_56_ladder_4;
            _2714 = frontier_phi_55_56_ladder_3;
            _2716 = frontier_phi_55_56_ladder_2;
            _2718 = frontier_phi_55_56_ladder;
            _2720 = frontier_phi_55_56_ladder_1;
        }
        float _2725 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2509 = (_2725 * _2716) + _1964;
        _2511 = (_2725 * _2718) + _1966;
        _2513 = (_2725 * _2720) + _1968;
        _2515 = ((_2710 * 0.039999999105930328369140625) * _2725) + _2294;
        _2517 = ((_2712 * 0.039999999105930328369140625) * _2725) + _2296;
        _2519 = ((_2714 * 0.039999999105930328369140625) * _2725) + _2298;
    }
    else
    {
        _2509 = _1964;
        _2511 = _1966;
        _2513 = _1968;
        _2515 = _2294;
        _2517 = _2296;
        _2519 = _2298;
    }
    float _4417 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4428 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4439 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    uint _2539 = _260 + 6u;
    float _2547 = _736 / cbSceneParam._m0[86u].x;
    float _2548 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2562 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2564 = _2562.x;
    float _2565 = _2562.y;
    float _2566 = _2562.z;
    float _2567 = _2562.w;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2622 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2623 = _2622 / _669;
        float _2634 = _2623 * _721;
        float _2635 = _722 * _2623;
        float _2636 = (-0.0) - _2635;
        float _2638 = _2623 * _723;
        float _2640 = (cbSceneParam._m0[77u].w * _2636) / _2622;
        float _2641 = _2640 + cbSceneParam._m0[79u].w;
        float _2642 = cbSceneParam._m0[79u].w - _2635;
        float _2648 = sqrt(((_2634 * _2634) + (_2635 * _2635)) + (_2638 * _2638));
        float _2651 = (1.0 - (cbSceneParam._m0[77u].w / _2622)) * _2648;
        float _2656 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2658 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2636 - _2640) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2641 > 0.0) ? exp2(_2656 * _2641) : (2.0 - exp2(_2658 * _2641))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2651;
        }
        else
        {
            float _2771 = 1.0 / cbSceneParam._m0[80u].x;
            float _2772 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : max(_2641, _2642));
            float _2773 = isnan(_2642) ? _2641 : (isnan(_2641) ? _2642 : min(_2641, _2642));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            _2811 = ((abs(_2648 / _2636) * cbSceneParam._m0[80u].y) * ((((_2782 - _2783) * 2.0) - ((exp2(_2656 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)))) - exp2(_2656 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))))) * _2771)) - ((exp2(_2658 * _2782) - exp2(_2658 * _2783)) * _2771))) + (_2651 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2547, _2548, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2567);
        _2660 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2564;
        _2662 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2565;
        _2664 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2566;
        _2666 = _2822 * _2567;
    }
    else
    {
        _2660 = _2564;
        _2662 = _2565;
        _2664 = _2566;
        _2666 = _2567;
    }
    float _2678 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2679 = _2678 == 3.0;
    float _2680 = log2(_2666);
    float _2687 = exp2(_2680 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2509 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _799))) + ((_2515 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1604)) * cbPerFrame._m0[3u].x));
    float _2688 = exp2(_2680 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2511 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _799))) + ((_2517 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1604)) * cbPerFrame._m0[3u].x));
    float _2689 = exp2(_2680 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2513 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _799))) + ((_2519 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1604)) * cbPerFrame._m0[3u].x));
    float _2698 = (_2678 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2698 * (_2679 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2660)));
    SV_Target.y = _2698 * (_2679 ? _2688 : (_2688 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.z = _2698 * (_2679 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.w = cbInstanceData._m0[_2539].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2539].w;
}


