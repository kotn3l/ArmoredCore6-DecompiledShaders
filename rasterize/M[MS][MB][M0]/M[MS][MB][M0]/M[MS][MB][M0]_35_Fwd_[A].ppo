#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1250;
float _3611;
float _3612;
float _3613;
float _3614;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3623 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3634 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3645 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) + _340;
    vec4 _367 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = _393.z;
    float _401 = (_393.x * 2.0) + (-1.0);
    float _402 = (_393.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3656 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))));
    float _413 = _401 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_367.x * 2.0) + (-1.0)));
    float _414 = _402 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_367.y * 2.0) + (-1.0)));
    float _417 = fma(_408, _236, fma(_414, _243, _413 * _229));
    float _420 = fma(_408, _237, fma(_414, _244, _413 * _230));
    float _423 = fma(_408, _238, fma(_414, _245, _413 * _231));
    float _427 = inversesqrt(dot(vec3(_417, _420, _423), vec3(_417, _420, _423)));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _465 = _463.x;
    float _466 = 1.0 - _465;
    float _473 = ((_465 - _466) * cbMtdParam._m0[24u].z) + _466;
    float _475 = (cbMtdParam._m0[19u].x + dot(vec4(_427 * _417, _427 * _420, _427 * _423, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_473 * cbMtdParam._m0[21u].z);
    float _3667 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _476 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _478 = (-0.0) - cbMtdParam._m0[24u].y;
    float _480 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
    float _488 = _476 - ((_476 * TEXCOORD_8.x) * _481);
    float _489 = _476 - ((_476 * TEXCOORD_8.y) * _481);
    float _490 = _476 - ((_476 * TEXCOORD_8.z) * _481);
    float _497 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _501 = ((isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : min(_497, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _509 = (_501 - (((_473 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _501))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3698 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _514 = ((_488 * (cbMtdParam._m0[17u].x - _347)) * _510) + _347;
    float _515 = ((_489 * (cbMtdParam._m0[17u].y - _348)) * _510) + _348;
    float _516 = ((_490 * (cbMtdParam._m0[17u].z - _349)) * _510) + _349;
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _558 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_530 - _531) * cbMtdParam._m0[24u].w) + _531) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3709 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _567 = ((((cbMtdParam._m0[10u].x - _514) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _559) + _514;
    float _568 = ((((cbMtdParam._m0[10u].y - _515) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _559) + _515;
    float _569 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _516)) * _559) + _516;
    float _574 = (((_367.z - _397) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _397;
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _595 = (_588.x * 2.0) + (-1.0);
    float _596 = (_588.y * 2.0) + (-1.0);
    float _597 = dot(vec2(_595, _596), vec2(_595, _596));
    float _3720 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _606 = (((_588.z - _574) * _488) * _510) + _574;
    float _609 = ((cbMtdParam._m0[23u].y - _606) * _559) + _606;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3731 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _656 = (((cbMtdParam._m0[21u].x * _413) + ((_595 - _413) * _488)) * _510) + _413;
    float _657 = (((cbMtdParam._m0[21u].x * _414) + ((_596 - _414) * _489)) * _510) + _414;
    float _658 = (((sqrt(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) - _408) * _490) * _510) + _408;
    float _669 = (((_634 - _656) + (_656 * cbMtdParam._m0[22u].z)) * _559) + _656;
    float _670 = (((_635 - _657) + (_657 * cbMtdParam._m0[22u].z)) * _559) + _657;
    float _671 = ((sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) - _658) * _559) + _658;
    float _673 = cbMtdParam._m0[22u].x + _393.w;
    float _676 = fma(_671, _236, fma(_670, _243, _669 * _229));
    float _679 = fma(_671, _237, fma(_670, _244, _669 * _230));
    float _682 = fma(_671, _238, fma(_670, _245, _669 * _231));
    float _686 = inversesqrt(dot(vec3(_676, _679, _682), vec3(_676, _679, _682)));
    float _687 = _686 * _676;
    float _688 = _686 * _679;
    float _689 = _686 * _682;
    float _3742 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _690 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3764 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3775 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3786 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _758 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _748);
    float _759 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _748);
    float _760 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _748);
    float _764 = inversesqrt(dot(vec3(_758, _759, _760), vec3(_758, _759, _760)));
    float _765 = _758 * _764;
    float _766 = _759 * _764;
    float _767 = _760 * _764;
    vec4 _772 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _774 = _772.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _931 = sqrt(((_758 * _758) + (_759 * _759)) + (_760 * _760));
        float _937 = (cbMatDynParam._m0[5u].x * _931) + cbMatDynParam._m0[5u].y;
        float _3797 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _942 = (cbMatDynParam._m0[5u].z * _931) + cbMatDynParam._m0[5u].w;
        float _3808 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) - _938)) + _938) < ((_774 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _807 = fma(_689, cbSceneParam._m0[5u].z, fma(_688, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _687));
    float _810 = fma(_689, cbSceneParam._m0[6u].z, fma(_688, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _687));
    float _813 = fma(_689, cbSceneParam._m0[7u].z, fma(_688, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _687));
    uint _826 = _267 + 9u;
    uint _827 = _826 + uint(cbMatDynParam._m0[0u].w);
    float _833 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_827].x;
    float _834 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_827].y;
    float _835 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_827].z;
    float _3819 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    vec4 _847 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _851 = ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * TEXCOORD_5.w) * _847.x;
    float _852 = dot(vec3(_687, _688, _689), vec3(_765, _766, _767));
    float _855 = _852 * 2.0;
    float _859 = (_855 * _687) - _765;
    float _860 = (_855 * _688) - _766;
    float _861 = (_855 * _689) - _767;
    float _865 = abs(dot(vec3(_765, _766, _767), vec3(_687, _688, _689)));
    float _3852 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _867 = sqrt(_690);
    float _880 = exp2((_867 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_867 * 3.0));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1249;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _974 = fma(_920, cbModelParam._m0[26u].z, fma(_916, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912));
        float _978 = fma(_920, cbModelParam._m0[27u].z, fma(_916, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912));
        float _982 = fma(_920, cbModelParam._m0[28u].z, fma(_916, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912));
        float _1007 = _912 + _687;
        float _1008 = _916 + _688;
        float _1009 = _920 + _689;
        float _1019 = fma(_1009, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1007)) - _974;
        float _1020 = fma(_1009, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1007)) - _978;
        float _1021 = fma(_1009, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1007)) - _982;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_974 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_978 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[34u].z) + ((((((_982 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1077 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1043.x + (-0.5));
        float _1079 = _1077 * (_1043.y + (-0.5));
        float _1080 = _1077 * (_1043.z + (-0.5));
        float _1087 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1050.x + (-0.5));
        float _1089 = _1087 * (_1050.y + (-0.5));
        float _1090 = _1087 * (_1050.z + (-0.5));
        float _1097 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1057.x + (-0.5));
        float _1099 = _1097 * (_1057.y + (-0.5));
        float _1100 = _1097 * (_1057.z + (-0.5));
        float _1107 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1064.x + (-0.5));
        float _1109 = _1107 * (_1064.y + (-0.5));
        float _1110 = _1107 * (_1064.z + (-0.5));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = _1078 * 0.5;
        float _1115 = _1088 * 0.5;
        float _1116 = _1098 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1131 = (dot(vec3(_687, _688, _689), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1141 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3900 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1143 + 1.0))) + _1148) * _1111;
        float _1158 = _1079 * 0.5;
        float _1159 = _1089 * 0.5;
        float _1160 = _1099 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_687, _688, _689), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3933 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1185 + 1.0))) + _1190) * _1112;
        float _1200 = _1080 * 0.5;
        float _1201 = _1090 * 0.5;
        float _1202 = _1100 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_687, _688, _689), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3966 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1227 + 1.0))) + _1232) * _1113;
        _1249 = _1080;
        _1251 = _1079;
        _1252 = _1078;
        _1253 = _1090;
        _1254 = _1089;
        _1255 = _1088;
        _1256 = _1100;
        _1257 = _1099;
        _1258 = _1098;
        _1259 = _1113;
        _1260 = _1112;
        _1261 = _1111;
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
    }
    else
    {
        _1249 = _1250;
        _1251 = _1250;
        _1252 = _1250;
        _1253 = _1250;
        _1254 = _1250;
        _1255 = _1250;
        _1256 = _1250;
        _1257 = _1250;
        _1258 = _1250;
        _1259 = _1250;
        _1260 = _1250;
        _1261 = _1250;
        _1262 = 0.0;
        _1263 = 0.0;
        _1264 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_920, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _912));
        float _1296 = fma(_920, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _912));
        float _1300 = fma(_920, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _912));
        float _1323 = _912 + _687;
        float _1324 = _916 + _688;
        float _1325 = _920 + _689;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_687, _688, _689), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4029 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_687, _688, _689), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4062 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_687, _688, _689), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4095 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1250;
        _1562 = _1250;
        _1563 = _1250;
        _1564 = _1250;
        _1565 = _1250;
        _1566 = _1250;
        _1567 = _1250;
        _1568 = _1250;
        _1569 = _1250;
        _1570 = _1250;
        _1571 = _1250;
        _1572 = _1250;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1262)) + _1262;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1263)) + _1263;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1264)) + _1264;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _859 * 0.5;
    float _1630 = _860 * 0.5;
    float _1631 = _861 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1249, _1253, _1256, _1259));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _690);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_920, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_920, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_920, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_861, cbModelParam._m0[13u].z, fma(_860, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _859));
        float _1760 = fma(_861, cbModelParam._m0[14u].z, fma(_860, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _859));
        float _1763 = fma(_861, cbModelParam._m0[15u].z, fma(_860, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _859));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1791 = frontier_phi_17_15_ladder;
        }
        float _1994;
        if (_1760 > 0.0)
        {
            _1994 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1994 = frontier_phi_26_22_ladder;
        }
        float _2237;
        if (_1763 > 0.0)
        {
            _2237 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2237 = frontier_phi_38_33_ladder;
        }
        float _2239 = isnan(_1994) ? _1791 : (isnan(_1791) ? _1994 : min(_1791, _1994));
        float _2240 = isnan(_2237) ? _2239 : (isnan(_2239) ? _2237 : min(_2239, _2237));
        float _2244 = (_2240 * _1757) + _1746;
        float _2245 = (_2240 * _1760) + _1750;
        float _2246 = (_2240 * _1763) + _1754;
        float _2247 = _2240 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2247;
        float _2251 = _2247 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 > _2251) || ((_2245 < _2249) || ((_2244 < _2249) || (_2244 > _2251))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2246, cbModelParam._m0[9u].z, fma(_2245, cbModelParam._m0[9u].y, _2244 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2246, cbModelParam._m0[10u].z, fma(_2245, cbModelParam._m0[10u].y, _2244 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2246, cbModelParam._m0[11u].z, fma(_2245, cbModelParam._m0[11u].y, _2244 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_16_38_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_16_38_ladder_2;
        _1781 = frontier_phi_16_38_ladder_1;
        _1783 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_859, _860, _861), _1698);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _690);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_920, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_920, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_920, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_861, cbModelParam._m0[21u].z, fma(_860, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _859));
        float _1856 = fma(_861, cbModelParam._m0[22u].z, fma(_860, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _859));
        float _1859 = fma(_861, cbModelParam._m0[23u].z, fma(_860, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _859));
        float _1999;
        if (_1853 > 0.0)
        {
            _1999 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1999 = frontier_phi_28_24_ladder;
        }
        float _2264;
        if (_1856 > 0.0)
        {
            _2264 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2264 = frontier_phi_40_35_ladder;
        }
        float _2469;
        if (_1859 > 0.0)
        {
            _2469 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2469 = frontier_phi_49_46_ladder;
        }
        float _2471 = isnan(_2264) ? _1999 : (isnan(_1999) ? _2264 : min(_1999, _2264));
        float _2472 = isnan(_2469) ? _2471 : (isnan(_2471) ? _2469 : min(_2471, _2469));
        float _2476 = (_2472 * _1853) + _1842;
        float _2477 = (_2472 * _1856) + _1846;
        float _2478 = (_2472 * _1859) + _1850;
        float _2479 = _2472 * 9.9999997473787516355514526367188e-05;
        float _2480 = (-1.0) - _2479;
        float _2482 = _2479 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2478 > _2482) || ((_2478 < _2480) || ((_2477 > _2482) || ((_2477 < _2480) || ((_2476 < _2480) || (_2476 > _2482))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2478, cbModelParam._m0[17u].z, fma(_2477, cbModelParam._m0[17u].y, _2476 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2478, cbModelParam._m0[18u].z, fma(_2477, cbModelParam._m0[18u].y, _2476 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2478, cbModelParam._m0[19u].z, fma(_2477, cbModelParam._m0[19u].y, _2476 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_25_49_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_25_49_ladder_2;
        _1880 = frontier_phi_25_49_ladder_1;
        _1882 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_859, _860, _861), _1788);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1894 = ((((1.0 - _880) * ((_867 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_880 * _867)) * _851;
    float _1895 = _1894 * ((cbModelParam._m0[1u].w * (_1878 - _1779)) + _1779);
    float _1896 = _1894 * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1897 = _1894 * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1900 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1926 = _851 + (-1.0);
    float _1931 = (cbLight._m0[_1919].x * _1926) + 1.0;
    float _1932 = (cbLight._m0[_1919].y * _1926) + 1.0;
    float _1933 = (cbLight._m0[_1919].z * _1926) + 1.0;
    float _1934 = (cbLight._m0[_1919].w * _1926) + 1.0;
    uint _1935 = _1918 + 5u;
    float _1941 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1945 = _1918 + 4u;
    float _1952 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1956 = _1918 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_687, _688, _689));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_687, _688, _689));
    float _4231 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4242 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1935].x * _1941) * _1977) + ((cbLight._m0[_1945].x * _1952) * _1975);
    float _1985 = ((_1941 * cbLight._m0[_1935].y) * _1977) + ((_1952 * cbLight._m0[_1945].y) * _1975);
    float _1986 = ((_1941 * cbLight._m0[_1935].z) * _1977) + ((_1952 * cbLight._m0[_1945].z) * _1975);
    uvec4 _1991 = floatBitsToUint(cbLight._m0[_1918 + 12u]);
    bool _1993 = _1991.x == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1993)
    {
        _2004 = _1984;
        _2006 = _1985;
        _2008 = _1986;
    }
    else
    {
        uint _2012 = _1918 + 6u;
        float _2028 = (dot(vec3(cbLight._m0[_1918 + 2u].xyz), vec3(_687, _688, _689)) * 0.5) + 0.5;
        float _2029 = _2028 * _2028;
        float _4253 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
        float _2030 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2031 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2004 = (((cbLight._m0[_2012].x * 0.3183098733425140380859375) * _2030) * _2031) + _1984;
        _2006 = (((cbLight._m0[_2012].y * 0.3183098733425140380859375) * _2030) * _2031) + _1985;
        _2008 = (((cbLight._m0[_2012].z * 0.3183098733425140380859375) * _2030) * _2031) + _1986;
    }
    bool _2011 = _1991.y == 0u;
    float _2049;
    float _2051;
    float _2053;
    if (_2011)
    {
        _2049 = _2004;
        _2051 = _2006;
        _2053 = _2008;
    }
    else
    {
        uint _2208 = _1918 + 7u;
        float _2224 = (dot(vec3(cbLight._m0[_1918 + 3u].xyz), vec3(_687, _688, _689)) * 0.5) + 0.5;
        float _2225 = _2224 * _2224;
        float _4269 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2226 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2227 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2049 = (((cbLight._m0[_2208].x * 0.3183098733425140380859375) * _2226) * _2227) + _2004;
        _2051 = (((cbLight._m0[_2208].y * 0.3183098733425140380859375) * _2226) * _2227) + _2006;
        _2053 = (((cbLight._m0[_2208].z * 0.3183098733425140380859375) * _2226) * _2227) + _2008;
    }
    uint _2056 = _1918 + 8u;
    float _2069 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _690) * 0.949999988079071044921875);
    float _2070 = _2069 * _2069;
    float _2071 = cbLight._m0[_1918].x + _765;
    float _2072 = cbLight._m0[_1918].y + _766;
    float _2073 = cbLight._m0[_1918].z + _767;
    float _2077 = inversesqrt(dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073)));
    float _2078 = _2077 * _2071;
    float _2079 = _2077 * _2072;
    float _2080 = _2077 * _2073;
    float _2081 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_1918].xyz));
    float _4285 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
    float _2084 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2085 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2086 = dot(vec3(_687, _688, _689), vec3(_2078, _2079, _2080));
    float _4307 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2090 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2078, _2079, _2080));
    float _4318 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = _2070 * _2070;
    float _2098 = ((_2089 * _2089) * (_2094 + (-1.0))) + 1.0;
    float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2110 = 1.0 - _2070;
    float _2121 = (0.5 / (((_2085 * ((_2084 * _2110) + _2070)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2110) + _2070) * _2084))) * _2084;
    float _4329 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2094 / ((_2098 * _2098) * 3.141590118408203125));
    uint _2134 = _1918 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _690) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1956].x + _765;
    float _2148 = cbLight._m0[_1956].y + _766;
    float _2149 = cbLight._m0[_1956].z + _767;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_1956].xyz));
    float _4340 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2161 = dot(vec3(_687, _688, _689), vec3(_2154, _2155, _2156));
    float _4351 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2154, _2155, _2156));
    float _4362 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2182 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2183 = 1.0 - _2146;
    float _2193 = (0.5 / (((_2085 * ((_2160 * _2183) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2183) + _2146) * _2160))) * _2160;
    float _4373 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2205 = (((_2182 * cbLight._m0[_2134].x) * _2195) * _1941) + (((_2109 * cbLight._m0[_2056].x) * _2123) * _1952);
    float _2206 = (((_2182 * cbLight._m0[_2134].y) * _2195) * _1941) + (((_2109 * cbLight._m0[_2056].y) * _2123) * _1952);
    float _2207 = (((_2182 * cbLight._m0[_2134].z) * _2195) * _1941) + (((_2109 * cbLight._m0[_2056].z) * _2123) * _1952);
    float _2269;
    float _2271;
    float _2273;
    if (_1993)
    {
        _2269 = _2205;
        _2271 = _2206;
        _2273 = _2207;
    }
    else
    {
        uint _2275 = _1918 + 2u;
        uint _2279 = _1918 + 10u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _690) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _765;
        float _2296 = cbLight._m0[_2275].y + _766;
        float _2297 = cbLight._m0[_2275].z + _767;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2275].xyz));
        float _4384 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2309 = dot(vec3(_687, _688, _689), vec3(_2302, _2303, _2304));
        float _4395 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4406 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2331 = 1.0 - _2294;
        float _2341 = (0.5 / (((_2085 * ((_2308 * _2331) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2331) + _2294) * _2308))) * _2308;
        float _4417 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2269 = (((_2330 * cbLight._m0[_2279].x) * _2343) * _2344) + _2205;
        _2271 = (((_2330 * cbLight._m0[_2279].y) * _2343) * _2344) + _2206;
        _2273 = (((_2330 * cbLight._m0[_2279].z) * _2343) * _2344) + _2207;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_2011)
    {
        _2379 = _2269;
        _2381 = _2271;
        _2383 = _2273;
    }
    else
    {
        uint _2390 = _1918 + 3u;
        uint _2394 = _1918 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _690) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _765;
        float _2411 = cbLight._m0[_2390].y + _766;
        float _2412 = cbLight._m0[_2390].z + _767;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_687, _688, _689), vec3(cbLight._m0[_2390].xyz));
        float _4433 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2424 = dot(vec3(_687, _688, _689), vec3(_2417, _2418, _2419));
        float _4444 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4455 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2446 = 1.0 - _2409;
        float _2456 = (0.5 / (((_2085 * ((_2423 * _2446) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2085 * _2446) + _2409) * _2423))) * _2423;
        float _4466 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2458 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2459 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
        _2379 = (((_2445 * cbLight._m0[_2394].x) * _2458) * _2459) + _2269;
        _2381 = (((_2445 * cbLight._m0[_2394].y) * _2458) * _2459) + _2271;
        _2383 = (((_2445 * cbLight._m0[_2394].z) * _2458) * _2459) + _2273;
    }
    float _2594;
    float _2596;
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    if (_1916.y == 0u)
    {
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2534;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2534;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2534;
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.x;
        uint _2561 = uint((float(_2549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2550))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2550)));
        float _2571 = (log2(_2537 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        uint _2575 = uint(isnan(14.0) ? _2572 : (isnan(_2572) ? 14.0 : min(_2572, 14.0)));
        uvec4 _2580 = texelFetch(g_lightClusterGridBuffer, int(((_2575 << 2u) + (_2561 << 6u)) >> 2u));
        uint _2581 = _2580.x;
        uint _2582 = _2549.z;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((((1u << ((_2582 >> 4u) & 15u)) + 4294967295u) & _2581) == 0u) || ((_2582 & 240u) == 0u))
        {
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
        }
        else
        {
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            uint _2840 = 0u;
            uint _2849;
            bool _2850;
            for (;;)
            {
                _2849 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2840 << 2u)) >> 2u)).x;
                _2850 = _2849 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2850)
                {
                    frontier_phi_66_pred = _2834;
                    frontier_phi_66_pred_1 = _2839;
                    frontier_phi_66_pred_2 = _2838;
                    frontier_phi_66_pred_3 = _2837;
                    frontier_phi_66_pred_4 = _2836;
                    frontier_phi_66_pred_5 = _2835;
                }
                else
                {
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    uint _2985;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2849;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    for (;;)
                    {
                        uint _2989 = uint(findLSB(_2985)) + (_2840 << 5u);
                        uint _2986 = (_2985 + 4294967295u) & _2985;
                        uint _2991 = _2989 * 48u;
                        vec4 _3005 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 3u)).x));
                        uint _3011 = (_2989 * 48u) + 4u;
                        vec4 _3024 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3011)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3011 + 3u)).x));
                        uint _3030 = (_2989 * 48u) + 8u;
                        vec3 _3041 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3030)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3030 + 2u)).x));
                        float _3045 = _3005.x - _2535;
                        float _3046 = _3005.y - _2536;
                        float _3047 = _3005.z - _2537;
                        float _3048 = dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047));
                        float _3051 = inversesqrt(_3048);
                        float _3052 = _3051 * _3045;
                        float _3053 = _3051 * _3046;
                        float _3054 = _3051 * _3047;
                        float _3055 = dot(vec3(_807, _810, _813), vec3(_3052, _3053, _3054));
                        float _3060 = 1.0 - (_3048 * _3005.w);
                        float _4492 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3061 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3062 = sqrt(_3048) * _3024.w;
                        float _3065 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                        float _3066 = _3065 * _3065;
                        float _3069 = ((1.0 - _3066) * _3055) + _3066;
                        float _3072 = _3062 * _3062;
                        float _3076 = ((isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0))) * _3061) / ((_3072 * 0.699999988079071044921875) + 1.0);
                        float _3080 = (-0.0) - _2535;
                        float _3081 = (-0.0) - _2536;
                        float _3082 = (-0.0) - _2537;
                        float _3086 = inversesqrt(dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082)));
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3097 = exp2(log2(1.0 / ((_3072 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _867;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3110 = _3089 + _3054;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_807, _810, _813), vec3(_3087, _3088, _3089));
                        float _4508 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3122 = dot(vec3(_807, _810, _813), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4519 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3065 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3055) + _3131;
                        float _4530 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4541 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) / ((_3129 * _3129) * ((_3072 * 2.1991131305694580078125) + 3.141590118408203125))) * _3061;
                        _2909 = (_3076 * _3024.x) + _2982;
                        _2910 = (_3076 * _3024.y) + _2983;
                        _2911 = (_3076 * _3024.z) + _2984;
                        _2906 = (_3157 * _3041.x) + _2979;
                        _2907 = (_3157 * _3041.y) + _2980;
                        _2908 = (_3157 * _3041.z) + _2981;
                        if (_2986 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2986;
                        }
                    }
                    frontier_phi_66_pred = _2906;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                _2683 = frontier_phi_66_pred;
                _2693 = frontier_phi_66_pred_1;
                _2691 = frontier_phi_66_pred_2;
                _2689 = frontier_phi_66_pred_3;
                _2687 = frontier_phi_66_pred_4;
                _2685 = frontier_phi_66_pred_5;
                uint _2841 = _2840 + 1u;
                if (_2841 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2834 = _2683;
                    _2835 = _2685;
                    _2836 = _2687;
                    _2837 = _2689;
                    _2838 = _2691;
                    _2839 = _2693;
                    _2840 = _2841;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
        }
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.z;
        uint _2699 = (_2697 >> 8u) & 15u;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((4294967295u << _2699) & _2581) == 0u)
        {
            _2802 = _2682;
            _2804 = _2684;
            _2806 = _2686;
            _2808 = _2688;
            _2810 = _2690;
            _2812 = _2692;
        }
        else
        {
            float _2827 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
            float _2828 = _2827 * _2535;
            float _2829 = _2827 * _2536;
            float _2830 = _2827 * _2537;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2699 < ((_2697 >> 12u) & 15u))
            {
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2962 = _2682;
                float _2963 = _2684;
                float _2964 = _2686;
                float _2965 = _2688;
                float _2966 = _2690;
                float _2967 = _2692;
                uint _2968 = _2699;
                uint _2977;
                bool _2978;
                for (;;)
                {
                    _2977 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2968 << 2u)) >> 2u)).x;
                    _2978 = _2977 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2978)
                    {
                        frontier_phi_77_pred = _2967;
                        frontier_phi_77_pred_1 = _2966;
                        frontier_phi_77_pred_2 = _2965;
                        frontier_phi_77_pred_3 = _2964;
                        frontier_phi_77_pred_4 = _2963;
                        frontier_phi_77_pred_5 = _2962;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        uint _3190 = _2977;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3274;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3201 = ((_2968 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3201 * 40u) + 20u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3201 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3201 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_2537, _3308.z, fma(_2536, _3308.y, _3308.x * _2535)) + _3308.w;
                            _3321 = !((fma(_2537, _3289.z, fma(_2536, _3289.y, _3289.x * _2535)) + _3289.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3216.x - _2535;
                                float _3349 = _3216.y - _2536;
                                float _3350 = _3216.z - _2537;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3217 * _3217));
                                float _4552 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3366 = sqrt(_3351) * _3232.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_807, _810, _813))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_2537, _3259.z, fma(_2536, _3259.y, _3259.x * _2535)) + _3259.w) / _3320;
                                float _3380 = (fma(_2537, _3274.z, fma(_2536, _3274.y, _3274.x * _2535)) + _3274.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4568 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _867;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2828;
                                float _3410 = _3356 - _2829;
                                float _3411 = _3357 - _2830;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_807, _810, _813), vec3((-0.0) - _2828, (-0.0) - _2829, (-0.0) - _2830));
                                float _4579 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3423 = dot(vec3(_807, _810, _813), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4590 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_807, _810, _813), vec3(_3355, _3356, _3357))) + _3432;
                                float _4601 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4612 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3386 * _3232.y;
                                frontier_phi_83_pred_1 = _3386 * _3232.x;
                                frontier_phi_83_pred_2 = _3460 * _3244.z;
                                frontier_phi_83_pred_3 = _3460 * _3244.y;
                                frontier_phi_83_pred_4 = _3460 * _3244.x;
                                frontier_phi_83_pred_5 = _3386 * _3232.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3468 = frontier_phi_83_pred;
                            _3467 = frontier_phi_83_pred_1;
                            _3466 = frontier_phi_83_pred_2;
                            _3465 = frontier_phi_83_pred_3;
                            _3464 = frontier_phi_83_pred_4;
                            _3469 = frontier_phi_83_pred_5;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3176;
                        frontier_phi_77_pred_1 = _3175;
                        frontier_phi_77_pred_2 = _3174;
                        frontier_phi_77_pred_3 = _3173;
                        frontier_phi_77_pred_4 = _3172;
                        frontier_phi_77_pred_5 = _3171;
                    }
                    _2813 = frontier_phi_77_pred;
                    _2811 = frontier_phi_77_pred_1;
                    _2809 = frontier_phi_77_pred_2;
                    _2807 = frontier_phi_77_pred_3;
                    _2805 = frontier_phi_77_pred_4;
                    _2803 = frontier_phi_77_pred_5;
                    uint _2969 = _2968 + 1u;
                    if (_2969 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2962 = _2803;
                        _2963 = _2805;
                        _2964 = _2807;
                        _2965 = _2809;
                        _2966 = _2811;
                        _2967 = _2813;
                        _2968 = _2969;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2807;
                frontier_phi_58_59_ladder_1 = _2813;
                frontier_phi_58_59_ladder_2 = _2811;
                frontier_phi_58_59_ladder_3 = _2809;
                frontier_phi_58_59_ladder_4 = _2805;
                frontier_phi_58_59_ladder_5 = _2803;
            }
            else
            {
                frontier_phi_58_59_ladder = _2686;
                frontier_phi_58_59_ladder_1 = _2692;
                frontier_phi_58_59_ladder_2 = _2690;
                frontier_phi_58_59_ladder_3 = _2688;
                frontier_phi_58_59_ladder_4 = _2684;
                frontier_phi_58_59_ladder_5 = _2682;
            }
            _2802 = frontier_phi_58_59_ladder_5;
            _2804 = frontier_phi_58_59_ladder_4;
            _2806 = frontier_phi_58_59_ladder;
            _2808 = frontier_phi_58_59_ladder_3;
            _2810 = frontier_phi_58_59_ladder_2;
            _2812 = frontier_phi_58_59_ladder_1;
        }
        float _2817 = isnan(1.0) ? _851 : (isnan(_851) ? 1.0 : min(_851, 1.0));
        _2594 = (_2817 * _2808) + _2049;
        _2596 = (_2817 * _2810) + _2051;
        _2598 = (_2817 * _2812) + _2053;
        _2600 = ((_2802 * 0.039999999105930328369140625) * _2817) + _2379;
        _2602 = ((_2804 * 0.039999999105930328369140625) * _2817) + _2381;
        _2604 = ((_2806 * 0.039999999105930328369140625) * _2817) + _2383;
    }
    else
    {
        _2594 = _2049;
        _2596 = _2051;
        _2598 = _2053;
        _2600 = _2379;
        _2602 = _2381;
        _2604 = _2383;
    }
    float _4628 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4639 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4650 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _2621 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2594 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _851))) + ((_2600 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1687)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2596 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _851))) + ((_2602 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1687)) * cbPerFrame._m0[3u].x);
    float _2623 = ((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2598 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _851))) + ((_2604 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1687)) * cbPerFrame._m0[3u].x);
    uint _2624 = _267 + 6u;
    float _2632 = _786 / cbSceneParam._m0[86u].x;
    float _2633 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2647 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2649 = _2647.x;
    float _2650 = _2647.y;
    float _2651 = _2647.z;
    float _2652 = _2647.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2707 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2708 = _2707 / _708;
        float _2719 = _2708 * _758;
        float _2720 = _759 * _2708;
        float _2721 = (-0.0) - _2720;
        float _2722 = _2708 * _760;
        float _2724 = (cbSceneParam._m0[77u].w * _2721) / _2707;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2720;
        float _2732 = sqrt(((_2719 * _2719) + (_2720 * _2720)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2707)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2919;
        if (abs((_2721 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2919 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2863 = 1.0 / cbSceneParam._m0[80u].x;
            float _2864 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2865 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            float _2875 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : min(_2865, 0.0));
            _2919 = ((abs(_2732 / _2721) * cbSceneParam._m0[80u].y) * ((((_2874 - _2875) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0))))) * _2863)) - ((exp2(_2742 * _2874) - exp2(_2742 * _2875)) * _2863))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2921 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2632, _2633, 1.0), 0.0);
        float _2930 = exp2((_2919 * (-1.44269502162933349609375)) * (1.0 - _2921.w));
        float _2931 = log2(_2930);
        float _2947 = log2(_2652);
        _2744 = (exp2(_2947 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].x)) * _2921.x) / cbSceneParam._m0[78u].x)) + _2649;
        _2746 = (exp2(_2947 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].y)) * _2921.y) / cbSceneParam._m0[78u].y)) + _2650;
        _2748 = (exp2(_2947 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].z)) * _2921.z) / cbSceneParam._m0[78u].z)) + _2651;
        _2750 = _2930 * _2652;
    }
    else
    {
        _2744 = _2649;
        _2746 = _2650;
        _2748 = _2651;
        _2750 = _2652;
    }
    bool _2957;
    vec4 _2760;
    vec4 _2782;
    float _2784;
    float _2788;
    float _2789;
    float _2790;
    float _2791;
    bool _2801;
    for (;;)
    {
        _2760 = cbMatDynParam._m0[0u];
        float _2762 = roundEven(_2760.y);
        bool _2763 = _2762 == 3.0;
        float _2764 = log2(_2750);
        float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * _2621;
        float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * _2622;
        float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * _2623;
        float _2780 = _774 + (-0.5);
        _2782 = cbMtdParam._m0[1u];
        _2784 = _2782.y * _2780;
        float _2787 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2788 = _2787 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
        _2789 = _2787 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
        _2790 = _2787 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
        _2791 = _2780 * 0.999000012874603271484375;
        _2801 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2801)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _2791) < 0.5)
            {
                _2957 = true;
                break;
            }
        }
        uint _2898 = _826 + uint(_2760.w);
        if ((cbInstanceData._m0[_2898].w < 1.0) && ((cbInstanceData._m0[_2898].w + _2791) < 0.5))
        {
            _2957 = true;
            break;
        }
        if ((_2784 + 1.0) < _2782.x)
        {
            _2957 = true;
            break;
        }
        _2957 = false;
        break;
    }
    float _3162;
    if (_2957)
    {
        discard_state = true;
        _3162 = 0.0;
    }
    else
    {
        _3162 = cbInstanceData._m0[_2624].w;
    }
    SV_Target.x = _2788;
    SV_Target.y = _2789;
    SV_Target.z = _2790;
    SV_Target.w = _3162;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2624].w;
    discard_exit();
}


