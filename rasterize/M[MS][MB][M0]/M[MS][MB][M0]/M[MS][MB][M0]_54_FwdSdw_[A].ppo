#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1089;
float _3733;
float _3734;
float _3735;
float _3736;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _301 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _254) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _255) + cbTextureTilingScale._m0[20u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _351 = _347.z;
    float _355 = (_347.x * 2.0) + (-1.0);
    float _356 = (_347.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_355, _356), vec2(_355, _356));
    float _3745 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _363 = sqrt(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))));
    float _368 = _355 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_321.x * 2.0) + (-1.0)));
    float _369 = _356 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_321.y * 2.0) + (-1.0)));
    float _372 = fma(_363, _222, fma(_369, _229, _368 * _215));
    float _375 = fma(_363, _223, fma(_369, _230, _368 * _216));
    float _378 = fma(_363, _224, fma(_369, _231, _368 * _217));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _420 = _418.x;
    float _421 = 1.0 - _420;
    float _428 = ((_420 - _421) * cbMtdParam._m0[24u].z) + _421;
    float _430 = (cbMtdParam._m0[19u].x + dot(vec4(_382 * _372, _382 * _375, _382 * _378, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_428 * cbMtdParam._m0[21u].z);
    float _3756 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _446 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_428 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3767 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _451 = ((_431 * ((_301.x * cbMtdParam._m0[18u].x) - _280)) * _447) + _280;
    float _452 = ((_431 * ((_301.y * cbMtdParam._m0[18u].y) - _281)) * _447) + _281;
    float _453 = ((_431 * ((_301.z * cbMtdParam._m0[18u].z) - _282)) * _447) + _282;
    float _458 = (((_321.z - _351) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _351;
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _478 = (_471.x * 2.0) + (-1.0);
    float _479 = (_471.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3778 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _489 = (((_471.z - _458) * _431) * _447) + _458;
    float _504 = (((cbMtdParam._m0[21u].x * _368) + ((_478 - _368) * _431)) * _447) + _368;
    float _505 = (((cbMtdParam._m0[21u].x * _369) + ((_479 - _369) * _431)) * _447) + _369;
    float _506 = (((sqrt(1.0 - (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) - _363) * _431) * _447) + _363;
    float _511 = cbMtdParam._m0[22u].x + _347.w;
    float _514 = fma(_506, _222, fma(_505, _229, _504 * _215));
    float _517 = fma(_506, _223, fma(_505, _230, _504 * _216));
    float _520 = fma(_506, _224, fma(_505, _231, _504 * _217));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    float _525 = _524 * _514;
    float _526 = _524 * _517;
    float _527 = _524 * _520;
    float _3789 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _528 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3811 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3822 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3833 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _546 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _587 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _597 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _587);
    float _598 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _587);
    float _599 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _587);
    float _603 = inversesqrt(dot(vec3(_597, _598, _599), vec3(_597, _598, _599)));
    float _604 = _597 * _603;
    float _605 = _598 * _603;
    float _606 = _599 * _603;
    vec4 _611 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _613 = _611.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _770 = sqrt(((_597 * _597) + (_598 * _598)) + (_599 * _599));
        float _776 = (cbMatDynParam._m0[5u].x * _770) + cbMatDynParam._m0[5u].y;
        float _3844 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _781 = (cbMatDynParam._m0[5u].z * _770) + cbMatDynParam._m0[5u].w;
        float _3855 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) - _777)) + _777) < ((_613 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _625 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _626 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _646 = fma(_527, cbSceneParam._m0[5u].z, fma(_526, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _525));
    float _649 = fma(_527, cbSceneParam._m0[6u].z, fma(_526, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _525));
    float _652 = fma(_527, cbSceneParam._m0[7u].z, fma(_526, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _525));
    uint _665 = _234 + 9u;
    uint _666 = _665 + uint(cbMatDynParam._m0[0u].w);
    float _672 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_666].x;
    float _673 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * cbInstanceData._m0[_666].y;
    float _674 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * cbInstanceData._m0[_666].z;
    float _3866 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _3877 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _625, cbSceneParam._m0[86u].y * _626));
    float _690 = ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * TEXCOORD_5.w) * _686.x;
    float _691 = dot(vec3(_525, _526, _527), vec3(_604, _605, _606));
    float _694 = _691 * 2.0;
    float _698 = (_694 * _525) - _604;
    float _699 = (_694 * _526) - _605;
    float _700 = (_694 * _527) - _606;
    float _704 = abs(dot(vec3(_604, _605, _606), vec3(_525, _526, _527)));
    float _3899 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _706 = sqrt(_528);
    float _719 = exp2((_706 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_706 * 3.0));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_759, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751));
        float _817 = fma(_759, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751));
        float _821 = fma(_759, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751));
        float _846 = _751 + _525;
        float _847 = _755 + _526;
        float _848 = _759 + _527;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_525, _526, _527), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3947 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_525, _526, _527), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3980 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_525, _526, _527), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _4013 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1131 = fma(_759, cbModelParam._m0[30u].z, fma(_755, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _751));
        float _1135 = fma(_759, cbModelParam._m0[31u].z, fma(_755, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _751));
        float _1139 = fma(_759, cbModelParam._m0[32u].z, fma(_755, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _751));
        float _1162 = _751 + _525;
        float _1163 = _755 + _526;
        float _1164 = _759 + _527;
        float _1174 = fma(_1164, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162)) - _1131;
        float _1175 = fma(_1164, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162)) - _1135;
        float _1176 = fma(_1164, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162)) - _1139;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1131 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1135 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[35u].z) + ((((((_1139 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1230 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1197.x + (-0.5));
        float _1232 = _1230 * (_1197.y + (-0.5));
        float _1233 = _1230 * (_1197.z + (-0.5));
        float _1240 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1204.x + (-0.5));
        float _1242 = _1240 * (_1204.y + (-0.5));
        float _1243 = _1240 * (_1204.z + (-0.5));
        float _1250 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1211.x + (-0.5));
        float _1252 = _1250 * (_1211.y + (-0.5));
        float _1253 = _1250 * (_1211.z + (-0.5));
        float _1260 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1218.x + (-0.5));
        float _1262 = _1260 * (_1218.y + (-0.5));
        float _1263 = _1260 * (_1218.z + (-0.5));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = _1231 * 0.5;
        float _1268 = _1241 * 0.5;
        float _1269 = _1251 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_525, _526, _527), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4076 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1294 + 1.0))) + _1299) * _1264;
        float _1309 = _1232 * 0.5;
        float _1310 = _1242 * 0.5;
        float _1311 = _1252 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_525, _526, _527), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4109 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1336 + 1.0))) + _1341) * _1265;
        float _1351 = _1233 * 0.5;
        float _1352 = _1243 * 0.5;
        float _1353 = _1253 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_525, _526, _527), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4142 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1378 + 1.0))) + _1383) * _1266;
        _1400 = _1233;
        _1401 = _1232;
        _1402 = _1231;
        _1403 = _1243;
        _1404 = _1242;
        _1405 = _1241;
        _1406 = _1253;
        _1407 = _1252;
        _1408 = _1251;
        _1409 = _1266;
        _1410 = _1265;
        _1411 = _1264;
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1414 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1089;
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = _1089;
        _1410 = _1089;
        _1411 = _1089;
        _1412 = 0.0;
        _1413 = 0.0;
        _1414 = 0.0;
    }
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1101)) + _1101;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1102)) + _1102;
    float _1426 = (cbModelParam._m0[1u].x * (_1414 - _1103)) + _1103;
    float _1447 = fma(_1426, cbSceneParam._m0[89u].z, fma(_1425, cbSceneParam._m0[89u].y, _1424 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1426, cbSceneParam._m0[90u].z, fma(_1425, cbSceneParam._m0[90u].y, _1424 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1426, cbSceneParam._m0[91u].z, fma(_1425, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1424));
    float _1468 = _698 * 0.5;
    float _1469 = _699 * 0.5;
    float _1470 = _700 * 0.5;
    float _1471 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1402, _1405, _1408, _1411));
    float _1474 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1477 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1511;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1484 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1488 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1492 = dot(vec4(_1468, _1469, _1470, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1499 = dot(vec4(cbModelParam._m0[39u]), vec4(_1468, _1469, _1470, 1.0));
        _1511 = dot(vec3(isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1499) ? 0.0 : (isnan(0.0) ? _1499 : max(0.0, _1499))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1511 = 1.0;
    }
    float _1522;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1513 = dot(vec4(cbModelParam._m0[40u]), vec4(_1468, _1469, _1470, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1513) ? 0.0 : (isnan(0.0) ? _1513 : max(0.0, _1513))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1526 = (_1522 * cbModelParam._m0[1u].x) + (_1511 * (1.0 - cbModelParam._m0[1u].x));
    float _1536 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _528);
    float _1537 = isnan(_1536) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1536 : min(cbModelParam._m0[25u].z, _1536));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_759, cbModelParam._m0[13u].z, fma(_755, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_759, cbModelParam._m0[14u].z, fma(_755, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_759, cbModelParam._m0[15u].z, fma(_755, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_700, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _698));
        float _1598 = fma(_700, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _698));
        float _1601 = fma(_700, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _698));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1629 = frontier_phi_17_15_ladder;
        }
        float _1799;
        if (_1598 > 0.0)
        {
            _1799 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1799 = frontier_phi_26_22_ladder;
        }
        float _2095;
        if (_1601 > 0.0)
        {
            _2095 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2095 = frontier_phi_38_33_ladder;
        }
        float _2097 = isnan(_1799) ? _1629 : (isnan(_1629) ? _1799 : min(_1629, _1799));
        float _2098 = isnan(_2095) ? _2097 : (isnan(_2097) ? _2095 : min(_2097, _2095));
        float _2102 = (_2098 * _1595) + _1584;
        float _2103 = (_2098 * _1598) + _1588;
        float _2104 = (_2098 * _1601) + _1592;
        float _2105 = _2098 * 9.9999997473787516355514526367188e-05;
        float _2107 = (-1.0) - _2105;
        float _2109 = _2105 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2104 > _2109) || ((_2104 < _2107) || ((_2103 > _2109) || ((_2103 < _2107) || ((_2102 < _2107) || (_2102 > _2109))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2104, cbModelParam._m0[9u].z, fma(_2103, cbModelParam._m0[9u].y, _2102 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2104, cbModelParam._m0[10u].z, fma(_2103, cbModelParam._m0[10u].y, _2102 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2104, cbModelParam._m0[11u].z, fma(_2103, cbModelParam._m0[11u].y, _2102 * cbModelParam._m0[11u].x))), _1537);
            frontier_phi_16_38_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_16_38_ladder_2;
        _1619 = frontier_phi_16_38_ladder_1;
        _1621 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_698, _699, _700), _1537);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _528);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1679 = fma(_759, cbModelParam._m0[21u].z, fma(_755, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751)) + cbModelParam._m0[21u].w;
        float _1683 = fma(_759, cbModelParam._m0[22u].z, fma(_755, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751)) + cbModelParam._m0[22u].w;
        float _1687 = fma(_759, cbModelParam._m0[23u].z, fma(_755, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751)) + cbModelParam._m0[23u].w;
        float _1690 = fma(_700, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _698));
        float _1693 = fma(_700, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _698));
        float _1696 = fma(_700, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _698));
        float _1804;
        if (_1690 > 0.0)
        {
            _1804 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1804 = frontier_phi_28_24_ladder;
        }
        float _2122;
        if (_1693 > 0.0)
        {
            _2122 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2122 = frontier_phi_40_35_ladder;
        }
        float _2449;
        if (_1696 > 0.0)
        {
            _2449 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2449 = frontier_phi_50_47_ladder;
        }
        float _2451 = isnan(_2122) ? _1804 : (isnan(_1804) ? _2122 : min(_1804, _2122));
        float _2452 = isnan(_2449) ? _2451 : (isnan(_2451) ? _2449 : min(_2451, _2449));
        float _2456 = (_2452 * _1690) + _1679;
        float _2457 = (_2452 * _1693) + _1683;
        float _2458 = (_2452 * _1696) + _1687;
        float _2459 = _2452 * 9.9999997473787516355514526367188e-05;
        float _2460 = (-1.0) - _2459;
        float _2462 = _2459 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2458 > _2462) || ((_2458 < _2460) || ((_2457 > _2462) || ((_2457 < _2460) || ((_2456 < _2460) || (_2456 > _2462))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2458, cbModelParam._m0[17u].z, fma(_2457, cbModelParam._m0[17u].y, _2456 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2458, cbModelParam._m0[18u].z, fma(_2457, cbModelParam._m0[18u].y, _2456 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2458, cbModelParam._m0[19u].z, fma(_2457, cbModelParam._m0[19u].y, _2456 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_25_50_ladder = _2576.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2576.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2576.x * cbModelParam._m0[1u].z;
        }
        _1715 = frontier_phi_25_50_ladder_2;
        _1717 = frontier_phi_25_50_ladder_1;
        _1719 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_698, _699, _700), _1626);
        _1715 = _1699.x * cbModelParam._m0[1u].z;
        _1717 = _1699.y * cbModelParam._m0[1u].z;
        _1719 = _1699.z * cbModelParam._m0[1u].z;
    }
    float _1731 = ((((1.0 - _719) * ((_706 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_719 * _706)) * _690;
    float _1732 = _1731 * ((cbModelParam._m0[1u].w * (_1715 - _1617)) + _1617);
    float _1733 = _1731 * ((cbModelParam._m0[1u].w * (_1717 - _1619)) + _1619);
    float _1734 = _1731 * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1737 = fma(_1734, cbSceneParam._m0[89u].z, fma(_1733, cbSceneParam._m0[89u].y, _1732 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1734, cbSceneParam._m0[90u].z, fma(_1733, cbSceneParam._m0[90u].y, _1732 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1734, cbSceneParam._m0[91u].z, fma(_1733, cbSceneParam._m0[91u].y, _1732 * cbSceneParam._m0[91u].x));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1790 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1791 = _1778 / _1790;
    float _1792 = _1782 / _1790;
    float _1793 = _1786 / _1790;
    float _1940;
    float _1941;
    float _1942;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1820 = ((uint(_1793 > cbSceneParam._m0[59u].y) + uint(_1793 > cbSceneParam._m0[59u].x)) + uint(_1793 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1821 = _1820 + 43u;
        uint _1829 = _1820 + 44u;
        uint _1837 = _1820 + 45u;
        uint _1845 = _1820 + 46u;
        float _1856 = fma(_1790, cbSceneParam._m0[_1821].w, fma(_1786, cbSceneParam._m0[_1821].z, fma(_1782, cbSceneParam._m0[_1821].y, _1778 * cbSceneParam._m0[_1821].x)));
        float _1860 = fma(_1790, cbSceneParam._m0[_1829].w, fma(_1786, cbSceneParam._m0[_1829].z, fma(_1782, cbSceneParam._m0[_1829].y, _1778 * cbSceneParam._m0[_1829].x)));
        float _1868 = fma(_1790, cbSceneParam._m0[_1845].w, fma(_1786, cbSceneParam._m0[_1845].z, fma(_1782, cbSceneParam._m0[_1845].y, _1778 * cbSceneParam._m0[_1845].x)));
        float _1873 = cbSceneParam._m0[33u].z * _1868;
        float _1875 = cbSceneParam._m0[33u].w * _1868;
        float _1878 = fma(_1790, cbSceneParam._m0[_1837].w, fma(_1786, cbSceneParam._m0[_1837].z, fma(_1782, cbSceneParam._m0[_1837].y, _1778 * cbSceneParam._m0[_1837].x))) / _1868;
        float _1926 = (cbSceneParam._m0[33u].x - sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793))) * cbSceneParam._m0[33u].y;
        float _4268 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1933 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1873 + _1856) / _1868, (_1875 + _1860) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 + _1856) / _1868, (_1860 - _1873) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 - _1873) / _1868, (_1860 - _1875) / _1868), _1878), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1856 - _1875) / _1868, (_1873 + _1860) / _1868), _1878), 0.0)).x), vec4(0.25)));
        _1940 = 1.0 - (_1933 * cbSceneParam._m0[34u].x);
        _1941 = 1.0 - (_1933 * cbSceneParam._m0[34u].y);
        _1942 = 1.0 - (_1933 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1940 = 1.0;
        _1941 = 1.0;
        _1942 = 1.0;
    }
    float _2006;
    float _2008;
    float _2010;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1994 = fma(_1790, cbSceneParam._m0[63u].w, fma(_1786, cbSceneParam._m0[63u].z, fma(_1782, cbSceneParam._m0[63u].y, _1778 * cbSceneParam._m0[63u].x)));
        float _1995 = fma(_1790, cbSceneParam._m0[60u].w, fma(_1786, cbSceneParam._m0[60u].z, fma(_1782, cbSceneParam._m0[60u].y, _1778 * cbSceneParam._m0[60u].x))) / _1994;
        float _1996 = fma(_1790, cbSceneParam._m0[61u].w, fma(_1786, cbSceneParam._m0[61u].z, fma(_1782, cbSceneParam._m0[61u].y, _1778 * cbSceneParam._m0[61u].x))) / _1994;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1995 >= cbSceneParam._m0[64u].x) && (_1996 >= cbSceneParam._m0[64u].y)) && (_1995 <= cbSceneParam._m0[64u].z)) && (_1996 <= cbSceneParam._m0[64u].w))
        {
            float _2135 = fma(_1790, cbSceneParam._m0[62u].w, fma(_1786, cbSceneParam._m0[62u].z, fma(_1782, cbSceneParam._m0[62u].y, _1778 * cbSceneParam._m0[62u].x))) / _1994;
            float _2139 = isnan(cbSceneParam._m0[41u].w) ? _2135 : (isnan(_2135) ? cbSceneParam._m0[41u].w : max(_2135, cbSceneParam._m0[41u].w));
            float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793))) * cbSceneParam._m0[33u].y;
            float _4284 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
            float _2189 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1995, cbSceneParam._m0[33u].w + _1996), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1995, _1996 - cbSceneParam._m0[33u].z), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1995 - cbSceneParam._m0[33u].z, _1996 - cbSceneParam._m0[33u].w), _2139), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1995 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1996), _2139), 0.0)).x), vec4(0.25)));
            float _2193 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
            float _2194 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
            float _2195 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2195) ? _1942 : (isnan(_1942) ? _2195 : min(_1942, _2195));
            frontier_phi_37_36_ladder_1 = isnan(_2194) ? _1941 : (isnan(_1941) ? _2194 : min(_1941, _2194));
            frontier_phi_37_36_ladder_2 = isnan(_2193) ? _1940 : (isnan(_1940) ? _2193 : min(_1940, _2193));
        }
        else
        {
            frontier_phi_37_36_ladder = _1942;
            frontier_phi_37_36_ladder_1 = _1941;
            frontier_phi_37_36_ladder_2 = _1940;
        }
        _2006 = frontier_phi_37_36_ladder_2;
        _2008 = frontier_phi_37_36_ladder_1;
        _2010 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2006 = _1940;
        _2008 = _1941;
        _2010 = _1942;
    }
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2025 = _690 + (-1.0);
    float _2030 = (cbLight._m0[_2018].x * _2025) + 1.0;
    float _2031 = (cbLight._m0[_2018].y * _2025) + 1.0;
    float _2032 = (cbLight._m0[_2018].z * _2025) + 1.0;
    float _2033 = (cbLight._m0[_2018].w * _2025) + 1.0;
    uint _2034 = _2017 + 5u;
    float _2040 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2044 = _2017 + 4u;
    float _2054 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
    uint _2058 = _2017 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_525, _526, _527));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_525, _526, _527));
    float _4320 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4331 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2034].x * _2040) * _2079) + (((cbLight._m0[_2044].x * _2006) * _2054) * _2077);
    float _2087 = ((_2040 * cbLight._m0[_2034].y) * _2079) + (((cbLight._m0[_2044].y * _2008) * _2054) * _2077);
    float _2088 = ((_2040 * cbLight._m0[_2034].z) * _2079) + (((cbLight._m0[_2044].z * _2010) * _2054) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2017 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2196;
    float _2198;
    float _2200;
    if (_2094)
    {
        _2196 = _2086;
        _2198 = _2087;
        _2200 = _2088;
    }
    else
    {
        uint _2204 = _2017 + 6u;
        float _2220 = (dot(vec3(cbLight._m0[_2017 + 2u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4342 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2223 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2196 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _2086;
        _2198 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _2087;
        _2200 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _2088;
    }
    bool _2203 = _2092.y == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2203)
    {
        _2258 = _2196;
        _2260 = _2198;
        _2262 = _2200;
    }
    else
    {
        uint _2420 = _2017 + 7u;
        float _2436 = (dot(vec3(cbLight._m0[_2017 + 3u].xyz), vec3(_525, _526, _527)) * 0.5) + 0.5;
        float _2437 = _2436 * _2436;
        float _4358 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2438 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2439 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2258 = (((cbLight._m0[_2420].x * 0.3183098733425140380859375) * _2438) * _2439) + _2196;
        _2260 = (((cbLight._m0[_2420].y * 0.3183098733425140380859375) * _2438) * _2439) + _2198;
        _2262 = (((cbLight._m0[_2420].z * 0.3183098733425140380859375) * _2438) * _2439) + _2200;
    }
    uint _2265 = _2017 + 8u;
    float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _528) * 0.949999988079071044921875);
    float _2279 = _2278 * _2278;
    float _2280 = cbLight._m0[_2017].x + _604;
    float _2281 = cbLight._m0[_2017].y + _605;
    float _2282 = cbLight._m0[_2017].z + _606;
    float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
    float _2287 = _2286 * _2280;
    float _2288 = _2286 * _2281;
    float _2289 = _2286 * _2282;
    float _2290 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2017].xyz));
    float _4374 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _2294 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2295 = dot(vec3(_525, _526, _527), vec3(_2287, _2288, _2289));
    float _4396 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2287, _2288, _2289));
    float _4407 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2279 * _2279;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2319 = 1.0 - _2279;
    float _2330 = (0.5 / (((_2294 * ((_2293 * _2319) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2319) + _2279) * _2293))) * _2293;
    float _4418 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2332 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    uint _2346 = _2017 + 9u;
    float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _528) * 0.949999988079071044921875);
    float _2358 = _2357 * _2357;
    float _2359 = cbLight._m0[_2058].x + _604;
    float _2360 = cbLight._m0[_2058].y + _605;
    float _2361 = cbLight._m0[_2058].z + _606;
    float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
    float _2366 = _2365 * _2359;
    float _2367 = _2365 * _2360;
    float _2368 = _2365 * _2361;
    float _2369 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2058].xyz));
    float _4429 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2373 = dot(vec3(_525, _526, _527), vec3(_2366, _2367, _2368));
    float _4440 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2377 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2366, _2367, _2368));
    float _4451 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2381 = _2358 * _2358;
    float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
    float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2395 = 1.0 - _2358;
    float _2405 = (0.5 / (((_2294 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2395) + _2358) * _2372))) * _2372;
    float _4462 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2407 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
    float _2417 = (((_2394 * cbLight._m0[_2346].x) * _2407) * _2040) + ((((cbLight._m0[_2265].x * _2006) * _2318) * _2332) * _2054);
    float _2418 = (((_2394 * cbLight._m0[_2346].y) * _2407) * _2040) + ((((cbLight._m0[_2265].y * _2008) * _2318) * _2332) * _2054);
    float _2419 = (((_2394 * cbLight._m0[_2346].z) * _2407) * _2040) + ((((cbLight._m0[_2265].z * _2010) * _2318) * _2332) * _2054);
    float _2475;
    float _2477;
    float _2479;
    if (_2094)
    {
        _2475 = _2417;
        _2477 = _2418;
        _2479 = _2419;
    }
    else
    {
        uint _2481 = _2017 + 2u;
        uint _2485 = _2017 + 10u;
        float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _528) * 0.949999988079071044921875);
        float _2500 = _2499 * _2499;
        float _2501 = cbLight._m0[_2481].x + _604;
        float _2502 = cbLight._m0[_2481].y + _605;
        float _2503 = cbLight._m0[_2481].z + _606;
        float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
        float _2508 = _2507 * _2501;
        float _2509 = _2507 * _2502;
        float _2510 = _2507 * _2503;
        float _2511 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2481].xyz));
        float _4473 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2514 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2515 = dot(vec3(_525, _526, _527), vec3(_2508, _2509, _2510));
        float _4484 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _2519 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2508, _2509, _2510));
        float _4495 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2523 = _2500 * _2500;
        float _2527 = ((_2518 * _2518) * (_2523 + (-1.0))) + 1.0;
        float _2536 = (exp2(log2(1.0 - (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2537 = 1.0 - _2500;
        float _2547 = (0.5 / (((_2294 * ((_2514 * _2537) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2537) + _2500) * _2514))) * _2514;
        float _4506 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2549 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (_2523 / ((_2527 * _2527) * 3.141590118408203125));
        float _2550 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
        _2475 = (((_2536 * cbLight._m0[_2485].x) * _2549) * _2550) + _2417;
        _2477 = (((_2536 * cbLight._m0[_2485].y) * _2549) * _2550) + _2418;
        _2479 = (((_2536 * cbLight._m0[_2485].z) * _2549) * _2550) + _2419;
    }
    float _2581;
    float _2583;
    float _2585;
    if (_2203)
    {
        _2581 = _2475;
        _2583 = _2477;
        _2585 = _2479;
    }
    else
    {
        uint _2592 = _2017 + 3u;
        uint _2596 = _2017 + 11u;
        float _2610 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2592].w)) * _528) * 0.949999988079071044921875);
        float _2611 = _2610 * _2610;
        float _2612 = cbLight._m0[_2592].x + _604;
        float _2613 = cbLight._m0[_2592].y + _605;
        float _2614 = cbLight._m0[_2592].z + _606;
        float _2618 = inversesqrt(dot(vec3(_2612, _2613, _2614), vec3(_2612, _2613, _2614)));
        float _2619 = _2618 * _2612;
        float _2620 = _2618 * _2613;
        float _2621 = _2618 * _2614;
        float _2622 = dot(vec3(_525, _526, _527), vec3(cbLight._m0[_2592].xyz));
        float _4522 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2626 = dot(vec3(_525, _526, _527), vec3(_2619, _2620, _2621));
        float _4533 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2629 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2630 = dot(vec3(cbLight._m0[_2592].xyz), vec3(_2619, _2620, _2621));
        float _4544 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2634 = _2611 * _2611;
        float _2638 = ((_2629 * _2629) * (_2634 + (-1.0))) + 1.0;
        float _2647 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2648 = 1.0 - _2611;
        float _2658 = (0.5 / (((_2294 * ((_2625 * _2648) + _2611)) + 9.9999999392252902907785028219223e-09) + (((_2294 * _2648) + _2611) * _2625))) * _2625;
        float _4555 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2634 / ((_2638 * _2638) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2581 = (((_2647 * cbLight._m0[_2596].x) * _2660) * _2661) + _2475;
        _2583 = (((_2647 * cbLight._m0[_2596].y) * _2660) * _2661) + _2477;
        _2585 = (((_2647 * cbLight._m0[_2596].z) * _2660) * _2661) + _2479;
    }
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_2015.y == 0u)
    {
        uvec4 _2682 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2683 = _2682.x;
        uint _2694 = uint((float(_2682.y) * floor(float(uint(cbSceneParam._m0[85u].y * _626) / _2683))) + floor(float(uint(cbSceneParam._m0[85u].x * _625) / _2683)));
        float _2704 = (log2(_1793 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2705 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        uint _2708 = uint(isnan(14.0) ? _2705 : (isnan(_2705) ? 14.0 : min(_2705, 14.0)));
        uvec4 _2713 = texelFetch(g_lightClusterGridBuffer, int(((_2708 << 2u) + (_2694 << 6u)) >> 2u));
        uint _2714 = _2713.x;
        uint _2715 = _2682.z;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        if (((((1u << ((_2715 >> 4u) & 15u)) + 4294967295u) & _2714) == 0u) || ((_2715 & 240u) == 0u))
        {
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
            _2802 = 0.0;
            _2804 = 0.0;
        }
        else
        {
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2803;
            float _2805;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            uint _2953 = 0u;
            uint _2962;
            bool _2963;
            for (;;)
            {
                _2962 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                _2963 = _2962 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2963)
                {
                    frontier_phi_71_pred = _2952;
                    frontier_phi_71_pred_1 = _2951;
                    frontier_phi_71_pred_2 = _2950;
                    frontier_phi_71_pred_3 = _2949;
                    frontier_phi_71_pred_4 = _2948;
                    frontier_phi_71_pred_5 = _2947;
                }
                else
                {
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    uint _3098;
                    _3092 = _2947;
                    _3093 = _2948;
                    _3094 = _2949;
                    _3095 = _2950;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2962;
                    float _3019;
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    for (;;)
                    {
                        uint _3102 = uint(findLSB(_3098)) + (_2953 << 5u);
                        uint _3099 = (_3098 + 4294967295u) & _3098;
                        uint _3104 = _3102 * 48u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 3u)).x));
                        uint _3124 = (_3102 * 48u) + 4u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 3u)).x));
                        uint _3143 = (_3102 * 48u) + 8u;
                        vec3 _3154 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x));
                        float _3158 = _3118.x - _1791;
                        float _3159 = _3118.y - _1792;
                        float _3160 = _3118.z - _1793;
                        float _3161 = dot(vec3(_3158, _3159, _3160), vec3(_3158, _3159, _3160));
                        float _3164 = inversesqrt(_3161);
                        float _3165 = _3164 * _3158;
                        float _3166 = _3164 * _3159;
                        float _3167 = _3164 * _3160;
                        float _3168 = dot(vec3(_646, _649, _652), vec3(_3165, _3166, _3167));
                        float _3173 = 1.0 - (_3161 * _3118.w);
                        float _4581 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3174 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                        float _3175 = sqrt(_3161) * _3137.w;
                        float _3178 = 1.39999997615814208984375 / (_3175 + 1.39999997615814208984375);
                        float _3179 = _3178 * _3178;
                        float _3182 = ((1.0 - _3179) * _3168) + _3179;
                        float _3185 = _3175 * _3175;
                        float _3189 = ((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3174) / ((_3185 * 0.699999988079071044921875) + 1.0);
                        float _3193 = (-0.0) - _1791;
                        float _3194 = (-0.0) - _1792;
                        float _3195 = (-0.0) - _1793;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3200 = _3199 * _3193;
                        float _3201 = _3199 * _3194;
                        float _3202 = _3199 * _3195;
                        float _3209 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                        float _3210 = 1.0 - _706;
                        float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                        float _3218 = _3217 * _3217;
                        float _3219 = _3218 * _3218;
                        float _3220 = _3200 + _3165;
                        float _3221 = _3201 + _3166;
                        float _3222 = _3202 + _3167;
                        float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                        float _3230 = dot(vec3(_646, _649, _652), vec3(_3200, _3201, _3202));
                        float _4597 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3233 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3234 = dot(vec3(_646, _649, _652), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                        float _4608 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                        float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                        float _3242 = _3178 * _3218;
                        float _3243 = _3242 * _3242;
                        float _3246 = ((1.0 - _3243) * _3168) + _3243;
                        float _4619 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3247 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3248 = 1.0 - _3218;
                        float _3258 = (0.5 / (((_3247 * ((_3233 * _3248) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3218) * _3233))) * _3247;
                        float _4630 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3269 = (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0)))) / ((_3241 * _3241) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125))) * _3174;
                        _3022 = (_3189 * _3137.x) + _3095;
                        _3023 = (_3189 * _3137.y) + _3096;
                        _3024 = (_3189 * _3137.z) + _3097;
                        _3019 = (_3269 * _3154.x) + _3092;
                        _3020 = (_3269 * _3154.y) + _3093;
                        _3021 = (_3269 * _3154.z) + _3094;
                        if (_3099 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3092 = _3019;
                            _3093 = _3020;
                            _3094 = _3021;
                            _3095 = _3022;
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3099;
                        }
                    }
                    frontier_phi_71_pred = _3024;
                    frontier_phi_71_pred_1 = _3023;
                    frontier_phi_71_pred_2 = _3022;
                    frontier_phi_71_pred_3 = _3021;
                    frontier_phi_71_pred_4 = _3020;
                    frontier_phi_71_pred_5 = _3019;
                }
                _2805 = frontier_phi_71_pred;
                _2803 = frontier_phi_71_pred_1;
                _2801 = frontier_phi_71_pred_2;
                _2799 = frontier_phi_71_pred_3;
                _2797 = frontier_phi_71_pred_4;
                _2795 = frontier_phi_71_pred_5;
                uint _2954 = _2953 + 1u;
                if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2947 = _2795;
                    _2948 = _2797;
                    _2949 = _2799;
                    _2950 = _2801;
                    _2951 = _2803;
                    _2952 = _2805;
                    _2953 = _2954;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
            _2802 = _2803;
            _2804 = _2805;
        }
        uvec4 _2808 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2809 = _2808.z;
        uint _2811 = (_2809 >> 8u) & 15u;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((4294967295u << _2811) & _2714) == 0u)
        {
            _2915 = _2794;
            _2917 = _2796;
            _2919 = _2798;
            _2921 = _2800;
            _2923 = _2802;
            _2925 = _2804;
        }
        else
        {
            float _2940 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
            float _2941 = _2940 * _1791;
            float _2942 = _2940 * _1792;
            float _2943 = _2940 * _1793;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2811 < ((_2809 >> 12u) & 15u))
            {
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _3075 = _2794;
                float _3076 = _2796;
                float _3077 = _2798;
                float _3078 = _2800;
                float _3079 = _2802;
                float _3080 = _2804;
                uint _3081 = _2811;
                uint _3090;
                bool _3091;
                for (;;)
                {
                    _3090 = texelFetch(g_lightClassification, int((((_2708 << 5u) + (_2694 << 9u)) + (_3081 << 2u)) >> 2u)).x;
                    _3091 = _3090 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3091)
                    {
                        frontier_phi_82_pred = _3080;
                        frontier_phi_82_pred_1 = _3079;
                        frontier_phi_82_pred_2 = _3078;
                        frontier_phi_82_pred_3 = _3077;
                        frontier_phi_82_pred_4 = _3076;
                        frontier_phi_82_pred_5 = _3075;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3296 = _3075;
                        float _3297 = _3076;
                        float _3298 = _3077;
                        float _3299 = _3078;
                        float _3300 = _3079;
                        float _3301 = _3080;
                        uint _3302 = _3090;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3372;
                        vec4 _3387;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3313 = ((_3081 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3359 = (_3313 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3313 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3313 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3313 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_1793, _3421.z, fma(_1792, _3421.y, _3421.x * _1791)) + _3421.w;
                            _3434 = !((fma(_1793, _3402.z, fma(_1792, _3402.y, _3402.x * _1791)) + _3402.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3328.x - _1791;
                                float _3462 = _3328.y - _1792;
                                float _3463 = _3328.z - _1793;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3329 * _3329));
                                float _4641 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                                float _3479 = sqrt(_3464) * _3344.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_646, _649, _652))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_1793, _3372.z, fma(_1792, _3372.y, _3372.x * _1791)) + _3372.w) / _3433;
                                float _3493 = (fma(_1793, _3387.z, fma(_1792, _3387.y, _3387.x * _1791)) + _3387.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4657 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _706;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2941;
                                float _3523 = _3469 - _2942;
                                float _3524 = _3470 - _2943;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_646, _649, _652), vec3((-0.0) - _2941, (-0.0) - _2942, (-0.0) - _2943));
                                float _4668 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
                                float _3536 = dot(vec3(_646, _649, _652), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4679 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_646, _649, _652), vec3(_3468, _3469, _3470))) + _3545;
                                float _4690 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4701 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3499 * _3344.z;
                                frontier_phi_88_pred_1 = _3499 * _3344.y;
                                frontier_phi_88_pred_2 = _3499 * _3344.x;
                                frontier_phi_88_pred_3 = _3573 * _3356.z;
                                frontier_phi_88_pred_4 = _3573 * _3356.y;
                                frontier_phi_88_pred_5 = _3573 * _3356.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3582 = frontier_phi_88_pred;
                            _3581 = frontier_phi_88_pred_1;
                            _3580 = frontier_phi_88_pred_2;
                            _3579 = frontier_phi_88_pred_3;
                            _3578 = frontier_phi_88_pred_4;
                            _3577 = frontier_phi_88_pred_5;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3288;
                        frontier_phi_82_pred_1 = _3287;
                        frontier_phi_82_pred_2 = _3286;
                        frontier_phi_82_pred_3 = _3285;
                        frontier_phi_82_pred_4 = _3284;
                        frontier_phi_82_pred_5 = _3283;
                    }
                    _2926 = frontier_phi_82_pred;
                    _2924 = frontier_phi_82_pred_1;
                    _2922 = frontier_phi_82_pred_2;
                    _2920 = frontier_phi_82_pred_3;
                    _2918 = frontier_phi_82_pred_4;
                    _2916 = frontier_phi_82_pred_5;
                    uint _3082 = _3081 + 1u;
                    if (_3082 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3075 = _2916;
                        _3076 = _2918;
                        _3077 = _2920;
                        _3078 = _2922;
                        _3079 = _2924;
                        _3080 = _2926;
                        _3081 = _3082;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2922;
                frontier_phi_63_64_ladder_1 = _2926;
                frontier_phi_63_64_ladder_2 = _2924;
                frontier_phi_63_64_ladder_3 = _2920;
                frontier_phi_63_64_ladder_4 = _2918;
                frontier_phi_63_64_ladder_5 = _2916;
            }
            else
            {
                frontier_phi_63_64_ladder = _2800;
                frontier_phi_63_64_ladder_1 = _2804;
                frontier_phi_63_64_ladder_2 = _2802;
                frontier_phi_63_64_ladder_3 = _2798;
                frontier_phi_63_64_ladder_4 = _2796;
                frontier_phi_63_64_ladder_5 = _2794;
            }
            _2915 = frontier_phi_63_64_ladder_5;
            _2917 = frontier_phi_63_64_ladder_4;
            _2919 = frontier_phi_63_64_ladder_3;
            _2921 = frontier_phi_63_64_ladder;
            _2923 = frontier_phi_63_64_ladder_2;
            _2925 = frontier_phi_63_64_ladder_1;
        }
        float _2930 = isnan(1.0) ? _690 : (isnan(_690) ? 1.0 : min(_690, 1.0));
        _2727 = (_2930 * _2921) + _2258;
        _2729 = (_2930 * _2923) + _2260;
        _2731 = (_2930 * _2925) + _2262;
        _2733 = ((_2915 * 0.039999999105930328369140625) * _2930) + _2581;
        _2735 = ((_2917 * 0.039999999105930328369140625) * _2930) + _2583;
        _2737 = ((_2919 * 0.039999999105930328369140625) * _2930) + _2585;
    }
    else
    {
        _2727 = _2258;
        _2729 = _2260;
        _2731 = _2262;
        _2733 = _2581;
        _2735 = _2583;
        _2737 = _2585;
    }
    float _4717 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4728 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4739 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _2754 = ((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_2727 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _690))) + ((_2733 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1526)) * cbPerFrame._m0[3u].x);
    float _2755 = ((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2729 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _690))) + ((_2735 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1526)) * cbPerFrame._m0[3u].x);
    float _2756 = ((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2731 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _690))) + ((_2737 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1526)) * cbPerFrame._m0[3u].x);
    uint _2757 = _234 + 6u;
    float _2765 = _625 / cbSceneParam._m0[86u].x;
    float _2766 = _626 / cbSceneParam._m0[86u].y;
    vec4 _2780 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2765, _2766, (log2((isnan(cbSceneParam._m0[77u].w) ? _546 : (isnan(_546) ? cbSceneParam._m0[77u].w : min(_546, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2782 = _2780.x;
    float _2783 = _2780.y;
    float _2784 = _2780.z;
    float _2785 = _2780.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_546 > cbSceneParam._m0[78u].w)
    {
        float _2819 = isnan(_546) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _546 : min(cbSceneParam._m0[80u].w, _546));
        float _2820 = _2819 / _546;
        float _2831 = _2820 * _597;
        float _2832 = _598 * _2820;
        float _2833 = (-0.0) - _2832;
        float _2835 = _2820 * _599;
        float _2837 = (cbSceneParam._m0[77u].w * _2833) / _2819;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2832;
        float _2845 = sqrt(((_2831 * _2831) + (_2832 * _2832)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2819)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3032;
        if (abs((_2833 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3032 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2976 = 1.0 / cbSceneParam._m0[80u].x;
            float _2977 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2978 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            _3032 = ((abs(_2845 / _2833) * cbSceneParam._m0[80u].y) * ((((_2987 - _2988) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))))) * _2976)) - ((exp2(_2855 * _2987) - exp2(_2855 * _2988)) * _2976))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3034 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2765, _2766, 1.0), 0.0);
        float _3043 = exp2((_3032 * (-1.44269502162933349609375)) * (1.0 - _3034.w));
        float _3044 = log2(_3043);
        float _3060 = log2(_2785);
        _2857 = (exp2(_3060 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].x)) * _3034.x) / cbSceneParam._m0[78u].x)) + _2782;
        _2859 = (exp2(_3060 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].y)) * _3034.y) / cbSceneParam._m0[78u].y)) + _2783;
        _2861 = (exp2(_3060 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3044 * cbSceneParam._m0[78u].z)) * _3034.z) / cbSceneParam._m0[78u].z)) + _2784;
        _2863 = _3043 * _2785;
    }
    else
    {
        _2857 = _2782;
        _2859 = _2783;
        _2861 = _2784;
        _2863 = _2785;
    }
    bool _3070;
    vec4 _2873;
    vec4 _2895;
    float _2897;
    float _2901;
    float _2902;
    float _2903;
    float _2904;
    bool _2914;
    for (;;)
    {
        _2873 = cbMatDynParam._m0[0u];
        float _2875 = roundEven(_2873.y);
        bool _2876 = _2875 == 3.0;
        float _2877 = log2(_2863);
        float _2884 = exp2(_2877 * cbSceneParam._m0[78u].x) * _2754;
        float _2885 = exp2(_2877 * cbSceneParam._m0[78u].y) * _2755;
        float _2886 = exp2(_2877 * cbSceneParam._m0[78u].z) * _2756;
        float _2893 = _613 + (-0.5);
        _2895 = cbMtdParam._m0[1u];
        _2897 = _2895.y * _2893;
        float _2900 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2901 = _2900 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
        _2902 = _2900 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
        _2903 = _2900 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
        _2904 = _2893 * 0.999000012874603271484375;
        _2914 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2914)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2904) < 0.5)
            {
                _3070 = true;
                break;
            }
        }
        uint _3011 = _665 + uint(_2873.w);
        if ((cbInstanceData._m0[_3011].w < 1.0) && ((cbInstanceData._m0[_3011].w + _2904) < 0.5))
        {
            _3070 = true;
            break;
        }
        if ((_2897 + 1.0) < _2895.x)
        {
            _3070 = true;
            break;
        }
        _3070 = false;
        break;
    }
    float _3274;
    if (_3070)
    {
        discard_state = true;
        _3274 = 0.0;
    }
    else
    {
        _3274 = cbInstanceData._m0[_2757].w;
    }
    SV_Target.x = _2901;
    SV_Target.y = _2902;
    SV_Target.z = _2903;
    SV_Target.w = _3274;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2757].w;
    discard_exit();
}


