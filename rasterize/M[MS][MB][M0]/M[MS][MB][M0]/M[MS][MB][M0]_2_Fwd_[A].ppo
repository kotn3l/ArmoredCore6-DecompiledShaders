#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _922;
float _3289;
float _3290;
float _3291;
float _3292;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2(((_241 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_241 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _317 = (_309.x * 2.0) + (-1.0);
    float _318 = (_309.y * 2.0) + (-1.0);
    float _319 = dot(vec2(_317, _318), vec2(_317, _318));
    float _3301 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _325 = sqrt(1.0 - (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))));
    float _330 = _317 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_283.x * 2.0) + (-1.0)));
    float _331 = _318 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_283.y * 2.0) + (-1.0)));
    float _336 = (((_283.z - _313) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _313;
    float _341 = cbMtdParam._m0[22u].x + _309.w;
    float _344 = fma(_325, _209 * NORMAL.x, fma(_331, _216 * TANGENT.x, (_202 * _194) * _330));
    float _347 = fma(_325, _209 * NORMAL.y, fma(_331, _216 * TANGENT.y, (_202 * _195) * _330));
    float _350 = fma(_325, _209 * NORMAL.z, fma(_331, _216 * TANGENT.z, (_202 * _196) * _330));
    float _354 = inversesqrt(dot(vec3(_344, _347, _350), vec3(_344, _347, _350)));
    float _355 = _354 * _344;
    float _356 = _354 * _347;
    float _357 = _354 * _350;
    float _3312 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _358 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _3334 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3345 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3356 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _376 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _418 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _428 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _418);
    float _429 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _418);
    float _430 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _418);
    float _434 = inversesqrt(dot(vec3(_428, _429, _430), vec3(_428, _429, _430)));
    float _435 = _428 * _434;
    float _436 = _429 * _434;
    float _437 = _430 * _434;
    vec4 _442 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _444 = _442.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _601 = sqrt(((_428 * _428) + (_429 * _429)) + (_430 * _430));
        float _607 = (cbMatDynParam._m0[5u].x * _601) + cbMatDynParam._m0[5u].y;
        float _3367 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
        float _608 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _612 = (cbMatDynParam._m0[5u].z * _601) + cbMatDynParam._m0[5u].w;
        float _3378 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) - _608)) + _608) < ((_444 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _456 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _457 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _477 = fma(_357, cbSceneParam._m0[5u].z, fma(_356, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _355));
    float _480 = fma(_357, cbSceneParam._m0[6u].z, fma(_356, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _355));
    float _483 = fma(_357, cbSceneParam._m0[7u].z, fma(_356, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _355));
    uint _496 = _222 + 9u;
    uint _497 = _496 + uint(cbMatDynParam._m0[0u].w);
    float _503 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_497].x;
    float _504 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_497].y;
    float _505 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_497].z;
    float _3389 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _506 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _507 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    vec4 _517 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _456, cbSceneParam._m0[86u].y * _457));
    float _521 = ((isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * TEXCOORD_5.w) * _517.x;
    float _522 = dot(vec3(_355, _356, _357), vec3(_435, _436, _437));
    float _525 = _522 * 2.0;
    float _529 = (_525 * _355) - _435;
    float _530 = (_525 * _356) - _436;
    float _531 = (_525 * _357) - _437;
    float _535 = abs(dot(vec3(_435, _436, _437), vec3(_355, _356, _357)));
    float _3422 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _537 = sqrt(_358);
    float _550 = exp2((_537 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_537 * 3.0));
    float _582 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _586 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _590 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _921;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _646 = fma(_590, cbModelParam._m0[26u].z, fma(_586, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _582));
        float _650 = fma(_590, cbModelParam._m0[27u].z, fma(_586, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _582));
        float _654 = fma(_590, cbModelParam._m0[28u].z, fma(_586, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _582));
        float _679 = _582 + _355;
        float _680 = _586 + _356;
        float _681 = _590 + _357;
        float _691 = fma(_681, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _679)) - _646;
        float _692 = fma(_681, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _679)) - _650;
        float _693 = fma(_681, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _679)) - _654;
        float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
        float _710 = ((_697 * _691) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_646 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _711 = ((_697 * _692) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_650 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _712 = ((_697 * _693) / cbModelParam._m0[34u].z) + ((((((_654 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_710, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_715.x + (-0.5));
        float _751 = _749 * (_715.y + (-0.5));
        float _752 = _749 * (_715.z + (-0.5));
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_722.x + (-0.5));
        float _761 = _759 * (_722.y + (-0.5));
        float _762 = _759 * (_722.z + (-0.5));
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_729.x + (-0.5));
        float _771 = _769 * (_729.y + (-0.5));
        float _772 = _769 * (_729.z + (-0.5));
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = _750 * 0.5;
        float _787 = _760 * 0.5;
        float _788 = _770 * 0.5;
        float _789 = dot(vec3(_786, _787, _788), vec3(_786, _787, _788));
        float _794 = (_789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_789);
        float _803 = (dot(vec3(_355, _356, _357), vec3(_794 * _786, _794 * _787, _794 * _788)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _813 = sqrt(((_787 * _787) + (_786 * _786)) + (_788 * _788)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3470 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_815 + 1.0))) + _820) * _783;
        float _830 = _751 * 0.5;
        float _831 = _761 * 0.5;
        float _832 = _771 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _846 = (dot(vec3(_355, _356, _357), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _855 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_784 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _857 = _856 * 2.0;
        float _861 = (1.0 - _856) / (_856 + 1.0);
        float _3503 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _871 = ((((1.0 - _862) * (_857 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_857 + 1.0))) + _862) * _784;
        float _872 = _752 * 0.5;
        float _873 = _762 * 0.5;
        float _874 = _772 * 0.5;
        float _875 = dot(vec3(_872, _873, _874), vec3(_872, _873, _874));
        float _880 = (_875 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_875);
        float _888 = (dot(vec3(_355, _356, _357), vec3(_880 * _872, _880 * _873, _880 * _874)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _897 = sqrt(((_873 * _873) + (_872 * _872)) + (_874 * _874)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _899 = _898 * 2.0;
        float _903 = (1.0 - _898) / (_898 + 1.0);
        float _3536 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _913 = ((((1.0 - _904) * (_899 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_899 + 1.0))) + _904) * _785;
        _921 = _752;
        _923 = _751;
        _924 = _750;
        _925 = _762;
        _926 = _761;
        _927 = _760;
        _928 = _772;
        _929 = _771;
        _930 = _770;
        _931 = _785;
        _932 = _784;
        _933 = _783;
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
        _935 = cbModelParam._m0[36u].z * (isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0)));
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0)));
    }
    else
    {
        _921 = _922;
        _923 = _922;
        _924 = _922;
        _925 = _922;
        _926 = _922;
        _927 = _922;
        _928 = _922;
        _929 = _922;
        _930 = _922;
        _931 = _922;
        _932 = _922;
        _933 = _922;
        _934 = 0.0;
        _935 = 0.0;
        _936 = 0.0;
    }
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _964 = fma(_590, cbModelParam._m0[30u].z, fma(_586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _582));
        float _968 = fma(_590, cbModelParam._m0[31u].z, fma(_586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _582));
        float _972 = fma(_590, cbModelParam._m0[32u].z, fma(_586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _582));
        float _995 = _582 + _355;
        float _996 = _586 + _356;
        float _997 = _590 + _357;
        float _1007 = fma(_997, cbModelParam._m0[30u].z, fma(_996, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995)) - _964;
        float _1008 = fma(_997, cbModelParam._m0[31u].z, fma(_996, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995)) - _968;
        float _1009 = fma(_997, cbModelParam._m0[32u].z, fma(_996, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995)) - _972;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_964 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_968 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[35u].z) + ((((((_972 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1063 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1030.x + (-0.5));
        float _1065 = _1063 * (_1030.y + (-0.5));
        float _1066 = _1063 * (_1030.z + (-0.5));
        float _1073 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1037.x + (-0.5));
        float _1075 = _1073 * (_1037.y + (-0.5));
        float _1076 = _1073 * (_1037.z + (-0.5));
        float _1083 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1044.x + (-0.5));
        float _1085 = _1083 * (_1044.y + (-0.5));
        float _1086 = _1083 * (_1044.z + (-0.5));
        float _1093 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1051.x + (-0.5));
        float _1095 = _1093 * (_1051.y + (-0.5));
        float _1096 = _1093 * (_1051.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_355, _356, _357), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3599 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1127 + 1.0))) + _1132) * _1097;
        float _1142 = _1065 * 0.5;
        float _1143 = _1075 * 0.5;
        float _1144 = _1085 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_355, _356, _357), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3632 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1169 + 1.0))) + _1174) * _1098;
        float _1184 = _1066 * 0.5;
        float _1185 = _1076 * 0.5;
        float _1186 = _1086 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_355, _356, _357), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3665 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1211 + 1.0))) + _1216) * _1099;
        _1233 = _1066;
        _1234 = _1065;
        _1235 = _1064;
        _1236 = _1076;
        _1237 = _1075;
        _1238 = _1074;
        _1239 = _1086;
        _1240 = _1085;
        _1241 = _1084;
        _1242 = _1099;
        _1243 = _1098;
        _1244 = _1097;
        _1245 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1246 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _922;
        _1234 = _922;
        _1235 = _922;
        _1236 = _922;
        _1237 = _922;
        _1238 = _922;
        _1239 = _922;
        _1240 = _922;
        _1241 = _922;
        _1242 = _922;
        _1243 = _922;
        _1244 = _922;
        _1245 = 0.0;
        _1246 = 0.0;
        _1247 = 0.0;
    }
    float _1257 = (cbModelParam._m0[1u].x * (_1245 - _934)) + _934;
    float _1258 = (cbModelParam._m0[1u].x * (_1246 - _935)) + _935;
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _936)) + _936;
    float _1280 = fma(_1259, cbSceneParam._m0[89u].z, fma(_1258, cbSceneParam._m0[89u].y, _1257 * cbSceneParam._m0[89u].x));
    float _1283 = fma(_1259, cbSceneParam._m0[90u].z, fma(_1258, cbSceneParam._m0[90u].y, _1257 * cbSceneParam._m0[90u].x));
    float _1286 = fma(_1259, cbSceneParam._m0[91u].z, fma(_1258, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1257));
    float _1301 = _529 * 0.5;
    float _1302 = _530 * 0.5;
    float _1303 = _531 * 0.5;
    float _1304 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1307 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1234, _1237, _1240, _1243));
    float _1310 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_1233, _1236, _1239, _1242));
    float _1344;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1317 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_921, _925, _928, _931));
        float _1321 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_923, _926, _929, _932));
        float _1325 = dot(vec4(_1301, _1302, _1303, 1.0), vec4(_924, _927, _930, _933));
        float _1332 = dot(vec4(cbModelParam._m0[39u]), vec4(_1301, _1302, _1303, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)), isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1332) ? 0.0 : (isnan(0.0) ? _1332 : max(0.0, _1332))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1355;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1346 = dot(vec4(cbModelParam._m0[40u]), vec4(_1301, _1302, _1303, 1.0));
        _1355 = dot(vec3(isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)), isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1346) ? 0.0 : (isnan(0.0) ? _1346 : max(0.0, _1346))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1355 = 1.0;
    }
    float _1359 = (_1355 * cbModelParam._m0[1u].x) + (_1344 * (1.0 - cbModelParam._m0[1u].x));
    float _1369 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _358);
    float _1370 = isnan(_1369) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1369 : min(cbModelParam._m0[25u].z, _1369));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1419 = fma(_590, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _582)) + cbModelParam._m0[13u].w;
        float _1423 = fma(_590, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _582)) + cbModelParam._m0[14u].w;
        float _1427 = fma(_590, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _582)) + cbModelParam._m0[15u].w;
        float _1430 = fma(_531, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529));
        float _1433 = fma(_531, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529));
        float _1436 = fma(_531, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529));
        float _1464;
        if (_1430 > 0.0)
        {
            _1464 = abs((1.0 - _1419) / _1430);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1419 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1464 = frontier_phi_17_15_ladder;
        }
        float _1669;
        if (_1433 > 0.0)
        {
            _1669 = abs((1.0 - _1423) / _1433);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1423 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1669 = frontier_phi_26_22_ladder;
        }
        float _1912;
        if (_1436 > 0.0)
        {
            _1912 = abs((1.0 - _1427) / _1436);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1427 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1912 = frontier_phi_38_33_ladder;
        }
        float _1914 = isnan(_1669) ? _1464 : (isnan(_1464) ? _1669 : min(_1464, _1669));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1430) + _1419;
        float _1920 = (_1915 * _1433) + _1423;
        float _1921 = (_1915 * _1436) + _1427;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2045 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1370);
            frontier_phi_16_38_ladder = _2045.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2045.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2045.x * cbModelParam._m0[1u].y;
        }
        _1452 = frontier_phi_16_38_ladder_2;
        _1454 = frontier_phi_16_38_ladder_1;
        _1456 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_529, _530, _531), _1370);
        _1452 = _1440.x * cbModelParam._m0[1u].y;
        _1454 = _1440.y * cbModelParam._m0[1u].y;
        _1456 = _1440.z * cbModelParam._m0[1u].y;
    }
    float _1460 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _358);
    float _1461 = isnan(_1460) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1460 : min(cbModelParam._m0[25u].w, _1460));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1517 = fma(_590, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _582)) + cbModelParam._m0[21u].w;
        float _1521 = fma(_590, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _582)) + cbModelParam._m0[22u].w;
        float _1525 = fma(_590, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _582)) + cbModelParam._m0[23u].w;
        float _1528 = fma(_531, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529));
        float _1531 = fma(_531, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529));
        float _1534 = fma(_531, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529));
        float _1674;
        if (_1528 > 0.0)
        {
            _1674 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1674 = frontier_phi_28_24_ladder;
        }
        float _1939;
        if (_1531 > 0.0)
        {
            _1939 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1939 = frontier_phi_40_35_ladder;
        }
        float _2144;
        if (_1534 > 0.0)
        {
            _2144 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2144 = frontier_phi_49_46_ladder;
        }
        float _2146 = isnan(_1939) ? _1674 : (isnan(_1674) ? _1939 : min(_1674, _1939));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1528) + _1517;
        float _2152 = (_2147 * _1531) + _1521;
        float _2153 = (_2147 * _1534) + _1525;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2155 = (-1.0) - _2154;
        float _2157 = _2154 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2153 > _2157) || ((_2153 < _2155) || ((_2152 > _2157) || ((_2152 < _2155) || ((_2151 < _2155) || (_2151 > _2157))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2153, cbModelParam._m0[17u].z, fma(_2152, cbModelParam._m0[17u].y, _2151 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2153, cbModelParam._m0[18u].z, fma(_2152, cbModelParam._m0[18u].y, _2151 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2153, cbModelParam._m0[19u].z, fma(_2152, cbModelParam._m0[19u].y, _2151 * cbModelParam._m0[19u].x))), _1461);
            frontier_phi_25_49_ladder = _2352.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2352.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2352.x * cbModelParam._m0[1u].z;
        }
        _1553 = frontier_phi_25_49_ladder_2;
        _1555 = frontier_phi_25_49_ladder_1;
        _1557 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_529, _530, _531), _1461);
        _1553 = _1537.x * cbModelParam._m0[1u].z;
        _1555 = _1537.y * cbModelParam._m0[1u].z;
        _1557 = _1537.z * cbModelParam._m0[1u].z;
    }
    float _1569 = ((((1.0 - _550) * ((_537 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_550 * _537)) * _521;
    float _1570 = _1569 * ((cbModelParam._m0[1u].w * (_1553 - _1452)) + _1452);
    float _1571 = _1569 * ((cbModelParam._m0[1u].w * (_1555 - _1454)) + _1454);
    float _1572 = _1569 * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    uvec4 _1591 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1593 = _1591.x * 14u;
    uint _1594 = _1593 + 13u;
    float _1601 = _521 + (-1.0);
    float _1606 = (cbLight._m0[_1594].x * _1601) + 1.0;
    float _1607 = (cbLight._m0[_1594].y * _1601) + 1.0;
    float _1608 = (cbLight._m0[_1594].z * _1601) + 1.0;
    float _1609 = (cbLight._m0[_1594].w * _1601) + 1.0;
    uint _1610 = _1593 + 5u;
    float _1616 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    uint _1620 = _1593 + 4u;
    float _1627 = isnan(1.0) ? _1606 : (isnan(_1606) ? 1.0 : min(_1606, 1.0));
    uint _1631 = _1593 | 1u;
    float _1642 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_355, _356, _357));
    float _1645 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_355, _356, _357));
    float _3801 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
    float _3812 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1650 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
    float _1652 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
    float _1659 = ((cbLight._m0[_1610].x * _1616) * _1652) + ((cbLight._m0[_1620].x * _1627) * _1650);
    float _1660 = ((_1616 * cbLight._m0[_1610].y) * _1652) + ((_1627 * cbLight._m0[_1620].y) * _1650);
    float _1661 = ((_1616 * cbLight._m0[_1610].z) * _1652) + ((_1627 * cbLight._m0[_1620].z) * _1650);
    uvec4 _1666 = floatBitsToUint(cbLight._m0[_1593 + 12u]);
    bool _1668 = _1666.x == 0u;
    float _1679;
    float _1681;
    float _1683;
    if (_1668)
    {
        _1679 = _1659;
        _1681 = _1660;
        _1683 = _1661;
    }
    else
    {
        uint _1687 = _1593 + 6u;
        float _1703 = (dot(vec3(cbLight._m0[_1593 + 2u].xyz), vec3(_355, _356, _357)) * 0.5) + 0.5;
        float _1704 = _1703 * _1703;
        float _3823 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1706 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1679 = (((cbLight._m0[_1687].x * 0.3183098733425140380859375) * _1705) * _1706) + _1659;
        _1681 = (((cbLight._m0[_1687].y * 0.3183098733425140380859375) * _1705) * _1706) + _1660;
        _1683 = (((cbLight._m0[_1687].z * 0.3183098733425140380859375) * _1705) * _1706) + _1661;
    }
    bool _1686 = _1666.y == 0u;
    float _1724;
    float _1726;
    float _1728;
    if (_1686)
    {
        _1724 = _1679;
        _1726 = _1681;
        _1728 = _1683;
    }
    else
    {
        uint _1883 = _1593 + 7u;
        float _1899 = (dot(vec3(cbLight._m0[_1593 + 3u].xyz), vec3(_355, _356, _357)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3839 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1902 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1724 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1679;
        _1726 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1681;
        _1728 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1683;
    }
    uint _1731 = _1593 + 8u;
    float _1744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1593].w)) * _358) * 0.949999988079071044921875);
    float _1745 = _1744 * _1744;
    float _1746 = cbLight._m0[_1593].x + _435;
    float _1747 = cbLight._m0[_1593].y + _436;
    float _1748 = cbLight._m0[_1593].z + _437;
    float _1752 = inversesqrt(dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748)));
    float _1753 = _1752 * _1746;
    float _1754 = _1752 * _1747;
    float _1755 = _1752 * _1748;
    float _1756 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1593].xyz));
    float _3855 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _1760 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1761 = dot(vec3(_355, _356, _357), vec3(_1753, _1754, _1755));
    float _3877 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1765 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1753, _1754, _1755));
    float _3888 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1769 = _1745 * _1745;
    float _1773 = ((_1764 * _1764) * (_1769 + (-1.0))) + 1.0;
    float _1784 = (exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1785 = 1.0 - _1745;
    float _1796 = (0.5 / (((_1760 * ((_1759 * _1785) + _1745)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1785) + _1745) * _1759))) * _1759;
    float _3899 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1769 / ((_1773 * _1773) * 3.141590118408203125));
    uint _1809 = _1593 + 9u;
    float _1820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1631].w)) * _358) * 0.949999988079071044921875);
    float _1821 = _1820 * _1820;
    float _1822 = cbLight._m0[_1631].x + _435;
    float _1823 = cbLight._m0[_1631].y + _436;
    float _1824 = cbLight._m0[_1631].z + _437;
    float _1828 = inversesqrt(dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824)));
    float _1829 = _1828 * _1822;
    float _1830 = _1828 * _1823;
    float _1831 = _1828 * _1824;
    float _1832 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1631].xyz));
    float _3910 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1836 = dot(vec3(_355, _356, _357), vec3(_1829, _1830, _1831));
    float _3921 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1631].xyz), vec3(_1829, _1830, _1831));
    float _3932 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1844 = _1821 * _1821;
    float _1848 = ((_1839 * _1839) * (_1844 + (-1.0))) + 1.0;
    float _1857 = (exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1858 = 1.0 - _1821;
    float _1868 = (0.5 / (((_1760 * ((_1835 * _1858) + _1821)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _1858) + _1821) * _1835))) * _1835;
    float _3943 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1844 / ((_1848 * _1848) * 3.141590118408203125));
    float _1880 = (((_1857 * cbLight._m0[_1809].x) * _1870) * _1616) + (((_1784 * cbLight._m0[_1731].x) * _1798) * _1627);
    float _1881 = (((_1857 * cbLight._m0[_1809].y) * _1870) * _1616) + (((_1784 * cbLight._m0[_1731].y) * _1798) * _1627);
    float _1882 = (((_1857 * cbLight._m0[_1809].z) * _1870) * _1616) + (((_1784 * cbLight._m0[_1731].z) * _1798) * _1627);
    float _1944;
    float _1946;
    float _1948;
    if (_1668)
    {
        _1944 = _1880;
        _1946 = _1881;
        _1948 = _1882;
    }
    else
    {
        uint _1950 = _1593 + 2u;
        uint _1954 = _1593 + 10u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _358) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _435;
        float _1971 = cbLight._m0[_1950].y + _436;
        float _1972 = cbLight._m0[_1950].z + _437;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_1950].xyz));
        float _3954 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1984 = dot(vec3(_355, _356, _357), vec3(_1977, _1978, _1979));
        float _3965 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3976 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2006 = 1.0 - _1969;
        float _2016 = (0.5 / (((_1760 * ((_1983 * _2006) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _2006) + _1969) * _1983))) * _1983;
        float _3987 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
        _1944 = (((_2005 * cbLight._m0[_1954].x) * _2018) * _2019) + _1880;
        _1946 = (((_2005 * cbLight._m0[_1954].y) * _2018) * _2019) + _1881;
        _1948 = (((_2005 * cbLight._m0[_1954].z) * _2018) * _2019) + _1882;
    }
    float _2054;
    float _2056;
    float _2058;
    if (_1686)
    {
        _2054 = _1944;
        _2056 = _1946;
        _2058 = _1948;
    }
    else
    {
        uint _2065 = _1593 + 3u;
        uint _2069 = _1593 + 11u;
        float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _358) * 0.949999988079071044921875);
        float _2084 = _2083 * _2083;
        float _2085 = cbLight._m0[_2065].x + _435;
        float _2086 = cbLight._m0[_2065].y + _436;
        float _2087 = cbLight._m0[_2065].z + _437;
        float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
        float _2092 = _2091 * _2085;
        float _2093 = _2091 * _2086;
        float _2094 = _2091 * _2087;
        float _2095 = dot(vec3(_355, _356, _357), vec3(cbLight._m0[_2065].xyz));
        float _4003 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        float _2098 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2099 = dot(vec3(_355, _356, _357), vec3(_2092, _2093, _2094));
        float _4014 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _2103 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2092, _2093, _2094));
        float _4025 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2107 = _2084 * _2084;
        float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
        float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2121 = 1.0 - _2084;
        float _2131 = (0.5 / (((_1760 * ((_2098 * _2121) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_1760 * _2121) + _2084) * _2098))) * _2098;
        float _4036 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2133 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
        float _2134 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _2054 = (((_2120 * cbLight._m0[_2069].x) * _2133) * _2134) + _1944;
        _2056 = (((_2120 * cbLight._m0[_2069].y) * _2133) * _2134) + _1946;
        _2058 = (((_2120 * cbLight._m0[_2069].z) * _2133) * _2134) + _1948;
    }
    float _2269;
    float _2271;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_1591.y == 0u)
    {
        float _2209 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2210 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2209;
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2209;
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2209;
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.x;
        uint _2236 = uint((float(_2224.y) * floor(float(uint(cbSceneParam._m0[85u].y * _457) / _2225))) + floor(float(uint(cbSceneParam._m0[85u].x * _456) / _2225)));
        float _2246 = (log2(_2212 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        uint _2250 = uint(isnan(14.0) ? _2247 : (isnan(_2247) ? 14.0 : min(_2247, 14.0)));
        uvec4 _2255 = texelFetch(g_lightClusterGridBuffer, int(((_2250 << 2u) + (_2236 << 6u)) >> 2u));
        uint _2256 = _2255.x;
        uint _2257 = _2224.z;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        if (((((1u << ((_2257 >> 4u) & 15u)) + 4294967295u) & _2256) == 0u) || ((_2257 & 240u) == 0u))
        {
            _2357 = 0.0;
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
        }
        else
        {
            float _2358;
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2526)
                {
                    frontier_phi_66_pred = _2510;
                    frontier_phi_66_pred_1 = _2515;
                    frontier_phi_66_pred_2 = _2514;
                    frontier_phi_66_pred_3 = _2513;
                    frontier_phi_66_pred_4 = _2512;
                    frontier_phi_66_pred_5 = _2511;
                }
                else
                {
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    uint _2661;
                    _2655 = _2510;
                    _2656 = _2511;
                    _2657 = _2512;
                    _2658 = _2513;
                    _2659 = _2514;
                    _2660 = _2515;
                    _2661 = _2525;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    for (;;)
                    {
                        uint _2665 = uint(findLSB(_2661)) + (_2516 << 5u);
                        uint _2662 = (_2661 + 4294967295u) & _2661;
                        uint _2667 = _2665 * 48u;
                        vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2687 = (_2665 * 48u) + 4u;
                        vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2706 = (_2665 * 48u) + 8u;
                        vec3 _2717 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x));
                        float _2721 = _2681.x - _2210;
                        float _2722 = _2681.y - _2211;
                        float _2723 = _2681.z - _2212;
                        float _2724 = dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723));
                        float _2727 = inversesqrt(_2724);
                        float _2728 = _2727 * _2721;
                        float _2729 = _2727 * _2722;
                        float _2730 = _2727 * _2723;
                        float _2731 = dot(vec3(_477, _480, _483), vec3(_2728, _2729, _2730));
                        float _2736 = 1.0 - (_2724 * _2681.w);
                        float _4062 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2738 = sqrt(_2724) * _2700.w;
                        float _2741 = 1.39999997615814208984375 / (_2738 + 1.39999997615814208984375);
                        float _2742 = _2741 * _2741;
                        float _2745 = ((1.0 - _2742) * _2731) + _2742;
                        float _2748 = _2738 * _2738;
                        float _2752 = ((isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0))) * _2737) / ((_2748 * 0.699999988079071044921875) + 1.0);
                        float _2756 = (-0.0) - _2210;
                        float _2757 = (-0.0) - _2211;
                        float _2758 = (-0.0) - _2212;
                        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
                        float _2763 = _2762 * _2756;
                        float _2764 = _2762 * _2757;
                        float _2765 = _2762 * _2758;
                        float _2773 = exp2(log2(1.0 / ((_2748 * 3.5) + 5.0)) * 0.25);
                        float _2774 = 1.0 - _537;
                        float _2781 = sqrt(1.0 - ((1.0 - (_2774 * _2774)) * (1.0 - (_2773 * _2773))));
                        float _2782 = _2781 * _2781;
                        float _2783 = _2782 * _2782;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2786 = _2765 + _2730;
                        float _2790 = inversesqrt(dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786)));
                        float _2794 = dot(vec3(_477, _480, _483), vec3(_2763, _2764, _2765));
                        float _4078 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                        float _2797 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2798 = dot(vec3(_477, _480, _483), vec3(_2790 * _2784, _2790 * _2785, _2790 * _2786));
                        float _4089 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2801 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2805 = ((_2801 * _2801) * (_2783 + (-1.0))) + 1.0;
                        float _2806 = _2741 * _2782;
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2731) + _2807;
                        float _4100 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2811 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2812 = 1.0 - _2782;
                        float _2822 = (0.5 / (((_2811 * ((_2797 * _2812) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2811 * _2812) + _2782) * _2797))) * _2811;
                        float _4111 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
                        float _2833 = (((_2783 * 3.1415927410125732421875) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) / ((_2805 * _2805) * ((_2748 * 2.1991131305694580078125) + 3.141590118408203125))) * _2737;
                        _2585 = (_2752 * _2700.x) + _2658;
                        _2586 = (_2752 * _2700.y) + _2659;
                        _2587 = (_2752 * _2700.z) + _2660;
                        _2582 = (_2833 * _2717.x) + _2655;
                        _2583 = (_2833 * _2717.y) + _2656;
                        _2584 = (_2833 * _2717.z) + _2657;
                        if (_2662 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2655 = _2582;
                            _2656 = _2583;
                            _2657 = _2584;
                            _2658 = _2585;
                            _2659 = _2586;
                            _2660 = _2587;
                            _2661 = _2662;
                        }
                    }
                    frontier_phi_66_pred = _2582;
                    frontier_phi_66_pred_1 = _2587;
                    frontier_phi_66_pred_2 = _2586;
                    frontier_phi_66_pred_3 = _2585;
                    frontier_phi_66_pred_4 = _2584;
                    frontier_phi_66_pred_5 = _2583;
                }
                _2358 = frontier_phi_66_pred;
                _2368 = frontier_phi_66_pred_1;
                _2366 = frontier_phi_66_pred_2;
                _2364 = frontier_phi_66_pred_3;
                _2362 = frontier_phi_66_pred_4;
                _2360 = frontier_phi_66_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2358;
                    _2511 = _2360;
                    _2512 = _2362;
                    _2513 = _2364;
                    _2514 = _2366;
                    _2515 = _2368;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2357 = _2358;
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
        }
        uvec4 _2371 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2372 = _2371.z;
        uint _2374 = (_2372 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2374) & _2256) == 0u)
        {
            _2478 = _2357;
            _2480 = _2359;
            _2482 = _2361;
            _2484 = _2363;
            _2486 = _2365;
            _2488 = _2367;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
            float _2504 = _2503 * _2210;
            float _2505 = _2503 * _2211;
            float _2506 = _2503 * _2212;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2374 < ((_2372 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2638 = _2357;
                float _2639 = _2359;
                float _2640 = _2361;
                float _2641 = _2363;
                float _2642 = _2365;
                float _2643 = _2367;
                uint _2644 = _2374;
                uint _2653;
                bool _2654;
                for (;;)
                {
                    _2653 = texelFetch(g_lightClassification, int((((_2250 << 5u) + (_2236 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                    _2654 = _2653 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2654)
                    {
                        frontier_phi_77_pred = _2643;
                        frontier_phi_77_pred_1 = _2642;
                        frontier_phi_77_pred_2 = _2641;
                        frontier_phi_77_pred_3 = _2640;
                        frontier_phi_77_pred_4 = _2639;
                        frontier_phi_77_pred_5 = _2638;
                    }
                    else
                    {
                        float _2847;
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _2860 = _2638;
                        float _2861 = _2639;
                        float _2862 = _2640;
                        float _2863 = _2641;
                        float _2864 = _2642;
                        float _2865 = _2643;
                        uint _2866 = _2653;
                        uint _2867;
                        vec4 _2892;
                        float _2893;
                        vec4 _2908;
                        vec3 _2920;
                        vec4 _2936;
                        vec4 _2951;
                        float _2998;
                        bool _2999;
                        for (;;)
                        {
                            uint _2877 = ((_2644 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2866));
                            _2867 = (_2866 + 4294967295u) & _2866;
                            uint _2879 = _2877 * 40u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            _2893 = _2892.w;
                            uint _2895 = (_2877 * 40u) + 4u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2910 = (_2877 * 40u) + 8u;
                            _2920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x));
                            uint _2923 = (_2877 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2877 * 40u) + 20u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2877 * 40u) + 24u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2973 = (_2877 * 40u) + 28u;
                            vec4 _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2998 = fma(_2212, _2986.z, fma(_2211, _2986.y, _2986.x * _2210)) + _2986.w;
                            _2999 = !((fma(_2212, _2967.z, fma(_2211, _2967.y, _2967.x * _2210)) + _2967.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2999)
                            {
                                float _3026 = _2892.x - _2210;
                                float _3027 = _2892.y - _2211;
                                float _3028 = _2892.z - _2212;
                                float _3029 = dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028));
                                float _3032 = inversesqrt(_3029);
                                float _3033 = _3032 * _3026;
                                float _3034 = _3032 * _3027;
                                float _3035 = _3032 * _3028;
                                float _3039 = 1.0 - (_3029 / (_2893 * _2893));
                                float _4122 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3044 = sqrt(_3029) * _2908.w;
                                float _3046 = 1.39999997615814208984375 / (_3044 + 1.39999997615814208984375);
                                float _3047 = _3046 * _3046;
                                float _3050 = ((1.0 - _3047) * dot(vec3(_3033, _3034, _3035), vec3(_477, _480, _483))) + _3047;
                                float _3053 = _3044 * _3044;
                                float _3057 = (fma(_2212, _2936.z, fma(_2211, _2936.y, _2936.x * _2210)) + _2936.w) / _2998;
                                float _3058 = (fma(_2212, _2951.z, fma(_2211, _2951.y, _2951.x * _2210)) + _2951.w) / _2998;
                                float _3062 = 1.0 - dot(vec2(_3057, _3058), vec2(_3057, _3058));
                                float _4138 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3063 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3064 = _3063 * (((isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0))) * _3040) / ((_3053 * 0.699999988079071044921875) + 1.0));
                                float _3076 = exp2(log2(1.0 / ((_3053 * 3.5) + 5.0)) * 0.25);
                                float _3077 = 1.0 - _537;
                                float _3084 = sqrt(1.0 - ((1.0 - (_3077 * _3077)) * (1.0 - (_3076 * _3076))));
                                float _3085 = _3084 * _3084;
                                float _3086 = _3085 * _3085;
                                float _3087 = _3033 - _2504;
                                float _3088 = _3034 - _2505;
                                float _3089 = _3035 - _2506;
                                float _3093 = inversesqrt(dot(vec3(_3087, _3088, _3089), vec3(_3087, _3088, _3089)));
                                float _3097 = dot(vec3(_477, _480, _483), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4149 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3100 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3101 = dot(vec3(_477, _480, _483), vec3(_3093 * _3087, _3093 * _3088, _3093 * _3089));
                                float _4160 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3108 = ((_3104 * _3104) * (_3086 + (-1.0))) + 1.0;
                                float _3109 = _3046 * _3085;
                                float _3110 = _3109 * _3109;
                                float _3116 = ((1.0 - _3110) * dot(vec3(_477, _480, _483), vec3(_3033, _3034, _3035))) + _3110;
                                float _4171 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3118 = 1.0 - _3085;
                                float _3128 = (0.5 / (((_3117 * ((_3100 * _3118) + _3085)) + 9.9999999392252902907785028219223e-09) + (((_3117 * _3118) + _3085) * _3100))) * _3117;
                                float _4182 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3138 = (_3063 * _3040) * (((_3086 * 3.1415927410125732421875) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) / ((_3108 * _3108) * ((_3053 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3064 * _2908.y;
                                frontier_phi_83_pred_1 = _3064 * _2908.x;
                                frontier_phi_83_pred_2 = _3138 * _2920.z;
                                frontier_phi_83_pred_3 = _3138 * _2920.y;
                                frontier_phi_83_pred_4 = _3138 * _2920.x;
                                frontier_phi_83_pred_5 = _3064 * _2908.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3146 = frontier_phi_83_pred;
                            _3145 = frontier_phi_83_pred_1;
                            _3144 = frontier_phi_83_pred_2;
                            _3143 = frontier_phi_83_pred_3;
                            _3142 = frontier_phi_83_pred_4;
                            _3147 = frontier_phi_83_pred_5;
                            _2850 = _3145 + _2863;
                            _2851 = _3146 + _2864;
                            _2852 = _3147 + _2865;
                            _2847 = _3142 + _2860;
                            _2848 = _3143 + _2861;
                            _2849 = _3144 + _2862;
                            if (_2867 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2860 = _2847;
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2867;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2852;
                        frontier_phi_77_pred_1 = _2851;
                        frontier_phi_77_pred_2 = _2850;
                        frontier_phi_77_pred_3 = _2849;
                        frontier_phi_77_pred_4 = _2848;
                        frontier_phi_77_pred_5 = _2847;
                    }
                    _2489 = frontier_phi_77_pred;
                    _2487 = frontier_phi_77_pred_1;
                    _2485 = frontier_phi_77_pred_2;
                    _2483 = frontier_phi_77_pred_3;
                    _2481 = frontier_phi_77_pred_4;
                    _2479 = frontier_phi_77_pred_5;
                    uint _2645 = _2644 + 1u;
                    if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2638 = _2479;
                        _2639 = _2481;
                        _2640 = _2483;
                        _2641 = _2485;
                        _2642 = _2487;
                        _2643 = _2489;
                        _2644 = _2645;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2483;
                frontier_phi_58_59_ladder_1 = _2489;
                frontier_phi_58_59_ladder_2 = _2487;
                frontier_phi_58_59_ladder_3 = _2485;
                frontier_phi_58_59_ladder_4 = _2481;
                frontier_phi_58_59_ladder_5 = _2479;
            }
            else
            {
                frontier_phi_58_59_ladder = _2361;
                frontier_phi_58_59_ladder_1 = _2367;
                frontier_phi_58_59_ladder_2 = _2365;
                frontier_phi_58_59_ladder_3 = _2363;
                frontier_phi_58_59_ladder_4 = _2359;
                frontier_phi_58_59_ladder_5 = _2357;
            }
            _2478 = frontier_phi_58_59_ladder_5;
            _2480 = frontier_phi_58_59_ladder_4;
            _2482 = frontier_phi_58_59_ladder;
            _2484 = frontier_phi_58_59_ladder_3;
            _2486 = frontier_phi_58_59_ladder_2;
            _2488 = frontier_phi_58_59_ladder_1;
        }
        float _2493 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
        _2269 = (_2493 * _2484) + _1724;
        _2271 = (_2493 * _2486) + _1726;
        _2273 = (_2493 * _2488) + _1728;
        _2275 = ((_2478 * 0.039999999105930328369140625) * _2493) + _2054;
        _2277 = ((_2480 * 0.039999999105930328369140625) * _2493) + _2056;
        _2279 = ((_2482 * 0.039999999105930328369140625) * _2493) + _2058;
    }
    else
    {
        _2269 = _1724;
        _2271 = _1726;
        _2273 = _1728;
        _2275 = _2054;
        _2277 = _2056;
        _2279 = _2058;
    }
    float _4198 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _4209 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _4220 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _2296 = ((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2269 + ((isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))) * _521))) + ((_2275 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1359)) * cbPerFrame._m0[3u].x);
    float _2297 = ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2271 + ((isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0))) * _521))) + ((_2277 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1359)) * cbPerFrame._m0[3u].x);
    float _2298 = ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2273 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _521))) + ((_2279 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1359)) * cbPerFrame._m0[3u].x);
    uint _2299 = _222 + 6u;
    float _2307 = _456 / cbSceneParam._m0[86u].x;
    float _2308 = _457 / cbSceneParam._m0[86u].y;
    vec4 _2322 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, (log2((isnan(cbSceneParam._m0[77u].w) ? _376 : (isnan(_376) ? cbSceneParam._m0[77u].w : min(_376, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2324 = _2322.x;
    float _2325 = _2322.y;
    float _2326 = _2322.z;
    float _2327 = _2322.w;
    float _2420;
    float _2422;
    float _2424;
    float _2426;
    if (_376 > cbSceneParam._m0[78u].w)
    {
        float _2382 = isnan(_376) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _376 : min(cbSceneParam._m0[80u].w, _376));
        float _2383 = _2382 / _376;
        float _2394 = _2383 * _428;
        float _2395 = _429 * _2383;
        float _2396 = (-0.0) - _2395;
        float _2398 = _2383 * _430;
        float _2400 = (cbSceneParam._m0[77u].w * _2396) / _2382;
        float _2401 = _2400 + cbSceneParam._m0[79u].w;
        float _2402 = cbSceneParam._m0[79u].w - _2395;
        float _2408 = sqrt(((_2394 * _2394) + (_2395 * _2395)) + (_2398 * _2398));
        float _2411 = (1.0 - (cbSceneParam._m0[77u].w / _2382)) * _2408;
        float _2416 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2418 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2595;
        if (abs((_2396 - _2400) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2595 = ((((_2401 > 0.0) ? exp2(_2416 * _2401) : (2.0 - exp2(_2418 * _2401))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2411;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : max(_2401, _2402));
            float _2541 = isnan(_2402) ? _2401 : (isnan(_2401) ? _2402 : min(_2401, _2402));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2595 = ((abs(_2408 / _2396) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2416 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2416 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2418 * _2550) - exp2(_2418 * _2551)) * _2539))) + (_2411 * cbSceneParam._m0[80u].z);
        }
        vec4 _2597 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2307, _2308, 1.0), 0.0);
        float _2606 = exp2((_2595 * (-1.44269502162933349609375)) * (1.0 - _2597.w));
        float _2607 = log2(_2606);
        float _2623 = log2(_2327);
        _2420 = (exp2(_2623 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].x)) * _2597.x) / cbSceneParam._m0[78u].x)) + _2324;
        _2422 = (exp2(_2623 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].y)) * _2597.y) / cbSceneParam._m0[78u].y)) + _2325;
        _2424 = (exp2(_2623 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2607 * cbSceneParam._m0[78u].z)) * _2597.z) / cbSceneParam._m0[78u].z)) + _2326;
        _2426 = _2606 * _2327;
    }
    else
    {
        _2420 = _2324;
        _2422 = _2325;
        _2424 = _2326;
        _2426 = _2327;
    }
    bool _2633;
    vec4 _2436;
    vec4 _2458;
    float _2460;
    float _2464;
    float _2465;
    float _2466;
    float _2467;
    bool _2477;
    for (;;)
    {
        _2436 = cbMatDynParam._m0[0u];
        float _2438 = roundEven(_2436.y);
        bool _2439 = _2438 == 3.0;
        float _2440 = log2(_2426);
        float _2447 = exp2(_2440 * cbSceneParam._m0[78u].x) * _2296;
        float _2448 = exp2(_2440 * cbSceneParam._m0[78u].y) * _2297;
        float _2449 = exp2(_2440 * cbSceneParam._m0[78u].z) * _2298;
        float _2456 = _444 + (-0.5);
        _2458 = cbMtdParam._m0[1u];
        _2460 = _2458.y * _2456;
        float _2463 = (_2438 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2464 = _2463 * (_2439 ? _2447 : (_2447 + (cbSceneParam._m0[72u].w * _2420)));
        _2465 = _2463 * (_2439 ? _2448 : (_2448 + (cbSceneParam._m0[72u].w * _2422)));
        _2466 = _2463 * (_2439 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2424)));
        _2467 = _2456 * 0.999000012874603271484375;
        _2477 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2477)
        {
            if ((cbInstanceData._m0[_222 + 7u].x + _2467) < 0.5)
            {
                _2633 = true;
                break;
            }
        }
        uint _2574 = _496 + uint(_2436.w);
        if ((cbInstanceData._m0[_2574].w < 1.0) && ((cbInstanceData._m0[_2574].w + _2467) < 0.5))
        {
            _2633 = true;
            break;
        }
        if ((_2460 + 1.0) < _2458.x)
        {
            _2633 = true;
            break;
        }
        _2633 = false;
        break;
    }
    float _2838;
    if (_2633)
    {
        discard_state = true;
        _2838 = 0.0;
    }
    else
    {
        _2838 = cbInstanceData._m0[_2299].w;
    }
    SV_Target.x = _2464;
    SV_Target.y = _2465;
    SV_Target.z = _2466;
    SV_Target.w = _2838;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2299].w;
    discard_exit();
}


