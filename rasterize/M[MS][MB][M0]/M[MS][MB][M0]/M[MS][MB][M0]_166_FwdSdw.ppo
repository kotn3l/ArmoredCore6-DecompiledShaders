#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1086;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _341 = _339.x;
    float _351 = dot(vec4(_341, _339.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _368 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_341 - _351) * cbMtdParam._m0[24u].x) + _351) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3676 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _376 = (_369 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _377 = (_369 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _378 = (_369 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _252) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _253) + cbTextureTilingScale._m0[3u].w));
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _417 = _415.x;
    float _427 = dot(vec4(_417, _415.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _441 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_417 - _427) * cbMtdParam._m0[24u].x) + _427) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3687 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _442 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _449 = (_442 * ((_395.x * cbMtdParam._m0[13u].x) - _376)) + _376;
    float _450 = (_442 * ((_395.y * cbMtdParam._m0[13u].y) - _377)) + _377;
    float _451 = (_442 * ((_395.z * cbMtdParam._m0[13u].z) - _378)) + _378;
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    float _492 = ((_464.x - _483) * _369) + _483;
    float _493 = ((_464.y - _484) * _369) + _484;
    float _494 = ((_464.z - _485) * _369) + _485;
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _252) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _253) + cbTextureTilingScale._m0[2u].w));
    float _519 = ((_506.z - _494) * _442) + _494;
    float _522 = ((((_506.x - _492) * _442) + _492) * 2.0) + (-1.0);
    float _524 = ((((_506.y - _493) * _442) + _493) * 2.0) + (-1.0);
    float _525 = dot(vec2(_522, _524), vec2(_522, _524));
    float _3698 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _550 = cbMtdParam._m0[22u].x + _543.w;
    float _553 = fma(_530, _219 * NORMAL.x, fma(_524, _226 * TANGENT.x, (_212 * _204) * _522));
    float _556 = fma(_530, _219 * NORMAL.y, fma(_524, _226 * TANGENT.y, (_212 * _205) * _522));
    float _559 = fma(_530, _219 * NORMAL.z, fma(_524, _226 * TANGENT.z, (_212 * _206) * _522));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3709 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _567 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3731 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3742 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3753 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _637 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _627);
    float _638 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _627);
    float _639 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _627);
    float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
    float _644 = _637 * _643;
    float _645 = _638 * _643;
    float _646 = _639 * _643;
    float _652 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _653 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _671 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _674 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _677 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    uint _691 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _697 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_691].x;
    float _698 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_691].y;
    float _699 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_691].z;
    float _3764 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _652, cbSceneParam._m0[86u].y * _653));
    float _715 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * TEXCOORD_5.w) * _711.x;
    float _716 = dot(vec3(_564, _565, _566), vec3(_644, _645, _646));
    float _719 = _716 * 2.0;
    float _723 = (_719 * _564) - _644;
    float _724 = (_719 * _565) - _645;
    float _725 = (_719 * _566) - _646;
    float _729 = abs(dot(vec3(_644, _645, _646), vec3(_564, _565, _566)));
    float _3797 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _731 = sqrt(_567);
    float _744 = exp2((_731 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_731 * 3.0));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1085;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_784, cbModelParam._m0[26u].z, fma(_780, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _776));
        float _814 = fma(_784, cbModelParam._m0[27u].z, fma(_780, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _776));
        float _818 = fma(_784, cbModelParam._m0[28u].z, fma(_780, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _776));
        float _843 = _776 + _564;
        float _844 = _780 + _565;
        float _845 = _784 + _566;
        float _855 = fma(_845, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _843)) - _810;
        float _856 = fma(_845, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _843)) - _814;
        float _857 = fma(_845, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _843)) - _818;
        float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
        float _874 = ((_861 * _855) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _875 = ((_861 * _856) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_861 * _857) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_874, _875, _876), 0.0);
        float _913 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_879.x + (-0.5));
        float _915 = _913 * (_879.y + (-0.5));
        float _916 = _913 * (_879.z + (-0.5));
        float _923 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_886.x + (-0.5));
        float _925 = _923 * (_886.y + (-0.5));
        float _926 = _923 * (_886.z + (-0.5));
        float _933 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_893.x + (-0.5));
        float _935 = _933 * (_893.y + (-0.5));
        float _936 = _933 * (_893.z + (-0.5));
        float _943 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_900.x + (-0.5));
        float _945 = _943 * (_900.y + (-0.5));
        float _946 = _943 * (_900.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _967 = (dot(vec3(_564, _565, _566), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _977 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3845 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_979 + 1.0))) + _984) * _947;
        float _994 = _915 * 0.5;
        float _995 = _925 * 0.5;
        float _996 = _935 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_564, _565, _566), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3878 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1021 + 1.0))) + _1026) * _948;
        float _1036 = _916 * 0.5;
        float _1037 = _926 * 0.5;
        float _1038 = _936 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_564, _565, _566), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3911 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1063 + 1.0))) + _1068) * _949;
        _1085 = _916;
        _1087 = _915;
        _1088 = _914;
        _1089 = _926;
        _1090 = _925;
        _1091 = _924;
        _1092 = _936;
        _1093 = _935;
        _1094 = _934;
        _1095 = _949;
        _1096 = _948;
        _1097 = _947;
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _1086;
        _1087 = _1086;
        _1088 = _1086;
        _1089 = _1086;
        _1090 = _1086;
        _1091 = _1086;
        _1092 = _1086;
        _1093 = _1086;
        _1094 = _1086;
        _1095 = _1086;
        _1096 = _1086;
        _1097 = _1086;
        _1098 = 0.0;
        _1099 = 0.0;
        _1100 = 0.0;
    }
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1124 = fma(_784, cbModelParam._m0[30u].z, fma(_780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _776));
        float _1128 = fma(_784, cbModelParam._m0[31u].z, fma(_780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _776));
        float _1132 = fma(_784, cbModelParam._m0[32u].z, fma(_780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _776));
        float _1155 = _776 + _564;
        float _1156 = _780 + _565;
        float _1157 = _784 + _566;
        float _1167 = fma(_1157, cbModelParam._m0[30u].z, fma(_1156, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1155)) - _1124;
        float _1168 = fma(_1157, cbModelParam._m0[31u].z, fma(_1156, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1155)) - _1128;
        float _1169 = fma(_1157, cbModelParam._m0[32u].z, fma(_1156, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1155)) - _1132;
        float _1173 = inversesqrt(dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169)));
        float _1186 = ((_1173 * _1167) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1124 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1173 * _1168) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1128 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1173 * _1169) / cbModelParam._m0[35u].z) + ((((((_1132 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1186, _1187, _1188), 0.0);
        float _1223 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1190.x + (-0.5));
        float _1225 = _1223 * (_1190.y + (-0.5));
        float _1226 = _1223 * (_1190.z + (-0.5));
        float _1233 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1197.x + (-0.5));
        float _1235 = _1233 * (_1197.y + (-0.5));
        float _1236 = _1233 * (_1197.z + (-0.5));
        float _1243 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1204.x + (-0.5));
        float _1245 = _1243 * (_1204.y + (-0.5));
        float _1246 = _1243 * (_1204.z + (-0.5));
        float _1253 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1211.x + (-0.5));
        float _1255 = _1253 * (_1211.y + (-0.5));
        float _1256 = _1253 * (_1211.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_564, _565, _566), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3974 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1287 + 1.0))) + _1292) * _1257;
        float _1302 = _1225 * 0.5;
        float _1303 = _1235 * 0.5;
        float _1304 = _1245 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_564, _565, _566), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4007 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1329 + 1.0))) + _1334) * _1258;
        float _1344 = _1226 * 0.5;
        float _1345 = _1236 * 0.5;
        float _1346 = _1246 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_564, _565, _566), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4040 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1371 + 1.0))) + _1376) * _1259;
        _1393 = _1226;
        _1394 = _1225;
        _1395 = _1224;
        _1396 = _1236;
        _1397 = _1235;
        _1398 = _1234;
        _1399 = _1246;
        _1400 = _1245;
        _1401 = _1244;
        _1402 = _1259;
        _1403 = _1258;
        _1404 = _1257;
        _1405 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
    }
    else
    {
        _1393 = _1086;
        _1394 = _1086;
        _1395 = _1086;
        _1396 = _1086;
        _1397 = _1086;
        _1398 = _1086;
        _1399 = _1086;
        _1400 = _1086;
        _1401 = _1086;
        _1402 = _1086;
        _1403 = _1086;
        _1404 = _1086;
        _1405 = 0.0;
        _1406 = 0.0;
        _1407 = 0.0;
    }
    float _1417 = (cbModelParam._m0[1u].x * (_1405 - _1098)) + _1098;
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1099)) + _1099;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1100)) + _1100;
    float _1440 = fma(_1419, cbSceneParam._m0[89u].z, fma(_1418, cbSceneParam._m0[89u].y, _1417 * cbSceneParam._m0[89u].x));
    float _1443 = fma(_1419, cbSceneParam._m0[90u].z, fma(_1418, cbSceneParam._m0[90u].y, _1417 * cbSceneParam._m0[90u].x));
    float _1446 = fma(_1419, cbSceneParam._m0[91u].z, fma(_1418, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1417));
    float _1461 = _723 * 0.5;
    float _1462 = _724 * 0.5;
    float _1463 = _725 * 0.5;
    float _1464 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1467 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1470 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1393, _1396, _1399, _1402));
    float _1504;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1477 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1085, _1089, _1092, _1095));
        float _1481 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1087, _1090, _1093, _1096));
        float _1485 = dot(vec4(_1461, _1462, _1463, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1492 = dot(vec4(cbModelParam._m0[39u]), vec4(_1461, _1462, _1463, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1515;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1506 = dot(vec4(cbModelParam._m0[40u]), vec4(_1461, _1462, _1463, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1519 = (_1515 * cbModelParam._m0[1u].x) + (_1504 * (1.0 - cbModelParam._m0[1u].x));
    float _1529 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _567);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1529 : min(cbModelParam._m0[25u].z, _1529));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_784, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_784, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_784, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_725, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723));
        float _1593 = fma(_725, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723));
        float _1596 = fma(_725, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1624 = frontier_phi_14_12_ladder;
        }
        float _1795;
        if (_1593 > 0.0)
        {
            _1795 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1795 = frontier_phi_23_19_ladder;
        }
        float _2090;
        if (_1596 > 0.0)
        {
            _2090 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2090 = frontier_phi_35_30_ladder;
        }
        float _2092 = isnan(_1795) ? _1624 : (isnan(_1624) ? _1795 : min(_1624, _1795));
        float _2093 = isnan(_2090) ? _2092 : (isnan(_2092) ? _2090 : min(_2092, _2090));
        float _2097 = (_2093 * _1590) + _1579;
        float _2098 = (_2093 * _1593) + _1583;
        float _2099 = (_2093 * _1596) + _1587;
        float _2100 = _2093 * 9.9999997473787516355514526367188e-05;
        float _2102 = (-1.0) - _2100;
        float _2104 = _2100 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2099 > _2104) || ((_2099 < _2102) || ((_2098 > _2104) || ((_2098 < _2102) || ((_2097 < _2102) || (_2097 > _2104))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2244 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2099, cbModelParam._m0[9u].z, fma(_2098, cbModelParam._m0[9u].y, _2097 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2099, cbModelParam._m0[10u].z, fma(_2098, cbModelParam._m0[10u].y, _2097 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2099, cbModelParam._m0[11u].z, fma(_2098, cbModelParam._m0[11u].y, _2097 * cbModelParam._m0[11u].x))), _1530);
            frontier_phi_13_35_ladder = _2244.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2244.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2244.x * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_13_35_ladder_2;
        _1614 = frontier_phi_13_35_ladder_1;
        _1616 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_723, _724, _725), _1530);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _567);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_784, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_784, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_784, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_725, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723));
        float _1690 = fma(_725, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723));
        float _1693 = fma(_725, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723));
        float _1800;
        if (_1687 > 0.0)
        {
            _1800 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1800 = frontier_phi_25_21_ladder;
        }
        float _2117;
        if (_1690 > 0.0)
        {
            _2117 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2117 = frontier_phi_37_32_ladder;
        }
        float _2444;
        if (_1693 > 0.0)
        {
            _2444 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2444 = frontier_phi_47_44_ladder;
        }
        float _2446 = isnan(_2117) ? _1800 : (isnan(_1800) ? _2117 : min(_1800, _2117));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1687) + _1676;
        float _2452 = (_2447 * _1690) + _1680;
        float _2453 = (_2447 * _1693) + _1684;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2455 = (-1.0) - _2454;
        float _2457 = _2454 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2453 > _2457) || ((_2453 < _2455) || ((_2452 > _2457) || ((_2452 < _2455) || ((_2451 < _2455) || (_2451 > _2457))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2453, cbModelParam._m0[17u].z, fma(_2452, cbModelParam._m0[17u].y, _2451 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2453, cbModelParam._m0[18u].z, fma(_2452, cbModelParam._m0[18u].y, _2451 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2453, cbModelParam._m0[19u].z, fma(_2452, cbModelParam._m0[19u].y, _2451 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_22_47_ladder = _2571.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2571.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2571.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_22_47_ladder_2;
        _1714 = frontier_phi_22_47_ladder_1;
        _1716 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_723, _724, _725), _1621);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1728 = ((((1.0 - _744) * ((_731 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_744 * _731)) * _715;
    float _1729 = _1728 * ((cbModelParam._m0[1u].w * (_1712 - _1612)) + _1612);
    float _1730 = _1728 * ((cbModelParam._m0[1u].w * (_1714 - _1614)) + _1614);
    float _1731 = _1728 * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1734 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    float _1774 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1778 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1782 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1786 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1787 = _1774 / _1786;
    float _1788 = _1778 / _1786;
    float _1789 = _1782 / _1786;
    float _1936;
    float _1937;
    float _1938;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1816 = ((uint(_1789 > cbSceneParam._m0[59u].y) + uint(_1789 > cbSceneParam._m0[59u].x)) + uint(_1789 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1817 = _1816 + 43u;
        uint _1825 = _1816 + 44u;
        uint _1833 = _1816 + 45u;
        uint _1841 = _1816 + 46u;
        float _1852 = fma(_1786, cbSceneParam._m0[_1817].w, fma(_1782, cbSceneParam._m0[_1817].z, fma(_1778, cbSceneParam._m0[_1817].y, _1774 * cbSceneParam._m0[_1817].x)));
        float _1856 = fma(_1786, cbSceneParam._m0[_1825].w, fma(_1782, cbSceneParam._m0[_1825].z, fma(_1778, cbSceneParam._m0[_1825].y, _1774 * cbSceneParam._m0[_1825].x)));
        float _1864 = fma(_1786, cbSceneParam._m0[_1841].w, fma(_1782, cbSceneParam._m0[_1841].z, fma(_1778, cbSceneParam._m0[_1841].y, _1774 * cbSceneParam._m0[_1841].x)));
        float _1869 = cbSceneParam._m0[33u].z * _1864;
        float _1871 = cbSceneParam._m0[33u].w * _1864;
        float _1874 = fma(_1786, cbSceneParam._m0[_1833].w, fma(_1782, cbSceneParam._m0[_1833].z, fma(_1778, cbSceneParam._m0[_1833].y, _1774 * cbSceneParam._m0[_1833].x))) / _1864;
        float _1922 = (cbSceneParam._m0[33u].x - sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789))) * cbSceneParam._m0[33u].y;
        float _4166 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1929 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1869 + _1852) / _1864, (_1871 + _1856) / _1864), _1874), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1871 + _1852) / _1864, (_1856 - _1869) / _1864), _1874), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 - _1869) / _1864, (_1856 - _1871) / _1864), _1874), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 - _1871) / _1864, (_1869 + _1856) / _1864), _1874), 0.0)).x), vec4(0.25)));
        _1936 = 1.0 - (_1929 * cbSceneParam._m0[34u].x);
        _1937 = 1.0 - (_1929 * cbSceneParam._m0[34u].y);
        _1938 = 1.0 - (_1929 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1936 = 1.0;
        _1937 = 1.0;
        _1938 = 1.0;
    }
    float _2002;
    float _2004;
    float _2006;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1990 = fma(_1786, cbSceneParam._m0[63u].w, fma(_1782, cbSceneParam._m0[63u].z, fma(_1778, cbSceneParam._m0[63u].y, _1774 * cbSceneParam._m0[63u].x)));
        float _1991 = fma(_1786, cbSceneParam._m0[60u].w, fma(_1782, cbSceneParam._m0[60u].z, fma(_1778, cbSceneParam._m0[60u].y, _1774 * cbSceneParam._m0[60u].x))) / _1990;
        float _1992 = fma(_1786, cbSceneParam._m0[61u].w, fma(_1782, cbSceneParam._m0[61u].z, fma(_1778, cbSceneParam._m0[61u].y, _1774 * cbSceneParam._m0[61u].x))) / _1990;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1991 >= cbSceneParam._m0[64u].x) && (_1992 >= cbSceneParam._m0[64u].y)) && (_1991 <= cbSceneParam._m0[64u].z)) && (_1992 <= cbSceneParam._m0[64u].w))
        {
            float _2130 = fma(_1786, cbSceneParam._m0[62u].w, fma(_1782, cbSceneParam._m0[62u].z, fma(_1778, cbSceneParam._m0[62u].y, _1774 * cbSceneParam._m0[62u].x))) / _1990;
            float _2134 = isnan(cbSceneParam._m0[41u].w) ? _2130 : (isnan(_2130) ? cbSceneParam._m0[41u].w : max(_2130, cbSceneParam._m0[41u].w));
            float _2177 = (cbSceneParam._m0[33u].x - sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789))) * cbSceneParam._m0[33u].y;
            float _4182 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
            float _2184 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1991, cbSceneParam._m0[33u].w + _1992), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1991, _1992 - cbSceneParam._m0[33u].z), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1991 - cbSceneParam._m0[33u].z, _1992 - cbSceneParam._m0[33u].w), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1991 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1992), _2134), 0.0)).x), vec4(0.25)));
            float _2188 = 1.0 - (_2184 * cbSceneParam._m0[34u].x);
            float _2189 = 1.0 - (_2184 * cbSceneParam._m0[34u].y);
            float _2190 = 1.0 - (_2184 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2190) ? _1938 : (isnan(_1938) ? _2190 : min(_1938, _2190));
            frontier_phi_34_33_ladder_1 = isnan(_2189) ? _1937 : (isnan(_1937) ? _2189 : min(_1937, _2189));
            frontier_phi_34_33_ladder_2 = isnan(_2188) ? _1936 : (isnan(_1936) ? _2188 : min(_1936, _2188));
        }
        else
        {
            frontier_phi_34_33_ladder = _1938;
            frontier_phi_34_33_ladder_1 = _1937;
            frontier_phi_34_33_ladder_2 = _1936;
        }
        _2002 = frontier_phi_34_33_ladder_2;
        _2004 = frontier_phi_34_33_ladder_1;
        _2006 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2002 = _1936;
        _2004 = _1937;
        _2006 = _1938;
    }
    uvec4 _2011 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2013 = _2011.x * 14u;
    uint _2014 = _2013 + 13u;
    float _2021 = _715 + (-1.0);
    float _2026 = (cbLight._m0[_2014].x * _2021) + 1.0;
    float _2027 = (cbLight._m0[_2014].y * _2021) + 1.0;
    float _2028 = (cbLight._m0[_2014].z * _2021) + 1.0;
    float _2029 = (cbLight._m0[_2014].w * _2021) + 1.0;
    uint _2030 = _2013 + 5u;
    float _2036 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2040 = _2013 + 4u;
    float _2049 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2053 = _2013 | 1u;
    float _2064 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_564, _565, _566));
    float _2067 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_564, _565, _566));
    float _4218 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _4229 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2072 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2074 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2081 = ((cbLight._m0[_2030].x * _2036) * _2074) + (((cbLight._m0[_2040].x * _2002) * _2049) * _2072);
    float _2082 = ((_2036 * cbLight._m0[_2030].y) * _2074) + (((cbLight._m0[_2040].y * _2004) * _2049) * _2072);
    float _2083 = ((_2036 * cbLight._m0[_2030].z) * _2074) + (((cbLight._m0[_2040].z * _2006) * _2049) * _2072);
    uvec4 _2087 = floatBitsToUint(cbLight._m0[_2013 + 12u]);
    bool _2089 = _2087.x == 0u;
    float _2191;
    float _2193;
    float _2195;
    if (_2089)
    {
        _2191 = _2081;
        _2193 = _2082;
        _2195 = _2083;
    }
    else
    {
        uint _2199 = _2013 + 6u;
        float _2215 = (dot(vec3(cbLight._m0[_2013 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4240 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2218 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2191 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _2081;
        _2193 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _2082;
        _2195 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _2083;
    }
    bool _2198 = _2087.y == 0u;
    float _2253;
    float _2255;
    float _2257;
    if (_2198)
    {
        _2253 = _2191;
        _2255 = _2193;
        _2257 = _2195;
    }
    else
    {
        uint _2415 = _2013 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2013 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4256 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2434 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2253 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2191;
        _2255 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2193;
        _2257 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2195;
    }
    uint _2260 = _2013 + 8u;
    float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _567) * 0.949999988079071044921875);
    float _2274 = _2273 * _2273;
    float _2275 = cbLight._m0[_2013].x + _644;
    float _2276 = cbLight._m0[_2013].y + _645;
    float _2277 = cbLight._m0[_2013].z + _646;
    float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
    float _2282 = _2281 * _2275;
    float _2283 = _2281 * _2276;
    float _2284 = _2281 * _2277;
    float _2285 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2013].xyz));
    float _4272 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2289 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2290 = dot(vec3(_564, _565, _566), vec3(_2282, _2283, _2284));
    float _4294 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2282, _2283, _2284));
    float _4305 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2274 * _2274;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2314 = 1.0 - _2274;
    float _2325 = (0.5 / (((_2289 * ((_2288 * _2314) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2314) + _2274) * _2288))) * _2288;
    float _4316 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2327 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    uint _2341 = _2013 + 9u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _567) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2053].x + _644;
    float _2355 = cbLight._m0[_2053].y + _645;
    float _2356 = cbLight._m0[_2053].z + _646;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2053].xyz));
    float _4327 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2368 = dot(vec3(_564, _565, _566), vec3(_2361, _2362, _2363));
    float _4338 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2371 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2372 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2361, _2362, _2363));
    float _4349 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2376 = _2353 * _2353;
    float _2380 = ((_2371 * _2371) * (_2376 + (-1.0))) + 1.0;
    float _2389 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2390 = 1.0 - _2353;
    float _2400 = (0.5 / (((_2289 * ((_2367 * _2390) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2390) + _2353) * _2367))) * _2367;
    float _4360 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2376 / ((_2380 * _2380) * 3.141590118408203125));
    float _2412 = (((_2389 * cbLight._m0[_2341].x) * _2402) * _2036) + ((((cbLight._m0[_2260].x * _2002) * _2313) * _2327) * _2049);
    float _2413 = (((_2389 * cbLight._m0[_2341].y) * _2402) * _2036) + ((((cbLight._m0[_2260].y * _2004) * _2313) * _2327) * _2049);
    float _2414 = (((_2389 * cbLight._m0[_2341].z) * _2402) * _2036) + ((((cbLight._m0[_2260].z * _2006) * _2313) * _2327) * _2049);
    float _2470;
    float _2472;
    float _2474;
    if (_2089)
    {
        _2470 = _2412;
        _2472 = _2413;
        _2474 = _2414;
    }
    else
    {
        uint _2476 = _2013 + 2u;
        uint _2480 = _2013 + 10u;
        float _2494 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2476].w)) * _567) * 0.949999988079071044921875);
        float _2495 = _2494 * _2494;
        float _2496 = cbLight._m0[_2476].x + _644;
        float _2497 = cbLight._m0[_2476].y + _645;
        float _2498 = cbLight._m0[_2476].z + _646;
        float _2502 = inversesqrt(dot(vec3(_2496, _2497, _2498), vec3(_2496, _2497, _2498)));
        float _2503 = _2502 * _2496;
        float _2504 = _2502 * _2497;
        float _2505 = _2502 * _2498;
        float _2506 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2476].xyz));
        float _4371 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2510 = dot(vec3(_564, _565, _566), vec3(_2503, _2504, _2505));
        float _4382 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2514 = dot(vec3(cbLight._m0[_2476].xyz), vec3(_2503, _2504, _2505));
        float _4393 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2518 = _2495 * _2495;
        float _2522 = ((_2513 * _2513) * (_2518 + (-1.0))) + 1.0;
        float _2531 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2532 = 1.0 - _2495;
        float _2542 = (0.5 / (((_2289 * ((_2509 * _2532) + _2495)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2532) + _2495) * _2509))) * _2509;
        float _4404 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2518 / ((_2522 * _2522) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
        _2470 = (((_2531 * cbLight._m0[_2480].x) * _2544) * _2545) + _2412;
        _2472 = (((_2531 * cbLight._m0[_2480].y) * _2544) * _2545) + _2413;
        _2474 = (((_2531 * cbLight._m0[_2480].z) * _2544) * _2545) + _2414;
    }
    float _2576;
    float _2578;
    float _2580;
    if (_2198)
    {
        _2576 = _2470;
        _2578 = _2472;
        _2580 = _2474;
    }
    else
    {
        uint _2587 = _2013 + 3u;
        uint _2591 = _2013 + 11u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _567) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _644;
        float _2608 = cbLight._m0[_2587].y + _645;
        float _2609 = cbLight._m0[_2587].z + _646;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2587].xyz));
        float _4420 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2621 = dot(vec3(_564, _565, _566), vec3(_2614, _2615, _2616));
        float _4431 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4442 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2643 = 1.0 - _2606;
        float _2653 = (0.5 / (((_2289 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2289 * _2643) + _2606) * _2620))) * _2620;
        float _4453 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2576 = (((_2642 * cbLight._m0[_2591].x) * _2655) * _2656) + _2470;
        _2578 = (((_2642 * cbLight._m0[_2591].y) * _2655) * _2656) + _2472;
        _2580 = (((_2642 * cbLight._m0[_2591].z) * _2655) * _2656) + _2474;
    }
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    float _2732;
    if (_2011.y == 0u)
    {
        uvec4 _2677 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2678 = _2677.x;
        uint _2689 = uint((float(_2677.y) * floor(float(uint(cbSceneParam._m0[85u].y * _653) / _2678))) + floor(float(uint(cbSceneParam._m0[85u].x * _652) / _2678)));
        float _2699 = (log2(_1789 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2700 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        uint _2703 = uint(isnan(14.0) ? _2700 : (isnan(_2700) ? 14.0 : min(_2700, 14.0)));
        uvec4 _2708 = texelFetch(g_lightClusterGridBuffer, int(((_2703 << 2u) + (_2689 << 6u)) >> 2u));
        uint _2709 = _2708.x;
        uint _2710 = _2677.z;
        float _2789;
        float _2791;
        float _2793;
        float _2795;
        float _2797;
        float _2799;
        if (((((1u << ((_2710 >> 4u) & 15u)) + 4294967295u) & _2709) == 0u) || ((_2710 & 240u) == 0u))
        {
            _2789 = 0.0;
            _2791 = 0.0;
            _2793 = 0.0;
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
        }
        else
        {
            float _2790;
            float _2792;
            float _2794;
            float _2796;
            float _2798;
            float _2800;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            uint _2940 = 0u;
            uint _2949;
            bool _2950;
            for (;;)
            {
                _2949 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                _2950 = _2949 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2950)
                {
                    frontier_phi_66_pred = _2939;
                    frontier_phi_66_pred_1 = _2938;
                    frontier_phi_66_pred_2 = _2937;
                    frontier_phi_66_pred_3 = _2936;
                    frontier_phi_66_pred_4 = _2935;
                    frontier_phi_66_pred_5 = _2934;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2949;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2940 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _1787;
                        float _3125 = _3084.y - _1788;
                        float _3126 = _3084.z - _1789;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_671, _674, _677), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4479 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _1787;
                        float _3160 = (-0.0) - _1788;
                        float _3161 = (-0.0) - _1789;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3175 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3176 = 1.0 - _731;
                        float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                        float _3184 = _3183 * _3183;
                        float _3185 = _3184 * _3184;
                        float _3186 = _3166 + _3131;
                        float _3187 = _3167 + _3132;
                        float _3188 = _3168 + _3133;
                        float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                        float _3196 = dot(vec3(_671, _674, _677), vec3(_3166, _3167, _3168));
                        float _4495 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                        float _3199 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3200 = dot(vec3(_671, _674, _677), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                        float _4506 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3203 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                        float _3208 = _3144 * _3184;
                        float _3209 = _3208 * _3208;
                        float _3212 = ((1.0 - _3209) * _3134) + _3209;
                        float _4517 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3213 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3214 = 1.0 - _3184;
                        float _3224 = (0.5 / (((_3213 * ((_3199 * _3214) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3184) * _3199))) * _3213;
                        float _4528 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3235 = (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3207 * _3207) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2993 = (_3155 * _3103.x) + _3061;
                        _2994 = (_3155 * _3103.y) + _3062;
                        _2995 = (_3155 * _3103.z) + _3063;
                        _2990 = (_3235 * _3120.x) + _3058;
                        _2991 = (_3235 * _3120.y) + _3059;
                        _2992 = (_3235 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_66_pred = _2995;
                    frontier_phi_66_pred_1 = _2994;
                    frontier_phi_66_pred_2 = _2993;
                    frontier_phi_66_pred_3 = _2992;
                    frontier_phi_66_pred_4 = _2991;
                    frontier_phi_66_pred_5 = _2990;
                }
                _2800 = frontier_phi_66_pred;
                _2798 = frontier_phi_66_pred_1;
                _2796 = frontier_phi_66_pred_2;
                _2794 = frontier_phi_66_pred_3;
                _2792 = frontier_phi_66_pred_4;
                _2790 = frontier_phi_66_pred_5;
                uint _2941 = _2940 + 1u;
                if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2934 = _2790;
                    _2935 = _2792;
                    _2936 = _2794;
                    _2937 = _2796;
                    _2938 = _2798;
                    _2939 = _2800;
                    _2940 = _2941;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2789 = _2790;
            _2791 = _2792;
            _2793 = _2794;
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
        }
        uvec4 _2803 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2804 = _2803.z;
        uint _2806 = (_2804 >> 8u) & 15u;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((4294967295u << _2806) & _2709) == 0u)
        {
            _2902 = _2789;
            _2904 = _2791;
            _2906 = _2793;
            _2908 = _2795;
            _2910 = _2797;
            _2912 = _2799;
        }
        else
        {
            float _2927 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
            float _2928 = _2927 * _1787;
            float _2929 = _2927 * _1788;
            float _2930 = _2927 * _1789;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2806 < ((_2804 >> 12u) & 15u))
            {
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _3041 = _2789;
                float _3042 = _2791;
                float _3043 = _2793;
                float _3044 = _2795;
                float _3045 = _2797;
                float _3046 = _2799;
                uint _3047 = _2806;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2703 << 5u) + (_2689 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3057)
                    {
                        frontier_phi_72_pred = _3046;
                        frontier_phi_72_pred_1 = _3045;
                        frontier_phi_72_pred_2 = _3044;
                        frontier_phi_72_pred_3 = _3043;
                        frontier_phi_72_pred_4 = _3042;
                        frontier_phi_72_pred_5 = _3041;
                    }
                    else
                    {
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3253 = _3041;
                        float _3254 = _3042;
                        float _3255 = _3043;
                        float _3256 = _3044;
                        float _3257 = _3045;
                        float _3258 = _3046;
                        uint _3259 = _3056;
                        uint _3260;
                        vec4 _3285;
                        float _3286;
                        vec4 _3301;
                        vec3 _3313;
                        vec4 _3328;
                        vec4 _3343;
                        float _3389;
                        bool _3390;
                        for (;;)
                        {
                            uint _3270 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3259));
                            _3260 = (_3259 + 4294967295u) & _3259;
                            uint _3272 = _3270 * 40u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            _3286 = _3285.w;
                            uint _3288 = (_3270 * 40u) + 4u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3270 * 40u) + 8u;
                            _3313 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x));
                            uint _3315 = (_3270 * 40u) + 16u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3330 = (_3270 * 40u) + 20u;
                            _3343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3330 + 3u)).x));
                            uint _3345 = (_3270 * 40u) + 24u;
                            vec4 _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3364 = (_3270 * 40u) + 28u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3389 = fma(_1789, _3377.z, fma(_1788, _3377.y, _3377.x * _1787)) + _3377.w;
                            _3390 = !((fma(_1789, _3358.z, fma(_1788, _3358.y, _3358.x * _1787)) + _3358.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3390)
                            {
                                float _3417 = _3285.x - _1787;
                                float _3418 = _3285.y - _1788;
                                float _3419 = _3285.z - _1789;
                                float _3420 = dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419));
                                float _3423 = inversesqrt(_3420);
                                float _3424 = _3423 * _3417;
                                float _3425 = _3423 * _3418;
                                float _3426 = _3423 * _3419;
                                float _3430 = 1.0 - (_3420 / (_3286 * _3286));
                                float _4539 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3435 = sqrt(_3420) * _3301.w;
                                float _3437 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                                float _3438 = _3437 * _3437;
                                float _3441 = ((1.0 - _3438) * dot(vec3(_3424, _3425, _3426), vec3(_671, _674, _677))) + _3438;
                                float _3444 = _3435 * _3435;
                                float _3448 = (fma(_1789, _3328.z, fma(_1788, _3328.y, _3328.x * _1787)) + _3328.w) / _3389;
                                float _3449 = (fma(_1789, _3343.z, fma(_1788, _3343.y, _3343.x * _1787)) + _3343.w) / _3389;
                                float _3453 = 1.0 - dot(vec2(_3448, _3449), vec2(_3448, _3449));
                                float _4555 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3455 = _3454 * (((isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))) * _3431) / ((_3444 * 0.699999988079071044921875) + 1.0));
                                float _3467 = exp2(log2(1.0 / ((_3444 * 3.5) + 5.0)) * 0.25);
                                float _3468 = 1.0 - _731;
                                float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                                float _3476 = _3475 * _3475;
                                float _3477 = _3476 * _3476;
                                float _3478 = _3424 - _2928;
                                float _3479 = _3425 - _2929;
                                float _3480 = _3426 - _2930;
                                float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                                float _3488 = dot(vec3(_671, _674, _677), vec3((-0.0) - _2928, (-0.0) - _2929, (-0.0) - _2930));
                                float _4566 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3491 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3492 = dot(vec3(_671, _674, _677), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                                float _4577 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3495 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                                float _3500 = _3437 * _3476;
                                float _3501 = _3500 * _3500;
                                float _3507 = ((1.0 - _3501) * dot(vec3(_671, _674, _677), vec3(_3424, _3425, _3426))) + _3501;
                                float _4588 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3509 = 1.0 - _3476;
                                float _3519 = (0.5 / (((_3508 * ((_3491 * _3509) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3476) * _3491))) * _3508;
                                float _4599 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3529 = (_3454 * _3431) * (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3499 * _3499) * ((_3444 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3455 * _3301.y;
                                frontier_phi_78_pred_1 = _3455 * _3301.x;
                                frontier_phi_78_pred_2 = _3529 * _3313.z;
                                frontier_phi_78_pred_3 = _3529 * _3313.y;
                                frontier_phi_78_pred_4 = _3529 * _3313.x;
                                frontier_phi_78_pred_5 = _3455 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3537 = frontier_phi_78_pred;
                            _3536 = frontier_phi_78_pred_1;
                            _3535 = frontier_phi_78_pred_2;
                            _3534 = frontier_phi_78_pred_3;
                            _3533 = frontier_phi_78_pred_4;
                            _3538 = frontier_phi_78_pred_5;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            _3240 = _3533 + _3253;
                            _3241 = _3534 + _3254;
                            _3242 = _3535 + _3255;
                            if (_3260 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3253 = _3240;
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3260;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3245;
                        frontier_phi_72_pred_1 = _3244;
                        frontier_phi_72_pred_2 = _3243;
                        frontier_phi_72_pred_3 = _3242;
                        frontier_phi_72_pred_4 = _3241;
                        frontier_phi_72_pred_5 = _3240;
                    }
                    _2913 = frontier_phi_72_pred;
                    _2911 = frontier_phi_72_pred_1;
                    _2909 = frontier_phi_72_pred_2;
                    _2907 = frontier_phi_72_pred_3;
                    _2905 = frontier_phi_72_pred_4;
                    _2903 = frontier_phi_72_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2903;
                        _3042 = _2905;
                        _3043 = _2907;
                        _3044 = _2909;
                        _3045 = _2911;
                        _3046 = _2913;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2913;
                frontier_phi_60_61_ladder_1 = _2911;
                frontier_phi_60_61_ladder_2 = _2907;
                frontier_phi_60_61_ladder_3 = _2905;
                frontier_phi_60_61_ladder_4 = _2903;
                frontier_phi_60_61_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_60_61_ladder = _2799;
                frontier_phi_60_61_ladder_1 = _2797;
                frontier_phi_60_61_ladder_2 = _2793;
                frontier_phi_60_61_ladder_3 = _2791;
                frontier_phi_60_61_ladder_4 = _2789;
                frontier_phi_60_61_ladder_5 = _2795;
            }
            _2902 = frontier_phi_60_61_ladder_4;
            _2904 = frontier_phi_60_61_ladder_3;
            _2906 = frontier_phi_60_61_ladder_2;
            _2908 = frontier_phi_60_61_ladder_5;
            _2910 = frontier_phi_60_61_ladder_1;
            _2912 = frontier_phi_60_61_ladder;
        }
        float _2917 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _2722 = (_2917 * _2908) + _2253;
        _2724 = (_2917 * _2910) + _2255;
        _2726 = (_2917 * _2912) + _2257;
        _2728 = ((_2902 * 0.039999999105930328369140625) * _2917) + _2576;
        _2730 = ((_2904 * 0.039999999105930328369140625) * _2917) + _2578;
        _2732 = ((_2906 * 0.039999999105930328369140625) * _2917) + _2580;
    }
    else
    {
        _2722 = _2253;
        _2724 = _2255;
        _2726 = _2257;
        _2728 = _2576;
        _2730 = _2578;
        _2732 = _2580;
    }
    float _4615 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4626 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4637 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    uint _2752 = _232 + 6u;
    float _2760 = _652 / cbSceneParam._m0[86u].x;
    float _2761 = _653 / cbSceneParam._m0[86u].y;
    vec4 _2775 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2777 = _2775.x;
    float _2778 = _2775.y;
    float _2779 = _2775.z;
    float _2780 = _2775.w;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2814 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2815 = _2814 / _585;
        float _2826 = _2815 * _637;
        float _2827 = _638 * _2815;
        float _2828 = (-0.0) - _2827;
        float _2830 = _2815 * _639;
        float _2832 = (cbSceneParam._m0[77u].w * _2828) / _2814;
        float _2833 = _2832 + cbSceneParam._m0[79u].w;
        float _2834 = cbSceneParam._m0[79u].w - _2827;
        float _2840 = sqrt(((_2826 * _2826) + (_2827 * _2827)) + (_2830 * _2830));
        float _2843 = (1.0 - (cbSceneParam._m0[77u].w / _2814)) * _2840;
        float _2848 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2850 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3003;
        if (abs((_2828 - _2832) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3003 = ((((_2833 > 0.0) ? exp2(_2848 * _2833) : (2.0 - exp2(_2850 * _2833))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2843;
        }
        else
        {
            float _2963 = 1.0 / cbSceneParam._m0[80u].x;
            float _2964 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : max(_2833, _2834));
            float _2965 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : min(_2833, _2834));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            _3003 = ((abs(_2840 / _2828) * cbSceneParam._m0[80u].y) * ((((_2974 - _2975) * 2.0) - ((exp2(_2848 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)))) - exp2(_2848 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))))) * _2963)) - ((exp2(_2850 * _2974) - exp2(_2850 * _2975)) * _2963))) + (_2843 * cbSceneParam._m0[80u].z);
        }
        vec4 _3005 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2760, _2761, 1.0), 0.0);
        float _3014 = exp2((_3003 * (-1.44269502162933349609375)) * (1.0 - _3005.w));
        float _3015 = log2(_3014);
        float _3031 = log2(_2780);
        _2852 = (exp2(_3031 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].x)) * _3005.x) / cbSceneParam._m0[78u].x)) + _2777;
        _2854 = (exp2(_3031 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].y)) * _3005.y) / cbSceneParam._m0[78u].y)) + _2778;
        _2856 = (exp2(_3031 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].z)) * _3005.z) / cbSceneParam._m0[78u].z)) + _2779;
        _2858 = _3014 * _2780;
    }
    else
    {
        _2852 = _2777;
        _2854 = _2778;
        _2856 = _2779;
        _2858 = _2780;
    }
    float _2870 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2871 = _2870 == 3.0;
    float _2872 = log2(_2858);
    float _2879 = exp2(_2872 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2722 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _715))) + ((_2728 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2880 = exp2(_2872 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2724 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _715))) + ((_2730 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2881 = exp2(_2872 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2726 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _715))) + ((_2732 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1519)) * cbPerFrame._m0[3u].x));
    float _2890 = (_2870 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2890 * (_2871 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.y = _2890 * (_2871 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.z = _2890 * (_2871 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.w = cbInstanceData._m0[_2752].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2752].w;
}


