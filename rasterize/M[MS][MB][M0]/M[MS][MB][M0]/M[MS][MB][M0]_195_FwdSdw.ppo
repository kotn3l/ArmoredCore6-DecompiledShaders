#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1244;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _365 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _365) * cbMtdParam._m0[24u].x) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3830 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _390 = (_383 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _391 = (_383 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _392 = (_383 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].x) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3841 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _526 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _545 = _543.x;
    float _546 = _543.y;
    float _547 = _543.z;
    float _554 = ((_526.x - _545) * _383) + _545;
    float _555 = ((_526.y - _546) * _383) + _546;
    float _556 = ((_526.z - _547) * _383) + _547;
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _581 = ((_568.z - _556) * _456) + _556;
    float _584 = ((((_568.x - _554) * _456) + _554) * 2.0) + (-1.0);
    float _585 = ((((_568.y - _555) * _456) + _555) * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3852 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _591 = sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))));
    vec4 _604 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _624 = _622.x;
    float _625 = 1.0 - _624;
    float _638 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_624 - _625) * cbMtdParam._m0[24u].z) + _625) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3863 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _639 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _646 = (_639 * ((_484.x * cbMtdParam._m0[18u].x) - _463)) + _463;
    float _647 = (_639 * ((_484.y * cbMtdParam._m0[18u].y) - _464)) + _464;
    float _648 = (_639 * ((_484.z * cbMtdParam._m0[18u].z) - _465)) + _465;
    float _653 = (((_503.z - _581) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _581;
    vec4 _666 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _673 = (_666.x * 2.0) + (-1.0);
    float _674 = (_666.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3874 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _683 = (_639 * (_666.z - _653)) + _653;
    float _688 = _584 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_503.x * 2.0) + (-1.0)));
    float _689 = _585 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_503.y * 2.0) + (-1.0)));
    float _701 = (((_673 - _688) + (cbMtdParam._m0[21u].x * _688)) * _639) + _688;
    float _702 = (((_674 - _689) + (cbMtdParam._m0[21u].x * _689)) * _639) + _689;
    float _703 = (_639 * (sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _591)) + _591;
    float _708 = cbMtdParam._m0[22u].x + _604.w;
    float _711 = fma(_703, _233 * NORMAL.x, fma(_702, _240 * TANGENT.x, (_226 * _218) * _701));
    float _714 = fma(_703, _233 * NORMAL.y, fma(_702, _240 * TANGENT.y, (_226 * _219) * _701));
    float _717 = fma(_703, _233 * NORMAL.z, fma(_702, _240 * TANGENT.z, (_226 * _220) * _701));
    float _721 = inversesqrt(dot(vec3(_711, _714, _717), vec3(_711, _714, _717)));
    float _722 = _721 * _711;
    float _723 = _721 * _714;
    float _724 = _721 * _717;
    float _3885 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _725 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _3907 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _3918 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3929 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _743 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _785);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _785);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _785);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    float _810 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _811 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_724, cbSceneParam._m0[5u].z, fma(_723, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _722));
    float _832 = fma(_724, cbSceneParam._m0[6u].z, fma(_723, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _722));
    float _835 = fma(_724, cbSceneParam._m0[7u].z, fma(_723, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _722));
    uint _849 = (_246 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _855 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_849].x;
    float _856 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_849].y;
    float _857 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_849].z;
    float _3940 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _810, cbSceneParam._m0[86u].y * _811));
    float _873 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * TEXCOORD_5.w) * _869.x;
    float _874 = dot(vec3(_722, _723, _724), vec3(_802, _803, _804));
    float _877 = _874 * 2.0;
    float _881 = (_877 * _722) - _802;
    float _882 = (_877 * _723) - _803;
    float _883 = (_877 * _724) - _804;
    float _887 = abs(dot(vec3(_802, _803, _804), vec3(_722, _723, _724)));
    float _3973 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _889 = sqrt(_725);
    float _902 = exp2((_889 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_889 * 3.0));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _968 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _972 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _976 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1001 = _934 + _722;
        float _1002 = _938 + _723;
        float _1003 = _942 + _724;
        float _1013 = fma(_1003, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001)) - _968;
        float _1014 = fma(_1003, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001)) - _972;
        float _1015 = fma(_1003, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001)) - _976;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_968 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_972 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[34u].z) + ((((((_976 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(_722, _723, _724), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _4021 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_722, _723, _724), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _4054 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_722, _723, _724), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _4087 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1286 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1290 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1313 = _934 + _722;
        float _1314 = _938 + _723;
        float _1315 = _942 + _724;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_722, _723, _724), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4150 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_722, _723, _724), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4183 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_722, _723, _724), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4216 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1244;
        _1552 = _1244;
        _1553 = _1244;
        _1554 = _1244;
        _1555 = _1244;
        _1556 = _1244;
        _1557 = _1244;
        _1558 = _1244;
        _1559 = _1244;
        _1560 = _1244;
        _1561 = _1244;
        _1562 = _1244;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1256)) + _1256;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1257)) + _1257;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1258)) + _1258;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _881 * 0.5;
    float _1620 = _882 * 0.5;
    float _1621 = _883 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _725);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_883, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _881));
        float _1749 = fma(_883, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _881));
        float _1752 = fma(_883, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _881));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1780 = frontier_phi_14_12_ladder;
        }
        float _1949;
        if (_1749 > 0.0)
        {
            _1949 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1949 = frontier_phi_23_19_ladder;
        }
        float _2244;
        if (_1752 > 0.0)
        {
            _2244 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2244 = frontier_phi_35_30_ladder;
        }
        float _2246 = isnan(_1949) ? _1780 : (isnan(_1780) ? _1949 : min(_1780, _1949));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1746) + _1735;
        float _2252 = (_2247 * _1749) + _1739;
        float _2253 = (_2247 * _1752) + _1743;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_13_35_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_13_35_ladder_2;
        _1770 = frontier_phi_13_35_ladder_1;
        _1772 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_881, _882, _883), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _725);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_883, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _881));
        float _1844 = fma(_883, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _881));
        float _1847 = fma(_883, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _881));
        float _1954;
        if (_1841 > 0.0)
        {
            _1954 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1954 = frontier_phi_25_21_ladder;
        }
        float _2271;
        if (_1844 > 0.0)
        {
            _2271 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2271 = frontier_phi_37_32_ladder;
        }
        float _2598;
        if (_1847 > 0.0)
        {
            _2598 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2598 = frontier_phi_47_44_ladder;
        }
        float _2600 = isnan(_2271) ? _1954 : (isnan(_1954) ? _2271 : min(_1954, _2271));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1841) + _1830;
        float _2606 = (_2601 * _1844) + _1834;
        float _2607 = (_2601 * _1847) + _1838;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_22_47_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_22_47_ladder_2;
        _1868 = frontier_phi_22_47_ladder_1;
        _1870 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_881, _882, _883), _1777);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1882 = ((((1.0 - _902) * ((_889 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_902 * _889)) * _873;
    float _1883 = _1882 * ((cbModelParam._m0[1u].w * (_1866 - _1768)) + _1768);
    float _1884 = _1882 * ((cbModelParam._m0[1u].w * (_1868 - _1770)) + _1770);
    float _1885 = _1882 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1941 = _1928 / _1940;
    float _1942 = _1932 / _1940;
    float _1943 = _1936 / _1940;
    float _2090;
    float _2091;
    float _2092;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1970 = ((uint(_1943 > cbSceneParam._m0[59u].y) + uint(_1943 > cbSceneParam._m0[59u].x)) + uint(_1943 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1971 = _1970 + 43u;
        uint _1979 = _1970 + 44u;
        uint _1987 = _1970 + 45u;
        uint _1995 = _1970 + 46u;
        float _2006 = fma(_1940, cbSceneParam._m0[_1971].w, fma(_1936, cbSceneParam._m0[_1971].z, fma(_1932, cbSceneParam._m0[_1971].y, _1928 * cbSceneParam._m0[_1971].x)));
        float _2010 = fma(_1940, cbSceneParam._m0[_1979].w, fma(_1936, cbSceneParam._m0[_1979].z, fma(_1932, cbSceneParam._m0[_1979].y, _1928 * cbSceneParam._m0[_1979].x)));
        float _2018 = fma(_1940, cbSceneParam._m0[_1995].w, fma(_1936, cbSceneParam._m0[_1995].z, fma(_1932, cbSceneParam._m0[_1995].y, _1928 * cbSceneParam._m0[_1995].x)));
        float _2023 = cbSceneParam._m0[33u].z * _2018;
        float _2025 = cbSceneParam._m0[33u].w * _2018;
        float _2028 = fma(_1940, cbSceneParam._m0[_1987].w, fma(_1936, cbSceneParam._m0[_1987].z, fma(_1932, cbSceneParam._m0[_1987].y, _1928 * cbSceneParam._m0[_1987].x))) / _2018;
        float _2076 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
        float _4342 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2083 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2006) / _2018, (_2025 + _2010) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 + _2006) / _2018, (_2010 - _2023) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2023) / _2018, (_2010 - _2025) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2025) / _2018, (_2023 + _2010) / _2018), _2028), 0.0)).x), vec4(0.25)));
        _2090 = 1.0 - (_2083 * cbSceneParam._m0[34u].x);
        _2091 = 1.0 - (_2083 * cbSceneParam._m0[34u].y);
        _2092 = 1.0 - (_2083 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2090 = 1.0;
        _2091 = 1.0;
        _2092 = 1.0;
    }
    float _2156;
    float _2158;
    float _2160;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2144 = fma(_1940, cbSceneParam._m0[63u].w, fma(_1936, cbSceneParam._m0[63u].z, fma(_1932, cbSceneParam._m0[63u].y, _1928 * cbSceneParam._m0[63u].x)));
        float _2145 = fma(_1940, cbSceneParam._m0[60u].w, fma(_1936, cbSceneParam._m0[60u].z, fma(_1932, cbSceneParam._m0[60u].y, _1928 * cbSceneParam._m0[60u].x))) / _2144;
        float _2146 = fma(_1940, cbSceneParam._m0[61u].w, fma(_1936, cbSceneParam._m0[61u].z, fma(_1932, cbSceneParam._m0[61u].y, _1928 * cbSceneParam._m0[61u].x))) / _2144;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2145 >= cbSceneParam._m0[64u].x) && (_2146 >= cbSceneParam._m0[64u].y)) && (_2145 <= cbSceneParam._m0[64u].z)) && (_2146 <= cbSceneParam._m0[64u].w))
        {
            float _2284 = fma(_1940, cbSceneParam._m0[62u].w, fma(_1936, cbSceneParam._m0[62u].z, fma(_1932, cbSceneParam._m0[62u].y, _1928 * cbSceneParam._m0[62u].x))) / _2144;
            float _2288 = isnan(cbSceneParam._m0[41u].w) ? _2284 : (isnan(_2284) ? cbSceneParam._m0[41u].w : max(_2284, cbSceneParam._m0[41u].w));
            float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
            float _4358 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
            float _2338 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2145, cbSceneParam._m0[33u].w + _2146), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2145, _2146 - cbSceneParam._m0[33u].z), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].z, _2146 - cbSceneParam._m0[33u].w), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2146), _2288), 0.0)).x), vec4(0.25)));
            float _2342 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
            float _2343 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
            float _2344 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2344) ? _2092 : (isnan(_2092) ? _2344 : min(_2092, _2344));
            frontier_phi_34_33_ladder_1 = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_34_33_ladder_2 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
        }
        else
        {
            frontier_phi_34_33_ladder = _2092;
            frontier_phi_34_33_ladder_1 = _2091;
            frontier_phi_34_33_ladder_2 = _2090;
        }
        _2156 = frontier_phi_34_33_ladder_2;
        _2158 = frontier_phi_34_33_ladder_1;
        _2160 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2156 = _2090;
        _2158 = _2091;
        _2160 = _2092;
    }
    uvec4 _2165 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2167 = _2165.x * 14u;
    uint _2168 = _2167 + 13u;
    float _2175 = _873 + (-1.0);
    float _2180 = (cbLight._m0[_2168].x * _2175) + 1.0;
    float _2181 = (cbLight._m0[_2168].y * _2175) + 1.0;
    float _2182 = (cbLight._m0[_2168].z * _2175) + 1.0;
    float _2183 = (cbLight._m0[_2168].w * _2175) + 1.0;
    uint _2184 = _2167 + 5u;
    float _2190 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2194 = _2167 + 4u;
    float _2203 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2207 = _2167 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_722, _723, _724));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_722, _723, _724));
    float _4394 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4405 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2184].x * _2190) * _2228) + (((cbLight._m0[_2194].x * _2156) * _2203) * _2226);
    float _2236 = ((_2190 * cbLight._m0[_2184].y) * _2228) + (((cbLight._m0[_2194].y * _2158) * _2203) * _2226);
    float _2237 = ((_2190 * cbLight._m0[_2184].z) * _2228) + (((cbLight._m0[_2194].z * _2160) * _2203) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2167 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2243)
    {
        _2345 = _2235;
        _2347 = _2236;
        _2349 = _2237;
    }
    else
    {
        uint _2353 = _2167 + 6u;
        float _2369 = (dot(vec3(cbLight._m0[_2167 + 2u].xyz), vec3(_722, _723, _724)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4416 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2372 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2345 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2235;
        _2347 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2236;
        _2349 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2237;
    }
    bool _2352 = _2241.y == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2352)
    {
        _2407 = _2345;
        _2409 = _2347;
        _2411 = _2349;
    }
    else
    {
        uint _2569 = _2167 + 7u;
        float _2585 = (dot(vec3(cbLight._m0[_2167 + 3u].xyz), vec3(_722, _723, _724)) * 0.5) + 0.5;
        float _2586 = _2585 * _2585;
        float _4432 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2587 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2588 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2407 = (((cbLight._m0[_2569].x * 0.3183098733425140380859375) * _2587) * _2588) + _2345;
        _2409 = (((cbLight._m0[_2569].y * 0.3183098733425140380859375) * _2587) * _2588) + _2347;
        _2411 = (((cbLight._m0[_2569].z * 0.3183098733425140380859375) * _2587) * _2588) + _2349;
    }
    uint _2414 = _2167 + 8u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _725) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2167].x + _802;
    float _2430 = cbLight._m0[_2167].y + _803;
    float _2431 = cbLight._m0[_2167].z + _804;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2167].xyz));
    float _4448 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _4459 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _2443 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2444 = dot(vec3(_722, _723, _724), vec3(_2436, _2437, _2438));
    float _4470 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2436, _2437, _2438));
    float _4481 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2428 * _2428;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2468 = 1.0 - _2428;
    float _2479 = (0.5 / (((_2443 * ((_2442 * _2468) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2468) + _2428) * _2442))) * _2442;
    float _4492 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    uint _2495 = _2167 + 9u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _725) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2207].x + _802;
    float _2509 = cbLight._m0[_2207].y + _803;
    float _2510 = cbLight._m0[_2207].z + _804;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2207].xyz));
    float _4503 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
    float _2522 = dot(vec3(_722, _723, _724), vec3(_2515, _2516, _2517));
    float _4514 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2515, _2516, _2517));
    float _4525 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2507 * _2507;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2543 = (exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2544 = 1.0 - _2507;
    float _2554 = (0.5 / (((_2443 * ((_2521 * _2544) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2544) + _2507) * _2521))) * _2521;
    float _4536 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    float _2566 = (((_2543 * cbLight._m0[_2495].x) * _2556) * _2190) + ((((cbLight._m0[_2414].x * _2156) * _2467) * _2481) * _2203);
    float _2567 = (((_2543 * cbLight._m0[_2495].y) * _2556) * _2190) + ((((cbLight._m0[_2414].y * _2158) * _2467) * _2481) * _2203);
    float _2568 = (((_2543 * cbLight._m0[_2495].z) * _2556) * _2190) + ((((cbLight._m0[_2414].z * _2160) * _2467) * _2481) * _2203);
    float _2624;
    float _2626;
    float _2628;
    if (_2243)
    {
        _2624 = _2566;
        _2626 = _2567;
        _2628 = _2568;
    }
    else
    {
        uint _2630 = _2167 + 2u;
        uint _2634 = _2167 + 10u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _725) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _802;
        float _2651 = cbLight._m0[_2630].y + _803;
        float _2652 = cbLight._m0[_2630].z + _804;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2630].xyz));
        float _4547 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2664 = dot(vec3(_722, _723, _724), vec3(_2657, _2658, _2659));
        float _4558 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4569 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2686 = 1.0 - _2649;
        float _2696 = (0.5 / (((_2443 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2686) + _2649) * _2663))) * _2663;
        float _4580 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2624 = (((_2685 * cbLight._m0[_2634].x) * _2698) * _2699) + _2566;
        _2626 = (((_2685 * cbLight._m0[_2634].y) * _2698) * _2699) + _2567;
        _2628 = (((_2685 * cbLight._m0[_2634].z) * _2698) * _2699) + _2568;
    }
    float _2730;
    float _2732;
    float _2734;
    if (_2352)
    {
        _2730 = _2624;
        _2732 = _2626;
        _2734 = _2628;
    }
    else
    {
        uint _2741 = _2167 + 3u;
        uint _2745 = _2167 + 11u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _725) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _802;
        float _2762 = cbLight._m0[_2741].y + _803;
        float _2763 = cbLight._m0[_2741].z + _804;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_722, _723, _724), vec3(cbLight._m0[_2741].xyz));
        float _4596 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2775 = dot(vec3(_722, _723, _724), vec3(_2768, _2769, _2770));
        float _4607 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4618 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2796 = (exp2(log2(1.0 - (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2797 = 1.0 - _2760;
        float _2807 = (0.5 / (((_2443 * ((_2774 * _2797) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2797) + _2760) * _2774))) * _2774;
        float _4629 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2730 = (((_2796 * cbLight._m0[_2745].x) * _2809) * _2810) + _2624;
        _2732 = (((_2796 * cbLight._m0[_2745].y) * _2809) * _2810) + _2626;
        _2734 = (((_2796 * cbLight._m0[_2745].z) * _2809) * _2810) + _2628;
    }
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_2165.y == 0u)
    {
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.x;
        uint _2843 = uint((float(_2831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _811) / _2832))) + floor(float(uint(cbSceneParam._m0[85u].x * _810) / _2832)));
        float _2853 = (log2(_1943 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2854 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        uint _2857 = uint(isnan(14.0) ? _2854 : (isnan(_2854) ? 14.0 : min(_2854, 14.0)));
        uvec4 _2862 = texelFetch(g_lightClusterGridBuffer, int(((_2857 << 2u) + (_2843 << 6u)) >> 2u));
        uint _2863 = _2862.x;
        uint _2864 = _2831.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2864 >> 4u) & 15u)) + 4294967295u) & _2863) == 0u) || ((_2864 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3088 = 0.0;
            float _3089 = 0.0;
            float _3090 = 0.0;
            float _3091 = 0.0;
            float _3092 = 0.0;
            float _3093 = 0.0;
            uint _3094 = 0u;
            uint _3103;
            bool _3104;
            for (;;)
            {
                _3103 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                _3104 = _3103 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3104)
                {
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3092;
                    frontier_phi_66_pred_2 = _3091;
                    frontier_phi_66_pred_3 = _3090;
                    frontier_phi_66_pred_4 = _3089;
                    frontier_phi_66_pred_5 = _3088;
                }
                else
                {
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    uint _3218;
                    _3212 = _3088;
                    _3213 = _3089;
                    _3214 = _3090;
                    _3215 = _3091;
                    _3216 = _3092;
                    _3217 = _3093;
                    _3218 = _3103;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    for (;;)
                    {
                        uint _3222 = uint(findLSB(_3218)) + (_3094 << 5u);
                        uint _3219 = (_3218 + 4294967295u) & _3218;
                        uint _3224 = _3222 * 48u;
                        vec4 _3238 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3244 = (_3222 * 48u) + 4u;
                        vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3244)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3244 + 3u)).x));
                        uint _3263 = (_3222 * 48u) + 8u;
                        vec3 _3274 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3263)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3263 + 2u)).x));
                        float _3278 = _3238.x - _1941;
                        float _3279 = _3238.y - _1942;
                        float _3280 = _3238.z - _1943;
                        float _3281 = dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280));
                        float _3284 = inversesqrt(_3281);
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3288 = dot(vec3(_829, _832, _835), vec3(_3285, _3286, _3287));
                        float _3293 = 1.0 - (_3281 * _3238.w);
                        float _4655 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3294 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3295 = sqrt(_3281) * _3257.w;
                        float _3298 = 1.39999997615814208984375 / (_3295 + 1.39999997615814208984375);
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3288) + _3299;
                        float _3305 = _3295 * _3295;
                        float _3309 = ((isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0))) * _3294) / ((_3305 * 0.699999988079071044921875) + 1.0);
                        float _3313 = (-0.0) - _1941;
                        float _3314 = (-0.0) - _1942;
                        float _3315 = (-0.0) - _1943;
                        float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                        float _3320 = _3319 * _3313;
                        float _3321 = _3319 * _3314;
                        float _3322 = _3319 * _3315;
                        float _3329 = exp2(log2(1.0 / ((_3305 * 3.5) + 5.0)) * 0.25);
                        float _3330 = 1.0 - _889;
                        float _3337 = sqrt(1.0 - ((1.0 - (_3330 * _3330)) * (1.0 - (_3329 * _3329))));
                        float _3338 = _3337 * _3337;
                        float _3339 = _3338 * _3338;
                        float _3340 = _3320 + _3285;
                        float _3341 = _3321 + _3286;
                        float _3342 = _3322 + _3287;
                        float _3346 = inversesqrt(dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342)));
                        float _3350 = dot(vec3(_829, _832, _835), vec3(_3320, _3321, _3322));
                        float _4671 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                        float _3353 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3354 = dot(vec3(_829, _832, _835), vec3(_3346 * _3340, _3346 * _3341, _3346 * _3342));
                        float _4682 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3357 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                        float _3361 = ((_3357 * _3357) * (_3339 + (-1.0))) + 1.0;
                        float _3362 = _3298 * _3338;
                        float _3363 = _3362 * _3362;
                        float _3366 = ((1.0 - _3363) * _3288) + _3363;
                        float _4693 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                        float _3368 = 1.0 - _3338;
                        float _3378 = (0.5 / (((_3367 * ((_3353 * _3368) + _3338)) + 9.9999999392252902907785028219223e-09) + (((_3367 * _3368) + _3338) * _3353))) * _3367;
                        float _4704 = isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0));
                        float _3389 = (((_3339 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3361 * _3361) * ((_3305 * 2.1991131305694580078125) + 3.141590118408203125))) * _3294;
                        _3147 = (_3309 * _3257.x) + _3215;
                        _3148 = (_3309 * _3257.y) + _3216;
                        _3149 = (_3309 * _3257.z) + _3217;
                        _3144 = (_3389 * _3274.x) + _3212;
                        _3145 = (_3389 * _3274.y) + _3213;
                        _3146 = (_3389 * _3274.z) + _3214;
                        if (_3219 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3212 = _3144;
                            _3213 = _3145;
                            _3214 = _3146;
                            _3215 = _3147;
                            _3216 = _3148;
                            _3217 = _3149;
                            _3218 = _3219;
                        }
                    }
                    frontier_phi_66_pred = _3149;
                    frontier_phi_66_pred_1 = _3148;
                    frontier_phi_66_pred_2 = _3147;
                    frontier_phi_66_pred_3 = _3146;
                    frontier_phi_66_pred_4 = _3145;
                    frontier_phi_66_pred_5 = _3144;
                }
                _2954 = frontier_phi_66_pred;
                _2952 = frontier_phi_66_pred_1;
                _2950 = frontier_phi_66_pred_2;
                _2948 = frontier_phi_66_pred_3;
                _2946 = frontier_phi_66_pred_4;
                _2944 = frontier_phi_66_pred_5;
                uint _3095 = _3094 + 1u;
                if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3088 = _2944;
                    _3089 = _2946;
                    _3090 = _2948;
                    _3091 = _2950;
                    _3092 = _2952;
                    _3093 = _2954;
                    _3094 = _3095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        if (((4294967295u << _2960) & _2863) == 0u)
        {
            _3056 = _2943;
            _3058 = _2945;
            _3060 = _2947;
            _3062 = _2949;
            _3064 = _2951;
            _3066 = _2953;
        }
        else
        {
            float _3081 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
            float _3082 = _3081 * _1941;
            float _3083 = _3081 * _1942;
            float _3084 = _3081 * _1943;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3057;
                float _3059;
                float _3061;
                float _3063;
                float _3065;
                float _3067;
                float _3195 = _2943;
                float _3196 = _2945;
                float _3197 = _2947;
                float _3198 = _2949;
                float _3199 = _2951;
                float _3200 = _2953;
                uint _3201 = _2960;
                uint _3210;
                bool _3211;
                for (;;)
                {
                    _3210 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                    _3211 = _3210 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3211)
                    {
                        frontier_phi_72_pred = _3200;
                        frontier_phi_72_pred_1 = _3199;
                        frontier_phi_72_pred_2 = _3198;
                        frontier_phi_72_pred_3 = _3197;
                        frontier_phi_72_pred_4 = _3196;
                        frontier_phi_72_pred_5 = _3195;
                    }
                    else
                    {
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3407 = _3195;
                        float _3408 = _3196;
                        float _3409 = _3197;
                        float _3410 = _3198;
                        float _3411 = _3199;
                        float _3412 = _3200;
                        uint _3413 = _3210;
                        uint _3414;
                        vec4 _3439;
                        float _3440;
                        vec4 _3455;
                        vec3 _3467;
                        vec4 _3482;
                        vec4 _3497;
                        float _3543;
                        bool _3544;
                        for (;;)
                        {
                            uint _3424 = ((_3201 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3413));
                            _3414 = (_3413 + 4294967295u) & _3413;
                            uint _3426 = _3424 * 40u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3440 = _3439.w;
                            uint _3442 = (_3424 * 40u) + 4u;
                            _3455 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 3u)).x));
                            uint _3457 = (_3424 * 40u) + 8u;
                            _3467 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x));
                            uint _3469 = (_3424 * 40u) + 16u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3424 * 40u) + 20u;
                            _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3499 = (_3424 * 40u) + 24u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3518 = (_3424 * 40u) + 28u;
                            vec4 _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            _3543 = fma(_1943, _3531.z, fma(_1942, _3531.y, _3531.x * _1941)) + _3531.w;
                            _3544 = !((fma(_1943, _3512.z, fma(_1942, _3512.y, _3512.x * _1941)) + _3512.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3544)
                            {
                                float _3571 = _3439.x - _1941;
                                float _3572 = _3439.y - _1942;
                                float _3573 = _3439.z - _1943;
                                float _3574 = dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573));
                                float _3577 = inversesqrt(_3574);
                                float _3578 = _3577 * _3571;
                                float _3579 = _3577 * _3572;
                                float _3580 = _3577 * _3573;
                                float _3584 = 1.0 - (_3574 / (_3440 * _3440));
                                float _4715 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3589 = sqrt(_3574) * _3455.w;
                                float _3591 = 1.39999997615814208984375 / (_3589 + 1.39999997615814208984375);
                                float _3592 = _3591 * _3591;
                                float _3595 = ((1.0 - _3592) * dot(vec3(_3578, _3579, _3580), vec3(_829, _832, _835))) + _3592;
                                float _3598 = _3589 * _3589;
                                float _3602 = (fma(_1943, _3482.z, fma(_1942, _3482.y, _3482.x * _1941)) + _3482.w) / _3543;
                                float _3603 = (fma(_1943, _3497.z, fma(_1942, _3497.y, _3497.x * _1941)) + _3497.w) / _3543;
                                float _3607 = 1.0 - dot(vec2(_3602, _3603), vec2(_3602, _3603));
                                float _4731 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3609 = _3608 * (((isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0))) * _3585) / ((_3598 * 0.699999988079071044921875) + 1.0));
                                float _3621 = exp2(log2(1.0 / ((_3598 * 3.5) + 5.0)) * 0.25);
                                float _3622 = 1.0 - _889;
                                float _3629 = sqrt(1.0 - ((1.0 - (_3622 * _3622)) * (1.0 - (_3621 * _3621))));
                                float _3630 = _3629 * _3629;
                                float _3631 = _3630 * _3630;
                                float _3632 = _3578 - _3082;
                                float _3633 = _3579 - _3083;
                                float _3634 = _3580 - _3084;
                                float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                                float _3642 = dot(vec3(_829, _832, _835), vec3((-0.0) - _3082, (-0.0) - _3083, (-0.0) - _3084));
                                float _4742 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
                                float _3646 = dot(vec3(_829, _832, _835), vec3(_3638 * _3632, _3638 * _3633, _3638 * _3634));
                                float _4753 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3649 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                                float _3653 = ((_3649 * _3649) * (_3631 + (-1.0))) + 1.0;
                                float _3654 = _3591 * _3630;
                                float _3655 = _3654 * _3654;
                                float _3661 = ((1.0 - _3655) * dot(vec3(_829, _832, _835), vec3(_3578, _3579, _3580))) + _3655;
                                float _4764 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                                float _3663 = 1.0 - _3630;
                                float _3673 = (0.5 / (((_3662 * ((_3645 * _3663) + _3630)) + 9.9999999392252902907785028219223e-09) + (((_3662 * _3663) + _3630) * _3645))) * _3662;
                                float _4775 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3683 = (_3608 * _3585) * (((_3631 * 3.1415927410125732421875) * (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) / ((_3653 * _3653) * ((_3598 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3609 * _3455.y;
                                frontier_phi_78_pred_1 = _3609 * _3455.x;
                                frontier_phi_78_pred_2 = _3683 * _3467.z;
                                frontier_phi_78_pred_3 = _3683 * _3467.y;
                                frontier_phi_78_pred_4 = _3683 * _3467.x;
                                frontier_phi_78_pred_5 = _3609 * _3455.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_78_pred;
                            _3690 = frontier_phi_78_pred_1;
                            _3689 = frontier_phi_78_pred_2;
                            _3688 = frontier_phi_78_pred_3;
                            _3687 = frontier_phi_78_pred_4;
                            _3692 = frontier_phi_78_pred_5;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3399 = _3692 + _3412;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3396 = _3689 + _3409;
                            if (_3414 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3399;
                                _3413 = _3414;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3399;
                        frontier_phi_72_pred_1 = _3398;
                        frontier_phi_72_pred_2 = _3397;
                        frontier_phi_72_pred_3 = _3396;
                        frontier_phi_72_pred_4 = _3395;
                        frontier_phi_72_pred_5 = _3394;
                    }
                    _3067 = frontier_phi_72_pred;
                    _3065 = frontier_phi_72_pred_1;
                    _3063 = frontier_phi_72_pred_2;
                    _3061 = frontier_phi_72_pred_3;
                    _3059 = frontier_phi_72_pred_4;
                    _3057 = frontier_phi_72_pred_5;
                    uint _3202 = _3201 + 1u;
                    if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3195 = _3057;
                        _3196 = _3059;
                        _3197 = _3061;
                        _3198 = _3063;
                        _3199 = _3065;
                        _3200 = _3067;
                        _3201 = _3202;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3067;
                frontier_phi_60_61_ladder_1 = _3065;
                frontier_phi_60_61_ladder_2 = _3061;
                frontier_phi_60_61_ladder_3 = _3059;
                frontier_phi_60_61_ladder_4 = _3057;
                frontier_phi_60_61_ladder_5 = _3063;
            }
            else
            {
                frontier_phi_60_61_ladder = _2953;
                frontier_phi_60_61_ladder_1 = _2951;
                frontier_phi_60_61_ladder_2 = _2947;
                frontier_phi_60_61_ladder_3 = _2945;
                frontier_phi_60_61_ladder_4 = _2943;
                frontier_phi_60_61_ladder_5 = _2949;
            }
            _3056 = frontier_phi_60_61_ladder_4;
            _3058 = frontier_phi_60_61_ladder_3;
            _3060 = frontier_phi_60_61_ladder_2;
            _3062 = frontier_phi_60_61_ladder_5;
            _3064 = frontier_phi_60_61_ladder_1;
            _3066 = frontier_phi_60_61_ladder;
        }
        float _3071 = isnan(1.0) ? _873 : (isnan(_873) ? 1.0 : min(_873, 1.0));
        _2876 = (_3071 * _3062) + _2407;
        _2878 = (_3071 * _3064) + _2409;
        _2880 = (_3071 * _3066) + _2411;
        _2882 = ((_3056 * 0.039999999105930328369140625) * _3071) + _2730;
        _2884 = ((_3058 * 0.039999999105930328369140625) * _3071) + _2732;
        _2886 = ((_3060 * 0.039999999105930328369140625) * _3071) + _2734;
    }
    else
    {
        _2876 = _2407;
        _2878 = _2409;
        _2880 = _2411;
        _2882 = _2730;
        _2884 = _2732;
        _2886 = _2734;
    }
    float _4791 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4802 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4813 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    uint _2906 = _246 + 6u;
    float _2914 = _810 / cbSceneParam._m0[86u].x;
    float _2915 = _811 / cbSceneParam._m0[86u].y;
    vec4 _2929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, (log2((isnan(cbSceneParam._m0[77u].w) ? _743 : (isnan(_743) ? cbSceneParam._m0[77u].w : min(_743, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2931 = _2929.x;
    float _2932 = _2929.y;
    float _2933 = _2929.z;
    float _2934 = _2929.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_743 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_743) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _743 : min(cbSceneParam._m0[80u].w, _743));
        float _2969 = _2968 / _743;
        float _2980 = _2969 * _795;
        float _2981 = _796 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2984 = _2969 * _797;
        float _2986 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2981;
        float _2994 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3157;
        if (abs((_2982 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3157 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3117 = 1.0 / cbSceneParam._m0[80u].x;
            float _3118 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3119 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3128 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : min(_3118, 0.0));
            float _3129 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : min(_3119, 0.0));
            _3157 = ((abs(_2994 / _2982) * cbSceneParam._m0[80u].y) * ((((_3128 - _3129) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))))) * _3117)) - ((exp2(_3004 * _3128) - exp2(_3004 * _3129)) * _3117))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3159 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, 1.0), 0.0);
        float _3168 = exp2((_3157 * (-1.44269502162933349609375)) * (1.0 - _3159.w));
        float _3169 = log2(_3168);
        float _3185 = log2(_2934);
        _3006 = (exp2(_3185 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].x)) * _3159.x) / cbSceneParam._m0[78u].x)) + _2931;
        _3008 = (exp2(_3185 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].y)) * _3159.y) / cbSceneParam._m0[78u].y)) + _2932;
        _3010 = (exp2(_3185 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3169 * cbSceneParam._m0[78u].z)) * _3159.z) / cbSceneParam._m0[78u].z)) + _2933;
        _3012 = _3168 * _2934;
    }
    else
    {
        _3006 = _2931;
        _3008 = _2932;
        _3010 = _2933;
        _3012 = _2934;
    }
    float _3024 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3025 = _3024 == 3.0;
    float _3026 = log2(_3012);
    float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2876 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _873))) + ((_2882 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2878 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _873))) + ((_2884 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2880 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _873))) + ((_2886 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1677)) * cbPerFrame._m0[3u].x));
    float _3044 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3044 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
    SV_Target.y = _3044 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
    SV_Target.z = _3044 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
    SV_Target.w = cbInstanceData._m0[_2906].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2906].w;
}


