#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1257;
float _3642;
float _3643;
float _3644;
float _3645;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _367 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _384 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_357 - _367) * cbMtdParam._m0[24u].x) + _367) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3654 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _392 = (_385 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _393 = (_385 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _394 = (_385 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _268) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _269) + cbTextureTilingScale._m0[3u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _443 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _457 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_433 - _443) * cbMtdParam._m0[24u].x) + _443) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3665 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _458 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _465 = (_458 * ((_411.x * cbMtdParam._m0[13u].x) - _392)) + _392;
    float _466 = (_458 * ((_411.y * cbMtdParam._m0[13u].y) - _393)) + _393;
    float _467 = (_458 * ((_411.z * cbMtdParam._m0[13u].z) - _394)) + _394;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _499 = _497.x;
    float _500 = _497.y;
    float _501 = _497.z;
    float _508 = ((_480.x - _499) * _385) + _499;
    float _509 = ((_480.y - _500) * _385) + _500;
    float _510 = ((_480.z - _501) * _385) + _501;
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _268) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _535 = ((_522.z - _510) * _458) + _510;
    float _538 = ((((_522.x - _508) * _458) + _508) * 2.0) + (-1.0);
    float _540 = ((((_522.y - _509) * _458) + _509) * 2.0) + (-1.0);
    float _541 = dot(vec2(_538, _540), vec2(_538, _540));
    float _3676 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _546 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _572 = (((_560.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _538;
    float _573 = (((_560.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _540;
    vec4 _585 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _587 = _585.x;
    float _588 = 1.0 - _587;
    float _616 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_587 - _588) * cbMtdParam._m0[24u].w) + _588) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3687 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _617 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _625 = ((((cbMtdParam._m0[10u].x - _465) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _617) + _465;
    float _626 = ((((cbMtdParam._m0[10u].y - _466) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _617) + _466;
    float _627 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _467)) * _617) + _467;
    float _631 = (cbMtdParam._m0[19u].w * (_560.z - _535)) + _535;
    float _635 = ((cbMtdParam._m0[23u].y - _631) * _617) + _631;
    vec4 _654 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _660 = (_654.x * 2.0) + (-1.0);
    float _661 = (_654.y * 2.0) + (-1.0);
    float _662 = dot(vec2(_660, _661), vec2(_660, _661));
    float _3698 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _678 = (_617 * (((cbMtdParam._m0[22u].z * _572) - _572) + _660)) + _572;
    float _679 = (_617 * (((cbMtdParam._m0[22u].z * _573) - _573) + _661)) + _573;
    float _680 = (_617 * (sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _546)) + _546;
    float _682 = cbMtdParam._m0[22u].x + _560.w;
    float _685 = fma(_680, _236 * NORMAL.x, fma(_679, _243 * TANGENT.x, (_229 * _221) * _678));
    float _688 = fma(_680, _236 * NORMAL.y, fma(_679, _243 * TANGENT.y, (_229 * _222) * _678));
    float _691 = fma(_680, _236 * NORMAL.z, fma(_679, _243 * TANGENT.z, (_229 * _223) * _678));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _3709 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _699 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3731 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3742 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3753 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _717 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    vec4 _782 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _784 = _782.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _938 = sqrt(((_768 * _768) + (_769 * _769)) + (_770 * _770));
        float _944 = (cbMatDynParam._m0[5u].x * _938) + cbMatDynParam._m0[5u].y;
        float _3764 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _949 = (cbMatDynParam._m0[5u].z * _938) + cbMatDynParam._m0[5u].w;
        float _3775 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) - _945)) + _945) < ((_784 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _814 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _817 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _820 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _833 = _249 + 9u;
    uint _834 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3786 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    vec4 _854 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _858 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * TEXCOORD_5.w) * _854.x;
    float _859 = dot(vec3(_696, _697, _698), vec3(_775, _776, _777));
    float _862 = _859 * 2.0;
    float _866 = (_862 * _696) - _775;
    float _867 = (_862 * _697) - _776;
    float _868 = (_862 * _698) - _777;
    float _872 = abs(dot(vec3(_775, _776, _777), vec3(_696, _697, _698)));
    float _3819 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _874 = sqrt(_699);
    float _887 = exp2((_874 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_874 * 3.0));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_927, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919));
        float _985 = fma(_927, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919));
        float _989 = fma(_927, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919));
        float _1014 = _919 + _696;
        float _1015 = _923 + _697;
        float _1016 = _927 + _698;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _981;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _985;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _989;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_696, _697, _698), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3867 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_696, _697, _698), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3900 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_696, _697, _698), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3933 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1298 = fma(_927, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919));
        float _1302 = fma(_927, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919));
        float _1306 = fma(_927, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919));
        float _1329 = _919 + _696;
        float _1330 = _923 + _697;
        float _1331 = _927 + _698;
        float _1341 = fma(_1331, cbModelParam._m0[30u].z, fma(_1330, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1329)) - _1298;
        float _1342 = fma(_1331, cbModelParam._m0[31u].z, fma(_1330, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1329)) - _1302;
        float _1343 = fma(_1331, cbModelParam._m0[32u].z, fma(_1330, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1329)) - _1306;
        float _1347 = inversesqrt(dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343)));
        float _1360 = ((_1347 * _1341) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1298 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1347 * _1342) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1302 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1347 * _1343) / cbModelParam._m0[35u].z) + ((((((_1306 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1360, _1361, _1362), 0.0);
        float _1397 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1364.x + (-0.5));
        float _1399 = _1397 * (_1364.y + (-0.5));
        float _1400 = _1397 * (_1364.z + (-0.5));
        float _1407 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1371.x + (-0.5));
        float _1409 = _1407 * (_1371.y + (-0.5));
        float _1410 = _1407 * (_1371.z + (-0.5));
        float _1417 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1378.x + (-0.5));
        float _1419 = _1417 * (_1378.y + (-0.5));
        float _1420 = _1417 * (_1378.z + (-0.5));
        float _1427 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1385.x + (-0.5));
        float _1429 = _1427 * (_1385.y + (-0.5));
        float _1430 = _1427 * (_1385.z + (-0.5));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = _1398 * 0.5;
        float _1435 = _1408 * 0.5;
        float _1436 = _1418 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_696, _697, _698), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3996 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1461 + 1.0))) + _1466) * _1431;
        float _1476 = _1399 * 0.5;
        float _1477 = _1409 * 0.5;
        float _1478 = _1419 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_696, _697, _698), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4029 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1503 + 1.0))) + _1508) * _1432;
        float _1518 = _1400 * 0.5;
        float _1519 = _1410 * 0.5;
        float _1520 = _1420 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_696, _697, _698), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4062 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1545 + 1.0))) + _1550) * _1433;
        _1567 = _1400;
        _1568 = _1399;
        _1569 = _1398;
        _1570 = _1410;
        _1571 = _1409;
        _1572 = _1408;
        _1573 = _1420;
        _1574 = _1419;
        _1575 = _1418;
        _1576 = _1433;
        _1577 = _1432;
        _1578 = _1431;
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
    }
    else
    {
        _1567 = _1257;
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = _1257;
        _1579 = 0.0;
        _1580 = 0.0;
        _1581 = 0.0;
    }
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1269)) + _1269;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1270)) + _1270;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1271)) + _1271;
    float _1614 = fma(_1593, cbSceneParam._m0[89u].z, fma(_1592, cbSceneParam._m0[89u].y, _1591 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1593, cbSceneParam._m0[90u].z, fma(_1592, cbSceneParam._m0[90u].y, _1591 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1593, cbSceneParam._m0[91u].z, fma(_1592, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1591));
    float _1635 = _866 * 0.5;
    float _1636 = _867 * 0.5;
    float _1637 = _868 * 0.5;
    float _1638 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1641 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1644 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1678;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1651 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1655 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1659 = dot(vec4(_1635, _1636, _1637, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1666 = dot(vec4(cbModelParam._m0[39u]), vec4(_1635, _1636, _1637, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1689;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1680 = dot(vec4(cbModelParam._m0[40u]), vec4(_1635, _1636, _1637, 1.0));
        _1689 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1689 = 1.0;
    }
    float _1693 = (_1689 * cbModelParam._m0[1u].x) + (_1678 * (1.0 - cbModelParam._m0[1u].x));
    float _1703 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1703 : min(cbModelParam._m0[25u].z, _1703));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_927, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_927, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_927, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_868, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866));
        float _1767 = fma(_868, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866));
        float _1770 = fma(_868, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1798 = frontier_phi_17_15_ladder;
        }
        float _2021;
        if (_1767 > 0.0)
        {
            _2021 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2021 = frontier_phi_26_22_ladder;
        }
        float _2267;
        if (_1770 > 0.0)
        {
            _2267 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2267 = frontier_phi_38_33_ladder;
        }
        float _2269 = isnan(_2021) ? _1798 : (isnan(_1798) ? _2021 : min(_1798, _2021));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1764) + _1753;
        float _2275 = (_2270 * _1767) + _1757;
        float _2276 = (_2270 * _1770) + _1761;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2277;
        float _2281 = _2277 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 > _2281) || ((_2275 < _2279) || ((_2274 < _2279) || (_2274 > _2281))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2276, cbModelParam._m0[9u].z, fma(_2275, cbModelParam._m0[9u].y, _2274 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2276, cbModelParam._m0[10u].z, fma(_2275, cbModelParam._m0[10u].y, _2274 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2276, cbModelParam._m0[11u].z, fma(_2275, cbModelParam._m0[11u].y, _2274 * cbModelParam._m0[11u].x))), _1704);
            frontier_phi_16_38_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_16_38_ladder_2;
        _1788 = frontier_phi_16_38_ladder_1;
        _1790 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_866, _867, _868), _1704);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1850 = fma(_927, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919)) + cbModelParam._m0[21u].w;
        float _1854 = fma(_927, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919)) + cbModelParam._m0[22u].w;
        float _1858 = fma(_927, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919)) + cbModelParam._m0[23u].w;
        float _1861 = fma(_868, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866));
        float _1864 = fma(_868, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866));
        float _1867 = fma(_868, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866));
        float _2026;
        if (_1861 > 0.0)
        {
            _2026 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2026 = frontier_phi_28_24_ladder;
        }
        float _2294;
        if (_1864 > 0.0)
        {
            _2294 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2294 = frontier_phi_40_35_ladder;
        }
        float _2499;
        if (_1867 > 0.0)
        {
            _2499 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2499 = frontier_phi_49_46_ladder;
        }
        float _2501 = isnan(_2294) ? _2026 : (isnan(_2026) ? _2294 : min(_2026, _2294));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1861) + _1850;
        float _2507 = (_2502 * _1864) + _1854;
        float _2508 = (_2502 * _1867) + _1858;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2510 = (-1.0) - _2509;
        float _2512 = _2509 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2508 > _2512) || ((_2508 < _2510) || ((_2507 > _2512) || ((_2507 < _2510) || ((_2506 < _2510) || (_2506 > _2512))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2508, cbModelParam._m0[17u].z, fma(_2507, cbModelParam._m0[17u].y, _2506 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2508, cbModelParam._m0[18u].z, fma(_2507, cbModelParam._m0[18u].y, _2506 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2508, cbModelParam._m0[19u].z, fma(_2507, cbModelParam._m0[19u].y, _2506 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_25_49_ladder = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1886 = frontier_phi_25_49_ladder_2;
        _1888 = frontier_phi_25_49_ladder_1;
        _1890 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_866, _867, _868), _1795);
        _1886 = _1870.x * cbModelParam._m0[1u].z;
        _1888 = _1870.y * cbModelParam._m0[1u].z;
        _1890 = _1870.z * cbModelParam._m0[1u].z;
    }
    float _1902 = ((((1.0 - _887) * ((_874 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_887 * _874)) * _858;
    float _1903 = _1902 * ((cbModelParam._m0[1u].w * (_1886 - _1786)) + _1786);
    float _1904 = _1902 * ((cbModelParam._m0[1u].w * (_1888 - _1788)) + _1788);
    float _1905 = _1902 * ((cbModelParam._m0[1u].w * (_1890 - _1790)) + _1790);
    float _1908 = fma(_1905, cbSceneParam._m0[89u].z, fma(_1904, cbSceneParam._m0[89u].y, _1903 * cbSceneParam._m0[89u].x));
    float _1911 = fma(_1905, cbSceneParam._m0[90u].z, fma(_1904, cbSceneParam._m0[90u].y, _1903 * cbSceneParam._m0[90u].x));
    float _1914 = fma(_1905, cbSceneParam._m0[91u].z, fma(_1904, cbSceneParam._m0[91u].y, _1903 * cbSceneParam._m0[91u].x));
    vec4 _1922 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_795, _796));
    float _1924 = _1922.w;
    float _1936 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1924);
    float _1937 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1924);
    float _1938 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1924);
    uvec4 _1942 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1944 = _1942.x * 14u;
    uint _1945 = _1944 + 13u;
    float _1952 = _858 + (-1.0);
    float _1957 = (cbLight._m0[_1945].x * _1952) + 1.0;
    float _1958 = (cbLight._m0[_1945].y * _1952) + 1.0;
    float _1959 = (cbLight._m0[_1945].z * _1952) + 1.0;
    float _1960 = (cbLight._m0[_1945].w * _1952) + 1.0;
    uint _1961 = _1944 + 5u;
    float _1967 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1971 = _1944 + 4u;
    float _1980 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1984 = _1944 | 1u;
    float _1995 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_696, _697, _698));
    float _1998 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_696, _697, _698));
    float _4198 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _4209 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2003 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * 0.3183098733425140380859375;
    float _2005 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _2012 = ((cbLight._m0[_1961].x * _1967) * _2005) + (((cbLight._m0[_1971].x * _1936) * _1980) * _2003);
    float _2013 = ((_1967 * cbLight._m0[_1961].y) * _2005) + (((cbLight._m0[_1971].y * _1937) * _1980) * _2003);
    float _2014 = ((_1967 * cbLight._m0[_1961].z) * _2005) + (((cbLight._m0[_1971].z * _1938) * _1980) * _2003);
    uvec4 _2018 = floatBitsToUint(cbLight._m0[_1944 + 12u]);
    bool _2020 = _2018.x == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_2020)
    {
        _2031 = _2012;
        _2033 = _2013;
        _2035 = _2014;
    }
    else
    {
        uint _2039 = _1944 + 6u;
        float _2055 = (dot(vec3(cbLight._m0[_1944 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2056 = _2055 * _2055;
        float _4220 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2057 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2058 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2031 = (((cbLight._m0[_2039].x * 0.3183098733425140380859375) * _2057) * _2058) + _2012;
        _2033 = (((cbLight._m0[_2039].y * 0.3183098733425140380859375) * _2057) * _2058) + _2013;
        _2035 = (((cbLight._m0[_2039].z * 0.3183098733425140380859375) * _2057) * _2058) + _2014;
    }
    bool _2038 = _2018.y == 0u;
    float _2076;
    float _2078;
    float _2080;
    if (_2038)
    {
        _2076 = _2031;
        _2078 = _2033;
        _2080 = _2035;
    }
    else
    {
        uint _2238 = _1944 + 7u;
        float _2254 = (dot(vec3(cbLight._m0[_1944 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4236 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2257 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2076 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2031;
        _2078 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2033;
        _2080 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2035;
    }
    uint _2083 = _1944 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _699) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_1944].x + _775;
    float _2099 = cbLight._m0[_1944].y + _776;
    float _2100 = cbLight._m0[_1944].z + _777;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1944].xyz));
    float _4252 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _4263 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2112 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _2113 = dot(vec3(_696, _697, _698), vec3(_2105, _2106, _2107));
    float _4274 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2105, _2106, _2107));
    float _4285 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2136 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2137 = 1.0 - _2097;
    float _2148 = (0.5 / (((_2112 * ((_2111 * _2137) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2137) + _2097) * _2111))) * _2111;
    float _4296 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2150 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2164 = _1944 + 9u;
    float _2175 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _699) * 0.949999988079071044921875);
    float _2176 = _2175 * _2175;
    float _2177 = cbLight._m0[_1984].x + _775;
    float _2178 = cbLight._m0[_1984].y + _776;
    float _2179 = cbLight._m0[_1984].z + _777;
    float _2183 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
    float _2184 = _2183 * _2177;
    float _2185 = _2183 * _2178;
    float _2186 = _2183 * _2179;
    float _2187 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1984].xyz));
    float _4307 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2191 = dot(vec3(_696, _697, _698), vec3(_2184, _2185, _2186));
    float _4318 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2184, _2185, _2186));
    float _4329 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2176 * _2176;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2212 = (exp2(log2(1.0 - (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2213 = 1.0 - _2176;
    float _2223 = (0.5 / (((_2112 * ((_2190 * _2213) + _2176)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2213) + _2176) * _2190))) * _2190;
    float _4340 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    float _2235 = (((_2212 * cbLight._m0[_2164].x) * _2225) * _1967) + ((((cbLight._m0[_2083].x * _1936) * _2136) * _2150) * _1980);
    float _2236 = (((_2212 * cbLight._m0[_2164].y) * _2225) * _1967) + ((((cbLight._m0[_2083].y * _1937) * _2136) * _2150) * _1980);
    float _2237 = (((_2212 * cbLight._m0[_2164].z) * _2225) * _1967) + ((((cbLight._m0[_2083].z * _1938) * _2136) * _2150) * _1980);
    float _2299;
    float _2301;
    float _2303;
    if (_2020)
    {
        _2299 = _2235;
        _2301 = _2236;
        _2303 = _2237;
    }
    else
    {
        uint _2305 = _1944 + 2u;
        uint _2309 = _1944 + 10u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _699) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _775;
        float _2326 = cbLight._m0[_2305].y + _776;
        float _2327 = cbLight._m0[_2305].z + _777;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2305].xyz));
        float _4351 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2339 = dot(vec3(_696, _697, _698), vec3(_2332, _2333, _2334));
        float _4362 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4373 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2361 = 1.0 - _2324;
        float _2371 = (0.5 / (((_2112 * ((_2338 * _2361) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2361) + _2324) * _2338))) * _2338;
        float _4384 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2373 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2374 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2299 = (((_2360 * cbLight._m0[_2309].x) * _2373) * _2374) + _2235;
        _2301 = (((_2360 * cbLight._m0[_2309].y) * _2373) * _2374) + _2236;
        _2303 = (((_2360 * cbLight._m0[_2309].z) * _2373) * _2374) + _2237;
    }
    float _2409;
    float _2411;
    float _2413;
    if (_2038)
    {
        _2409 = _2299;
        _2411 = _2301;
        _2413 = _2303;
    }
    else
    {
        uint _2420 = _1944 + 3u;
        uint _2424 = _1944 + 11u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _699) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _775;
        float _2441 = cbLight._m0[_2420].y + _776;
        float _2442 = cbLight._m0[_2420].z + _777;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2420].xyz));
        float _4400 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2454 = dot(vec3(_696, _697, _698), vec3(_2447, _2448, _2449));
        float _4411 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4422 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2476 = 1.0 - _2439;
        float _2486 = (0.5 / (((_2112 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2476) + _2439) * _2453))) * _2453;
        float _4433 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2409 = (((_2475 * cbLight._m0[_2424].x) * _2488) * _2489) + _2299;
        _2411 = (((_2475 * cbLight._m0[_2424].y) * _2488) * _2489) + _2301;
        _2413 = (((_2475 * cbLight._m0[_2424].z) * _2488) * _2489) + _2303;
    }
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    if (_1942.y == 0u)
    {
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2564;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2564;
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2564;
        uvec4 _2579 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2580 = _2579.x;
        uint _2591 = uint((float(_2579.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _2580))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _2580)));
        float _2601 = (log2(_2567 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2602 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        uint _2605 = uint(isnan(14.0) ? _2602 : (isnan(_2602) ? 14.0 : min(_2602, 14.0)));
        uvec4 _2610 = texelFetch(g_lightClusterGridBuffer, int(((_2605 << 2u) + (_2591 << 6u)) >> 2u));
        uint _2611 = _2610.x;
        uint _2612 = _2579.z;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((((1u << ((_2612 >> 4u) & 15u)) + 4294967295u) & _2611) == 0u) || ((_2612 & 240u) == 0u))
        {
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
        }
        else
        {
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            uint _2871 = 0u;
            uint _2880;
            bool _2881;
            for (;;)
            {
                _2880 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                _2881 = _2880 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2881)
                {
                    frontier_phi_66_pred = _2865;
                    frontier_phi_66_pred_1 = _2870;
                    frontier_phi_66_pred_2 = _2869;
                    frontier_phi_66_pred_3 = _2868;
                    frontier_phi_66_pred_4 = _2867;
                    frontier_phi_66_pred_5 = _2866;
                }
                else
                {
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    uint _3016;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2880;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    for (;;)
                    {
                        uint _3020 = uint(findLSB(_3016)) + (_2871 << 5u);
                        uint _3017 = (_3016 + 4294967295u) & _3016;
                        uint _3022 = _3020 * 48u;
                        vec4 _3036 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3042 = (_3020 * 48u) + 4u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3042)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3042 + 3u)).x));
                        uint _3061 = (_3020 * 48u) + 8u;
                        vec3 _3072 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x));
                        float _3076 = _3036.x - _2565;
                        float _3077 = _3036.y - _2566;
                        float _3078 = _3036.z - _2567;
                        float _3079 = dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078));
                        float _3082 = inversesqrt(_3079);
                        float _3083 = _3082 * _3076;
                        float _3084 = _3082 * _3077;
                        float _3085 = _3082 * _3078;
                        float _3086 = dot(vec3(_814, _817, _820), vec3(_3083, _3084, _3085));
                        float _3091 = 1.0 - (_3079 * _3036.w);
                        float _4459 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3093 = sqrt(_3079) * _3055.w;
                        float _3096 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                        float _3097 = _3096 * _3096;
                        float _3100 = ((1.0 - _3097) * _3086) + _3097;
                        float _3103 = _3093 * _3093;
                        float _3107 = ((isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0))) * _3092) / ((_3103 * 0.699999988079071044921875) + 1.0);
                        float _3111 = (-0.0) - _2565;
                        float _3112 = (-0.0) - _2566;
                        float _3113 = (-0.0) - _2567;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3128 = exp2(log2(1.0 / ((_3103 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _874;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3141 = _3120 + _3085;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_814, _817, _820), vec3(_3118, _3119, _3120));
                        float _4475 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3153 = dot(vec3(_814, _817, _820), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4486 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3096 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3086) + _3162;
                        float _4497 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4508 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3160 * _3160) * ((_3103 * 2.1991131305694580078125) + 3.141590118408203125))) * _3092;
                        _2940 = (_3107 * _3055.x) + _3013;
                        _2941 = (_3107 * _3055.y) + _3014;
                        _2942 = (_3107 * _3055.z) + _3015;
                        _2937 = (_3188 * _3072.x) + _3010;
                        _2938 = (_3188 * _3072.y) + _3011;
                        _2939 = (_3188 * _3072.z) + _3012;
                        if (_3017 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _3017;
                        }
                    }
                    frontier_phi_66_pred = _2937;
                    frontier_phi_66_pred_1 = _2942;
                    frontier_phi_66_pred_2 = _2941;
                    frontier_phi_66_pred_3 = _2940;
                    frontier_phi_66_pred_4 = _2939;
                    frontier_phi_66_pred_5 = _2938;
                }
                _2713 = frontier_phi_66_pred;
                _2723 = frontier_phi_66_pred_1;
                _2721 = frontier_phi_66_pred_2;
                _2719 = frontier_phi_66_pred_3;
                _2717 = frontier_phi_66_pred_4;
                _2715 = frontier_phi_66_pred_5;
                uint _2872 = _2871 + 1u;
                if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2865 = _2713;
                    _2866 = _2715;
                    _2867 = _2717;
                    _2868 = _2719;
                    _2869 = _2721;
                    _2870 = _2723;
                    _2871 = _2872;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
        }
        uvec4 _2726 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2727 = _2726.z;
        uint _2729 = (_2727 >> 8u) & 15u;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((4294967295u << _2729) & _2611) == 0u)
        {
            _2833 = _2712;
            _2835 = _2714;
            _2837 = _2716;
            _2839 = _2718;
            _2841 = _2720;
            _2843 = _2722;
        }
        else
        {
            float _2858 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
            float _2859 = _2858 * _2565;
            float _2860 = _2858 * _2566;
            float _2861 = _2858 * _2567;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2729 < ((_2727 >> 12u) & 15u))
            {
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2993 = _2712;
                float _2994 = _2714;
                float _2995 = _2716;
                float _2996 = _2718;
                float _2997 = _2720;
                float _2998 = _2722;
                uint _2999 = _2729;
                uint _3008;
                bool _3009;
                for (;;)
                {
                    _3008 = texelFetch(g_lightClassification, int((((_2605 << 5u) + (_2591 << 9u)) + (_2999 << 2u)) >> 2u)).x;
                    _3009 = _3008 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3009)
                    {
                        frontier_phi_77_pred = _2998;
                        frontier_phi_77_pred_1 = _2997;
                        frontier_phi_77_pred_2 = _2996;
                        frontier_phi_77_pred_3 = _2995;
                        frontier_phi_77_pred_4 = _2994;
                        frontier_phi_77_pred_5 = _2993;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        float _3220 = _2998;
                        uint _3221 = _3008;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3290;
                        vec4 _3305;
                        float _3351;
                        bool _3352;
                        for (;;)
                        {
                            uint _3232 = ((_2999 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3277 = (_3232 * 40u) + 16u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            uint _3292 = (_3232 * 40u) + 20u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            uint _3307 = (_3232 * 40u) + 24u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3326 = (_3232 * 40u) + 28u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3351 = fma(_2567, _3339.z, fma(_2566, _3339.y, _3339.x * _2565)) + _3339.w;
                            _3352 = !((fma(_2567, _3320.z, fma(_2566, _3320.y, _3320.x * _2565)) + _3320.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3352)
                            {
                                float _3379 = _3247.x - _2565;
                                float _3380 = _3247.y - _2566;
                                float _3381 = _3247.z - _2567;
                                float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                                float _3385 = inversesqrt(_3382);
                                float _3386 = _3385 * _3379;
                                float _3387 = _3385 * _3380;
                                float _3388 = _3385 * _3381;
                                float _3392 = 1.0 - (_3382 / (_3248 * _3248));
                                float _4519 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3397 = sqrt(_3382) * _3263.w;
                                float _3399 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                                float _3400 = _3399 * _3399;
                                float _3403 = ((1.0 - _3400) * dot(vec3(_3386, _3387, _3388), vec3(_814, _817, _820))) + _3400;
                                float _3406 = _3397 * _3397;
                                float _3410 = (fma(_2567, _3290.z, fma(_2566, _3290.y, _3290.x * _2565)) + _3290.w) / _3351;
                                float _3411 = (fma(_2567, _3305.z, fma(_2566, _3305.y, _3305.x * _2565)) + _3305.w) / _3351;
                                float _3415 = 1.0 - dot(vec2(_3410, _3411), vec2(_3410, _3411));
                                float _4535 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3417 = _3416 * (((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3393) / ((_3406 * 0.699999988079071044921875) + 1.0));
                                float _3429 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                                float _3430 = 1.0 - _874;
                                float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                                float _3438 = _3437 * _3437;
                                float _3439 = _3438 * _3438;
                                float _3440 = _3386 - _2859;
                                float _3441 = _3387 - _2860;
                                float _3442 = _3388 - _2861;
                                float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                                float _3450 = dot(vec3(_814, _817, _820), vec3((-0.0) - _2859, (-0.0) - _2860, (-0.0) - _2861));
                                float _4546 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3454 = dot(vec3(_814, _817, _820), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                                float _4557 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                                float _3462 = _3399 * _3438;
                                float _3463 = _3462 * _3462;
                                float _3469 = ((1.0 - _3463) * dot(vec3(_814, _817, _820), vec3(_3386, _3387, _3388))) + _3463;
                                float _4568 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3471 = 1.0 - _3438;
                                float _3481 = (0.5 / (((_3470 * ((_3453 * _3471) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3438) * _3453))) * _3470;
                                float _4579 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3491 = (_3416 * _3393) * (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) / ((_3461 * _3461) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3417 * _3263.y;
                                frontier_phi_83_pred_1 = _3417 * _3263.x;
                                frontier_phi_83_pred_2 = _3491 * _3275.z;
                                frontier_phi_83_pred_3 = _3491 * _3275.y;
                                frontier_phi_83_pred_4 = _3491 * _3275.x;
                                frontier_phi_83_pred_5 = _3417 * _3263.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_83_pred;
                            _3498 = frontier_phi_83_pred_1;
                            _3497 = frontier_phi_83_pred_2;
                            _3496 = frontier_phi_83_pred_3;
                            _3495 = frontier_phi_83_pred_4;
                            _3500 = frontier_phi_83_pred_5;
                            _3205 = _3498 + _3218;
                            _3206 = _3499 + _3219;
                            _3207 = _3500 + _3220;
                            _3202 = _3495 + _3215;
                            _3203 = _3496 + _3216;
                            _3204 = _3497 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3207;
                        frontier_phi_77_pred_1 = _3206;
                        frontier_phi_77_pred_2 = _3205;
                        frontier_phi_77_pred_3 = _3204;
                        frontier_phi_77_pred_4 = _3203;
                        frontier_phi_77_pred_5 = _3202;
                    }
                    _2844 = frontier_phi_77_pred;
                    _2842 = frontier_phi_77_pred_1;
                    _2840 = frontier_phi_77_pred_2;
                    _2838 = frontier_phi_77_pred_3;
                    _2836 = frontier_phi_77_pred_4;
                    _2834 = frontier_phi_77_pred_5;
                    uint _3000 = _2999 + 1u;
                    if (_3000 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2993 = _2834;
                        _2994 = _2836;
                        _2995 = _2838;
                        _2996 = _2840;
                        _2997 = _2842;
                        _2998 = _2844;
                        _2999 = _3000;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2838;
                frontier_phi_58_59_ladder_1 = _2844;
                frontier_phi_58_59_ladder_2 = _2842;
                frontier_phi_58_59_ladder_3 = _2840;
                frontier_phi_58_59_ladder_4 = _2836;
                frontier_phi_58_59_ladder_5 = _2834;
            }
            else
            {
                frontier_phi_58_59_ladder = _2716;
                frontier_phi_58_59_ladder_1 = _2722;
                frontier_phi_58_59_ladder_2 = _2720;
                frontier_phi_58_59_ladder_3 = _2718;
                frontier_phi_58_59_ladder_4 = _2714;
                frontier_phi_58_59_ladder_5 = _2712;
            }
            _2833 = frontier_phi_58_59_ladder_5;
            _2835 = frontier_phi_58_59_ladder_4;
            _2837 = frontier_phi_58_59_ladder;
            _2839 = frontier_phi_58_59_ladder_3;
            _2841 = frontier_phi_58_59_ladder_2;
            _2843 = frontier_phi_58_59_ladder_1;
        }
        float _2848 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
        _2624 = (_2848 * _2839) + _2076;
        _2626 = (_2848 * _2841) + _2078;
        _2628 = (_2848 * _2843) + _2080;
        _2630 = ((_2833 * 0.039999999105930328369140625) * _2848) + _2409;
        _2632 = ((_2835 * 0.039999999105930328369140625) * _2848) + _2411;
        _2634 = ((_2837 * 0.039999999105930328369140625) * _2848) + _2413;
    }
    else
    {
        _2624 = _2076;
        _2626 = _2078;
        _2628 = _2080;
        _2630 = _2409;
        _2632 = _2411;
        _2634 = _2413;
    }
    float _4595 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4606 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4617 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2651 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2624 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _858))) + ((_2630 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1693)) * cbPerFrame._m0[3u].x);
    float _2652 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2626 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _858))) + ((_2632 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1693)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2628 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _858))) + ((_2634 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1693)) * cbPerFrame._m0[3u].x);
    uint _2654 = _249 + 6u;
    float _2662 = _795 / cbSceneParam._m0[86u].x;
    float _2663 = _796 / cbSceneParam._m0[86u].y;
    vec4 _2677 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, (log2((isnan(cbSceneParam._m0[77u].w) ? _717 : (isnan(_717) ? cbSceneParam._m0[77u].w : min(_717, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2679 = _2677.x;
    float _2680 = _2677.y;
    float _2681 = _2677.z;
    float _2682 = _2677.w;
    float _2775;
    float _2777;
    float _2779;
    float _2781;
    if (_717 > cbSceneParam._m0[78u].w)
    {
        float _2737 = isnan(_717) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _717 : min(cbSceneParam._m0[80u].w, _717));
        float _2738 = _2737 / _717;
        float _2749 = _2738 * _768;
        float _2750 = _769 * _2738;
        float _2751 = (-0.0) - _2750;
        float _2753 = _2738 * _770;
        float _2755 = (cbSceneParam._m0[77u].w * _2751) / _2737;
        float _2756 = _2755 + cbSceneParam._m0[79u].w;
        float _2757 = cbSceneParam._m0[79u].w - _2750;
        float _2763 = sqrt(((_2749 * _2749) + (_2750 * _2750)) + (_2753 * _2753));
        float _2766 = (1.0 - (cbSceneParam._m0[77u].w / _2737)) * _2763;
        float _2771 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2773 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2950;
        if (abs((_2751 - _2755) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2950 = ((((_2756 > 0.0) ? exp2(_2771 * _2756) : (2.0 - exp2(_2773 * _2756))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2766;
        }
        else
        {
            float _2894 = 1.0 / cbSceneParam._m0[80u].x;
            float _2895 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : max(_2756, _2757));
            float _2896 = isnan(_2757) ? _2756 : (isnan(_2756) ? _2757 : min(_2756, _2757));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            _2950 = ((abs(_2763 / _2751) * cbSceneParam._m0[80u].y) * ((((_2905 - _2906) * 2.0) - ((exp2(_2771 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)))) - exp2(_2771 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))))) * _2894)) - ((exp2(_2773 * _2905) - exp2(_2773 * _2906)) * _2894))) + (_2766 * cbSceneParam._m0[80u].z);
        }
        vec4 _2952 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2662, _2663, 1.0), 0.0);
        float _2961 = exp2((_2950 * (-1.44269502162933349609375)) * (1.0 - _2952.w));
        float _2962 = log2(_2961);
        float _2978 = log2(_2682);
        _2775 = (exp2(_2978 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].x)) * _2952.x) / cbSceneParam._m0[78u].x)) + _2679;
        _2777 = (exp2(_2978 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].y)) * _2952.y) / cbSceneParam._m0[78u].y)) + _2680;
        _2779 = (exp2(_2978 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2962 * cbSceneParam._m0[78u].z)) * _2952.z) / cbSceneParam._m0[78u].z)) + _2681;
        _2781 = _2961 * _2682;
    }
    else
    {
        _2775 = _2679;
        _2777 = _2680;
        _2779 = _2681;
        _2781 = _2682;
    }
    bool _2988;
    vec4 _2791;
    vec4 _2813;
    float _2815;
    float _2819;
    float _2820;
    float _2821;
    float _2822;
    bool _2832;
    for (;;)
    {
        _2791 = cbMatDynParam._m0[0u];
        float _2793 = roundEven(_2791.y);
        bool _2794 = _2793 == 3.0;
        float _2795 = log2(_2781);
        float _2802 = exp2(_2795 * cbSceneParam._m0[78u].x) * _2651;
        float _2803 = exp2(_2795 * cbSceneParam._m0[78u].y) * _2652;
        float _2804 = exp2(_2795 * cbSceneParam._m0[78u].z) * _2653;
        float _2811 = _784 + (-0.5);
        _2813 = cbMtdParam._m0[1u];
        _2815 = _2813.y * _2811;
        float _2818 = (_2793 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2819 = _2818 * (_2794 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2775)));
        _2820 = _2818 * (_2794 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2777)));
        _2821 = _2818 * (_2794 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2779)));
        _2822 = _2811 * 0.999000012874603271484375;
        _2832 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2832)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2822) < 0.5)
            {
                _2988 = true;
                break;
            }
        }
        uint _2929 = _833 + uint(_2791.w);
        if ((cbInstanceData._m0[_2929].w < 1.0) && ((cbInstanceData._m0[_2929].w + _2822) < 0.5))
        {
            _2988 = true;
            break;
        }
        if ((_2815 + 1.0) < _2813.x)
        {
            _2988 = true;
            break;
        }
        _2988 = false;
        break;
    }
    float _3193;
    if (_2988)
    {
        discard_state = true;
        _3193 = 0.0;
    }
    else
    {
        _3193 = cbInstanceData._m0[_2654].w;
    }
    SV_Target.x = _2819;
    SV_Target.y = _2820;
    SV_Target.z = _2821;
    SV_Target.w = _3193;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2654].w;
    discard_exit();
}


