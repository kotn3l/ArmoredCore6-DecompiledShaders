#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1284;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3939 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _432 = _428.z;
    float _441 = ((_411.z - _432) * _384) + _432;
    float _444 = ((((_411.x - _430) * _384) + _430) * 2.0) + (-1.0);
    float _446 = ((((_411.y - _431) * _384) + _431) * 2.0) + (-1.0);
    float _447 = dot(vec2(_444, _446), vec2(_444, _446));
    float _3950 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _452 = sqrt(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _480 = (((_468.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    float _481 = (((_468.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _446;
    float _484 = fma(_452, _237, fma(_481, _244, _480 * _230));
    float _487 = fma(_452, _238, fma(_481, _245, _480 * _231));
    float _490 = fma(_452, _239, fma(_481, _246, _480 * _232));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _525 = _523.x;
    float _526 = 1.0 - _525;
    float _532 = (cbMtdParam._m0[19u].x + dot(vec4(_494 * _484, _494 * _487, _494 * _490, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_525 - _526) * cbMtdParam._m0[24u].z) + _526) * cbMtdParam._m0[21u].z);
    float _3961 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _535 = (-0.0) - cbMtdParam._m0[24u].y;
    float _537 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _538 = isnan(1.0) ? _537 : (isnan(_537) ? 1.0 : min(_537, 1.0));
    float _545 = _533 - ((_533 * TEXCOORD_8.x) * _538);
    float _546 = _533 - ((_533 * TEXCOORD_8.y) * _538);
    float _547 = _533 - ((_533 * TEXCOORD_8.z) * _538);
    float _554 = (_545 * (cbMtdParam._m0[17u].x - _391)) + _391;
    float _555 = (_546 * (cbMtdParam._m0[17u].y - _392)) + _392;
    float _556 = (_547 * (cbMtdParam._m0[17u].z - _393)) + _393;
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _599 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_570 - _571) * cbMtdParam._m0[24u].w) + _571) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3982 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _608 = ((((cbMtdParam._m0[10u].x - _554) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _600) + _554;
    float _609 = ((((cbMtdParam._m0[10u].y - _555) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _600) + _555;
    float _610 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _556)) * _600) + _556;
    float _614 = (cbMtdParam._m0[19u].w * (_468.z - _441)) + _441;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3993 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _645 = ((_628.z - _614) * _545) + _614;
    float _648 = ((cbMtdParam._m0[23u].y - _645) * _600) + _645;
    vec4 _667 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _673 = (_667.x * 2.0) + (-1.0);
    float _674 = (_667.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _4004 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _690 = ((sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _452) * _547) + _452;
    float _693 = (((_635 - _480) * _545) + _480) + (cbMtdParam._m0[21u].x * _480);
    float _694 = (((_636 - _481) * _546) + _481) + (cbMtdParam._m0[21u].x * _481);
    float _705 = (((_673 - _693) + (_693 * cbMtdParam._m0[22u].z)) * _600) + _693;
    float _706 = (((_674 - _694) + (_694 * cbMtdParam._m0[22u].z)) * _600) + _694;
    float _707 = (_600 * (sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) - _690)) + _690;
    float _709 = cbMtdParam._m0[22u].x + _468.w;
    float _712 = fma(_707, _237, fma(_706, _244, _705 * _230));
    float _715 = fma(_707, _238, fma(_706, _245, _705 * _231));
    float _718 = fma(_707, _239, fma(_706, _246, _705 * _232));
    float _722 = inversesqrt(dot(vec3(_712, _715, _718), vec3(_712, _715, _718)));
    float _723 = _722 * _712;
    float _724 = _722 * _715;
    float _725 = _722 * _718;
    float _4015 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _726 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4037 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4048 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4059 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _744 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _795 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _785);
    float _796 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _785);
    float _797 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _785);
    float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
    float _802 = _795 * _801;
    float _803 = _796 * _801;
    float _804 = _797 * _801;
    vec4 _809 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _811 = _809.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _965 = sqrt(((_795 * _795) + (_796 * _796)) + (_797 * _797));
        float _971 = (cbMatDynParam._m0[5u].x * _965) + cbMatDynParam._m0[5u].y;
        float _4070 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _976 = (cbMatDynParam._m0[5u].z * _965) + cbMatDynParam._m0[5u].w;
        float _4081 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) - _972)) + _972) < ((_811 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _822 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _823 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_725, cbSceneParam._m0[5u].z, fma(_724, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _723));
    float _844 = fma(_725, cbSceneParam._m0[6u].z, fma(_724, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _723));
    float _847 = fma(_725, cbSceneParam._m0[7u].z, fma(_724, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _723));
    uint _860 = _249 + 9u;
    uint _861 = _860 + uint(cbMatDynParam._m0[0u].w);
    float _867 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_861].x;
    float _868 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_861].y;
    float _869 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_861].z;
    float _4092 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _822, cbSceneParam._m0[86u].y * _823));
    float _885 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * TEXCOORD_5.w) * _881.x;
    float _886 = dot(vec3(_723, _724, _725), vec3(_802, _803, _804));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _723) - _802;
    float _894 = (_889 * _724) - _803;
    float _895 = (_889 * _725) - _804;
    float _899 = abs(dot(vec3(_802, _803, _804), vec3(_723, _724, _725)));
    float _4125 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_726);
    float _914 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_954, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946));
        float _1012 = fma(_954, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946));
        float _1016 = fma(_954, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946));
        float _1041 = _946 + _723;
        float _1042 = _950 + _724;
        float _1043 = _954 + _725;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_723, _724, _725), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4173 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_723, _724, _725), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4206 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_723, _724, _725), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4239 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_954, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946));
        float _1330 = fma(_954, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946));
        float _1334 = fma(_954, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946));
        float _1357 = _946 + _723;
        float _1358 = _950 + _724;
        float _1359 = _954 + _725;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_723, _724, _725), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4302 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_723, _724, _725), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4335 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_723, _724, _725), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4368 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = _1284;
        _1605 = _1284;
        _1606 = _1284;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1297)) + _1297;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1298)) + _1298;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _893 * 0.5;
    float _1664 = _894 * 0.5;
    float _1665 = _895 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _726);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_954, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_954, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_954, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1794 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1797 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1825 = frontier_phi_17_15_ladder;
        }
        float _1995;
        if (_1794 > 0.0)
        {
            _1995 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1995 = frontier_phi_26_22_ladder;
        }
        float _2290;
        if (_1797 > 0.0)
        {
            _2290 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2290 = frontier_phi_38_33_ladder;
        }
        float _2292 = isnan(_1995) ? _1825 : (isnan(_1825) ? _1995 : min(_1825, _1995));
        float _2293 = isnan(_2290) ? _2292 : (isnan(_2292) ? _2290 : min(_2292, _2290));
        float _2297 = (_2293 * _1791) + _1780;
        float _2298 = (_2293 * _1794) + _1784;
        float _2299 = (_2293 * _1797) + _1788;
        float _2300 = _2293 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2300;
        float _2304 = _2300 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 > _2304) || ((_2298 < _2302) || ((_2297 < _2302) || (_2297 > _2304))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2299, cbModelParam._m0[9u].z, fma(_2298, cbModelParam._m0[9u].y, _2297 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2299, cbModelParam._m0[10u].z, fma(_2298, cbModelParam._m0[10u].y, _2297 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2299, cbModelParam._m0[11u].z, fma(_2298, cbModelParam._m0[11u].y, _2297 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_16_38_ladder = _2444.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2444.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2444.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_16_38_ladder_2;
        _1815 = frontier_phi_16_38_ladder_1;
        _1817 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1732);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _726);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1876 = fma(_954, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946)) + cbModelParam._m0[21u].w;
        float _1880 = fma(_954, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946)) + cbModelParam._m0[22u].w;
        float _1884 = fma(_954, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946)) + cbModelParam._m0[23u].w;
        float _1887 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1890 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1893 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _2000;
        if (_1887 > 0.0)
        {
            _2000 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2000 = frontier_phi_28_24_ladder;
        }
        float _2317;
        if (_1890 > 0.0)
        {
            _2317 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2317 = frontier_phi_40_35_ladder;
        }
        float _2644;
        if (_1893 > 0.0)
        {
            _2644 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2644 = frontier_phi_50_47_ladder;
        }
        float _2646 = isnan(_2317) ? _2000 : (isnan(_2000) ? _2317 : min(_2000, _2317));
        float _2647 = isnan(_2644) ? _2646 : (isnan(_2646) ? _2644 : min(_2646, _2644));
        float _2651 = (_2647 * _1887) + _1876;
        float _2652 = (_2647 * _1890) + _1880;
        float _2653 = (_2647 * _1893) + _1884;
        float _2654 = _2647 * 9.9999997473787516355514526367188e-05;
        float _2655 = (-1.0) - _2654;
        float _2657 = _2654 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2653 > _2657) || ((_2653 < _2655) || ((_2652 > _2657) || ((_2652 < _2655) || ((_2651 < _2655) || (_2651 > _2657))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2653, cbModelParam._m0[17u].z, fma(_2652, cbModelParam._m0[17u].y, _2651 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2653, cbModelParam._m0[18u].z, fma(_2652, cbModelParam._m0[18u].y, _2651 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2653, cbModelParam._m0[19u].z, fma(_2652, cbModelParam._m0[19u].y, _2651 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_25_50_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1912 = frontier_phi_25_50_ladder_2;
        _1914 = frontier_phi_25_50_ladder_1;
        _1916 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1822);
        _1912 = _1896.x * cbModelParam._m0[1u].z;
        _1914 = _1896.y * cbModelParam._m0[1u].z;
        _1916 = _1896.z * cbModelParam._m0[1u].z;
    }
    float _1928 = ((((1.0 - _914) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_914 * _901)) * _885;
    float _1929 = _1928 * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1930 = _1928 * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1931 = _1928 * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1934 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1937 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1940 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, _1929 * cbSceneParam._m0[91u].x));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1987 = _1974 / _1986;
    float _1988 = _1978 / _1986;
    float _1989 = _1982 / _1986;
    float _2136;
    float _2137;
    float _2138;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2016 = ((uint(_1989 > cbSceneParam._m0[59u].y) + uint(_1989 > cbSceneParam._m0[59u].x)) + uint(_1989 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2017 = _2016 + 43u;
        uint _2025 = _2016 + 44u;
        uint _2033 = _2016 + 45u;
        uint _2041 = _2016 + 46u;
        float _2052 = fma(_1986, cbSceneParam._m0[_2017].w, fma(_1982, cbSceneParam._m0[_2017].z, fma(_1978, cbSceneParam._m0[_2017].y, _1974 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1986, cbSceneParam._m0[_2025].w, fma(_1982, cbSceneParam._m0[_2025].z, fma(_1978, cbSceneParam._m0[_2025].y, _1974 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1986, cbSceneParam._m0[_2041].w, fma(_1982, cbSceneParam._m0[_2041].z, fma(_1978, cbSceneParam._m0[_2041].y, _1974 * cbSceneParam._m0[_2041].x)));
        float _2069 = cbSceneParam._m0[33u].z * _2064;
        float _2071 = cbSceneParam._m0[33u].w * _2064;
        float _2074 = fma(_1986, cbSceneParam._m0[_2033].w, fma(_1982, cbSceneParam._m0[_2033].z, fma(_1978, cbSceneParam._m0[_2033].y, _1974 * cbSceneParam._m0[_2033].x))) / _2064;
        float _2122 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
        float _4494 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2129 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2052) / _2064, (_2071 + _2056) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2052) / _2064, (_2056 - _2069) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2069) / _2064, (_2056 - _2071) / _2064), _2074), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2052 - _2071) / _2064, (_2069 + _2056) / _2064), _2074), 0.0)).x), vec4(0.25)));
        _2136 = 1.0 - (_2129 * cbSceneParam._m0[34u].x);
        _2137 = 1.0 - (_2129 * cbSceneParam._m0[34u].y);
        _2138 = 1.0 - (_2129 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2136 = 1.0;
        _2137 = 1.0;
        _2138 = 1.0;
    }
    float _2202;
    float _2204;
    float _2206;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2190 = fma(_1986, cbSceneParam._m0[63u].w, fma(_1982, cbSceneParam._m0[63u].z, fma(_1978, cbSceneParam._m0[63u].y, _1974 * cbSceneParam._m0[63u].x)));
        float _2191 = fma(_1986, cbSceneParam._m0[60u].w, fma(_1982, cbSceneParam._m0[60u].z, fma(_1978, cbSceneParam._m0[60u].y, _1974 * cbSceneParam._m0[60u].x))) / _2190;
        float _2192 = fma(_1986, cbSceneParam._m0[61u].w, fma(_1982, cbSceneParam._m0[61u].z, fma(_1978, cbSceneParam._m0[61u].y, _1974 * cbSceneParam._m0[61u].x))) / _2190;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2191 >= cbSceneParam._m0[64u].x) && (_2192 >= cbSceneParam._m0[64u].y)) && (_2191 <= cbSceneParam._m0[64u].z)) && (_2192 <= cbSceneParam._m0[64u].w))
        {
            float _2330 = fma(_1986, cbSceneParam._m0[62u].w, fma(_1982, cbSceneParam._m0[62u].z, fma(_1978, cbSceneParam._m0[62u].y, _1974 * cbSceneParam._m0[62u].x))) / _2190;
            float _2334 = isnan(cbSceneParam._m0[41u].w) ? _2330 : (isnan(_2330) ? cbSceneParam._m0[41u].w : max(_2330, cbSceneParam._m0[41u].w));
            float _2377 = (cbSceneParam._m0[33u].x - sqrt(((_1988 * _1988) + (_1987 * _1987)) + (_1989 * _1989))) * cbSceneParam._m0[33u].y;
            float _4510 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
            float _2384 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2191, cbSceneParam._m0[33u].w + _2192), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2191, _2192 - cbSceneParam._m0[33u].z), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].z, _2192 - cbSceneParam._m0[33u].w), _2334), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2191 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2192), _2334), 0.0)).x), vec4(0.25)));
            float _2388 = 1.0 - (_2384 * cbSceneParam._m0[34u].x);
            float _2389 = 1.0 - (_2384 * cbSceneParam._m0[34u].y);
            float _2390 = 1.0 - (_2384 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
            frontier_phi_37_36_ladder_1 = isnan(_2389) ? _2137 : (isnan(_2137) ? _2389 : min(_2137, _2389));
            frontier_phi_37_36_ladder_2 = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
        }
        else
        {
            frontier_phi_37_36_ladder = _2138;
            frontier_phi_37_36_ladder_1 = _2137;
            frontier_phi_37_36_ladder_2 = _2136;
        }
        _2202 = frontier_phi_37_36_ladder_2;
        _2204 = frontier_phi_37_36_ladder_1;
        _2206 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2202 = _2136;
        _2204 = _2137;
        _2206 = _2138;
    }
    uvec4 _2211 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2213 = _2211.x * 14u;
    uint _2214 = _2213 + 13u;
    float _2221 = _885 + (-1.0);
    float _2226 = (cbLight._m0[_2214].x * _2221) + 1.0;
    float _2227 = (cbLight._m0[_2214].y * _2221) + 1.0;
    float _2228 = (cbLight._m0[_2214].z * _2221) + 1.0;
    float _2229 = (cbLight._m0[_2214].w * _2221) + 1.0;
    uint _2230 = _2213 + 5u;
    float _2236 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
    uint _2240 = _2213 + 4u;
    float _2249 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2253 = _2213 | 1u;
    float _2264 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_723, _724, _725));
    float _2267 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_723, _724, _725));
    float _4546 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _4557 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2272 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2274 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * 0.3183098733425140380859375;
    float _2281 = ((cbLight._m0[_2230].x * _2236) * _2274) + (((cbLight._m0[_2240].x * _2202) * _2249) * _2272);
    float _2282 = ((_2236 * cbLight._m0[_2230].y) * _2274) + (((cbLight._m0[_2240].y * _2204) * _2249) * _2272);
    float _2283 = ((_2236 * cbLight._m0[_2230].z) * _2274) + (((cbLight._m0[_2240].z * _2206) * _2249) * _2272);
    uvec4 _2287 = floatBitsToUint(cbLight._m0[_2213 + 12u]);
    bool _2289 = _2287.x == 0u;
    float _2391;
    float _2393;
    float _2395;
    if (_2289)
    {
        _2391 = _2281;
        _2393 = _2282;
        _2395 = _2283;
    }
    else
    {
        uint _2399 = _2213 + 6u;
        float _2415 = (dot(vec3(cbLight._m0[_2213 + 2u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4568 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2418 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2391 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2281;
        _2393 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2282;
        _2395 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2283;
    }
    bool _2398 = _2287.y == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2398)
    {
        _2453 = _2391;
        _2455 = _2393;
        _2457 = _2395;
    }
    else
    {
        uint _2615 = _2213 + 7u;
        float _2631 = (dot(vec3(cbLight._m0[_2213 + 3u].xyz), vec3(_723, _724, _725)) * 0.5) + 0.5;
        float _2632 = _2631 * _2631;
        float _4584 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2633 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2634 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2453 = (((cbLight._m0[_2615].x * 0.3183098733425140380859375) * _2633) * _2634) + _2391;
        _2455 = (((cbLight._m0[_2615].y * 0.3183098733425140380859375) * _2633) * _2634) + _2393;
        _2457 = (((cbLight._m0[_2615].z * 0.3183098733425140380859375) * _2633) * _2634) + _2395;
    }
    uint _2460 = _2213 + 8u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2213].w)) * _726) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2213].x + _802;
    float _2476 = cbLight._m0[_2213].y + _803;
    float _2477 = cbLight._m0[_2213].z + _804;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2213].xyz));
    float _4600 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _4611 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2489 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2490 = dot(vec3(_723, _724, _725), vec3(_2482, _2483, _2484));
    float _4622 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2493 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2494 = dot(vec3(cbLight._m0[_2213].xyz), vec3(_2482, _2483, _2484));
    float _4633 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2498 = _2474 * _2474;
    float _2502 = ((_2493 * _2493) * (_2498 + (-1.0))) + 1.0;
    float _2513 = (exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2514 = 1.0 - _2474;
    float _2525 = (0.5 / (((_2489 * ((_2488 * _2514) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2514) + _2474) * _2488))) * _2488;
    float _4644 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2498 / ((_2502 * _2502) * 3.141590118408203125));
    uint _2541 = _2213 + 9u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _726) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2253].x + _802;
    float _2555 = cbLight._m0[_2253].y + _803;
    float _2556 = cbLight._m0[_2253].z + _804;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2253].xyz));
    float _4655 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2568 = dot(vec3(_723, _724, _725), vec3(_2561, _2562, _2563));
    float _4666 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2572 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2561, _2562, _2563));
    float _4677 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2576 = _2553 * _2553;
    float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
    float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2590 = 1.0 - _2553;
    float _2600 = (0.5 / (((_2489 * ((_2567 * _2590) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2590) + _2553) * _2567))) * _2567;
    float _4688 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
    float _2612 = (((_2589 * cbLight._m0[_2541].x) * _2602) * _2236) + ((((cbLight._m0[_2460].x * _2202) * _2513) * _2527) * _2249);
    float _2613 = (((_2589 * cbLight._m0[_2541].y) * _2602) * _2236) + ((((cbLight._m0[_2460].y * _2204) * _2513) * _2527) * _2249);
    float _2614 = (((_2589 * cbLight._m0[_2541].z) * _2602) * _2236) + ((((cbLight._m0[_2460].z * _2206) * _2513) * _2527) * _2249);
    float _2670;
    float _2672;
    float _2674;
    if (_2289)
    {
        _2670 = _2612;
        _2672 = _2613;
        _2674 = _2614;
    }
    else
    {
        uint _2676 = _2213 + 2u;
        uint _2680 = _2213 + 10u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _726) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _802;
        float _2697 = cbLight._m0[_2676].y + _803;
        float _2698 = cbLight._m0[_2676].z + _804;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2676].xyz));
        float _4699 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2710 = dot(vec3(_723, _724, _725), vec3(_2703, _2704, _2705));
        float _4710 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4721 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2731 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2732 = 1.0 - _2695;
        float _2742 = (0.5 / (((_2489 * ((_2709 * _2732) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2732) + _2695) * _2709))) * _2709;
        float _4732 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2670 = (((_2731 * cbLight._m0[_2680].x) * _2744) * _2745) + _2612;
        _2672 = (((_2731 * cbLight._m0[_2680].y) * _2744) * _2745) + _2613;
        _2674 = (((_2731 * cbLight._m0[_2680].z) * _2744) * _2745) + _2614;
    }
    float _2776;
    float _2778;
    float _2780;
    if (_2398)
    {
        _2776 = _2670;
        _2778 = _2672;
        _2780 = _2674;
    }
    else
    {
        uint _2787 = _2213 + 3u;
        uint _2791 = _2213 + 11u;
        float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2787].w)) * _726) * 0.949999988079071044921875);
        float _2806 = _2805 * _2805;
        float _2807 = cbLight._m0[_2787].x + _802;
        float _2808 = cbLight._m0[_2787].y + _803;
        float _2809 = cbLight._m0[_2787].z + _804;
        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
        float _2814 = _2813 * _2807;
        float _2815 = _2813 * _2808;
        float _2816 = _2813 * _2809;
        float _2817 = dot(vec3(_723, _724, _725), vec3(cbLight._m0[_2787].xyz));
        float _4748 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2820 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2821 = dot(vec3(_723, _724, _725), vec3(_2814, _2815, _2816));
        float _4759 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2824 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2825 = dot(vec3(cbLight._m0[_2787].xyz), vec3(_2814, _2815, _2816));
        float _4770 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2829 = _2806 * _2806;
        float _2833 = ((_2824 * _2824) * (_2829 + (-1.0))) + 1.0;
        float _2842 = (exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2843 = 1.0 - _2806;
        float _2853 = (0.5 / (((_2489 * ((_2820 * _2843) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2489 * _2843) + _2806) * _2820))) * _2820;
        float _4781 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2855 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2829 / ((_2833 * _2833) * 3.141590118408203125));
        float _2856 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
        _2776 = (((_2842 * cbLight._m0[_2791].x) * _2855) * _2856) + _2670;
        _2778 = (((_2842 * cbLight._m0[_2791].y) * _2855) * _2856) + _2672;
        _2780 = (((_2842 * cbLight._m0[_2791].z) * _2855) * _2856) + _2674;
    }
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_2211.y == 0u)
    {
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.x;
        uint _2889 = uint((float(_2877.y) * floor(float(uint(cbSceneParam._m0[85u].y * _823) / _2878))) + floor(float(uint(cbSceneParam._m0[85u].x * _822) / _2878)));
        float _2899 = (log2(_1989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2900 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        uint _2903 = uint(isnan(14.0) ? _2900 : (isnan(_2900) ? 14.0 : min(_2900, 14.0)));
        uvec4 _2908 = texelFetch(g_lightClusterGridBuffer, int(((_2903 << 2u) + (_2889 << 6u)) >> 2u));
        uint _2909 = _2908.x;
        uint _2910 = _2877.z;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((((1u << ((_2910 >> 4u) & 15u)) + 4294967295u) & _2909) == 0u) || ((_2910 & 240u) == 0u))
        {
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
        }
        else
        {
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            uint _3147 = 0u;
            uint _3156;
            bool _3157;
            for (;;)
            {
                _3156 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                _3157 = _3156 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3157)
                {
                    frontier_phi_71_pred = _3146;
                    frontier_phi_71_pred_1 = _3145;
                    frontier_phi_71_pred_2 = _3144;
                    frontier_phi_71_pred_3 = _3143;
                    frontier_phi_71_pred_4 = _3142;
                    frontier_phi_71_pred_5 = _3141;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3156;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3147 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _1987;
                        float _3353 = _3312.y - _1988;
                        float _3354 = _3312.z - _1989;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_841, _844, _847), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4807 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _1987;
                        float _3388 = (-0.0) - _1988;
                        float _3389 = (-0.0) - _1989;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3403 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3404 = 1.0 - _901;
                        float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                        float _3412 = _3411 * _3411;
                        float _3413 = _3412 * _3412;
                        float _3414 = _3394 + _3359;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3424 = dot(vec3(_841, _844, _847), vec3(_3394, _3395, _3396));
                        float _4823 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3428 = dot(vec3(_841, _844, _847), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                        float _4834 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                        float _3436 = _3372 * _3412;
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3362) + _3437;
                        float _4845 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3442 = 1.0 - _3412;
                        float _3452 = (0.5 / (((_3441 * ((_3427 * _3442) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3412) * _3427))) * _3441;
                        float _4856 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3463 = (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3435 * _3435) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3216 = (_3383 * _3331.x) + _3289;
                        _3217 = (_3383 * _3331.y) + _3290;
                        _3218 = (_3383 * _3331.z) + _3291;
                        _3213 = (_3463 * _3348.x) + _3286;
                        _3214 = (_3463 * _3348.y) + _3287;
                        _3215 = (_3463 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_71_pred = _3218;
                    frontier_phi_71_pred_1 = _3217;
                    frontier_phi_71_pred_2 = _3216;
                    frontier_phi_71_pred_3 = _3215;
                    frontier_phi_71_pred_4 = _3214;
                    frontier_phi_71_pred_5 = _3213;
                }
                _3000 = frontier_phi_71_pred;
                _2998 = frontier_phi_71_pred_1;
                _2996 = frontier_phi_71_pred_2;
                _2994 = frontier_phi_71_pred_3;
                _2992 = frontier_phi_71_pred_4;
                _2990 = frontier_phi_71_pred_5;
                uint _3148 = _3147 + 1u;
                if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3141 = _2990;
                    _3142 = _2992;
                    _3143 = _2994;
                    _3144 = _2996;
                    _3145 = _2998;
                    _3146 = _3000;
                    _3147 = _3148;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
        }
        uvec4 _3003 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3004 = _3003.z;
        uint _3006 = (_3004 >> 8u) & 15u;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((4294967295u << _3006) & _2909) == 0u)
        {
            _3109 = _2989;
            _3111 = _2991;
            _3113 = _2993;
            _3115 = _2995;
            _3117 = _2997;
            _3119 = _2999;
        }
        else
        {
            float _3134 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
            float _3135 = _3134 * _1987;
            float _3136 = _3134 * _1988;
            float _3137 = _3134 * _1989;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3006 < ((_3004 >> 12u) & 15u))
            {
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3269 = _2989;
                float _3270 = _2991;
                float _3271 = _2993;
                float _3272 = _2995;
                float _3273 = _2997;
                float _3274 = _2999;
                uint _3275 = _3006;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3285)
                    {
                        frontier_phi_82_pred = _3274;
                        frontier_phi_82_pred_1 = _3273;
                        frontier_phi_82_pred_2 = _3272;
                        frontier_phi_82_pred_3 = _3271;
                        frontier_phi_82_pred_4 = _3270;
                        frontier_phi_82_pred_5 = _3269;
                    }
                    else
                    {
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        uint _3496 = _3284;
                        uint _3497;
                        vec4 _3522;
                        float _3523;
                        vec4 _3538;
                        vec3 _3550;
                        vec4 _3565;
                        vec4 _3581;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3507 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3496));
                            _3497 = (_3496 + 4294967295u) & _3496;
                            uint _3509 = _3507 * 40u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3523 = _3522.w;
                            uint _3525 = (_3507 * 40u) + 4u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3507 * 40u) + 8u;
                            _3550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x));
                            uint _3552 = (_3507 * 40u) + 16u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3568 = (_3507 * 40u) + 20u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3507 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3507 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_1989, _3615.z, fma(_1988, _3615.y, _3615.x * _1987)) + _3615.w;
                            _3628 = !((fma(_1989, _3596.z, fma(_1988, _3596.y, _3596.x * _1987)) + _3596.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3522.x - _1987;
                                float _3656 = _3522.y - _1988;
                                float _3657 = _3522.z - _1989;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3523 * _3523));
                                float _4867 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3673 = sqrt(_3658) * _3538.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_841, _844, _847))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_1989, _3565.z, fma(_1988, _3565.y, _3565.x * _1987)) + _3565.w) / _3627;
                                float _3687 = (fma(_1989, _3581.z, fma(_1988, _3581.y, _3581.x * _1987)) + _3581.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4883 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _901;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3135;
                                float _3717 = _3663 - _3136;
                                float _3718 = _3664 - _3137;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_841, _844, _847), vec3((-0.0) - _3135, (-0.0) - _3136, (-0.0) - _3137));
                                float _4894 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3730 = dot(vec3(_841, _844, _847), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4905 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_841, _844, _847), vec3(_3662, _3663, _3664))) + _3739;
                                float _4916 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4927 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3693 * _3538.z;
                                frontier_phi_88_pred_1 = _3693 * _3538.y;
                                frontier_phi_88_pred_2 = _3693 * _3538.x;
                                frontier_phi_88_pred_3 = _3767 * _3550.z;
                                frontier_phi_88_pred_4 = _3767 * _3550.y;
                                frontier_phi_88_pred_5 = _3767 * _3550.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_88_pred;
                            _3775 = frontier_phi_88_pred_1;
                            _3774 = frontier_phi_88_pred_2;
                            _3773 = frontier_phi_88_pred_3;
                            _3772 = frontier_phi_88_pred_4;
                            _3771 = frontier_phi_88_pred_5;
                            _3480 = _3774 + _3493;
                            _3481 = _3775 + _3494;
                            _3482 = _3776 + _3495;
                            _3477 = _3771 + _3490;
                            _3478 = _3772 + _3491;
                            _3479 = _3773 + _3492;
                            if (_3497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3497;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3482;
                        frontier_phi_82_pred_1 = _3481;
                        frontier_phi_82_pred_2 = _3480;
                        frontier_phi_82_pred_3 = _3479;
                        frontier_phi_82_pred_4 = _3478;
                        frontier_phi_82_pred_5 = _3477;
                    }
                    _3120 = frontier_phi_82_pred;
                    _3118 = frontier_phi_82_pred_1;
                    _3116 = frontier_phi_82_pred_2;
                    _3114 = frontier_phi_82_pred_3;
                    _3112 = frontier_phi_82_pred_4;
                    _3110 = frontier_phi_82_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3110;
                        _3270 = _3112;
                        _3271 = _3114;
                        _3272 = _3116;
                        _3273 = _3118;
                        _3274 = _3120;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3116;
                frontier_phi_63_64_ladder_1 = _3120;
                frontier_phi_63_64_ladder_2 = _3118;
                frontier_phi_63_64_ladder_3 = _3114;
                frontier_phi_63_64_ladder_4 = _3112;
                frontier_phi_63_64_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_63_64_ladder = _2995;
                frontier_phi_63_64_ladder_1 = _2999;
                frontier_phi_63_64_ladder_2 = _2997;
                frontier_phi_63_64_ladder_3 = _2993;
                frontier_phi_63_64_ladder_4 = _2991;
                frontier_phi_63_64_ladder_5 = _2989;
            }
            _3109 = frontier_phi_63_64_ladder_5;
            _3111 = frontier_phi_63_64_ladder_4;
            _3113 = frontier_phi_63_64_ladder_3;
            _3115 = frontier_phi_63_64_ladder;
            _3117 = frontier_phi_63_64_ladder_2;
            _3119 = frontier_phi_63_64_ladder_1;
        }
        float _3124 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2922 = (_3124 * _3115) + _2453;
        _2924 = (_3124 * _3117) + _2455;
        _2926 = (_3124 * _3119) + _2457;
        _2928 = ((_3109 * 0.039999999105930328369140625) * _3124) + _2776;
        _2930 = ((_3111 * 0.039999999105930328369140625) * _3124) + _2778;
        _2932 = ((_3113 * 0.039999999105930328369140625) * _3124) + _2780;
    }
    else
    {
        _2922 = _2453;
        _2924 = _2455;
        _2926 = _2457;
        _2928 = _2776;
        _2930 = _2778;
        _2932 = _2780;
    }
    float _4943 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _4954 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4965 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _2949 = ((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2922 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _885))) + ((_2928 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2950 = ((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2924 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _885))) + ((_2930 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2951 = ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2926 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _885))) + ((_2932 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    uint _2952 = _249 + 6u;
    float _2960 = _822 / cbSceneParam._m0[86u].x;
    float _2961 = _823 / cbSceneParam._m0[86u].y;
    vec4 _2975 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, (log2((isnan(cbSceneParam._m0[77u].w) ? _744 : (isnan(_744) ? cbSceneParam._m0[77u].w : min(_744, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2977 = _2975.x;
    float _2978 = _2975.y;
    float _2979 = _2975.z;
    float _2980 = _2975.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_744 > cbSceneParam._m0[78u].w)
    {
        float _3014 = isnan(_744) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _744 : min(cbSceneParam._m0[80u].w, _744));
        float _3015 = _3014 / _744;
        float _3026 = _3015 * _795;
        float _3027 = _796 * _3015;
        float _3028 = (-0.0) - _3027;
        float _3029 = _3015 * _797;
        float _3031 = (cbSceneParam._m0[77u].w * _3028) / _3014;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3027;
        float _3039 = sqrt(((_3026 * _3026) + (_3027 * _3027)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3014)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3226;
        if (abs((_3028 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3226 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3170 = 1.0 / cbSceneParam._m0[80u].x;
            float _3171 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3172 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            _3226 = ((abs(_3039 / _3028) * cbSceneParam._m0[80u].y) * ((((_3181 - _3182) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))))) * _3170)) - ((exp2(_3049 * _3181) - exp2(_3049 * _3182)) * _3170))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3228 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2960, _2961, 1.0), 0.0);
        float _3237 = exp2((_3226 * (-1.44269502162933349609375)) * (1.0 - _3228.w));
        float _3238 = log2(_3237);
        float _3254 = log2(_2980);
        _3051 = (exp2(_3254 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].x)) * _3228.x) / cbSceneParam._m0[78u].x)) + _2977;
        _3053 = (exp2(_3254 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].y)) * _3228.y) / cbSceneParam._m0[78u].y)) + _2978;
        _3055 = (exp2(_3254 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].z)) * _3228.z) / cbSceneParam._m0[78u].z)) + _2979;
        _3057 = _3237 * _2980;
    }
    else
    {
        _3051 = _2977;
        _3053 = _2978;
        _3055 = _2979;
        _3057 = _2980;
    }
    bool _3264;
    vec4 _3067;
    vec4 _3089;
    float _3091;
    float _3095;
    float _3096;
    float _3097;
    float _3098;
    bool _3108;
    for (;;)
    {
        _3067 = cbMatDynParam._m0[0u];
        float _3069 = roundEven(_3067.y);
        bool _3070 = _3069 == 3.0;
        float _3071 = log2(_3057);
        float _3078 = exp2(_3071 * cbSceneParam._m0[78u].x) * _2949;
        float _3079 = exp2(_3071 * cbSceneParam._m0[78u].y) * _2950;
        float _3080 = exp2(_3071 * cbSceneParam._m0[78u].z) * _2951;
        float _3087 = _811 + (-0.5);
        _3089 = cbMtdParam._m0[1u];
        _3091 = _3089.y * _3087;
        float _3094 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3095 = _3094 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
        _3096 = _3094 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
        _3097 = _3094 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
        _3098 = _3087 * 0.999000012874603271484375;
        _3108 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3108)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _3098) < 0.5)
            {
                _3264 = true;
                break;
            }
        }
        uint _3205 = _860 + uint(_3067.w);
        if ((cbInstanceData._m0[_3205].w < 1.0) && ((cbInstanceData._m0[_3205].w + _3098) < 0.5))
        {
            _3264 = true;
            break;
        }
        if ((_3091 + 1.0) < _3089.x)
        {
            _3264 = true;
            break;
        }
        _3264 = false;
        break;
    }
    float _3468;
    if (_3264)
    {
        discard_state = true;
        _3468 = 0.0;
    }
    else
    {
        _3468 = cbInstanceData._m0[_2952].w;
    }
    SV_Target.x = _3095;
    SV_Target.y = _3096;
    SV_Target.z = _3097;
    SV_Target.w = _3468;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2952].w;
    discard_exit();
}


