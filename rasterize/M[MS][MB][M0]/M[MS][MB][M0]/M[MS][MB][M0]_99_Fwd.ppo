#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1187;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3493 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3504 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3515 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _263 = _258 + 1u;
    uint _267 = _258 + 2u;
    float _276 = sqrt(((cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x));
    float _277 = _276 * TEXCOORD.z;
    float _278 = _276 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _277) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _278) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _320 = _315.x * cbMtdParam._m0[11u].x;
    float _321 = _315.y * cbMtdParam._m0[11u].y;
    float _322 = _315.z * cbMtdParam._m0[11u].z;
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _277) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _278) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _379 = _377.x;
    float _389 = dot(vec4(_379, _377.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _406 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_379 - _389) * cbMtdParam._m0[24u].x) + _389) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3526 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _414 = (_407 * ((_341.x * cbMtdParam._m0[12u].x) - _320)) + _320;
    float _415 = (_407 * ((_341.y * cbMtdParam._m0[12u].y) - _321)) + _321;
    float _416 = (_407 * ((_341.z * cbMtdParam._m0[12u].z) - _322)) + _322;
    float _420 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _291.x) * _414;
    float _423 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _291.y) * _415;
    float _426 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _291.z) * _416;
    float _433 = ((_414 - _420) * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) + _420;
    float _434 = ((_415 - _423) * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) + _423;
    float _435 = ((_416 - _426) * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) + _426;
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _277) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _278) + cbTextureTilingScale._m0[20u].w));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _277) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _278) + cbTextureTilingScale._m0[4u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _499 = _497.x;
    float _500 = _497.y;
    float _501 = _497.z;
    float _510 = ((_480.z - _501) * _407) + _501;
    float _513 = ((((_480.x - _499) * _407) + _499) * 2.0) + (-1.0);
    float _514 = ((((_480.y - _500) * _407) + _500) * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3537 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))));
    float _523 = _513 + ((((_453.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _524 = _514 + ((((_453.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _527 = fma(_520, _225, fma(_524, _232, _523 * _218));
    float _530 = fma(_520, _226, fma(_524, _233, _523 * _219));
    float _533 = fma(_520, _227, fma(_524, _234, _523 * _220));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _581 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _277) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _583 = _581.x;
    float _584 = 1.0 - _583;
    float _590 = (cbMtdParam._m0[19u].x + dot(vec4(_537 * _527, _537 * _530, _537 * _533, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_583 - _584) * cbMtdParam._m0[24u].z) + _584) * cbMtdParam._m0[21u].z);
    float _3548 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _598 = (_591 * (cbMtdParam._m0[17u].x - _433)) + _433;
    float _599 = (_591 * (cbMtdParam._m0[17u].y - _434)) + _434;
    float _600 = (_591 * (cbMtdParam._m0[17u].z - _435)) + _435;
    float _605 = (((_453.z - _510) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _510;
    vec4 _618 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _277) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _278) + cbTextureTilingScale._m0[15u].w));
    float _625 = (_618.x * 2.0) + (-1.0);
    float _626 = (_618.y * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3559 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _635 = ((_618.z - _605) * _591) + _605;
    float _645 = ((sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) - _520) * _591) + _520;
    float _648 = (((_625 - _523) * _591) + _523) + (cbMtdParam._m0[21u].x * _523);
    float _649 = (((_626 - _524) * _591) + _524) + (cbMtdParam._m0[21u].x * _524);
    float _651 = cbMtdParam._m0[22u].x + _553.w;
    float _654 = fma(_645, _225, fma(_649, _232, _648 * _218));
    float _657 = fma(_645, _226, fma(_649, _233, _648 * _219));
    float _660 = fma(_645, _227, fma(_649, _234, _648 * _220));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3570 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _668 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3592 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3603 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3614 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _738 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _728);
    float _739 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _728);
    float _740 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _728);
    float _744 = inversesqrt(dot(vec3(_738, _739, _740), vec3(_738, _739, _740)));
    float _745 = _738 * _744;
    float _746 = _739 * _744;
    float _747 = _740 * _744;
    float _753 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _754 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _772 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _775 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _778 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _792 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0)))) * cbInstanceData._m0[_792].z;
    float _3625 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _753, cbSceneParam._m0[86u].y * _754));
    float _816 = ((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * TEXCOORD_5.w) * _812.x;
    float _817 = dot(vec3(_665, _666, _667), vec3(_745, _746, _747));
    float _820 = _817 * 2.0;
    float _824 = (_820 * _665) - _745;
    float _825 = (_820 * _666) - _746;
    float _826 = (_820 * _667) - _747;
    float _830 = abs(dot(vec3(_745, _746, _747), vec3(_665, _666, _667)));
    float _3658 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _832 = sqrt(_668);
    float _845 = exp2((_832 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_832 * 3.0));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1186;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _911 = fma(_885, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877));
        float _915 = fma(_885, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877));
        float _919 = fma(_885, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877));
        float _944 = _877 + _665;
        float _945 = _881 + _666;
        float _946 = _885 + _667;
        float _956 = fma(_946, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944)) - _911;
        float _957 = fma(_946, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944)) - _915;
        float _958 = fma(_946, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944)) - _919;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_911 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_915 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[34u].z) + ((((((_919 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1014 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_980.x + (-0.5));
        float _1016 = _1014 * (_980.y + (-0.5));
        float _1017 = _1014 * (_980.z + (-0.5));
        float _1024 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_987.x + (-0.5));
        float _1026 = _1024 * (_987.y + (-0.5));
        float _1027 = _1024 * (_987.z + (-0.5));
        float _1034 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_994.x + (-0.5));
        float _1036 = _1034 * (_994.y + (-0.5));
        float _1037 = _1034 * (_994.z + (-0.5));
        float _1044 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1001.x + (-0.5));
        float _1046 = _1044 * (_1001.y + (-0.5));
        float _1047 = _1044 * (_1001.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1068 = (dot(vec3(_665, _666, _667), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1078 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3706 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1080 + 1.0))) + _1085) * _1048;
        float _1095 = _1016 * 0.5;
        float _1096 = _1026 * 0.5;
        float _1097 = _1036 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_665, _666, _667), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3739 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1122 + 1.0))) + _1127) * _1049;
        float _1137 = _1017 * 0.5;
        float _1138 = _1027 * 0.5;
        float _1139 = _1037 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_665, _666, _667), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3772 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1164 + 1.0))) + _1169) * _1050;
        _1186 = _1017;
        _1188 = _1016;
        _1189 = _1015;
        _1190 = _1027;
        _1191 = _1026;
        _1192 = _1025;
        _1193 = _1037;
        _1194 = _1036;
        _1195 = _1035;
        _1196 = _1050;
        _1197 = _1049;
        _1198 = _1048;
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _1187;
        _1188 = _1187;
        _1189 = _1187;
        _1190 = _1187;
        _1191 = _1187;
        _1192 = _1187;
        _1193 = _1187;
        _1194 = _1187;
        _1195 = _1187;
        _1196 = _1187;
        _1197 = _1187;
        _1198 = _1187;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1226 = fma(_885, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877));
        float _1230 = fma(_885, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877));
        float _1234 = fma(_885, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877));
        float _1257 = _877 + _665;
        float _1258 = _881 + _666;
        float _1259 = _885 + _667;
        float _1269 = fma(_1259, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1257)) - _1226;
        float _1270 = fma(_1259, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1257)) - _1230;
        float _1271 = fma(_1259, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1257)) - _1234;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1226 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1230 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[35u].z) + ((((((_1234 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1325 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1292.x + (-0.5));
        float _1327 = _1325 * (_1292.y + (-0.5));
        float _1328 = _1325 * (_1292.z + (-0.5));
        float _1335 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1299.x + (-0.5));
        float _1337 = _1335 * (_1299.y + (-0.5));
        float _1338 = _1335 * (_1299.z + (-0.5));
        float _1345 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1306.x + (-0.5));
        float _1347 = _1345 * (_1306.y + (-0.5));
        float _1348 = _1345 * (_1306.z + (-0.5));
        float _1355 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1313.x + (-0.5));
        float _1357 = _1355 * (_1313.y + (-0.5));
        float _1358 = _1355 * (_1313.z + (-0.5));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = _1326 * 0.5;
        float _1363 = _1336 * 0.5;
        float _1364 = _1346 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_665, _666, _667), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _3835 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1389 + 1.0))) + _1394) * _1359;
        float _1404 = _1327 * 0.5;
        float _1405 = _1337 * 0.5;
        float _1406 = _1347 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_665, _666, _667), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _3868 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1431 + 1.0))) + _1436) * _1360;
        float _1446 = _1328 * 0.5;
        float _1447 = _1338 * 0.5;
        float _1448 = _1348 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_665, _666, _667), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3901 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1473 + 1.0))) + _1478) * _1361;
        _1495 = _1328;
        _1496 = _1327;
        _1497 = _1326;
        _1498 = _1338;
        _1499 = _1337;
        _1500 = _1336;
        _1501 = _1348;
        _1502 = _1347;
        _1503 = _1346;
        _1504 = _1361;
        _1505 = _1360;
        _1506 = _1359;
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1187;
        _1496 = _1187;
        _1497 = _1187;
        _1498 = _1187;
        _1499 = _1187;
        _1500 = _1187;
        _1501 = _1187;
        _1502 = _1187;
        _1503 = _1187;
        _1504 = _1187;
        _1505 = _1187;
        _1506 = _1187;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1199)) + _1199;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1201)) + _1201;
    float _1542 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1519));
    float _1563 = _824 * 0.5;
    float _1564 = _825 * 0.5;
    float _1565 = _826 * 0.5;
    float _1566 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1569 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1572 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1606;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1579 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1186, _1190, _1193, _1196));
        float _1583 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1587 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1594 = dot(vec4(cbModelParam._m0[39u]), vec4(_1563, _1564, _1565, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1617;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1608 = dot(vec4(cbModelParam._m0[40u]), vec4(_1563, _1564, _1565, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1621 = (_1617 * cbModelParam._m0[1u].x) + (_1606 * (1.0 - cbModelParam._m0[1u].x));
    float _1631 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1631 : min(cbModelParam._m0[25u].z, _1631));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_885, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_885, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_885, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_826, cbModelParam._m0[13u].z, fma(_825, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824));
        float _1694 = fma(_826, cbModelParam._m0[14u].z, fma(_825, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824));
        float _1697 = fma(_826, cbModelParam._m0[15u].z, fma(_825, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1725 = frontier_phi_14_12_ladder;
        }
        float _1926;
        if (_1694 > 0.0)
        {
            _1926 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1926 = frontier_phi_23_19_ladder;
        }
        float _2169;
        if (_1697 > 0.0)
        {
            _2169 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2169 = frontier_phi_35_30_ladder;
        }
        float _2171 = isnan(_1926) ? _1725 : (isnan(_1725) ? _1926 : min(_1725, _1926));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1691) + _1680;
        float _2177 = (_2172 * _1694) + _1684;
        float _2178 = (_2172 * _1697) + _1688;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2179;
        float _2183 = _2179 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 > _2183) || ((_2177 < _2181) || ((_2176 < _2181) || (_2176 > _2183))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2302 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2178, cbModelParam._m0[9u].z, fma(_2177, cbModelParam._m0[9u].y, _2176 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2178, cbModelParam._m0[10u].z, fma(_2177, cbModelParam._m0[10u].y, _2176 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2178, cbModelParam._m0[11u].z, fma(_2177, cbModelParam._m0[11u].y, _2176 * cbModelParam._m0[11u].x))), _1632);
            frontier_phi_13_35_ladder = _2302.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2302.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2302.x * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_13_35_ladder_2;
        _1715 = frontier_phi_13_35_ladder_1;
        _1717 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_824, _825, _826), _1632);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1776 = fma(_885, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877)) + cbModelParam._m0[21u].w;
        float _1780 = fma(_885, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877)) + cbModelParam._m0[22u].w;
        float _1784 = fma(_885, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877)) + cbModelParam._m0[23u].w;
        float _1787 = fma(_826, cbModelParam._m0[21u].z, fma(_825, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824));
        float _1790 = fma(_826, cbModelParam._m0[22u].z, fma(_825, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824));
        float _1793 = fma(_826, cbModelParam._m0[23u].z, fma(_825, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824));
        float _1931;
        if (_1787 > 0.0)
        {
            _1931 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1931 = frontier_phi_25_21_ladder;
        }
        float _2196;
        if (_1790 > 0.0)
        {
            _2196 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2196 = frontier_phi_37_32_ladder;
        }
        float _2401;
        if (_1793 > 0.0)
        {
            _2401 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2401 = frontier_phi_46_43_ladder;
        }
        float _2403 = isnan(_2196) ? _1931 : (isnan(_1931) ? _2196 : min(_1931, _2196));
        float _2404 = isnan(_2401) ? _2403 : (isnan(_2403) ? _2401 : min(_2403, _2401));
        float _2408 = (_2404 * _1787) + _1776;
        float _2409 = (_2404 * _1790) + _1780;
        float _2410 = (_2404 * _1793) + _1784;
        float _2411 = _2404 * 9.9999997473787516355514526367188e-05;
        float _2412 = (-1.0) - _2411;
        float _2414 = _2411 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2410 > _2414) || ((_2410 < _2412) || ((_2409 > _2414) || ((_2409 < _2412) || ((_2408 < _2412) || (_2408 > _2414))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2410, cbModelParam._m0[17u].z, fma(_2409, cbModelParam._m0[17u].y, _2408 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2410, cbModelParam._m0[18u].z, fma(_2409, cbModelParam._m0[18u].y, _2408 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2410, cbModelParam._m0[19u].z, fma(_2409, cbModelParam._m0[19u].y, _2408 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_22_46_ladder = _2609.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2609.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2609.x * cbModelParam._m0[1u].z;
        }
        _1812 = frontier_phi_22_46_ladder_2;
        _1814 = frontier_phi_22_46_ladder_1;
        _1816 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_824, _825, _826), _1722);
        _1812 = _1796.x * cbModelParam._m0[1u].z;
        _1814 = _1796.y * cbModelParam._m0[1u].z;
        _1816 = _1796.z * cbModelParam._m0[1u].z;
    }
    float _1828 = ((((1.0 - _845) * ((_832 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_845 * _832)) * _816;
    float _1829 = _1828 * ((cbModelParam._m0[1u].w * (_1812 - _1713)) + _1713);
    float _1830 = _1828 * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1831 = _1828 * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1834 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, _1829 * cbSceneParam._m0[91u].x));
    uvec4 _1850 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _1852 = _1850.x * 14u;
    uint _1853 = _1852 + 13u;
    float _1860 = _816 + (-1.0);
    float _1865 = (cbLight._m0[_1853].x * _1860) + 1.0;
    float _1866 = (cbLight._m0[_1853].y * _1860) + 1.0;
    float _1867 = (cbLight._m0[_1853].z * _1860) + 1.0;
    float _1868 = (cbLight._m0[_1853].w * _1860) + 1.0;
    uint _1869 = _1852 + 5u;
    float _1875 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1879 = _1852 + 4u;
    float _1885 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    uint _1889 = _1852 | 1u;
    float _1900 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_665, _666, _667));
    float _1903 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_665, _666, _667));
    float _4037 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _4048 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1908 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1910 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1917 = ((cbLight._m0[_1869].x * _1875) * _1910) + ((cbLight._m0[_1879].x * _1885) * _1908);
    float _1918 = ((_1875 * cbLight._m0[_1869].y) * _1910) + ((_1885 * cbLight._m0[_1879].y) * _1908);
    float _1919 = ((_1875 * cbLight._m0[_1869].z) * _1910) + ((_1885 * cbLight._m0[_1879].z) * _1908);
    uvec4 _1923 = floatBitsToUint(cbLight._m0[_1852 + 12u]);
    bool _1925 = _1923.x == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1925)
    {
        _1936 = _1917;
        _1938 = _1918;
        _1940 = _1919;
    }
    else
    {
        uint _1944 = _1852 + 6u;
        float _1960 = (dot(vec3(cbLight._m0[_1852 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _1961 = _1960 * _1960;
        float _4059 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1963 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _1936 = (((cbLight._m0[_1944].x * 0.3183098733425140380859375) * _1962) * _1963) + _1917;
        _1938 = (((cbLight._m0[_1944].y * 0.3183098733425140380859375) * _1962) * _1963) + _1918;
        _1940 = (((cbLight._m0[_1944].z * 0.3183098733425140380859375) * _1962) * _1963) + _1919;
    }
    bool _1943 = _1923.y == 0u;
    float _1981;
    float _1983;
    float _1985;
    if (_1943)
    {
        _1981 = _1936;
        _1983 = _1938;
        _1985 = _1940;
    }
    else
    {
        uint _2140 = _1852 + 7u;
        float _2156 = (dot(vec3(cbLight._m0[_1852 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2157 = _2156 * _2156;
        float _4075 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2158 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2159 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _1981 = (((cbLight._m0[_2140].x * 0.3183098733425140380859375) * _2158) * _2159) + _1936;
        _1983 = (((cbLight._m0[_2140].y * 0.3183098733425140380859375) * _2158) * _2159) + _1938;
        _1985 = (((cbLight._m0[_2140].z * 0.3183098733425140380859375) * _2158) * _2159) + _1940;
    }
    uint _1988 = _1852 + 8u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _668) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1852].x + _745;
    float _2004 = cbLight._m0[_1852].y + _746;
    float _2005 = cbLight._m0[_1852].z + _747;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1852].xyz));
    float _4091 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _2017 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2018 = dot(vec3(_665, _666, _667), vec3(_2010, _2011, _2012));
    float _4113 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2010, _2011, _2012));
    float _4124 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2002 * _2002;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = 1.0 - _2002;
    float _2053 = (0.5 / (((_2017 * ((_2016 * _2042) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2042) + _2002) * _2016))) * _2016;
    float _4135 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2055 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    uint _2066 = _1852 + 9u;
    float _2077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1889].w)) * _668) * 0.949999988079071044921875);
    float _2078 = _2077 * _2077;
    float _2079 = cbLight._m0[_1889].x + _745;
    float _2080 = cbLight._m0[_1889].y + _746;
    float _2081 = cbLight._m0[_1889].z + _747;
    float _2085 = inversesqrt(dot(vec3(_2079, _2080, _2081), vec3(_2079, _2080, _2081)));
    float _2086 = _2085 * _2079;
    float _2087 = _2085 * _2080;
    float _2088 = _2085 * _2081;
    float _2089 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_1889].xyz));
    float _4146 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2093 = dot(vec3(_665, _666, _667), vec3(_2086, _2087, _2088));
    float _4157 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2097 = dot(vec3(cbLight._m0[_1889].xyz), vec3(_2086, _2087, _2088));
    float _4168 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2101 = _2078 * _2078;
    float _2105 = ((_2096 * _2096) * (_2101 + (-1.0))) + 1.0;
    float _2114 = (exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2115 = 1.0 - _2078;
    float _2125 = (0.5 / (((_2017 * ((_2092 * _2115) + _2078)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2115) + _2078) * _2092))) * _2092;
    float _4179 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2101 / ((_2105 * _2105) * 3.141590118408203125));
    float _2137 = (((_2114 * cbLight._m0[_2066].x) * _2127) * _1875) + (((_2041 * cbLight._m0[_1988].x) * _2055) * _1885);
    float _2138 = (((_2114 * cbLight._m0[_2066].y) * _2127) * _1875) + (((_2041 * cbLight._m0[_1988].y) * _2055) * _1885);
    float _2139 = (((_2114 * cbLight._m0[_2066].z) * _2127) * _1875) + (((_2041 * cbLight._m0[_1988].z) * _2055) * _1885);
    float _2201;
    float _2203;
    float _2205;
    if (_1925)
    {
        _2201 = _2137;
        _2203 = _2138;
        _2205 = _2139;
    }
    else
    {
        uint _2207 = _1852 + 2u;
        uint _2211 = _1852 + 10u;
        float _2225 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _668) * 0.949999988079071044921875);
        float _2226 = _2225 * _2225;
        float _2227 = cbLight._m0[_2207].x + _745;
        float _2228 = cbLight._m0[_2207].y + _746;
        float _2229 = cbLight._m0[_2207].z + _747;
        float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
        float _2234 = _2233 * _2227;
        float _2235 = _2233 * _2228;
        float _2236 = _2233 * _2229;
        float _2237 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2207].xyz));
        float _4190 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2241 = dot(vec3(_665, _666, _667), vec3(_2234, _2235, _2236));
        float _4201 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2244 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2245 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2234, _2235, _2236));
        float _4212 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2249 = _2226 * _2226;
        float _2253 = ((_2244 * _2244) * (_2249 + (-1.0))) + 1.0;
        float _2262 = (exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2263 = 1.0 - _2226;
        float _2273 = (0.5 / (((_2017 * ((_2240 * _2263) + _2226)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2263) + _2226) * _2240))) * _2240;
        float _4223 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2275 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2249 / ((_2253 * _2253) * 3.141590118408203125));
        float _2276 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
        _2201 = (((_2262 * cbLight._m0[_2211].x) * _2275) * _2276) + _2137;
        _2203 = (((_2262 * cbLight._m0[_2211].y) * _2275) * _2276) + _2138;
        _2205 = (((_2262 * cbLight._m0[_2211].z) * _2275) * _2276) + _2139;
    }
    float _2311;
    float _2313;
    float _2315;
    if (_1943)
    {
        _2311 = _2201;
        _2313 = _2203;
        _2315 = _2205;
    }
    else
    {
        uint _2322 = _1852 + 3u;
        uint _2326 = _1852 + 11u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _668) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _745;
        float _2343 = cbLight._m0[_2322].y + _746;
        float _2344 = cbLight._m0[_2322].z + _747;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2322].xyz));
        float _4239 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2356 = dot(vec3(_665, _666, _667), vec3(_2349, _2350, _2351));
        float _4250 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4261 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2377 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2378 = 1.0 - _2341;
        float _2388 = (0.5 / (((_2017 * ((_2355 * _2378) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2378) + _2341) * _2355))) * _2355;
        float _4272 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
        _2311 = (((_2377 * cbLight._m0[_2326].x) * _2390) * _2391) + _2201;
        _2313 = (((_2377 * cbLight._m0[_2326].y) * _2390) * _2391) + _2203;
        _2315 = (((_2377 * cbLight._m0[_2326].z) * _2390) * _2391) + _2205;
    }
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    float _2534;
    float _2536;
    if (_1850.y == 0u)
    {
        float _2466 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2467 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2466;
        float _2468 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2466;
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2466;
        uvec4 _2481 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2482 = _2481.x;
        uint _2493 = uint((float(_2481.y) * floor(float(uint(cbSceneParam._m0[85u].y * _754) / _2482))) + floor(float(uint(cbSceneParam._m0[85u].x * _753) / _2482)));
        float _2503 = (log2(_2469 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2504 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        uint _2507 = uint(isnan(14.0) ? _2504 : (isnan(_2504) ? 14.0 : min(_2504, 14.0)));
        uvec4 _2512 = texelFetch(g_lightClusterGridBuffer, int(((_2507 << 2u) + (_2493 << 6u)) >> 2u));
        uint _2513 = _2512.x;
        uint _2514 = _2481.z;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((((1u << ((_2514 >> 4u) & 15u)) + 4294967295u) & _2513) == 0u) || ((_2514 & 240u) == 0u))
        {
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
            _2622 = 0.0;
            _2624 = 0.0;
        }
        else
        {
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2623;
            float _2625;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            uint _2765 = 0u;
            uint _2774;
            bool _2775;
            for (;;)
            {
                _2774 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2765 << 2u)) >> 2u)).x;
                _2775 = _2774 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2775)
                {
                    frontier_phi_61_pred = _2759;
                    frontier_phi_61_pred_1 = _2764;
                    frontier_phi_61_pred_2 = _2763;
                    frontier_phi_61_pred_3 = _2762;
                    frontier_phi_61_pred_4 = _2761;
                    frontier_phi_61_pred_5 = _2760;
                }
                else
                {
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    float _2888;
                    uint _2889;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2761;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2774;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    for (;;)
                    {
                        uint _2893 = uint(findLSB(_2889)) + (_2765 << 5u);
                        uint _2890 = (_2889 + 4294967295u) & _2889;
                        uint _2895 = _2893 * 48u;
                        vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2895)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2895 + 3u)).x));
                        uint _2915 = (_2893 * 48u) + 4u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2915)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2915 + 3u)).x));
                        uint _2934 = (_2893 * 48u) + 8u;
                        vec3 _2945 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x));
                        float _2949 = _2909.x - _2467;
                        float _2950 = _2909.y - _2468;
                        float _2951 = _2909.z - _2469;
                        float _2952 = dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951));
                        float _2955 = inversesqrt(_2952);
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2959 = dot(vec3(_772, _775, _778), vec3(_2956, _2957, _2958));
                        float _2964 = 1.0 - (_2952 * _2909.w);
                        float _4298 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2966 = sqrt(_2952) * _2928.w;
                        float _2969 = 1.39999997615814208984375 / (_2966 + 1.39999997615814208984375);
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2959) + _2970;
                        float _2976 = _2966 * _2966;
                        float _2980 = ((isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0))) * _2965) / ((_2976 * 0.699999988079071044921875) + 1.0);
                        float _2984 = (-0.0) - _2467;
                        float _2985 = (-0.0) - _2468;
                        float _2986 = (-0.0) - _2469;
                        float _2990 = inversesqrt(dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986)));
                        float _2991 = _2990 * _2984;
                        float _2992 = _2990 * _2985;
                        float _2993 = _2990 * _2986;
                        float _3001 = exp2(log2(1.0 / ((_2976 * 3.5) + 5.0)) * 0.25);
                        float _3002 = 1.0 - _832;
                        float _3009 = sqrt(1.0 - ((1.0 - (_3002 * _3002)) * (1.0 - (_3001 * _3001))));
                        float _3010 = _3009 * _3009;
                        float _3011 = _3010 * _3010;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3014 = _2993 + _2958;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3022 = dot(vec3(_772, _775, _778), vec3(_2991, _2992, _2993));
                        float _4314 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3026 = dot(vec3(_772, _775, _778), vec3(_3018 * _3012, _3018 * _3013, _3018 * _3014));
                        float _4325 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3029 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3033 = ((_3029 * _3029) * (_3011 + (-1.0))) + 1.0;
                        float _3034 = _2969 * _3010;
                        float _3035 = _3034 * _3034;
                        float _3038 = ((1.0 - _3035) * _2959) + _3035;
                        float _4336 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3040 = 1.0 - _3010;
                        float _3050 = (0.5 / (((_3039 * ((_3025 * _3040) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_3039 * _3040) + _3010) * _3025))) * _3039;
                        float _4347 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3061 = (((_3011 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3033 * _3033) * ((_2976 * 2.1991131305694580078125) + 3.141590118408203125))) * _2965;
                        _2818 = (_2980 * _2928.x) + _2886;
                        _2819 = (_2980 * _2928.y) + _2887;
                        _2820 = (_2980 * _2928.z) + _2888;
                        _2815 = (_3061 * _2945.x) + _2883;
                        _2816 = (_3061 * _2945.y) + _2884;
                        _2817 = (_3061 * _2945.z) + _2885;
                        if (_2890 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2817;
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2890;
                        }
                    }
                    frontier_phi_61_pred = _2815;
                    frontier_phi_61_pred_1 = _2820;
                    frontier_phi_61_pred_2 = _2819;
                    frontier_phi_61_pred_3 = _2818;
                    frontier_phi_61_pred_4 = _2817;
                    frontier_phi_61_pred_5 = _2816;
                }
                _2615 = frontier_phi_61_pred;
                _2625 = frontier_phi_61_pred_1;
                _2623 = frontier_phi_61_pred_2;
                _2621 = frontier_phi_61_pred_3;
                _2619 = frontier_phi_61_pred_4;
                _2617 = frontier_phi_61_pred_5;
                uint _2766 = _2765 + 1u;
                if (_2766 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2759 = _2615;
                    _2760 = _2617;
                    _2761 = _2619;
                    _2762 = _2621;
                    _2763 = _2623;
                    _2764 = _2625;
                    _2765 = _2766;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
            _2622 = _2623;
            _2624 = _2625;
        }
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.z;
        uint _2631 = (_2629 >> 8u) & 15u;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((4294967295u << _2631) & _2513) == 0u)
        {
            _2727 = _2614;
            _2729 = _2616;
            _2731 = _2618;
            _2733 = _2620;
            _2735 = _2622;
            _2737 = _2624;
        }
        else
        {
            float _2752 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
            float _2753 = _2752 * _2467;
            float _2754 = _2752 * _2468;
            float _2755 = _2752 * _2469;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2631 < ((_2629 >> 12u) & 15u))
            {
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2736;
                float _2738;
                float _2866 = _2614;
                float _2867 = _2616;
                float _2868 = _2618;
                float _2869 = _2620;
                float _2870 = _2622;
                float _2871 = _2624;
                uint _2872 = _2631;
                uint _2881;
                bool _2882;
                for (;;)
                {
                    _2881 = texelFetch(g_lightClassification, int((((_2507 << 5u) + (_2493 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                    _2882 = _2881 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2882)
                    {
                        frontier_phi_67_pred = _2869;
                        frontier_phi_67_pred_1 = _2870;
                        frontier_phi_67_pred_2 = _2871;
                        frontier_phi_67_pred_3 = _2868;
                        frontier_phi_67_pred_4 = _2867;
                        frontier_phi_67_pred_5 = _2866;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        float _3081 = _2868;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        uint _3085 = _2881;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3154;
                        vec4 _3169;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3096 = ((_2872 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3141 = (_3096 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3096 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3096 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3096 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2469, _3203.z, fma(_2468, _3203.y, _3203.x * _2467)) + _3203.w;
                            _3216 = !((fma(_2469, _3184.z, fma(_2468, _3184.y, _3184.x * _2467)) + _3184.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3111.x - _2467;
                                float _3244 = _3111.y - _2468;
                                float _3245 = _3111.z - _2469;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3112 * _3112));
                                float _4358 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3261 = sqrt(_3246) * _3127.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_772, _775, _778))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_2469, _3154.z, fma(_2468, _3154.y, _3154.x * _2467)) + _3154.w) / _3215;
                                float _3275 = (fma(_2469, _3169.z, fma(_2468, _3169.y, _3169.x * _2467)) + _3169.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4374 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _832;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2753;
                                float _3305 = _3251 - _2754;
                                float _3306 = _3252 - _2755;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_772, _775, _778), vec3((-0.0) - _2753, (-0.0) - _2754, (-0.0) - _2755));
                                float _4385 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3318 = dot(vec3(_772, _775, _778), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4396 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_772, _775, _778), vec3(_3250, _3251, _3252))) + _3327;
                                float _4407 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4418 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3355 * _3139.x;
                                frontier_phi_73_pred_1 = _3355 * _3139.y;
                                frontier_phi_73_pred_2 = _3281 * _3127.z;
                                frontier_phi_73_pred_3 = _3281 * _3127.y;
                                frontier_phi_73_pred_4 = _3281 * _3127.x;
                                frontier_phi_73_pred_5 = _3355 * _3139.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3359 = frontier_phi_73_pred;
                            _3360 = frontier_phi_73_pred_1;
                            _3364 = frontier_phi_73_pred_2;
                            _3363 = frontier_phi_73_pred_3;
                            _3362 = frontier_phi_73_pred_4;
                            _3361 = frontier_phi_73_pred_5;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            _3071 = _3364 + _3084;
                            _3066 = _3359 + _3079;
                            _3067 = _3360 + _3080;
                            _3068 = _3361 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3069;
                        frontier_phi_67_pred_1 = _3070;
                        frontier_phi_67_pred_2 = _3071;
                        frontier_phi_67_pred_3 = _3068;
                        frontier_phi_67_pred_4 = _3067;
                        frontier_phi_67_pred_5 = _3066;
                    }
                    _2734 = frontier_phi_67_pred;
                    _2736 = frontier_phi_67_pred_1;
                    _2738 = frontier_phi_67_pred_2;
                    _2732 = frontier_phi_67_pred_3;
                    _2730 = frontier_phi_67_pred_4;
                    _2728 = frontier_phi_67_pred_5;
                    uint _2873 = _2872 + 1u;
                    if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2866 = _2728;
                        _2867 = _2730;
                        _2868 = _2732;
                        _2869 = _2734;
                        _2870 = _2736;
                        _2871 = _2738;
                        _2872 = _2873;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2736;
                frontier_phi_55_56_ladder_1 = _2738;
                frontier_phi_55_56_ladder_2 = _2734;
                frontier_phi_55_56_ladder_3 = _2732;
                frontier_phi_55_56_ladder_4 = _2730;
                frontier_phi_55_56_ladder_5 = _2728;
            }
            else
            {
                frontier_phi_55_56_ladder = _2622;
                frontier_phi_55_56_ladder_1 = _2624;
                frontier_phi_55_56_ladder_2 = _2620;
                frontier_phi_55_56_ladder_3 = _2618;
                frontier_phi_55_56_ladder_4 = _2616;
                frontier_phi_55_56_ladder_5 = _2614;
            }
            _2727 = frontier_phi_55_56_ladder_5;
            _2729 = frontier_phi_55_56_ladder_4;
            _2731 = frontier_phi_55_56_ladder_3;
            _2733 = frontier_phi_55_56_ladder_2;
            _2735 = frontier_phi_55_56_ladder;
            _2737 = frontier_phi_55_56_ladder_1;
        }
        float _2742 = isnan(1.0) ? _816 : (isnan(_816) ? 1.0 : min(_816, 1.0));
        _2526 = (_2742 * _2733) + _1981;
        _2528 = (_2742 * _2735) + _1983;
        _2530 = (_2742 * _2737) + _1985;
        _2532 = ((_2727 * 0.039999999105930328369140625) * _2742) + _2311;
        _2534 = ((_2729 * 0.039999999105930328369140625) * _2742) + _2313;
        _2536 = ((_2731 * 0.039999999105930328369140625) * _2742) + _2315;
    }
    else
    {
        _2526 = _1981;
        _2528 = _1983;
        _2530 = _1985;
        _2532 = _2311;
        _2534 = _2313;
        _2536 = _2315;
    }
    float _4434 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4445 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4456 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    uint _2556 = _258 + 6u;
    float _2564 = _753 / cbSceneParam._m0[86u].x;
    float _2565 = _754 / cbSceneParam._m0[86u].y;
    vec4 _2579 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2564, _2565, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2581 = _2579.x;
    float _2582 = _2579.y;
    float _2583 = _2579.z;
    float _2584 = _2579.w;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2639 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2640 = _2639 / _686;
        float _2651 = _2640 * _738;
        float _2652 = _739 * _2640;
        float _2653 = (-0.0) - _2652;
        float _2655 = _2640 * _740;
        float _2657 = (cbSceneParam._m0[77u].w * _2653) / _2639;
        float _2658 = _2657 + cbSceneParam._m0[79u].w;
        float _2659 = cbSceneParam._m0[79u].w - _2652;
        float _2665 = sqrt(((_2651 * _2651) + (_2652 * _2652)) + (_2655 * _2655));
        float _2668 = (1.0 - (cbSceneParam._m0[77u].w / _2639)) * _2665;
        float _2673 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2675 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2828;
        if (abs((_2653 - _2657) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2828 = ((((_2658 > 0.0) ? exp2(_2673 * _2658) : (2.0 - exp2(_2675 * _2658))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2668;
        }
        else
        {
            float _2788 = 1.0 / cbSceneParam._m0[80u].x;
            float _2789 = isnan(_2659) ? _2658 : (isnan(_2658) ? _2659 : max(_2658, _2659));
            float _2790 = isnan(_2659) ? _2658 : (isnan(_2658) ? _2659 : min(_2658, _2659));
            float _2799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : min(_2789, 0.0));
            float _2800 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : min(_2790, 0.0));
            _2828 = ((abs(_2665 / _2653) * cbSceneParam._m0[80u].y) * ((((_2799 - _2800) * 2.0) - ((exp2(_2673 * (isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0)))) - exp2(_2673 * (isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0))))) * _2788)) - ((exp2(_2675 * _2799) - exp2(_2675 * _2800)) * _2788))) + (_2668 * cbSceneParam._m0[80u].z);
        }
        vec4 _2830 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2564, _2565, 1.0), 0.0);
        float _2839 = exp2((_2828 * (-1.44269502162933349609375)) * (1.0 - _2830.w));
        float _2840 = log2(_2839);
        float _2856 = log2(_2584);
        _2677 = (exp2(_2856 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].x)) * _2830.x) / cbSceneParam._m0[78u].x)) + _2581;
        _2679 = (exp2(_2856 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].y)) * _2830.y) / cbSceneParam._m0[78u].y)) + _2582;
        _2681 = (exp2(_2856 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2840 * cbSceneParam._m0[78u].z)) * _2830.z) / cbSceneParam._m0[78u].z)) + _2583;
        _2683 = _2839 * _2584;
    }
    else
    {
        _2677 = _2581;
        _2679 = _2582;
        _2681 = _2583;
        _2683 = _2584;
    }
    float _2695 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2696 = _2695 == 3.0;
    float _2697 = log2(_2683);
    float _2704 = exp2(_2697 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2526 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _816))) + ((_2532 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1621)) * cbPerFrame._m0[3u].x));
    float _2705 = exp2(_2697 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2528 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _816))) + ((_2534 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1621)) * cbPerFrame._m0[3u].x));
    float _2706 = exp2(_2697 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2530 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _816))) + ((_2536 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1621)) * cbPerFrame._m0[3u].x));
    float _2715 = (_2695 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2715 * (_2696 ? _2704 : (_2704 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.y = _2715 * (_2696 ? _2705 : (_2705 + (cbSceneParam._m0[72u].w * _2679)));
    SV_Target.z = _2715 * (_2696 ? _2706 : (_2706 + (cbSceneParam._m0[72u].w * _2681)));
    SV_Target.w = cbInstanceData._m0[_2556].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2556].w;
}


