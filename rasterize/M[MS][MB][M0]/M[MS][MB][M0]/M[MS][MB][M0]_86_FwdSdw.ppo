#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1137;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3726 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _374) + _447;
    float _459 = ((((_426.x - _445) * _374) + _445) * 2.0) + (-1.0);
    float _460 = ((((_426.y - _446) * _374) + _446) * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3737 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _466 = sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _509 = _507.x;
    float _510 = 1.0 - _509;
    float _523 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_509 - _510) * cbMtdParam._m0[24u].z) + _510) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3748 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _524 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _531 = (_524 * (cbMtdParam._m0[17u].x - _381)) + _381;
    float _532 = (_524 * (cbMtdParam._m0[17u].y - _382)) + _382;
    float _533 = (_524 * (cbMtdParam._m0[17u].z - _383)) + _383;
    float _538 = (((_401.z - _456) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _456;
    float _542 = ((_482.z - _538) * cbMtdParam._m0[19u].w) + _538;
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _562 = (_555.x * 2.0) + (-1.0);
    float _563 = (_555.y * 2.0) + (-1.0);
    float _564 = dot(vec2(_562, _563), vec2(_562, _563));
    float _3759 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _572 = (_524 * (_555.z - _542)) + _542;
    float _581 = (_459 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_401.x * 2.0) + (-1.0)))) + (((_482.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _582 = (_460 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_401.y * 2.0) + (-1.0)))) + (((_482.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _594 = (((_562 - _581) + (cbMtdParam._m0[21u].x * _581)) * _524) + _581;
    float _595 = (((_563 - _582) + (cbMtdParam._m0[21u].x * _582)) * _524) + _582;
    float _596 = (_524 * (sqrt(1.0 - (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) - _466)) + _466;
    float _601 = cbMtdParam._m0[22u].x + _482.w;
    float _604 = fma(_596, _225 * NORMAL.x, fma(_595, _232 * TANGENT.x, (_218 * _210) * _594));
    float _607 = fma(_596, _225 * NORMAL.y, fma(_595, _232 * TANGENT.y, (_218 * _211) * _594));
    float _610 = fma(_596, _225 * NORMAL.z, fma(_595, _232 * TANGENT.z, (_218 * _212) * _594));
    float _614 = inversesqrt(dot(vec3(_604, _607, _610), vec3(_604, _607, _610)));
    float _615 = _614 * _604;
    float _616 = _614 * _607;
    float _617 = _614 * _610;
    float _3770 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _618 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3792 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _3803 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _3814 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _636 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _688 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _678);
    float _689 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _678);
    float _690 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _678);
    float _694 = inversesqrt(dot(vec3(_688, _689, _690), vec3(_688, _689, _690)));
    float _695 = _688 * _694;
    float _696 = _689 * _694;
    float _697 = _690 * _694;
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _722 = fma(_617, cbSceneParam._m0[5u].z, fma(_616, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _615));
    float _725 = fma(_617, cbSceneParam._m0[6u].z, fma(_616, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _615));
    float _728 = fma(_617, cbSceneParam._m0[7u].z, fma(_616, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _615));
    uint _742 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _748 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_742].x;
    float _749 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_742].y;
    float _750 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_742].z;
    float _3825 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    vec4 _762 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _766 = ((isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * TEXCOORD_5.w) * _762.x;
    float _767 = dot(vec3(_615, _616, _617), vec3(_695, _696, _697));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _615) - _695;
    float _775 = (_770 * _616) - _696;
    float _776 = (_770 * _617) - _697;
    float _780 = abs(dot(vec3(_695, _696, _697), vec3(_615, _616, _617)));
    float _3858 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_618);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1136;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _861 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _865 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _869 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _894 = _827 + _615;
        float _895 = _831 + _616;
        float _896 = _835 + _617;
        float _906 = fma(_896, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894)) - _861;
        float _907 = fma(_896, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894)) - _865;
        float _908 = fma(_896, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894)) - _869;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_861 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_865 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[34u].z) + ((((((_869 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _964 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_930.x + (-0.5));
        float _966 = _964 * (_930.y + (-0.5));
        float _967 = _964 * (_930.z + (-0.5));
        float _974 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_937.x + (-0.5));
        float _976 = _974 * (_937.y + (-0.5));
        float _977 = _974 * (_937.z + (-0.5));
        float _984 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_944.x + (-0.5));
        float _986 = _984 * (_944.y + (-0.5));
        float _987 = _984 * (_944.z + (-0.5));
        float _994 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_951.x + (-0.5));
        float _996 = _994 * (_951.y + (-0.5));
        float _997 = _994 * (_951.z + (-0.5));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = _965 * 0.5;
        float _1002 = _975 * 0.5;
        float _1003 = _985 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1018 = (dot(vec3(_615, _616, _617), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1028 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3906 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1030 + 1.0))) + _1035) * _998;
        float _1045 = _966 * 0.5;
        float _1046 = _976 * 0.5;
        float _1047 = _986 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_615, _616, _617), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3939 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1072 + 1.0))) + _1077) * _999;
        float _1087 = _967 * 0.5;
        float _1088 = _977 * 0.5;
        float _1089 = _987 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_615, _616, _617), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3972 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1114 + 1.0))) + _1119) * _1000;
        _1136 = _967;
        _1138 = _966;
        _1139 = _965;
        _1140 = _977;
        _1141 = _976;
        _1142 = _975;
        _1143 = _987;
        _1144 = _986;
        _1145 = _985;
        _1146 = _1000;
        _1147 = _999;
        _1148 = _998;
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
    }
    else
    {
        _1136 = _1137;
        _1138 = _1137;
        _1139 = _1137;
        _1140 = _1137;
        _1141 = _1137;
        _1142 = _1137;
        _1143 = _1137;
        _1144 = _1137;
        _1145 = _1137;
        _1146 = _1137;
        _1147 = _1137;
        _1148 = _1137;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1176 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1180 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1184 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1207 = _827 + _615;
        float _1208 = _831 + _616;
        float _1209 = _835 + _617;
        float _1219 = fma(_1209, cbModelParam._m0[30u].z, fma(_1208, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1207)) - _1176;
        float _1220 = fma(_1209, cbModelParam._m0[31u].z, fma(_1208, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1207)) - _1180;
        float _1221 = fma(_1209, cbModelParam._m0[32u].z, fma(_1208, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1207)) - _1184;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1176 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1180 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[35u].z) + ((((((_1184 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1275 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1242.x + (-0.5));
        float _1277 = _1275 * (_1242.y + (-0.5));
        float _1278 = _1275 * (_1242.z + (-0.5));
        float _1285 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1249.x + (-0.5));
        float _1287 = _1285 * (_1249.y + (-0.5));
        float _1288 = _1285 * (_1249.z + (-0.5));
        float _1295 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1256.x + (-0.5));
        float _1297 = _1295 * (_1256.y + (-0.5));
        float _1298 = _1295 * (_1256.z + (-0.5));
        float _1305 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1263.x + (-0.5));
        float _1307 = _1305 * (_1263.y + (-0.5));
        float _1308 = _1305 * (_1263.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_615, _616, _617), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _4035 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1339 + 1.0))) + _1344) * _1309;
        float _1354 = _1277 * 0.5;
        float _1355 = _1287 * 0.5;
        float _1356 = _1297 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_615, _616, _617), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4068 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1381 + 1.0))) + _1386) * _1310;
        float _1396 = _1278 * 0.5;
        float _1397 = _1288 * 0.5;
        float _1398 = _1298 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_615, _616, _617), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4101 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1423 + 1.0))) + _1428) * _1311;
        _1445 = _1278;
        _1446 = _1277;
        _1447 = _1276;
        _1448 = _1288;
        _1449 = _1287;
        _1450 = _1286;
        _1451 = _1298;
        _1452 = _1297;
        _1453 = _1296;
        _1454 = _1311;
        _1455 = _1310;
        _1456 = _1309;
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
    }
    else
    {
        _1445 = _1137;
        _1446 = _1137;
        _1447 = _1137;
        _1448 = _1137;
        _1449 = _1137;
        _1450 = _1137;
        _1451 = _1137;
        _1452 = _1137;
        _1453 = _1137;
        _1454 = _1137;
        _1455 = _1137;
        _1456 = _1137;
        _1457 = 0.0;
        _1458 = 0.0;
        _1459 = 0.0;
    }
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1149)) + _1149;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1150)) + _1150;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1151)) + _1151;
    float _1492 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1469));
    float _1513 = _774 * 0.5;
    float _1514 = _775 * 0.5;
    float _1515 = _776 * 0.5;
    float _1516 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1519 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1522 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1556;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1529 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1136, _1140, _1143, _1146));
        float _1533 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1537 = dot(vec4(_1513, _1514, _1515, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1544 = dot(vec4(cbModelParam._m0[39u]), vec4(_1513, _1514, _1515, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1567;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1558 = dot(vec4(cbModelParam._m0[40u]), vec4(_1513, _1514, _1515, 1.0));
        _1567 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1558) ? 0.0 : (isnan(0.0) ? _1558 : max(0.0, _1558))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1567 = 1.0;
    }
    float _1571 = (_1567 * cbModelParam._m0[1u].x) + (_1556 * (1.0 - cbModelParam._m0[1u].x));
    float _1581 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _618);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1581 : min(cbModelParam._m0[25u].z, _1581));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1630 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1634 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1638 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1641 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1644 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1647 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1675;
        if (_1641 > 0.0)
        {
            _1675 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1675 = frontier_phi_14_12_ladder;
        }
        float _1845;
        if (_1644 > 0.0)
        {
            _1845 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1845 = frontier_phi_23_19_ladder;
        }
        float _2140;
        if (_1647 > 0.0)
        {
            _2140 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2140 = frontier_phi_35_30_ladder;
        }
        float _2142 = isnan(_1845) ? _1675 : (isnan(_1675) ? _1845 : min(_1675, _1845));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1641) + _1630;
        float _2148 = (_2143 * _1644) + _1634;
        float _2149 = (_2143 * _1647) + _1638;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1582);
            frontier_phi_13_35_ladder = _2294.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2294.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2294.x * cbModelParam._m0[1u].y;
        }
        _1663 = frontier_phi_13_35_ladder_2;
        _1665 = frontier_phi_13_35_ladder_1;
        _1667 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1582);
        _1663 = _1651.x * cbModelParam._m0[1u].y;
        _1665 = _1651.y * cbModelParam._m0[1u].y;
        _1667 = _1651.z * cbModelParam._m0[1u].y;
    }
    float _1671 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _618);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1671 : min(cbModelParam._m0[25u].w, _1671));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1726 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1730 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1734 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1737 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1740 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1743 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _1850;
        if (_1737 > 0.0)
        {
            _1850 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1850 = frontier_phi_25_21_ladder;
        }
        float _2167;
        if (_1740 > 0.0)
        {
            _2167 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2167 = frontier_phi_37_32_ladder;
        }
        float _2494;
        if (_1743 > 0.0)
        {
            _2494 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2494 = frontier_phi_47_44_ladder;
        }
        float _2496 = isnan(_2167) ? _1850 : (isnan(_1850) ? _2167 : min(_1850, _2167));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1737) + _1726;
        float _2502 = (_2497 * _1740) + _1730;
        float _2503 = (_2497 * _1743) + _1734;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1672);
            frontier_phi_22_47_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1762 = frontier_phi_22_47_ladder_2;
        _1764 = frontier_phi_22_47_ladder_1;
        _1766 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1672);
        _1762 = _1746.x * cbModelParam._m0[1u].z;
        _1764 = _1746.y * cbModelParam._m0[1u].z;
        _1766 = _1746.z * cbModelParam._m0[1u].z;
    }
    float _1778 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1779 = _1778 * ((cbModelParam._m0[1u].w * (_1762 - _1663)) + _1663);
    float _1780 = _1778 * ((cbModelParam._m0[1u].w * (_1764 - _1665)) + _1665);
    float _1781 = _1778 * ((cbModelParam._m0[1u].w * (_1766 - _1667)) + _1667);
    float _1784 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, _1779 * cbSceneParam._m0[91u].x));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1828 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1832 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1837 = _1824 / _1836;
    float _1838 = _1828 / _1836;
    float _1839 = _1832 / _1836;
    float _1986;
    float _1987;
    float _1988;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1866 = ((uint(_1839 > cbSceneParam._m0[59u].y) + uint(_1839 > cbSceneParam._m0[59u].x)) + uint(_1839 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1867 = _1866 + 43u;
        uint _1875 = _1866 + 44u;
        uint _1883 = _1866 + 45u;
        uint _1891 = _1866 + 46u;
        float _1902 = fma(_1836, cbSceneParam._m0[_1867].w, fma(_1832, cbSceneParam._m0[_1867].z, fma(_1828, cbSceneParam._m0[_1867].y, _1824 * cbSceneParam._m0[_1867].x)));
        float _1906 = fma(_1836, cbSceneParam._m0[_1875].w, fma(_1832, cbSceneParam._m0[_1875].z, fma(_1828, cbSceneParam._m0[_1875].y, _1824 * cbSceneParam._m0[_1875].x)));
        float _1914 = fma(_1836, cbSceneParam._m0[_1891].w, fma(_1832, cbSceneParam._m0[_1891].z, fma(_1828, cbSceneParam._m0[_1891].y, _1824 * cbSceneParam._m0[_1891].x)));
        float _1919 = cbSceneParam._m0[33u].z * _1914;
        float _1921 = cbSceneParam._m0[33u].w * _1914;
        float _1924 = fma(_1836, cbSceneParam._m0[_1883].w, fma(_1832, cbSceneParam._m0[_1883].z, fma(_1828, cbSceneParam._m0[_1883].y, _1824 * cbSceneParam._m0[_1883].x))) / _1914;
        float _1972 = (cbSceneParam._m0[33u].x - sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839))) * cbSceneParam._m0[33u].y;
        float _4227 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
        float _1979 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 + _1902) / _1914, (_1921 + _1906) / _1914), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 + _1902) / _1914, (_1906 - _1919) / _1914), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 - _1919) / _1914, (_1906 - _1921) / _1914), _1924), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 - _1921) / _1914, (_1919 + _1906) / _1914), _1924), 0.0)).x), vec4(0.25)));
        _1986 = 1.0 - (_1979 * cbSceneParam._m0[34u].x);
        _1987 = 1.0 - (_1979 * cbSceneParam._m0[34u].y);
        _1988 = 1.0 - (_1979 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1986 = 1.0;
        _1987 = 1.0;
        _1988 = 1.0;
    }
    float _2052;
    float _2054;
    float _2056;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2040 = fma(_1836, cbSceneParam._m0[63u].w, fma(_1832, cbSceneParam._m0[63u].z, fma(_1828, cbSceneParam._m0[63u].y, _1824 * cbSceneParam._m0[63u].x)));
        float _2041 = fma(_1836, cbSceneParam._m0[60u].w, fma(_1832, cbSceneParam._m0[60u].z, fma(_1828, cbSceneParam._m0[60u].y, _1824 * cbSceneParam._m0[60u].x))) / _2040;
        float _2042 = fma(_1836, cbSceneParam._m0[61u].w, fma(_1832, cbSceneParam._m0[61u].z, fma(_1828, cbSceneParam._m0[61u].y, _1824 * cbSceneParam._m0[61u].x))) / _2040;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2041 >= cbSceneParam._m0[64u].x) && (_2042 >= cbSceneParam._m0[64u].y)) && (_2041 <= cbSceneParam._m0[64u].z)) && (_2042 <= cbSceneParam._m0[64u].w))
        {
            float _2180 = fma(_1836, cbSceneParam._m0[62u].w, fma(_1832, cbSceneParam._m0[62u].z, fma(_1828, cbSceneParam._m0[62u].y, _1824 * cbSceneParam._m0[62u].x))) / _2040;
            float _2184 = isnan(cbSceneParam._m0[41u].w) ? _2180 : (isnan(_2180) ? cbSceneParam._m0[41u].w : max(_2180, cbSceneParam._m0[41u].w));
            float _2227 = (cbSceneParam._m0[33u].x - sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839))) * cbSceneParam._m0[33u].y;
            float _4243 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
            float _2234 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2041, cbSceneParam._m0[33u].w + _2042), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2041, _2042 - cbSceneParam._m0[33u].z), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2041 - cbSceneParam._m0[33u].z, _2042 - cbSceneParam._m0[33u].w), _2184), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2041 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2042), _2184), 0.0)).x), vec4(0.25)));
            float _2238 = 1.0 - (_2234 * cbSceneParam._m0[34u].x);
            float _2239 = 1.0 - (_2234 * cbSceneParam._m0[34u].y);
            float _2240 = 1.0 - (_2234 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2240) ? _1988 : (isnan(_1988) ? _2240 : min(_1988, _2240));
            frontier_phi_34_33_ladder_1 = isnan(_2239) ? _1987 : (isnan(_1987) ? _2239 : min(_1987, _2239));
            frontier_phi_34_33_ladder_2 = isnan(_2238) ? _1986 : (isnan(_1986) ? _2238 : min(_1986, _2238));
        }
        else
        {
            frontier_phi_34_33_ladder = _1988;
            frontier_phi_34_33_ladder_1 = _1987;
            frontier_phi_34_33_ladder_2 = _1986;
        }
        _2052 = frontier_phi_34_33_ladder_2;
        _2054 = frontier_phi_34_33_ladder_1;
        _2056 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2052 = _1986;
        _2054 = _1987;
        _2056 = _1988;
    }
    uvec4 _2061 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2063 = _2061.x * 14u;
    uint _2064 = _2063 + 13u;
    float _2071 = _766 + (-1.0);
    float _2076 = (cbLight._m0[_2064].x * _2071) + 1.0;
    float _2077 = (cbLight._m0[_2064].y * _2071) + 1.0;
    float _2078 = (cbLight._m0[_2064].z * _2071) + 1.0;
    float _2079 = (cbLight._m0[_2064].w * _2071) + 1.0;
    uint _2080 = _2063 + 5u;
    float _2086 = isnan(1.0) ? _2077 : (isnan(_2077) ? 1.0 : min(_2077, 1.0));
    uint _2090 = _2063 + 4u;
    float _2099 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
    uint _2103 = _2063 | 1u;
    float _2114 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_615, _616, _617));
    float _2117 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_615, _616, _617));
    float _4279 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _4290 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2122 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * 0.3183098733425140380859375;
    float _2124 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2131 = ((cbLight._m0[_2080].x * _2086) * _2124) + (((cbLight._m0[_2090].x * _2052) * _2099) * _2122);
    float _2132 = ((_2086 * cbLight._m0[_2080].y) * _2124) + (((cbLight._m0[_2090].y * _2054) * _2099) * _2122);
    float _2133 = ((_2086 * cbLight._m0[_2080].z) * _2124) + (((cbLight._m0[_2090].z * _2056) * _2099) * _2122);
    uvec4 _2137 = floatBitsToUint(cbLight._m0[_2063 + 12u]);
    bool _2139 = _2137.x == 0u;
    float _2241;
    float _2243;
    float _2245;
    if (_2139)
    {
        _2241 = _2131;
        _2243 = _2132;
        _2245 = _2133;
    }
    else
    {
        uint _2249 = _2063 + 6u;
        float _2265 = (dot(vec3(cbLight._m0[_2063 + 2u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2266 = _2265 * _2265;
        float _4301 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2267 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2268 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2241 = (((cbLight._m0[_2249].x * 0.3183098733425140380859375) * _2267) * _2268) + _2131;
        _2243 = (((cbLight._m0[_2249].y * 0.3183098733425140380859375) * _2267) * _2268) + _2132;
        _2245 = (((cbLight._m0[_2249].z * 0.3183098733425140380859375) * _2267) * _2268) + _2133;
    }
    bool _2248 = _2137.y == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2248)
    {
        _2303 = _2241;
        _2305 = _2243;
        _2307 = _2245;
    }
    else
    {
        uint _2465 = _2063 + 7u;
        float _2481 = (dot(vec3(cbLight._m0[_2063 + 3u].xyz), vec3(_615, _616, _617)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4317 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2484 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2303 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2241;
        _2305 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2243;
        _2307 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2245;
    }
    uint _2310 = _2063 + 8u;
    float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2063].w)) * _618) * 0.949999988079071044921875);
    float _2324 = _2323 * _2323;
    float _2325 = cbLight._m0[_2063].x + _695;
    float _2326 = cbLight._m0[_2063].y + _696;
    float _2327 = cbLight._m0[_2063].z + _697;
    float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
    float _2332 = _2331 * _2325;
    float _2333 = _2331 * _2326;
    float _2334 = _2331 * _2327;
    float _2335 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2063].xyz));
    float _4333 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _4344 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _2339 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _2340 = dot(vec3(_615, _616, _617), vec3(_2332, _2333, _2334));
    float _4355 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2063].xyz), vec3(_2332, _2333, _2334));
    float _4366 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2324 * _2324;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2363 = (exp2(log2(1.0 - (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2364 = 1.0 - _2324;
    float _2375 = (0.5 / (((_2339 * ((_2338 * _2364) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2364) + _2324) * _2338))) * _2338;
    float _4377 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2377 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    uint _2391 = _2063 + 9u;
    float _2402 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _618) * 0.949999988079071044921875);
    float _2403 = _2402 * _2402;
    float _2404 = cbLight._m0[_2103].x + _695;
    float _2405 = cbLight._m0[_2103].y + _696;
    float _2406 = cbLight._m0[_2103].z + _697;
    float _2410 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
    float _2411 = _2410 * _2404;
    float _2412 = _2410 * _2405;
    float _2413 = _2410 * _2406;
    float _2414 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2103].xyz));
    float _4388 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2418 = dot(vec3(_615, _616, _617), vec3(_2411, _2412, _2413));
    float _4399 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2411, _2412, _2413));
    float _4410 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2403 * _2403;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2439 = (exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2440 = 1.0 - _2403;
    float _2450 = (0.5 / (((_2339 * ((_2417 * _2440) + _2403)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2440) + _2403) * _2417))) * _2417;
    float _4421 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    float _2462 = (((_2439 * cbLight._m0[_2391].x) * _2452) * _2086) + ((((cbLight._m0[_2310].x * _2052) * _2363) * _2377) * _2099);
    float _2463 = (((_2439 * cbLight._m0[_2391].y) * _2452) * _2086) + ((((cbLight._m0[_2310].y * _2054) * _2363) * _2377) * _2099);
    float _2464 = (((_2439 * cbLight._m0[_2391].z) * _2452) * _2086) + ((((cbLight._m0[_2310].z * _2056) * _2363) * _2377) * _2099);
    float _2520;
    float _2522;
    float _2524;
    if (_2139)
    {
        _2520 = _2462;
        _2522 = _2463;
        _2524 = _2464;
    }
    else
    {
        uint _2526 = _2063 + 2u;
        uint _2530 = _2063 + 10u;
        float _2544 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2526].w)) * _618) * 0.949999988079071044921875);
        float _2545 = _2544 * _2544;
        float _2546 = cbLight._m0[_2526].x + _695;
        float _2547 = cbLight._m0[_2526].y + _696;
        float _2548 = cbLight._m0[_2526].z + _697;
        float _2552 = inversesqrt(dot(vec3(_2546, _2547, _2548), vec3(_2546, _2547, _2548)));
        float _2553 = _2552 * _2546;
        float _2554 = _2552 * _2547;
        float _2555 = _2552 * _2548;
        float _2556 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2526].xyz));
        float _4432 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2559 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2560 = dot(vec3(_615, _616, _617), vec3(_2553, _2554, _2555));
        float _4443 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2564 = dot(vec3(cbLight._m0[_2526].xyz), vec3(_2553, _2554, _2555));
        float _4454 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2568 = _2545 * _2545;
        float _2572 = ((_2563 * _2563) * (_2568 + (-1.0))) + 1.0;
        float _2581 = (exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2582 = 1.0 - _2545;
        float _2592 = (0.5 / (((_2339 * ((_2559 * _2582) + _2545)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2582) + _2545) * _2559))) * _2559;
        float _4465 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2594 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2568 / ((_2572 * _2572) * 3.141590118408203125));
        float _2595 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
        _2520 = (((_2581 * cbLight._m0[_2530].x) * _2594) * _2595) + _2462;
        _2522 = (((_2581 * cbLight._m0[_2530].y) * _2594) * _2595) + _2463;
        _2524 = (((_2581 * cbLight._m0[_2530].z) * _2594) * _2595) + _2464;
    }
    float _2626;
    float _2628;
    float _2630;
    if (_2248)
    {
        _2626 = _2520;
        _2628 = _2522;
        _2630 = _2524;
    }
    else
    {
        uint _2637 = _2063 + 3u;
        uint _2641 = _2063 + 11u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _618) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _695;
        float _2658 = cbLight._m0[_2637].y + _696;
        float _2659 = cbLight._m0[_2637].z + _697;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_615, _616, _617), vec3(cbLight._m0[_2637].xyz));
        float _4481 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _2671 = dot(vec3(_615, _616, _617), vec3(_2664, _2665, _2666));
        float _4492 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4503 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2692 = (exp2(log2(1.0 - (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2693 = 1.0 - _2656;
        float _2703 = (0.5 / (((_2339 * ((_2670 * _2693) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2339 * _2693) + _2656) * _2670))) * _2670;
        float _4514 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2705 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2706 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
        _2626 = (((_2692 * cbLight._m0[_2641].x) * _2705) * _2706) + _2520;
        _2628 = (((_2692 * cbLight._m0[_2641].y) * _2705) * _2706) + _2522;
        _2630 = (((_2692 * cbLight._m0[_2641].z) * _2705) * _2706) + _2524;
    }
    float _2772;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_2061.y == 0u)
    {
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.x;
        uint _2739 = uint((float(_2727.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2728))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2728)));
        float _2749 = (log2(_1839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2750 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        uint _2753 = uint(isnan(14.0) ? _2750 : (isnan(_2750) ? 14.0 : min(_2750, 14.0)));
        uvec4 _2758 = texelFetch(g_lightClusterGridBuffer, int(((_2753 << 2u) + (_2739 << 6u)) >> 2u));
        uint _2759 = _2758.x;
        uint _2760 = _2727.z;
        float _2839;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        if (((((1u << ((_2760 >> 4u) & 15u)) + 4294967295u) & _2759) == 0u) || ((_2760 & 240u) == 0u))
        {
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
        }
        else
        {
            float _2840;
            float _2842;
            float _2844;
            float _2846;
            float _2848;
            float _2850;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3000)
                {
                    frontier_phi_66_pred = _2989;
                    frontier_phi_66_pred_1 = _2988;
                    frontier_phi_66_pred_2 = _2987;
                    frontier_phi_66_pred_3 = _2986;
                    frontier_phi_66_pred_4 = _2985;
                    frontier_phi_66_pred_5 = _2984;
                }
                else
                {
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    uint _3114;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2989;
                    _3114 = _2999;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    for (;;)
                    {
                        uint _3118 = uint(findLSB(_3114)) + (_2990 << 5u);
                        uint _3115 = (_3114 + 4294967295u) & _3114;
                        uint _3120 = _3118 * 48u;
                        vec4 _3134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 3u)).x));
                        uint _3140 = (_3118 * 48u) + 4u;
                        vec4 _3153 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3159 = (_3118 * 48u) + 8u;
                        vec3 _3170 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x));
                        float _3174 = _3134.x - _1837;
                        float _3175 = _3134.y - _1838;
                        float _3176 = _3134.z - _1839;
                        float _3177 = dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176));
                        float _3180 = inversesqrt(_3177);
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3184 = dot(vec3(_722, _725, _728), vec3(_3181, _3182, _3183));
                        float _3189 = 1.0 - (_3177 * _3134.w);
                        float _4540 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                        float _3191 = sqrt(_3177) * _3153.w;
                        float _3194 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                        float _3195 = _3194 * _3194;
                        float _3198 = ((1.0 - _3195) * _3184) + _3195;
                        float _3201 = _3191 * _3191;
                        float _3205 = ((isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))) * _3190) / ((_3201 * 0.699999988079071044921875) + 1.0);
                        float _3209 = (-0.0) - _1837;
                        float _3210 = (-0.0) - _1838;
                        float _3211 = (-0.0) - _1839;
                        float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3225 = exp2(log2(1.0 / ((_3201 * 3.5) + 5.0)) * 0.25);
                        float _3226 = 1.0 - _782;
                        float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                        float _3234 = _3233 * _3233;
                        float _3235 = _3234 * _3234;
                        float _3236 = _3216 + _3181;
                        float _3237 = _3217 + _3182;
                        float _3238 = _3218 + _3183;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3246 = dot(vec3(_722, _725, _728), vec3(_3216, _3217, _3218));
                        float _4556 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3250 = dot(vec3(_722, _725, _728), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                        float _4567 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                        float _3258 = _3194 * _3234;
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3184) + _3259;
                        float _4578 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3264 = 1.0 - _3234;
                        float _3274 = (0.5 / (((_3263 * ((_3249 * _3264) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3234) * _3249))) * _3263;
                        float _4589 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3285 = (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) / ((_3257 * _3257) * ((_3201 * 2.1991131305694580078125) + 3.141590118408203125))) * _3190;
                        _3043 = (_3205 * _3153.x) + _3111;
                        _3044 = (_3205 * _3153.y) + _3112;
                        _3045 = (_3205 * _3153.z) + _3113;
                        _3040 = (_3285 * _3170.x) + _3108;
                        _3041 = (_3285 * _3170.y) + _3109;
                        _3042 = (_3285 * _3170.z) + _3110;
                        if (_3115 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3045;
                            _3114 = _3115;
                        }
                    }
                    frontier_phi_66_pred = _3045;
                    frontier_phi_66_pred_1 = _3044;
                    frontier_phi_66_pred_2 = _3043;
                    frontier_phi_66_pred_3 = _3042;
                    frontier_phi_66_pred_4 = _3041;
                    frontier_phi_66_pred_5 = _3040;
                }
                _2850 = frontier_phi_66_pred;
                _2848 = frontier_phi_66_pred_1;
                _2846 = frontier_phi_66_pred_2;
                _2844 = frontier_phi_66_pred_3;
                _2842 = frontier_phi_66_pred_4;
                _2840 = frontier_phi_66_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2840;
                    _2985 = _2842;
                    _2986 = _2844;
                    _2987 = _2846;
                    _2988 = _2848;
                    _2989 = _2850;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
        }
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.z;
        uint _2856 = (_2854 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2856) & _2759) == 0u)
        {
            _2952 = _2839;
            _2954 = _2841;
            _2956 = _2843;
            _2958 = _2845;
            _2960 = _2847;
            _2962 = _2849;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
            float _2978 = _2977 * _1837;
            float _2979 = _2977 * _1838;
            float _2980 = _2977 * _1839;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2856 < ((_2854 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3091 = _2839;
                float _3092 = _2841;
                float _3093 = _2843;
                float _3094 = _2845;
                float _3095 = _2847;
                float _3096 = _2849;
                uint _3097 = _2856;
                uint _3106;
                bool _3107;
                for (;;)
                {
                    _3106 = texelFetch(g_lightClassification, int((((_2753 << 5u) + (_2739 << 9u)) + (_3097 << 2u)) >> 2u)).x;
                    _3107 = _3106 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3107)
                    {
                        frontier_phi_72_pred = _3096;
                        frontier_phi_72_pred_1 = _3095;
                        frontier_phi_72_pred_2 = _3094;
                        frontier_phi_72_pred_3 = _3093;
                        frontier_phi_72_pred_4 = _3092;
                        frontier_phi_72_pred_5 = _3091;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3303 = _3091;
                        float _3304 = _3092;
                        float _3305 = _3093;
                        float _3306 = _3094;
                        float _3307 = _3095;
                        float _3308 = _3096;
                        uint _3309 = _3106;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3320 = ((_3097 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3320 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3320 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3320 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_1839, _3427.z, fma(_1838, _3427.y, _3427.x * _1837)) + _3427.w;
                            _3440 = !((fma(_1839, _3408.z, fma(_1838, _3408.y, _3408.x * _1837)) + _3408.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3335.x - _1837;
                                float _3468 = _3335.y - _1838;
                                float _3469 = _3335.z - _1839;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3336 * _3336));
                                float _4600 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3485 = sqrt(_3470) * _3351.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_722, _725, _728))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_1839, _3378.z, fma(_1838, _3378.y, _3378.x * _1837)) + _3378.w) / _3439;
                                float _3499 = (fma(_1839, _3393.z, fma(_1838, _3393.y, _3393.x * _1837)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4616 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _782;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2978;
                                float _3529 = _3475 - _2979;
                                float _3530 = _3476 - _2980;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_722, _725, _728), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4627 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3542 = dot(vec3(_722, _725, _728), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4638 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_722, _725, _728), vec3(_3474, _3475, _3476))) + _3551;
                                float _4649 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4660 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3505 * _3351.y;
                                frontier_phi_78_pred_1 = _3505 * _3351.x;
                                frontier_phi_78_pred_2 = _3579 * _3363.z;
                                frontier_phi_78_pred_3 = _3579 * _3363.y;
                                frontier_phi_78_pred_4 = _3579 * _3363.x;
                                frontier_phi_78_pred_5 = _3505 * _3351.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3587 = frontier_phi_78_pred;
                            _3586 = frontier_phi_78_pred_1;
                            _3585 = frontier_phi_78_pred_2;
                            _3584 = frontier_phi_78_pred_3;
                            _3583 = frontier_phi_78_pred_4;
                            _3588 = frontier_phi_78_pred_5;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3295;
                        frontier_phi_72_pred_1 = _3294;
                        frontier_phi_72_pred_2 = _3293;
                        frontier_phi_72_pred_3 = _3292;
                        frontier_phi_72_pred_4 = _3291;
                        frontier_phi_72_pred_5 = _3290;
                    }
                    _2963 = frontier_phi_72_pred;
                    _2961 = frontier_phi_72_pred_1;
                    _2959 = frontier_phi_72_pred_2;
                    _2957 = frontier_phi_72_pred_3;
                    _2955 = frontier_phi_72_pred_4;
                    _2953 = frontier_phi_72_pred_5;
                    uint _3098 = _3097 + 1u;
                    if (_3098 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3091 = _2953;
                        _3092 = _2955;
                        _3093 = _2957;
                        _3094 = _2959;
                        _3095 = _2961;
                        _3096 = _2963;
                        _3097 = _3098;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2963;
                frontier_phi_60_61_ladder_1 = _2961;
                frontier_phi_60_61_ladder_2 = _2957;
                frontier_phi_60_61_ladder_3 = _2955;
                frontier_phi_60_61_ladder_4 = _2953;
                frontier_phi_60_61_ladder_5 = _2959;
            }
            else
            {
                frontier_phi_60_61_ladder = _2849;
                frontier_phi_60_61_ladder_1 = _2847;
                frontier_phi_60_61_ladder_2 = _2843;
                frontier_phi_60_61_ladder_3 = _2841;
                frontier_phi_60_61_ladder_4 = _2839;
                frontier_phi_60_61_ladder_5 = _2845;
            }
            _2952 = frontier_phi_60_61_ladder_4;
            _2954 = frontier_phi_60_61_ladder_3;
            _2956 = frontier_phi_60_61_ladder_2;
            _2958 = frontier_phi_60_61_ladder_5;
            _2960 = frontier_phi_60_61_ladder_1;
            _2962 = frontier_phi_60_61_ladder;
        }
        float _2967 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2772 = (_2967 * _2958) + _2303;
        _2774 = (_2967 * _2960) + _2305;
        _2776 = (_2967 * _2962) + _2307;
        _2778 = ((_2952 * 0.039999999105930328369140625) * _2967) + _2626;
        _2780 = ((_2954 * 0.039999999105930328369140625) * _2967) + _2628;
        _2782 = ((_2956 * 0.039999999105930328369140625) * _2967) + _2630;
    }
    else
    {
        _2772 = _2303;
        _2774 = _2305;
        _2776 = _2307;
        _2778 = _2626;
        _2780 = _2628;
        _2782 = _2630;
    }
    float _4676 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4687 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4698 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    uint _2802 = _238 + 6u;
    float _2810 = _703 / cbSceneParam._m0[86u].x;
    float _2811 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2825 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, (log2((isnan(cbSceneParam._m0[77u].w) ? _636 : (isnan(_636) ? cbSceneParam._m0[77u].w : min(_636, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2827 = _2825.x;
    float _2828 = _2825.y;
    float _2829 = _2825.z;
    float _2830 = _2825.w;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_636 > cbSceneParam._m0[78u].w)
    {
        float _2864 = isnan(_636) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _636 : min(cbSceneParam._m0[80u].w, _636));
        float _2865 = _2864 / _636;
        float _2876 = _2865 * _688;
        float _2877 = _689 * _2865;
        float _2878 = (-0.0) - _2877;
        float _2880 = _2865 * _690;
        float _2882 = (cbSceneParam._m0[77u].w * _2878) / _2864;
        float _2883 = _2882 + cbSceneParam._m0[79u].w;
        float _2884 = cbSceneParam._m0[79u].w - _2877;
        float _2890 = sqrt(((_2876 * _2876) + (_2877 * _2877)) + (_2880 * _2880));
        float _2893 = (1.0 - (cbSceneParam._m0[77u].w / _2864)) * _2890;
        float _2898 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2900 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3053;
        if (abs((_2878 - _2882) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3053 = ((((_2883 > 0.0) ? exp2(_2898 * _2883) : (2.0 - exp2(_2900 * _2883))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2893;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : max(_2883, _2884));
            float _3015 = isnan(_2884) ? _2883 : (isnan(_2883) ? _2884 : min(_2883, _2884));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3053 = ((abs(_2890 / _2878) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2898 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2898 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2900 * _3024) - exp2(_2900 * _3025)) * _3013))) + (_2893 * cbSceneParam._m0[80u].z);
        }
        vec4 _3055 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2810, _2811, 1.0), 0.0);
        float _3064 = exp2((_3053 * (-1.44269502162933349609375)) * (1.0 - _3055.w));
        float _3065 = log2(_3064);
        float _3081 = log2(_2830);
        _2902 = (exp2(_3081 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].x)) * _3055.x) / cbSceneParam._m0[78u].x)) + _2827;
        _2904 = (exp2(_3081 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].y)) * _3055.y) / cbSceneParam._m0[78u].y)) + _2828;
        _2906 = (exp2(_3081 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3065 * cbSceneParam._m0[78u].z)) * _3055.z) / cbSceneParam._m0[78u].z)) + _2829;
        _2908 = _3064 * _2830;
    }
    else
    {
        _2902 = _2827;
        _2904 = _2828;
        _2906 = _2829;
        _2908 = _2830;
    }
    float _2920 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2921 = _2920 == 3.0;
    float _2922 = log2(_2908);
    float _2929 = exp2(_2922 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2772 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _766))) + ((_2778 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1571)) * cbPerFrame._m0[3u].x));
    float _2930 = exp2(_2922 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2774 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _766))) + ((_2780 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1571)) * cbPerFrame._m0[3u].x));
    float _2931 = exp2(_2922 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2776 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _766))) + ((_2782 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1571)) * cbPerFrame._m0[3u].x));
    float _2940 = (_2920 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2940 * (_2921 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2902)));
    SV_Target.y = _2940 * (_2921 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2904)));
    SV_Target.z = _2940 * (_2921 ? _2931 : (_2931 + (cbSceneParam._m0[72u].w * _2906)));
    SV_Target.w = cbInstanceData._m0[_2802].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2802].w;
}


