#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _879;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2(((_239 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_239 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _311 = _307.z;
    float _315 = (_307.x * 2.0) + (-1.0);
    float _316 = (_307.y * 2.0) + (-1.0);
    float _317 = dot(vec2(_315, _316), vec2(_315, _316));
    float _3216 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _323 = sqrt(1.0 - (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0))));
    float _328 = _315 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_281.x * 2.0) + (-1.0)));
    float _329 = _316 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_281.y * 2.0) + (-1.0)));
    float _334 = (((_281.z - _311) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _311;
    float _339 = cbMtdParam._m0[22u].x + _307.w;
    float _342 = fma(_323, _207 * NORMAL.x, fma(_329, _214 * TANGENT.x, (_200 * _192) * _328));
    float _345 = fma(_323, _207 * NORMAL.y, fma(_329, _214 * TANGENT.y, (_200 * _193) * _328));
    float _348 = fma(_323, _207 * NORMAL.z, fma(_329, _214 * TANGENT.z, (_200 * _194) * _328));
    float _352 = inversesqrt(dot(vec3(_342, _345, _348), vec3(_342, _345, _348)));
    float _353 = _352 * _342;
    float _354 = _352 * _345;
    float _355 = _352 * _348;
    float _3227 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _356 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _3238 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _3249 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3260 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3271 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _374 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _416 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _426 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _416);
    float _427 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _416);
    float _428 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _416);
    float _432 = inversesqrt(dot(vec3(_426, _427, _428), vec3(_426, _427, _428)));
    float _433 = _426 * _432;
    float _434 = _427 * _432;
    float _435 = _428 * _432;
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _463 = fma(_355, cbSceneParam._m0[5u].z, fma(_354, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _353));
    float _466 = fma(_355, cbSceneParam._m0[6u].z, fma(_354, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _353));
    float _469 = fma(_355, cbSceneParam._m0[7u].z, fma(_354, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _353));
    uint _483 = (_220 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _489 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) * cbInstanceData._m0[_483].x;
    float _490 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0)))) * cbInstanceData._m0[_483].y;
    float _491 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0)))) * cbInstanceData._m0[_483].z;
    float _3282 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _492 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _493 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _3304 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _494 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _441, cbSceneParam._m0[86u].y * _442));
    float _507 = ((isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * TEXCOORD_5.w) * _503.x;
    float _508 = dot(vec3(_353, _354, _355), vec3(_433, _434, _435));
    float _511 = _508 * 2.0;
    float _515 = (_511 * _353) - _433;
    float _516 = (_511 * _354) - _434;
    float _517 = (_511 * _355) - _435;
    float _521 = abs(dot(vec3(_433, _434, _435), vec3(_353, _354, _355)));
    float _3315 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _523 = sqrt(_356);
    float _536 = exp2((_523 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_523 * 3.0));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _878;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _603 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _607 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _611 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _636 = _568 + _353;
        float _637 = _572 + _354;
        float _638 = _576 + _355;
        float _648 = fma(_638, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _636)) - _603;
        float _649 = fma(_638, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _636)) - _607;
        float _650 = fma(_638, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _636)) - _611;
        float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
        float _667 = ((_654 * _648) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_603 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _668 = ((_654 * _649) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_607 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _669 = ((_654 * _650) / cbModelParam._m0[34u].z) + ((((((_611 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _668, _669), 0.0);
        float _706 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_672.x + (-0.5));
        float _708 = _706 * (_672.y + (-0.5));
        float _709 = _706 * (_672.z + (-0.5));
        float _716 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_679.x + (-0.5));
        float _718 = _716 * (_679.y + (-0.5));
        float _719 = _716 * (_679.z + (-0.5));
        float _726 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_686.x + (-0.5));
        float _728 = _726 * (_686.y + (-0.5));
        float _729 = _726 * (_686.z + (-0.5));
        float _736 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_693.x + (-0.5));
        float _738 = _736 * (_693.y + (-0.5));
        float _739 = _736 * (_693.z + (-0.5));
        float _740 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _741 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = _707 * 0.5;
        float _744 = _717 * 0.5;
        float _745 = _727 * 0.5;
        float _746 = dot(vec3(_743, _744, _745), vec3(_743, _744, _745));
        float _751 = (_746 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_746);
        float _760 = (dot(vec3(_353, _354, _355), vec3(_751 * _743, _751 * _744, _751 * _745)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _770 = sqrt(((_744 * _744) + (_743 * _743)) + (_745 * _745)) / (_740 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _772 = _771 * 2.0;
        float _776 = (1.0 - _771) / (_771 + 1.0);
        float _3363 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _777 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _786 = ((((1.0 - _777) * (_772 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_772 + 1.0))) + _777) * _740;
        float _787 = _708 * 0.5;
        float _788 = _718 * 0.5;
        float _789 = _728 * 0.5;
        float _790 = dot(vec3(_787, _788, _789), vec3(_787, _788, _789));
        float _795 = (_790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_790);
        float _803 = (dot(vec3(_353, _354, _355), vec3(_795 * _787, _795 * _788, _795 * _789)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _812 = sqrt(((_788 * _788) + (_787 * _787)) + (_789 * _789)) / (_741 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _814 = _813 * 2.0;
        float _818 = (1.0 - _813) / (_813 + 1.0);
        float _3396 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _819 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _828 = ((((1.0 - _819) * (_814 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_814 + 1.0))) + _819) * _741;
        float _829 = _709 * 0.5;
        float _830 = _719 * 0.5;
        float _831 = _729 * 0.5;
        float _832 = dot(vec3(_829, _830, _831), vec3(_829, _830, _831));
        float _837 = (_832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_832);
        float _845 = (dot(vec3(_353, _354, _355), vec3(_837 * _829, _837 * _830, _837 * _831)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _854 = sqrt(((_830 * _830) + (_829 * _829)) + (_831 * _831)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3429 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_856 + 1.0))) + _861) * _742;
        _878 = _709;
        _880 = _708;
        _881 = _707;
        _882 = _719;
        _883 = _718;
        _884 = _717;
        _885 = _729;
        _886 = _728;
        _887 = _727;
        _888 = _742;
        _889 = _741;
        _890 = _740;
        _891 = cbModelParam._m0[36u].z * (isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0)));
        _892 = cbModelParam._m0[36u].z * (isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0)));
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
    }
    else
    {
        _878 = _879;
        _880 = _879;
        _881 = _879;
        _882 = _879;
        _883 = _879;
        _884 = _879;
        _885 = _879;
        _886 = _879;
        _887 = _879;
        _888 = _879;
        _889 = _879;
        _890 = _879;
        _891 = 0.0;
        _892 = 0.0;
        _893 = 0.0;
    }
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _918 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _922 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _926 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _949 = _568 + _353;
        float _950 = _572 + _354;
        float _951 = _576 + _355;
        float _961 = fma(_951, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949)) - _918;
        float _962 = fma(_951, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949)) - _922;
        float _963 = fma(_951, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949)) - _926;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_918 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_922 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[35u].z) + ((((((_926 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1017 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_984.x + (-0.5));
        float _1019 = _1017 * (_984.y + (-0.5));
        float _1020 = _1017 * (_984.z + (-0.5));
        float _1027 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_991.x + (-0.5));
        float _1029 = _1027 * (_991.y + (-0.5));
        float _1030 = _1027 * (_991.z + (-0.5));
        float _1037 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_998.x + (-0.5));
        float _1039 = _1037 * (_998.y + (-0.5));
        float _1040 = _1037 * (_998.z + (-0.5));
        float _1047 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1005.x + (-0.5));
        float _1049 = _1047 * (_1005.y + (-0.5));
        float _1050 = _1047 * (_1005.z + (-0.5));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = _1018 * 0.5;
        float _1055 = _1028 * 0.5;
        float _1056 = _1038 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_353, _354, _355), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3492 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1081 + 1.0))) + _1086) * _1051;
        float _1096 = _1019 * 0.5;
        float _1097 = _1029 * 0.5;
        float _1098 = _1039 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_353, _354, _355), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3525 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_1123 + 1.0))) + _1128) * _1052;
        float _1138 = _1020 * 0.5;
        float _1139 = _1030 * 0.5;
        float _1140 = _1040 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_353, _354, _355), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3558 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1165 + 1.0))) + _1170) * _1053;
        _1187 = _1020;
        _1188 = _1019;
        _1189 = _1018;
        _1190 = _1030;
        _1191 = _1029;
        _1192 = _1028;
        _1193 = _1040;
        _1194 = _1039;
        _1195 = _1038;
        _1196 = _1053;
        _1197 = _1052;
        _1198 = _1051;
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _879;
        _1188 = _879;
        _1189 = _879;
        _1190 = _879;
        _1191 = _879;
        _1192 = _879;
        _1193 = _879;
        _1194 = _879;
        _1195 = _879;
        _1196 = _879;
        _1197 = _879;
        _1198 = _879;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _891)) + _891;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _892)) + _892;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _893)) + _893;
    float _1234 = fma(_1213, cbSceneParam._m0[89u].z, fma(_1212, cbSceneParam._m0[89u].y, _1211 * cbSceneParam._m0[89u].x));
    float _1237 = fma(_1213, cbSceneParam._m0[90u].z, fma(_1212, cbSceneParam._m0[90u].y, _1211 * cbSceneParam._m0[90u].x));
    float _1240 = fma(_1213, cbSceneParam._m0[91u].z, fma(_1212, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1211));
    float _1255 = _515 * 0.5;
    float _1256 = _516 * 0.5;
    float _1257 = _517 * 0.5;
    float _1258 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1261 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1264 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1298;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1271 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_878, _882, _885, _888));
        float _1275 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_880, _883, _886, _889));
        float _1279 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_881, _884, _887, _890));
        float _1286 = dot(vec4(cbModelParam._m0[39u]), vec4(_1255, _1256, _1257, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1309;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1300 = dot(vec4(cbModelParam._m0[40u]), vec4(_1255, _1256, _1257, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1313 = (_1309 * cbModelParam._m0[1u].x) + (_1298 * (1.0 - cbModelParam._m0[1u].x));
    float _1323 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _356);
    float _1324 = isnan(_1323) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1323 : min(cbModelParam._m0[25u].z, _1323));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1373 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1377 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1381 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1384 = fma(_517, cbModelParam._m0[13u].z, fma(_516, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _515));
        float _1387 = fma(_517, cbModelParam._m0[14u].z, fma(_516, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _515));
        float _1390 = fma(_517, cbModelParam._m0[15u].z, fma(_516, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _515));
        float _1418;
        if (_1384 > 0.0)
        {
            _1418 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1418 = frontier_phi_14_12_ladder;
        }
        float _1644;
        if (_1387 > 0.0)
        {
            _1644 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1644 = frontier_phi_23_19_ladder;
        }
        float _1890;
        if (_1390 > 0.0)
        {
            _1890 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1890 = frontier_phi_35_30_ladder;
        }
        float _1892 = isnan(_1644) ? _1418 : (isnan(_1418) ? _1644 : min(_1418, _1644));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1384) + _1373;
        float _1898 = (_1893 * _1387) + _1377;
        float _1899 = (_1893 * _1390) + _1381;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1902 = (-1.0) - _1900;
        float _1904 = _1900 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1899 > _1904) || ((_1899 < _1902) || ((_1898 > _1904) || ((_1898 < _1902) || ((_1897 < _1902) || (_1897 > _1904))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2023 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1899, cbModelParam._m0[9u].z, fma(_1898, cbModelParam._m0[9u].y, _1897 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1899, cbModelParam._m0[10u].z, fma(_1898, cbModelParam._m0[10u].y, _1897 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1899, cbModelParam._m0[11u].z, fma(_1898, cbModelParam._m0[11u].y, _1897 * cbModelParam._m0[11u].x))), _1324);
            frontier_phi_13_35_ladder = _2023.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2023.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2023.x * cbModelParam._m0[1u].y;
        }
        _1406 = frontier_phi_13_35_ladder_2;
        _1408 = frontier_phi_13_35_ladder_1;
        _1410 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_515, _516, _517), _1324);
        _1406 = _1394.x * cbModelParam._m0[1u].y;
        _1408 = _1394.y * cbModelParam._m0[1u].y;
        _1410 = _1394.z * cbModelParam._m0[1u].y;
    }
    float _1414 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _356);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1414 : min(cbModelParam._m0[25u].w, _1414));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1471 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1475 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1479 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1482 = fma(_517, cbModelParam._m0[21u].z, fma(_516, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _515));
        float _1485 = fma(_517, cbModelParam._m0[22u].z, fma(_516, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _515));
        float _1488 = fma(_517, cbModelParam._m0[23u].z, fma(_516, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _515));
        float _1649;
        if (_1482 > 0.0)
        {
            _1649 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1649 = frontier_phi_25_21_ladder;
        }
        float _1917;
        if (_1485 > 0.0)
        {
            _1917 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1917 = frontier_phi_37_32_ladder;
        }
        float _2122;
        if (_1488 > 0.0)
        {
            _2122 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2122 = frontier_phi_46_43_ladder;
        }
        float _2124 = isnan(_1917) ? _1649 : (isnan(_1649) ? _1917 : min(_1649, _1917));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1482) + _1471;
        float _2130 = (_2125 * _1485) + _1475;
        float _2131 = (_2125 * _1488) + _1479;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2132;
        float _2135 = _2132 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2131 > _2135) || ((_2131 < _2133) || ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 < _2133) || (_2129 > _2135))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2131, cbModelParam._m0[17u].z, fma(_2130, cbModelParam._m0[17u].y, _2129 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2131, cbModelParam._m0[18u].z, fma(_2130, cbModelParam._m0[18u].y, _2129 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2131, cbModelParam._m0[19u].z, fma(_2130, cbModelParam._m0[19u].y, _2129 * cbModelParam._m0[19u].x))), _1415);
            frontier_phi_22_46_ladder = _2330.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2330.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2330.x * cbModelParam._m0[1u].z;
        }
        _1507 = frontier_phi_22_46_ladder_2;
        _1509 = frontier_phi_22_46_ladder_1;
        _1511 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_515, _516, _517), _1415);
        _1507 = _1491.x * cbModelParam._m0[1u].z;
        _1509 = _1491.y * cbModelParam._m0[1u].z;
        _1511 = _1491.z * cbModelParam._m0[1u].z;
    }
    float _1523 = ((((1.0 - _536) * ((_523 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_536 * _523)) * _507;
    float _1524 = _1523 * ((cbModelParam._m0[1u].w * (_1507 - _1406)) + _1406);
    float _1525 = _1523 * ((cbModelParam._m0[1u].w * (_1509 - _1408)) + _1408);
    float _1526 = _1523 * ((cbModelParam._m0[1u].w * (_1511 - _1410)) + _1410);
    float _1529 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1524 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1524 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, _1524 * cbSceneParam._m0[91u].x));
    vec4 _1543 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_441, _442));
    float _1545 = _1543.w;
    float _1557 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1545);
    float _1558 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1545);
    float _1559 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1545);
    uvec4 _1563 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1565 = _1563.x * 14u;
    uint _1566 = _1565 + 13u;
    float _1573 = _507 + (-1.0);
    float _1578 = (cbLight._m0[_1566].x * _1573) + 1.0;
    float _1579 = (cbLight._m0[_1566].y * _1573) + 1.0;
    float _1580 = (cbLight._m0[_1566].z * _1573) + 1.0;
    float _1581 = (cbLight._m0[_1566].w * _1573) + 1.0;
    uint _1582 = _1565 + 5u;
    float _1588 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
    uint _1592 = _1565 + 4u;
    float _1602 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1606 = _1565 | 1u;
    float _1617 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_353, _354, _355));
    float _1620 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_353, _354, _355));
    float _3694 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _3705 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1625 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.3183098733425140380859375;
    float _1627 = (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.3183098733425140380859375;
    float _1634 = ((cbLight._m0[_1582].x * _1588) * _1627) + (((cbLight._m0[_1592].x * _1557) * _1602) * _1625);
    float _1635 = ((_1588 * cbLight._m0[_1582].y) * _1627) + (((cbLight._m0[_1592].y * _1558) * _1602) * _1625);
    float _1636 = ((_1588 * cbLight._m0[_1582].z) * _1627) + (((cbLight._m0[_1592].z * _1559) * _1602) * _1625);
    uvec4 _1641 = floatBitsToUint(cbLight._m0[_1565 + 12u]);
    bool _1643 = _1641.x == 0u;
    float _1654;
    float _1656;
    float _1658;
    if (_1643)
    {
        _1654 = _1634;
        _1656 = _1635;
        _1658 = _1636;
    }
    else
    {
        uint _1662 = _1565 + 6u;
        float _1678 = (dot(vec3(cbLight._m0[_1565 + 2u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _1679 = _1678 * _1678;
        float _3716 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1681 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1654 = (((cbLight._m0[_1662].x * 0.3183098733425140380859375) * _1680) * _1681) + _1634;
        _1656 = (((cbLight._m0[_1662].y * 0.3183098733425140380859375) * _1680) * _1681) + _1635;
        _1658 = (((cbLight._m0[_1662].z * 0.3183098733425140380859375) * _1680) * _1681) + _1636;
    }
    bool _1661 = _1641.y == 0u;
    float _1699;
    float _1701;
    float _1703;
    if (_1661)
    {
        _1699 = _1654;
        _1701 = _1656;
        _1703 = _1658;
    }
    else
    {
        uint _1861 = _1565 + 7u;
        float _1877 = (dot(vec3(cbLight._m0[_1565 + 3u].xyz), vec3(_353, _354, _355)) * 0.5) + 0.5;
        float _1878 = _1877 * _1877;
        float _3732 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1879 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1880 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _1699 = (((cbLight._m0[_1861].x * 0.3183098733425140380859375) * _1879) * _1880) + _1654;
        _1701 = (((cbLight._m0[_1861].y * 0.3183098733425140380859375) * _1879) * _1880) + _1656;
        _1703 = (((cbLight._m0[_1861].z * 0.3183098733425140380859375) * _1879) * _1880) + _1658;
    }
    uint _1706 = _1565 + 8u;
    float _1719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1565].w)) * _356) * 0.949999988079071044921875);
    float _1720 = _1719 * _1719;
    float _1721 = cbLight._m0[_1565].x + _433;
    float _1722 = cbLight._m0[_1565].y + _434;
    float _1723 = cbLight._m0[_1565].z + _435;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1728 = _1727 * _1721;
    float _1729 = _1727 * _1722;
    float _1730 = _1727 * _1723;
    float _1731 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1565].xyz));
    float _3748 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _1735 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1736 = dot(vec3(_353, _354, _355), vec3(_1728, _1729, _1730));
    float _3770 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1740 = dot(vec3(cbLight._m0[_1565].xyz), vec3(_1728, _1729, _1730));
    float _3781 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1744 = _1720 * _1720;
    float _1748 = ((_1739 * _1739) * (_1744 + (-1.0))) + 1.0;
    float _1759 = (exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1760 = 1.0 - _1720;
    float _1771 = (0.5 / (((_1735 * ((_1734 * _1760) + _1720)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1760) + _1720) * _1734))) * _1734;
    float _3792 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1773 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1744 / ((_1748 * _1748) * 3.141590118408203125));
    uint _1787 = _1565 + 9u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1606].w)) * _356) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1606].x + _433;
    float _1801 = cbLight._m0[_1606].y + _434;
    float _1802 = cbLight._m0[_1606].z + _435;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1606].xyz));
    float _3803 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1814 = dot(vec3(_353, _354, _355), vec3(_1807, _1808, _1809));
    float _3814 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1606].xyz), vec3(_1807, _1808, _1809));
    float _3825 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1799 * _1799;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1835 = (exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1836 = 1.0 - _1799;
    float _1846 = (0.5 / (((_1735 * ((_1813 * _1836) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1836) + _1799) * _1813))) * _1813;
    float _3836 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    float _1858 = (((_1835 * cbLight._m0[_1787].x) * _1848) * _1588) + ((((cbLight._m0[_1706].x * _1557) * _1759) * _1773) * _1602);
    float _1859 = (((_1835 * cbLight._m0[_1787].y) * _1848) * _1588) + ((((cbLight._m0[_1706].y * _1558) * _1759) * _1773) * _1602);
    float _1860 = (((_1835 * cbLight._m0[_1787].z) * _1848) * _1588) + ((((cbLight._m0[_1706].z * _1559) * _1759) * _1773) * _1602);
    float _1922;
    float _1924;
    float _1926;
    if (_1643)
    {
        _1922 = _1858;
        _1924 = _1859;
        _1926 = _1860;
    }
    else
    {
        uint _1928 = _1565 + 2u;
        uint _1932 = _1565 + 10u;
        float _1946 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _356) * 0.949999988079071044921875);
        float _1947 = _1946 * _1946;
        float _1948 = cbLight._m0[_1928].x + _433;
        float _1949 = cbLight._m0[_1928].y + _434;
        float _1950 = cbLight._m0[_1928].z + _435;
        float _1954 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
        float _1955 = _1954 * _1948;
        float _1956 = _1954 * _1949;
        float _1957 = _1954 * _1950;
        float _1958 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_1928].xyz));
        float _3847 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
        float _1961 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1962 = dot(vec3(_353, _354, _355), vec3(_1955, _1956, _1957));
        float _3858 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
        float _1965 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1966 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_1955, _1956, _1957));
        float _3869 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1970 = _1947 * _1947;
        float _1974 = ((_1965 * _1965) * (_1970 + (-1.0))) + 1.0;
        float _1983 = (exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1984 = 1.0 - _1947;
        float _1994 = (0.5 / (((_1735 * ((_1961 * _1984) + _1947)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _1984) + _1947) * _1961))) * _1961;
        float _3880 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1996 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1970 / ((_1974 * _1974) * 3.141590118408203125));
        float _1997 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1922 = (((_1983 * cbLight._m0[_1932].x) * _1996) * _1997) + _1858;
        _1924 = (((_1983 * cbLight._m0[_1932].y) * _1996) * _1997) + _1859;
        _1926 = (((_1983 * cbLight._m0[_1932].z) * _1996) * _1997) + _1860;
    }
    float _2032;
    float _2034;
    float _2036;
    if (_1661)
    {
        _2032 = _1922;
        _2034 = _1924;
        _2036 = _1926;
    }
    else
    {
        uint _2043 = _1565 + 3u;
        uint _2047 = _1565 + 11u;
        float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _356) * 0.949999988079071044921875);
        float _2062 = _2061 * _2061;
        float _2063 = cbLight._m0[_2043].x + _433;
        float _2064 = cbLight._m0[_2043].y + _434;
        float _2065 = cbLight._m0[_2043].z + _435;
        float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
        float _2070 = _2069 * _2063;
        float _2071 = _2069 * _2064;
        float _2072 = _2069 * _2065;
        float _2073 = dot(vec3(_353, _354, _355), vec3(cbLight._m0[_2043].xyz));
        float _3896 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2076 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _2077 = dot(vec3(_353, _354, _355), vec3(_2070, _2071, _2072));
        float _3907 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _2081 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2070, _2071, _2072));
        float _3918 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2085 = _2062 * _2062;
        float _2089 = ((_2080 * _2080) * (_2085 + (-1.0))) + 1.0;
        float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2099 = 1.0 - _2062;
        float _2109 = (0.5 / (((_1735 * ((_2076 * _2099) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_1735 * _2099) + _2062) * _2076))) * _2076;
        float _3929 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_2085 / ((_2089 * _2089) * 3.141590118408203125));
        float _2112 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
        _2032 = (((_2098 * cbLight._m0[_2047].x) * _2111) * _2112) + _1922;
        _2034 = (((_2098 * cbLight._m0[_2047].y) * _2111) * _2112) + _1924;
        _2036 = (((_2098 * cbLight._m0[_2047].z) * _2111) * _2112) + _1926;
    }
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_1563.y == 0u)
    {
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2187;
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2187;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2187;
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.x;
        uint _2214 = uint((float(_2202.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _2203))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _2203)));
        float _2224 = (log2(_2190 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2225 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        uint _2228 = uint(isnan(14.0) ? _2225 : (isnan(_2225) ? 14.0 : min(_2225, 14.0)));
        uvec4 _2233 = texelFetch(g_lightClusterGridBuffer, int(((_2228 << 2u) + (_2214 << 6u)) >> 2u));
        uint _2234 = _2233.x;
        uint _2235 = _2202.z;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        if (((((1u << ((_2235 >> 4u) & 15u)) + 4294967295u) & _2234) == 0u) || ((_2235 & 240u) == 0u))
        {
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
        }
        else
        {
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            float _2485 = 0.0;
            uint _2486 = 0u;
            uint _2495;
            bool _2496;
            for (;;)
            {
                _2495 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2486 << 2u)) >> 2u)).x;
                _2496 = _2495 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2496)
                {
                    frontier_phi_61_pred = _2480;
                    frontier_phi_61_pred_1 = _2485;
                    frontier_phi_61_pred_2 = _2484;
                    frontier_phi_61_pred_3 = _2483;
                    frontier_phi_61_pred_4 = _2482;
                    frontier_phi_61_pred_5 = _2481;
                }
                else
                {
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    float _2609;
                    uint _2610;
                    _2604 = _2480;
                    _2605 = _2481;
                    _2606 = _2482;
                    _2607 = _2483;
                    _2608 = _2484;
                    _2609 = _2485;
                    _2610 = _2495;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    for (;;)
                    {
                        uint _2614 = uint(findLSB(_2610)) + (_2486 << 5u);
                        uint _2611 = (_2610 + 4294967295u) & _2610;
                        uint _2616 = _2614 * 48u;
                        vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2636 = (_2614 * 48u) + 4u;
                        vec4 _2649 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2636)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2636 + 3u)).x));
                        uint _2655 = (_2614 * 48u) + 8u;
                        vec3 _2666 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x));
                        float _2670 = _2630.x - _2188;
                        float _2671 = _2630.y - _2189;
                        float _2672 = _2630.z - _2190;
                        float _2673 = dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672));
                        float _2676 = inversesqrt(_2673);
                        float _2677 = _2676 * _2670;
                        float _2678 = _2676 * _2671;
                        float _2679 = _2676 * _2672;
                        float _2680 = dot(vec3(_463, _466, _469), vec3(_2677, _2678, _2679));
                        float _2685 = 1.0 - (_2673 * _2630.w);
                        float _3955 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                        float _2687 = sqrt(_2673) * _2649.w;
                        float _2690 = 1.39999997615814208984375 / (_2687 + 1.39999997615814208984375);
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2680) + _2691;
                        float _2697 = _2687 * _2687;
                        float _2701 = ((isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))) * _2686) / ((_2697 * 0.699999988079071044921875) + 1.0);
                        float _2705 = (-0.0) - _2188;
                        float _2706 = (-0.0) - _2189;
                        float _2707 = (-0.0) - _2190;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2712 = _2711 * _2705;
                        float _2713 = _2711 * _2706;
                        float _2714 = _2711 * _2707;
                        float _2722 = exp2(log2(1.0 / ((_2697 * 3.5) + 5.0)) * 0.25);
                        float _2723 = 1.0 - _523;
                        float _2730 = sqrt(1.0 - ((1.0 - (_2723 * _2723)) * (1.0 - (_2722 * _2722))));
                        float _2731 = _2730 * _2730;
                        float _2732 = _2731 * _2731;
                        float _2733 = _2712 + _2677;
                        float _2734 = _2713 + _2678;
                        float _2735 = _2714 + _2679;
                        float _2739 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
                        float _2743 = dot(vec3(_463, _466, _469), vec3(_2712, _2713, _2714));
                        float _3971 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2746 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2747 = dot(vec3(_463, _466, _469), vec3(_2739 * _2733, _2739 * _2734, _2739 * _2735));
                        float _3982 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2754 = ((_2750 * _2750) * (_2732 + (-1.0))) + 1.0;
                        float _2755 = _2690 * _2731;
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2680) + _2756;
                        float _3993 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2760 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2761 = 1.0 - _2731;
                        float _2771 = (0.5 / (((_2760 * ((_2746 * _2761) + _2731)) + 9.9999999392252902907785028219223e-09) + (((_2760 * _2761) + _2731) * _2746))) * _2760;
                        float _4004 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2782 = (((_2732 * 3.1415927410125732421875) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) / ((_2754 * _2754) * ((_2697 * 2.1991131305694580078125) + 3.141590118408203125))) * _2686;
                        _2539 = (_2701 * _2649.x) + _2607;
                        _2540 = (_2701 * _2649.y) + _2608;
                        _2541 = (_2701 * _2649.z) + _2609;
                        _2536 = (_2782 * _2666.x) + _2604;
                        _2537 = (_2782 * _2666.y) + _2605;
                        _2538 = (_2782 * _2666.z) + _2606;
                        if (_2611 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2604 = _2536;
                            _2605 = _2537;
                            _2606 = _2538;
                            _2607 = _2539;
                            _2608 = _2540;
                            _2609 = _2541;
                            _2610 = _2611;
                        }
                    }
                    frontier_phi_61_pred = _2536;
                    frontier_phi_61_pred_1 = _2541;
                    frontier_phi_61_pred_2 = _2540;
                    frontier_phi_61_pred_3 = _2539;
                    frontier_phi_61_pred_4 = _2538;
                    frontier_phi_61_pred_5 = _2537;
                }
                _2336 = frontier_phi_61_pred;
                _2346 = frontier_phi_61_pred_1;
                _2344 = frontier_phi_61_pred_2;
                _2342 = frontier_phi_61_pred_3;
                _2340 = frontier_phi_61_pred_4;
                _2338 = frontier_phi_61_pred_5;
                uint _2487 = _2486 + 1u;
                if (_2487 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2480 = _2336;
                    _2481 = _2338;
                    _2482 = _2340;
                    _2483 = _2342;
                    _2484 = _2344;
                    _2485 = _2346;
                    _2486 = _2487;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
        }
        uvec4 _2349 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2350 = _2349.z;
        uint _2352 = (_2350 >> 8u) & 15u;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        if (((4294967295u << _2352) & _2234) == 0u)
        {
            _2448 = _2335;
            _2450 = _2337;
            _2452 = _2339;
            _2454 = _2341;
            _2456 = _2343;
            _2458 = _2345;
        }
        else
        {
            float _2473 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
            float _2474 = _2473 * _2188;
            float _2475 = _2473 * _2189;
            float _2476 = _2473 * _2190;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2352 < ((_2350 >> 12u) & 15u))
            {
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2587 = _2335;
                float _2588 = _2337;
                float _2589 = _2339;
                float _2590 = _2341;
                float _2591 = _2343;
                float _2592 = _2345;
                uint _2593 = _2352;
                uint _2602;
                bool _2603;
                for (;;)
                {
                    _2602 = texelFetch(g_lightClassification, int((((_2228 << 5u) + (_2214 << 9u)) + (_2593 << 2u)) >> 2u)).x;
                    _2603 = _2602 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2603)
                    {
                        frontier_phi_67_pred = _2590;
                        frontier_phi_67_pred_1 = _2591;
                        frontier_phi_67_pred_2 = _2592;
                        frontier_phi_67_pred_3 = _2589;
                        frontier_phi_67_pred_4 = _2588;
                        frontier_phi_67_pred_5 = _2587;
                    }
                    else
                    {
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _2800 = _2587;
                        float _2801 = _2588;
                        float _2802 = _2589;
                        float _2803 = _2590;
                        float _2804 = _2591;
                        float _2805 = _2592;
                        uint _2806 = _2602;
                        uint _2807;
                        vec4 _2832;
                        float _2833;
                        vec4 _2848;
                        vec3 _2860;
                        vec4 _2876;
                        vec4 _2891;
                        float _2938;
                        bool _2939;
                        for (;;)
                        {
                            uint _2817 = ((_2593 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2806));
                            _2807 = (_2806 + 4294967295u) & _2806;
                            uint _2819 = _2817 * 40u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2833 = _2832.w;
                            uint _2835 = (_2817 * 40u) + 4u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2817 * 40u) + 8u;
                            _2860 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x));
                            uint _2863 = (_2817 * 40u) + 16u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2817 * 40u) + 20u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2894 = (_2817 * 40u) + 24u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2913 = (_2817 * 40u) + 28u;
                            vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            _2938 = fma(_2190, _2926.z, fma(_2189, _2926.y, _2926.x * _2188)) + _2926.w;
                            _2939 = !((fma(_2190, _2907.z, fma(_2189, _2907.y, _2907.x * _2188)) + _2907.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2939)
                            {
                                float _2966 = _2832.x - _2188;
                                float _2967 = _2832.y - _2189;
                                float _2968 = _2832.z - _2190;
                                float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                                float _2972 = inversesqrt(_2969);
                                float _2973 = _2972 * _2966;
                                float _2974 = _2972 * _2967;
                                float _2975 = _2972 * _2968;
                                float _2979 = 1.0 - (_2969 / (_2833 * _2833));
                                float _4015 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _2984 = sqrt(_2969) * _2848.w;
                                float _2986 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                                float _2987 = _2986 * _2986;
                                float _2990 = ((1.0 - _2987) * dot(vec3(_2973, _2974, _2975), vec3(_463, _466, _469))) + _2987;
                                float _2993 = _2984 * _2984;
                                float _2997 = (fma(_2190, _2876.z, fma(_2189, _2876.y, _2876.x * _2188)) + _2876.w) / _2938;
                                float _2998 = (fma(_2190, _2891.z, fma(_2189, _2891.y, _2891.x * _2188)) + _2891.w) / _2938;
                                float _3002 = 1.0 - dot(vec2(_2997, _2998), vec2(_2997, _2998));
                                float _4031 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3004 = _3003 * (((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2980) / ((_2993 * 0.699999988079071044921875) + 1.0));
                                float _3016 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                                float _3017 = 1.0 - _523;
                                float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                                float _3025 = _3024 * _3024;
                                float _3026 = _3025 * _3025;
                                float _3027 = _2973 - _2474;
                                float _3028 = _2974 - _2475;
                                float _3029 = _2975 - _2476;
                                float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                                float _3037 = dot(vec3(_463, _466, _469), vec3((-0.0) - _2474, (-0.0) - _2475, (-0.0) - _2476));
                                float _4042 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3040 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3041 = dot(vec3(_463, _466, _469), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                                float _4053 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3044 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                                float _3049 = _2986 * _3025;
                                float _3050 = _3049 * _3049;
                                float _3056 = ((1.0 - _3050) * dot(vec3(_463, _466, _469), vec3(_2973, _2974, _2975))) + _3050;
                                float _4064 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3058 = 1.0 - _3025;
                                float _3068 = (0.5 / (((_3057 * ((_3040 * _3058) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3057 * _3058) + _3025) * _3040))) * _3057;
                                float _4075 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3078 = (_3003 * _2980) * (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) / ((_3048 * _3048) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3078 * _2860.x;
                                frontier_phi_73_pred_1 = _3078 * _2860.y;
                                frontier_phi_73_pred_2 = _3004 * _2848.z;
                                frontier_phi_73_pred_3 = _3004 * _2848.y;
                                frontier_phi_73_pred_4 = _3004 * _2848.x;
                                frontier_phi_73_pred_5 = _3078 * _2860.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3082 = frontier_phi_73_pred;
                            _3083 = frontier_phi_73_pred_1;
                            _3087 = frontier_phi_73_pred_2;
                            _3086 = frontier_phi_73_pred_3;
                            _3085 = frontier_phi_73_pred_4;
                            _3084 = frontier_phi_73_pred_5;
                            _2790 = _3085 + _2803;
                            _2791 = _3086 + _2804;
                            _2792 = _3087 + _2805;
                            _2787 = _3082 + _2800;
                            _2788 = _3083 + _2801;
                            _2789 = _3084 + _2802;
                            if (_2807 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2800 = _2787;
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2807;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2790;
                        frontier_phi_67_pred_1 = _2791;
                        frontier_phi_67_pred_2 = _2792;
                        frontier_phi_67_pred_3 = _2789;
                        frontier_phi_67_pred_4 = _2788;
                        frontier_phi_67_pred_5 = _2787;
                    }
                    _2455 = frontier_phi_67_pred;
                    _2457 = frontier_phi_67_pred_1;
                    _2459 = frontier_phi_67_pred_2;
                    _2453 = frontier_phi_67_pred_3;
                    _2451 = frontier_phi_67_pred_4;
                    _2449 = frontier_phi_67_pred_5;
                    uint _2594 = _2593 + 1u;
                    if (_2594 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2587 = _2449;
                        _2588 = _2451;
                        _2589 = _2453;
                        _2590 = _2455;
                        _2591 = _2457;
                        _2592 = _2459;
                        _2593 = _2594;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2457;
                frontier_phi_55_56_ladder_1 = _2459;
                frontier_phi_55_56_ladder_2 = _2455;
                frontier_phi_55_56_ladder_3 = _2453;
                frontier_phi_55_56_ladder_4 = _2451;
                frontier_phi_55_56_ladder_5 = _2449;
            }
            else
            {
                frontier_phi_55_56_ladder = _2343;
                frontier_phi_55_56_ladder_1 = _2345;
                frontier_phi_55_56_ladder_2 = _2341;
                frontier_phi_55_56_ladder_3 = _2339;
                frontier_phi_55_56_ladder_4 = _2337;
                frontier_phi_55_56_ladder_5 = _2335;
            }
            _2448 = frontier_phi_55_56_ladder_5;
            _2450 = frontier_phi_55_56_ladder_4;
            _2452 = frontier_phi_55_56_ladder_3;
            _2454 = frontier_phi_55_56_ladder_2;
            _2456 = frontier_phi_55_56_ladder;
            _2458 = frontier_phi_55_56_ladder_1;
        }
        float _2463 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
        _2247 = (_2463 * _2454) + _1699;
        _2249 = (_2463 * _2456) + _1701;
        _2251 = (_2463 * _2458) + _1703;
        _2253 = ((_2448 * 0.039999999105930328369140625) * _2463) + _2032;
        _2255 = ((_2450 * 0.039999999105930328369140625) * _2463) + _2034;
        _2257 = ((_2452 * 0.039999999105930328369140625) * _2463) + _2036;
    }
    else
    {
        _2247 = _1699;
        _2249 = _1701;
        _2251 = _1703;
        _2253 = _2032;
        _2255 = _2034;
        _2257 = _2036;
    }
    float _4091 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _4102 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _4113 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    uint _2277 = _220 + 6u;
    float _2285 = _441 / cbSceneParam._m0[86u].x;
    float _2286 = _442 / cbSceneParam._m0[86u].y;
    vec4 _2300 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2285, _2286, (log2((isnan(cbSceneParam._m0[77u].w) ? _374 : (isnan(_374) ? cbSceneParam._m0[77u].w : min(_374, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2302 = _2300.x;
    float _2303 = _2300.y;
    float _2304 = _2300.z;
    float _2305 = _2300.w;
    float _2398;
    float _2400;
    float _2402;
    float _2404;
    if (_374 > cbSceneParam._m0[78u].w)
    {
        float _2360 = isnan(_374) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _374 : min(cbSceneParam._m0[80u].w, _374));
        float _2361 = _2360 / _374;
        float _2372 = _2361 * _426;
        float _2373 = _427 * _2361;
        float _2374 = (-0.0) - _2373;
        float _2376 = _2361 * _428;
        float _2378 = (cbSceneParam._m0[77u].w * _2374) / _2360;
        float _2379 = _2378 + cbSceneParam._m0[79u].w;
        float _2380 = cbSceneParam._m0[79u].w - _2373;
        float _2386 = sqrt(((_2372 * _2372) + (_2373 * _2373)) + (_2376 * _2376));
        float _2389 = (1.0 - (cbSceneParam._m0[77u].w / _2360)) * _2386;
        float _2394 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2396 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2549;
        if (abs((_2374 - _2378) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2549 = ((((_2379 > 0.0) ? exp2(_2394 * _2379) : (2.0 - exp2(_2396 * _2379))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2389;
        }
        else
        {
            float _2509 = 1.0 / cbSceneParam._m0[80u].x;
            float _2510 = isnan(_2380) ? _2379 : (isnan(_2379) ? _2380 : max(_2379, _2380));
            float _2511 = isnan(_2380) ? _2379 : (isnan(_2379) ? _2380 : min(_2379, _2380));
            float _2520 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : min(_2510, 0.0));
            float _2521 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : min(_2511, 0.0));
            _2549 = ((abs(_2386 / _2374) * cbSceneParam._m0[80u].y) * ((((_2520 - _2521) * 2.0) - ((exp2(_2394 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0)))) - exp2(_2394 * (isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0))))) * _2509)) - ((exp2(_2396 * _2520) - exp2(_2396 * _2521)) * _2509))) + (_2389 * cbSceneParam._m0[80u].z);
        }
        vec4 _2551 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2285, _2286, 1.0), 0.0);
        float _2560 = exp2((_2549 * (-1.44269502162933349609375)) * (1.0 - _2551.w));
        float _2561 = log2(_2560);
        float _2577 = log2(_2305);
        _2398 = (exp2(_2577 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].x)) * _2551.x) / cbSceneParam._m0[78u].x)) + _2302;
        _2400 = (exp2(_2577 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].y)) * _2551.y) / cbSceneParam._m0[78u].y)) + _2303;
        _2402 = (exp2(_2577 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].z)) * _2551.z) / cbSceneParam._m0[78u].z)) + _2304;
        _2404 = _2560 * _2305;
    }
    else
    {
        _2398 = _2302;
        _2400 = _2303;
        _2402 = _2304;
        _2404 = _2305;
    }
    float _2416 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2417 = _2416 == 3.0;
    float _2418 = log2(_2404);
    float _2425 = exp2(_2418 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2247 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _507))) + ((_2253 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1313)) * cbPerFrame._m0[3u].x));
    float _2426 = exp2(_2418 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_2249 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _507))) + ((_2255 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1313)) * cbPerFrame._m0[3u].x));
    float _2427 = exp2(_2418 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2251 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _507))) + ((_2257 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1313)) * cbPerFrame._m0[3u].x));
    float _2436 = (_2416 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2436 * (_2417 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.y = _2436 * (_2417 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.z = _2436 * (_2417 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2402)));
    SV_Target.w = cbInstanceData._m0[_2277].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2277].w;
}


