#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1224;
float _3868;
float _3869;
float _3870;
float _3871;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3880 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3891 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3902 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _330 = _325.x * cbMtdParam._m0[11u].x;
    float _331 = _325.y * cbMtdParam._m0[11u].y;
    float _332 = _325.z * cbMtdParam._m0[11u].z;
    vec4 _351 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _400 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _417 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_390 - _400) * cbMtdParam._m0[24u].x) + _400) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3913 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _418 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _425 = (_418 * ((_351.x * cbMtdParam._m0[12u].x) - _330)) + _330;
    float _426 = (_418 * ((_351.y * cbMtdParam._m0[12u].y) - _331)) + _331;
    float _427 = (_418 * ((_351.z * cbMtdParam._m0[12u].z) - _332)) + _332;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _287) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _288) + cbTextureTilingScale._m0[3u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _466 = _464.x;
    float _476 = dot(vec4(_466, _464.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _490 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_466 - _476) * cbMtdParam._m0[24u].x) + _476) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3924 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _498 = (_491 * ((_444.x * cbMtdParam._m0[13u].x) - _425)) + _425;
    float _499 = (_491 * ((_444.y * cbMtdParam._m0[13u].y) - _426)) + _426;
    float _500 = (_491 * ((_444.z * cbMtdParam._m0[13u].z) - _427)) + _427;
    float _504 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _498;
    float _507 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _499;
    float _510 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _500;
    float _517 = ((_498 - _504) * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) + _504;
    float _518 = ((_499 - _507) * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) + _507;
    float _519 = ((_500 - _510) * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) + _510;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _554 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _575 = _571.z;
    float _582 = ((_554.x - _573) * _418) + _573;
    float _583 = ((_554.y - _574) * _418) + _574;
    float _584 = ((_554.z - _575) * _418) + _575;
    vec4 _596 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _287) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _288) + cbTextureTilingScale._m0[2u].w));
    float _609 = ((_596.z - _584) * _491) + _584;
    float _612 = ((((_596.x - _582) * _491) + _582) * 2.0) + (-1.0);
    float _613 = ((((_596.y - _583) * _491) + _583) * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _3935 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))));
    float _624 = _612 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_531.x * 2.0) + (-1.0)));
    float _625 = _613 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_531.y * 2.0) + (-1.0)));
    vec4 _638 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _645 = (((_531.z - _609) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _609;
    float _647 = cbMtdParam._m0[22u].x + _638.w;
    float _650 = fma(_619, _234 * NORMAL.x, fma(_625, _241 * TANGENT.x, (_227 * _219) * _624));
    float _653 = fma(_619, _234 * NORMAL.y, fma(_625, _241 * TANGENT.y, (_227 * _220) * _624));
    float _656 = fma(_619, _234 * NORMAL.z, fma(_625, _241 * TANGENT.z, (_227 * _221) * _624));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _3946 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _664 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3968 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3979 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3990 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _734 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _724);
    float _735 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _724);
    float _736 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _724);
    float _740 = inversesqrt(dot(vec3(_734, _735, _736), vec3(_734, _735, _736)));
    float _741 = _734 * _740;
    float _742 = _735 * _740;
    float _743 = _736 * _740;
    vec4 _748 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _750 = _748.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _904 = sqrt(((_734 * _734) + (_735 * _735)) + (_736 * _736));
        float _910 = (cbMatDynParam._m0[5u].x * _904) + cbMatDynParam._m0[5u].y;
        float _4001 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _915 = (cbMatDynParam._m0[5u].z * _904) + cbMatDynParam._m0[5u].w;
        float _4012 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) - _911)) + _911) < ((_750 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _761 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _762 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _780 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _783 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _786 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    uint _799 = _268 + 9u;
    uint _800 = _799 + uint(cbMatDynParam._m0[0u].w);
    float _806 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_800].x;
    float _807 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_800].y;
    float _808 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_800].z;
    float _4023 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _811 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    vec4 _820 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _761, cbSceneParam._m0[86u].y * _762));
    float _824 = ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * TEXCOORD_5.w) * _820.x;
    float _825 = dot(vec3(_661, _662, _663), vec3(_741, _742, _743));
    float _828 = _825 * 2.0;
    float _832 = (_828 * _661) - _741;
    float _833 = (_828 * _662) - _742;
    float _834 = (_828 * _663) - _743;
    float _838 = abs(dot(vec3(_741, _742, _743), vec3(_661, _662, _663)));
    float _4056 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _840 = sqrt(_664);
    float _853 = exp2((_840 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_840 * 3.0));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1223;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _948 = fma(_893, cbModelParam._m0[26u].z, fma(_889, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885));
        float _952 = fma(_893, cbModelParam._m0[27u].z, fma(_889, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885));
        float _956 = fma(_893, cbModelParam._m0[28u].z, fma(_889, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885));
        float _981 = _885 + _661;
        float _982 = _889 + _662;
        float _983 = _893 + _663;
        float _993 = fma(_983, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981)) - _948;
        float _994 = fma(_983, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981)) - _952;
        float _995 = fma(_983, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981)) - _956;
        float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
        float _1012 = ((_999 * _993) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_948 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_999 * _994) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_952 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_999 * _995) / cbModelParam._m0[34u].z) + ((((((_956 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1012, _1013, _1014), 0.0);
        float _1051 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1017.x + (-0.5));
        float _1053 = _1051 * (_1017.y + (-0.5));
        float _1054 = _1051 * (_1017.z + (-0.5));
        float _1061 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1024.x + (-0.5));
        float _1063 = _1061 * (_1024.y + (-0.5));
        float _1064 = _1061 * (_1024.z + (-0.5));
        float _1071 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1031.x + (-0.5));
        float _1073 = _1071 * (_1031.y + (-0.5));
        float _1074 = _1071 * (_1031.z + (-0.5));
        float _1081 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1038.x + (-0.5));
        float _1083 = _1081 * (_1038.y + (-0.5));
        float _1084 = _1081 * (_1038.z + (-0.5));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = _1052 * 0.5;
        float _1089 = _1062 * 0.5;
        float _1090 = _1072 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1105 = (dot(vec3(_661, _662, _663), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _4082 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1115 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _4093 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4104 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_1117 + 1.0))) + _1122) * _1085;
        float _1132 = _1053 * 0.5;
        float _1133 = _1063 * 0.5;
        float _1134 = _1073 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_661, _662, _663), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _4137 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1159 + 1.0))) + _1164) * _1086;
        float _1174 = _1054 * 0.5;
        float _1175 = _1064 * 0.5;
        float _1176 = _1074 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_661, _662, _663), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _4170 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1201 + 1.0))) + _1206) * _1087;
        _1223 = _1054;
        _1225 = _1053;
        _1226 = _1052;
        _1227 = _1064;
        _1228 = _1063;
        _1229 = _1062;
        _1230 = _1074;
        _1231 = _1073;
        _1232 = _1072;
        _1233 = _1087;
        _1234 = _1086;
        _1235 = _1085;
        _1236 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
    }
    else
    {
        _1223 = _1224;
        _1225 = _1224;
        _1226 = _1224;
        _1227 = _1224;
        _1228 = _1224;
        _1229 = _1224;
        _1230 = _1224;
        _1231 = _1224;
        _1232 = _1224;
        _1233 = _1224;
        _1234 = _1224;
        _1235 = _1224;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1265 = fma(_893, cbModelParam._m0[30u].z, fma(_889, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _885));
        float _1269 = fma(_893, cbModelParam._m0[31u].z, fma(_889, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _885));
        float _1273 = fma(_893, cbModelParam._m0[32u].z, fma(_889, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _885));
        float _1296 = _885 + _661;
        float _1297 = _889 + _662;
        float _1298 = _893 + _663;
        float _1308 = fma(_1298, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296)) - _1265;
        float _1309 = fma(_1298, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296)) - _1269;
        float _1310 = fma(_1298, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296)) - _1273;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1265 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1269 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[35u].z) + ((((((_1273 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1364 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1331.x + (-0.5));
        float _1366 = _1364 * (_1331.y + (-0.5));
        float _1367 = _1364 * (_1331.z + (-0.5));
        float _1374 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1338.x + (-0.5));
        float _1376 = _1374 * (_1338.y + (-0.5));
        float _1377 = _1374 * (_1338.z + (-0.5));
        float _1384 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1345.x + (-0.5));
        float _1386 = _1384 * (_1345.y + (-0.5));
        float _1387 = _1384 * (_1345.z + (-0.5));
        float _1394 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1352.x + (-0.5));
        float _1396 = _1394 * (_1352.y + (-0.5));
        float _1397 = _1394 * (_1352.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_661, _662, _663), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4233 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1428 + 1.0))) + _1433) * _1398;
        float _1443 = _1366 * 0.5;
        float _1444 = _1376 * 0.5;
        float _1445 = _1386 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_661, _662, _663), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4266 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1470 + 1.0))) + _1475) * _1399;
        float _1485 = _1367 * 0.5;
        float _1486 = _1377 * 0.5;
        float _1487 = _1387 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_661, _662, _663), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4299 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1512 + 1.0))) + _1517) * _1400;
        _1534 = _1367;
        _1535 = _1366;
        _1536 = _1365;
        _1537 = _1377;
        _1538 = _1376;
        _1539 = _1375;
        _1540 = _1387;
        _1541 = _1386;
        _1542 = _1385;
        _1543 = _1400;
        _1544 = _1399;
        _1545 = _1398;
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1224;
        _1535 = _1224;
        _1536 = _1224;
        _1537 = _1224;
        _1538 = _1224;
        _1539 = _1224;
        _1540 = _1224;
        _1541 = _1224;
        _1542 = _1224;
        _1543 = _1224;
        _1544 = _1224;
        _1545 = _1224;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1236)) + _1236;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1237)) + _1237;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1238)) + _1238;
    float _1581 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1558));
    float _1602 = _832 * 0.5;
    float _1603 = _833 * 0.5;
    float _1604 = _834 * 0.5;
    float _1605 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1608 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1611 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1645;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1618 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1223, _1227, _1230, _1233));
        float _1622 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1225, _1228, _1231, _1234));
        float _1626 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1633 = dot(vec4(cbModelParam._m0[39u]), vec4(_1602, _1603, _1604, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1656;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1647 = dot(vec4(cbModelParam._m0[40u]), vec4(_1602, _1603, _1604, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1660 = (_1656 * cbModelParam._m0[1u].x) + (_1645 * (1.0 - cbModelParam._m0[1u].x));
    float _1670 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _664);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1670 : min(cbModelParam._m0[25u].z, _1670));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1720 = fma(_893, cbModelParam._m0[13u].z, fma(_889, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _885)) + cbModelParam._m0[13u].w;
        float _1724 = fma(_893, cbModelParam._m0[14u].z, fma(_889, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _885)) + cbModelParam._m0[14u].w;
        float _1728 = fma(_893, cbModelParam._m0[15u].z, fma(_889, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _885)) + cbModelParam._m0[15u].w;
        float _1731 = fma(_834, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832));
        float _1734 = fma(_834, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832));
        float _1737 = fma(_834, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832));
        float _1765;
        if (_1731 > 0.0)
        {
            _1765 = abs((1.0 - _1720) / _1731);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1720 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1765 = frontier_phi_17_15_ladder;
        }
        float _1936;
        if (_1734 > 0.0)
        {
            _1936 = abs((1.0 - _1724) / _1734);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1724 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1936 = frontier_phi_26_22_ladder;
        }
        float _2231;
        if (_1737 > 0.0)
        {
            _2231 = abs((1.0 - _1728) / _1737);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1728 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2231 = frontier_phi_38_33_ladder;
        }
        float _2233 = isnan(_1936) ? _1765 : (isnan(_1765) ? _1936 : min(_1765, _1936));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1731) + _1720;
        float _2239 = (_2234 * _1734) + _1724;
        float _2240 = (_2234 * _1737) + _1728;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1671);
            frontier_phi_16_38_ladder = _2385.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2385.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2385.x * cbModelParam._m0[1u].y;
        }
        _1753 = frontier_phi_16_38_ladder_2;
        _1755 = frontier_phi_16_38_ladder_1;
        _1757 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_832, _833, _834), _1671);
        _1753 = _1741.x * cbModelParam._m0[1u].y;
        _1755 = _1741.y * cbModelParam._m0[1u].y;
        _1757 = _1741.z * cbModelParam._m0[1u].y;
    }
    float _1761 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _664);
    float _1762 = isnan(_1761) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1761 : min(cbModelParam._m0[25u].w, _1761));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1817 = fma(_893, cbModelParam._m0[21u].z, fma(_889, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _885)) + cbModelParam._m0[21u].w;
        float _1821 = fma(_893, cbModelParam._m0[22u].z, fma(_889, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _885)) + cbModelParam._m0[22u].w;
        float _1825 = fma(_893, cbModelParam._m0[23u].z, fma(_889, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _885)) + cbModelParam._m0[23u].w;
        float _1828 = fma(_834, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832));
        float _1831 = fma(_834, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832));
        float _1834 = fma(_834, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832));
        float _1941;
        if (_1828 > 0.0)
        {
            _1941 = abs((1.0 - _1817) / _1828);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1817 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1941 = frontier_phi_28_24_ladder;
        }
        float _2258;
        if (_1831 > 0.0)
        {
            _2258 = abs((1.0 - _1821) / _1831);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1821 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2258 = frontier_phi_40_35_ladder;
        }
        float _2585;
        if (_1834 > 0.0)
        {
            _2585 = abs((1.0 - _1825) / _1834);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1825 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2585 = frontier_phi_50_47_ladder;
        }
        float _2587 = isnan(_2258) ? _1941 : (isnan(_1941) ? _2258 : min(_1941, _2258));
        float _2588 = isnan(_2585) ? _2587 : (isnan(_2587) ? _2585 : min(_2587, _2585));
        float _2592 = (_2588 * _1828) + _1817;
        float _2593 = (_2588 * _1831) + _1821;
        float _2594 = (_2588 * _1834) + _1825;
        float _2595 = _2588 * 9.9999997473787516355514526367188e-05;
        float _2596 = (-1.0) - _2595;
        float _2598 = _2595 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2594 > _2598) || ((_2594 < _2596) || ((_2593 > _2598) || ((_2593 < _2596) || ((_2592 < _2596) || (_2592 > _2598))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2594, cbModelParam._m0[17u].z, fma(_2593, cbModelParam._m0[17u].y, _2592 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2594, cbModelParam._m0[18u].z, fma(_2593, cbModelParam._m0[18u].y, _2592 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2594, cbModelParam._m0[19u].z, fma(_2593, cbModelParam._m0[19u].y, _2592 * cbModelParam._m0[19u].x))), _1762);
            frontier_phi_25_50_ladder = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1853 = frontier_phi_25_50_ladder_2;
        _1855 = frontier_phi_25_50_ladder_1;
        _1857 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_832, _833, _834), _1762);
        _1853 = _1837.x * cbModelParam._m0[1u].z;
        _1855 = _1837.y * cbModelParam._m0[1u].z;
        _1857 = _1837.z * cbModelParam._m0[1u].z;
    }
    float _1869 = ((((1.0 - _853) * ((_840 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_853 * _840)) * _824;
    float _1870 = _1869 * ((cbModelParam._m0[1u].w * (_1853 - _1753)) + _1753);
    float _1871 = _1869 * ((cbModelParam._m0[1u].w * (_1855 - _1755)) + _1755);
    float _1872 = _1869 * ((cbModelParam._m0[1u].w * (_1857 - _1757)) + _1757);
    float _1875 = fma(_1872, cbSceneParam._m0[89u].z, fma(_1871, cbSceneParam._m0[89u].y, _1870 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1872, cbSceneParam._m0[90u].z, fma(_1871, cbSceneParam._m0[90u].y, _1870 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1872, cbSceneParam._m0[91u].z, fma(_1871, cbSceneParam._m0[91u].y, _1870 * cbSceneParam._m0[91u].x));
    float _1915 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1919 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1928 = _1915 / _1927;
    float _1929 = _1919 / _1927;
    float _1930 = _1923 / _1927;
    float _2077;
    float _2078;
    float _2079;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1957 = ((uint(_1930 > cbSceneParam._m0[59u].y) + uint(_1930 > cbSceneParam._m0[59u].x)) + uint(_1930 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1958 = _1957 + 43u;
        uint _1966 = _1957 + 44u;
        uint _1974 = _1957 + 45u;
        uint _1982 = _1957 + 46u;
        float _1993 = fma(_1927, cbSceneParam._m0[_1958].w, fma(_1923, cbSceneParam._m0[_1958].z, fma(_1919, cbSceneParam._m0[_1958].y, _1915 * cbSceneParam._m0[_1958].x)));
        float _1997 = fma(_1927, cbSceneParam._m0[_1966].w, fma(_1923, cbSceneParam._m0[_1966].z, fma(_1919, cbSceneParam._m0[_1966].y, _1915 * cbSceneParam._m0[_1966].x)));
        float _2005 = fma(_1927, cbSceneParam._m0[_1982].w, fma(_1923, cbSceneParam._m0[_1982].z, fma(_1919, cbSceneParam._m0[_1982].y, _1915 * cbSceneParam._m0[_1982].x)));
        float _2010 = cbSceneParam._m0[33u].z * _2005;
        float _2012 = cbSceneParam._m0[33u].w * _2005;
        float _2015 = fma(_1927, cbSceneParam._m0[_1974].w, fma(_1923, cbSceneParam._m0[_1974].z, fma(_1919, cbSceneParam._m0[_1974].y, _1915 * cbSceneParam._m0[_1974].x))) / _2005;
        float _2063 = (cbSceneParam._m0[33u].x - sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930))) * cbSceneParam._m0[33u].y;
        float _4425 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2070 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2010 + _1993) / _2005, (_2012 + _1997) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2012 + _1993) / _2005, (_1997 - _2010) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 - _2010) / _2005, (_1997 - _2012) / _2005), _2015), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1993 - _2012) / _2005, (_2010 + _1997) / _2005), _2015), 0.0)).x), vec4(0.25)));
        _2077 = 1.0 - (_2070 * cbSceneParam._m0[34u].x);
        _2078 = 1.0 - (_2070 * cbSceneParam._m0[34u].y);
        _2079 = 1.0 - (_2070 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2077 = 1.0;
        _2078 = 1.0;
        _2079 = 1.0;
    }
    float _2143;
    float _2145;
    float _2147;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2131 = fma(_1927, cbSceneParam._m0[63u].w, fma(_1923, cbSceneParam._m0[63u].z, fma(_1919, cbSceneParam._m0[63u].y, _1915 * cbSceneParam._m0[63u].x)));
        float _2132 = fma(_1927, cbSceneParam._m0[60u].w, fma(_1923, cbSceneParam._m0[60u].z, fma(_1919, cbSceneParam._m0[60u].y, _1915 * cbSceneParam._m0[60u].x))) / _2131;
        float _2133 = fma(_1927, cbSceneParam._m0[61u].w, fma(_1923, cbSceneParam._m0[61u].z, fma(_1919, cbSceneParam._m0[61u].y, _1915 * cbSceneParam._m0[61u].x))) / _2131;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2132 >= cbSceneParam._m0[64u].x) && (_2133 >= cbSceneParam._m0[64u].y)) && (_2132 <= cbSceneParam._m0[64u].z)) && (_2133 <= cbSceneParam._m0[64u].w))
        {
            float _2271 = fma(_1927, cbSceneParam._m0[62u].w, fma(_1923, cbSceneParam._m0[62u].z, fma(_1919, cbSceneParam._m0[62u].y, _1915 * cbSceneParam._m0[62u].x))) / _2131;
            float _2275 = isnan(cbSceneParam._m0[41u].w) ? _2271 : (isnan(_2271) ? cbSceneParam._m0[41u].w : max(_2271, cbSceneParam._m0[41u].w));
            float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930))) * cbSceneParam._m0[33u].y;
            float _4441 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
            float _2325 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2132, cbSceneParam._m0[33u].w + _2133), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2132, _2133 - cbSceneParam._m0[33u].z), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2132 - cbSceneParam._m0[33u].z, _2133 - cbSceneParam._m0[33u].w), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2132 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2133), _2275), 0.0)).x), vec4(0.25)));
            float _2329 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
            float _2330 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
            float _2331 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2331) ? _2079 : (isnan(_2079) ? _2331 : min(_2079, _2331));
            frontier_phi_37_36_ladder_1 = isnan(_2330) ? _2078 : (isnan(_2078) ? _2330 : min(_2078, _2330));
            frontier_phi_37_36_ladder_2 = isnan(_2329) ? _2077 : (isnan(_2077) ? _2329 : min(_2077, _2329));
        }
        else
        {
            frontier_phi_37_36_ladder = _2079;
            frontier_phi_37_36_ladder_1 = _2078;
            frontier_phi_37_36_ladder_2 = _2077;
        }
        _2143 = frontier_phi_37_36_ladder_2;
        _2145 = frontier_phi_37_36_ladder_1;
        _2147 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2143 = _2077;
        _2145 = _2078;
        _2147 = _2079;
    }
    uvec4 _2152 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _2154 = _2152.x * 14u;
    uint _2155 = _2154 + 13u;
    float _2162 = _824 + (-1.0);
    float _2167 = (cbLight._m0[_2155].x * _2162) + 1.0;
    float _2168 = (cbLight._m0[_2155].y * _2162) + 1.0;
    float _2169 = (cbLight._m0[_2155].z * _2162) + 1.0;
    float _2170 = (cbLight._m0[_2155].w * _2162) + 1.0;
    uint _2171 = _2154 + 5u;
    float _2177 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2181 = _2154 + 4u;
    float _2190 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2194 = _2154 | 1u;
    float _2205 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_661, _662, _663));
    float _2208 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_661, _662, _663));
    float _4477 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _4488 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2213 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2215 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2222 = ((cbLight._m0[_2171].x * _2177) * _2215) + (((cbLight._m0[_2181].x * _2143) * _2190) * _2213);
    float _2223 = ((_2177 * cbLight._m0[_2171].y) * _2215) + (((cbLight._m0[_2181].y * _2145) * _2190) * _2213);
    float _2224 = ((_2177 * cbLight._m0[_2171].z) * _2215) + (((cbLight._m0[_2181].z * _2147) * _2190) * _2213);
    uvec4 _2228 = floatBitsToUint(cbLight._m0[_2154 + 12u]);
    bool _2230 = _2228.x == 0u;
    float _2332;
    float _2334;
    float _2336;
    if (_2230)
    {
        _2332 = _2222;
        _2334 = _2223;
        _2336 = _2224;
    }
    else
    {
        uint _2340 = _2154 + 6u;
        float _2356 = (dot(vec3(cbLight._m0[_2154 + 2u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2357 = _2356 * _2356;
        float _4499 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2358 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2359 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2332 = (((cbLight._m0[_2340].x * 0.3183098733425140380859375) * _2358) * _2359) + _2222;
        _2334 = (((cbLight._m0[_2340].y * 0.3183098733425140380859375) * _2358) * _2359) + _2223;
        _2336 = (((cbLight._m0[_2340].z * 0.3183098733425140380859375) * _2358) * _2359) + _2224;
    }
    bool _2339 = _2228.y == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2339)
    {
        _2394 = _2332;
        _2396 = _2334;
        _2398 = _2336;
    }
    else
    {
        uint _2556 = _2154 + 7u;
        float _2572 = (dot(vec3(cbLight._m0[_2154 + 3u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2573 = _2572 * _2572;
        float _4515 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2574 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2575 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2394 = (((cbLight._m0[_2556].x * 0.3183098733425140380859375) * _2574) * _2575) + _2332;
        _2396 = (((cbLight._m0[_2556].y * 0.3183098733425140380859375) * _2574) * _2575) + _2334;
        _2398 = (((cbLight._m0[_2556].z * 0.3183098733425140380859375) * _2574) * _2575) + _2336;
    }
    uint _2401 = _2154 + 8u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _664) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2154].x + _741;
    float _2417 = cbLight._m0[_2154].y + _742;
    float _2418 = cbLight._m0[_2154].z + _743;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2154].xyz));
    float _4531 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _2430 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2431 = dot(vec3(_661, _662, _663), vec3(_2423, _2424, _2425));
    float _4553 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2435 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2423, _2424, _2425));
    float _4564 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2439 = _2415 * _2415;
    float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
    float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2455 = 1.0 - _2415;
    float _2466 = (0.5 / (((_2430 * ((_2429 * _2455) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2455) + _2415) * _2429))) * _2429;
    float _4575 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
    uint _2482 = _2154 + 9u;
    float _2493 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2194].w)) * _664) * 0.949999988079071044921875);
    float _2494 = _2493 * _2493;
    float _2495 = cbLight._m0[_2194].x + _741;
    float _2496 = cbLight._m0[_2194].y + _742;
    float _2497 = cbLight._m0[_2194].z + _743;
    float _2501 = inversesqrt(dot(vec3(_2495, _2496, _2497), vec3(_2495, _2496, _2497)));
    float _2502 = _2501 * _2495;
    float _2503 = _2501 * _2496;
    float _2504 = _2501 * _2497;
    float _2505 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2194].xyz));
    float _4586 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2508 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2509 = dot(vec3(_661, _662, _663), vec3(_2502, _2503, _2504));
    float _4597 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
    float _2512 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2513 = dot(vec3(cbLight._m0[_2194].xyz), vec3(_2502, _2503, _2504));
    float _4608 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2517 = _2494 * _2494;
    float _2521 = ((_2512 * _2512) * (_2517 + (-1.0))) + 1.0;
    float _2530 = (exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2531 = 1.0 - _2494;
    float _2541 = (0.5 / (((_2430 * ((_2508 * _2531) + _2494)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2531) + _2494) * _2508))) * _2508;
    float _4619 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2517 / ((_2521 * _2521) * 3.141590118408203125));
    float _2553 = (((_2530 * cbLight._m0[_2482].x) * _2543) * _2177) + ((((cbLight._m0[_2401].x * _2143) * _2454) * _2468) * _2190);
    float _2554 = (((_2530 * cbLight._m0[_2482].y) * _2543) * _2177) + ((((cbLight._m0[_2401].y * _2145) * _2454) * _2468) * _2190);
    float _2555 = (((_2530 * cbLight._m0[_2482].z) * _2543) * _2177) + ((((cbLight._m0[_2401].z * _2147) * _2454) * _2468) * _2190);
    float _2611;
    float _2613;
    float _2615;
    if (_2230)
    {
        _2611 = _2553;
        _2613 = _2554;
        _2615 = _2555;
    }
    else
    {
        uint _2617 = _2154 + 2u;
        uint _2621 = _2154 + 10u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _664) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _741;
        float _2638 = cbLight._m0[_2617].y + _742;
        float _2639 = cbLight._m0[_2617].z + _743;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2617].xyz));
        float _4630 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2651 = dot(vec3(_661, _662, _663), vec3(_2644, _2645, _2646));
        float _4641 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4652 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2672 = (exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2673 = 1.0 - _2636;
        float _2683 = (0.5 / (((_2430 * ((_2650 * _2673) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2673) + _2636) * _2650))) * _2650;
        float _4663 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2611 = (((_2672 * cbLight._m0[_2621].x) * _2685) * _2686) + _2553;
        _2613 = (((_2672 * cbLight._m0[_2621].y) * _2685) * _2686) + _2554;
        _2615 = (((_2672 * cbLight._m0[_2621].z) * _2685) * _2686) + _2555;
    }
    float _2717;
    float _2719;
    float _2721;
    if (_2339)
    {
        _2717 = _2611;
        _2719 = _2613;
        _2721 = _2615;
    }
    else
    {
        uint _2728 = _2154 + 3u;
        uint _2732 = _2154 + 11u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _664) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _741;
        float _2749 = cbLight._m0[_2728].y + _742;
        float _2750 = cbLight._m0[_2728].z + _743;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2728].xyz));
        float _4679 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2762 = dot(vec3(_661, _662, _663), vec3(_2755, _2756, _2757));
        float _4690 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4701 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2783 = (exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2784 = 1.0 - _2747;
        float _2794 = (0.5 / (((_2430 * ((_2761 * _2784) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2784) + _2747) * _2761))) * _2761;
        float _4712 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2717 = (((_2783 * cbLight._m0[_2732].x) * _2796) * _2797) + _2611;
        _2719 = (((_2783 * cbLight._m0[_2732].y) * _2796) * _2797) + _2613;
        _2721 = (((_2783 * cbLight._m0[_2732].z) * _2796) * _2797) + _2615;
    }
    float _2863;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    if (_2152.y == 0u)
    {
        uvec4 _2818 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2819 = _2818.x;
        uint _2830 = uint((float(_2818.y) * floor(float(uint(cbSceneParam._m0[85u].y * _762) / _2819))) + floor(float(uint(cbSceneParam._m0[85u].x * _761) / _2819)));
        float _2840 = (log2(_1930 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2841 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        uint _2844 = uint(isnan(14.0) ? _2841 : (isnan(_2841) ? 14.0 : min(_2841, 14.0)));
        uvec4 _2849 = texelFetch(g_lightClusterGridBuffer, int(((_2844 << 2u) + (_2830 << 6u)) >> 2u));
        uint _2850 = _2849.x;
        uint _2851 = _2818.z;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        if (((((1u << ((_2851 >> 4u) & 15u)) + 4294967295u) & _2850) == 0u) || ((_2851 & 240u) == 0u))
        {
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
            _2940 = 0.0;
        }
        else
        {
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _2941;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3099)
                {
                    frontier_phi_71_pred = _3088;
                    frontier_phi_71_pred_1 = _3087;
                    frontier_phi_71_pred_2 = _3086;
                    frontier_phi_71_pred_3 = _3085;
                    frontier_phi_71_pred_4 = _3084;
                    frontier_phi_71_pred_5 = _3083;
                }
                else
                {
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    uint _3234;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3098;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3238 = uint(findLSB(_3234)) + (_3089 << 5u);
                        uint _3235 = (_3234 + 4294967295u) & _3234;
                        uint _3240 = _3238 * 48u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3260 = (_3238 * 48u) + 4u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3279 = (_3238 * 48u) + 8u;
                        vec3 _3290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x));
                        float _3294 = _3254.x - _1928;
                        float _3295 = _3254.y - _1929;
                        float _3296 = _3254.z - _1930;
                        float _3297 = dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296));
                        float _3300 = inversesqrt(_3297);
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3304 = dot(vec3(_780, _783, _786), vec3(_3301, _3302, _3303));
                        float _3309 = 1.0 - (_3297 * _3254.w);
                        float _4738 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3311 = sqrt(_3297) * _3273.w;
                        float _3314 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3304) + _3315;
                        float _3321 = _3311 * _3311;
                        float _3325 = ((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3310) / ((_3321 * 0.699999988079071044921875) + 1.0);
                        float _3329 = (-0.0) - _1928;
                        float _3330 = (-0.0) - _1929;
                        float _3331 = (-0.0) - _1930;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3345 = exp2(log2(1.0 / ((_3321 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _840;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_780, _783, _786), vec3(_3336, _3337, _3338));
                        float _4754 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3370 = dot(vec3(_780, _783, _786), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4765 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3314 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3304) + _3379;
                        float _4776 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4787 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3377 * _3377) * ((_3321 * 2.1991131305694580078125) + 3.141590118408203125))) * _3310;
                        _3158 = (_3325 * _3273.x) + _3231;
                        _3159 = (_3325 * _3273.y) + _3232;
                        _3160 = (_3325 * _3273.z) + _3233;
                        _3155 = (_3405 * _3290.x) + _3228;
                        _3156 = (_3405 * _3290.y) + _3229;
                        _3157 = (_3405 * _3290.z) + _3230;
                        if (_3235 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3235;
                        }
                    }
                    frontier_phi_71_pred = _3160;
                    frontier_phi_71_pred_1 = _3159;
                    frontier_phi_71_pred_2 = _3158;
                    frontier_phi_71_pred_3 = _3157;
                    frontier_phi_71_pred_4 = _3156;
                    frontier_phi_71_pred_5 = _3155;
                }
                _2941 = frontier_phi_71_pred;
                _2939 = frontier_phi_71_pred_1;
                _2937 = frontier_phi_71_pred_2;
                _2935 = frontier_phi_71_pred_3;
                _2933 = frontier_phi_71_pred_4;
                _2931 = frontier_phi_71_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2931;
                    _3084 = _2933;
                    _3085 = _2935;
                    _3086 = _2937;
                    _3087 = _2939;
                    _3088 = _2941;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
            _2940 = _2941;
        }
        uvec4 _2944 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2945 = _2944.z;
        uint _2947 = (_2945 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2947) & _2850) == 0u)
        {
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
            _3059 = _2938;
            _3061 = _2940;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
            float _3077 = _3076 * _1928;
            float _3078 = _3076 * _1929;
            float _3079 = _3076 * _1930;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2947 < ((_2945 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3211 = _2930;
                float _3212 = _2932;
                float _3213 = _2934;
                float _3214 = _2936;
                float _3215 = _2938;
                float _3216 = _2940;
                uint _3217 = _2947;
                uint _3226;
                bool _3227;
                for (;;)
                {
                    _3226 = texelFetch(g_lightClassification, int((((_2844 << 5u) + (_2830 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                    _3227 = _3226 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3227)
                    {
                        frontier_phi_82_pred = _3216;
                        frontier_phi_82_pred_1 = _3215;
                        frontier_phi_82_pred_2 = _3214;
                        frontier_phi_82_pred_3 = _3213;
                        frontier_phi_82_pred_4 = _3212;
                        frontier_phi_82_pred_5 = _3211;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        uint _3438 = _3226;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3522;
                        float _3568;
                        bool _3569;
                        for (;;)
                        {
                            uint _3449 = ((_3217 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3449 * 40u) + 20u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3449 * 40u) + 24u;
                            vec4 _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3543 = (_3449 * 40u) + 28u;
                            vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3543 + 3u)).x));
                            _3568 = fma(_1930, _3556.z, fma(_1929, _3556.y, _3556.x * _1928)) + _3556.w;
                            _3569 = !((fma(_1930, _3537.z, fma(_1929, _3537.y, _3537.x * _1928)) + _3537.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3569)
                            {
                                float _3596 = _3464.x - _1928;
                                float _3597 = _3464.y - _1929;
                                float _3598 = _3464.z - _1930;
                                float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                                float _3602 = inversesqrt(_3599);
                                float _3603 = _3602 * _3596;
                                float _3604 = _3602 * _3597;
                                float _3605 = _3602 * _3598;
                                float _3609 = 1.0 - (_3599 / (_3465 * _3465));
                                float _4798 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3614 = sqrt(_3599) * _3480.w;
                                float _3616 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                                float _3617 = _3616 * _3616;
                                float _3620 = ((1.0 - _3617) * dot(vec3(_3603, _3604, _3605), vec3(_780, _783, _786))) + _3617;
                                float _3623 = _3614 * _3614;
                                float _3627 = (fma(_1930, _3507.z, fma(_1929, _3507.y, _3507.x * _1928)) + _3507.w) / _3568;
                                float _3628 = (fma(_1930, _3522.z, fma(_1929, _3522.y, _3522.x * _1928)) + _3522.w) / _3568;
                                float _3632 = 1.0 - dot(vec2(_3627, _3628), vec2(_3627, _3628));
                                float _4814 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3634 = _3633 * (((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3610) / ((_3623 * 0.699999988079071044921875) + 1.0));
                                float _3646 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                                float _3647 = 1.0 - _840;
                                float _3654 = sqrt(1.0 - ((1.0 - (_3647 * _3647)) * (1.0 - (_3646 * _3646))));
                                float _3655 = _3654 * _3654;
                                float _3656 = _3655 * _3655;
                                float _3657 = _3603 - _3077;
                                float _3658 = _3604 - _3078;
                                float _3659 = _3605 - _3079;
                                float _3663 = inversesqrt(dot(vec3(_3657, _3658, _3659), vec3(_3657, _3658, _3659)));
                                float _3667 = dot(vec3(_780, _783, _786), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4825 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3671 = dot(vec3(_780, _783, _786), vec3(_3663 * _3657, _3663 * _3658, _3663 * _3659));
                                float _4836 = isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0));
                                float _3674 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3678 = ((_3674 * _3674) * (_3656 + (-1.0))) + 1.0;
                                float _3679 = _3616 * _3655;
                                float _3680 = _3679 * _3679;
                                float _3686 = ((1.0 - _3680) * dot(vec3(_780, _783, _786), vec3(_3603, _3604, _3605))) + _3680;
                                float _4847 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3688 = 1.0 - _3655;
                                float _3698 = (0.5 / (((_3687 * ((_3670 * _3688) + _3655)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3655) * _3670))) * _3687;
                                float _4858 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3708 = (_3633 * _3610) * (((_3656 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3678 * _3678) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3634 * _3480.z;
                                frontier_phi_88_pred_1 = _3634 * _3480.y;
                                frontier_phi_88_pred_2 = _3634 * _3480.x;
                                frontier_phi_88_pred_3 = _3708 * _3492.z;
                                frontier_phi_88_pred_4 = _3708 * _3492.y;
                                frontier_phi_88_pred_5 = _3708 * _3492.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3717 = frontier_phi_88_pred;
                            _3716 = frontier_phi_88_pred_1;
                            _3715 = frontier_phi_88_pred_2;
                            _3714 = frontier_phi_88_pred_3;
                            _3713 = frontier_phi_88_pred_4;
                            _3712 = frontier_phi_88_pred_5;
                            _3422 = _3715 + _3435;
                            _3423 = _3716 + _3436;
                            _3424 = _3717 + _3437;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3421 = _3714 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3424;
                        frontier_phi_82_pred_1 = _3423;
                        frontier_phi_82_pred_2 = _3422;
                        frontier_phi_82_pred_3 = _3421;
                        frontier_phi_82_pred_4 = _3420;
                        frontier_phi_82_pred_5 = _3419;
                    }
                    _3062 = frontier_phi_82_pred;
                    _3060 = frontier_phi_82_pred_1;
                    _3058 = frontier_phi_82_pred_2;
                    _3056 = frontier_phi_82_pred_3;
                    _3054 = frontier_phi_82_pred_4;
                    _3052 = frontier_phi_82_pred_5;
                    uint _3218 = _3217 + 1u;
                    if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3211 = _3052;
                        _3212 = _3054;
                        _3213 = _3056;
                        _3214 = _3058;
                        _3215 = _3060;
                        _3216 = _3062;
                        _3217 = _3218;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3058;
                frontier_phi_63_64_ladder_1 = _3062;
                frontier_phi_63_64_ladder_2 = _3060;
                frontier_phi_63_64_ladder_3 = _3056;
                frontier_phi_63_64_ladder_4 = _3054;
                frontier_phi_63_64_ladder_5 = _3052;
            }
            else
            {
                frontier_phi_63_64_ladder = _2936;
                frontier_phi_63_64_ladder_1 = _2940;
                frontier_phi_63_64_ladder_2 = _2938;
                frontier_phi_63_64_ladder_3 = _2934;
                frontier_phi_63_64_ladder_4 = _2932;
                frontier_phi_63_64_ladder_5 = _2930;
            }
            _3051 = frontier_phi_63_64_ladder_5;
            _3053 = frontier_phi_63_64_ladder_4;
            _3055 = frontier_phi_63_64_ladder_3;
            _3057 = frontier_phi_63_64_ladder;
            _3059 = frontier_phi_63_64_ladder_2;
            _3061 = frontier_phi_63_64_ladder_1;
        }
        float _3066 = isnan(1.0) ? _824 : (isnan(_824) ? 1.0 : min(_824, 1.0));
        _2863 = (_3066 * _3057) + _2394;
        _2865 = (_3066 * _3059) + _2396;
        _2867 = (_3066 * _3061) + _2398;
        _2869 = ((_3051 * 0.039999999105930328369140625) * _3066) + _2717;
        _2871 = ((_3053 * 0.039999999105930328369140625) * _3066) + _2719;
        _2873 = ((_3055 * 0.039999999105930328369140625) * _3066) + _2721;
    }
    else
    {
        _2863 = _2394;
        _2865 = _2396;
        _2867 = _2398;
        _2869 = _2717;
        _2871 = _2719;
        _2873 = _2721;
    }
    float _4874 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _4885 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4896 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _2890 = ((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2863 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _824))) + ((_2869 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1660)) * cbPerFrame._m0[3u].x);
    float _2891 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2865 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _824))) + ((_2871 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1660)) * cbPerFrame._m0[3u].x);
    float _2892 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2867 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _824))) + ((_2873 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1660)) * cbPerFrame._m0[3u].x);
    uint _2893 = _268 + 6u;
    float _2901 = _761 / cbSceneParam._m0[86u].x;
    float _2902 = _762 / cbSceneParam._m0[86u].y;
    vec4 _2916 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2918 = _2916.x;
    float _2919 = _2916.y;
    float _2920 = _2916.z;
    float _2921 = _2916.w;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2955 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2956 = _2955 / _682;
        float _2967 = _2956 * _734;
        float _2968 = _735 * _2956;
        float _2969 = (-0.0) - _2968;
        float _2971 = _2956 * _736;
        float _2973 = (cbSceneParam._m0[77u].w * _2969) / _2955;
        float _2974 = _2973 + cbSceneParam._m0[79u].w;
        float _2975 = cbSceneParam._m0[79u].w - _2968;
        float _2981 = sqrt(((_2967 * _2967) + (_2968 * _2968)) + (_2971 * _2971));
        float _2984 = (1.0 - (cbSceneParam._m0[77u].w / _2955)) * _2981;
        float _2989 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2991 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2969 - _2973) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2974 > 0.0) ? exp2(_2989 * _2974) : (2.0 - exp2(_2991 * _2974))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2984;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : max(_2974, _2975));
            float _3114 = isnan(_2975) ? _2974 : (isnan(_2974) ? _2975 : min(_2974, _2975));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3168 = ((abs(_2981 / _2969) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2989 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2989 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2991 * _3123) - exp2(_2991 * _3124)) * _3112))) + (_2984 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2901, _2902, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2921);
        _2993 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2918;
        _2995 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2919;
        _2997 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2920;
        _2999 = _3179 * _2921;
    }
    else
    {
        _2993 = _2918;
        _2995 = _2919;
        _2997 = _2920;
        _2999 = _2921;
    }
    bool _3206;
    vec4 _3009;
    vec4 _3031;
    float _3033;
    float _3037;
    float _3038;
    float _3039;
    float _3040;
    bool _3050;
    for (;;)
    {
        _3009 = cbMatDynParam._m0[0u];
        float _3011 = roundEven(_3009.y);
        bool _3012 = _3011 == 3.0;
        float _3013 = log2(_2999);
        float _3020 = exp2(_3013 * cbSceneParam._m0[78u].x) * _2890;
        float _3021 = exp2(_3013 * cbSceneParam._m0[78u].y) * _2891;
        float _3022 = exp2(_3013 * cbSceneParam._m0[78u].z) * _2892;
        float _3029 = _750 + (-0.5);
        _3031 = cbMtdParam._m0[1u];
        _3033 = _3031.y * _3029;
        float _3036 = (_3011 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3037 = _3036 * (_3012 ? _3020 : (_3020 + (cbSceneParam._m0[72u].w * _2993)));
        _3038 = _3036 * (_3012 ? _3021 : (_3021 + (cbSceneParam._m0[72u].w * _2995)));
        _3039 = _3036 * (_3012 ? _3022 : (_3022 + (cbSceneParam._m0[72u].w * _2997)));
        _3040 = _3029 * 0.999000012874603271484375;
        _3050 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3050)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _3040) < 0.5)
            {
                _3206 = true;
                break;
            }
        }
        uint _3147 = _799 + uint(_3009.w);
        if ((cbInstanceData._m0[_3147].w < 1.0) && ((cbInstanceData._m0[_3147].w + _3040) < 0.5))
        {
            _3206 = true;
            break;
        }
        if ((_3033 + 1.0) < _3031.x)
        {
            _3206 = true;
            break;
        }
        _3206 = false;
        break;
    }
    float _3410;
    if (_3206)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2893].w;
    }
    SV_Target.x = _3037;
    SV_Target.y = _3038;
    SV_Target.z = _3039;
    SV_Target.w = _3410;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2893].w;
    discard_exit();
}


