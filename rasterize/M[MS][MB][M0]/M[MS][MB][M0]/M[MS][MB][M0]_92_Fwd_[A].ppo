#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1331;
float _3691;
float _3692;
float _3693;
float _3694;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3703 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3714 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3725 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3736 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) + _445;
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _426) + _518;
    float _530 = ((((_497.x - _516) * _426) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _426) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3747 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))));
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _577 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _580 = ((isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : min(_577, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _589 = (_580 - ((((((_570 - _571) * cbMtdParam._m0[24u].z) + _571) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _580))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3768 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _590 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _597 = (_590 * (cbMtdParam._m0[17u].x - _452)) + _452;
    float _598 = (_590 * (cbMtdParam._m0[17u].y - _453)) + _453;
    float _599 = (_590 * (cbMtdParam._m0[17u].z - _454)) + _454;
    vec4 _611 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _613 = _611.x;
    float _614 = 1.0 - _613;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_613 - _614) * cbMtdParam._m0[24u].w) + _614) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3779 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _597) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _640) + _597;
    float _649 = ((((cbMtdParam._m0[10u].y - _598) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _640) + _598;
    float _650 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _599)) * _640) + _599;
    float _655 = (((_472.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _676 = (_669.x * 2.0) + (-1.0);
    float _677 = (_669.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3790 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _686 = (_590 * (_669.z - _655)) + _655;
    float _689 = ((cbMtdParam._m0[23u].y - _686) * _640) + _686;
    vec4 _708 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _714 = (_708.x * 2.0) + (-1.0);
    float _715 = (_708.y * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _3801 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _726 = _530 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_472.x * 2.0) + (-1.0)));
    float _727 = _531 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_472.y * 2.0) + (-1.0)));
    float _739 = (((_676 - _726) + (cbMtdParam._m0[21u].x * _726)) * _590) + _726;
    float _740 = (((_677 - _727) + (cbMtdParam._m0[21u].x * _727)) * _590) + _727;
    float _741 = (_590 * (sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _537)) + _537;
    float _752 = (((_714 - _739) + (_739 * cbMtdParam._m0[22u].z)) * _640) + _739;
    float _753 = (((_715 - _740) + (_740 * cbMtdParam._m0[22u].z)) * _640) + _740;
    float _754 = ((sqrt(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) - _741) * _640) + _741;
    float _756 = cbMtdParam._m0[22u].x + _550.w;
    float _759 = fma(_754, _245 * NORMAL.x, fma(_753, _252 * TANGENT.x, (_238 * _230) * _752));
    float _762 = fma(_754, _245 * NORMAL.y, fma(_753, _252 * TANGENT.y, (_238 * _231) * _752));
    float _765 = fma(_754, _245 * NORMAL.z, fma(_753, _252 * TANGENT.z, (_238 * _232) * _752));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3812 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _773 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _3823 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3834 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3845 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3856 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _842 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _832);
    float _843 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _832);
    float _844 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _832);
    float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
    float _849 = _842 * _848;
    float _850 = _843 * _848;
    float _851 = _844 * _848;
    vec4 _856 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _858 = _856.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1012 = sqrt(((_842 * _842) + (_843 * _843)) + (_844 * _844));
        float _1018 = (cbMatDynParam._m0[5u].x * _1012) + cbMatDynParam._m0[5u].y;
        float _3867 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1023 = (cbMatDynParam._m0[5u].z * _1012) + cbMatDynParam._m0[5u].w;
        float _3878 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) - _1019)) + _1019) < ((_858 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _869 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _870 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _888 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _891 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _894 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _907 = _277 + 9u;
    uint _908 = _907 + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_908].z;
    float _3889 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _869, cbSceneParam._m0[86u].y * _870));
    float _932 = ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_770, _771, _772), vec3(_849, _850, _851));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _770) - _849;
    float _941 = (_936 * _771) - _850;
    float _942 = (_936 * _772) - _851;
    float _946 = abs(dot(vec3(_849, _850, _851), vec3(_770, _771, _772)));
    float _3922 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_773);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1330;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1055 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1059 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1063 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1088 = _993 + _770;
        float _1089 = _997 + _771;
        float _1090 = _1001 + _772;
        float _1100 = fma(_1090, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088)) - _1055;
        float _1101 = fma(_1090, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088)) - _1059;
        float _1102 = fma(_1090, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088)) - _1063;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1055 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1059 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[34u].z) + ((((((_1063 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1158 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1124.x + (-0.5));
        float _1160 = _1158 * (_1124.y + (-0.5));
        float _1161 = _1158 * (_1124.z + (-0.5));
        float _1168 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1131.x + (-0.5));
        float _1170 = _1168 * (_1131.y + (-0.5));
        float _1171 = _1168 * (_1131.z + (-0.5));
        float _1178 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1138.x + (-0.5));
        float _1180 = _1178 * (_1138.y + (-0.5));
        float _1181 = _1178 * (_1138.z + (-0.5));
        float _1188 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1145.x + (-0.5));
        float _1190 = _1188 * (_1145.y + (-0.5));
        float _1191 = _1188 * (_1145.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1212 = (dot(vec3(_770, _771, _772), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1222 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3970 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1224 + 1.0))) + _1229) * _1192;
        float _1239 = _1160 * 0.5;
        float _1240 = _1170 * 0.5;
        float _1241 = _1180 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_770, _771, _772), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4003 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1266 + 1.0))) + _1271) * _1193;
        float _1281 = _1161 * 0.5;
        float _1282 = _1171 * 0.5;
        float _1283 = _1181 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_770, _771, _772), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4036 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1308 + 1.0))) + _1313) * _1194;
        _1330 = _1161;
        _1332 = _1160;
        _1333 = _1159;
        _1334 = _1171;
        _1335 = _1170;
        _1336 = _1169;
        _1337 = _1181;
        _1338 = _1180;
        _1339 = _1179;
        _1340 = _1194;
        _1341 = _1193;
        _1342 = _1192;
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1331;
        _1332 = _1331;
        _1333 = _1331;
        _1334 = _1331;
        _1335 = _1331;
        _1336 = _1331;
        _1337 = _1331;
        _1338 = _1331;
        _1339 = _1331;
        _1340 = _1331;
        _1341 = _1331;
        _1342 = _1331;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1377 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1381 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1404 = _993 + _770;
        float _1405 = _997 + _771;
        float _1406 = _1001 + _772;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_770, _771, _772), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4099 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_770, _771, _772), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4132 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_770, _771, _772), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4165 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1331;
        _1643 = _1331;
        _1644 = _1331;
        _1645 = _1331;
        _1646 = _1331;
        _1647 = _1331;
        _1648 = _1331;
        _1649 = _1331;
        _1650 = _1331;
        _1651 = _1331;
        _1652 = _1331;
        _1653 = _1331;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _940 * 0.5;
    float _1711 = _941 * 0.5;
    float _1712 = _942 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1330, _1334, _1337, _1340));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1841 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1844 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1872 = frontier_phi_17_15_ladder;
        }
        float _2073;
        if (_1841 > 0.0)
        {
            _2073 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2073 = frontier_phi_26_22_ladder;
        }
        float _2316;
        if (_1844 > 0.0)
        {
            _2316 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2316 = frontier_phi_38_33_ladder;
        }
        float _2318 = isnan(_2073) ? _1872 : (isnan(_1872) ? _2073 : min(_1872, _2073));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1838) + _1827;
        float _2324 = (_2319 * _1841) + _1831;
        float _2325 = (_2319 * _1844) + _1835;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_16_38_ladder = _2449.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2449.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2449.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_16_38_ladder_2;
        _1862 = frontier_phi_16_38_ladder_1;
        _1864 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1779);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1937 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1940 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2078;
        if (_1934 > 0.0)
        {
            _2078 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2343;
        if (_1937 > 0.0)
        {
            _2343 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2343 = frontier_phi_40_35_ladder;
        }
        float _2548;
        if (_1940 > 0.0)
        {
            _2548 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2548 = frontier_phi_49_46_ladder;
        }
        float _2550 = isnan(_2343) ? _2078 : (isnan(_2078) ? _2343 : min(_2078, _2343));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1934) + _1923;
        float _2556 = (_2551 * _1937) + _1927;
        float _2557 = (_2551 * _1940) + _1931;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_25_49_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2756.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2756.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_25_49_ladder_2;
        _1961 = frontier_phi_25_49_ladder_1;
        _1963 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1869);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1975 = ((((1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_961 * _948)) * _932;
    float _1976 = _1975 * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1977 = _1975 * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1978 = _1975 * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1977, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1977, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1977, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _932 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2032 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2036 = _1999 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_770, _771, _772));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_770, _771, _772));
    float _4301 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4312 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2016].x * _2022) * _2057) + ((cbLight._m0[_2026].x * _2032) * _2055);
    float _2065 = ((_2022 * cbLight._m0[_2016].y) * _2057) + ((_2032 * cbLight._m0[_2026].y) * _2055);
    float _2066 = ((_2022 * cbLight._m0[_2016].z) * _2057) + ((_2032 * cbLight._m0[_2026].z) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2072)
    {
        _2083 = _2064;
        _2085 = _2065;
        _2087 = _2066;
    }
    else
    {
        uint _2091 = _1999 + 6u;
        float _2107 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4323 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2110 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2083 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _2064;
        _2085 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _2065;
        _2087 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _2066;
    }
    bool _2090 = _2070.y == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2090)
    {
        _2128 = _2083;
        _2130 = _2085;
        _2132 = _2087;
    }
    else
    {
        uint _2287 = _1999 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_770, _771, _772)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4339 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2306 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2128 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2083;
        _2130 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2085;
        _2132 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2087;
    }
    uint _2135 = _1999 + 8u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _773) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1999].x + _849;
    float _2151 = cbLight._m0[_1999].y + _850;
    float _2152 = cbLight._m0[_1999].z + _851;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_1999].xyz));
    float _4355 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2164 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2165 = dot(vec3(_770, _771, _772), vec3(_2157, _2158, _2159));
    float _4377 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2157, _2158, _2159));
    float _4388 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2149 * _2149;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2149;
    float _2200 = (0.5 / (((_2164 * ((_2163 * _2189) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2189) + _2149) * _2163))) * _2163;
    float _4399 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    uint _2213 = _1999 + 9u;
    float _2224 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _773) * 0.949999988079071044921875);
    float _2225 = _2224 * _2224;
    float _2226 = cbLight._m0[_2036].x + _849;
    float _2227 = cbLight._m0[_2036].y + _850;
    float _2228 = cbLight._m0[_2036].z + _851;
    float _2232 = inversesqrt(dot(vec3(_2226, _2227, _2228), vec3(_2226, _2227, _2228)));
    float _2233 = _2232 * _2226;
    float _2234 = _2232 * _2227;
    float _2235 = _2232 * _2228;
    float _2236 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2036].xyz));
    float _4410 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2240 = dot(vec3(_770, _771, _772), vec3(_2233, _2234, _2235));
    float _4421 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2233, _2234, _2235));
    float _4432 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2225 * _2225;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2261 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2262 = 1.0 - _2225;
    float _2272 = (0.5 / (((_2164 * ((_2239 * _2262) + _2225)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2262) + _2225) * _2239))) * _2239;
    float _4443 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    float _2284 = (((_2261 * cbLight._m0[_2213].x) * _2274) * _2022) + (((_2188 * cbLight._m0[_2135].x) * _2202) * _2032);
    float _2285 = (((_2261 * cbLight._m0[_2213].y) * _2274) * _2022) + (((_2188 * cbLight._m0[_2135].y) * _2202) * _2032);
    float _2286 = (((_2261 * cbLight._m0[_2213].z) * _2274) * _2022) + (((_2188 * cbLight._m0[_2135].z) * _2202) * _2032);
    float _2348;
    float _2350;
    float _2352;
    if (_2072)
    {
        _2348 = _2284;
        _2350 = _2285;
        _2352 = _2286;
    }
    else
    {
        uint _2354 = _1999 + 2u;
        uint _2358 = _1999 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _773) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _849;
        float _2375 = cbLight._m0[_2354].y + _850;
        float _2376 = cbLight._m0[_2354].z + _851;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2354].xyz));
        float _4454 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2388 = dot(vec3(_770, _771, _772), vec3(_2381, _2382, _2383));
        float _4465 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4476 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2410 = 1.0 - _2373;
        float _2420 = (0.5 / (((_2164 * ((_2387 * _2410) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2410) + _2373) * _2387))) * _2387;
        float _4487 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2348 = (((_2409 * cbLight._m0[_2358].x) * _2422) * _2423) + _2284;
        _2350 = (((_2409 * cbLight._m0[_2358].y) * _2422) * _2423) + _2285;
        _2352 = (((_2409 * cbLight._m0[_2358].z) * _2422) * _2423) + _2286;
    }
    float _2458;
    float _2460;
    float _2462;
    if (_2090)
    {
        _2458 = _2348;
        _2460 = _2350;
        _2462 = _2352;
    }
    else
    {
        uint _2469 = _1999 + 3u;
        uint _2473 = _1999 + 11u;
        float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _773) * 0.949999988079071044921875);
        float _2488 = _2487 * _2487;
        float _2489 = cbLight._m0[_2469].x + _849;
        float _2490 = cbLight._m0[_2469].y + _850;
        float _2491 = cbLight._m0[_2469].z + _851;
        float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
        float _2496 = _2495 * _2489;
        float _2497 = _2495 * _2490;
        float _2498 = _2495 * _2491;
        float _2499 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2469].xyz));
        float _4503 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2502 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2503 = dot(vec3(_770, _771, _772), vec3(_2496, _2497, _2498));
        float _4514 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2507 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2496, _2497, _2498));
        float _4525 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2511 = _2488 * _2488;
        float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
        float _2524 = (exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2525 = 1.0 - _2488;
        float _2535 = (0.5 / (((_2164 * ((_2502 * _2525) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2525) + _2488) * _2502))) * _2502;
        float _4536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2537 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
        float _2538 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2458 = (((_2524 * cbLight._m0[_2473].x) * _2537) * _2538) + _2348;
        _2460 = (((_2524 * cbLight._m0[_2473].y) * _2537) * _2538) + _2350;
        _2462 = (((_2524 * cbLight._m0[_2473].z) * _2537) * _2538) + _2352;
    }
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    if (_1997.y == 0u)
    {
        float _2613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2614 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2613;
        float _2615 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2613;
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2613;
        uvec4 _2628 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2629 = _2628.x;
        uint _2640 = uint((float(_2628.y) * floor(float(uint(cbSceneParam._m0[85u].y * _870) / _2629))) + floor(float(uint(cbSceneParam._m0[85u].x * _869) / _2629)));
        float _2650 = (log2(_2616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2651 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
        uint _2654 = uint(isnan(14.0) ? _2651 : (isnan(_2651) ? 14.0 : min(_2651, 14.0)));
        uvec4 _2659 = texelFetch(g_lightClusterGridBuffer, int(((_2654 << 2u) + (_2640 << 6u)) >> 2u));
        uint _2660 = _2659.x;
        uint _2661 = _2628.z;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        if (((((1u << ((_2661 >> 4u) & 15u)) + 4294967295u) & _2660) == 0u) || ((_2661 & 240u) == 0u))
        {
            _2761 = 0.0;
            _2763 = 0.0;
            _2765 = 0.0;
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
        }
        else
        {
            float _2762;
            float _2764;
            float _2766;
            float _2768;
            float _2770;
            float _2772;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            uint _2920 = 0u;
            uint _2929;
            bool _2930;
            for (;;)
            {
                _2929 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                _2930 = _2929 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2930)
                {
                    frontier_phi_66_pred = _2914;
                    frontier_phi_66_pred_1 = _2919;
                    frontier_phi_66_pred_2 = _2918;
                    frontier_phi_66_pred_3 = _2917;
                    frontier_phi_66_pred_4 = _2916;
                    frontier_phi_66_pred_5 = _2915;
                }
                else
                {
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    uint _3065;
                    _3059 = _2914;
                    _3060 = _2915;
                    _3061 = _2916;
                    _3062 = _2917;
                    _3063 = _2918;
                    _3064 = _2919;
                    _3065 = _2929;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    for (;;)
                    {
                        uint _3069 = uint(findLSB(_3065)) + (_2920 << 5u);
                        uint _3066 = (_3065 + 4294967295u) & _3065;
                        uint _3071 = _3069 * 48u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3091 = (_3069 * 48u) + 4u;
                        vec4 _3104 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 3u)).x));
                        uint _3110 = (_3069 * 48u) + 8u;
                        vec3 _3121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3110)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3110 + 2u)).x));
                        float _3125 = _3085.x - _2614;
                        float _3126 = _3085.y - _2615;
                        float _3127 = _3085.z - _2616;
                        float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                        float _3131 = inversesqrt(_3128);
                        float _3132 = _3131 * _3125;
                        float _3133 = _3131 * _3126;
                        float _3134 = _3131 * _3127;
                        float _3135 = dot(vec3(_888, _891, _894), vec3(_3132, _3133, _3134));
                        float _3140 = 1.0 - (_3128 * _3085.w);
                        float _4562 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3142 = sqrt(_3128) * _3104.w;
                        float _3145 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                        float _3146 = _3145 * _3145;
                        float _3149 = ((1.0 - _3146) * _3135) + _3146;
                        float _3152 = _3142 * _3142;
                        float _3156 = ((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3141) / ((_3152 * 0.699999988079071044921875) + 1.0);
                        float _3160 = (-0.0) - _2614;
                        float _3161 = (-0.0) - _2615;
                        float _3162 = (-0.0) - _2616;
                        float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3177 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                        float _3178 = 1.0 - _948;
                        float _3185 = sqrt(1.0 - ((1.0 - (_3178 * _3178)) * (1.0 - (_3177 * _3177))));
                        float _3186 = _3185 * _3185;
                        float _3187 = _3186 * _3186;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3190 = _3169 + _3134;
                        float _3194 = inversesqrt(dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190)));
                        float _3198 = dot(vec3(_888, _891, _894), vec3(_3167, _3168, _3169));
                        float _4578 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                        float _3201 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3202 = dot(vec3(_888, _891, _894), vec3(_3194 * _3188, _3194 * _3189, _3194 * _3190));
                        float _4589 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3205 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3209 = ((_3205 * _3205) * (_3187 + (-1.0))) + 1.0;
                        float _3210 = _3145 * _3186;
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3135) + _3211;
                        float _4600 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3216 = 1.0 - _3186;
                        float _3226 = (0.5 / (((_3215 * ((_3201 * _3216) + _3186)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3186) * _3201))) * _3215;
                        float _4611 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3237 = (((_3187 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3209 * _3209) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125))) * _3141;
                        _2989 = (_3156 * _3104.x) + _3062;
                        _2990 = (_3156 * _3104.y) + _3063;
                        _2991 = (_3156 * _3104.z) + _3064;
                        _2986 = (_3237 * _3121.x) + _3059;
                        _2987 = (_3237 * _3121.y) + _3060;
                        _2988 = (_3237 * _3121.z) + _3061;
                        if (_3066 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3059 = _2986;
                            _3060 = _2987;
                            _3061 = _2988;
                            _3062 = _2989;
                            _3063 = _2990;
                            _3064 = _2991;
                            _3065 = _3066;
                        }
                    }
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2991;
                    frontier_phi_66_pred_2 = _2990;
                    frontier_phi_66_pred_3 = _2989;
                    frontier_phi_66_pred_4 = _2988;
                    frontier_phi_66_pred_5 = _2987;
                }
                _2762 = frontier_phi_66_pred;
                _2772 = frontier_phi_66_pred_1;
                _2770 = frontier_phi_66_pred_2;
                _2768 = frontier_phi_66_pred_3;
                _2766 = frontier_phi_66_pred_4;
                _2764 = frontier_phi_66_pred_5;
                uint _2921 = _2920 + 1u;
                if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2914 = _2762;
                    _2915 = _2764;
                    _2916 = _2766;
                    _2917 = _2768;
                    _2918 = _2770;
                    _2919 = _2772;
                    _2920 = _2921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2761 = _2762;
            _2763 = _2764;
            _2765 = _2766;
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
        }
        uvec4 _2775 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2776 = _2775.z;
        uint _2778 = (_2776 >> 8u) & 15u;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((4294967295u << _2778) & _2660) == 0u)
        {
            _2882 = _2761;
            _2884 = _2763;
            _2886 = _2765;
            _2888 = _2767;
            _2890 = _2769;
            _2892 = _2771;
        }
        else
        {
            float _2907 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
            float _2908 = _2907 * _2614;
            float _2909 = _2907 * _2615;
            float _2910 = _2907 * _2616;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2778 < ((_2776 >> 12u) & 15u))
            {
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _3042 = _2761;
                float _3043 = _2763;
                float _3044 = _2765;
                float _3045 = _2767;
                float _3046 = _2769;
                float _3047 = _2771;
                uint _3048 = _2778;
                uint _3057;
                bool _3058;
                for (;;)
                {
                    _3057 = texelFetch(g_lightClassification, int((((_2654 << 5u) + (_2640 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                    _3058 = _3057 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3058)
                    {
                        frontier_phi_77_pred = _3047;
                        frontier_phi_77_pred_1 = _3046;
                        frontier_phi_77_pred_2 = _3045;
                        frontier_phi_77_pred_3 = _3044;
                        frontier_phi_77_pred_4 = _3043;
                        frontier_phi_77_pred_5 = _3042;
                    }
                    else
                    {
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3264 = _3042;
                        float _3265 = _3043;
                        float _3266 = _3044;
                        float _3267 = _3045;
                        float _3268 = _3046;
                        float _3269 = _3047;
                        uint _3270 = _3057;
                        uint _3271;
                        vec4 _3296;
                        float _3297;
                        vec4 _3312;
                        vec3 _3324;
                        vec4 _3339;
                        vec4 _3354;
                        float _3400;
                        bool _3401;
                        for (;;)
                        {
                            uint _3281 = ((_3048 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3270));
                            _3271 = (_3270 + 4294967295u) & _3270;
                            uint _3283 = _3281 * 40u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            _3297 = _3296.w;
                            uint _3299 = (_3281 * 40u) + 4u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3314 = (_3281 * 40u) + 8u;
                            _3324 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3314 + 2u)).x));
                            uint _3326 = (_3281 * 40u) + 16u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3281 * 40u) + 20u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3281 * 40u) + 24u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3375 = (_3281 * 40u) + 28u;
                            vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3400 = fma(_2616, _3388.z, fma(_2615, _3388.y, _3388.x * _2614)) + _3388.w;
                            _3401 = !((fma(_2616, _3369.z, fma(_2615, _3369.y, _3369.x * _2614)) + _3369.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3401)
                            {
                                float _3428 = _3296.x - _2614;
                                float _3429 = _3296.y - _2615;
                                float _3430 = _3296.z - _2616;
                                float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                                float _3434 = inversesqrt(_3431);
                                float _3435 = _3434 * _3428;
                                float _3436 = _3434 * _3429;
                                float _3437 = _3434 * _3430;
                                float _3441 = 1.0 - (_3431 / (_3297 * _3297));
                                float _4622 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3446 = sqrt(_3431) * _3312.w;
                                float _3448 = 1.39999997615814208984375 / (_3446 + 1.39999997615814208984375);
                                float _3449 = _3448 * _3448;
                                float _3452 = ((1.0 - _3449) * dot(vec3(_3435, _3436, _3437), vec3(_888, _891, _894))) + _3449;
                                float _3455 = _3446 * _3446;
                                float _3459 = (fma(_2616, _3339.z, fma(_2615, _3339.y, _3339.x * _2614)) + _3339.w) / _3400;
                                float _3460 = (fma(_2616, _3354.z, fma(_2615, _3354.y, _3354.x * _2614)) + _3354.w) / _3400;
                                float _3464 = 1.0 - dot(vec2(_3459, _3460), vec2(_3459, _3460));
                                float _4638 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3466 = _3465 * (((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3442) / ((_3455 * 0.699999988079071044921875) + 1.0));
                                float _3478 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                                float _3479 = 1.0 - _948;
                                float _3486 = sqrt(1.0 - ((1.0 - (_3479 * _3479)) * (1.0 - (_3478 * _3478))));
                                float _3487 = _3486 * _3486;
                                float _3488 = _3487 * _3487;
                                float _3489 = _3435 - _2908;
                                float _3490 = _3436 - _2909;
                                float _3491 = _3437 - _2910;
                                float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                                float _3499 = dot(vec3(_888, _891, _894), vec3((-0.0) - _2908, (-0.0) - _2909, (-0.0) - _2910));
                                float _4649 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3503 = dot(vec3(_888, _891, _894), vec3(_3495 * _3489, _3495 * _3490, _3495 * _3491));
                                float _4660 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3510 = ((_3506 * _3506) * (_3488 + (-1.0))) + 1.0;
                                float _3511 = _3448 * _3487;
                                float _3512 = _3511 * _3511;
                                float _3518 = ((1.0 - _3512) * dot(vec3(_888, _891, _894), vec3(_3435, _3436, _3437))) + _3512;
                                float _4671 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3520 = 1.0 - _3487;
                                float _3530 = (0.5 / (((_3519 * ((_3502 * _3520) + _3487)) + 9.9999999392252902907785028219223e-09) + (((_3519 * _3520) + _3487) * _3502))) * _3519;
                                float _4682 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3540 = (_3465 * _3442) * (((_3488 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3510 * _3510) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3466 * _3312.y;
                                frontier_phi_83_pred_1 = _3466 * _3312.x;
                                frontier_phi_83_pred_2 = _3540 * _3324.z;
                                frontier_phi_83_pred_3 = _3540 * _3324.y;
                                frontier_phi_83_pred_4 = _3540 * _3324.x;
                                frontier_phi_83_pred_5 = _3466 * _3312.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_83_pred;
                            _3547 = frontier_phi_83_pred_1;
                            _3546 = frontier_phi_83_pred_2;
                            _3545 = frontier_phi_83_pred_3;
                            _3544 = frontier_phi_83_pred_4;
                            _3549 = frontier_phi_83_pred_5;
                            _3254 = _3547 + _3267;
                            _3255 = _3548 + _3268;
                            _3256 = _3549 + _3269;
                            _3251 = _3544 + _3264;
                            _3252 = _3545 + _3265;
                            _3253 = _3546 + _3266;
                            if (_3271 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3253;
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3271;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3256;
                        frontier_phi_77_pred_1 = _3255;
                        frontier_phi_77_pred_2 = _3254;
                        frontier_phi_77_pred_3 = _3253;
                        frontier_phi_77_pred_4 = _3252;
                        frontier_phi_77_pred_5 = _3251;
                    }
                    _2893 = frontier_phi_77_pred;
                    _2891 = frontier_phi_77_pred_1;
                    _2889 = frontier_phi_77_pred_2;
                    _2887 = frontier_phi_77_pred_3;
                    _2885 = frontier_phi_77_pred_4;
                    _2883 = frontier_phi_77_pred_5;
                    uint _3049 = _3048 + 1u;
                    if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3042 = _2883;
                        _3043 = _2885;
                        _3044 = _2887;
                        _3045 = _2889;
                        _3046 = _2891;
                        _3047 = _2893;
                        _3048 = _3049;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2887;
                frontier_phi_58_59_ladder_1 = _2893;
                frontier_phi_58_59_ladder_2 = _2891;
                frontier_phi_58_59_ladder_3 = _2889;
                frontier_phi_58_59_ladder_4 = _2885;
                frontier_phi_58_59_ladder_5 = _2883;
            }
            else
            {
                frontier_phi_58_59_ladder = _2765;
                frontier_phi_58_59_ladder_1 = _2771;
                frontier_phi_58_59_ladder_2 = _2769;
                frontier_phi_58_59_ladder_3 = _2767;
                frontier_phi_58_59_ladder_4 = _2763;
                frontier_phi_58_59_ladder_5 = _2761;
            }
            _2882 = frontier_phi_58_59_ladder_5;
            _2884 = frontier_phi_58_59_ladder_4;
            _2886 = frontier_phi_58_59_ladder;
            _2888 = frontier_phi_58_59_ladder_3;
            _2890 = frontier_phi_58_59_ladder_2;
            _2892 = frontier_phi_58_59_ladder_1;
        }
        float _2897 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2673 = (_2897 * _2888) + _2128;
        _2675 = (_2897 * _2890) + _2130;
        _2677 = (_2897 * _2892) + _2132;
        _2679 = ((_2882 * 0.039999999105930328369140625) * _2897) + _2458;
        _2681 = ((_2884 * 0.039999999105930328369140625) * _2897) + _2460;
        _2683 = ((_2886 * 0.039999999105930328369140625) * _2897) + _2462;
    }
    else
    {
        _2673 = _2128;
        _2675 = _2130;
        _2677 = _2132;
        _2679 = _2458;
        _2681 = _2460;
        _2683 = _2462;
    }
    float _4698 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4709 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4720 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2700 = ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2673 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _932))) + ((_2679 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    float _2701 = ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2675 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _932))) + ((_2681 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    float _2702 = ((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2677 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _932))) + ((_2683 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    uint _2703 = _277 + 6u;
    float _2711 = _869 / cbSceneParam._m0[86u].x;
    float _2712 = _870 / cbSceneParam._m0[86u].y;
    vec4 _2726 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2728 = _2726.x;
    float _2729 = _2726.y;
    float _2730 = _2726.z;
    float _2731 = _2726.w;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2786 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2787 = _2786 / _791;
        float _2798 = _2787 * _842;
        float _2799 = _843 * _2787;
        float _2800 = (-0.0) - _2799;
        float _2802 = _2787 * _844;
        float _2804 = (cbSceneParam._m0[77u].w * _2800) / _2786;
        float _2805 = _2804 + cbSceneParam._m0[79u].w;
        float _2806 = cbSceneParam._m0[79u].w - _2799;
        float _2812 = sqrt(((_2798 * _2798) + (_2799 * _2799)) + (_2802 * _2802));
        float _2815 = (1.0 - (cbSceneParam._m0[77u].w / _2786)) * _2812;
        float _2820 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2822 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2999;
        if (abs((_2800 - _2804) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2999 = ((((_2805 > 0.0) ? exp2(_2820 * _2805) : (2.0 - exp2(_2822 * _2805))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2815;
        }
        else
        {
            float _2943 = 1.0 / cbSceneParam._m0[80u].x;
            float _2944 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : max(_2805, _2806));
            float _2945 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : min(_2805, _2806));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            _2999 = ((abs(_2812 / _2800) * cbSceneParam._m0[80u].y) * ((((_2954 - _2955) * 2.0) - ((exp2(_2820 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)))) - exp2(_2820 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))))) * _2943)) - ((exp2(_2822 * _2954) - exp2(_2822 * _2955)) * _2943))) + (_2815 * cbSceneParam._m0[80u].z);
        }
        vec4 _3001 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2711, _2712, 1.0), 0.0);
        float _3010 = exp2((_2999 * (-1.44269502162933349609375)) * (1.0 - _3001.w));
        float _3011 = log2(_3010);
        float _3027 = log2(_2731);
        _2824 = (exp2(_3027 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].x)) * _3001.x) / cbSceneParam._m0[78u].x)) + _2728;
        _2826 = (exp2(_3027 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].y)) * _3001.y) / cbSceneParam._m0[78u].y)) + _2729;
        _2828 = (exp2(_3027 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3011 * cbSceneParam._m0[78u].z)) * _3001.z) / cbSceneParam._m0[78u].z)) + _2730;
        _2830 = _3010 * _2731;
    }
    else
    {
        _2824 = _2728;
        _2826 = _2729;
        _2828 = _2730;
        _2830 = _2731;
    }
    bool _3037;
    vec4 _2840;
    vec4 _2862;
    float _2864;
    float _2868;
    float _2869;
    float _2870;
    float _2871;
    bool _2881;
    for (;;)
    {
        _2840 = cbMatDynParam._m0[0u];
        float _2842 = roundEven(_2840.y);
        bool _2843 = _2842 == 3.0;
        float _2844 = log2(_2830);
        float _2851 = exp2(_2844 * cbSceneParam._m0[78u].x) * _2700;
        float _2852 = exp2(_2844 * cbSceneParam._m0[78u].y) * _2701;
        float _2853 = exp2(_2844 * cbSceneParam._m0[78u].z) * _2702;
        float _2860 = _858 + (-0.5);
        _2862 = cbMtdParam._m0[1u];
        _2864 = _2862.y * _2860;
        float _2867 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2868 = _2867 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2824)));
        _2869 = _2867 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2826)));
        _2870 = _2867 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2828)));
        _2871 = _2860 * 0.999000012874603271484375;
        _2881 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2881)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _2871) < 0.5)
            {
                _3037 = true;
                break;
            }
        }
        uint _2978 = _907 + uint(_2840.w);
        if ((cbInstanceData._m0[_2978].w < 1.0) && ((cbInstanceData._m0[_2978].w + _2871) < 0.5))
        {
            _3037 = true;
            break;
        }
        if ((_2864 + 1.0) < _2862.x)
        {
            _3037 = true;
            break;
        }
        _3037 = false;
        break;
    }
    float _3242;
    if (_3037)
    {
        discard_state = true;
        _3242 = 0.0;
    }
    else
    {
        _3242 = cbInstanceData._m0[_2703].w;
    }
    SV_Target.x = _2868;
    SV_Target.y = _2869;
    SV_Target.z = _2870;
    SV_Target.w = _3242;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2703].w;
    discard_exit();
}


