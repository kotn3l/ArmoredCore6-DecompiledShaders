#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1156;
float _3802;
float _3803;
float _3804;
float _3805;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3814 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _421 = _419.x;
    float _422 = _419.y;
    float _423 = _419.z;
    float _432 = ((_402.z - _423) * _380) + _423;
    float _435 = ((((_402.x - _421) * _380) + _421) * 2.0) + (-1.0);
    float _437 = ((((_402.y - _422) * _380) + _422) * 2.0) + (-1.0);
    float _438 = dot(vec2(_435, _437), vec2(_435, _437));
    float _3825 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _443 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _471 = (((_459.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _435;
    float _472 = (((_459.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _437;
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _515 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_486 - _487) * cbMtdParam._m0[24u].w) + _487) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3836 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _524 = ((((cbMtdParam._m0[10u].x - _387) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _516) + _387;
    float _525 = ((((cbMtdParam._m0[10u].y - _388) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _516) + _388;
    float _526 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _389)) * _516) + _389;
    float _530 = (cbMtdParam._m0[19u].w * (_459.z - _432)) + _432;
    float _534 = ((cbMtdParam._m0[23u].y - _530) * _516) + _530;
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _559 = (_553.x * 2.0) + (-1.0);
    float _560 = (_553.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3847 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _577 = (_516 * (((cbMtdParam._m0[22u].z * _471) - _471) + _559)) + _471;
    float _578 = (_516 * (((cbMtdParam._m0[22u].z * _472) - _472) + _560)) + _472;
    float _579 = (_516 * (sqrt(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) - _443)) + _443;
    float _581 = cbMtdParam._m0[22u].x + _459.w;
    float _584 = fma(_579, _232 * NORMAL.x, fma(_578, _239 * TANGENT.x, (_225 * _217) * _577));
    float _587 = fma(_579, _232 * NORMAL.y, fma(_578, _239 * TANGENT.y, (_225 * _218) * _577));
    float _590 = fma(_579, _232 * NORMAL.z, fma(_578, _239 * TANGENT.z, (_225 * _219) * _577));
    float _594 = inversesqrt(dot(vec3(_584, _587, _590), vec3(_584, _587, _590)));
    float _595 = _594 * _584;
    float _596 = _594 * _587;
    float _597 = _594 * _590;
    float _3858 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _598 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3880 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3891 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3902 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _616 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _667 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _657);
    float _668 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _657);
    float _669 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _657);
    float _673 = inversesqrt(dot(vec3(_667, _668, _669), vec3(_667, _668, _669)));
    float _674 = _667 * _673;
    float _675 = _668 * _673;
    float _676 = _669 * _673;
    vec4 _681 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _683 = _681.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _837 = sqrt(((_667 * _667) + (_668 * _668)) + (_669 * _669));
        float _843 = (cbMatDynParam._m0[5u].x * _837) + cbMatDynParam._m0[5u].y;
        float _3913 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _848 = (cbMatDynParam._m0[5u].z * _837) + cbMatDynParam._m0[5u].w;
        float _3924 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) - _844)) + _844) < ((_683 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_597, cbSceneParam._m0[5u].z, fma(_596, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _595));
    float _716 = fma(_597, cbSceneParam._m0[6u].z, fma(_596, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _595));
    float _719 = fma(_597, cbSceneParam._m0[7u].z, fma(_596, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _595));
    uint _732 = _245 + 9u;
    uint _733 = _732 + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3935 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _757 = ((isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * TEXCOORD_5.w) * _753.x;
    float _758 = dot(vec3(_595, _596, _597), vec3(_674, _675, _676));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _595) - _674;
    float _766 = (_761 * _596) - _675;
    float _767 = (_761 * _597) - _676;
    float _771 = abs(dot(vec3(_674, _675, _676), vec3(_595, _596, _597)));
    float _3968 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_598);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1155;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _880 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _884 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _888 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _913 = _818 + _595;
        float _914 = _822 + _596;
        float _915 = _826 + _597;
        float _925 = fma(_915, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913)) - _880;
        float _926 = fma(_915, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913)) - _884;
        float _927 = fma(_915, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913)) - _888;
        float _931 = inversesqrt(dot(vec3(_925, _926, _927), vec3(_925, _926, _927)));
        float _944 = ((_931 * _925) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_880 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_931 * _926) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_884 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_931 * _927) / cbModelParam._m0[34u].z) + ((((((_888 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_944, _945, _946), 0.0);
        float _983 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_949.x + (-0.5));
        float _985 = _983 * (_949.y + (-0.5));
        float _986 = _983 * (_949.z + (-0.5));
        float _993 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_956.x + (-0.5));
        float _995 = _993 * (_956.y + (-0.5));
        float _996 = _993 * (_956.z + (-0.5));
        float _1003 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_963.x + (-0.5));
        float _1005 = _1003 * (_963.y + (-0.5));
        float _1006 = _1003 * (_963.z + (-0.5));
        float _1013 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_970.x + (-0.5));
        float _1015 = _1013 * (_970.y + (-0.5));
        float _1016 = _1013 * (_970.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1037 = (dot(vec3(_595, _596, _597), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1047 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _4016 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1049 + 1.0))) + _1054) * _1017;
        float _1064 = _985 * 0.5;
        float _1065 = _995 * 0.5;
        float _1066 = _1005 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_595, _596, _597), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _4049 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1091 + 1.0))) + _1096) * _1018;
        float _1106 = _986 * 0.5;
        float _1107 = _996 * 0.5;
        float _1108 = _1006 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_595, _596, _597), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4082 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1133 + 1.0))) + _1138) * _1019;
        _1155 = _986;
        _1157 = _985;
        _1158 = _984;
        _1159 = _996;
        _1160 = _995;
        _1161 = _994;
        _1162 = _1006;
        _1163 = _1005;
        _1164 = _1004;
        _1165 = _1019;
        _1166 = _1018;
        _1167 = _1017;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _1156;
        _1157 = _1156;
        _1158 = _1156;
        _1159 = _1156;
        _1160 = _1156;
        _1161 = _1156;
        _1162 = _1156;
        _1163 = _1156;
        _1164 = _1156;
        _1165 = _1156;
        _1166 = _1156;
        _1167 = _1156;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1202 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1206 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1229 = _818 + _595;
        float _1230 = _822 + _596;
        float _1231 = _826 + _597;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_595, _596, _597), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4145 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_595, _596, _597), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4178 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_595, _596, _597), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4211 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1156;
        _1468 = _1156;
        _1469 = _1156;
        _1470 = _1156;
        _1471 = _1156;
        _1472 = _1156;
        _1473 = _1156;
        _1474 = _1156;
        _1475 = _1156;
        _1476 = _1156;
        _1477 = _1156;
        _1478 = _1156;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1168)) + _1168;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1169)) + _1169;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1170)) + _1170;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _765 * 0.5;
    float _1536 = _766 * 0.5;
    float _1537 = _767 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1155, _1159, _1162, _1165));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _598);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1667 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1670 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1698 = frontier_phi_17_15_ladder;
        }
        float _1869;
        if (_1667 > 0.0)
        {
            _1869 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1869 = frontier_phi_26_22_ladder;
        }
        float _2164;
        if (_1670 > 0.0)
        {
            _2164 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2164 = frontier_phi_38_33_ladder;
        }
        float _2166 = isnan(_1869) ? _1698 : (isnan(_1698) ? _1869 : min(_1698, _1869));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1664) + _1653;
        float _2172 = (_2167 * _1667) + _1657;
        float _2173 = (_2167 * _1670) + _1661;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_16_38_ladder = _2318.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2318.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2318.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_16_38_ladder_2;
        _1688 = frontier_phi_16_38_ladder_1;
        _1690 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1604);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _598);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1750 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1754 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1758 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1761 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1764 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1767 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1874;
        if (_1761 > 0.0)
        {
            _1874 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1874 = frontier_phi_28_24_ladder;
        }
        float _2191;
        if (_1764 > 0.0)
        {
            _2191 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2191 = frontier_phi_40_35_ladder;
        }
        float _2518;
        if (_1767 > 0.0)
        {
            _2518 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2518 = frontier_phi_50_47_ladder;
        }
        float _2520 = isnan(_2191) ? _1874 : (isnan(_1874) ? _2191 : min(_1874, _2191));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1761) + _1750;
        float _2526 = (_2521 * _1764) + _1754;
        float _2527 = (_2521 * _1767) + _1758;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_25_50_ladder = _2645.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2645.x * cbModelParam._m0[1u].z;
        }
        _1786 = frontier_phi_25_50_ladder_2;
        _1788 = frontier_phi_25_50_ladder_1;
        _1790 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1695);
        _1786 = _1770.x * cbModelParam._m0[1u].z;
        _1788 = _1770.y * cbModelParam._m0[1u].z;
        _1790 = _1770.z * cbModelParam._m0[1u].z;
    }
    float _1802 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1803 = _1802 * ((cbModelParam._m0[1u].w * (_1786 - _1686)) + _1686);
    float _1804 = _1802 * ((cbModelParam._m0[1u].w * (_1788 - _1688)) + _1688);
    float _1805 = _1802 * ((cbModelParam._m0[1u].w * (_1790 - _1690)) + _1690);
    float _1808 = fma(_1805, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1803 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1805, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1803 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1805, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1803 * cbSceneParam._m0[91u].x));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1861 = _1848 / _1860;
    float _1862 = _1852 / _1860;
    float _1863 = _1856 / _1860;
    float _2010;
    float _2011;
    float _2012;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1890 = ((uint(_1863 > cbSceneParam._m0[59u].y) + uint(_1863 > cbSceneParam._m0[59u].x)) + uint(_1863 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1891 = _1890 + 43u;
        uint _1899 = _1890 + 44u;
        uint _1907 = _1890 + 45u;
        uint _1915 = _1890 + 46u;
        float _1926 = fma(_1860, cbSceneParam._m0[_1891].w, fma(_1856, cbSceneParam._m0[_1891].z, fma(_1852, cbSceneParam._m0[_1891].y, _1848 * cbSceneParam._m0[_1891].x)));
        float _1930 = fma(_1860, cbSceneParam._m0[_1899].w, fma(_1856, cbSceneParam._m0[_1899].z, fma(_1852, cbSceneParam._m0[_1899].y, _1848 * cbSceneParam._m0[_1899].x)));
        float _1938 = fma(_1860, cbSceneParam._m0[_1915].w, fma(_1856, cbSceneParam._m0[_1915].z, fma(_1852, cbSceneParam._m0[_1915].y, _1848 * cbSceneParam._m0[_1915].x)));
        float _1943 = cbSceneParam._m0[33u].z * _1938;
        float _1945 = cbSceneParam._m0[33u].w * _1938;
        float _1948 = fma(_1860, cbSceneParam._m0[_1907].w, fma(_1856, cbSceneParam._m0[_1907].z, fma(_1852, cbSceneParam._m0[_1907].y, _1848 * cbSceneParam._m0[_1907].x))) / _1938;
        float _1996 = (cbSceneParam._m0[33u].x - sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863))) * cbSceneParam._m0[33u].y;
        float _4337 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _2003 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1943 + _1926) / _1938, (_1945 + _1930) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 + _1926) / _1938, (_1930 - _1943) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1926 - _1943) / _1938, (_1930 - _1945) / _1938), _1948), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1926 - _1945) / _1938, (_1943 + _1930) / _1938), _1948), 0.0)).x), vec4(0.25)));
        _2010 = 1.0 - (_2003 * cbSceneParam._m0[34u].x);
        _2011 = 1.0 - (_2003 * cbSceneParam._m0[34u].y);
        _2012 = 1.0 - (_2003 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2010 = 1.0;
        _2011 = 1.0;
        _2012 = 1.0;
    }
    float _2076;
    float _2078;
    float _2080;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2064 = fma(_1860, cbSceneParam._m0[63u].w, fma(_1856, cbSceneParam._m0[63u].z, fma(_1852, cbSceneParam._m0[63u].y, _1848 * cbSceneParam._m0[63u].x)));
        float _2065 = fma(_1860, cbSceneParam._m0[60u].w, fma(_1856, cbSceneParam._m0[60u].z, fma(_1852, cbSceneParam._m0[60u].y, _1848 * cbSceneParam._m0[60u].x))) / _2064;
        float _2066 = fma(_1860, cbSceneParam._m0[61u].w, fma(_1856, cbSceneParam._m0[61u].z, fma(_1852, cbSceneParam._m0[61u].y, _1848 * cbSceneParam._m0[61u].x))) / _2064;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2065 >= cbSceneParam._m0[64u].x) && (_2066 >= cbSceneParam._m0[64u].y)) && (_2065 <= cbSceneParam._m0[64u].z)) && (_2066 <= cbSceneParam._m0[64u].w))
        {
            float _2204 = fma(_1860, cbSceneParam._m0[62u].w, fma(_1856, cbSceneParam._m0[62u].z, fma(_1852, cbSceneParam._m0[62u].y, _1848 * cbSceneParam._m0[62u].x))) / _2064;
            float _2208 = isnan(cbSceneParam._m0[41u].w) ? _2204 : (isnan(_2204) ? cbSceneParam._m0[41u].w : max(_2204, cbSceneParam._m0[41u].w));
            float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_1862 * _1862) + (_1861 * _1861)) + (_1863 * _1863))) * cbSceneParam._m0[33u].y;
            float _4353 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
            float _2258 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2065, cbSceneParam._m0[33u].w + _2066), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2065, _2066 - cbSceneParam._m0[33u].z), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2065 - cbSceneParam._m0[33u].z, _2066 - cbSceneParam._m0[33u].w), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2065 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2066), _2208), 0.0)).x), vec4(0.25)));
            float _2262 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
            float _2263 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
            float _2264 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2264) ? _2012 : (isnan(_2012) ? _2264 : min(_2012, _2264));
            frontier_phi_37_36_ladder_1 = isnan(_2263) ? _2011 : (isnan(_2011) ? _2263 : min(_2011, _2263));
            frontier_phi_37_36_ladder_2 = isnan(_2262) ? _2010 : (isnan(_2010) ? _2262 : min(_2010, _2262));
        }
        else
        {
            frontier_phi_37_36_ladder = _2012;
            frontier_phi_37_36_ladder_1 = _2011;
            frontier_phi_37_36_ladder_2 = _2010;
        }
        _2076 = frontier_phi_37_36_ladder_2;
        _2078 = frontier_phi_37_36_ladder_1;
        _2080 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2076 = _2010;
        _2078 = _2011;
        _2080 = _2012;
    }
    uvec4 _2085 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2087 = _2085.x * 14u;
    uint _2088 = _2087 + 13u;
    float _2095 = _757 + (-1.0);
    float _2100 = (cbLight._m0[_2088].x * _2095) + 1.0;
    float _2101 = (cbLight._m0[_2088].y * _2095) + 1.0;
    float _2102 = (cbLight._m0[_2088].z * _2095) + 1.0;
    float _2103 = (cbLight._m0[_2088].w * _2095) + 1.0;
    uint _2104 = _2087 + 5u;
    float _2110 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2114 = _2087 + 4u;
    float _2123 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2127 = _2087 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_595, _596, _597));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_595, _596, _597));
    float _4389 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4400 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2104].x * _2110) * _2148) + (((cbLight._m0[_2114].x * _2076) * _2123) * _2146);
    float _2156 = ((_2110 * cbLight._m0[_2104].y) * _2148) + (((cbLight._m0[_2114].y * _2078) * _2123) * _2146);
    float _2157 = ((_2110 * cbLight._m0[_2104].z) * _2148) + (((cbLight._m0[_2114].z * _2080) * _2123) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2087 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2163)
    {
        _2265 = _2155;
        _2267 = _2156;
        _2269 = _2157;
    }
    else
    {
        uint _2273 = _2087 + 6u;
        float _2289 = (dot(vec3(cbLight._m0[_2087 + 2u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4411 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2292 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2265 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2155;
        _2267 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2156;
        _2269 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2157;
    }
    bool _2272 = _2161.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2272)
    {
        _2327 = _2265;
        _2329 = _2267;
        _2331 = _2269;
    }
    else
    {
        uint _2489 = _2087 + 7u;
        float _2505 = (dot(vec3(cbLight._m0[_2087 + 3u].xyz), vec3(_595, _596, _597)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4427 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2508 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2327 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2265;
        _2329 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2267;
        _2331 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2269;
    }
    uint _2334 = _2087 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _598) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2087].x + _674;
    float _2350 = cbLight._m0[_2087].y + _675;
    float _2351 = cbLight._m0[_2087].z + _676;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2087].xyz));
    float _4443 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2363 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2364 = dot(vec3(_595, _596, _597), vec3(_2356, _2357, _2358));
    float _4465 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2356, _2357, _2358));
    float _4476 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2388 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2363 * ((_2362 * _2388) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2388) + _2348) * _2362))) * _2362;
    float _4487 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2415 = _2087 + 9u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _598) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2127].x + _674;
    float _2429 = cbLight._m0[_2127].y + _675;
    float _2430 = cbLight._m0[_2127].z + _676;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2127].xyz));
    float _4498 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2442 = dot(vec3(_595, _596, _597), vec3(_2435, _2436, _2437));
    float _4509 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2435, _2436, _2437));
    float _4520 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2427 * _2427;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2463 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2464 = 1.0 - _2427;
    float _2474 = (0.5 / (((_2363 * ((_2441 * _2464) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2464) + _2427) * _2441))) * _2441;
    float _4531 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    float _2486 = (((_2463 * cbLight._m0[_2415].x) * _2476) * _2110) + ((((cbLight._m0[_2334].x * _2076) * _2387) * _2401) * _2123);
    float _2487 = (((_2463 * cbLight._m0[_2415].y) * _2476) * _2110) + ((((cbLight._m0[_2334].y * _2078) * _2387) * _2401) * _2123);
    float _2488 = (((_2463 * cbLight._m0[_2415].z) * _2476) * _2110) + ((((cbLight._m0[_2334].z * _2080) * _2387) * _2401) * _2123);
    float _2544;
    float _2546;
    float _2548;
    if (_2163)
    {
        _2544 = _2486;
        _2546 = _2487;
        _2548 = _2488;
    }
    else
    {
        uint _2550 = _2087 + 2u;
        uint _2554 = _2087 + 10u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _598) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _674;
        float _2571 = cbLight._m0[_2550].y + _675;
        float _2572 = cbLight._m0[_2550].z + _676;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2550].xyz));
        float _4542 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2584 = dot(vec3(_595, _596, _597), vec3(_2577, _2578, _2579));
        float _4553 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4564 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2605 = (exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2606 = 1.0 - _2569;
        float _2616 = (0.5 / (((_2363 * ((_2583 * _2606) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2606) + _2569) * _2583))) * _2583;
        float _4575 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2544 = (((_2605 * cbLight._m0[_2554].x) * _2618) * _2619) + _2486;
        _2546 = (((_2605 * cbLight._m0[_2554].y) * _2618) * _2619) + _2487;
        _2548 = (((_2605 * cbLight._m0[_2554].z) * _2618) * _2619) + _2488;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2272)
    {
        _2650 = _2544;
        _2652 = _2546;
        _2654 = _2548;
    }
    else
    {
        uint _2661 = _2087 + 3u;
        uint _2665 = _2087 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _598) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _674;
        float _2682 = cbLight._m0[_2661].y + _675;
        float _2683 = cbLight._m0[_2661].z + _676;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_595, _596, _597), vec3(cbLight._m0[_2661].xyz));
        float _4591 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2695 = dot(vec3(_595, _596, _597), vec3(_2688, _2689, _2690));
        float _4602 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4613 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2716 = (exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2717 = 1.0 - _2680;
        float _2727 = (0.5 / (((_2363 * ((_2694 * _2717) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2717) + _2680) * _2694))) * _2694;
        float _4624 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2650 = (((_2716 * cbLight._m0[_2665].x) * _2729) * _2730) + _2544;
        _2652 = (((_2716 * cbLight._m0[_2665].y) * _2729) * _2730) + _2546;
        _2654 = (((_2716 * cbLight._m0[_2665].z) * _2729) * _2730) + _2548;
    }
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_2085.y == 0u)
    {
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.x;
        uint _2763 = uint((float(_2751.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2752))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2752)));
        float _2773 = (log2(_1863 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2774 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        uint _2777 = uint(isnan(14.0) ? _2774 : (isnan(_2774) ? 14.0 : min(_2774, 14.0)));
        uvec4 _2782 = texelFetch(g_lightClusterGridBuffer, int(((_2777 << 2u) + (_2763 << 6u)) >> 2u));
        uint _2783 = _2782.x;
        uint _2784 = _2751.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2784 >> 4u) & 15u)) + 4294967295u) & _2783) == 0u) || ((_2784 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3016 = 0.0;
            float _3017 = 0.0;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            uint _3022 = 0u;
            uint _3031;
            bool _3032;
            for (;;)
            {
                _3031 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                _3032 = _3031 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3032)
                {
                    frontier_phi_71_pred = _3021;
                    frontier_phi_71_pred_1 = _3020;
                    frontier_phi_71_pred_2 = _3019;
                    frontier_phi_71_pred_3 = _3018;
                    frontier_phi_71_pred_4 = _3017;
                    frontier_phi_71_pred_5 = _3016;
                }
                else
                {
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    float _3166;
                    uint _3167;
                    _3161 = _3016;
                    _3162 = _3017;
                    _3163 = _3018;
                    _3164 = _3019;
                    _3165 = _3020;
                    _3166 = _3021;
                    _3167 = _3031;
                    float _3088;
                    float _3089;
                    float _3090;
                    float _3091;
                    float _3092;
                    float _3093;
                    for (;;)
                    {
                        uint _3171 = uint(findLSB(_3167)) + (_3022 << 5u);
                        uint _3168 = (_3167 + 4294967295u) & _3167;
                        uint _3173 = _3171 * 48u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3173)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3173 + 3u)).x));
                        uint _3193 = (_3171 * 48u) + 4u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 3u)).x));
                        uint _3212 = (_3171 * 48u) + 8u;
                        vec3 _3223 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x));
                        float _3227 = _3187.x - _1861;
                        float _3228 = _3187.y - _1862;
                        float _3229 = _3187.z - _1863;
                        float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                        float _3233 = inversesqrt(_3230);
                        float _3234 = _3233 * _3227;
                        float _3235 = _3233 * _3228;
                        float _3236 = _3233 * _3229;
                        float _3237 = dot(vec3(_713, _716, _719), vec3(_3234, _3235, _3236));
                        float _3242 = 1.0 - (_3230 * _3187.w);
                        float _4650 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3243 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3244 = sqrt(_3230) * _3206.w;
                        float _3247 = 1.39999997615814208984375 / (_3244 + 1.39999997615814208984375);
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3237) + _3248;
                        float _3254 = _3244 * _3244;
                        float _3258 = ((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3243) / ((_3254 * 0.699999988079071044921875) + 1.0);
                        float _3262 = (-0.0) - _1861;
                        float _3263 = (-0.0) - _1862;
                        float _3264 = (-0.0) - _1863;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3278 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                        float _3279 = 1.0 - _773;
                        float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                        float _3287 = _3286 * _3286;
                        float _3288 = _3287 * _3287;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3291 = _3271 + _3236;
                        float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                        float _3299 = dot(vec3(_713, _716, _719), vec3(_3269, _3270, _3271));
                        float _4666 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                        float _3302 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3303 = dot(vec3(_713, _716, _719), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                        float _4677 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3306 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                        float _3311 = _3247 * _3287;
                        float _3312 = _3311 * _3311;
                        float _3315 = ((1.0 - _3312) * _3237) + _3312;
                        float _4688 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3316 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3317 = 1.0 - _3287;
                        float _3327 = (0.5 / (((_3316 * ((_3302 * _3317) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3287) * _3302))) * _3316;
                        float _4699 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3338 = (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3310 * _3310) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125))) * _3243;
                        _3091 = (_3258 * _3206.x) + _3164;
                        _3092 = (_3258 * _3206.y) + _3165;
                        _3093 = (_3258 * _3206.z) + _3166;
                        _3088 = (_3338 * _3223.x) + _3161;
                        _3089 = (_3338 * _3223.y) + _3162;
                        _3090 = (_3338 * _3223.z) + _3163;
                        if (_3168 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3161 = _3088;
                            _3162 = _3089;
                            _3163 = _3090;
                            _3164 = _3091;
                            _3165 = _3092;
                            _3166 = _3093;
                            _3167 = _3168;
                        }
                    }
                    frontier_phi_71_pred = _3093;
                    frontier_phi_71_pred_1 = _3092;
                    frontier_phi_71_pred_2 = _3091;
                    frontier_phi_71_pred_3 = _3090;
                    frontier_phi_71_pred_4 = _3089;
                    frontier_phi_71_pred_5 = _3088;
                }
                _2874 = frontier_phi_71_pred;
                _2872 = frontier_phi_71_pred_1;
                _2870 = frontier_phi_71_pred_2;
                _2868 = frontier_phi_71_pred_3;
                _2866 = frontier_phi_71_pred_4;
                _2864 = frontier_phi_71_pred_5;
                uint _3023 = _3022 + 1u;
                if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3016 = _2864;
                    _3017 = _2866;
                    _3018 = _2868;
                    _3019 = _2870;
                    _3020 = _2872;
                    _3021 = _2874;
                    _3022 = _3023;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((4294967295u << _2880) & _2783) == 0u)
        {
            _2984 = _2863;
            _2986 = _2865;
            _2988 = _2867;
            _2990 = _2869;
            _2992 = _2871;
            _2994 = _2873;
        }
        else
        {
            float _3009 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
            float _3010 = _3009 * _1861;
            float _3011 = _3009 * _1862;
            float _3012 = _3009 * _1863;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2985;
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _3144 = _2863;
                float _3145 = _2865;
                float _3146 = _2867;
                float _3147 = _2869;
                float _3148 = _2871;
                float _3149 = _2873;
                uint _3150 = _2880;
                uint _3159;
                bool _3160;
                for (;;)
                {
                    _3159 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                    _3160 = _3159 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3160)
                    {
                        frontier_phi_82_pred = _3149;
                        frontier_phi_82_pred_1 = _3148;
                        frontier_phi_82_pred_2 = _3147;
                        frontier_phi_82_pred_3 = _3146;
                        frontier_phi_82_pred_4 = _3145;
                        frontier_phi_82_pred_5 = _3144;
                    }
                    else
                    {
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3365 = _3144;
                        float _3366 = _3145;
                        float _3367 = _3146;
                        float _3368 = _3147;
                        float _3369 = _3148;
                        float _3370 = _3149;
                        uint _3371 = _3159;
                        uint _3372;
                        vec4 _3397;
                        float _3398;
                        vec4 _3413;
                        vec3 _3425;
                        vec4 _3440;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3382 = ((_3150 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3371));
                            _3372 = (_3371 + 4294967295u) & _3371;
                            uint _3384 = _3382 * 40u;
                            _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3398 = _3397.w;
                            uint _3400 = (_3382 * 40u) + 4u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3382 * 40u) + 8u;
                            _3425 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x));
                            uint _3427 = (_3382 * 40u) + 16u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3443 = (_3382 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3382 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3382 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_1863, _3490.z, fma(_1862, _3490.y, _3490.x * _1861)) + _3490.w;
                            _3503 = !((fma(_1863, _3471.z, fma(_1862, _3471.y, _3471.x * _1861)) + _3471.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3397.x - _1861;
                                float _3531 = _3397.y - _1862;
                                float _3532 = _3397.z - _1863;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3398 * _3398));
                                float _4710 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3548 = sqrt(_3533) * _3413.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_713, _716, _719))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_1863, _3440.z, fma(_1862, _3440.y, _3440.x * _1861)) + _3440.w) / _3502;
                                float _3562 = (fma(_1863, _3456.z, fma(_1862, _3456.y, _3456.x * _1861)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4726 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _773;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3010;
                                float _3592 = _3538 - _3011;
                                float _3593 = _3539 - _3012;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_713, _716, _719), vec3((-0.0) - _3010, (-0.0) - _3011, (-0.0) - _3012));
                                float _4737 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3605 = dot(vec3(_713, _716, _719), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4748 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_713, _716, _719), vec3(_3537, _3538, _3539))) + _3614;
                                float _4759 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4770 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3568 * _3413.z;
                                frontier_phi_88_pred_1 = _3568 * _3413.y;
                                frontier_phi_88_pred_2 = _3568 * _3413.x;
                                frontier_phi_88_pred_3 = _3642 * _3425.z;
                                frontier_phi_88_pred_4 = _3642 * _3425.y;
                                frontier_phi_88_pred_5 = _3642 * _3425.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3651 = frontier_phi_88_pred;
                            _3650 = frontier_phi_88_pred_1;
                            _3649 = frontier_phi_88_pred_2;
                            _3648 = frontier_phi_88_pred_3;
                            _3647 = frontier_phi_88_pred_4;
                            _3646 = frontier_phi_88_pred_5;
                            _3355 = _3649 + _3368;
                            _3356 = _3650 + _3369;
                            _3357 = _3651 + _3370;
                            _3352 = _3646 + _3365;
                            _3353 = _3647 + _3366;
                            _3354 = _3648 + _3367;
                            if (_3372 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3372;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3357;
                        frontier_phi_82_pred_1 = _3356;
                        frontier_phi_82_pred_2 = _3355;
                        frontier_phi_82_pred_3 = _3354;
                        frontier_phi_82_pred_4 = _3353;
                        frontier_phi_82_pred_5 = _3352;
                    }
                    _2995 = frontier_phi_82_pred;
                    _2993 = frontier_phi_82_pred_1;
                    _2991 = frontier_phi_82_pred_2;
                    _2989 = frontier_phi_82_pred_3;
                    _2987 = frontier_phi_82_pred_4;
                    _2985 = frontier_phi_82_pred_5;
                    uint _3151 = _3150 + 1u;
                    if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3144 = _2985;
                        _3145 = _2987;
                        _3146 = _2989;
                        _3147 = _2991;
                        _3148 = _2993;
                        _3149 = _2995;
                        _3150 = _3151;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2991;
                frontier_phi_63_64_ladder_1 = _2995;
                frontier_phi_63_64_ladder_2 = _2993;
                frontier_phi_63_64_ladder_3 = _2989;
                frontier_phi_63_64_ladder_4 = _2987;
                frontier_phi_63_64_ladder_5 = _2985;
            }
            else
            {
                frontier_phi_63_64_ladder = _2869;
                frontier_phi_63_64_ladder_1 = _2873;
                frontier_phi_63_64_ladder_2 = _2871;
                frontier_phi_63_64_ladder_3 = _2867;
                frontier_phi_63_64_ladder_4 = _2865;
                frontier_phi_63_64_ladder_5 = _2863;
            }
            _2984 = frontier_phi_63_64_ladder_5;
            _2986 = frontier_phi_63_64_ladder_4;
            _2988 = frontier_phi_63_64_ladder_3;
            _2990 = frontier_phi_63_64_ladder;
            _2992 = frontier_phi_63_64_ladder_2;
            _2994 = frontier_phi_63_64_ladder_1;
        }
        float _2999 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2796 = (_2999 * _2990) + _2327;
        _2798 = (_2999 * _2992) + _2329;
        _2800 = (_2999 * _2994) + _2331;
        _2802 = ((_2984 * 0.039999999105930328369140625) * _2999) + _2650;
        _2804 = ((_2986 * 0.039999999105930328369140625) * _2999) + _2652;
        _2806 = ((_2988 * 0.039999999105930328369140625) * _2999) + _2654;
    }
    else
    {
        _2796 = _2327;
        _2798 = _2329;
        _2800 = _2331;
        _2802 = _2650;
        _2804 = _2652;
        _2806 = _2654;
    }
    float _4786 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4797 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4808 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _2823 = ((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2796 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _757))) + ((_2802 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1593)) * cbPerFrame._m0[3u].x);
    float _2824 = ((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2798 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _757))) + ((_2804 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1593)) * cbPerFrame._m0[3u].x);
    float _2825 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2800 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _757))) + ((_2806 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1593)) * cbPerFrame._m0[3u].x);
    uint _2826 = _245 + 6u;
    float _2834 = _694 / cbSceneParam._m0[86u].x;
    float _2835 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _616 : (isnan(_616) ? cbSceneParam._m0[77u].w : min(_616, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_616 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_616) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _616 : min(cbSceneParam._m0[80u].w, _616));
        float _2889 = _2888 / _616;
        float _2900 = _2889 * _667;
        float _2901 = _668 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2904 = _2889 * _669;
        float _2906 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2901;
        float _2914 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3101;
        if (abs((_2902 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3101 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3045 = 1.0 / cbSceneParam._m0[80u].x;
            float _3046 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3047 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3056 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : min(_3046, 0.0));
            float _3057 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : min(_3047, 0.0));
            _3101 = ((abs(_2914 / _2902) * cbSceneParam._m0[80u].y) * ((((_3056 - _3057) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))))) * _3045)) - ((exp2(_2924 * _3056) - exp2(_2924 * _3057)) * _3045))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3103 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3112 = exp2((_3101 * (-1.44269502162933349609375)) * (1.0 - _3103.w));
        float _3113 = log2(_3112);
        float _3129 = log2(_2854);
        _2926 = (exp2(_3129 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].x)) * _3103.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2928 = (exp2(_3129 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].y)) * _3103.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2930 = (exp2(_3129 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3113 * cbSceneParam._m0[78u].z)) * _3103.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2932 = _3112 * _2854;
    }
    else
    {
        _2926 = _2851;
        _2928 = _2852;
        _2930 = _2853;
        _2932 = _2854;
    }
    bool _3139;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2973;
    bool _2983;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * _2823;
        float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * _2824;
        float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * _2825;
        float _2962 = _683 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2973 = _2962 * 0.999000012874603271484375;
        _2983 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2983)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2973) < 0.5)
            {
                _3139 = true;
                break;
            }
        }
        uint _3080 = _732 + uint(_2942.w);
        if ((cbInstanceData._m0[_3080].w < 1.0) && ((cbInstanceData._m0[_3080].w + _2973) < 0.5))
        {
            _3139 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3139 = true;
            break;
        }
        _3139 = false;
        break;
    }
    float _3343;
    if (_3139)
    {
        discard_state = true;
        _3343 = 0.0;
    }
    else
    {
        _3343 = cbInstanceData._m0[_2826].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3343;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
    discard_exit();
}


