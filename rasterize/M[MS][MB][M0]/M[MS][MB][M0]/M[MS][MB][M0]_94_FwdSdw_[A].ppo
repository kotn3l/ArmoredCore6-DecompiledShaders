#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1353;
float _3996;
float _3997;
float _3998;
float _3999;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4008 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4019 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4030 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4041 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _449;
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _531 = ((_501.z - _522) * _430) + _522;
    float _534 = ((((_501.x - _520) * _430) + _520) * 2.0) + (-1.0);
    float _535 = ((((_501.y - _521) * _430) + _521) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _4052 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _584 = _582.x;
    float _585 = 1.0 - _584;
    float _591 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _594 = ((isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : min(_591, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _603 = (_594 - ((((((_584 - _585) * cbMtdParam._m0[24u].z) + _585) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _594))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4073 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _604 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _611 = (_604 * (cbMtdParam._m0[17u].x - _456)) + _456;
    float _612 = (_604 * (cbMtdParam._m0[17u].y - _457)) + _457;
    float _613 = (_604 * (cbMtdParam._m0[17u].z - _458)) + _458;
    vec4 _625 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _627 = _625.x;
    float _628 = 1.0 - _627;
    float _653 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_627 - _628) * cbMtdParam._m0[24u].w) + _628) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4084 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _654 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _662 = ((((cbMtdParam._m0[10u].x - _611) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _654) + _611;
    float _663 = ((((cbMtdParam._m0[10u].y - _612) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _654) + _612;
    float _664 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _613)) * _654) + _613;
    float _669 = (((_476.z - _531) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _531;
    float _673 = ((_557.z - _669) * cbMtdParam._m0[19u].w) + _669;
    vec4 _687 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _694 = (_687.x * 2.0) + (-1.0);
    float _695 = (_687.y * 2.0) + (-1.0);
    float _696 = dot(vec2(_694, _695), vec2(_694, _695));
    float _4095 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _704 = (_604 * (_687.z - _673)) + _673;
    float _707 = ((cbMtdParam._m0[23u].y - _704) * _654) + _704;
    vec4 _726 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _732 = (_726.x * 2.0) + (-1.0);
    float _733 = (_726.y * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _4106 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _748 = (_534 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_476.x * 2.0) + (-1.0)))) + (((_557.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _749 = (_535 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_476.y * 2.0) + (-1.0)))) + (((_557.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _761 = (((_694 - _748) + (cbMtdParam._m0[21u].x * _748)) * _604) + _748;
    float _762 = (((_695 - _749) + (cbMtdParam._m0[21u].x * _749)) * _604) + _749;
    float _763 = (_604 * (sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) - _541)) + _541;
    float _774 = (((_732 - _761) + (_761 * cbMtdParam._m0[22u].z)) * _654) + _761;
    float _775 = (((_733 - _762) + (_762 * cbMtdParam._m0[22u].z)) * _654) + _762;
    float _776 = ((sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) - _763) * _654) + _763;
    float _778 = cbMtdParam._m0[22u].x + _557.w;
    float _781 = fma(_776, _249 * NORMAL.x, fma(_775, _256 * TANGENT.x, (_242 * _234) * _774));
    float _784 = fma(_776, _249 * NORMAL.y, fma(_775, _256 * TANGENT.y, (_242 * _235) * _774));
    float _787 = fma(_776, _249 * NORMAL.z, fma(_775, _256 * TANGENT.z, (_242 * _236) * _774));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _4117 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _795 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4139 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _4150 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _4161 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _854);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _854);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _854);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    vec4 _878 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _880 = _878.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1034 = sqrt(((_864 * _864) + (_865 * _865)) + (_866 * _866));
        float _1040 = (cbMatDynParam._m0[5u].x * _1034) + cbMatDynParam._m0[5u].y;
        float _4172 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1045 = (cbMatDynParam._m0[5u].z * _1034) + cbMatDynParam._m0[5u].w;
        float _4183 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) - _1041)) + _1041) < ((_880 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _891 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _892 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _910 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _913 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _916 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _929 = _281 + 9u;
    uint _930 = _929 + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_930].z;
    float _4194 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _4216 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _891, cbSceneParam._m0[86u].y * _892));
    float _954 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * TEXCOORD_5.w) * _950.x;
    float _955 = dot(vec3(_792, _793, _794), vec3(_871, _872, _873));
    float _958 = _955 * 2.0;
    float _962 = (_958 * _792) - _871;
    float _963 = (_958 * _793) - _872;
    float _964 = (_958 * _794) - _873;
    float _968 = abs(dot(vec3(_871, _872, _873), vec3(_792, _793, _794)));
    float _4227 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _970 = sqrt(_795);
    float _983 = exp2((_970 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_970 * 3.0));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1023, cbModelParam._m0[26u].z, fma(_1019, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015));
        float _1081 = fma(_1023, cbModelParam._m0[27u].z, fma(_1019, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015));
        float _1085 = fma(_1023, cbModelParam._m0[28u].z, fma(_1019, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015));
        float _1110 = _1015 + _792;
        float _1111 = _1019 + _793;
        float _1112 = _1023 + _794;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_792, _793, _794), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _4275 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_792, _793, _794), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _4308 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_792, _793, _794), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _4341 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1023, cbModelParam._m0[30u].z, fma(_1019, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1015));
        float _1399 = fma(_1023, cbModelParam._m0[31u].z, fma(_1019, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1015));
        float _1403 = fma(_1023, cbModelParam._m0[32u].z, fma(_1019, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1015));
        float _1426 = _1015 + _792;
        float _1427 = _1019 + _793;
        float _1428 = _1023 + _794;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_792, _793, _794), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4382 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4393 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4404 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_792, _793, _794), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4415 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4426 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4437 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_792, _793, _794), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4448 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4459 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4470 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = _1353;
        _1674 = _1353;
        _1675 = _1353;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1365)) + _1365;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1366)) + _1366;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1367)) + _1367;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _962 * 0.5;
    float _1733 = _963 * 0.5;
    float _1734 = _964 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1775;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1786;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1777 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1790 = (_1786 * cbModelParam._m0[1u].x) + (_1775 * (1.0 - cbModelParam._m0[1u].x));
    float _1800 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1800 : min(cbModelParam._m0[25u].z, _1800));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1849 = fma(_1023, cbModelParam._m0[13u].z, fma(_1019, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1015)) + cbModelParam._m0[13u].w;
        float _1853 = fma(_1023, cbModelParam._m0[14u].z, fma(_1019, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1015)) + cbModelParam._m0[14u].w;
        float _1857 = fma(_1023, cbModelParam._m0[15u].z, fma(_1019, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1015)) + cbModelParam._m0[15u].w;
        float _1860 = fma(_964, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962));
        float _1863 = fma(_964, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962));
        float _1866 = fma(_964, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962));
        float _1894;
        if (_1860 > 0.0)
        {
            _1894 = abs((1.0 - _1849) / _1860);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1849 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1894 = frontier_phi_17_15_ladder;
        }
        float _2064;
        if (_1863 > 0.0)
        {
            _2064 = abs((1.0 - _1853) / _1863);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1853 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2064 = frontier_phi_26_22_ladder;
        }
        float _2359;
        if (_1866 > 0.0)
        {
            _2359 = abs((1.0 - _1857) / _1866);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1857 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2359 = frontier_phi_38_33_ladder;
        }
        float _2361 = isnan(_2064) ? _1894 : (isnan(_1894) ? _2064 : min(_1894, _2064));
        float _2362 = isnan(_2359) ? _2361 : (isnan(_2361) ? _2359 : min(_2361, _2359));
        float _2366 = (_2362 * _1860) + _1849;
        float _2367 = (_2362 * _1863) + _1853;
        float _2368 = (_2362 * _1866) + _1857;
        float _2369 = _2362 * 9.9999997473787516355514526367188e-05;
        float _2371 = (-1.0) - _2369;
        float _2373 = _2369 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2368 > _2373) || ((_2368 < _2371) || ((_2367 > _2373) || ((_2367 < _2371) || ((_2366 < _2371) || (_2366 > _2373))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2368, cbModelParam._m0[9u].z, fma(_2367, cbModelParam._m0[9u].y, _2366 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2368, cbModelParam._m0[10u].z, fma(_2367, cbModelParam._m0[10u].y, _2366 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2368, cbModelParam._m0[11u].z, fma(_2367, cbModelParam._m0[11u].y, _2366 * cbModelParam._m0[11u].x))), _1801);
            frontier_phi_16_38_ladder = _2513.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2513.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2513.x * cbModelParam._m0[1u].y;
        }
        _1882 = frontier_phi_16_38_ladder_2;
        _1884 = frontier_phi_16_38_ladder_1;
        _1886 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1870 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_962, _963, _964), _1801);
        _1882 = _1870.x * cbModelParam._m0[1u].y;
        _1884 = _1870.y * cbModelParam._m0[1u].y;
        _1886 = _1870.z * cbModelParam._m0[1u].y;
    }
    float _1890 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1891 = isnan(_1890) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1890 : min(cbModelParam._m0[25u].w, _1890));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1023, cbModelParam._m0[21u].z, fma(_1019, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1015)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1023, cbModelParam._m0[22u].z, fma(_1019, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1015)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1023, cbModelParam._m0[23u].z, fma(_1019, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1015)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_964, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962));
        float _1959 = fma(_964, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962));
        float _1962 = fma(_964, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962));
        float _2069;
        if (_1956 > 0.0)
        {
            _2069 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2069 = frontier_phi_28_24_ladder;
        }
        float _2386;
        if (_1959 > 0.0)
        {
            _2386 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2386 = frontier_phi_40_35_ladder;
        }
        float _2713;
        if (_1962 > 0.0)
        {
            _2713 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2713 = frontier_phi_50_47_ladder;
        }
        float _2715 = isnan(_2386) ? _2069 : (isnan(_2069) ? _2386 : min(_2069, _2386));
        float _2716 = isnan(_2713) ? _2715 : (isnan(_2715) ? _2713 : min(_2715, _2713));
        float _2720 = (_2716 * _1956) + _1945;
        float _2721 = (_2716 * _1959) + _1949;
        float _2722 = (_2716 * _1962) + _1953;
        float _2723 = _2716 * 9.9999997473787516355514526367188e-05;
        float _2724 = (-1.0) - _2723;
        float _2726 = _2723 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2722 > _2726) || ((_2722 < _2724) || ((_2721 > _2726) || ((_2721 < _2724) || ((_2720 < _2724) || (_2720 > _2726))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2840 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2722, cbModelParam._m0[17u].z, fma(_2721, cbModelParam._m0[17u].y, _2720 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2722, cbModelParam._m0[18u].z, fma(_2721, cbModelParam._m0[18u].y, _2720 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2722, cbModelParam._m0[19u].z, fma(_2721, cbModelParam._m0[19u].y, _2720 * cbModelParam._m0[19u].x))), _1891);
            frontier_phi_25_50_ladder = _2840.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2840.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2840.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_25_50_ladder_2;
        _1983 = frontier_phi_25_50_ladder_1;
        _1985 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_962, _963, _964), _1891);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1997 = ((((1.0 - _983) * ((_970 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_983 * _970)) * _954;
    float _1998 = _1997 * ((cbModelParam._m0[1u].w * (_1981 - _1882)) + _1882);
    float _1999 = _1997 * ((cbModelParam._m0[1u].w * (_1983 - _1884)) + _1884);
    float _2000 = _1997 * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1999, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1999, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1999, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    float _2043 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2056 = _2043 / _2055;
    float _2057 = _2047 / _2055;
    float _2058 = _2051 / _2055;
    float _2205;
    float _2206;
    float _2207;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2085 = ((uint(_2058 > cbSceneParam._m0[59u].y) + uint(_2058 > cbSceneParam._m0[59u].x)) + uint(_2058 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2086 = _2085 + 43u;
        uint _2094 = _2085 + 44u;
        uint _2102 = _2085 + 45u;
        uint _2110 = _2085 + 46u;
        float _2121 = fma(_2055, cbSceneParam._m0[_2086].w, fma(_2051, cbSceneParam._m0[_2086].z, fma(_2047, cbSceneParam._m0[_2086].y, _2043 * cbSceneParam._m0[_2086].x)));
        float _2125 = fma(_2055, cbSceneParam._m0[_2094].w, fma(_2051, cbSceneParam._m0[_2094].z, fma(_2047, cbSceneParam._m0[_2094].y, _2043 * cbSceneParam._m0[_2094].x)));
        float _2133 = fma(_2055, cbSceneParam._m0[_2110].w, fma(_2051, cbSceneParam._m0[_2110].z, fma(_2047, cbSceneParam._m0[_2110].y, _2043 * cbSceneParam._m0[_2110].x)));
        float _2138 = cbSceneParam._m0[33u].z * _2133;
        float _2140 = cbSceneParam._m0[33u].w * _2133;
        float _2143 = fma(_2055, cbSceneParam._m0[_2102].w, fma(_2051, cbSceneParam._m0[_2102].z, fma(_2047, cbSceneParam._m0[_2102].y, _2043 * cbSceneParam._m0[_2102].x))) / _2133;
        float _2191 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
        float _4596 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2198 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 + _2121) / _2133, (_2140 + _2125) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2140 + _2121) / _2133, (_2125 - _2138) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2138) / _2133, (_2125 - _2140) / _2133), _2143), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2121 - _2140) / _2133, (_2138 + _2125) / _2133), _2143), 0.0)).x), vec4(0.25)));
        _2205 = 1.0 - (_2198 * cbSceneParam._m0[34u].x);
        _2206 = 1.0 - (_2198 * cbSceneParam._m0[34u].y);
        _2207 = 1.0 - (_2198 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2205 = 1.0;
        _2206 = 1.0;
        _2207 = 1.0;
    }
    float _2271;
    float _2273;
    float _2275;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2259 = fma(_2055, cbSceneParam._m0[63u].w, fma(_2051, cbSceneParam._m0[63u].z, fma(_2047, cbSceneParam._m0[63u].y, _2043 * cbSceneParam._m0[63u].x)));
        float _2260 = fma(_2055, cbSceneParam._m0[60u].w, fma(_2051, cbSceneParam._m0[60u].z, fma(_2047, cbSceneParam._m0[60u].y, _2043 * cbSceneParam._m0[60u].x))) / _2259;
        float _2261 = fma(_2055, cbSceneParam._m0[61u].w, fma(_2051, cbSceneParam._m0[61u].z, fma(_2047, cbSceneParam._m0[61u].y, _2043 * cbSceneParam._m0[61u].x))) / _2259;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2260 >= cbSceneParam._m0[64u].x) && (_2261 >= cbSceneParam._m0[64u].y)) && (_2260 <= cbSceneParam._m0[64u].z)) && (_2261 <= cbSceneParam._m0[64u].w))
        {
            float _2399 = fma(_2055, cbSceneParam._m0[62u].w, fma(_2051, cbSceneParam._m0[62u].z, fma(_2047, cbSceneParam._m0[62u].y, _2043 * cbSceneParam._m0[62u].x))) / _2259;
            float _2403 = isnan(cbSceneParam._m0[41u].w) ? _2399 : (isnan(_2399) ? cbSceneParam._m0[41u].w : max(_2399, cbSceneParam._m0[41u].w));
            float _2446 = (cbSceneParam._m0[33u].x - sqrt(((_2057 * _2057) + (_2056 * _2056)) + (_2058 * _2058))) * cbSceneParam._m0[33u].y;
            float _4612 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
            float _2453 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2260, cbSceneParam._m0[33u].w + _2261), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2260, _2261 - cbSceneParam._m0[33u].z), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].z, _2261 - cbSceneParam._m0[33u].w), _2403), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2260 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2261), _2403), 0.0)).x), vec4(0.25)));
            float _2457 = 1.0 - (_2453 * cbSceneParam._m0[34u].x);
            float _2458 = 1.0 - (_2453 * cbSceneParam._m0[34u].y);
            float _2459 = 1.0 - (_2453 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2459) ? _2207 : (isnan(_2207) ? _2459 : min(_2207, _2459));
            frontier_phi_37_36_ladder_1 = isnan(_2458) ? _2206 : (isnan(_2206) ? _2458 : min(_2206, _2458));
            frontier_phi_37_36_ladder_2 = isnan(_2457) ? _2205 : (isnan(_2205) ? _2457 : min(_2205, _2457));
        }
        else
        {
            frontier_phi_37_36_ladder = _2207;
            frontier_phi_37_36_ladder_1 = _2206;
            frontier_phi_37_36_ladder_2 = _2205;
        }
        _2271 = frontier_phi_37_36_ladder_2;
        _2273 = frontier_phi_37_36_ladder_1;
        _2275 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2271 = _2205;
        _2273 = _2206;
        _2275 = _2207;
    }
    uvec4 _2280 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2282 = _2280.x * 14u;
    uint _2283 = _2282 + 13u;
    float _2290 = _954 + (-1.0);
    float _2295 = (cbLight._m0[_2283].x * _2290) + 1.0;
    float _2296 = (cbLight._m0[_2283].y * _2290) + 1.0;
    float _2297 = (cbLight._m0[_2283].z * _2290) + 1.0;
    float _2298 = (cbLight._m0[_2283].w * _2290) + 1.0;
    uint _2299 = _2282 + 5u;
    float _2305 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
    uint _2309 = _2282 + 4u;
    float _2318 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
    uint _2322 = _2282 | 1u;
    float _2333 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_792, _793, _794));
    float _2336 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_792, _793, _794));
    float _4648 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _4659 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2341 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * 0.3183098733425140380859375;
    float _2343 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * 0.3183098733425140380859375;
    float _2350 = ((cbLight._m0[_2299].x * _2305) * _2343) + (((cbLight._m0[_2309].x * _2271) * _2318) * _2341);
    float _2351 = ((_2305 * cbLight._m0[_2299].y) * _2343) + (((cbLight._m0[_2309].y * _2273) * _2318) * _2341);
    float _2352 = ((_2305 * cbLight._m0[_2299].z) * _2343) + (((cbLight._m0[_2309].z * _2275) * _2318) * _2341);
    uvec4 _2356 = floatBitsToUint(cbLight._m0[_2282 + 12u]);
    bool _2358 = _2356.x == 0u;
    float _2460;
    float _2462;
    float _2464;
    if (_2358)
    {
        _2460 = _2350;
        _2462 = _2351;
        _2464 = _2352;
    }
    else
    {
        uint _2468 = _2282 + 6u;
        float _2484 = (dot(vec3(cbLight._m0[_2282 + 2u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2485 = _2484 * _2484;
        float _4670 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2486 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2487 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2460 = (((cbLight._m0[_2468].x * 0.3183098733425140380859375) * _2486) * _2487) + _2350;
        _2462 = (((cbLight._m0[_2468].y * 0.3183098733425140380859375) * _2486) * _2487) + _2351;
        _2464 = (((cbLight._m0[_2468].z * 0.3183098733425140380859375) * _2486) * _2487) + _2352;
    }
    bool _2467 = _2356.y == 0u;
    float _2522;
    float _2524;
    float _2526;
    if (_2467)
    {
        _2522 = _2460;
        _2524 = _2462;
        _2526 = _2464;
    }
    else
    {
        uint _2684 = _2282 + 7u;
        float _2700 = (dot(vec3(cbLight._m0[_2282 + 3u].xyz), vec3(_792, _793, _794)) * 0.5) + 0.5;
        float _2701 = _2700 * _2700;
        float _4686 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2702 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2703 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2522 = (((cbLight._m0[_2684].x * 0.3183098733425140380859375) * _2702) * _2703) + _2460;
        _2524 = (((cbLight._m0[_2684].y * 0.3183098733425140380859375) * _2702) * _2703) + _2462;
        _2526 = (((cbLight._m0[_2684].z * 0.3183098733425140380859375) * _2702) * _2703) + _2464;
    }
    uint _2529 = _2282 + 8u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _795) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2282].x + _871;
    float _2545 = cbLight._m0[_2282].y + _872;
    float _2546 = cbLight._m0[_2282].z + _873;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2282].xyz));
    float _4702 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _4713 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2558 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
    float _2559 = dot(vec3(_792, _793, _794), vec3(_2551, _2552, _2553));
    float _4724 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
    float _2563 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2551, _2552, _2553));
    float _4735 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2567 = _2543 * _2543;
    float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
    float _2582 = (exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2583 = 1.0 - _2543;
    float _2594 = (0.5 / (((_2558 * ((_2557 * _2583) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2583) + _2543) * _2557))) * _2557;
    float _4746 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
    uint _2610 = _2282 + 9u;
    float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _795) * 0.949999988079071044921875);
    float _2622 = _2621 * _2621;
    float _2623 = cbLight._m0[_2322].x + _871;
    float _2624 = cbLight._m0[_2322].y + _872;
    float _2625 = cbLight._m0[_2322].z + _873;
    float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
    float _2630 = _2629 * _2623;
    float _2631 = _2629 * _2624;
    float _2632 = _2629 * _2625;
    float _2633 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2322].xyz));
    float _4757 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2636 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
    float _2637 = dot(vec3(_792, _793, _794), vec3(_2630, _2631, _2632));
    float _4768 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2640 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
    float _2641 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2630, _2631, _2632));
    float _4779 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2645 = _2622 * _2622;
    float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
    float _2658 = (exp2(log2(1.0 - (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2659 = 1.0 - _2622;
    float _2669 = (0.5 / (((_2558 * ((_2636 * _2659) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2659) + _2622) * _2636))) * _2636;
    float _4790 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2671 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
    float _2681 = (((_2658 * cbLight._m0[_2610].x) * _2671) * _2305) + ((((cbLight._m0[_2529].x * _2271) * _2582) * _2596) * _2318);
    float _2682 = (((_2658 * cbLight._m0[_2610].y) * _2671) * _2305) + ((((cbLight._m0[_2529].y * _2273) * _2582) * _2596) * _2318);
    float _2683 = (((_2658 * cbLight._m0[_2610].z) * _2671) * _2305) + ((((cbLight._m0[_2529].z * _2275) * _2582) * _2596) * _2318);
    float _2739;
    float _2741;
    float _2743;
    if (_2358)
    {
        _2739 = _2681;
        _2741 = _2682;
        _2743 = _2683;
    }
    else
    {
        uint _2745 = _2282 + 2u;
        uint _2749 = _2282 + 10u;
        float _2763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2745].w)) * _795) * 0.949999988079071044921875);
        float _2764 = _2763 * _2763;
        float _2765 = cbLight._m0[_2745].x + _871;
        float _2766 = cbLight._m0[_2745].y + _872;
        float _2767 = cbLight._m0[_2745].z + _873;
        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
        float _2772 = _2771 * _2765;
        float _2773 = _2771 * _2766;
        float _2774 = _2771 * _2767;
        float _2775 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2745].xyz));
        float _4801 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2779 = dot(vec3(_792, _793, _794), vec3(_2772, _2773, _2774));
        float _4812 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2783 = dot(vec3(cbLight._m0[_2745].xyz), vec3(_2772, _2773, _2774));
        float _4823 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2787 = _2764 * _2764;
        float _2791 = ((_2782 * _2782) * (_2787 + (-1.0))) + 1.0;
        float _2800 = (exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2801 = 1.0 - _2764;
        float _2811 = (0.5 / (((_2558 * ((_2778 * _2801) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2801) + _2764) * _2778))) * _2778;
        float _4834 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2813 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2787 / ((_2791 * _2791) * 3.141590118408203125));
        float _2814 = isnan(1.0) ? _2297 : (isnan(_2297) ? 1.0 : min(_2297, 1.0));
        _2739 = (((_2800 * cbLight._m0[_2749].x) * _2813) * _2814) + _2681;
        _2741 = (((_2800 * cbLight._m0[_2749].y) * _2813) * _2814) + _2682;
        _2743 = (((_2800 * cbLight._m0[_2749].z) * _2813) * _2814) + _2683;
    }
    float _2845;
    float _2847;
    float _2849;
    if (_2467)
    {
        _2845 = _2739;
        _2847 = _2741;
        _2849 = _2743;
    }
    else
    {
        uint _2856 = _2282 + 3u;
        uint _2860 = _2282 + 11u;
        float _2874 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2856].w)) * _795) * 0.949999988079071044921875);
        float _2875 = _2874 * _2874;
        float _2876 = cbLight._m0[_2856].x + _871;
        float _2877 = cbLight._m0[_2856].y + _872;
        float _2878 = cbLight._m0[_2856].z + _873;
        float _2882 = inversesqrt(dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878)));
        float _2883 = _2882 * _2876;
        float _2884 = _2882 * _2877;
        float _2885 = _2882 * _2878;
        float _2886 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2856].xyz));
        float _4850 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2889 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2890 = dot(vec3(_792, _793, _794), vec3(_2883, _2884, _2885));
        float _4861 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2893 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2894 = dot(vec3(cbLight._m0[_2856].xyz), vec3(_2883, _2884, _2885));
        float _4872 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2898 = _2875 * _2875;
        float _2902 = ((_2893 * _2893) * (_2898 + (-1.0))) + 1.0;
        float _2911 = (exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2912 = 1.0 - _2875;
        float _2922 = (0.5 / (((_2558 * ((_2889 * _2912) + _2875)) + 9.9999999392252902907785028219223e-09) + (((_2558 * _2912) + _2875) * _2889))) * _2889;
        float _4883 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2924 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2898 / ((_2902 * _2902) * 3.141590118408203125));
        float _2925 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
        _2845 = (((_2911 * cbLight._m0[_2860].x) * _2924) * _2925) + _2739;
        _2847 = (((_2911 * cbLight._m0[_2860].y) * _2924) * _2925) + _2741;
        _2849 = (((_2911 * cbLight._m0[_2860].z) * _2924) * _2925) + _2743;
    }
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    float _2999;
    float _3001;
    if (_2280.y == 0u)
    {
        uvec4 _2946 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2947 = _2946.x;
        uint _2958 = uint((float(_2946.y) * floor(float(uint(cbSceneParam._m0[85u].y * _892) / _2947))) + floor(float(uint(cbSceneParam._m0[85u].x * _891) / _2947)));
        float _2968 = (log2(_2058 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2969 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        uint _2972 = uint(isnan(14.0) ? _2969 : (isnan(_2969) ? 14.0 : min(_2969, 14.0)));
        uvec4 _2977 = texelFetch(g_lightClusterGridBuffer, int(((_2972 << 2u) + (_2958 << 6u)) >> 2u));
        uint _2978 = _2977.x;
        uint _2979 = _2946.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2979 >> 4u) & 15u)) + 4294967295u) & _2978) == 0u) || ((_2979 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3227)
                {
                    frontier_phi_71_pred = _3216;
                    frontier_phi_71_pred_1 = _3215;
                    frontier_phi_71_pred_2 = _3214;
                    frontier_phi_71_pred_3 = _3213;
                    frontier_phi_71_pred_4 = _3212;
                    frontier_phi_71_pred_5 = _3211;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3226;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3217 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2056;
                        float _3423 = _3382.y - _2057;
                        float _3424 = _3382.z - _2058;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_910, _913, _916), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4909 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2056;
                        float _3458 = (-0.0) - _2057;
                        float _3459 = (-0.0) - _2058;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3473 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _970;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_910, _913, _916), vec3(_3464, _3465, _3466));
                        float _4925 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3498 = dot(vec3(_910, _913, _916), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4936 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3442 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3432) + _3507;
                        float _4947 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4958 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0)))) / ((_3505 * _3505) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3286 = (_3453 * _3401.x) + _3359;
                        _3287 = (_3453 * _3401.y) + _3360;
                        _3288 = (_3453 * _3401.z) + _3361;
                        _3283 = (_3533 * _3418.x) + _3356;
                        _3284 = (_3533 * _3418.y) + _3357;
                        _3285 = (_3533 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_71_pred = _3288;
                    frontier_phi_71_pred_1 = _3287;
                    frontier_phi_71_pred_2 = _3286;
                    frontier_phi_71_pred_3 = _3285;
                    frontier_phi_71_pred_4 = _3284;
                    frontier_phi_71_pred_5 = _3283;
                }
                _3069 = frontier_phi_71_pred;
                _3067 = frontier_phi_71_pred_1;
                _3065 = frontier_phi_71_pred_2;
                _3063 = frontier_phi_71_pred_3;
                _3061 = frontier_phi_71_pred_4;
                _3059 = frontier_phi_71_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3059;
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3075) & _2978) == 0u)
        {
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
            float _3205 = _3204 * _2056;
            float _3206 = _3204 * _2057;
            float _3207 = _3204 * _2058;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3339 = _3058;
                float _3340 = _3060;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                uint _3345 = _3075;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_2972 << 5u) + (_2958 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3355)
                    {
                        frontier_phi_82_pred = _3344;
                        frontier_phi_82_pred_1 = _3343;
                        frontier_phi_82_pred_2 = _3342;
                        frontier_phi_82_pred_3 = _3341;
                        frontier_phi_82_pred_4 = _3340;
                        frontier_phi_82_pred_5 = _3339;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        uint _3566 = _3354;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3635;
                        vec4 _3650;
                        float _3696;
                        bool _3697;
                        for (;;)
                        {
                            uint _3577 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3622 = (_3577 * 40u) + 16u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3577 * 40u) + 20u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3652 = (_3577 * 40u) + 24u;
                            vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            uint _3671 = (_3577 * 40u) + 28u;
                            vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            _3696 = fma(_2058, _3684.z, fma(_2057, _3684.y, _3684.x * _2056)) + _3684.w;
                            _3697 = !((fma(_2058, _3665.z, fma(_2057, _3665.y, _3665.x * _2056)) + _3665.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3697)
                            {
                                float _3724 = _3592.x - _2056;
                                float _3725 = _3592.y - _2057;
                                float _3726 = _3592.z - _2058;
                                float _3727 = dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726));
                                float _3730 = inversesqrt(_3727);
                                float _3731 = _3730 * _3724;
                                float _3732 = _3730 * _3725;
                                float _3733 = _3730 * _3726;
                                float _3737 = 1.0 - (_3727 / (_3593 * _3593));
                                float _4969 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3742 = sqrt(_3727) * _3608.w;
                                float _3744 = 1.39999997615814208984375 / (_3742 + 1.39999997615814208984375);
                                float _3745 = _3744 * _3744;
                                float _3748 = ((1.0 - _3745) * dot(vec3(_3731, _3732, _3733), vec3(_910, _913, _916))) + _3745;
                                float _3751 = _3742 * _3742;
                                float _3755 = (fma(_2058, _3635.z, fma(_2057, _3635.y, _3635.x * _2056)) + _3635.w) / _3696;
                                float _3756 = (fma(_2058, _3650.z, fma(_2057, _3650.y, _3650.x * _2056)) + _3650.w) / _3696;
                                float _3760 = 1.0 - dot(vec2(_3755, _3756), vec2(_3755, _3756));
                                float _4985 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                                float _3761 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3762 = _3761 * (((isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0))) * _3738) / ((_3751 * 0.699999988079071044921875) + 1.0));
                                float _3774 = exp2(log2(1.0 / ((_3751 * 3.5) + 5.0)) * 0.25);
                                float _3775 = 1.0 - _970;
                                float _3782 = sqrt(1.0 - ((1.0 - (_3775 * _3775)) * (1.0 - (_3774 * _3774))));
                                float _3783 = _3782 * _3782;
                                float _3784 = _3783 * _3783;
                                float _3785 = _3731 - _3205;
                                float _3786 = _3732 - _3206;
                                float _3787 = _3733 - _3207;
                                float _3791 = inversesqrt(dot(vec3(_3785, _3786, _3787), vec3(_3785, _3786, _3787)));
                                float _3795 = dot(vec3(_910, _913, _916), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4996 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3798 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3799 = dot(vec3(_910, _913, _916), vec3(_3791 * _3785, _3791 * _3786, _3791 * _3787));
                                float _5007 = isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0));
                                float _3802 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3806 = ((_3802 * _3802) * (_3784 + (-1.0))) + 1.0;
                                float _3807 = _3744 * _3783;
                                float _3808 = _3807 * _3807;
                                float _3814 = ((1.0 - _3808) * dot(vec3(_910, _913, _916), vec3(_3731, _3732, _3733))) + _3808;
                                float _5018 = isnan(0.0) ? _3814 : (isnan(_3814) ? 0.0 : max(_3814, 0.0));
                                float _3815 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
                                float _3816 = 1.0 - _3783;
                                float _3826 = (0.5 / (((_3815 * ((_3798 * _3816) + _3783)) + 9.9999999392252902907785028219223e-09) + (((_3815 * _3816) + _3783) * _3798))) * _3815;
                                float _5029 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3836 = (_3761 * _3738) * (((_3784 * 3.1415927410125732421875) * (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0)))) / ((_3806 * _3806) * ((_3751 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3762 * _3608.z;
                                frontier_phi_88_pred_1 = _3762 * _3608.y;
                                frontier_phi_88_pred_2 = _3762 * _3608.x;
                                frontier_phi_88_pred_3 = _3836 * _3620.z;
                                frontier_phi_88_pred_4 = _3836 * _3620.y;
                                frontier_phi_88_pred_5 = _3836 * _3620.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3845 = frontier_phi_88_pred;
                            _3844 = frontier_phi_88_pred_1;
                            _3843 = frontier_phi_88_pred_2;
                            _3842 = frontier_phi_88_pred_3;
                            _3841 = frontier_phi_88_pred_4;
                            _3840 = frontier_phi_88_pred_5;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3552;
                        frontier_phi_82_pred_1 = _3551;
                        frontier_phi_82_pred_2 = _3550;
                        frontier_phi_82_pred_3 = _3549;
                        frontier_phi_82_pred_4 = _3548;
                        frontier_phi_82_pred_5 = _3547;
                    }
                    _3190 = frontier_phi_82_pred;
                    _3188 = frontier_phi_82_pred_1;
                    _3186 = frontier_phi_82_pred_2;
                    _3184 = frontier_phi_82_pred_3;
                    _3182 = frontier_phi_82_pred_4;
                    _3180 = frontier_phi_82_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3180;
                        _3340 = _3182;
                        _3341 = _3184;
                        _3342 = _3186;
                        _3343 = _3188;
                        _3344 = _3190;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3186;
                frontier_phi_63_64_ladder_1 = _3190;
                frontier_phi_63_64_ladder_2 = _3188;
                frontier_phi_63_64_ladder_3 = _3184;
                frontier_phi_63_64_ladder_4 = _3182;
                frontier_phi_63_64_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_63_64_ladder = _3064;
                frontier_phi_63_64_ladder_1 = _3068;
                frontier_phi_63_64_ladder_2 = _3066;
                frontier_phi_63_64_ladder_3 = _3062;
                frontier_phi_63_64_ladder_4 = _3060;
                frontier_phi_63_64_ladder_5 = _3058;
            }
            _3179 = frontier_phi_63_64_ladder_5;
            _3181 = frontier_phi_63_64_ladder_4;
            _3183 = frontier_phi_63_64_ladder_3;
            _3185 = frontier_phi_63_64_ladder;
            _3187 = frontier_phi_63_64_ladder_2;
            _3189 = frontier_phi_63_64_ladder_1;
        }
        float _3194 = isnan(1.0) ? _954 : (isnan(_954) ? 1.0 : min(_954, 1.0));
        _2991 = (_3194 * _3185) + _2522;
        _2993 = (_3194 * _3187) + _2524;
        _2995 = (_3194 * _3189) + _2526;
        _2997 = ((_3179 * 0.039999999105930328369140625) * _3194) + _2845;
        _2999 = ((_3181 * 0.039999999105930328369140625) * _3194) + _2847;
        _3001 = ((_3183 * 0.039999999105930328369140625) * _3194) + _2849;
    }
    else
    {
        _2991 = _2522;
        _2993 = _2524;
        _2995 = _2526;
        _2997 = _2845;
        _2999 = _2847;
        _3001 = _2849;
    }
    float _5045 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _5056 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _5067 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _3018 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_2991 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _954))) + ((_2997 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1790)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_2993 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _954))) + ((_2999 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1790)) * cbPerFrame._m0[3u].x);
    float _3020 = ((isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0))) * (_2995 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _954))) + ((_3001 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1790)) * cbPerFrame._m0[3u].x);
    uint _3021 = _281 + 6u;
    float _3029 = _891 / cbSceneParam._m0[86u].x;
    float _3030 = _892 / cbSceneParam._m0[86u].y;
    vec4 _3044 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3046 = _3044.x;
    float _3047 = _3044.y;
    float _3048 = _3044.z;
    float _3049 = _3044.w;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _3084 = _3083 / _813;
        float _3095 = _3084 * _864;
        float _3096 = _865 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3099 = _3084 * _866;
        float _3101 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3102 = _3101 + cbSceneParam._m0[79u].w;
        float _3103 = cbSceneParam._m0[79u].w - _3096;
        float _3109 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3099 * _3099));
        float _3112 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3109;
        float _3117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3296;
        if (abs((_3097 - _3101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3296 = ((((_3102 > 0.0) ? exp2(_3117 * _3102) : (2.0 - exp2(_3119 * _3102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3112;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : max(_3102, _3103));
            float _3242 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : min(_3102, _3103));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3296 = ((abs(_3109 / _3097) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3117 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3117 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3119 * _3251) - exp2(_3119 * _3252)) * _3240))) + (_3112 * cbSceneParam._m0[80u].z);
        }
        vec4 _3298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3029, _3030, 1.0), 0.0);
        float _3307 = exp2((_3296 * (-1.44269502162933349609375)) * (1.0 - _3298.w));
        float _3308 = log2(_3307);
        float _3324 = log2(_3049);
        _3121 = (exp2(_3324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].x)) * _3298.x) / cbSceneParam._m0[78u].x)) + _3046;
        _3123 = (exp2(_3324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].y)) * _3298.y) / cbSceneParam._m0[78u].y)) + _3047;
        _3125 = (exp2(_3324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].z)) * _3298.z) / cbSceneParam._m0[78u].z)) + _3048;
        _3127 = _3307 * _3049;
    }
    else
    {
        _3121 = _3046;
        _3123 = _3047;
        _3125 = _3048;
        _3127 = _3049;
    }
    bool _3334;
    vec4 _3137;
    vec4 _3159;
    float _3161;
    float _3165;
    float _3166;
    float _3167;
    float _3168;
    bool _3178;
    for (;;)
    {
        _3137 = cbMatDynParam._m0[0u];
        float _3139 = roundEven(_3137.y);
        bool _3140 = _3139 == 3.0;
        float _3141 = log2(_3127);
        float _3148 = exp2(_3141 * cbSceneParam._m0[78u].x) * _3018;
        float _3149 = exp2(_3141 * cbSceneParam._m0[78u].y) * _3019;
        float _3150 = exp2(_3141 * cbSceneParam._m0[78u].z) * _3020;
        float _3157 = _880 + (-0.5);
        _3159 = cbMtdParam._m0[1u];
        _3161 = _3159.y * _3157;
        float _3164 = (_3139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3165 = _3164 * (_3140 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3121)));
        _3166 = _3164 * (_3140 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3123)));
        _3167 = _3164 * (_3140 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3125)));
        _3168 = _3157 * 0.999000012874603271484375;
        _3178 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3178)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _3168) < 0.5)
            {
                _3334 = true;
                break;
            }
        }
        uint _3275 = _929 + uint(_3137.w);
        if ((cbInstanceData._m0[_3275].w < 1.0) && ((cbInstanceData._m0[_3275].w + _3168) < 0.5))
        {
            _3334 = true;
            break;
        }
        if ((_3161 + 1.0) < _3159.x)
        {
            _3334 = true;
            break;
        }
        _3334 = false;
        break;
    }
    float _3538;
    if (_3334)
    {
        discard_state = true;
        _3538 = 0.0;
    }
    else
    {
        _3538 = cbInstanceData._m0[_3021].w;
    }
    SV_Target.x = _3165;
    SV_Target.y = _3166;
    SV_Target.z = _3167;
    SV_Target.w = _3538;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3021].w;
    discard_exit();
}


