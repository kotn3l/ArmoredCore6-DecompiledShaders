#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1374;
float _3756;
float _3757;
float _3758;
float _3759;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3768 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3779 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3790 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _412 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_402 - _412) * cbMtdParam._m0[24u].x) + _412) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3801 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _437 = (_430 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _438 = (_430 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _439 = (_430 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _443 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _437;
    float _446 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _438;
    float _449 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _439;
    float _456 = ((_437 - _443) * (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) + _443;
    float _457 = ((_438 - _446) * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) + _446;
    float _458 = ((_439 - _449) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) + _449;
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _300) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _301) + cbTextureTilingScale._m0[14u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _552 = ((_522.z - _543) * _430) + _543;
    float _555 = ((((_522.x - _541) * _430) + _541) * 2.0) + (-1.0);
    float _556 = ((((_522.y - _542) * _430) + _542) * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3812 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _603 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _605 = _603.x;
    float _606 = 1.0 - _605;
    float _612 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _615 = ((isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : min(_612, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _624 = (_615 - ((((((_605 - _606) * cbMtdParam._m0[24u].z) + _606) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _615))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3833 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _632 = (_625 * ((_477.x * cbMtdParam._m0[18u].x) - _456)) + _456;
    float _633 = (_625 * ((_477.y * cbMtdParam._m0[18u].y) - _457)) + _457;
    float _634 = (_625 * ((_477.z * cbMtdParam._m0[18u].z) - _458)) + _458;
    vec4 _646 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _674 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3844 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _683 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _675) + _632;
    float _684 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _675) + _633;
    float _685 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _675) + _634;
    float _690 = (((_497.z - _552) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _552;
    float _694 = ((_578.z - _690) * cbMtdParam._m0[19u].w) + _690;
    vec4 _708 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _715 = (_708.x * 2.0) + (-1.0);
    float _716 = (_708.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _3855 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _725 = (_625 * (_708.z - _694)) + _694;
    float _728 = ((cbMtdParam._m0[23u].y - _725) * _675) + _725;
    vec4 _747 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _753 = (_747.x * 2.0) + (-1.0);
    float _754 = (_747.y * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _3866 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _769 = (_555 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_497.x * 2.0) + (-1.0)))) + (((_578.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _770 = (_556 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_497.y * 2.0) + (-1.0)))) + (((_578.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _782 = (((_715 - _769) + (cbMtdParam._m0[21u].x * _769)) * _625) + _769;
    float _783 = (((_716 - _770) + (cbMtdParam._m0[21u].x * _770)) * _625) + _770;
    float _784 = (_625 * (sqrt(1.0 - (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0)))) - _562)) + _562;
    float _795 = (((_753 - _782) + (_782 * cbMtdParam._m0[22u].z)) * _675) + _782;
    float _796 = (((_754 - _783) + (_783 * cbMtdParam._m0[22u].z)) * _675) + _783;
    float _797 = ((sqrt(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) - _784) * _675) + _784;
    float _799 = cbMtdParam._m0[22u].x + _578.w;
    float _802 = fma(_797, _249 * NORMAL.x, fma(_796, _256 * TANGENT.x, (_242 * _234) * _795));
    float _805 = fma(_797, _249 * NORMAL.y, fma(_796, _256 * TANGENT.y, (_242 * _235) * _795));
    float _808 = fma(_797, _249 * NORMAL.z, fma(_796, _256 * TANGENT.z, (_242 * _236) * _795));
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    float _813 = _812 * _802;
    float _814 = _812 * _805;
    float _815 = _812 * _808;
    float _3877 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _816 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _3899 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3910 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3921 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _885 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _875);
    float _886 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _875);
    float _887 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _875);
    float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
    float _892 = _885 * _891;
    float _893 = _886 * _891;
    float _894 = _887 * _891;
    vec4 _899 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _901 = _899.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1055 = sqrt(((_885 * _885) + (_886 * _886)) + (_887 * _887));
        float _1061 = (cbMatDynParam._m0[5u].x * _1055) + cbMatDynParam._m0[5u].y;
        float _3932 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1066 = (cbMatDynParam._m0[5u].z * _1055) + cbMatDynParam._m0[5u].w;
        float _3943 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) - _1062)) + _1062) < ((_901 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _912 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _913 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_815, cbSceneParam._m0[5u].z, fma(_814, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _813));
    float _934 = fma(_815, cbSceneParam._m0[6u].z, fma(_814, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _813));
    float _937 = fma(_815, cbSceneParam._m0[7u].z, fma(_814, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _813));
    uint _950 = _281 + 9u;
    uint _951 = _950 + uint(cbMatDynParam._m0[0u].w);
    float _957 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) * cbInstanceData._m0[_951].x;
    float _958 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * cbInstanceData._m0[_951].y;
    float _959 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * cbInstanceData._m0[_951].z;
    float _3954 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _960 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _3965 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    vec4 _971 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _912, cbSceneParam._m0[86u].y * _913));
    float _975 = ((isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * TEXCOORD_5.w) * _971.x;
    float _976 = dot(vec3(_813, _814, _815), vec3(_892, _893, _894));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _813) - _892;
    float _984 = (_979 * _814) - _893;
    float _985 = (_979 * _815) - _894;
    float _989 = abs(dot(vec3(_892, _893, _894), vec3(_813, _814, _815)));
    float _3987 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_816);
    float _1004 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1044, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036));
        float _1102 = fma(_1044, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036));
        float _1106 = fma(_1044, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036));
        float _1131 = _1036 + _813;
        float _1132 = _1040 + _814;
        float _1133 = _1044 + _815;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_813, _814, _815), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4035 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_813, _814, _815), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4068 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_813, _814, _815), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4101 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1416 = fma(_1044, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036));
        float _1420 = fma(_1044, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036));
        float _1424 = fma(_1044, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036));
        float _1447 = _1036 + _813;
        float _1448 = _1040 + _814;
        float _1449 = _1044 + _815;
        float _1459 = fma(_1449, cbModelParam._m0[30u].z, fma(_1448, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1447)) - _1416;
        float _1460 = fma(_1449, cbModelParam._m0[31u].z, fma(_1448, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1447)) - _1420;
        float _1461 = fma(_1449, cbModelParam._m0[32u].z, fma(_1448, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1447)) - _1424;
        float _1465 = inversesqrt(dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461)));
        float _1478 = ((_1465 * _1459) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1416 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1479 = ((_1465 * _1460) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1420 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1465 * _1461) / cbModelParam._m0[35u].z) + ((((((_1424 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1496 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1478, _1479, _1480), 0.0);
        float _1515 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1482.x + (-0.5));
        float _1517 = _1515 * (_1482.y + (-0.5));
        float _1518 = _1515 * (_1482.z + (-0.5));
        float _1525 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1489.x + (-0.5));
        float _1527 = _1525 * (_1489.y + (-0.5));
        float _1528 = _1525 * (_1489.z + (-0.5));
        float _1535 = exp2((_1496.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1496.x + (-0.5));
        float _1537 = _1535 * (_1496.y + (-0.5));
        float _1538 = _1535 * (_1496.z + (-0.5));
        float _1545 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1503.x + (-0.5));
        float _1547 = _1545 * (_1503.y + (-0.5));
        float _1548 = _1545 * (_1503.z + (-0.5));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = _1516 * 0.5;
        float _1553 = _1526 * 0.5;
        float _1554 = _1536 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_813, _814, _815), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _4164 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1579 + 1.0))) + _1584) * _1549;
        float _1594 = _1517 * 0.5;
        float _1595 = _1527 * 0.5;
        float _1596 = _1537 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_813, _814, _815), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _4197 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1621 + 1.0))) + _1626) * _1550;
        float _1636 = _1518 * 0.5;
        float _1637 = _1528 * 0.5;
        float _1638 = _1538 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_813, _814, _815), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4230 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1663 + 1.0))) + _1668) * _1551;
        _1685 = _1518;
        _1686 = _1517;
        _1687 = _1516;
        _1688 = _1528;
        _1689 = _1527;
        _1690 = _1526;
        _1691 = _1538;
        _1692 = _1537;
        _1693 = _1536;
        _1694 = _1551;
        _1695 = _1550;
        _1696 = _1549;
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    }
    else
    {
        _1685 = _1374;
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = _1374;
        _1695 = _1374;
        _1696 = _1374;
        _1697 = 0.0;
        _1698 = 0.0;
        _1699 = 0.0;
    }
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1386)) + _1386;
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1387)) + _1387;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1732 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1735 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1738 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1709));
    float _1753 = _983 * 0.5;
    float _1754 = _984 * 0.5;
    float _1755 = _985 * 0.5;
    float _1756 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1759 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1762 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1796;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1769 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1773 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1777 = dot(vec4(_1753, _1754, _1755, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1784 = dot(vec4(cbModelParam._m0[39u]), vec4(_1753, _1754, _1755, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1784) ? 0.0 : (isnan(0.0) ? _1784 : max(0.0, _1784))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1807;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1798 = dot(vec4(cbModelParam._m0[40u]), vec4(_1753, _1754, _1755, 1.0));
        _1807 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1798) ? 0.0 : (isnan(0.0) ? _1798 : max(0.0, _1798))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1807 = 1.0;
    }
    float _1811 = (_1807 * cbModelParam._m0[1u].x) + (_1796 * (1.0 - cbModelParam._m0[1u].x));
    float _1821 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _816);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1821 : min(cbModelParam._m0[25u].z, _1821));
    float _1902;
    float _1904;
    float _1906;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1869 = fma(_1044, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036)) + cbModelParam._m0[13u].w;
        float _1873 = fma(_1044, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036)) + cbModelParam._m0[14u].w;
        float _1877 = fma(_1044, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036)) + cbModelParam._m0[15u].w;
        float _1880 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1883 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1886 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1914;
        if (_1880 > 0.0)
        {
            _1914 = abs((1.0 - _1869) / _1880);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1869 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1914 = frontier_phi_17_15_ladder;
        }
        float _2135;
        if (_1883 > 0.0)
        {
            _2135 = abs((1.0 - _1873) / _1883);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1873 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2135 = frontier_phi_26_22_ladder;
        }
        float _2381;
        if (_1886 > 0.0)
        {
            _2381 = abs((1.0 - _1877) / _1886);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1877 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2381 = frontier_phi_38_33_ladder;
        }
        float _2383 = isnan(_2135) ? _1914 : (isnan(_1914) ? _2135 : min(_1914, _2135));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1880) + _1869;
        float _2389 = (_2384 * _1883) + _1873;
        float _2390 = (_2384 * _1886) + _1877;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2393 = (-1.0) - _2391;
        float _2395 = _2391 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2390 > _2395) || ((_2390 < _2393) || ((_2389 > _2395) || ((_2389 < _2393) || ((_2388 < _2393) || (_2388 > _2395))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1822);
            frontier_phi_16_38_ladder = _2514.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2514.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2514.x * cbModelParam._m0[1u].y;
        }
        _1902 = frontier_phi_16_38_ladder_2;
        _1904 = frontier_phi_16_38_ladder_1;
        _1906 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1822);
        _1902 = _1890.x * cbModelParam._m0[1u].y;
        _1904 = _1890.y * cbModelParam._m0[1u].y;
        _1906 = _1890.z * cbModelParam._m0[1u].y;
    }
    float _1910 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _816);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1910 : min(cbModelParam._m0[25u].w, _1910));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1044, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1044, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1044, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1978 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1981 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2140;
        if (_1975 > 0.0)
        {
            _2140 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2140 = frontier_phi_28_24_ladder;
        }
        float _2408;
        if (_1978 > 0.0)
        {
            _2408 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2408 = frontier_phi_40_35_ladder;
        }
        float _2613;
        if (_1981 > 0.0)
        {
            _2613 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2613 = frontier_phi_49_46_ladder;
        }
        float _2615 = isnan(_2408) ? _2140 : (isnan(_2140) ? _2408 : min(_2140, _2408));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1975) + _1964;
        float _2621 = (_2616 * _1978) + _1968;
        float _2622 = (_2616 * _1981) + _1972;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1911);
            frontier_phi_25_49_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_25_49_ladder_2;
        _2002 = frontier_phi_25_49_ladder_1;
        _2004 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1911);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2016 = ((((1.0 - _1004) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1004 * _991)) * _975;
    float _2017 = _2016 * ((cbModelParam._m0[1u].w * (_2000 - _1902)) + _1902);
    float _2018 = _2016 * ((cbModelParam._m0[1u].w * (_2002 - _1904)) + _1904);
    float _2019 = _2016 * ((cbModelParam._m0[1u].w * (_2004 - _1906)) + _1906);
    float _2022 = fma(_2019, cbSceneParam._m0[89u].z, fma(_2018, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2025 = fma(_2019, cbSceneParam._m0[90u].z, fma(_2018, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2028 = fma(_2019, cbSceneParam._m0[91u].z, fma(_2018, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    vec4 _2036 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_912, _913));
    float _2038 = _2036.w;
    float _2050 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2038);
    float _2051 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2038);
    float _2052 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2038);
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _975 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2094 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2098 = _2058 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_813, _814, _815));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_813, _814, _815));
    float _4366 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4377 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2050) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2051) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2052) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2145;
    float _2147;
    float _2149;
    if (_2134)
    {
        _2145 = _2126;
        _2147 = _2127;
        _2149 = _2128;
    }
    else
    {
        uint _2153 = _2058 + 6u;
        float _2169 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4388 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _2172 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2145 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _2126;
        _2147 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _2127;
        _2149 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _2128;
    }
    bool _2152 = _2132.y == 0u;
    float _2190;
    float _2192;
    float _2194;
    if (_2152)
    {
        _2190 = _2145;
        _2192 = _2147;
        _2194 = _2149;
    }
    else
    {
        uint _2352 = _2058 + 7u;
        float _2368 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_813, _814, _815)) * 0.5) + 0.5;
        float _2369 = _2368 * _2368;
        float _4404 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2370 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2371 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2190 = (((cbLight._m0[_2352].x * 0.3183098733425140380859375) * _2370) * _2371) + _2145;
        _2192 = (((cbLight._m0[_2352].y * 0.3183098733425140380859375) * _2370) * _2371) + _2147;
        _2194 = (((cbLight._m0[_2352].z * 0.3183098733425140380859375) * _2370) * _2371) + _2149;
    }
    uint _2197 = _2058 + 8u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _816) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2058].x + _892;
    float _2213 = cbLight._m0[_2058].y + _893;
    float _2214 = cbLight._m0[_2058].z + _894;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2058].xyz));
    float _4420 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _4431 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2226 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2227 = dot(vec3(_813, _814, _815), vec3(_2219, _2220, _2221));
    float _4442 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2219, _2220, _2221));
    float _4453 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2211 * _2211;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2250 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2251 = 1.0 - _2211;
    float _2262 = (0.5 / (((_2226 * ((_2225 * _2251) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2251) + _2211) * _2225))) * _2225;
    float _4464 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    uint _2278 = _2058 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _816) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2098].x + _892;
    float _2292 = cbLight._m0[_2098].y + _893;
    float _2293 = cbLight._m0[_2098].z + _894;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2098].xyz));
    float _4475 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2305 = dot(vec3(_813, _814, _815), vec3(_2298, _2299, _2300));
    float _4486 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2298, _2299, _2300));
    float _4497 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2327 = 1.0 - _2290;
    float _2337 = (0.5 / (((_2226 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2327) + _2290) * _2304))) * _2304;
    float _4508 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2339 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2349 = (((_2326 * cbLight._m0[_2278].x) * _2339) * _2081) + ((((cbLight._m0[_2197].x * _2050) * _2250) * _2264) * _2094);
    float _2350 = (((_2326 * cbLight._m0[_2278].y) * _2339) * _2081) + ((((cbLight._m0[_2197].y * _2051) * _2250) * _2264) * _2094);
    float _2351 = (((_2326 * cbLight._m0[_2278].z) * _2339) * _2081) + ((((cbLight._m0[_2197].z * _2052) * _2250) * _2264) * _2094);
    float _2413;
    float _2415;
    float _2417;
    if (_2134)
    {
        _2413 = _2349;
        _2415 = _2350;
        _2417 = _2351;
    }
    else
    {
        uint _2419 = _2058 + 2u;
        uint _2423 = _2058 + 10u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _816) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _892;
        float _2440 = cbLight._m0[_2419].y + _893;
        float _2441 = cbLight._m0[_2419].z + _894;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2419].xyz));
        float _4519 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2453 = dot(vec3(_813, _814, _815), vec3(_2446, _2447, _2448));
        float _4530 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4541 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2474 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2475 = 1.0 - _2438;
        float _2485 = (0.5 / (((_2226 * ((_2452 * _2475) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2475) + _2438) * _2452))) * _2452;
        float _4552 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2413 = (((_2474 * cbLight._m0[_2423].x) * _2487) * _2488) + _2349;
        _2415 = (((_2474 * cbLight._m0[_2423].y) * _2487) * _2488) + _2350;
        _2417 = (((_2474 * cbLight._m0[_2423].z) * _2487) * _2488) + _2351;
    }
    float _2523;
    float _2525;
    float _2527;
    if (_2152)
    {
        _2523 = _2413;
        _2525 = _2415;
        _2527 = _2417;
    }
    else
    {
        uint _2534 = _2058 + 3u;
        uint _2538 = _2058 + 11u;
        float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2534].w)) * _816) * 0.949999988079071044921875);
        float _2553 = _2552 * _2552;
        float _2554 = cbLight._m0[_2534].x + _892;
        float _2555 = cbLight._m0[_2534].y + _893;
        float _2556 = cbLight._m0[_2534].z + _894;
        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
        float _2561 = _2560 * _2554;
        float _2562 = _2560 * _2555;
        float _2563 = _2560 * _2556;
        float _2564 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2534].xyz));
        float _4568 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2568 = dot(vec3(_813, _814, _815), vec3(_2561, _2562, _2563));
        float _4579 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2571 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _2572 = dot(vec3(cbLight._m0[_2534].xyz), vec3(_2561, _2562, _2563));
        float _4590 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2576 = _2553 * _2553;
        float _2580 = ((_2571 * _2571) * (_2576 + (-1.0))) + 1.0;
        float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2590 = 1.0 - _2553;
        float _2600 = (0.5 / (((_2226 * ((_2567 * _2590) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2226 * _2590) + _2553) * _2567))) * _2567;
        float _4601 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2576 / ((_2580 * _2580) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2523 = (((_2589 * cbLight._m0[_2538].x) * _2602) * _2603) + _2413;
        _2525 = (((_2589 * cbLight._m0[_2538].y) * _2602) * _2603) + _2415;
        _2527 = (((_2589 * cbLight._m0[_2538].z) * _2602) * _2603) + _2417;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2056.y == 0u)
    {
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2678;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2678;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2678;
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.x;
        uint _2705 = uint((float(_2693.y) * floor(float(uint(cbSceneParam._m0[85u].y * _913) / _2694))) + floor(float(uint(cbSceneParam._m0[85u].x * _912) / _2694)));
        float _2715 = (log2(_2681 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2716 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        uint _2719 = uint(isnan(14.0) ? _2716 : (isnan(_2716) ? 14.0 : min(_2716, 14.0)));
        uvec4 _2724 = texelFetch(g_lightClusterGridBuffer, int(((_2719 << 2u) + (_2705 << 6u)) >> 2u));
        uint _2725 = _2724.x;
        uint _2726 = _2693.z;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((((1u << ((_2726 >> 4u) & 15u)) + 4294967295u) & _2725) == 0u) || ((_2726 & 240u) == 0u))
        {
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
        }
        else
        {
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2995)
                {
                    frontier_phi_66_pred = _2979;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2994;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_2985 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _2679;
                        float _3191 = _3150.y - _2680;
                        float _3192 = _3150.z - _2681;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_931, _934, _937), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4627 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _2679;
                        float _3226 = (-0.0) - _2680;
                        float _3227 = (-0.0) - _2681;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3242 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _991;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_931, _934, _937), vec3(_3232, _3233, _3234));
                        float _4643 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3267 = dot(vec3(_931, _934, _937), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4654 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3210 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3200) + _3276;
                        float _4665 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4676 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) / ((_3274 * _3274) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3054 = (_3221 * _3169.x) + _3127;
                        _3055 = (_3221 * _3169.y) + _3128;
                        _3056 = (_3221 * _3169.z) + _3129;
                        _3051 = (_3302 * _3186.x) + _3124;
                        _3052 = (_3302 * _3186.y) + _3125;
                        _3053 = (_3302 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_66_pred = _3051;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                _2827 = frontier_phi_66_pred;
                _2837 = frontier_phi_66_pred_1;
                _2835 = frontier_phi_66_pred_2;
                _2833 = frontier_phi_66_pred_3;
                _2831 = frontier_phi_66_pred_4;
                _2829 = frontier_phi_66_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2827;
                    _2980 = _2829;
                    _2981 = _2831;
                    _2982 = _2833;
                    _2983 = _2835;
                    _2984 = _2837;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
        }
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.z;
        uint _2843 = (_2841 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2843) & _2725) == 0u)
        {
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
            float _2973 = _2972 * _2679;
            float _2974 = _2972 * _2680;
            float _2975 = _2972 * _2681;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2843 < ((_2841 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3107 = _2826;
                float _3108 = _2828;
                float _3109 = _2830;
                float _3110 = _2832;
                float _3111 = _2834;
                float _3112 = _2836;
                uint _3113 = _2843;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3123)
                    {
                        frontier_phi_77_pred = _3112;
                        frontier_phi_77_pred_1 = _3111;
                        frontier_phi_77_pred_2 = _3110;
                        frontier_phi_77_pred_3 = _3109;
                        frontier_phi_77_pred_4 = _3108;
                        frontier_phi_77_pred_5 = _3107;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        uint _3335 = _3122;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3346 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3346 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3346 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_2681, _3453.z, fma(_2680, _3453.y, _3453.x * _2679)) + _3453.w;
                            _3466 = !((fma(_2681, _3434.z, fma(_2680, _3434.y, _3434.x * _2679)) + _3434.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3466)
                            {
                                float _3493 = _3361.x - _2679;
                                float _3494 = _3361.y - _2680;
                                float _3495 = _3361.z - _2681;
                                float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                                float _3499 = inversesqrt(_3496);
                                float _3500 = _3499 * _3493;
                                float _3501 = _3499 * _3494;
                                float _3502 = _3499 * _3495;
                                float _3506 = 1.0 - (_3496 / (_3362 * _3362));
                                float _4687 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3511 = sqrt(_3496) * _3377.w;
                                float _3513 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                                float _3514 = _3513 * _3513;
                                float _3517 = ((1.0 - _3514) * dot(vec3(_3500, _3501, _3502), vec3(_931, _934, _937))) + _3514;
                                float _3520 = _3511 * _3511;
                                float _3524 = (fma(_2681, _3404.z, fma(_2680, _3404.y, _3404.x * _2679)) + _3404.w) / _3465;
                                float _3525 = (fma(_2681, _3419.z, fma(_2680, _3419.y, _3419.x * _2679)) + _3419.w) / _3465;
                                float _3529 = 1.0 - dot(vec2(_3524, _3525), vec2(_3524, _3525));
                                float _4703 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3531 = _3530 * (((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3507) / ((_3520 * 0.699999988079071044921875) + 1.0));
                                float _3543 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                                float _3544 = 1.0 - _991;
                                float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                                float _3552 = _3551 * _3551;
                                float _3553 = _3552 * _3552;
                                float _3554 = _3500 - _2973;
                                float _3555 = _3501 - _2974;
                                float _3556 = _3502 - _2975;
                                float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                                float _3564 = dot(vec3(_931, _934, _937), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4714 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3568 = dot(vec3(_931, _934, _937), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                                float _4725 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                                float _3576 = _3513 * _3552;
                                float _3577 = _3576 * _3576;
                                float _3583 = ((1.0 - _3577) * dot(vec3(_931, _934, _937), vec3(_3500, _3501, _3502))) + _3577;
                                float _4736 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3585 = 1.0 - _3552;
                                float _3595 = (0.5 / (((_3584 * ((_3567 * _3585) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3552) * _3567))) * _3584;
                                float _4747 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3605 = (_3530 * _3507) * (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) / ((_3575 * _3575) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3531 * _3377.y;
                                frontier_phi_83_pred_1 = _3531 * _3377.x;
                                frontier_phi_83_pred_2 = _3605 * _3389.z;
                                frontier_phi_83_pred_3 = _3605 * _3389.y;
                                frontier_phi_83_pred_4 = _3605 * _3389.x;
                                frontier_phi_83_pred_5 = _3531 * _3377.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3613 = frontier_phi_83_pred;
                            _3612 = frontier_phi_83_pred_1;
                            _3611 = frontier_phi_83_pred_2;
                            _3610 = frontier_phi_83_pred_3;
                            _3609 = frontier_phi_83_pred_4;
                            _3614 = frontier_phi_83_pred_5;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3321;
                        frontier_phi_77_pred_1 = _3320;
                        frontier_phi_77_pred_2 = _3319;
                        frontier_phi_77_pred_3 = _3318;
                        frontier_phi_77_pred_4 = _3317;
                        frontier_phi_77_pred_5 = _3316;
                    }
                    _2958 = frontier_phi_77_pred;
                    _2956 = frontier_phi_77_pred_1;
                    _2954 = frontier_phi_77_pred_2;
                    _2952 = frontier_phi_77_pred_3;
                    _2950 = frontier_phi_77_pred_4;
                    _2948 = frontier_phi_77_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2948;
                        _3108 = _2950;
                        _3109 = _2952;
                        _3110 = _2954;
                        _3111 = _2956;
                        _3112 = _2958;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2952;
                frontier_phi_58_59_ladder_1 = _2958;
                frontier_phi_58_59_ladder_2 = _2956;
                frontier_phi_58_59_ladder_3 = _2954;
                frontier_phi_58_59_ladder_4 = _2950;
                frontier_phi_58_59_ladder_5 = _2948;
            }
            else
            {
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            _2947 = frontier_phi_58_59_ladder_5;
            _2949 = frontier_phi_58_59_ladder_4;
            _2951 = frontier_phi_58_59_ladder;
            _2953 = frontier_phi_58_59_ladder_3;
            _2955 = frontier_phi_58_59_ladder_2;
            _2957 = frontier_phi_58_59_ladder_1;
        }
        float _2962 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _2738 = (_2962 * _2953) + _2190;
        _2740 = (_2962 * _2955) + _2192;
        _2742 = (_2962 * _2957) + _2194;
        _2744 = ((_2947 * 0.039999999105930328369140625) * _2962) + _2523;
        _2746 = ((_2949 * 0.039999999105930328369140625) * _2962) + _2525;
        _2748 = ((_2951 * 0.039999999105930328369140625) * _2962) + _2527;
    }
    else
    {
        _2738 = _2190;
        _2740 = _2192;
        _2742 = _2194;
        _2744 = _2523;
        _2746 = _2525;
        _2748 = _2527;
    }
    float _4763 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4774 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4785 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2765 = ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2738 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _975))) + ((_2744 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    float _2766 = ((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2740 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _975))) + ((_2746 + ((isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2742 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _975))) + ((_2748 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1811)) * cbPerFrame._m0[3u].x);
    uint _2768 = _281 + 6u;
    float _2776 = _912 / cbSceneParam._m0[86u].x;
    float _2777 = _913 / cbSceneParam._m0[86u].y;
    vec4 _2791 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2793 = _2791.x;
    float _2794 = _2791.y;
    float _2795 = _2791.z;
    float _2796 = _2791.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _2851 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _2852 = _2851 / _834;
        float _2863 = _2852 * _885;
        float _2864 = _886 * _2852;
        float _2865 = (-0.0) - _2864;
        float _2867 = _2852 * _887;
        float _2869 = (cbSceneParam._m0[77u].w * _2865) / _2851;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2864;
        float _2877 = sqrt(((_2863 * _2863) + (_2864 * _2864)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2851)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2865 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3010 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3064 = ((abs(_2877 / _2865) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2887 * _3019) - exp2(_2887 * _3020)) * _3008))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2796);
        _2889 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2793;
        _2891 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2794;
        _2893 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2795;
        _2895 = _3075 * _2796;
    }
    else
    {
        _2889 = _2793;
        _2891 = _2794;
        _2893 = _2795;
        _2895 = _2796;
    }
    bool _3102;
    vec4 _2905;
    vec4 _2927;
    float _2929;
    float _2933;
    float _2934;
    float _2935;
    float _2936;
    bool _2946;
    for (;;)
    {
        _2905 = cbMatDynParam._m0[0u];
        float _2907 = roundEven(_2905.y);
        bool _2908 = _2907 == 3.0;
        float _2909 = log2(_2895);
        float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * _2765;
        float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * _2766;
        float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * _2767;
        float _2925 = _901 + (-0.5);
        _2927 = cbMtdParam._m0[1u];
        _2929 = _2927.y * _2925;
        float _2932 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2933 = _2932 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = _2932 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
        _2935 = _2932 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
        _2936 = _2925 * 0.999000012874603271484375;
        _2946 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2946)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _2936) < 0.5)
            {
                _3102 = true;
                break;
            }
        }
        uint _3043 = _950 + uint(_2905.w);
        if ((cbInstanceData._m0[_3043].w < 1.0) && ((cbInstanceData._m0[_3043].w + _2936) < 0.5))
        {
            _3102 = true;
            break;
        }
        if ((_2929 + 1.0) < _2927.x)
        {
            _3102 = true;
            break;
        }
        _3102 = false;
        break;
    }
    float _3307;
    if (_3102)
    {
        discard_state = true;
        _3307 = 0.0;
    }
    else
    {
        _3307 = cbInstanceData._m0[_2768].w;
    }
    SV_Target.x = _2933;
    SV_Target.y = _2934;
    SV_Target.z = _2935;
    SV_Target.w = _3307;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2768].w;
    discard_exit();
}


