#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1265;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3593 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _382) + _451;
    float _463 = ((((_430.x - _449) * _382) + _449) * 2.0) + (-1.0);
    float _465 = ((((_430.y - _450) * _382) + _450) * 2.0) + (-1.0);
    float _466 = dot(vec2(_463, _465), vec2(_463, _465));
    float _3604 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _471 = sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))));
    float _474 = fma(_471, _235, fma(_465, _242, _463 * _228));
    float _477 = fma(_471, _236, fma(_465, _243, _463 * _229));
    float _480 = fma(_471, _237, fma(_465, _244, _463 * _230));
    float _484 = inversesqrt(dot(vec3(_474, _477, _480), vec3(_474, _477, _480)));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _535 = ((_530 - _531) * cbMtdParam._m0[24u].z) + _531;
    float _537 = (cbMtdParam._m0[19u].x + dot(vec4(_484 * _474, _484 * _477, _484 * _480, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_535 * cbMtdParam._m0[21u].z);
    float _3615 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _540 = (-0.0) - cbMtdParam._m0[24u].y;
    float _542 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _542 : (isnan(_542) ? 1.0 : min(_542, 1.0));
    float _550 = _538 - ((_538 * TEXCOORD_8.x) * _543);
    float _551 = _538 - ((_538 * TEXCOORD_8.y) * _543);
    float _552 = _538 - ((_538 * TEXCOORD_8.z) * _543);
    float _559 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _563 = ((isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : min(_559, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _571 = (_563 - (((_535 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _563))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3646 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _576 = ((_550 * ((_410.x * cbMtdParam._m0[18u].x) - _389)) * _572) + _389;
    float _577 = ((_551 * ((_410.y * cbMtdParam._m0[18u].y) - _390)) * _572) + _390;
    float _578 = ((_552 * ((_410.z * cbMtdParam._m0[18u].z) - _391)) * _572) + _391;
    vec4 _590 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _592 = _590.x;
    float _593 = 1.0 - _592;
    float _620 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_592 - _593) * cbMtdParam._m0[24u].w) + _593) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3657 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _629 = ((((cbMtdParam._m0[10u].x - _576) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _621) + _576;
    float _630 = ((((cbMtdParam._m0[10u].y - _577) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _621) + _577;
    float _631 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _578)) * _621) + _578;
    vec4 _645 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _652 = (_645.x * 2.0) + (-1.0);
    float _653 = (_645.y * 2.0) + (-1.0);
    float _654 = dot(vec2(_652, _653), vec2(_652, _653));
    float _3668 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _663 = (((_645.z - _460) * _550) * _572) + _460;
    float _666 = ((cbMtdParam._m0[23u].y - _663) * _621) + _663;
    vec4 _685 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _691 = (_685.x * 2.0) + (-1.0);
    float _692 = (_685.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3679 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _713 = (((cbMtdParam._m0[21u].x * _463) + ((_652 - _463) * _550)) * _572) + _463;
    float _714 = (((cbMtdParam._m0[21u].x * _465) + ((_653 - _465) * _551)) * _572) + _465;
    float _715 = (((sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) - _471) * _552) * _572) + _471;
    float _726 = (((_691 - _713) + (_713 * cbMtdParam._m0[22u].z)) * _621) + _713;
    float _727 = (((_692 - _714) + (_714 * cbMtdParam._m0[22u].z)) * _621) + _714;
    float _728 = ((sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0)))) - _715) * _621) + _715;
    float _730 = cbMtdParam._m0[22u].x + _500.w;
    float _733 = fma(_728, _235, fma(_727, _242, _726 * _228));
    float _736 = fma(_728, _236, fma(_727, _243, _726 * _229));
    float _739 = fma(_728, _237, fma(_727, _244, _726 * _230));
    float _743 = inversesqrt(dot(vec3(_733, _736, _739), vec3(_733, _736, _739)));
    float _744 = _743 * _733;
    float _745 = _743 * _736;
    float _746 = _743 * _739;
    float _3690 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _747 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3712 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3723 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3734 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _765 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _816 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _806);
    float _817 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _806);
    float _818 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _806);
    float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
    float _823 = _816 * _822;
    float _824 = _817 * _822;
    float _825 = _818 * _822;
    float _831 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _832 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _850 = fma(_746, cbSceneParam._m0[5u].z, fma(_745, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _744));
    float _853 = fma(_746, cbSceneParam._m0[6u].z, fma(_745, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _744));
    float _856 = fma(_746, cbSceneParam._m0[7u].z, fma(_745, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _744));
    uint _870 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _876 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_870].x;
    float _877 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_870].y;
    float _878 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_870].z;
    float _3745 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    vec4 _890 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _831, cbSceneParam._m0[86u].y * _832));
    float _894 = ((isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * TEXCOORD_5.w) * _890.x;
    float _895 = dot(vec3(_744, _745, _746), vec3(_823, _824, _825));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _744) - _823;
    float _903 = (_898 * _745) - _824;
    float _904 = (_898 * _746) - _825;
    float _908 = abs(dot(vec3(_823, _824, _825), vec3(_744, _745, _746)));
    float _3778 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_747);
    float _923 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1264;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _989 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _993 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _997 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1022 = _955 + _744;
        float _1023 = _959 + _745;
        float _1024 = _963 + _746;
        float _1034 = fma(_1024, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022)) - _989;
        float _1035 = fma(_1024, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022)) - _993;
        float _1036 = fma(_1024, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022)) - _997;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_989 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_993 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[34u].z) + ((((((_997 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1092 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1058.x + (-0.5));
        float _1094 = _1092 * (_1058.y + (-0.5));
        float _1095 = _1092 * (_1058.z + (-0.5));
        float _1102 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1065.x + (-0.5));
        float _1104 = _1102 * (_1065.y + (-0.5));
        float _1105 = _1102 * (_1065.z + (-0.5));
        float _1112 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1072.x + (-0.5));
        float _1114 = _1112 * (_1072.y + (-0.5));
        float _1115 = _1112 * (_1072.z + (-0.5));
        float _1122 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1079.x + (-0.5));
        float _1124 = _1122 * (_1079.y + (-0.5));
        float _1125 = _1122 * (_1079.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1146 = (dot(vec3(_744, _745, _746), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1156 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3826 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1158 + 1.0))) + _1163) * _1126;
        float _1173 = _1094 * 0.5;
        float _1174 = _1104 * 0.5;
        float _1175 = _1114 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_744, _745, _746), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3859 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1200 + 1.0))) + _1205) * _1127;
        float _1215 = _1095 * 0.5;
        float _1216 = _1105 * 0.5;
        float _1217 = _1115 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_744, _745, _746), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3892 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1242 + 1.0))) + _1247) * _1128;
        _1264 = _1095;
        _1266 = _1094;
        _1267 = _1093;
        _1268 = _1105;
        _1269 = _1104;
        _1270 = _1103;
        _1271 = _1115;
        _1272 = _1114;
        _1273 = _1113;
        _1274 = _1128;
        _1275 = _1127;
        _1276 = _1126;
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _1265;
        _1266 = _1265;
        _1267 = _1265;
        _1268 = _1265;
        _1269 = _1265;
        _1270 = _1265;
        _1271 = _1265;
        _1272 = _1265;
        _1273 = _1265;
        _1274 = _1265;
        _1275 = _1265;
        _1276 = _1265;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1304 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1308 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1312 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1335 = _955 + _744;
        float _1336 = _959 + _745;
        float _1337 = _963 + _746;
        float _1347 = fma(_1337, cbModelParam._m0[30u].z, fma(_1336, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1335)) - _1304;
        float _1348 = fma(_1337, cbModelParam._m0[31u].z, fma(_1336, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1335)) - _1308;
        float _1349 = fma(_1337, cbModelParam._m0[32u].z, fma(_1336, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1335)) - _1312;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1304 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1308 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[35u].z) + ((((((_1312 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1403 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1370.x + (-0.5));
        float _1405 = _1403 * (_1370.y + (-0.5));
        float _1406 = _1403 * (_1370.z + (-0.5));
        float _1413 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1377.x + (-0.5));
        float _1415 = _1413 * (_1377.y + (-0.5));
        float _1416 = _1413 * (_1377.z + (-0.5));
        float _1423 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1384.x + (-0.5));
        float _1425 = _1423 * (_1384.y + (-0.5));
        float _1426 = _1423 * (_1384.z + (-0.5));
        float _1433 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1391.x + (-0.5));
        float _1435 = _1433 * (_1391.y + (-0.5));
        float _1436 = _1433 * (_1391.z + (-0.5));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = _1404 * 0.5;
        float _1441 = _1414 * 0.5;
        float _1442 = _1424 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_744, _745, _746), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3933 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3944 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3955 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1467 + 1.0))) + _1472) * _1437;
        float _1482 = _1405 * 0.5;
        float _1483 = _1415 * 0.5;
        float _1484 = _1425 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_744, _745, _746), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _3988 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1509 + 1.0))) + _1514) * _1438;
        float _1524 = _1406 * 0.5;
        float _1525 = _1416 * 0.5;
        float _1526 = _1426 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_744, _745, _746), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4021 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1551 + 1.0))) + _1556) * _1439;
        _1573 = _1406;
        _1574 = _1405;
        _1575 = _1404;
        _1576 = _1416;
        _1577 = _1415;
        _1578 = _1414;
        _1579 = _1426;
        _1580 = _1425;
        _1581 = _1424;
        _1582 = _1439;
        _1583 = _1438;
        _1584 = _1437;
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
    }
    else
    {
        _1573 = _1265;
        _1574 = _1265;
        _1575 = _1265;
        _1576 = _1265;
        _1577 = _1265;
        _1578 = _1265;
        _1579 = _1265;
        _1580 = _1265;
        _1581 = _1265;
        _1582 = _1265;
        _1583 = _1265;
        _1584 = _1265;
        _1585 = 0.0;
        _1586 = 0.0;
        _1587 = 0.0;
    }
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1278)) + _1278;
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1279)) + _1279;
    float _1620 = fma(_1599, cbSceneParam._m0[89u].z, fma(_1598, cbSceneParam._m0[89u].y, _1597 * cbSceneParam._m0[89u].x));
    float _1623 = fma(_1599, cbSceneParam._m0[90u].z, fma(_1598, cbSceneParam._m0[90u].y, _1597 * cbSceneParam._m0[90u].x));
    float _1626 = fma(_1599, cbSceneParam._m0[91u].z, fma(_1598, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1597));
    float _1641 = _902 * 0.5;
    float _1642 = _903 * 0.5;
    float _1643 = _904 * 0.5;
    float _1644 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1647 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1650 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1684;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1657 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1264, _1268, _1271, _1274));
        float _1661 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1665 = dot(vec4(_1641, _1642, _1643, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1672 = dot(vec4(cbModelParam._m0[39u]), vec4(_1641, _1642, _1643, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1672) ? 0.0 : (isnan(0.0) ? _1672 : max(0.0, _1672))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1695;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1686 = dot(vec4(cbModelParam._m0[40u]), vec4(_1641, _1642, _1643, 1.0));
        _1695 = dot(vec3(isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1686) ? 0.0 : (isnan(0.0) ? _1686 : max(0.0, _1686))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1695 = 1.0;
    }
    float _1699 = (_1695 * cbModelParam._m0[1u].x) + (_1684 * (1.0 - cbModelParam._m0[1u].x));
    float _1709 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _747);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1709 : min(cbModelParam._m0[25u].z, _1709));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1757 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1761 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1765 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1768 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1771 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1774 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1802;
        if (_1768 > 0.0)
        {
            _1802 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1802 = frontier_phi_14_12_ladder;
        }
        float _2023;
        if (_1771 > 0.0)
        {
            _2023 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2023 = frontier_phi_23_19_ladder;
        }
        float _2269;
        if (_1774 > 0.0)
        {
            _2269 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2269 = frontier_phi_35_30_ladder;
        }
        float _2271 = isnan(_2023) ? _1802 : (isnan(_1802) ? _2023 : min(_1802, _2023));
        float _2272 = isnan(_2269) ? _2271 : (isnan(_2271) ? _2269 : min(_2271, _2269));
        float _2276 = (_2272 * _1768) + _1757;
        float _2277 = (_2272 * _1771) + _1761;
        float _2278 = (_2272 * _1774) + _1765;
        float _2279 = _2272 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2279;
        float _2283 = _2279 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 > _2283) || ((_2277 < _2281) || ((_2276 < _2281) || (_2276 > _2283))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2278, cbModelParam._m0[9u].z, fma(_2277, cbModelParam._m0[9u].y, _2276 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2278, cbModelParam._m0[10u].z, fma(_2277, cbModelParam._m0[10u].y, _2276 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2278, cbModelParam._m0[11u].z, fma(_2277, cbModelParam._m0[11u].y, _2276 * cbModelParam._m0[11u].x))), _1710);
            frontier_phi_13_35_ladder = _2402.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2402.x * cbModelParam._m0[1u].y;
        }
        _1790 = frontier_phi_13_35_ladder_2;
        _1792 = frontier_phi_13_35_ladder_1;
        _1794 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1710);
        _1790 = _1778.x * cbModelParam._m0[1u].y;
        _1792 = _1778.y * cbModelParam._m0[1u].y;
        _1794 = _1778.z * cbModelParam._m0[1u].y;
    }
    float _1798 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _747);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1798 : min(cbModelParam._m0[25u].w, _1798));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1866 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1869 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _2028;
        if (_1863 > 0.0)
        {
            _2028 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2028 = frontier_phi_25_21_ladder;
        }
        float _2296;
        if (_1866 > 0.0)
        {
            _2296 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2296 = frontier_phi_37_32_ladder;
        }
        float _2501;
        if (_1869 > 0.0)
        {
            _2501 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2501 = frontier_phi_46_43_ladder;
        }
        float _2503 = isnan(_2296) ? _2028 : (isnan(_2028) ? _2296 : min(_2028, _2296));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1863) + _1852;
        float _2509 = (_2504 * _1866) + _1856;
        float _2510 = (_2504 * _1869) + _1860;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2709 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1799);
            frontier_phi_22_46_ladder = _2709.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2709.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2709.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_22_46_ladder_2;
        _1890 = frontier_phi_22_46_ladder_1;
        _1892 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1799);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _923) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_923 * _910)) * _894;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1790)) + _1790);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1792)) + _1792);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    vec4 _1924 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_831, _832));
    float _1926 = _1924.w;
    float _1938 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1926);
    float _1939 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1926);
    float _1940 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1926);
    uvec4 _1944 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1946 = _1944.x * 14u;
    uint _1947 = _1946 + 13u;
    float _1954 = _894 + (-1.0);
    float _1959 = (cbLight._m0[_1947].x * _1954) + 1.0;
    float _1960 = (cbLight._m0[_1947].y * _1954) + 1.0;
    float _1961 = (cbLight._m0[_1947].z * _1954) + 1.0;
    float _1962 = (cbLight._m0[_1947].w * _1954) + 1.0;
    uint _1963 = _1946 + 5u;
    float _1969 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1973 = _1946 + 4u;
    float _1982 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1986 = _1946 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_744, _745, _746));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_744, _745, _746));
    float _4157 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4168 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1963].x * _1969) * _2007) + (((cbLight._m0[_1973].x * _1938) * _1982) * _2005);
    float _2015 = ((_1969 * cbLight._m0[_1963].y) * _2007) + (((cbLight._m0[_1973].y * _1939) * _1982) * _2005);
    float _2016 = ((_1969 * cbLight._m0[_1963].z) * _2007) + (((cbLight._m0[_1973].z * _1940) * _1982) * _2005);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1946 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2033;
    float _2035;
    float _2037;
    if (_2022)
    {
        _2033 = _2014;
        _2035 = _2015;
        _2037 = _2016;
    }
    else
    {
        uint _2041 = _1946 + 6u;
        float _2057 = (dot(vec3(cbLight._m0[_1946 + 2u].xyz), vec3(_744, _745, _746)) * 0.5) + 0.5;
        float _2058 = _2057 * _2057;
        float _4179 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2059 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _2060 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2033 = (((cbLight._m0[_2041].x * 0.3183098733425140380859375) * _2059) * _2060) + _2014;
        _2035 = (((cbLight._m0[_2041].y * 0.3183098733425140380859375) * _2059) * _2060) + _2015;
        _2037 = (((cbLight._m0[_2041].z * 0.3183098733425140380859375) * _2059) * _2060) + _2016;
    }
    bool _2040 = _2020.y == 0u;
    float _2078;
    float _2080;
    float _2082;
    if (_2040)
    {
        _2078 = _2033;
        _2080 = _2035;
        _2082 = _2037;
    }
    else
    {
        uint _2240 = _1946 + 7u;
        float _2256 = (dot(vec3(cbLight._m0[_1946 + 3u].xyz), vec3(_744, _745, _746)) * 0.5) + 0.5;
        float _2257 = _2256 * _2256;
        float _4195 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2258 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2259 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2078 = (((cbLight._m0[_2240].x * 0.3183098733425140380859375) * _2258) * _2259) + _2033;
        _2080 = (((cbLight._m0[_2240].y * 0.3183098733425140380859375) * _2258) * _2259) + _2035;
        _2082 = (((cbLight._m0[_2240].z * 0.3183098733425140380859375) * _2258) * _2259) + _2037;
    }
    uint _2085 = _1946 + 8u;
    float _2098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1946].w)) * _747) * 0.949999988079071044921875);
    float _2099 = _2098 * _2098;
    float _2100 = cbLight._m0[_1946].x + _823;
    float _2101 = cbLight._m0[_1946].y + _824;
    float _2102 = cbLight._m0[_1946].z + _825;
    float _2106 = inversesqrt(dot(vec3(_2100, _2101, _2102), vec3(_2100, _2101, _2102)));
    float _2107 = _2106 * _2100;
    float _2108 = _2106 * _2101;
    float _2109 = _2106 * _2102;
    float _2110 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_1946].xyz));
    float _4211 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2114 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2115 = dot(vec3(_744, _745, _746), vec3(_2107, _2108, _2109));
    float _4233 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _2119 = dot(vec3(cbLight._m0[_1946].xyz), vec3(_2107, _2108, _2109));
    float _4244 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = _2099 * _2099;
    float _2127 = ((_2118 * _2118) * (_2123 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2099;
    float _2150 = (0.5 / (((_2114 * ((_2113 * _2139) + _2099)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2139) + _2099) * _2113))) * _2113;
    float _4255 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2123 / ((_2127 * _2127) * 3.141590118408203125));
    uint _2166 = _1946 + 9u;
    float _2177 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _747) * 0.949999988079071044921875);
    float _2178 = _2177 * _2177;
    float _2179 = cbLight._m0[_1986].x + _823;
    float _2180 = cbLight._m0[_1986].y + _824;
    float _2181 = cbLight._m0[_1986].z + _825;
    float _2185 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
    float _2186 = _2185 * _2179;
    float _2187 = _2185 * _2180;
    float _2188 = _2185 * _2181;
    float _2189 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_1986].xyz));
    float _4266 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2192 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    float _2193 = dot(vec3(_744, _745, _746), vec3(_2186, _2187, _2188));
    float _4277 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2186, _2187, _2188));
    float _4288 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2178 * _2178;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2214 = (exp2(log2(1.0 - (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2215 = 1.0 - _2178;
    float _2225 = (0.5 / (((_2114 * ((_2192 * _2215) + _2178)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2215) + _2178) * _2192))) * _2192;
    float _4299 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2227 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    float _2237 = (((_2214 * cbLight._m0[_2166].x) * _2227) * _1969) + ((((cbLight._m0[_2085].x * _1938) * _2138) * _2152) * _1982);
    float _2238 = (((_2214 * cbLight._m0[_2166].y) * _2227) * _1969) + ((((cbLight._m0[_2085].y * _1939) * _2138) * _2152) * _1982);
    float _2239 = (((_2214 * cbLight._m0[_2166].z) * _2227) * _1969) + ((((cbLight._m0[_2085].z * _1940) * _2138) * _2152) * _1982);
    float _2301;
    float _2303;
    float _2305;
    if (_2022)
    {
        _2301 = _2237;
        _2303 = _2238;
        _2305 = _2239;
    }
    else
    {
        uint _2307 = _1946 + 2u;
        uint _2311 = _1946 + 10u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _747) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _823;
        float _2328 = cbLight._m0[_2307].y + _824;
        float _2329 = cbLight._m0[_2307].z + _825;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2307].xyz));
        float _4310 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2341 = dot(vec3(_744, _745, _746), vec3(_2334, _2335, _2336));
        float _4321 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4332 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2362 = (exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2363 = 1.0 - _2326;
        float _2373 = (0.5 / (((_2114 * ((_2340 * _2363) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2363) + _2326) * _2340))) * _2340;
        float _4343 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2375 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2376 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2301 = (((_2362 * cbLight._m0[_2311].x) * _2375) * _2376) + _2237;
        _2303 = (((_2362 * cbLight._m0[_2311].y) * _2375) * _2376) + _2238;
        _2305 = (((_2362 * cbLight._m0[_2311].z) * _2375) * _2376) + _2239;
    }
    float _2411;
    float _2413;
    float _2415;
    if (_2040)
    {
        _2411 = _2301;
        _2413 = _2303;
        _2415 = _2305;
    }
    else
    {
        uint _2422 = _1946 + 3u;
        uint _2426 = _1946 + 11u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _747) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _823;
        float _2443 = cbLight._m0[_2422].y + _824;
        float _2444 = cbLight._m0[_2422].z + _825;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_744, _745, _746), vec3(cbLight._m0[_2422].xyz));
        float _4359 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _2456 = dot(vec3(_744, _745, _746), vec3(_2449, _2450, _2451));
        float _4370 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4381 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2478 = 1.0 - _2441;
        float _2488 = (0.5 / (((_2114 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2114 * _2478) + _2441) * _2455))) * _2455;
        float _4392 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2411 = (((_2477 * cbLight._m0[_2426].x) * _2490) * _2491) + _2301;
        _2413 = (((_2477 * cbLight._m0[_2426].y) * _2490) * _2491) + _2303;
        _2415 = (((_2477 * cbLight._m0[_2426].z) * _2490) * _2491) + _2305;
    }
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_1944.y == 0u)
    {
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2567 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2566;
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2566;
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2566;
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.x;
        uint _2593 = uint((float(_2581.y) * floor(float(uint(cbSceneParam._m0[85u].y * _832) / _2582))) + floor(float(uint(cbSceneParam._m0[85u].x * _831) / _2582)));
        float _2603 = (log2(_2569 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2604 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        uint _2607 = uint(isnan(14.0) ? _2604 : (isnan(_2604) ? 14.0 : min(_2604, 14.0)));
        uvec4 _2612 = texelFetch(g_lightClusterGridBuffer, int(((_2607 << 2u) + (_2593 << 6u)) >> 2u));
        uint _2613 = _2612.x;
        uint _2614 = _2581.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2614 >> 4u) & 15u)) + 4294967295u) & _2613) == 0u) || ((_2614 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2858 = 0.0;
            float _2859 = 0.0;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            uint _2864 = 0u;
            uint _2873;
            bool _2874;
            for (;;)
            {
                _2873 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2864 << 2u)) >> 2u)).x;
                _2874 = _2873 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2874)
                {
                    frontier_phi_61_pred = _2858;
                    frontier_phi_61_pred_1 = _2863;
                    frontier_phi_61_pred_2 = _2862;
                    frontier_phi_61_pred_3 = _2861;
                    frontier_phi_61_pred_4 = _2860;
                    frontier_phi_61_pred_5 = _2859;
                }
                else
                {
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    float _2987;
                    uint _2988;
                    _2982 = _2858;
                    _2983 = _2859;
                    _2984 = _2860;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2873;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    for (;;)
                    {
                        uint _2992 = uint(findLSB(_2988)) + (_2864 << 5u);
                        uint _2989 = (_2988 + 4294967295u) & _2988;
                        uint _2994 = _2992 * 48u;
                        vec4 _3008 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2994)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2994 + 3u)).x));
                        uint _3014 = (_2992 * 48u) + 4u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3014)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3014 + 3u)).x));
                        uint _3033 = (_2992 * 48u) + 8u;
                        vec3 _3044 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x));
                        float _3048 = _3008.x - _2567;
                        float _3049 = _3008.y - _2568;
                        float _3050 = _3008.z - _2569;
                        float _3051 = dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050));
                        float _3054 = inversesqrt(_3051);
                        float _3055 = _3054 * _3048;
                        float _3056 = _3054 * _3049;
                        float _3057 = _3054 * _3050;
                        float _3058 = dot(vec3(_850, _853, _856), vec3(_3055, _3056, _3057));
                        float _3063 = 1.0 - (_3051 * _3008.w);
                        float _4418 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                        float _3065 = sqrt(_3051) * _3027.w;
                        float _3068 = 1.39999997615814208984375 / (_3065 + 1.39999997615814208984375);
                        float _3069 = _3068 * _3068;
                        float _3072 = ((1.0 - _3069) * _3058) + _3069;
                        float _3075 = _3065 * _3065;
                        float _3079 = ((isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0))) * _3064) / ((_3075 * 0.699999988079071044921875) + 1.0);
                        float _3083 = (-0.0) - _2567;
                        float _3084 = (-0.0) - _2568;
                        float _3085 = (-0.0) - _2569;
                        float _3089 = inversesqrt(dot(vec3(_3083, _3084, _3085), vec3(_3083, _3084, _3085)));
                        float _3090 = _3089 * _3083;
                        float _3091 = _3089 * _3084;
                        float _3092 = _3089 * _3085;
                        float _3100 = exp2(log2(1.0 / ((_3075 * 3.5) + 5.0)) * 0.25);
                        float _3101 = 1.0 - _910;
                        float _3108 = sqrt(1.0 - ((1.0 - (_3101 * _3101)) * (1.0 - (_3100 * _3100))));
                        float _3109 = _3108 * _3108;
                        float _3110 = _3109 * _3109;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3113 = _3092 + _3057;
                        float _3117 = inversesqrt(dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113)));
                        float _3121 = dot(vec3(_850, _853, _856), vec3(_3090, _3091, _3092));
                        float _4434 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                        float _3125 = dot(vec3(_850, _853, _856), vec3(_3117 * _3111, _3117 * _3112, _3117 * _3113));
                        float _4445 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                        float _3128 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _3132 = ((_3128 * _3128) * (_3110 + (-1.0))) + 1.0;
                        float _3133 = _3068 * _3109;
                        float _3134 = _3133 * _3133;
                        float _3137 = ((1.0 - _3134) * _3058) + _3134;
                        float _4456 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                        float _3138 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3139 = 1.0 - _3109;
                        float _3149 = (0.5 / (((_3138 * ((_3124 * _3139) + _3109)) + 9.9999999392252902907785028219223e-09) + (((_3138 * _3139) + _3109) * _3124))) * _3138;
                        float _4467 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3160 = (((_3110 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3132 * _3132) * ((_3075 * 2.1991131305694580078125) + 3.141590118408203125))) * _3064;
                        _2917 = (_3079 * _3027.x) + _2985;
                        _2918 = (_3079 * _3027.y) + _2986;
                        _2919 = (_3079 * _3027.z) + _2987;
                        _2914 = (_3160 * _3044.x) + _2982;
                        _2915 = (_3160 * _3044.y) + _2983;
                        _2916 = (_3160 * _3044.z) + _2984;
                        if (_2989 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2982 = _2914;
                            _2983 = _2915;
                            _2984 = _2916;
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2989;
                        }
                    }
                    frontier_phi_61_pred = _2914;
                    frontier_phi_61_pred_1 = _2919;
                    frontier_phi_61_pred_2 = _2918;
                    frontier_phi_61_pred_3 = _2917;
                    frontier_phi_61_pred_4 = _2916;
                    frontier_phi_61_pred_5 = _2915;
                }
                _2715 = frontier_phi_61_pred;
                _2725 = frontier_phi_61_pred_1;
                _2723 = frontier_phi_61_pred_2;
                _2721 = frontier_phi_61_pred_3;
                _2719 = frontier_phi_61_pred_4;
                _2717 = frontier_phi_61_pred_5;
                uint _2865 = _2864 + 1u;
                if (_2865 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2858 = _2715;
                    _2859 = _2717;
                    _2860 = _2719;
                    _2861 = _2721;
                    _2862 = _2723;
                    _2863 = _2725;
                    _2864 = _2865;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((4294967295u << _2731) & _2613) == 0u)
        {
            _2826 = _2714;
            _2828 = _2716;
            _2830 = _2718;
            _2832 = _2720;
            _2834 = _2722;
            _2836 = _2724;
        }
        else
        {
            float _2851 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
            float _2852 = _2851 * _2567;
            float _2853 = _2851 * _2568;
            float _2854 = _2851 * _2569;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2827;
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2965 = _2714;
                float _2966 = _2716;
                float _2967 = _2718;
                float _2968 = _2720;
                float _2969 = _2722;
                float _2970 = _2724;
                uint _2971 = _2731;
                uint _2980;
                bool _2981;
                for (;;)
                {
                    _2980 = texelFetch(g_lightClassification, int((((_2607 << 5u) + (_2593 << 9u)) + (_2971 << 2u)) >> 2u)).x;
                    _2981 = _2980 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2981)
                    {
                        frontier_phi_67_pred = _2968;
                        frontier_phi_67_pred_1 = _2969;
                        frontier_phi_67_pred_2 = _2970;
                        frontier_phi_67_pred_3 = _2967;
                        frontier_phi_67_pred_4 = _2966;
                        frontier_phi_67_pred_5 = _2965;
                    }
                    else
                    {
                        float _3165;
                        float _3166;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3178 = _2965;
                        float _3179 = _2966;
                        float _3180 = _2967;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        uint _3184 = _2980;
                        uint _3185;
                        vec4 _3210;
                        float _3211;
                        vec4 _3226;
                        vec3 _3238;
                        vec4 _3253;
                        vec4 _3269;
                        float _3315;
                        bool _3316;
                        for (;;)
                        {
                            uint _3195 = ((_2971 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3184));
                            _3185 = (_3184 + 4294967295u) & _3184;
                            uint _3197 = _3195 * 40u;
                            _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            _3211 = _3210.w;
                            uint _3213 = (_3195 * 40u) + 4u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3228 = (_3195 * 40u) + 8u;
                            _3238 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x));
                            uint _3240 = (_3195 * 40u) + 16u;
                            _3253 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3240)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3240 + 3u)).x));
                            uint _3256 = (_3195 * 40u) + 20u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3195 * 40u) + 24u;
                            vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3290 = (_3195 * 40u) + 28u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3315 = fma(_2569, _3303.z, fma(_2568, _3303.y, _3303.x * _2567)) + _3303.w;
                            _3316 = !((fma(_2569, _3284.z, fma(_2568, _3284.y, _3284.x * _2567)) + _3284.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3316)
                            {
                                float _3343 = _3210.x - _2567;
                                float _3344 = _3210.y - _2568;
                                float _3345 = _3210.z - _2569;
                                float _3346 = dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345));
                                float _3349 = inversesqrt(_3346);
                                float _3350 = _3349 * _3343;
                                float _3351 = _3349 * _3344;
                                float _3352 = _3349 * _3345;
                                float _3356 = 1.0 - (_3346 / (_3211 * _3211));
                                float _4478 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                                float _3361 = sqrt(_3346) * _3226.w;
                                float _3363 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                                float _3364 = _3363 * _3363;
                                float _3367 = ((1.0 - _3364) * dot(vec3(_3350, _3351, _3352), vec3(_850, _853, _856))) + _3364;
                                float _3370 = _3361 * _3361;
                                float _3374 = (fma(_2569, _3253.z, fma(_2568, _3253.y, _3253.x * _2567)) + _3253.w) / _3315;
                                float _3375 = (fma(_2569, _3269.z, fma(_2568, _3269.y, _3269.x * _2567)) + _3269.w) / _3315;
                                float _3379 = 1.0 - dot(vec2(_3374, _3375), vec2(_3374, _3375));
                                float _4494 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                                float _3381 = _3380 * (((isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0))) * _3357) / ((_3370 * 0.699999988079071044921875) + 1.0));
                                float _3393 = exp2(log2(1.0 / ((_3370 * 3.5) + 5.0)) * 0.25);
                                float _3394 = 1.0 - _910;
                                float _3401 = sqrt(1.0 - ((1.0 - (_3394 * _3394)) * (1.0 - (_3393 * _3393))));
                                float _3402 = _3401 * _3401;
                                float _3403 = _3402 * _3402;
                                float _3404 = _3350 - _2852;
                                float _3405 = _3351 - _2853;
                                float _3406 = _3352 - _2854;
                                float _3410 = inversesqrt(dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406)));
                                float _3414 = dot(vec3(_850, _853, _856), vec3((-0.0) - _2852, (-0.0) - _2853, (-0.0) - _2854));
                                float _4505 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                                float _3417 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                                float _3418 = dot(vec3(_850, _853, _856), vec3(_3410 * _3404, _3410 * _3405, _3410 * _3406));
                                float _4516 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3425 = ((_3421 * _3421) * (_3403 + (-1.0))) + 1.0;
                                float _3426 = _3363 * _3402;
                                float _3427 = _3426 * _3426;
                                float _3433 = ((1.0 - _3427) * dot(vec3(_850, _853, _856), vec3(_3350, _3351, _3352))) + _3427;
                                float _4527 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3435 = 1.0 - _3402;
                                float _3445 = (0.5 / (((_3434 * ((_3417 * _3435) + _3402)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3402) * _3417))) * _3434;
                                float _4538 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3455 = (_3380 * _3357) * (((_3403 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3425 * _3425) * ((_3370 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3455 * _3238.x;
                                frontier_phi_73_pred_1 = _3455 * _3238.y;
                                frontier_phi_73_pred_2 = _3381 * _3226.z;
                                frontier_phi_73_pred_3 = _3381 * _3226.y;
                                frontier_phi_73_pred_4 = _3381 * _3226.x;
                                frontier_phi_73_pred_5 = _3455 * _3238.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_73_pred;
                            _3460 = frontier_phi_73_pred_1;
                            _3464 = frontier_phi_73_pred_2;
                            _3463 = frontier_phi_73_pred_3;
                            _3462 = frontier_phi_73_pred_4;
                            _3461 = frontier_phi_73_pred_5;
                            _3168 = _3462 + _3181;
                            _3169 = _3463 + _3182;
                            _3170 = _3464 + _3183;
                            _3165 = _3459 + _3178;
                            _3166 = _3460 + _3179;
                            _3167 = _3461 + _3180;
                            if (_3185 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3178 = _3165;
                                _3179 = _3166;
                                _3180 = _3167;
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3185;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3168;
                        frontier_phi_67_pred_1 = _3169;
                        frontier_phi_67_pred_2 = _3170;
                        frontier_phi_67_pred_3 = _3167;
                        frontier_phi_67_pred_4 = _3166;
                        frontier_phi_67_pred_5 = _3165;
                    }
                    _2833 = frontier_phi_67_pred;
                    _2835 = frontier_phi_67_pred_1;
                    _2837 = frontier_phi_67_pred_2;
                    _2831 = frontier_phi_67_pred_3;
                    _2829 = frontier_phi_67_pred_4;
                    _2827 = frontier_phi_67_pred_5;
                    uint _2972 = _2971 + 1u;
                    if (_2972 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2965 = _2827;
                        _2966 = _2829;
                        _2967 = _2831;
                        _2968 = _2833;
                        _2969 = _2835;
                        _2970 = _2837;
                        _2971 = _2972;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2835;
                frontier_phi_55_56_ladder_1 = _2837;
                frontier_phi_55_56_ladder_2 = _2833;
                frontier_phi_55_56_ladder_3 = _2831;
                frontier_phi_55_56_ladder_4 = _2829;
                frontier_phi_55_56_ladder_5 = _2827;
            }
            else
            {
                frontier_phi_55_56_ladder = _2722;
                frontier_phi_55_56_ladder_1 = _2724;
                frontier_phi_55_56_ladder_2 = _2720;
                frontier_phi_55_56_ladder_3 = _2718;
                frontier_phi_55_56_ladder_4 = _2716;
                frontier_phi_55_56_ladder_5 = _2714;
            }
            _2826 = frontier_phi_55_56_ladder_5;
            _2828 = frontier_phi_55_56_ladder_4;
            _2830 = frontier_phi_55_56_ladder_3;
            _2832 = frontier_phi_55_56_ladder_2;
            _2834 = frontier_phi_55_56_ladder;
            _2836 = frontier_phi_55_56_ladder_1;
        }
        float _2841 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2626 = (_2841 * _2832) + _2078;
        _2628 = (_2841 * _2834) + _2080;
        _2630 = (_2841 * _2836) + _2082;
        _2632 = ((_2826 * 0.039999999105930328369140625) * _2841) + _2411;
        _2634 = ((_2828 * 0.039999999105930328369140625) * _2841) + _2413;
        _2636 = ((_2830 * 0.039999999105930328369140625) * _2841) + _2415;
    }
    else
    {
        _2626 = _2078;
        _2628 = _2080;
        _2630 = _2082;
        _2632 = _2411;
        _2634 = _2413;
        _2636 = _2415;
    }
    float _4554 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4565 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4576 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    uint _2656 = _247 + 6u;
    float _2664 = _831 / cbSceneParam._m0[86u].x;
    float _2665 = _832 / cbSceneParam._m0[86u].y;
    vec4 _2679 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, (log2((isnan(cbSceneParam._m0[77u].w) ? _765 : (isnan(_765) ? cbSceneParam._m0[77u].w : min(_765, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2681 = _2679.x;
    float _2682 = _2679.y;
    float _2683 = _2679.z;
    float _2684 = _2679.w;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_765 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_765) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _765 : min(cbSceneParam._m0[80u].w, _765));
        float _2740 = _2739 / _765;
        float _2751 = _2740 * _816;
        float _2752 = _817 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2754 = _2740 * _818;
        float _2756 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2757 = _2756 + cbSceneParam._m0[79u].w;
        float _2758 = cbSceneParam._m0[79u].w - _2752;
        float _2764 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2754 * _2754));
        float _2767 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2764;
        float _2772 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2774 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2927;
        if (abs((_2753 - _2756) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2927 = ((((_2757 > 0.0) ? exp2(_2772 * _2757) : (2.0 - exp2(_2774 * _2757))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2767;
        }
        else
        {
            float _2887 = 1.0 / cbSceneParam._m0[80u].x;
            float _2888 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : max(_2757, _2758));
            float _2889 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : min(_2757, _2758));
            float _2898 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : min(_2888, 0.0));
            float _2899 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : min(_2889, 0.0));
            _2927 = ((abs(_2764 / _2753) * cbSceneParam._m0[80u].y) * ((((_2898 - _2899) * 2.0) - ((exp2(_2772 * (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0)))) - exp2(_2772 * (isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))))) * _2887)) - ((exp2(_2774 * _2898) - exp2(_2774 * _2899)) * _2887))) + (_2767 * cbSceneParam._m0[80u].z);
        }
        vec4 _2929 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2664, _2665, 1.0), 0.0);
        float _2938 = exp2((_2927 * (-1.44269502162933349609375)) * (1.0 - _2929.w));
        float _2939 = log2(_2938);
        float _2955 = log2(_2684);
        _2776 = (exp2(_2955 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].x)) * _2929.x) / cbSceneParam._m0[78u].x)) + _2681;
        _2778 = (exp2(_2955 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].y)) * _2929.y) / cbSceneParam._m0[78u].y)) + _2682;
        _2780 = (exp2(_2955 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2939 * cbSceneParam._m0[78u].z)) * _2929.z) / cbSceneParam._m0[78u].z)) + _2683;
        _2782 = _2938 * _2684;
    }
    else
    {
        _2776 = _2681;
        _2778 = _2682;
        _2780 = _2683;
        _2782 = _2684;
    }
    float _2794 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2795 = _2794 == 3.0;
    float _2796 = log2(_2782);
    float _2803 = exp2(_2796 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2626 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _894))) + ((_2632 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _2804 = exp2(_2796 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2628 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _894))) + ((_2634 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _2805 = exp2(_2796 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2630 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _894))) + ((_2636 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1699)) * cbPerFrame._m0[3u].x));
    float _2814 = (_2794 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2814 * (_2795 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.y = _2814 * (_2795 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.z = _2814 * (_2795 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.w = cbInstanceData._m0[_2656].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2656].w;
}


