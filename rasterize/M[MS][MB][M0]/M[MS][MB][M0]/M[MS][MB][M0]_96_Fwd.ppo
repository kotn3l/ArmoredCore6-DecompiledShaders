#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1091;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _344 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _361 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _344) * cbMtdParam._m0[24u].x) + _344) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3398 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _369 = (_362 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _370 = (_362 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _371 = (_362 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _408 = _406.x;
    float _409 = _406.y;
    float _410 = _406.z;
    float _419 = ((_389.z - _410) * _362) + _410;
    float _422 = ((((_389.x - _408) * _362) + _408) * 2.0) + (-1.0);
    float _424 = ((((_389.y - _409) * _362) + _409) * 2.0) + (-1.0);
    float _425 = dot(vec2(_422, _424), vec2(_422, _424));
    float _3409 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))));
    float _433 = fma(_430, _214, fma(_424, _221, _422 * _207));
    float _436 = fma(_430, _215, fma(_424, _222, _422 * _208));
    float _439 = fma(_430, _216, fma(_424, _223, _422 * _209));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _489 = _487.x;
    float _490 = 1.0 - _489;
    float _496 = (cbMtdParam._m0[19u].x + dot(vec4(_443 * _433, _443 * _436, _443 * _439, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_489 - _490) * cbMtdParam._m0[24u].z) + _490) * cbMtdParam._m0[21u].z);
    float _3420 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _504 = (_497 * (cbMtdParam._m0[17u].x - _369)) + _369;
    float _505 = (_497 * (cbMtdParam._m0[17u].y - _370)) + _370;
    float _506 = (_497 * (cbMtdParam._m0[17u].z - _371)) + _371;
    vec4 _519 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _526 = (_519.x * 2.0) + (-1.0);
    float _527 = (_519.y * 2.0) + (-1.0);
    float _528 = dot(vec2(_526, _527), vec2(_526, _527));
    float _3431 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _536 = ((_519.z - _419) * _497) + _419;
    float _546 = ((sqrt(1.0 - (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) - _430) * _497) + _430;
    float _549 = (((_526 - _422) * _497) + _422) + (cbMtdParam._m0[21u].x * _422);
    float _550 = (((_527 - _424) * _497) + _424) + (cbMtdParam._m0[21u].x * _424);
    float _555 = cbMtdParam._m0[22u].x + _459.w;
    float _558 = fma(_546, _214, fma(_550, _221, _549 * _207));
    float _561 = fma(_546, _215, fma(_550, _222, _549 * _208));
    float _564 = fma(_546, _216, fma(_550, _223, _549 * _209));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    float _569 = _568 * _558;
    float _570 = _568 * _561;
    float _571 = _568 * _564;
    float _3442 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _572 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3464 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3475 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3486 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _590 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _642 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _632);
    float _643 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _632);
    float _644 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _632);
    float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
    float _649 = _642 * _648;
    float _650 = _643 * _648;
    float _651 = _644 * _648;
    float _657 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _658 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _676 = fma(_571, cbSceneParam._m0[5u].z, fma(_570, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _569));
    float _679 = fma(_571, cbSceneParam._m0[6u].z, fma(_570, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _569));
    float _682 = fma(_571, cbSceneParam._m0[7u].z, fma(_570, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _569));
    uint _696 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0)))) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_696].z;
    float _3497 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _3508 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _657, cbSceneParam._m0[86u].y * _658));
    float _720 = ((isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * TEXCOORD_5.w) * _716.x;
    float _721 = dot(vec3(_569, _570, _571), vec3(_649, _650, _651));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _569) - _649;
    float _729 = (_724 * _570) - _650;
    float _730 = (_724 * _571) - _651;
    float _734 = abs(dot(vec3(_649, _650, _651), vec3(_569, _570, _571)));
    float _3530 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_572);
    float _749 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1090;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _815 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _819 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _823 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _848 = _781 + _569;
        float _849 = _785 + _570;
        float _850 = _789 + _571;
        float _860 = fma(_850, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848)) - _815;
        float _861 = fma(_850, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848)) - _819;
        float _862 = fma(_850, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848)) - _823;
        float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
        float _879 = ((_866 * _860) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_815 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_866 * _861) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_819 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_866 * _862) / cbModelParam._m0[34u].z) + ((((((_823 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        float _918 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_884.x + (-0.5));
        float _920 = _918 * (_884.y + (-0.5));
        float _921 = _918 * (_884.z + (-0.5));
        float _928 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_891.x + (-0.5));
        float _930 = _928 * (_891.y + (-0.5));
        float _931 = _928 * (_891.z + (-0.5));
        float _938 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_898.x + (-0.5));
        float _940 = _938 * (_898.y + (-0.5));
        float _941 = _938 * (_898.z + (-0.5));
        float _948 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_905.x + (-0.5));
        float _950 = _948 * (_905.y + (-0.5));
        float _951 = _948 * (_905.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _972 = (dot(vec3(_569, _570, _571), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _982 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3578 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_984 + 1.0))) + _989) * _952;
        float _999 = _920 * 0.5;
        float _1000 = _930 * 0.5;
        float _1001 = _940 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_569, _570, _571), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3611 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1026 + 1.0))) + _1031) * _953;
        float _1041 = _921 * 0.5;
        float _1042 = _931 * 0.5;
        float _1043 = _941 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_569, _570, _571), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3644 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1068 + 1.0))) + _1073) * _954;
        _1090 = _921;
        _1092 = _920;
        _1093 = _919;
        _1094 = _931;
        _1095 = _930;
        _1096 = _929;
        _1097 = _941;
        _1098 = _940;
        _1099 = _939;
        _1100 = _954;
        _1101 = _953;
        _1102 = _952;
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _1091;
        _1092 = _1091;
        _1093 = _1091;
        _1094 = _1091;
        _1095 = _1091;
        _1096 = _1091;
        _1097 = _1091;
        _1098 = _1091;
        _1099 = _1091;
        _1100 = _1091;
        _1101 = _1091;
        _1102 = _1091;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1130 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1134 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1138 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1161 = _781 + _569;
        float _1162 = _785 + _570;
        float _1163 = _789 + _571;
        float _1173 = fma(_1163, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161)) - _1130;
        float _1174 = fma(_1163, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161)) - _1134;
        float _1175 = fma(_1163, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161)) - _1138;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1130 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1134 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[35u].z) + ((((((_1138 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1229 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1196.x + (-0.5));
        float _1231 = _1229 * (_1196.y + (-0.5));
        float _1232 = _1229 * (_1196.z + (-0.5));
        float _1239 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1203.x + (-0.5));
        float _1241 = _1239 * (_1203.y + (-0.5));
        float _1242 = _1239 * (_1203.z + (-0.5));
        float _1249 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1210.x + (-0.5));
        float _1251 = _1249 * (_1210.y + (-0.5));
        float _1252 = _1249 * (_1210.z + (-0.5));
        float _1259 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1217.x + (-0.5));
        float _1261 = _1259 * (_1217.y + (-0.5));
        float _1262 = _1259 * (_1217.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_569, _570, _571), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3707 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1293 + 1.0))) + _1298) * _1263;
        float _1308 = _1231 * 0.5;
        float _1309 = _1241 * 0.5;
        float _1310 = _1251 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_569, _570, _571), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3740 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1335 + 1.0))) + _1340) * _1264;
        float _1350 = _1232 * 0.5;
        float _1351 = _1242 * 0.5;
        float _1352 = _1252 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_569, _570, _571), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3773 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1377 + 1.0))) + _1382) * _1265;
        _1399 = _1232;
        _1400 = _1231;
        _1401 = _1230;
        _1402 = _1242;
        _1403 = _1241;
        _1404 = _1240;
        _1405 = _1252;
        _1406 = _1251;
        _1407 = _1250;
        _1408 = _1265;
        _1409 = _1264;
        _1410 = _1263;
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1091;
        _1400 = _1091;
        _1401 = _1091;
        _1402 = _1091;
        _1403 = _1091;
        _1404 = _1091;
        _1405 = _1091;
        _1406 = _1091;
        _1407 = _1091;
        _1408 = _1091;
        _1409 = _1091;
        _1410 = _1091;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1103)) + _1103;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1104)) + _1104;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1446 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1423));
    float _1467 = _728 * 0.5;
    float _1468 = _729 * 0.5;
    float _1469 = _730 * 0.5;
    float _1470 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1473 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1476 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1510;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1483 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1090, _1094, _1097, _1100));
        float _1487 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1491 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1498 = dot(vec4(cbModelParam._m0[39u]), vec4(_1467, _1468, _1469, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1521;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1512 = dot(vec4(cbModelParam._m0[40u]), vec4(_1467, _1468, _1469, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1525 = (_1521 * cbModelParam._m0[1u].x) + (_1510 * (1.0 - cbModelParam._m0[1u].x));
    float _1535 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _572);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1535 : min(cbModelParam._m0[25u].z, _1535));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1598 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1601 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1629 = frontier_phi_14_12_ladder;
        }
        float _1830;
        if (_1598 > 0.0)
        {
            _1830 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1830 = frontier_phi_23_19_ladder;
        }
        float _2073;
        if (_1601 > 0.0)
        {
            _2073 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2073 = frontier_phi_35_30_ladder;
        }
        float _2075 = isnan(_1830) ? _1629 : (isnan(_1629) ? _1830 : min(_1629, _1830));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1595) + _1584;
        float _2081 = (_2076 * _1598) + _1588;
        float _2082 = (_2076 * _1601) + _1592;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1536);
            frontier_phi_13_35_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_13_35_ladder_2;
        _1619 = frontier_phi_13_35_ladder_1;
        _1621 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1536);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _572);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1716;
    float _1718;
    float _1720;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1680 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1684 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1688 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1691 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1694 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1697 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1835;
        if (_1691 > 0.0)
        {
            _1835 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1835 = frontier_phi_25_21_ladder;
        }
        float _2100;
        if (_1694 > 0.0)
        {
            _2100 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2100 = frontier_phi_37_32_ladder;
        }
        float _2305;
        if (_1697 > 0.0)
        {
            _2305 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2305 = frontier_phi_46_43_ladder;
        }
        float _2307 = isnan(_2100) ? _1835 : (isnan(_1835) ? _2100 : min(_1835, _2100));
        float _2308 = isnan(_2305) ? _2307 : (isnan(_2307) ? _2305 : min(_2307, _2305));
        float _2312 = (_2308 * _1691) + _1680;
        float _2313 = (_2308 * _1694) + _1684;
        float _2314 = (_2308 * _1697) + _1688;
        float _2315 = _2308 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2315;
        float _2318 = _2315 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2314 > _2318) || ((_2314 < _2316) || ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 < _2316) || (_2312 > _2318))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2513 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2314, cbModelParam._m0[17u].z, fma(_2313, cbModelParam._m0[17u].y, _2312 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2314, cbModelParam._m0[18u].z, fma(_2313, cbModelParam._m0[18u].y, _2312 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2314, cbModelParam._m0[19u].z, fma(_2313, cbModelParam._m0[19u].y, _2312 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_22_46_ladder = _2513.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2513.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2513.x * cbModelParam._m0[1u].z;
        }
        _1716 = frontier_phi_22_46_ladder_2;
        _1718 = frontier_phi_22_46_ladder_1;
        _1720 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1626);
        _1716 = _1700.x * cbModelParam._m0[1u].z;
        _1718 = _1700.y * cbModelParam._m0[1u].z;
        _1720 = _1700.z * cbModelParam._m0[1u].z;
    }
    float _1732 = ((((1.0 - _749) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_749 * _736)) * _720;
    float _1733 = _1732 * ((cbModelParam._m0[1u].w * (_1716 - _1617)) + _1617);
    float _1734 = _1732 * ((cbModelParam._m0[1u].w * (_1718 - _1619)) + _1619);
    float _1735 = _1732 * ((cbModelParam._m0[1u].w * (_1720 - _1621)) + _1621);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1733 * cbSceneParam._m0[91u].x));
    uvec4 _1754 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1756 = _1754.x * 14u;
    uint _1757 = _1756 + 13u;
    float _1764 = _720 + (-1.0);
    float _1769 = (cbLight._m0[_1757].x * _1764) + 1.0;
    float _1770 = (cbLight._m0[_1757].y * _1764) + 1.0;
    float _1771 = (cbLight._m0[_1757].z * _1764) + 1.0;
    float _1772 = (cbLight._m0[_1757].w * _1764) + 1.0;
    uint _1773 = _1756 + 5u;
    float _1779 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1783 = _1756 + 4u;
    float _1789 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1793 = _1756 | 1u;
    float _1804 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_569, _570, _571));
    float _1807 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_569, _570, _571));
    float _3909 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _3920 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _1812 = (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.3183098733425140380859375;
    float _1814 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * 0.3183098733425140380859375;
    float _1821 = ((cbLight._m0[_1773].x * _1779) * _1814) + ((cbLight._m0[_1783].x * _1789) * _1812);
    float _1822 = ((_1779 * cbLight._m0[_1773].y) * _1814) + ((_1789 * cbLight._m0[_1783].y) * _1812);
    float _1823 = ((_1779 * cbLight._m0[_1773].z) * _1814) + ((_1789 * cbLight._m0[_1783].z) * _1812);
    uvec4 _1827 = floatBitsToUint(cbLight._m0[_1756 + 12u]);
    bool _1829 = _1827.x == 0u;
    float _1840;
    float _1842;
    float _1844;
    if (_1829)
    {
        _1840 = _1821;
        _1842 = _1822;
        _1844 = _1823;
    }
    else
    {
        uint _1848 = _1756 + 6u;
        float _1864 = (dot(vec3(cbLight._m0[_1756 + 2u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _1865 = _1864 * _1864;
        float _3931 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1866 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1867 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _1840 = (((cbLight._m0[_1848].x * 0.3183098733425140380859375) * _1866) * _1867) + _1821;
        _1842 = (((cbLight._m0[_1848].y * 0.3183098733425140380859375) * _1866) * _1867) + _1822;
        _1844 = (((cbLight._m0[_1848].z * 0.3183098733425140380859375) * _1866) * _1867) + _1823;
    }
    bool _1847 = _1827.y == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1847)
    {
        _1885 = _1840;
        _1887 = _1842;
        _1889 = _1844;
    }
    else
    {
        uint _2044 = _1756 + 7u;
        float _2060 = (dot(vec3(cbLight._m0[_1756 + 3u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _2061 = _2060 * _2060;
        float _3947 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
        float _2062 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2063 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _1885 = (((cbLight._m0[_2044].x * 0.3183098733425140380859375) * _2062) * _2063) + _1840;
        _1887 = (((cbLight._m0[_2044].y * 0.3183098733425140380859375) * _2062) * _2063) + _1842;
        _1889 = (((cbLight._m0[_2044].z * 0.3183098733425140380859375) * _2062) * _2063) + _1844;
    }
    uint _1892 = _1756 + 8u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1756].w)) * _572) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1756].x + _649;
    float _1908 = cbLight._m0[_1756].y + _650;
    float _1909 = cbLight._m0[_1756].z + _651;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1756].xyz));
    float _3963 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1921 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1922 = dot(vec3(_569, _570, _571), vec3(_1914, _1915, _1916));
    float _3985 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1756].xyz), vec3(_1914, _1915, _1916));
    float _3996 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1906 * _1906;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1945 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1946 = 1.0 - _1906;
    float _1957 = (0.5 / (((_1921 * ((_1920 * _1946) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _1946) + _1906) * _1920))) * _1920;
    float _4007 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1959 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    uint _1970 = _1756 + 9u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _572) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1793].x + _649;
    float _1984 = cbLight._m0[_1793].y + _650;
    float _1985 = cbLight._m0[_1793].z + _651;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1793].xyz));
    float _4018 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1997 = dot(vec3(_569, _570, _571), vec3(_1990, _1991, _1992));
    float _4029 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _2001 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1990, _1991, _1992));
    float _4040 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2005 = _1982 * _1982;
    float _2009 = ((_2000 * _2000) * (_2005 + (-1.0))) + 1.0;
    float _2018 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2019 = 1.0 - _1982;
    float _2029 = (0.5 / (((_1921 * ((_1996 * _2019) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2019) + _1982) * _1996))) * _1996;
    float _4051 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2005 / ((_2009 * _2009) * 3.141590118408203125));
    float _2041 = (((_2018 * cbLight._m0[_1970].x) * _2031) * _1779) + (((_1945 * cbLight._m0[_1892].x) * _1959) * _1789);
    float _2042 = (((_2018 * cbLight._m0[_1970].y) * _2031) * _1779) + (((_1945 * cbLight._m0[_1892].y) * _1959) * _1789);
    float _2043 = (((_2018 * cbLight._m0[_1970].z) * _2031) * _1779) + (((_1945 * cbLight._m0[_1892].z) * _1959) * _1789);
    float _2105;
    float _2107;
    float _2109;
    if (_1829)
    {
        _2105 = _2041;
        _2107 = _2042;
        _2109 = _2043;
    }
    else
    {
        uint _2111 = _1756 + 2u;
        uint _2115 = _1756 + 10u;
        float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _572) * 0.949999988079071044921875);
        float _2130 = _2129 * _2129;
        float _2131 = cbLight._m0[_2111].x + _649;
        float _2132 = cbLight._m0[_2111].y + _650;
        float _2133 = cbLight._m0[_2111].z + _651;
        float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
        float _2138 = _2137 * _2131;
        float _2139 = _2137 * _2132;
        float _2140 = _2137 * _2133;
        float _2141 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2111].xyz));
        float _4062 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2144 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _2145 = dot(vec3(_569, _570, _571), vec3(_2138, _2139, _2140));
        float _4073 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _2149 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2138, _2139, _2140));
        float _4084 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2153 = _2130 * _2130;
        float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
        float _2166 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2167 = 1.0 - _2130;
        float _2177 = (0.5 / (((_1921 * ((_2144 * _2167) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2167) + _2130) * _2144))) * _2144;
        float _4095 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2179 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
        float _2180 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
        _2105 = (((_2166 * cbLight._m0[_2115].x) * _2179) * _2180) + _2041;
        _2107 = (((_2166 * cbLight._m0[_2115].y) * _2179) * _2180) + _2042;
        _2109 = (((_2166 * cbLight._m0[_2115].z) * _2179) * _2180) + _2043;
    }
    float _2215;
    float _2217;
    float _2219;
    if (_1847)
    {
        _2215 = _2105;
        _2217 = _2107;
        _2219 = _2109;
    }
    else
    {
        uint _2226 = _1756 + 3u;
        uint _2230 = _1756 + 11u;
        float _2244 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _572) * 0.949999988079071044921875);
        float _2245 = _2244 * _2244;
        float _2246 = cbLight._m0[_2226].x + _649;
        float _2247 = cbLight._m0[_2226].y + _650;
        float _2248 = cbLight._m0[_2226].z + _651;
        float _2252 = inversesqrt(dot(vec3(_2246, _2247, _2248), vec3(_2246, _2247, _2248)));
        float _2253 = _2252 * _2246;
        float _2254 = _2252 * _2247;
        float _2255 = _2252 * _2248;
        float _2256 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2226].xyz));
        float _4111 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2260 = dot(vec3(_569, _570, _571), vec3(_2253, _2254, _2255));
        float _4122 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2264 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2253, _2254, _2255));
        float _4133 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2268 = _2245 * _2245;
        float _2272 = ((_2263 * _2263) * (_2268 + (-1.0))) + 1.0;
        float _2281 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2282 = 1.0 - _2245;
        float _2292 = (0.5 / (((_1921 * ((_2259 * _2282) + _2245)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2282) + _2245) * _2259))) * _2259;
        float _4144 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2268 / ((_2272 * _2272) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
        _2215 = (((_2281 * cbLight._m0[_2230].x) * _2294) * _2295) + _2105;
        _2217 = (((_2281 * cbLight._m0[_2230].y) * _2294) * _2295) + _2107;
        _2219 = (((_2281 * cbLight._m0[_2230].z) * _2294) * _2295) + _2109;
    }
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_1754.y == 0u)
    {
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2370;
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2370;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2370;
        uvec4 _2385 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2386 = _2385.x;
        uint _2397 = uint((float(_2385.y) * floor(float(uint(cbSceneParam._m0[85u].y * _658) / _2386))) + floor(float(uint(cbSceneParam._m0[85u].x * _657) / _2386)));
        float _2407 = (log2(_2373 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2408 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        uint _2411 = uint(isnan(14.0) ? _2408 : (isnan(_2408) ? 14.0 : min(_2408, 14.0)));
        uvec4 _2416 = texelFetch(g_lightClusterGridBuffer, int(((_2411 << 2u) + (_2397 << 6u)) >> 2u));
        uint _2417 = _2416.x;
        uint _2418 = _2385.z;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        if (((((1u << ((_2418 >> 4u) & 15u)) + 4294967295u) & _2417) == 0u) || ((_2418 & 240u) == 0u))
        {
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
        }
        else
        {
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            uint _2669 = 0u;
            uint _2678;
            bool _2679;
            for (;;)
            {
                _2678 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2669 << 2u)) >> 2u)).x;
                _2679 = _2678 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2679)
                {
                    frontier_phi_61_pred = _2663;
                    frontier_phi_61_pred_1 = _2668;
                    frontier_phi_61_pred_2 = _2667;
                    frontier_phi_61_pred_3 = _2666;
                    frontier_phi_61_pred_4 = _2665;
                    frontier_phi_61_pred_5 = _2664;
                }
                else
                {
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    uint _2793;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2678;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    for (;;)
                    {
                        uint _2797 = uint(findLSB(_2793)) + (_2669 << 5u);
                        uint _2794 = (_2793 + 4294967295u) & _2793;
                        uint _2799 = _2797 * 48u;
                        vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2799)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2799 + 3u)).x));
                        uint _2819 = (_2797 * 48u) + 4u;
                        vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2838 = (_2797 * 48u) + 8u;
                        vec3 _2849 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2838)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2838 + 2u)).x));
                        float _2853 = _2813.x - _2371;
                        float _2854 = _2813.y - _2372;
                        float _2855 = _2813.z - _2373;
                        float _2856 = dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855));
                        float _2859 = inversesqrt(_2856);
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2863 = dot(vec3(_676, _679, _682), vec3(_2860, _2861, _2862));
                        float _2868 = 1.0 - (_2856 * _2813.w);
                        float _4170 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2869 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2870 = sqrt(_2856) * _2832.w;
                        float _2873 = 1.39999997615814208984375 / (_2870 + 1.39999997615814208984375);
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2863) + _2874;
                        float _2880 = _2870 * _2870;
                        float _2884 = ((isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0))) * _2869) / ((_2880 * 0.699999988079071044921875) + 1.0);
                        float _2888 = (-0.0) - _2371;
                        float _2889 = (-0.0) - _2372;
                        float _2890 = (-0.0) - _2373;
                        float _2894 = inversesqrt(dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890)));
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2905 = exp2(log2(1.0 / ((_2880 * 3.5) + 5.0)) * 0.25);
                        float _2906 = 1.0 - _736;
                        float _2913 = sqrt(1.0 - ((1.0 - (_2906 * _2906)) * (1.0 - (_2905 * _2905))));
                        float _2914 = _2913 * _2913;
                        float _2915 = _2914 * _2914;
                        float _2916 = _2895 + _2860;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2926 = dot(vec3(_676, _679, _682), vec3(_2895, _2896, _2897));
                        float _4186 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2929 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2930 = dot(vec3(_676, _679, _682), vec3(_2922 * _2916, _2922 * _2917, _2922 * _2918));
                        float _4197 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2937 = ((_2933 * _2933) * (_2915 + (-1.0))) + 1.0;
                        float _2938 = _2873 * _2914;
                        float _2939 = _2938 * _2938;
                        float _2942 = ((1.0 - _2939) * _2863) + _2939;
                        float _4208 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                        float _2944 = 1.0 - _2914;
                        float _2954 = (0.5 / (((_2943 * ((_2929 * _2944) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2943 * _2944) + _2914) * _2929))) * _2943;
                        float _4219 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2965 = (((_2915 * 3.1415927410125732421875) * (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) / ((_2937 * _2937) * ((_2880 * 2.1991131305694580078125) + 3.141590118408203125))) * _2869;
                        _2722 = (_2884 * _2832.x) + _2790;
                        _2723 = (_2884 * _2832.y) + _2791;
                        _2724 = (_2884 * _2832.z) + _2792;
                        _2719 = (_2965 * _2849.x) + _2787;
                        _2720 = (_2965 * _2849.y) + _2788;
                        _2721 = (_2965 * _2849.z) + _2789;
                        if (_2794 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2794;
                        }
                    }
                    frontier_phi_61_pred = _2719;
                    frontier_phi_61_pred_1 = _2724;
                    frontier_phi_61_pred_2 = _2723;
                    frontier_phi_61_pred_3 = _2722;
                    frontier_phi_61_pred_4 = _2721;
                    frontier_phi_61_pred_5 = _2720;
                }
                _2519 = frontier_phi_61_pred;
                _2529 = frontier_phi_61_pred_1;
                _2527 = frontier_phi_61_pred_2;
                _2525 = frontier_phi_61_pred_3;
                _2523 = frontier_phi_61_pred_4;
                _2521 = frontier_phi_61_pred_5;
                uint _2670 = _2669 + 1u;
                if (_2670 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2663 = _2519;
                    _2664 = _2521;
                    _2665 = _2523;
                    _2666 = _2525;
                    _2667 = _2527;
                    _2668 = _2529;
                    _2669 = _2670;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
        }
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.z;
        uint _2535 = (_2533 >> 8u) & 15u;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((4294967295u << _2535) & _2417) == 0u)
        {
            _2631 = _2518;
            _2633 = _2520;
            _2635 = _2522;
            _2637 = _2524;
            _2639 = _2526;
            _2641 = _2528;
        }
        else
        {
            float _2656 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
            float _2657 = _2656 * _2371;
            float _2658 = _2656 * _2372;
            float _2659 = _2656 * _2373;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2535 < ((_2533 >> 12u) & 15u))
            {
                float _2632;
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2770 = _2518;
                float _2771 = _2520;
                float _2772 = _2522;
                float _2773 = _2524;
                float _2774 = _2526;
                float _2775 = _2528;
                uint _2776 = _2535;
                uint _2785;
                bool _2786;
                for (;;)
                {
                    _2785 = texelFetch(g_lightClassification, int((((_2411 << 5u) + (_2397 << 9u)) + (_2776 << 2u)) >> 2u)).x;
                    _2786 = _2785 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2786)
                    {
                        frontier_phi_67_pred = _2773;
                        frontier_phi_67_pred_1 = _2774;
                        frontier_phi_67_pred_2 = _2775;
                        frontier_phi_67_pred_3 = _2772;
                        frontier_phi_67_pred_4 = _2771;
                        frontier_phi_67_pred_5 = _2770;
                    }
                    else
                    {
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _2983 = _2770;
                        float _2984 = _2771;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        uint _2989 = _2785;
                        uint _2990;
                        vec4 _3015;
                        float _3016;
                        vec4 _3031;
                        vec3 _3043;
                        vec4 _3058;
                        vec4 _3074;
                        float _3120;
                        bool _3121;
                        for (;;)
                        {
                            uint _3000 = ((_2776 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2989));
                            _2990 = (_2989 + 4294967295u) & _2989;
                            uint _3002 = _3000 * 40u;
                            _3015 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3002)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3002 + 3u)).x));
                            _3016 = _3015.w;
                            uint _3018 = (_3000 * 40u) + 4u;
                            _3031 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3018)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3018 + 3u)).x));
                            uint _3033 = (_3000 * 40u) + 8u;
                            _3043 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x));
                            uint _3045 = (_3000 * 40u) + 16u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_3000 * 40u) + 20u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3000 * 40u) + 24u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3095 = (_3000 * 40u) + 28u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3120 = fma(_2373, _3108.z, fma(_2372, _3108.y, _3108.x * _2371)) + _3108.w;
                            _3121 = !((fma(_2373, _3089.z, fma(_2372, _3089.y, _3089.x * _2371)) + _3089.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3121)
                            {
                                float _3148 = _3015.x - _2371;
                                float _3149 = _3015.y - _2372;
                                float _3150 = _3015.z - _2373;
                                float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                                float _3154 = inversesqrt(_3151);
                                float _3155 = _3154 * _3148;
                                float _3156 = _3154 * _3149;
                                float _3157 = _3154 * _3150;
                                float _3161 = 1.0 - (_3151 / (_3016 * _3016));
                                float _4230 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3166 = sqrt(_3151) * _3031.w;
                                float _3168 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                                float _3169 = _3168 * _3168;
                                float _3172 = ((1.0 - _3169) * dot(vec3(_3155, _3156, _3157), vec3(_676, _679, _682))) + _3169;
                                float _3175 = _3166 * _3166;
                                float _3179 = (fma(_2373, _3058.z, fma(_2372, _3058.y, _3058.x * _2371)) + _3058.w) / _3120;
                                float _3180 = (fma(_2373, _3074.z, fma(_2372, _3074.y, _3074.x * _2371)) + _3074.w) / _3120;
                                float _3184 = 1.0 - dot(vec2(_3179, _3180), vec2(_3179, _3180));
                                float _4246 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3186 = _3185 * (((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3162) / ((_3175 * 0.699999988079071044921875) + 1.0));
                                float _3198 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                                float _3199 = 1.0 - _736;
                                float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                                float _3207 = _3206 * _3206;
                                float _3208 = _3207 * _3207;
                                float _3209 = _3155 - _2657;
                                float _3210 = _3156 - _2658;
                                float _3211 = _3157 - _2659;
                                float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                                float _3219 = dot(vec3(_676, _679, _682), vec3((-0.0) - _2657, (-0.0) - _2658, (-0.0) - _2659));
                                float _4257 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3223 = dot(vec3(_676, _679, _682), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                                float _4268 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                                float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                                float _3231 = _3168 * _3207;
                                float _3232 = _3231 * _3231;
                                float _3238 = ((1.0 - _3232) * dot(vec3(_676, _679, _682), vec3(_3155, _3156, _3157))) + _3232;
                                float _4279 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                                float _3240 = 1.0 - _3207;
                                float _3250 = (0.5 / (((_3239 * ((_3222 * _3240) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3207) * _3222))) * _3239;
                                float _4290 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3260 = (_3185 * _3162) * (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) / ((_3230 * _3230) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3260 * _3043.x;
                                frontier_phi_73_pred_1 = _3260 * _3043.y;
                                frontier_phi_73_pred_2 = _3186 * _3031.z;
                                frontier_phi_73_pred_3 = _3186 * _3031.y;
                                frontier_phi_73_pred_4 = _3186 * _3031.x;
                                frontier_phi_73_pred_5 = _3260 * _3043.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3264 = frontier_phi_73_pred;
                            _3265 = frontier_phi_73_pred_1;
                            _3269 = frontier_phi_73_pred_2;
                            _3268 = frontier_phi_73_pred_3;
                            _3267 = frontier_phi_73_pred_4;
                            _3266 = frontier_phi_73_pred_5;
                            _2973 = _3267 + _2986;
                            _2974 = _3268 + _2987;
                            _2975 = _3269 + _2988;
                            _2970 = _3264 + _2983;
                            _2971 = _3265 + _2984;
                            _2972 = _3266 + _2985;
                            if (_2990 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2990;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2973;
                        frontier_phi_67_pred_1 = _2974;
                        frontier_phi_67_pred_2 = _2975;
                        frontier_phi_67_pred_3 = _2972;
                        frontier_phi_67_pred_4 = _2971;
                        frontier_phi_67_pred_5 = _2970;
                    }
                    _2638 = frontier_phi_67_pred;
                    _2640 = frontier_phi_67_pred_1;
                    _2642 = frontier_phi_67_pred_2;
                    _2636 = frontier_phi_67_pred_3;
                    _2634 = frontier_phi_67_pred_4;
                    _2632 = frontier_phi_67_pred_5;
                    uint _2777 = _2776 + 1u;
                    if (_2777 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2770 = _2632;
                        _2771 = _2634;
                        _2772 = _2636;
                        _2773 = _2638;
                        _2774 = _2640;
                        _2775 = _2642;
                        _2776 = _2777;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2640;
                frontier_phi_55_56_ladder_1 = _2642;
                frontier_phi_55_56_ladder_2 = _2638;
                frontier_phi_55_56_ladder_3 = _2636;
                frontier_phi_55_56_ladder_4 = _2634;
                frontier_phi_55_56_ladder_5 = _2632;
            }
            else
            {
                frontier_phi_55_56_ladder = _2526;
                frontier_phi_55_56_ladder_1 = _2528;
                frontier_phi_55_56_ladder_2 = _2524;
                frontier_phi_55_56_ladder_3 = _2522;
                frontier_phi_55_56_ladder_4 = _2520;
                frontier_phi_55_56_ladder_5 = _2518;
            }
            _2631 = frontier_phi_55_56_ladder_5;
            _2633 = frontier_phi_55_56_ladder_4;
            _2635 = frontier_phi_55_56_ladder_3;
            _2637 = frontier_phi_55_56_ladder_2;
            _2639 = frontier_phi_55_56_ladder;
            _2641 = frontier_phi_55_56_ladder_1;
        }
        float _2646 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2430 = (_2646 * _2637) + _1885;
        _2432 = (_2646 * _2639) + _1887;
        _2434 = (_2646 * _2641) + _1889;
        _2436 = ((_2631 * 0.039999999105930328369140625) * _2646) + _2215;
        _2438 = ((_2633 * 0.039999999105930328369140625) * _2646) + _2217;
        _2440 = ((_2635 * 0.039999999105930328369140625) * _2646) + _2219;
    }
    else
    {
        _2430 = _1885;
        _2432 = _1887;
        _2434 = _1889;
        _2436 = _2215;
        _2438 = _2217;
        _2440 = _2219;
    }
    float _4306 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4317 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4328 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    uint _2460 = _226 + 6u;
    float _2468 = _657 / cbSceneParam._m0[86u].x;
    float _2469 = _658 / cbSceneParam._m0[86u].y;
    vec4 _2483 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, (log2((isnan(cbSceneParam._m0[77u].w) ? _590 : (isnan(_590) ? cbSceneParam._m0[77u].w : min(_590, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2485 = _2483.x;
    float _2486 = _2483.y;
    float _2487 = _2483.z;
    float _2488 = _2483.w;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_590 > cbSceneParam._m0[78u].w)
    {
        float _2543 = isnan(_590) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _590 : min(cbSceneParam._m0[80u].w, _590));
        float _2544 = _2543 / _590;
        float _2555 = _2544 * _642;
        float _2556 = _643 * _2544;
        float _2557 = (-0.0) - _2556;
        float _2559 = _2544 * _644;
        float _2561 = (cbSceneParam._m0[77u].w * _2557) / _2543;
        float _2562 = _2561 + cbSceneParam._m0[79u].w;
        float _2563 = cbSceneParam._m0[79u].w - _2556;
        float _2569 = sqrt(((_2555 * _2555) + (_2556 * _2556)) + (_2559 * _2559));
        float _2572 = (1.0 - (cbSceneParam._m0[77u].w / _2543)) * _2569;
        float _2577 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2579 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2732;
        if (abs((_2557 - _2561) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2732 = ((((_2562 > 0.0) ? exp2(_2577 * _2562) : (2.0 - exp2(_2579 * _2562))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2572;
        }
        else
        {
            float _2692 = 1.0 / cbSceneParam._m0[80u].x;
            float _2693 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : max(_2562, _2563));
            float _2694 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : min(_2562, _2563));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            _2732 = ((abs(_2569 / _2557) * cbSceneParam._m0[80u].y) * ((((_2703 - _2704) * 2.0) - ((exp2(_2577 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0)))) - exp2(_2577 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))))) * _2692)) - ((exp2(_2579 * _2703) - exp2(_2579 * _2704)) * _2692))) + (_2572 * cbSceneParam._m0[80u].z);
        }
        vec4 _2734 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2468, _2469, 1.0), 0.0);
        float _2743 = exp2((_2732 * (-1.44269502162933349609375)) * (1.0 - _2734.w));
        float _2744 = log2(_2743);
        float _2760 = log2(_2488);
        _2581 = (exp2(_2760 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].x)) * _2734.x) / cbSceneParam._m0[78u].x)) + _2485;
        _2583 = (exp2(_2760 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].y)) * _2734.y) / cbSceneParam._m0[78u].y)) + _2486;
        _2585 = (exp2(_2760 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2744 * cbSceneParam._m0[78u].z)) * _2734.z) / cbSceneParam._m0[78u].z)) + _2487;
        _2587 = _2743 * _2488;
    }
    else
    {
        _2581 = _2485;
        _2583 = _2486;
        _2585 = _2487;
        _2587 = _2488;
    }
    float _2599 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2600 = _2599 == 3.0;
    float _2601 = log2(_2587);
    float _2608 = exp2(_2601 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2430 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _720))) + ((_2436 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2609 = exp2(_2601 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2432 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _720))) + ((_2438 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2610 = exp2(_2601 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2434 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _720))) + ((_2440 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2619 = (_2599 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2619 * (_2600 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.y = _2619 * (_2600 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.z = _2619 * (_2600 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.w = cbInstanceData._m0[_2460].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2460].w;
}


