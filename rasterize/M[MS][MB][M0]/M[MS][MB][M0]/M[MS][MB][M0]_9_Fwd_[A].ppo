#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1076;
float _3440;
float _3441;
float _3442;
float _3443;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _251 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.x * cbMtdParam._m0[9u].x;
    float _258 = _251.y * cbMtdParam._m0[9u].y;
    float _259 = _251.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _276 = _272.z;
    float _281 = (_272.x * 2.0) + (-1.0);
    float _283 = (_272.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3452 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _326 = _324.x;
    float _327 = 1.0 - _326;
    float _360 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_326 - _327) * cbMtdParam._m0[24u].w) + _327) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3463 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _361 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _369 = ((((cbMtdParam._m0[10u].x - _257) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _361) + _257;
    float _370 = ((((cbMtdParam._m0[10u].y - _258) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _361) + _258;
    float _371 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _259)) * _361) + _259;
    float _375 = ((cbMtdParam._m0[23u].y - _276) * _361) + _276;
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _399 = _397.x;
    float _400 = _397.y;
    float _409 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_221, _222, _223, 0.0));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _310) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _311) + cbTextureTilingScale._m0[18u].w));
    float _426 = _424.x;
    float _431 = fract(_424.w + cbPerFrame._m0[22u].x);
    float _433 = (1.0 - _431) * _426;
    float _438 = ((_431 + (-1.0)) + _426) * 9.0;
    float _440 = ((_426 + (-1.0)) + _431) * 9.0;
    float _441 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _442 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _456 = (_433 * ((_424.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _441 : (isnan(_441) ? 3.0 : min(_441, 3.0))) * 3.1415927410125732421875);
    float _458 = (_433 * ((_424.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _442 : (isnan(_442) ? 3.0 : min(_442, 3.0))) * 3.1415927410125732421875);
    float _462 = inversesqrt(dot(vec3(_456, _458, 1.0), vec3(_456, _458, 1.0)));
    float _478 = (((((0.5 - _399) + ((_456 * 0.5) * _462)) * _409) + _399) * 2.0) + (-1.0);
    float _479 = (((((0.5 - _400) + ((_462 * 0.5) * _458)) * _409) + _400) * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3494 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _496 = ((((cbMtdParam._m0[22u].z * _281) - _281) + _478) * _361) + _281;
    float _497 = ((((cbMtdParam._m0[22u].z * _283) - _283) + _479) * _361) + _283;
    float _498 = (_361 * (sqrt(1.0 - (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) - _290)) + _290;
    float _500 = cbMtdParam._m0[22u].x + _272.w;
    float _503 = fma(_498, _221, fma(_497, _227 * TANGENT.x, (_213 * _205) * _496));
    float _506 = fma(_498, _222, fma(_497, _227 * TANGENT.y, (_213 * _206) * _496));
    float _509 = fma(_498, _223, fma(_497, _227 * TANGENT.z, (_213 * _207) * _496));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3505 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _517 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3527 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _3538 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _3549 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _586 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _576);
    float _587 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _576);
    float _588 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _576);
    float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
    float _593 = _586 * _592;
    float _594 = _587 * _592;
    float _595 = _588 * _592;
    vec4 _600 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _602 = _600.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _758 = sqrt(((_586 * _586) + (_587 * _587)) + (_588 * _588));
        float _764 = (cbMatDynParam._m0[5u].x * _758) + cbMatDynParam._m0[5u].y;
        float _3560 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _769 = (cbMatDynParam._m0[5u].z * _758) + cbMatDynParam._m0[5u].w;
        float _3571 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) - _765)) + _765) < ((_602 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _614 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _615 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _638 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _641 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _654 = _291 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3582 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _3604 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _614, cbSceneParam._m0[86u].y * _615));
    float _679 = ((isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * TEXCOORD_5.w) * _675.x;
    float _680 = dot(vec3(_514, _515, _516), vec3(_593, _594, _595));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _514) - _593;
    float _688 = (_683 * _515) - _594;
    float _689 = (_683 * _516) - _595;
    float _693 = abs(dot(vec3(_593, _594, _595), vec3(_514, _515, _516)));
    float _3615 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_517);
    float _707 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1075;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _801 = fma(_747, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739));
        float _805 = fma(_747, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739));
        float _809 = fma(_747, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739));
        float _833 = _739 + _514;
        float _834 = _743 + _515;
        float _835 = _747 + _516;
        float _845 = fma(_835, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833)) - _801;
        float _846 = fma(_835, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833)) - _805;
        float _847 = fma(_835, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833)) - _809;
        float _851 = inversesqrt(dot(vec3(_845, _846, _847), vec3(_845, _846, _847)));
        float _864 = ((_851 * _845) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_801 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_851 * _846) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_805 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _866 = ((_851 * _847) / cbModelParam._m0[34u].z) + ((((((_809 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _903 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_869.x + (-0.5));
        float _905 = _903 * (_869.y + (-0.5));
        float _906 = _903 * (_869.z + (-0.5));
        float _913 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_876.x + (-0.5));
        float _915 = _913 * (_876.y + (-0.5));
        float _916 = _913 * (_876.z + (-0.5));
        float _923 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_883.x + (-0.5));
        float _925 = _923 * (_883.y + (-0.5));
        float _926 = _923 * (_883.z + (-0.5));
        float _933 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_890.x + (-0.5));
        float _935 = _933 * (_890.y + (-0.5));
        float _936 = _933 * (_890.z + (-0.5));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _940 = _904 * 0.5;
        float _941 = _914 * 0.5;
        float _942 = _924 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _957 = (dot(vec3(_514, _515, _516), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _967 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3663 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_969 + 1.0))) + _974) * _937;
        float _984 = _905 * 0.5;
        float _985 = _915 * 0.5;
        float _986 = _925 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_514, _515, _516), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3696 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1011 + 1.0))) + _1016) * _938;
        float _1026 = _906 * 0.5;
        float _1027 = _916 * 0.5;
        float _1028 = _926 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_514, _515, _516), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_939 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3729 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1053 + 1.0))) + _1058) * _939;
        _1075 = _906;
        _1077 = _905;
        _1078 = _904;
        _1079 = _916;
        _1080 = _915;
        _1081 = _914;
        _1082 = _926;
        _1083 = _925;
        _1084 = _924;
        _1085 = _939;
        _1086 = _938;
        _1087 = _937;
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
        _1089 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1090 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
    }
    else
    {
        _1075 = _1076;
        _1077 = _1076;
        _1078 = _1076;
        _1079 = _1076;
        _1080 = _1076;
        _1081 = _1076;
        _1082 = _1076;
        _1083 = _1076;
        _1084 = _1076;
        _1085 = _1076;
        _1086 = _1076;
        _1087 = _1076;
        _1088 = 0.0;
        _1089 = 0.0;
        _1090 = 0.0;
    }
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1118 = fma(_747, cbModelParam._m0[30u].z, fma(_743, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _739));
        float _1122 = fma(_747, cbModelParam._m0[31u].z, fma(_743, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _739));
        float _1126 = fma(_747, cbModelParam._m0[32u].z, fma(_743, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _739));
        float _1149 = _739 + _514;
        float _1150 = _743 + _515;
        float _1151 = _747 + _516;
        float _1161 = fma(_1151, cbModelParam._m0[30u].z, fma(_1150, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1149)) - _1118;
        float _1162 = fma(_1151, cbModelParam._m0[31u].z, fma(_1150, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1149)) - _1122;
        float _1163 = fma(_1151, cbModelParam._m0[32u].z, fma(_1150, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1149)) - _1126;
        float _1167 = inversesqrt(dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163)));
        float _1180 = ((_1167 * _1161) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1118 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1181 = ((_1167 * _1162) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1122 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1182 = ((_1167 * _1163) / cbModelParam._m0[35u].z) + ((((((_1126 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1180, _1181, _1182), 0.0);
        float _1217 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1184.x + (-0.5));
        float _1219 = _1217 * (_1184.y + (-0.5));
        float _1220 = _1217 * (_1184.z + (-0.5));
        float _1227 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1191.x + (-0.5));
        float _1229 = _1227 * (_1191.y + (-0.5));
        float _1230 = _1227 * (_1191.z + (-0.5));
        float _1237 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1198.x + (-0.5));
        float _1239 = _1237 * (_1198.y + (-0.5));
        float _1240 = _1237 * (_1198.z + (-0.5));
        float _1247 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1205.x + (-0.5));
        float _1249 = _1247 * (_1205.y + (-0.5));
        float _1250 = _1247 * (_1205.z + (-0.5));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1253 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1254 = _1218 * 0.5;
        float _1255 = _1228 * 0.5;
        float _1256 = _1238 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_514, _515, _516), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3792 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1281 + 1.0))) + _1286) * _1251;
        float _1296 = _1219 * 0.5;
        float _1297 = _1229 * 0.5;
        float _1298 = _1239 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_514, _515, _516), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1252 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3825 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1323 + 1.0))) + _1328) * _1252;
        float _1338 = _1220 * 0.5;
        float _1339 = _1230 * 0.5;
        float _1340 = _1240 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_514, _515, _516), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1253 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3858 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1365 + 1.0))) + _1370) * _1253;
        _1387 = _1220;
        _1388 = _1219;
        _1389 = _1218;
        _1390 = _1230;
        _1391 = _1229;
        _1392 = _1228;
        _1393 = _1240;
        _1394 = _1239;
        _1395 = _1238;
        _1396 = _1253;
        _1397 = _1252;
        _1398 = _1251;
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1400 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1401 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1076;
        _1388 = _1076;
        _1389 = _1076;
        _1390 = _1076;
        _1391 = _1076;
        _1392 = _1076;
        _1393 = _1076;
        _1394 = _1076;
        _1395 = _1076;
        _1396 = _1076;
        _1397 = _1076;
        _1398 = _1076;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1088)) + _1088;
    float _1412 = (cbModelParam._m0[1u].x * (_1400 - _1089)) + _1089;
    float _1413 = (cbModelParam._m0[1u].x * (_1401 - _1090)) + _1090;
    float _1434 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1437 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1440 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1411));
    float _1455 = _687 * 0.5;
    float _1456 = _688 * 0.5;
    float _1457 = _689 * 0.5;
    float _1458 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1389, _1392, _1395, _1398));
    float _1461 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1388, _1391, _1394, _1397));
    float _1464 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1498;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1471 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1075, _1079, _1082, _1085));
        float _1475 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1077, _1080, _1083, _1086));
        float _1479 = dot(vec4(_1455, _1456, _1457, 1.0), vec4(_1078, _1081, _1084, _1087));
        float _1486 = dot(vec4(cbModelParam._m0[39u]), vec4(_1455, _1456, _1457, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1486) ? 0.0 : (isnan(0.0) ? _1486 : max(0.0, _1486))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1509;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1500 = dot(vec4(cbModelParam._m0[40u]), vec4(_1455, _1456, _1457, 1.0));
        _1509 = dot(vec3(isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1500) ? 0.0 : (isnan(0.0) ? _1500 : max(0.0, _1500))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1509 = 1.0;
    }
    float _1513 = (_1509 * cbModelParam._m0[1u].x) + (_1498 * (1.0 - cbModelParam._m0[1u].x));
    float _1523 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1524 = isnan(_1523) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1523 : min(cbModelParam._m0[25u].z, _1523));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1573 = fma(_747, cbModelParam._m0[13u].z, fma(_743, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _739)) + cbModelParam._m0[13u].w;
        float _1577 = fma(_747, cbModelParam._m0[14u].z, fma(_743, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _739)) + cbModelParam._m0[14u].w;
        float _1581 = fma(_747, cbModelParam._m0[15u].z, fma(_743, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _739)) + cbModelParam._m0[15u].w;
        float _1584 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1587 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1590 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1618;
        if (_1584 > 0.0)
        {
            _1618 = abs((1.0 - _1573) / _1584);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1573 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1618 = frontier_phi_17_15_ladder;
        }
        float _1821;
        if (_1587 > 0.0)
        {
            _1821 = abs((1.0 - _1577) / _1587);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1577 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1821 = frontier_phi_26_22_ladder;
        }
        float _2064;
        if (_1590 > 0.0)
        {
            _2064 = abs((1.0 - _1581) / _1590);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1581 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2064 = frontier_phi_38_33_ladder;
        }
        float _2066 = isnan(_1821) ? _1618 : (isnan(_1618) ? _1821 : min(_1618, _1821));
        float _2067 = isnan(_2064) ? _2066 : (isnan(_2066) ? _2064 : min(_2066, _2064));
        float _2071 = (_2067 * _1584) + _1573;
        float _2072 = (_2067 * _1587) + _1577;
        float _2073 = (_2067 * _1590) + _1581;
        float _2074 = _2067 * 9.9999997473787516355514526367188e-05;
        float _2076 = (-1.0) - _2074;
        float _2078 = _2074 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2073 > _2078) || ((_2073 < _2076) || ((_2072 > _2078) || ((_2072 < _2076) || ((_2071 < _2076) || (_2071 > _2078))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2197 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2073, cbModelParam._m0[9u].z, fma(_2072, cbModelParam._m0[9u].y, _2071 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2073, cbModelParam._m0[10u].z, fma(_2072, cbModelParam._m0[10u].y, _2071 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2073, cbModelParam._m0[11u].z, fma(_2072, cbModelParam._m0[11u].y, _2071 * cbModelParam._m0[11u].x))), _1524);
            frontier_phi_16_38_ladder = _2197.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2197.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2197.x * cbModelParam._m0[1u].y;
        }
        _1606 = frontier_phi_16_38_ladder_2;
        _1608 = frontier_phi_16_38_ladder_1;
        _1610 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1524);
        _1606 = _1594.x * cbModelParam._m0[1u].y;
        _1608 = _1594.y * cbModelParam._m0[1u].y;
        _1610 = _1594.z * cbModelParam._m0[1u].y;
    }
    float _1614 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1615 = isnan(_1614) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1614 : min(cbModelParam._m0[25u].w, _1614));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1669 = fma(_747, cbModelParam._m0[21u].z, fma(_743, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _739)) + cbModelParam._m0[21u].w;
        float _1673 = fma(_747, cbModelParam._m0[22u].z, fma(_743, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _739)) + cbModelParam._m0[22u].w;
        float _1677 = fma(_747, cbModelParam._m0[23u].z, fma(_743, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _739)) + cbModelParam._m0[23u].w;
        float _1680 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1683 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1686 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1826;
        if (_1680 > 0.0)
        {
            _1826 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1826 = frontier_phi_28_24_ladder;
        }
        float _2091;
        if (_1683 > 0.0)
        {
            _2091 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2091 = frontier_phi_40_35_ladder;
        }
        float _2296;
        if (_1686 > 0.0)
        {
            _2296 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2296 = frontier_phi_49_46_ladder;
        }
        float _2298 = isnan(_2091) ? _1826 : (isnan(_1826) ? _2091 : min(_1826, _2091));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1680) + _1669;
        float _2304 = (_2299 * _1683) + _1673;
        float _2305 = (_2299 * _1686) + _1677;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2305, cbModelParam._m0[17u].z, fma(_2304, cbModelParam._m0[17u].y, _2303 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2305, cbModelParam._m0[18u].z, fma(_2304, cbModelParam._m0[18u].y, _2303 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2305, cbModelParam._m0[19u].z, fma(_2304, cbModelParam._m0[19u].y, _2303 * cbModelParam._m0[19u].x))), _1615);
            frontier_phi_25_49_ladder = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1705 = frontier_phi_25_49_ladder_2;
        _1707 = frontier_phi_25_49_ladder_1;
        _1709 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1615);
        _1705 = _1689.x * cbModelParam._m0[1u].z;
        _1707 = _1689.y * cbModelParam._m0[1u].z;
        _1709 = _1689.z * cbModelParam._m0[1u].z;
    }
    float _1721 = ((((1.0 - _707) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_707 * _695)) * _679;
    float _1722 = _1721 * ((cbModelParam._m0[1u].w * (_1705 - _1606)) + _1606);
    float _1723 = _1721 * ((cbModelParam._m0[1u].w * (_1707 - _1608)) + _1608);
    float _1724 = _1721 * ((cbModelParam._m0[1u].w * (_1709 - _1610)) + _1610);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, _1722 * cbSceneParam._m0[91u].x));
    uvec4 _1743 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _1745 = _1743.x * 14u;
    uint _1746 = _1745 + 13u;
    float _1753 = _679 + (-1.0);
    float _1758 = (cbLight._m0[_1746].x * _1753) + 1.0;
    float _1759 = (cbLight._m0[_1746].y * _1753) + 1.0;
    float _1760 = (cbLight._m0[_1746].z * _1753) + 1.0;
    float _1761 = (cbLight._m0[_1746].w * _1753) + 1.0;
    uint _1762 = _1745 + 5u;
    float _1768 = isnan(1.0) ? _1759 : (isnan(_1759) ? 1.0 : min(_1759, 1.0));
    uint _1772 = _1745 + 4u;
    float _1779 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1783 = _1745 | 1u;
    float _1794 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_514, _515, _516));
    float _1797 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_514, _515, _516));
    float _3994 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _4005 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1802 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * 0.3183098733425140380859375;
    float _1804 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * 0.3183098733425140380859375;
    float _1811 = ((cbLight._m0[_1762].x * _1768) * _1804) + ((cbLight._m0[_1772].x * _1779) * _1802);
    float _1812 = ((_1768 * cbLight._m0[_1762].y) * _1804) + ((_1779 * cbLight._m0[_1772].y) * _1802);
    float _1813 = ((_1768 * cbLight._m0[_1762].z) * _1804) + ((_1779 * cbLight._m0[_1772].z) * _1802);
    uvec4 _1818 = floatBitsToUint(cbLight._m0[_1745 + 12u]);
    bool _1820 = _1818.x == 0u;
    float _1831;
    float _1833;
    float _1835;
    if (_1820)
    {
        _1831 = _1811;
        _1833 = _1812;
        _1835 = _1813;
    }
    else
    {
        uint _1839 = _1745 + 6u;
        float _1855 = (dot(vec3(cbLight._m0[_1745 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _1856 = _1855 * _1855;
        float _4016 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1858 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _1831 = (((cbLight._m0[_1839].x * 0.3183098733425140380859375) * _1857) * _1858) + _1811;
        _1833 = (((cbLight._m0[_1839].y * 0.3183098733425140380859375) * _1857) * _1858) + _1812;
        _1835 = (((cbLight._m0[_1839].z * 0.3183098733425140380859375) * _1857) * _1858) + _1813;
    }
    bool _1838 = _1818.y == 0u;
    float _1876;
    float _1878;
    float _1880;
    if (_1838)
    {
        _1876 = _1831;
        _1878 = _1833;
        _1880 = _1835;
    }
    else
    {
        uint _2035 = _1745 + 7u;
        float _2051 = (dot(vec3(cbLight._m0[_1745 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2052 = _2051 * _2051;
        float _4032 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
        float _2053 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2054 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _1876 = (((cbLight._m0[_2035].x * 0.3183098733425140380859375) * _2053) * _2054) + _1831;
        _1878 = (((cbLight._m0[_2035].y * 0.3183098733425140380859375) * _2053) * _2054) + _1833;
        _1880 = (((cbLight._m0[_2035].z * 0.3183098733425140380859375) * _2053) * _2054) + _1835;
    }
    uint _1883 = _1745 + 8u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1745].w)) * _517) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1745].x + _593;
    float _1899 = cbLight._m0[_1745].y + _594;
    float _1900 = cbLight._m0[_1745].z + _595;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1745].xyz));
    float _4048 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1912 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _1913 = dot(vec3(_514, _515, _516), vec3(_1905, _1906, _1907));
    float _4070 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _1917 = dot(vec3(cbLight._m0[_1745].xyz), vec3(_1905, _1906, _1907));
    float _4081 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1921 = _1897 * _1897;
    float _1925 = ((_1916 * _1916) * (_1921 + (-1.0))) + 1.0;
    float _1936 = (exp2(log2(1.0 - (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1937 = 1.0 - _1897;
    float _1948 = (0.5 / (((_1912 * ((_1911 * _1937) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _1937) + _1897) * _1911))) * _1911;
    float _4092 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1950 = (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1921 / ((_1925 * _1925) * 3.141590118408203125));
    uint _1961 = _1745 + 9u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _517) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1783].x + _593;
    float _1975 = cbLight._m0[_1783].y + _594;
    float _1976 = cbLight._m0[_1783].z + _595;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1783].xyz));
    float _4103 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _1988 = dot(vec3(_514, _515, _516), vec3(_1981, _1982, _1983));
    float _4114 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1981, _1982, _1983));
    float _4125 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1973 * _1973;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = 1.0 - _1973;
    float _2020 = (0.5 / (((_1912 * ((_1987 * _2010) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2010) + _1973) * _1987))) * _1987;
    float _4136 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2022 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    float _2032 = (((_2009 * cbLight._m0[_1961].x) * _2022) * _1768) + (((_1936 * cbLight._m0[_1883].x) * _1950) * _1779);
    float _2033 = (((_2009 * cbLight._m0[_1961].y) * _2022) * _1768) + (((_1936 * cbLight._m0[_1883].y) * _1950) * _1779);
    float _2034 = (((_2009 * cbLight._m0[_1961].z) * _2022) * _1768) + (((_1936 * cbLight._m0[_1883].z) * _1950) * _1779);
    float _2096;
    float _2098;
    float _2100;
    if (_1820)
    {
        _2096 = _2032;
        _2098 = _2033;
        _2100 = _2034;
    }
    else
    {
        uint _2102 = _1745 + 2u;
        uint _2106 = _1745 + 10u;
        float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _517) * 0.949999988079071044921875);
        float _2121 = _2120 * _2120;
        float _2122 = cbLight._m0[_2102].x + _593;
        float _2123 = cbLight._m0[_2102].y + _594;
        float _2124 = cbLight._m0[_2102].z + _595;
        float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
        float _2129 = _2128 * _2122;
        float _2130 = _2128 * _2123;
        float _2131 = _2128 * _2124;
        float _2132 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2102].xyz));
        float _4147 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _2136 = dot(vec3(_514, _515, _516), vec3(_2129, _2130, _2131));
        float _4158 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2140 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2129, _2130, _2131));
        float _4169 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2144 = _2121 * _2121;
        float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
        float _2157 = (exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2158 = 1.0 - _2121;
        float _2168 = (0.5 / (((_1912 * ((_2135 * _2158) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2158) + _2121) * _2135))) * _2135;
        float _4180 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2170 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
        float _2171 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
        _2096 = (((_2157 * cbLight._m0[_2106].x) * _2170) * _2171) + _2032;
        _2098 = (((_2157 * cbLight._m0[_2106].y) * _2170) * _2171) + _2033;
        _2100 = (((_2157 * cbLight._m0[_2106].z) * _2170) * _2171) + _2034;
    }
    float _2206;
    float _2208;
    float _2210;
    if (_1838)
    {
        _2206 = _2096;
        _2208 = _2098;
        _2210 = _2100;
    }
    else
    {
        uint _2217 = _1745 + 3u;
        uint _2221 = _1745 + 11u;
        float _2235 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _517) * 0.949999988079071044921875);
        float _2236 = _2235 * _2235;
        float _2237 = cbLight._m0[_2217].x + _593;
        float _2238 = cbLight._m0[_2217].y + _594;
        float _2239 = cbLight._m0[_2217].z + _595;
        float _2243 = inversesqrt(dot(vec3(_2237, _2238, _2239), vec3(_2237, _2238, _2239)));
        float _2244 = _2243 * _2237;
        float _2245 = _2243 * _2238;
        float _2246 = _2243 * _2239;
        float _2247 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2217].xyz));
        float _4196 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2250 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2251 = dot(vec3(_514, _515, _516), vec3(_2244, _2245, _2246));
        float _4207 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2255 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2244, _2245, _2246));
        float _4218 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2259 = _2236 * _2236;
        float _2263 = ((_2254 * _2254) * (_2259 + (-1.0))) + 1.0;
        float _2272 = (exp2(log2(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2273 = 1.0 - _2236;
        float _2283 = (0.5 / (((_1912 * ((_2250 * _2273) + _2236)) + 9.9999999392252902907785028219223e-09) + (((_1912 * _2273) + _2236) * _2250))) * _2250;
        float _4229 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2285 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_2259 / ((_2263 * _2263) * 3.141590118408203125));
        float _2286 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
        _2206 = (((_2272 * cbLight._m0[_2221].x) * _2285) * _2286) + _2096;
        _2208 = (((_2272 * cbLight._m0[_2221].y) * _2285) * _2286) + _2098;
        _2210 = (((_2272 * cbLight._m0[_2221].z) * _2285) * _2286) + _2100;
    }
    float _2421;
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    if (_1743.y == 0u)
    {
        float _2361 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2361;
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2361;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2361;
        uvec4 _2376 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2377 = _2376.x;
        uint _2388 = uint((float(_2376.y) * floor(float(uint(cbSceneParam._m0[85u].y * _615) / _2377))) + floor(float(uint(cbSceneParam._m0[85u].x * _614) / _2377)));
        float _2398 = (log2(_2364 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2399 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        uint _2402 = uint(isnan(14.0) ? _2399 : (isnan(_2399) ? 14.0 : min(_2399, 14.0)));
        uvec4 _2407 = texelFetch(g_lightClusterGridBuffer, int(((_2402 << 2u) + (_2388 << 6u)) >> 2u));
        uint _2408 = _2407.x;
        uint _2409 = _2376.z;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        if (((((1u << ((_2409 >> 4u) & 15u)) + 4294967295u) & _2408) == 0u) || ((_2409 & 240u) == 0u))
        {
            _2509 = 0.0;
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
        }
        else
        {
            float _2510;
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            uint _2668 = 0u;
            uint _2677;
            bool _2678;
            for (;;)
            {
                _2677 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2668 << 2u)) >> 2u)).x;
                _2678 = _2677 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2678)
                {
                    frontier_phi_66_pred = _2662;
                    frontier_phi_66_pred_1 = _2667;
                    frontier_phi_66_pred_2 = _2666;
                    frontier_phi_66_pred_3 = _2665;
                    frontier_phi_66_pred_4 = _2664;
                    frontier_phi_66_pred_5 = _2663;
                }
                else
                {
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    uint _2813;
                    _2807 = _2662;
                    _2808 = _2663;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2677;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    for (;;)
                    {
                        uint _2817 = uint(findLSB(_2813)) + (_2668 << 5u);
                        uint _2814 = (_2813 + 4294967295u) & _2813;
                        uint _2819 = _2817 * 48u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2819)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2819 + 3u)).x));
                        uint _2839 = (_2817 * 48u) + 4u;
                        vec4 _2852 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 3u)).x));
                        uint _2858 = (_2817 * 48u) + 8u;
                        vec3 _2869 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x));
                        float _2873 = _2833.x - _2362;
                        float _2874 = _2833.y - _2363;
                        float _2875 = _2833.z - _2364;
                        float _2876 = dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875));
                        float _2879 = inversesqrt(_2876);
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2883 = dot(vec3(_635, _638, _641), vec3(_2880, _2881, _2882));
                        float _2888 = 1.0 - (_2876 * _2833.w);
                        float _4255 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2890 = sqrt(_2876) * _2852.w;
                        float _2893 = 1.39999997615814208984375 / (_2890 + 1.39999997615814208984375);
                        float _2894 = _2893 * _2893;
                        float _2897 = ((1.0 - _2894) * _2883) + _2894;
                        float _2900 = _2890 * _2890;
                        float _2904 = ((isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))) * _2889) / ((_2900 * 0.699999988079071044921875) + 1.0);
                        float _2908 = (-0.0) - _2362;
                        float _2909 = (-0.0) - _2363;
                        float _2910 = (-0.0) - _2364;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2915 = _2914 * _2908;
                        float _2916 = _2914 * _2909;
                        float _2917 = _2914 * _2910;
                        float _2925 = exp2(log2(1.0 / ((_2900 * 3.5) + 5.0)) * 0.25);
                        float _2926 = 1.0 - _695;
                        float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                        float _2934 = _2933 * _2933;
                        float _2935 = _2934 * _2934;
                        float _2936 = _2915 + _2880;
                        float _2937 = _2916 + _2881;
                        float _2938 = _2917 + _2882;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2946 = dot(vec3(_635, _638, _641), vec3(_2915, _2916, _2917));
                        float _4271 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                        float _2950 = dot(vec3(_635, _638, _641), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                        float _4282 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                        float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                        float _2958 = _2893 * _2934;
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2883) + _2959;
                        float _4293 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                        float _2964 = 1.0 - _2934;
                        float _2974 = (0.5 / (((_2963 * ((_2949 * _2964) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2934) * _2949))) * _2963;
                        float _4304 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2984 = (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_2957 * _2957) * ((_2900 * 2.1991131305694580078125) + 3.141590118408203125))) * _2889;
                        _2737 = (_2904 * _2852.x) + _2810;
                        _2738 = (_2904 * _2852.y) + _2811;
                        _2739 = (_2904 * _2852.z) + _2812;
                        _2734 = (_2984 * _2869.x) + _2807;
                        _2735 = (_2984 * _2869.y) + _2808;
                        _2736 = (_2984 * _2869.z) + _2809;
                        if (_2814 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2814;
                        }
                    }
                    frontier_phi_66_pred = _2734;
                    frontier_phi_66_pred_1 = _2739;
                    frontier_phi_66_pred_2 = _2738;
                    frontier_phi_66_pred_3 = _2737;
                    frontier_phi_66_pred_4 = _2736;
                    frontier_phi_66_pred_5 = _2735;
                }
                _2510 = frontier_phi_66_pred;
                _2520 = frontier_phi_66_pred_1;
                _2518 = frontier_phi_66_pred_2;
                _2516 = frontier_phi_66_pred_3;
                _2514 = frontier_phi_66_pred_4;
                _2512 = frontier_phi_66_pred_5;
                uint _2669 = _2668 + 1u;
                if (_2669 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2662 = _2510;
                    _2663 = _2512;
                    _2664 = _2514;
                    _2665 = _2516;
                    _2666 = _2518;
                    _2667 = _2520;
                    _2668 = _2669;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2509 = _2510;
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
        }
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.z;
        uint _2526 = (_2524 >> 8u) & 15u;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        if (((4294967295u << _2526) & _2408) == 0u)
        {
            _2630 = _2509;
            _2632 = _2511;
            _2634 = _2513;
            _2636 = _2515;
            _2638 = _2517;
            _2640 = _2519;
        }
        else
        {
            float _2655 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
            float _2656 = _2655 * _2362;
            float _2657 = _2655 * _2363;
            float _2658 = _2655 * _2364;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2526 < ((_2524 >> 12u) & 15u))
            {
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2790 = _2509;
                float _2791 = _2511;
                float _2792 = _2513;
                float _2793 = _2515;
                float _2794 = _2517;
                float _2795 = _2519;
                uint _2796 = _2526;
                uint _2805;
                bool _2806;
                for (;;)
                {
                    _2805 = texelFetch(g_lightClassification, int((((_2402 << 5u) + (_2388 << 9u)) + (_2796 << 2u)) >> 2u)).x;
                    _2806 = _2805 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2806)
                    {
                        frontier_phi_77_pred = _2795;
                        frontier_phi_77_pred_1 = _2794;
                        frontier_phi_77_pred_2 = _2793;
                        frontier_phi_77_pred_3 = _2792;
                        frontier_phi_77_pred_4 = _2791;
                        frontier_phi_77_pred_5 = _2790;
                    }
                    else
                    {
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3011 = _2790;
                        float _3012 = _2791;
                        float _3013 = _2792;
                        float _3014 = _2793;
                        float _3015 = _2794;
                        float _3016 = _2795;
                        uint _3017 = _2805;
                        uint _3018;
                        vec4 _3043;
                        float _3044;
                        vec4 _3059;
                        vec3 _3071;
                        vec4 _3087;
                        vec4 _3103;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3028 = ((_2796 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3017));
                            _3018 = (_3017 + 4294967295u) & _3017;
                            uint _3030 = _3028 * 40u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3044 = _3043.w;
                            uint _3046 = (_3028 * 40u) + 4u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3061 = (_3028 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3074 = (_3028 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3028 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3028 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3028 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_2364, _3137.z, fma(_2363, _3137.y, _3137.x * _2362)) + _3137.w;
                            _3150 = !((fma(_2364, _3118.z, fma(_2363, _3118.y, _3118.x * _2362)) + _3118.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3043.x - _2362;
                                float _3178 = _3043.y - _2363;
                                float _3179 = _3043.z - _2364;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3044 * _3044));
                                float _4315 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3195 = sqrt(_3180) * _3059.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_635, _638, _641))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_2364, _3087.z, fma(_2363, _3087.y, _3087.x * _2362)) + _3087.w) / _3149;
                                float _3209 = (fma(_2364, _3103.z, fma(_2363, _3103.y, _3103.x * _2362)) + _3103.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4331 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _695;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2656;
                                float _3239 = _3185 - _2657;
                                float _3240 = _3186 - _2658;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_635, _638, _641), vec3((-0.0) - _2656, (-0.0) - _2657, (-0.0) - _2658));
                                float _4342 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                                float _3252 = dot(vec3(_635, _638, _641), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4353 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_635, _638, _641), vec3(_3184, _3185, _3186))) + _3261;
                                float _4364 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4375 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3215 * _3059.y;
                                frontier_phi_83_pred_1 = _3215 * _3059.x;
                                frontier_phi_83_pred_2 = _3289 * _3071.z;
                                frontier_phi_83_pred_3 = _3289 * _3071.y;
                                frontier_phi_83_pred_4 = _3289 * _3071.x;
                                frontier_phi_83_pred_5 = _3215 * _3059.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3297 = frontier_phi_83_pred;
                            _3296 = frontier_phi_83_pred_1;
                            _3295 = frontier_phi_83_pred_2;
                            _3294 = frontier_phi_83_pred_3;
                            _3293 = frontier_phi_83_pred_4;
                            _3298 = frontier_phi_83_pred_5;
                            _3001 = _3296 + _3014;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            _2998 = _3293 + _3011;
                            _2999 = _3294 + _3012;
                            _3000 = _3295 + _3013;
                            if (_3018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3018;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3003;
                        frontier_phi_77_pred_1 = _3002;
                        frontier_phi_77_pred_2 = _3001;
                        frontier_phi_77_pred_3 = _3000;
                        frontier_phi_77_pred_4 = _2999;
                        frontier_phi_77_pred_5 = _2998;
                    }
                    _2641 = frontier_phi_77_pred;
                    _2639 = frontier_phi_77_pred_1;
                    _2637 = frontier_phi_77_pred_2;
                    _2635 = frontier_phi_77_pred_3;
                    _2633 = frontier_phi_77_pred_4;
                    _2631 = frontier_phi_77_pred_5;
                    uint _2797 = _2796 + 1u;
                    if (_2797 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2790 = _2631;
                        _2791 = _2633;
                        _2792 = _2635;
                        _2793 = _2637;
                        _2794 = _2639;
                        _2795 = _2641;
                        _2796 = _2797;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2635;
                frontier_phi_58_59_ladder_1 = _2641;
                frontier_phi_58_59_ladder_2 = _2639;
                frontier_phi_58_59_ladder_3 = _2637;
                frontier_phi_58_59_ladder_4 = _2633;
                frontier_phi_58_59_ladder_5 = _2631;
            }
            else
            {
                frontier_phi_58_59_ladder = _2513;
                frontier_phi_58_59_ladder_1 = _2519;
                frontier_phi_58_59_ladder_2 = _2517;
                frontier_phi_58_59_ladder_3 = _2515;
                frontier_phi_58_59_ladder_4 = _2511;
                frontier_phi_58_59_ladder_5 = _2509;
            }
            _2630 = frontier_phi_58_59_ladder_5;
            _2632 = frontier_phi_58_59_ladder_4;
            _2634 = frontier_phi_58_59_ladder;
            _2636 = frontier_phi_58_59_ladder_3;
            _2638 = frontier_phi_58_59_ladder_2;
            _2640 = frontier_phi_58_59_ladder_1;
        }
        float _2645 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2421 = (_2645 * _2636) + _1876;
        _2423 = (_2645 * _2638) + _1878;
        _2425 = (_2645 * _2640) + _1880;
        _2427 = ((_2630 * 0.039999999105930328369140625) * _2645) + _2206;
        _2429 = ((_2632 * 0.039999999105930328369140625) * _2645) + _2208;
        _2431 = ((_2634 * 0.039999999105930328369140625) * _2645) + _2210;
    }
    else
    {
        _2421 = _1876;
        _2423 = _1878;
        _2425 = _1880;
        _2427 = _2206;
        _2429 = _2208;
        _2431 = _2210;
    }
    float _4391 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4402 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4413 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2448 = ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_2421 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _679))) + ((_2427 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1513)) * cbPerFrame._m0[3u].x);
    float _2449 = ((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2423 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _679))) + ((_2429 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1513)) * cbPerFrame._m0[3u].x);
    float _2450 = ((isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * (_2425 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _679))) + ((_2431 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1513)) * cbPerFrame._m0[3u].x);
    uint _2451 = _291 + 6u;
    float _2459 = _614 / cbSceneParam._m0[86u].x;
    float _2460 = _615 / cbSceneParam._m0[86u].y;
    vec4 _2474 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2476 = _2474.x;
    float _2477 = _2474.y;
    float _2478 = _2474.z;
    float _2479 = _2474.w;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2534 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2535 = _2534 / _535;
        float _2546 = _2535 * _586;
        float _2547 = _587 * _2535;
        float _2548 = (-0.0) - _2547;
        float _2550 = _2535 * _588;
        float _2552 = (cbSceneParam._m0[77u].w * _2548) / _2534;
        float _2553 = _2552 + cbSceneParam._m0[79u].w;
        float _2554 = cbSceneParam._m0[79u].w - _2547;
        float _2560 = sqrt(((_2546 * _2546) + (_2547 * _2547)) + (_2550 * _2550));
        float _2563 = (1.0 - (cbSceneParam._m0[77u].w / _2534)) * _2560;
        float _2568 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2570 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2747;
        if (abs((_2548 - _2552) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2747 = ((((_2553 > 0.0) ? exp2(_2568 * _2553) : (2.0 - exp2(_2570 * _2553))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2563;
        }
        else
        {
            float _2691 = 1.0 / cbSceneParam._m0[80u].x;
            float _2692 = isnan(_2554) ? _2553 : (isnan(_2553) ? _2554 : max(_2553, _2554));
            float _2693 = isnan(_2554) ? _2553 : (isnan(_2553) ? _2554 : min(_2553, _2554));
            float _2702 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : min(_2692, 0.0));
            float _2703 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : min(_2693, 0.0));
            _2747 = ((abs(_2560 / _2548) * cbSceneParam._m0[80u].y) * ((((_2702 - _2703) * 2.0) - ((exp2(_2568 * (isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0)))) - exp2(_2568 * (isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0))))) * _2691)) - ((exp2(_2570 * _2702) - exp2(_2570 * _2703)) * _2691))) + (_2563 * cbSceneParam._m0[80u].z);
        }
        vec4 _2749 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2459, _2460, 1.0), 0.0);
        float _2758 = exp2((_2747 * (-1.44269502162933349609375)) * (1.0 - _2749.w));
        float _2759 = log2(_2758);
        float _2775 = log2(_2479);
        _2572 = (exp2(_2775 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].x)) * _2749.x) / cbSceneParam._m0[78u].x)) + _2476;
        _2574 = (exp2(_2775 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].y)) * _2749.y) / cbSceneParam._m0[78u].y)) + _2477;
        _2576 = (exp2(_2775 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2759 * cbSceneParam._m0[78u].z)) * _2749.z) / cbSceneParam._m0[78u].z)) + _2478;
        _2578 = _2758 * _2479;
    }
    else
    {
        _2572 = _2476;
        _2574 = _2477;
        _2576 = _2478;
        _2578 = _2479;
    }
    bool _2785;
    vec4 _2588;
    vec4 _2610;
    float _2612;
    float _2616;
    float _2617;
    float _2618;
    float _2619;
    bool _2629;
    for (;;)
    {
        _2588 = cbMatDynParam._m0[0u];
        float _2590 = roundEven(_2588.y);
        bool _2591 = _2590 == 3.0;
        float _2592 = log2(_2578);
        float _2599 = exp2(_2592 * cbSceneParam._m0[78u].x) * _2448;
        float _2600 = exp2(_2592 * cbSceneParam._m0[78u].y) * _2449;
        float _2601 = exp2(_2592 * cbSceneParam._m0[78u].z) * _2450;
        float _2608 = _602 + (-0.5);
        _2610 = cbMtdParam._m0[1u];
        _2612 = _2610.y * _2608;
        float _2615 = (_2590 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2616 = _2615 * (_2591 ? _2599 : (_2599 + (cbSceneParam._m0[72u].w * _2572)));
        _2617 = _2615 * (_2591 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2574)));
        _2618 = _2615 * (_2591 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2576)));
        _2619 = _2608 * 0.999000012874603271484375;
        _2629 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2629)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _2619) < 0.5)
            {
                _2785 = true;
                break;
            }
        }
        uint _2726 = _654 + uint(_2588.w);
        if ((cbInstanceData._m0[_2726].w < 1.0) && ((cbInstanceData._m0[_2726].w + _2619) < 0.5))
        {
            _2785 = true;
            break;
        }
        if ((_2612 + 1.0) < _2610.x)
        {
            _2785 = true;
            break;
        }
        _2785 = false;
        break;
    }
    float _2989;
    if (_2785)
    {
        discard_state = true;
        _2989 = 0.0;
    }
    else
    {
        _2989 = cbInstanceData._m0[_2451].w;
    }
    SV_Target.x = _2616;
    SV_Target.y = _2617;
    SV_Target.z = _2618;
    SV_Target.w = _2989;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2451].w;
    discard_exit();
}


