#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1348;
float _3705;
float _3706;
float _3707;
float _3708;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _362 = _360.x;
    float _372 = dot(vec4(_362, _360.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _389 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_362 - _372) * cbMtdParam._m0[24u].x) + _372) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3717 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _397 = (_390 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _398 = (_390 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _399 = (_390 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _274) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _275) + cbTextureTilingScale._m0[14u].w));
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _274) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _275) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _390) + _486;
    float _498 = ((((_465.x - _484) * _390) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _390) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3728 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))));
    float _508 = _498 + ((((_438.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _509 = _499 + ((((_438.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _512 = fma(_505, _243, fma(_509, _250, _508 * _236));
    float _515 = fma(_505, _244, fma(_509, _251, _508 * _237));
    float _518 = fma(_505, _245, fma(_509, _252, _508 * _238));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _566 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _274) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _275) + cbTextureTilingScale._m0[11u].w));
    float _568 = _566.x;
    float _569 = 1.0 - _568;
    float _573 = ((_568 - _569) * cbMtdParam._m0[24u].z) + _569;
    float _575 = (cbMtdParam._m0[19u].x + dot(vec4(_522 * _512, _522 * _515, _522 * _518, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_573 * cbMtdParam._m0[21u].z);
    float _3739 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _578 = (-0.0) - cbMtdParam._m0[24u].y;
    float _580 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _580 : (isnan(_580) ? 1.0 : min(_580, 1.0));
    float _588 = _576 - ((_576 * TEXCOORD_8.x) * _581);
    float _589 = _576 - ((_576 * TEXCOORD_8.y) * _581);
    float _590 = _576 - ((_576 * TEXCOORD_8.z) * _581);
    float _597 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _601 = ((isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : min(_597, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _609 = (_601 - (((_573 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _601))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3770 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _614 = ((_588 * ((_418.x * cbMtdParam._m0[18u].x) - _397)) * _610) + _397;
    float _615 = ((_589 * ((_418.y * cbMtdParam._m0[18u].y) - _398)) * _610) + _398;
    float _616 = ((_590 * ((_418.z * cbMtdParam._m0[18u].z) - _399)) * _610) + _399;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _630 = _628.x;
    float _631 = 1.0 - _630;
    float _658 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_630 - _631) * cbMtdParam._m0[24u].w) + _631) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3781 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _667 = ((((cbMtdParam._m0[10u].x - _614) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _659) + _614;
    float _668 = ((((cbMtdParam._m0[10u].y - _615) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _659) + _615;
    float _669 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _616)) * _659) + _616;
    float _674 = (((_438.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    vec4 _688 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _274) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _275) + cbTextureTilingScale._m0[15u].w));
    float _695 = (_688.x * 2.0) + (-1.0);
    float _696 = (_688.y * 2.0) + (-1.0);
    float _697 = dot(vec2(_695, _696), vec2(_695, _696));
    float _3792 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _706 = (((_688.z - _674) * _588) * _610) + _674;
    float _709 = ((cbMtdParam._m0[23u].y - _706) * _659) + _706;
    vec4 _728 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _734 = (_728.x * 2.0) + (-1.0);
    float _735 = (_728.y * 2.0) + (-1.0);
    float _736 = dot(vec2(_734, _735), vec2(_734, _735));
    float _3803 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _756 = (((cbMtdParam._m0[21u].x * _508) + ((_695 - _508) * _588)) * _610) + _508;
    float _757 = (((cbMtdParam._m0[21u].x * _509) + ((_696 - _509) * _589)) * _610) + _509;
    float _758 = (((sqrt(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) - _505) * _590) * _610) + _505;
    float _769 = (((_734 - _756) + (_756 * cbMtdParam._m0[22u].z)) * _659) + _756;
    float _770 = (((_735 - _757) + (_757 * cbMtdParam._m0[22u].z)) * _659) + _757;
    float _771 = ((sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) - _758) * _659) + _758;
    float _773 = cbMtdParam._m0[22u].x + _538.w;
    float _776 = fma(_771, _243, fma(_770, _250, _769 * _236));
    float _779 = fma(_771, _244, fma(_770, _251, _769 * _237));
    float _782 = fma(_771, _245, fma(_770, _252, _769 * _238));
    float _786 = inversesqrt(dot(vec3(_776, _779, _782), vec3(_776, _779, _782)));
    float _787 = _786 * _776;
    float _788 = _786 * _779;
    float _789 = _786 * _782;
    float _3814 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _790 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _3836 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3847 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3858 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _808 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    vec4 _873 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _875 = _873.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1029 = sqrt(((_859 * _859) + (_860 * _860)) + (_861 * _861));
        float _1035 = (cbMatDynParam._m0[5u].x * _1029) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1040 = (cbMatDynParam._m0[5u].z * _1029) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _1036)) + _1036) < ((_875 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_789, cbSceneParam._m0[5u].z, fma(_788, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _787));
    float _908 = fma(_789, cbSceneParam._m0[6u].z, fma(_788, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _787));
    float _911 = fma(_789, cbSceneParam._m0[7u].z, fma(_788, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _787));
    uint _924 = _255 + 9u;
    uint _925 = _924 + uint(cbMatDynParam._m0[0u].w);
    float _931 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_925].x;
    float _932 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_925].y;
    float _933 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_925].z;
    float _3891 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _949 = ((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * TEXCOORD_5.w) * _945.x;
    float _950 = dot(vec3(_787, _788, _789), vec3(_866, _867, _868));
    float _953 = _950 * 2.0;
    float _957 = (_953 * _787) - _866;
    float _958 = (_953 * _788) - _867;
    float _959 = (_953 * _789) - _868;
    float _963 = abs(dot(vec3(_866, _867, _868), vec3(_787, _788, _789)));
    float _3924 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _965 = sqrt(_790);
    float _978 = exp2((_965 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_965 * 3.0));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1347;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1072 = fma(_1018, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010));
        float _1076 = fma(_1018, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010));
        float _1080 = fma(_1018, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010));
        float _1105 = _1010 + _787;
        float _1106 = _1014 + _788;
        float _1107 = _1018 + _789;
        float _1117 = fma(_1107, cbModelParam._m0[26u].z, fma(_1106, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1105)) - _1072;
        float _1118 = fma(_1107, cbModelParam._m0[27u].z, fma(_1106, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1105)) - _1076;
        float _1119 = fma(_1107, cbModelParam._m0[28u].z, fma(_1106, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1105)) - _1080;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1072 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1076 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[34u].z) + ((((((_1080 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1175 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1141.x + (-0.5));
        float _1177 = _1175 * (_1141.y + (-0.5));
        float _1178 = _1175 * (_1141.z + (-0.5));
        float _1185 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1148.x + (-0.5));
        float _1187 = _1185 * (_1148.y + (-0.5));
        float _1188 = _1185 * (_1148.z + (-0.5));
        float _1195 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1155.x + (-0.5));
        float _1197 = _1195 * (_1155.y + (-0.5));
        float _1198 = _1195 * (_1155.z + (-0.5));
        float _1205 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1162.x + (-0.5));
        float _1207 = _1205 * (_1162.y + (-0.5));
        float _1208 = _1205 * (_1162.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1229 = (dot(vec3(_787, _788, _789), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1239 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3972 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1241 + 1.0))) + _1246) * _1209;
        float _1256 = _1177 * 0.5;
        float _1257 = _1187 * 0.5;
        float _1258 = _1197 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_787, _788, _789), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _4005 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1283 + 1.0))) + _1288) * _1210;
        float _1298 = _1178 * 0.5;
        float _1299 = _1188 * 0.5;
        float _1300 = _1198 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_787, _788, _789), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4038 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1325 + 1.0))) + _1330) * _1211;
        _1347 = _1178;
        _1349 = _1177;
        _1350 = _1176;
        _1351 = _1188;
        _1352 = _1187;
        _1353 = _1186;
        _1354 = _1198;
        _1355 = _1197;
        _1356 = _1196;
        _1357 = _1211;
        _1358 = _1210;
        _1359 = _1209;
        _1360 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1361 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1348;
        _1349 = _1348;
        _1350 = _1348;
        _1351 = _1348;
        _1352 = _1348;
        _1353 = _1348;
        _1354 = _1348;
        _1355 = _1348;
        _1356 = _1348;
        _1357 = _1348;
        _1358 = _1348;
        _1359 = _1348;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1390 = fma(_1018, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010));
        float _1394 = fma(_1018, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010));
        float _1398 = fma(_1018, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010));
        float _1421 = _1010 + _787;
        float _1422 = _1014 + _788;
        float _1423 = _1018 + _789;
        float _1433 = fma(_1423, cbModelParam._m0[30u].z, fma(_1422, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421)) - _1390;
        float _1434 = fma(_1423, cbModelParam._m0[31u].z, fma(_1422, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421)) - _1394;
        float _1435 = fma(_1423, cbModelParam._m0[32u].z, fma(_1422, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421)) - _1398;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1452 = ((_1439 * _1433) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1390 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1434) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1394 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1454 = ((_1439 * _1435) / cbModelParam._m0[35u].z) + ((((((_1398 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1452, _1453, _1454), 0.0);
        float _1489 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1456.x + (-0.5));
        float _1491 = _1489 * (_1456.y + (-0.5));
        float _1492 = _1489 * (_1456.z + (-0.5));
        float _1499 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1463.x + (-0.5));
        float _1501 = _1499 * (_1463.y + (-0.5));
        float _1502 = _1499 * (_1463.z + (-0.5));
        float _1509 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1470.x + (-0.5));
        float _1511 = _1509 * (_1470.y + (-0.5));
        float _1512 = _1509 * (_1470.z + (-0.5));
        float _1519 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1477.x + (-0.5));
        float _1521 = _1519 * (_1477.y + (-0.5));
        float _1522 = _1519 * (_1477.z + (-0.5));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = _1490 * 0.5;
        float _1527 = _1500 * 0.5;
        float _1528 = _1510 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_787, _788, _789), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4101 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1553 + 1.0))) + _1558) * _1523;
        float _1568 = _1491 * 0.5;
        float _1569 = _1501 * 0.5;
        float _1570 = _1511 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_787, _788, _789), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4134 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1595 + 1.0))) + _1600) * _1524;
        float _1610 = _1492 * 0.5;
        float _1611 = _1502 * 0.5;
        float _1612 = _1512 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_787, _788, _789), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4167 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1637 + 1.0))) + _1642) * _1525;
        _1659 = _1492;
        _1660 = _1491;
        _1661 = _1490;
        _1662 = _1502;
        _1663 = _1501;
        _1664 = _1500;
        _1665 = _1512;
        _1666 = _1511;
        _1667 = _1510;
        _1668 = _1525;
        _1669 = _1524;
        _1670 = _1523;
        _1671 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1672 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    }
    else
    {
        _1659 = _1348;
        _1660 = _1348;
        _1661 = _1348;
        _1662 = _1348;
        _1663 = _1348;
        _1664 = _1348;
        _1665 = _1348;
        _1666 = _1348;
        _1667 = _1348;
        _1668 = _1348;
        _1669 = _1348;
        _1670 = _1348;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1683 = (cbModelParam._m0[1u].x * (_1671 - _1360)) + _1360;
    float _1684 = (cbModelParam._m0[1u].x * (_1672 - _1361)) + _1361;
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1362)) + _1362;
    float _1706 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1709 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1712 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1683));
    float _1727 = _957 * 0.5;
    float _1728 = _958 * 0.5;
    float _1729 = _959 * 0.5;
    float _1730 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1733 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1660, _1663, _1666, _1669));
    float _1736 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1659, _1662, _1665, _1668));
    float _1770;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1743 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1347, _1351, _1354, _1357));
        float _1747 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1349, _1352, _1355, _1358));
        float _1751 = dot(vec4(_1727, _1728, _1729, 1.0), vec4(_1350, _1353, _1356, _1359));
        float _1758 = dot(vec4(cbModelParam._m0[39u]), vec4(_1727, _1728, _1729, 1.0));
        _1770 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1770 = 1.0;
    }
    float _1781;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1772 = dot(vec4(cbModelParam._m0[40u]), vec4(_1727, _1728, _1729, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1785 = (_1781 * cbModelParam._m0[1u].x) + (_1770 * (1.0 - cbModelParam._m0[1u].x));
    float _1795 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _790);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1795 : min(cbModelParam._m0[25u].z, _1795));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1843 = fma(_1018, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010)) + cbModelParam._m0[13u].w;
        float _1847 = fma(_1018, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010)) + cbModelParam._m0[14u].w;
        float _1851 = fma(_1018, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010)) + cbModelParam._m0[15u].w;
        float _1854 = fma(_959, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _957));
        float _1857 = fma(_959, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _957));
        float _1860 = fma(_959, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _957));
        float _1888;
        if (_1854 > 0.0)
        {
            _1888 = abs((1.0 - _1843) / _1854);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1843 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1888 = frontier_phi_17_15_ladder;
        }
        float _2088;
        if (_1857 > 0.0)
        {
            _2088 = abs((1.0 - _1847) / _1857);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1847 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2088 = frontier_phi_26_22_ladder;
        }
        float _2331;
        if (_1860 > 0.0)
        {
            _2331 = abs((1.0 - _1851) / _1860);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1851 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2331 = frontier_phi_38_33_ladder;
        }
        float _2333 = isnan(_2088) ? _1888 : (isnan(_1888) ? _2088 : min(_1888, _2088));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1854) + _1843;
        float _2339 = (_2334 * _1857) + _1847;
        float _2340 = (_2334 * _1860) + _1851;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1796);
            frontier_phi_16_38_ladder = _2464.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2464.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2464.x * cbModelParam._m0[1u].y;
        }
        _1876 = frontier_phi_16_38_ladder_2;
        _1878 = frontier_phi_16_38_ladder_1;
        _1880 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_957, _958, _959), _1796);
        _1876 = _1864.x * cbModelParam._m0[1u].y;
        _1878 = _1864.y * cbModelParam._m0[1u].y;
        _1880 = _1864.z * cbModelParam._m0[1u].y;
    }
    float _1884 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _790);
    float _1885 = isnan(_1884) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1884 : min(cbModelParam._m0[25u].w, _1884));
    float _1974;
    float _1976;
    float _1978;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1938 = fma(_1018, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010)) + cbModelParam._m0[21u].w;
        float _1942 = fma(_1018, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010)) + cbModelParam._m0[22u].w;
        float _1946 = fma(_1018, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010)) + cbModelParam._m0[23u].w;
        float _1949 = fma(_959, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _957));
        float _1952 = fma(_959, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _957));
        float _1955 = fma(_959, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _957));
        float _2093;
        if (_1949 > 0.0)
        {
            _2093 = abs((1.0 - _1938) / _1949);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1949 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1938 + 1.0) / _1949);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2093 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1952 > 0.0)
        {
            _2358 = abs((1.0 - _1942) / _1952);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1952 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1942 + 1.0) / _1952);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2563;
        if (_1955 > 0.0)
        {
            _2563 = abs((1.0 - _1946) / _1955);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1946 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2563 = frontier_phi_49_46_ladder;
        }
        float _2565 = isnan(_2358) ? _2093 : (isnan(_2093) ? _2358 : min(_2093, _2358));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1949) + _1938;
        float _2571 = (_2566 * _1952) + _1942;
        float _2572 = (_2566 * _1955) + _1946;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1885);
            frontier_phi_25_49_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1974 = frontier_phi_25_49_ladder_2;
        _1976 = frontier_phi_25_49_ladder_1;
        _1978 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1958 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_957, _958, _959), _1885);
        _1974 = _1958.x * cbModelParam._m0[1u].z;
        _1976 = _1958.y * cbModelParam._m0[1u].z;
        _1978 = _1958.z * cbModelParam._m0[1u].z;
    }
    float _1990 = ((((1.0 - _978) * ((_965 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_978 * _965)) * _949;
    float _1991 = _1990 * ((cbModelParam._m0[1u].w * (_1974 - _1876)) + _1876);
    float _1992 = _1990 * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1993 = _1990 * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1996 = fma(_1993, cbSceneParam._m0[89u].z, fma(_1992, cbSceneParam._m0[89u].y, _1991 * cbSceneParam._m0[89u].x));
    float _1999 = fma(_1993, cbSceneParam._m0[90u].z, fma(_1992, cbSceneParam._m0[90u].y, _1991 * cbSceneParam._m0[90u].x));
    float _2002 = fma(_1993, cbSceneParam._m0[91u].z, fma(_1992, cbSceneParam._m0[91u].y, _1991 * cbSceneParam._m0[91u].x));
    uvec4 _2012 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2014 = _2012.x * 14u;
    uint _2015 = _2014 + 13u;
    float _2022 = _949 + (-1.0);
    float _2027 = (cbLight._m0[_2015].x * _2022) + 1.0;
    float _2028 = (cbLight._m0[_2015].y * _2022) + 1.0;
    float _2029 = (cbLight._m0[_2015].z * _2022) + 1.0;
    float _2030 = (cbLight._m0[_2015].w * _2022) + 1.0;
    uint _2031 = _2014 + 5u;
    float _2037 = isnan(1.0) ? _2028 : (isnan(_2028) ? 1.0 : min(_2028, 1.0));
    uint _2041 = _2014 + 4u;
    float _2047 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2051 = _2014 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_787, _788, _789));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_787, _788, _789));
    float _4303 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4314 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2031].x * _2037) * _2072) + ((cbLight._m0[_2041].x * _2047) * _2070);
    float _2080 = ((_2037 * cbLight._m0[_2031].y) * _2072) + ((_2047 * cbLight._m0[_2041].y) * _2070);
    float _2081 = ((_2037 * cbLight._m0[_2031].z) * _2072) + ((_2047 * cbLight._m0[_2041].z) * _2070);
    uvec4 _2085 = floatBitsToUint(cbLight._m0[_2014 + 12u]);
    bool _2087 = _2085.x == 0u;
    float _2098;
    float _2100;
    float _2102;
    if (_2087)
    {
        _2098 = _2079;
        _2100 = _2080;
        _2102 = _2081;
    }
    else
    {
        uint _2106 = _2014 + 6u;
        float _2122 = (dot(vec3(cbLight._m0[_2014 + 2u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2123 = _2122 * _2122;
        float _4325 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2124 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2125 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2098 = (((cbLight._m0[_2106].x * 0.3183098733425140380859375) * _2124) * _2125) + _2079;
        _2100 = (((cbLight._m0[_2106].y * 0.3183098733425140380859375) * _2124) * _2125) + _2080;
        _2102 = (((cbLight._m0[_2106].z * 0.3183098733425140380859375) * _2124) * _2125) + _2081;
    }
    bool _2105 = _2085.y == 0u;
    float _2143;
    float _2145;
    float _2147;
    if (_2105)
    {
        _2143 = _2098;
        _2145 = _2100;
        _2147 = _2102;
    }
    else
    {
        uint _2302 = _2014 + 7u;
        float _2318 = (dot(vec3(cbLight._m0[_2014 + 3u].xyz), vec3(_787, _788, _789)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4341 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2321 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2143 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2098;
        _2145 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2100;
        _2147 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2102;
    }
    uint _2150 = _2014 + 8u;
    float _2163 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _790) * 0.949999988079071044921875);
    float _2164 = _2163 * _2163;
    float _2165 = cbLight._m0[_2014].x + _866;
    float _2166 = cbLight._m0[_2014].y + _867;
    float _2167 = cbLight._m0[_2014].z + _868;
    float _2171 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
    float _2172 = _2171 * _2165;
    float _2173 = _2171 * _2166;
    float _2174 = _2171 * _2167;
    float _2175 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2014].xyz));
    float _4357 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2179 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2180 = dot(vec3(_787, _788, _789), vec3(_2172, _2173, _2174));
    float _4379 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2172, _2173, _2174));
    float _4390 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2164 * _2164;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2204 = 1.0 - _2164;
    float _2215 = (0.5 / (((_2179 * ((_2178 * _2204) + _2164)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2204) + _2164) * _2178))) * _2178;
    float _4401 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2217 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    uint _2228 = _2014 + 9u;
    float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _790) * 0.949999988079071044921875);
    float _2240 = _2239 * _2239;
    float _2241 = cbLight._m0[_2051].x + _866;
    float _2242 = cbLight._m0[_2051].y + _867;
    float _2243 = cbLight._m0[_2051].z + _868;
    float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
    float _2248 = _2247 * _2241;
    float _2249 = _2247 * _2242;
    float _2250 = _2247 * _2243;
    float _2251 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2051].xyz));
    float _4412 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2254 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2255 = dot(vec3(_787, _788, _789), vec3(_2248, _2249, _2250));
    float _4423 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2248, _2249, _2250));
    float _4434 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2240 * _2240;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2277 = 1.0 - _2240;
    float _2287 = (0.5 / (((_2179 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2277) + _2240) * _2254))) * _2254;
    float _4445 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2289 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    float _2299 = (((_2276 * cbLight._m0[_2228].x) * _2289) * _2037) + (((_2203 * cbLight._m0[_2150].x) * _2217) * _2047);
    float _2300 = (((_2276 * cbLight._m0[_2228].y) * _2289) * _2037) + (((_2203 * cbLight._m0[_2150].y) * _2217) * _2047);
    float _2301 = (((_2276 * cbLight._m0[_2228].z) * _2289) * _2037) + (((_2203 * cbLight._m0[_2150].z) * _2217) * _2047);
    float _2363;
    float _2365;
    float _2367;
    if (_2087)
    {
        _2363 = _2299;
        _2365 = _2300;
        _2367 = _2301;
    }
    else
    {
        uint _2369 = _2014 + 2u;
        uint _2373 = _2014 + 10u;
        float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _790) * 0.949999988079071044921875);
        float _2388 = _2387 * _2387;
        float _2389 = cbLight._m0[_2369].x + _866;
        float _2390 = cbLight._m0[_2369].y + _867;
        float _2391 = cbLight._m0[_2369].z + _868;
        float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
        float _2396 = _2395 * _2389;
        float _2397 = _2395 * _2390;
        float _2398 = _2395 * _2391;
        float _2399 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2369].xyz));
        float _4456 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2403 = dot(vec3(_787, _788, _789), vec3(_2396, _2397, _2398));
        float _4467 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2406 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2407 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2396, _2397, _2398));
        float _4478 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2411 = _2388 * _2388;
        float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
        float _2424 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2425 = 1.0 - _2388;
        float _2435 = (0.5 / (((_2179 * ((_2402 * _2425) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2425) + _2388) * _2402))) * _2402;
        float _4489 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _2029 : (isnan(_2029) ? 1.0 : min(_2029, 1.0));
        _2363 = (((_2424 * cbLight._m0[_2373].x) * _2437) * _2438) + _2299;
        _2365 = (((_2424 * cbLight._m0[_2373].y) * _2437) * _2438) + _2300;
        _2367 = (((_2424 * cbLight._m0[_2373].z) * _2437) * _2438) + _2301;
    }
    float _2473;
    float _2475;
    float _2477;
    if (_2105)
    {
        _2473 = _2363;
        _2475 = _2365;
        _2477 = _2367;
    }
    else
    {
        uint _2484 = _2014 + 3u;
        uint _2488 = _2014 + 11u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _790) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _866;
        float _2505 = cbLight._m0[_2484].y + _867;
        float _2506 = cbLight._m0[_2484].z + _868;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_787, _788, _789), vec3(cbLight._m0[_2484].xyz));
        float _4505 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2518 = dot(vec3(_787, _788, _789), vec3(_2511, _2512, _2513));
        float _4516 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4527 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2539 = (exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2540 = 1.0 - _2503;
        float _2550 = (0.5 / (((_2179 * ((_2517 * _2540) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2179 * _2540) + _2503) * _2517))) * _2517;
        float _4538 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2030 : (isnan(_2030) ? 1.0 : min(_2030, 1.0));
        _2473 = (((_2539 * cbLight._m0[_2488].x) * _2552) * _2553) + _2363;
        _2475 = (((_2539 * cbLight._m0[_2488].y) * _2552) * _2553) + _2365;
        _2477 = (((_2539 * cbLight._m0[_2488].z) * _2552) * _2553) + _2367;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_2012.y == 0u)
    {
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2628;
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2628;
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2628;
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2644)));
        float _2665 = (log2(_2631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2944)
                {
                    frontier_phi_66_pred = _2928;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2943;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2934 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _2629;
                        float _3140 = _3099.y - _2630;
                        float _3141 = _3099.z - _2631;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_905, _908, _911), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4564 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _2629;
                        float _3175 = (-0.0) - _2630;
                        float _3176 = (-0.0) - _2631;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3191 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _965;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3181 + _3146;
                        float _3203 = _3182 + _3147;
                        float _3204 = _3183 + _3148;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_905, _908, _911), vec3(_3181, _3182, _3183));
                        float _4580 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3216 = dot(vec3(_905, _908, _911), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4591 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3159 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3149) + _3225;
                        float _4602 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4613 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3223 * _3223) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3003 = (_3170 * _3118.x) + _3076;
                        _3004 = (_3170 * _3118.y) + _3077;
                        _3005 = (_3170 * _3118.z) + _3078;
                        _3000 = (_3251 * _3135.x) + _3073;
                        _3001 = (_3251 * _3135.y) + _3074;
                        _3002 = (_3251 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                _2777 = frontier_phi_66_pred;
                _2787 = frontier_phi_66_pred_1;
                _2785 = frontier_phi_66_pred_2;
                _2783 = frontier_phi_66_pred_3;
                _2781 = frontier_phi_66_pred_4;
                _2779 = frontier_phi_66_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2777;
                    _2929 = _2779;
                    _2930 = _2781;
                    _2931 = _2783;
                    _2932 = _2785;
                    _2933 = _2787;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2793) & _2675) == 0u)
        {
            _2896 = _2776;
            _2898 = _2778;
            _2900 = _2780;
            _2902 = _2782;
            _2904 = _2784;
            _2906 = _2786;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
            float _2922 = _2921 * _2629;
            float _2923 = _2921 * _2630;
            float _2924 = _2921 * _2631;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3056 = _2776;
                float _3057 = _2778;
                float _3058 = _2780;
                float _3059 = _2782;
                float _3060 = _2784;
                float _3061 = _2786;
                uint _3062 = _2793;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3072)
                    {
                        frontier_phi_77_pred = _3061;
                        frontier_phi_77_pred_1 = _3060;
                        frontier_phi_77_pred_2 = _3059;
                        frontier_phi_77_pred_3 = _3058;
                        frontier_phi_77_pred_4 = _3057;
                        frontier_phi_77_pred_5 = _3056;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        float _3281 = _3059;
                        float _3282 = _3060;
                        float _3283 = _3061;
                        uint _3284 = _3071;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3368;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3295 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3295 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3295 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3295 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_2631, _3402.z, fma(_2630, _3402.y, _3402.x * _2629)) + _3402.w;
                            _3415 = !((fma(_2631, _3383.z, fma(_2630, _3383.y, _3383.x * _2629)) + _3383.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3310.x - _2629;
                                float _3443 = _3310.y - _2630;
                                float _3444 = _3310.z - _2631;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3311 * _3311));
                                float _4624 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3460 = sqrt(_3445) * _3326.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_905, _908, _911))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_2631, _3353.z, fma(_2630, _3353.y, _3353.x * _2629)) + _3353.w) / _3414;
                                float _3474 = (fma(_2631, _3368.z, fma(_2630, _3368.y, _3368.x * _2629)) + _3368.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4640 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _965;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2922;
                                float _3504 = _3450 - _2923;
                                float _3505 = _3451 - _2924;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_905, _908, _911), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4651 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3517 = dot(vec3(_905, _908, _911), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4662 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_905, _908, _911), vec3(_3449, _3450, _3451))) + _3526;
                                float _4673 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4684 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3480 * _3326.y;
                                frontier_phi_83_pred_1 = _3480 * _3326.x;
                                frontier_phi_83_pred_2 = _3554 * _3338.z;
                                frontier_phi_83_pred_3 = _3554 * _3338.y;
                                frontier_phi_83_pred_4 = _3554 * _3338.x;
                                frontier_phi_83_pred_5 = _3480 * _3326.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3562 = frontier_phi_83_pred;
                            _3561 = frontier_phi_83_pred_1;
                            _3560 = frontier_phi_83_pred_2;
                            _3559 = frontier_phi_83_pred_3;
                            _3558 = frontier_phi_83_pred_4;
                            _3563 = frontier_phi_83_pred_5;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3270;
                        frontier_phi_77_pred_1 = _3269;
                        frontier_phi_77_pred_2 = _3268;
                        frontier_phi_77_pred_3 = _3267;
                        frontier_phi_77_pred_4 = _3266;
                        frontier_phi_77_pred_5 = _3265;
                    }
                    _2907 = frontier_phi_77_pred;
                    _2905 = frontier_phi_77_pred_1;
                    _2903 = frontier_phi_77_pred_2;
                    _2901 = frontier_phi_77_pred_3;
                    _2899 = frontier_phi_77_pred_4;
                    _2897 = frontier_phi_77_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2897;
                        _3057 = _2899;
                        _3058 = _2901;
                        _3059 = _2903;
                        _3060 = _2905;
                        _3061 = _2907;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2901;
                frontier_phi_58_59_ladder_1 = _2907;
                frontier_phi_58_59_ladder_2 = _2905;
                frontier_phi_58_59_ladder_3 = _2903;
                frontier_phi_58_59_ladder_4 = _2899;
                frontier_phi_58_59_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_58_59_ladder = _2780;
                frontier_phi_58_59_ladder_1 = _2786;
                frontier_phi_58_59_ladder_2 = _2784;
                frontier_phi_58_59_ladder_3 = _2782;
                frontier_phi_58_59_ladder_4 = _2778;
                frontier_phi_58_59_ladder_5 = _2776;
            }
            _2896 = frontier_phi_58_59_ladder_5;
            _2898 = frontier_phi_58_59_ladder_4;
            _2900 = frontier_phi_58_59_ladder;
            _2902 = frontier_phi_58_59_ladder_3;
            _2904 = frontier_phi_58_59_ladder_2;
            _2906 = frontier_phi_58_59_ladder_1;
        }
        float _2911 = isnan(1.0) ? _949 : (isnan(_949) ? 1.0 : min(_949, 1.0));
        _2688 = (_2911 * _2902) + _2143;
        _2690 = (_2911 * _2904) + _2145;
        _2692 = (_2911 * _2906) + _2147;
        _2694 = ((_2896 * 0.039999999105930328369140625) * _2911) + _2473;
        _2696 = ((_2898 * 0.039999999105930328369140625) * _2911) + _2475;
        _2698 = ((_2900 * 0.039999999105930328369140625) * _2911) + _2477;
    }
    else
    {
        _2688 = _2143;
        _2690 = _2145;
        _2692 = _2147;
        _2694 = _2473;
        _2696 = _2475;
        _2698 = _2477;
    }
    float _4700 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4711 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4722 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _2715 = ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2688 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _949))) + ((_2694 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1785)) * cbPerFrame._m0[3u].x);
    float _2716 = ((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2690 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _949))) + ((_2696 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1785)) * cbPerFrame._m0[3u].x);
    float _2717 = ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2692 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _949))) + ((_2698 + ((isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))) * _1785)) * cbPerFrame._m0[3u].x);
    uint _2718 = _255 + 6u;
    float _2726 = _886 / cbSceneParam._m0[86u].x;
    float _2727 = _887 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _808 : (isnan(_808) ? cbSceneParam._m0[77u].w : min(_808, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_808 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_808) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _808 : min(cbSceneParam._m0[80u].w, _808));
        float _2802 = _2801 / _808;
        float _2813 = _2802 * _859;
        float _2814 = _860 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2816 = _2802 * _861;
        float _2818 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2819 = _2818 + cbSceneParam._m0[79u].w;
        float _2820 = cbSceneParam._m0[79u].w - _2814;
        float _2826 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2816 * _2816));
        float _2829 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2826;
        float _2834 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2836 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2815 - _2818) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2819 > 0.0) ? exp2(_2834 * _2819) : (2.0 - exp2(_2836 * _2819))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2829;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : max(_2819, _2820));
            float _2959 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : min(_2819, _2820));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _3013 = ((abs(_2826 / _2815) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2834 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2834 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2836 * _2968) - exp2(_2836 * _2969)) * _2957))) + (_2829 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2746);
        _2838 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2840 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2842 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2844 = _3024 * _2746;
    }
    else
    {
        _2838 = _2743;
        _2840 = _2744;
        _2842 = _2745;
        _2844 = _2746;
    }
    bool _3051;
    vec4 _2854;
    vec4 _2876;
    float _2878;
    float _2882;
    float _2883;
    float _2884;
    float _2885;
    bool _2895;
    for (;;)
    {
        _2854 = cbMatDynParam._m0[0u];
        float _2856 = roundEven(_2854.y);
        bool _2857 = _2856 == 3.0;
        float _2858 = log2(_2844);
        float _2865 = exp2(_2858 * cbSceneParam._m0[78u].x) * _2715;
        float _2866 = exp2(_2858 * cbSceneParam._m0[78u].y) * _2716;
        float _2867 = exp2(_2858 * cbSceneParam._m0[78u].z) * _2717;
        float _2874 = _875 + (-0.5);
        _2876 = cbMtdParam._m0[1u];
        _2878 = _2876.y * _2874;
        float _2881 = (_2856 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2882 = _2881 * (_2857 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2838)));
        _2883 = _2881 * (_2857 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2840)));
        _2884 = _2881 * (_2857 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2842)));
        _2885 = _2874 * 0.999000012874603271484375;
        _2895 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2895)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _2885) < 0.5)
            {
                _3051 = true;
                break;
            }
        }
        uint _2992 = _924 + uint(_2854.w);
        if ((cbInstanceData._m0[_2992].w < 1.0) && ((cbInstanceData._m0[_2992].w + _2885) < 0.5))
        {
            _3051 = true;
            break;
        }
        if ((_2878 + 1.0) < _2876.x)
        {
            _3051 = true;
            break;
        }
        _3051 = false;
        break;
    }
    float _3256;
    if (_3051)
    {
        discard_state = true;
        _3256 = 0.0;
    }
    else
    {
        _3256 = cbInstanceData._m0[_2718].w;
    }
    SV_Target.x = _2882;
    SV_Target.y = _2883;
    SV_Target.z = _2884;
    SV_Target.w = _3256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2718].w;
    discard_exit();
}


