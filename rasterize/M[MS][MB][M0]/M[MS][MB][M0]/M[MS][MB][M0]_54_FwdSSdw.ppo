#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1043;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _209 = _208 * _200;
    float _210 = _208 * _201;
    float _211 = _208 * _202;
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223 = _222 * TANGENT.x;
    float _224 = _222 * TANGENT.y;
    float _225 = _222 * TANGENT.z;
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _341 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _350 = (_341.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_349, _350), vec2(_349, _350));
    float _3374 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _357 = sqrt(1.0 - (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))));
    float _362 = _349 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_315.x * 2.0) + (-1.0)));
    float _363 = _350 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_315.y * 2.0) + (-1.0)));
    float _366 = fma(_357, _216, fma(_363, _223, _362 * _209));
    float _369 = fma(_357, _217, fma(_363, _224, _362 * _210));
    float _372 = fma(_357, _218, fma(_363, _225, _362 * _211));
    float _376 = inversesqrt(dot(vec3(_366, _369, _372), vec3(_366, _369, _372)));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _414 = _412.x;
    float _415 = 1.0 - _414;
    float _422 = ((_414 - _415) * cbMtdParam._m0[24u].z) + _415;
    float _424 = (cbMtdParam._m0[19u].x + dot(vec4(_376 * _366, _376 * _369, _376 * _372, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_422 * cbMtdParam._m0[21u].z);
    float _3385 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _440 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_422 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3396 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _445 = ((_425 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) * _441) + _274;
    float _446 = ((_425 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) * _441) + _275;
    float _447 = ((_425 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) * _441) + _276;
    float _452 = (((_315.z - _345) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _345;
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _472 = (_465.x * 2.0) + (-1.0);
    float _473 = (_465.y * 2.0) + (-1.0);
    float _474 = dot(vec2(_472, _473), vec2(_472, _473));
    float _3407 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _483 = (((_465.z - _452) * _425) * _441) + _452;
    float _498 = (((cbMtdParam._m0[21u].x * _362) + ((_472 - _362) * _425)) * _441) + _362;
    float _499 = (((cbMtdParam._m0[21u].x * _363) + ((_473 - _363) * _425)) * _441) + _363;
    float _500 = (((sqrt(1.0 - (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) - _357) * _425) * _441) + _357;
    float _505 = cbMtdParam._m0[22u].x + _341.w;
    float _508 = fma(_500, _216, fma(_499, _223, _498 * _209));
    float _511 = fma(_500, _217, fma(_499, _224, _498 * _210));
    float _514 = fma(_500, _218, fma(_499, _225, _498 * _211));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3418 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _522 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3440 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3451 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3462 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _591 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _581);
    float _592 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _581);
    float _593 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _581);
    float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
    float _598 = _591 * _597;
    float _599 = _592 * _597;
    float _600 = _593 * _597;
    float _606 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _607 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _628 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _631 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _634 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _648 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _654 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * cbInstanceData._m0[_648].x;
    float _655 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_648].y;
    float _656 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_648].z;
    float _3473 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
    vec4 _668 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _606, cbSceneParam._m0[86u].y * _607));
    float _672 = ((isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * TEXCOORD_5.w) * _668.x;
    float _673 = dot(vec3(_519, _520, _521), vec3(_598, _599, _600));
    float _676 = _673 * 2.0;
    float _680 = (_676 * _519) - _598;
    float _681 = (_676 * _520) - _599;
    float _682 = (_676 * _521) - _600;
    float _686 = abs(dot(vec3(_598, _599, _600), vec3(_519, _520, _521)));
    float _3506 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _688 = sqrt(_522);
    float _701 = exp2((_688 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_688 * 3.0));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1042;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _767 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _771 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _775 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _800 = _733 + _519;
        float _801 = _737 + _520;
        float _802 = _741 + _521;
        float _812 = fma(_802, cbModelParam._m0[26u].z, fma(_801, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800)) - _767;
        float _813 = fma(_802, cbModelParam._m0[27u].z, fma(_801, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800)) - _771;
        float _814 = fma(_802, cbModelParam._m0[28u].z, fma(_801, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800)) - _775;
        float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
        float _831 = ((_818 * _812) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_767 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_818 * _813) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_771 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_818 * _814) / cbModelParam._m0[34u].z) + ((((((_775 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _870 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_836.x + (-0.5));
        float _872 = _870 * (_836.y + (-0.5));
        float _873 = _870 * (_836.z + (-0.5));
        float _880 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_843.x + (-0.5));
        float _882 = _880 * (_843.y + (-0.5));
        float _883 = _880 * (_843.z + (-0.5));
        float _890 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_850.x + (-0.5));
        float _892 = _890 * (_850.y + (-0.5));
        float _893 = _890 * (_850.z + (-0.5));
        float _900 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_857.x + (-0.5));
        float _902 = _900 * (_857.y + (-0.5));
        float _903 = _900 * (_857.z + (-0.5));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = _871 * 0.5;
        float _908 = _881 * 0.5;
        float _909 = _891 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _924 = (dot(vec3(_519, _520, _521), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _934 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3554 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_936 + 1.0))) + _941) * _904;
        float _951 = _872 * 0.5;
        float _952 = _882 * 0.5;
        float _953 = _892 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_519, _520, _521), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3587 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_978 + 1.0))) + _983) * _905;
        float _993 = _873 * 0.5;
        float _994 = _883 * 0.5;
        float _995 = _893 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1009 = (dot(vec3(_519, _520, _521), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1018 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3620 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1020 + 1.0))) + _1025) * _906;
        _1042 = _873;
        _1044 = _872;
        _1045 = _871;
        _1046 = _883;
        _1047 = _882;
        _1048 = _881;
        _1049 = _893;
        _1050 = _892;
        _1051 = _891;
        _1052 = _906;
        _1053 = _905;
        _1054 = _904;
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
    }
    else
    {
        _1042 = _1043;
        _1044 = _1043;
        _1045 = _1043;
        _1046 = _1043;
        _1047 = _1043;
        _1048 = _1043;
        _1049 = _1043;
        _1050 = _1043;
        _1051 = _1043;
        _1052 = _1043;
        _1053 = _1043;
        _1054 = _1043;
        _1055 = 0.0;
        _1056 = 0.0;
        _1057 = 0.0;
    }
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1082 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1086 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1090 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1113 = _733 + _519;
        float _1114 = _737 + _520;
        float _1115 = _741 + _521;
        float _1125 = fma(_1115, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113)) - _1082;
        float _1126 = fma(_1115, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113)) - _1086;
        float _1127 = fma(_1115, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113)) - _1090;
        float _1131 = inversesqrt(dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127)));
        float _1144 = ((_1131 * _1125) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1082 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1131 * _1126) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1086 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1131 * _1127) / cbModelParam._m0[35u].z) + ((((((_1090 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1144, _1145, _1146), 0.0);
        float _1181 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1148.x + (-0.5));
        float _1183 = _1181 * (_1148.y + (-0.5));
        float _1184 = _1181 * (_1148.z + (-0.5));
        float _1191 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1155.x + (-0.5));
        float _1193 = _1191 * (_1155.y + (-0.5));
        float _1194 = _1191 * (_1155.z + (-0.5));
        float _1201 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1162.x + (-0.5));
        float _1203 = _1201 * (_1162.y + (-0.5));
        float _1204 = _1201 * (_1162.z + (-0.5));
        float _1211 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1169.x + (-0.5));
        float _1213 = _1211 * (_1169.y + (-0.5));
        float _1214 = _1211 * (_1169.z + (-0.5));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = _1182 * 0.5;
        float _1219 = _1192 * 0.5;
        float _1220 = _1202 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_519, _520, _521), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3683 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1245 + 1.0))) + _1250) * _1215;
        float _1260 = _1183 * 0.5;
        float _1261 = _1193 * 0.5;
        float _1262 = _1203 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_519, _520, _521), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3716 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1287 + 1.0))) + _1292) * _1216;
        float _1302 = _1184 * 0.5;
        float _1303 = _1194 * 0.5;
        float _1304 = _1204 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_519, _520, _521), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3749 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1329 + 1.0))) + _1334) * _1217;
        _1351 = _1184;
        _1352 = _1183;
        _1353 = _1182;
        _1354 = _1194;
        _1355 = _1193;
        _1356 = _1192;
        _1357 = _1204;
        _1358 = _1203;
        _1359 = _1202;
        _1360 = _1217;
        _1361 = _1216;
        _1362 = _1215;
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1364 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1043;
        _1352 = _1043;
        _1353 = _1043;
        _1354 = _1043;
        _1355 = _1043;
        _1356 = _1043;
        _1357 = _1043;
        _1358 = _1043;
        _1359 = _1043;
        _1360 = _1043;
        _1361 = _1043;
        _1362 = _1043;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1055)) + _1055;
    float _1376 = (cbModelParam._m0[1u].x * (_1364 - _1056)) + _1056;
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1057)) + _1057;
    float _1398 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1401 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1404 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1375));
    float _1419 = _680 * 0.5;
    float _1420 = _681 * 0.5;
    float _1421 = _682 * 0.5;
    float _1422 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1425 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1352, _1355, _1358, _1361));
    float _1428 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1462;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1435 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1042, _1046, _1049, _1052));
        float _1439 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1443 = dot(vec4(_1419, _1420, _1421, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1450 = dot(vec4(cbModelParam._m0[39u]), vec4(_1419, _1420, _1421, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1473;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1464 = dot(vec4(cbModelParam._m0[40u]), vec4(_1419, _1420, _1421, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1477 = (_1473 * cbModelParam._m0[1u].x) + (_1462 * (1.0 - cbModelParam._m0[1u].x));
    float _1487 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1488 = isnan(_1487) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1487 : min(cbModelParam._m0[25u].z, _1487));
    float _1568;
    float _1570;
    float _1572;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1535 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1539 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1543 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1546 = fma(_682, cbModelParam._m0[13u].z, fma(_681, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680));
        float _1549 = fma(_682, cbModelParam._m0[14u].z, fma(_681, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680));
        float _1552 = fma(_682, cbModelParam._m0[15u].z, fma(_681, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680));
        float _1580;
        if (_1546 > 0.0)
        {
            _1580 = abs((1.0 - _1535) / _1546);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1535 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1580 = frontier_phi_14_12_ladder;
        }
        float _1803;
        if (_1549 > 0.0)
        {
            _1803 = abs((1.0 - _1539) / _1549);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1539 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1803 = frontier_phi_23_19_ladder;
        }
        float _2049;
        if (_1552 > 0.0)
        {
            _2049 = abs((1.0 - _1543) / _1552);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1552 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1543 + 1.0) / _1552);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2049 = frontier_phi_35_30_ladder;
        }
        float _2051 = isnan(_1803) ? _1580 : (isnan(_1580) ? _1803 : min(_1580, _1803));
        float _2052 = isnan(_2049) ? _2051 : (isnan(_2051) ? _2049 : min(_2051, _2049));
        float _2056 = (_2052 * _1546) + _1535;
        float _2057 = (_2052 * _1549) + _1539;
        float _2058 = (_2052 * _1552) + _1543;
        float _2059 = _2052 * 9.9999997473787516355514526367188e-05;
        float _2061 = (-1.0) - _2059;
        float _2063 = _2059 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2058 > _2063) || ((_2058 < _2061) || ((_2057 > _2063) || ((_2057 < _2061) || ((_2056 < _2061) || (_2056 > _2063))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2182 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2058, cbModelParam._m0[9u].z, fma(_2057, cbModelParam._m0[9u].y, _2056 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2058, cbModelParam._m0[10u].z, fma(_2057, cbModelParam._m0[10u].y, _2056 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2058, cbModelParam._m0[11u].z, fma(_2057, cbModelParam._m0[11u].y, _2056 * cbModelParam._m0[11u].x))), _1488);
            frontier_phi_13_35_ladder = _2182.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2182.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2182.x * cbModelParam._m0[1u].y;
        }
        _1568 = frontier_phi_13_35_ladder_2;
        _1570 = frontier_phi_13_35_ladder_1;
        _1572 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_680, _681, _682), _1488);
        _1568 = _1556.x * cbModelParam._m0[1u].y;
        _1570 = _1556.y * cbModelParam._m0[1u].y;
        _1572 = _1556.z * cbModelParam._m0[1u].y;
    }
    float _1576 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1577 = isnan(_1576) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1576 : min(cbModelParam._m0[25u].w, _1576));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1630 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1634 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1638 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1641 = fma(_682, cbModelParam._m0[21u].z, fma(_681, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680));
        float _1644 = fma(_682, cbModelParam._m0[22u].z, fma(_681, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680));
        float _1647 = fma(_682, cbModelParam._m0[23u].z, fma(_681, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680));
        float _1808;
        if (_1641 > 0.0)
        {
            _1808 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1808 = frontier_phi_25_21_ladder;
        }
        float _2076;
        if (_1644 > 0.0)
        {
            _2076 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2076 = frontier_phi_37_32_ladder;
        }
        float _2281;
        if (_1647 > 0.0)
        {
            _2281 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2281 = frontier_phi_46_43_ladder;
        }
        float _2283 = isnan(_2076) ? _1808 : (isnan(_1808) ? _2076 : min(_1808, _2076));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1641) + _1630;
        float _2289 = (_2284 * _1644) + _1634;
        float _2290 = (_2284 * _1647) + _1638;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2291;
        float _2294 = _2291 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2290 > _2294) || ((_2290 < _2292) || ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 < _2292) || (_2288 > _2294))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2290, cbModelParam._m0[17u].z, fma(_2289, cbModelParam._m0[17u].y, _2288 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2290, cbModelParam._m0[18u].z, fma(_2289, cbModelParam._m0[18u].y, _2288 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2290, cbModelParam._m0[19u].z, fma(_2289, cbModelParam._m0[19u].y, _2288 * cbModelParam._m0[19u].x))), _1577);
            frontier_phi_22_46_ladder = _2489.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2489.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2489.x * cbModelParam._m0[1u].z;
        }
        _1666 = frontier_phi_22_46_ladder_2;
        _1668 = frontier_phi_22_46_ladder_1;
        _1670 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1650 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_680, _681, _682), _1577);
        _1666 = _1650.x * cbModelParam._m0[1u].z;
        _1668 = _1650.y * cbModelParam._m0[1u].z;
        _1670 = _1650.z * cbModelParam._m0[1u].z;
    }
    float _1682 = ((((1.0 - _701) * ((_688 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_701 * _688)) * _672;
    float _1683 = _1682 * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1684 = _1682 * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1685 = _1682 * ((cbModelParam._m0[1u].w * (_1670 - _1572)) + _1572);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1683 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1683 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1683 * cbSceneParam._m0[91u].x));
    vec4 _1702 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_606, _607));
    float _1704 = _1702.w;
    float _1716 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1704);
    float _1717 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1704);
    float _1718 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1704);
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1732 = _672 + (-1.0);
    float _1737 = (cbLight._m0[_1725].x * _1732) + 1.0;
    float _1738 = (cbLight._m0[_1725].y * _1732) + 1.0;
    float _1739 = (cbLight._m0[_1725].z * _1732) + 1.0;
    float _1740 = (cbLight._m0[_1725].w * _1732) + 1.0;
    uint _1741 = _1724 + 5u;
    float _1747 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1751 = _1724 + 4u;
    float _1761 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1765 = _1724 | 1u;
    float _1776 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_519, _520, _521));
    float _1779 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_519, _520, _521));
    float _3885 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _3896 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1784 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _1786 = (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 0.3183098733425140380859375;
    float _1793 = ((cbLight._m0[_1741].x * _1747) * _1786) + (((cbLight._m0[_1751].x * _1716) * _1761) * _1784);
    float _1794 = ((_1747 * cbLight._m0[_1741].y) * _1786) + (((cbLight._m0[_1751].y * _1717) * _1761) * _1784);
    float _1795 = ((_1747 * cbLight._m0[_1741].z) * _1786) + (((cbLight._m0[_1751].z * _1718) * _1761) * _1784);
    uvec4 _1800 = floatBitsToUint(cbLight._m0[_1724 + 12u]);
    bool _1802 = _1800.x == 0u;
    float _1813;
    float _1815;
    float _1817;
    if (_1802)
    {
        _1813 = _1793;
        _1815 = _1794;
        _1817 = _1795;
    }
    else
    {
        uint _1821 = _1724 + 6u;
        float _1837 = (dot(vec3(cbLight._m0[_1724 + 2u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _1838 = _1837 * _1837;
        float _3907 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1840 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _1813 = (((cbLight._m0[_1821].x * 0.3183098733425140380859375) * _1839) * _1840) + _1793;
        _1815 = (((cbLight._m0[_1821].y * 0.3183098733425140380859375) * _1839) * _1840) + _1794;
        _1817 = (((cbLight._m0[_1821].z * 0.3183098733425140380859375) * _1839) * _1840) + _1795;
    }
    bool _1820 = _1800.y == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1820)
    {
        _1858 = _1813;
        _1860 = _1815;
        _1862 = _1817;
    }
    else
    {
        uint _2020 = _1724 + 7u;
        float _2036 = (dot(vec3(cbLight._m0[_1724 + 3u].xyz), vec3(_519, _520, _521)) * 0.5) + 0.5;
        float _2037 = _2036 * _2036;
        float _3923 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _2039 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _1858 = (((cbLight._m0[_2020].x * 0.3183098733425140380859375) * _2038) * _2039) + _1813;
        _1860 = (((cbLight._m0[_2020].y * 0.3183098733425140380859375) * _2038) * _2039) + _1815;
        _1862 = (((cbLight._m0[_2020].z * 0.3183098733425140380859375) * _2038) * _2039) + _1817;
    }
    uint _1865 = _1724 + 8u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _522) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1724].x + _598;
    float _1881 = cbLight._m0[_1724].y + _599;
    float _1882 = cbLight._m0[_1724].z + _600;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1724].xyz));
    float _3939 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _3950 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _1894 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1895 = dot(vec3(_519, _520, _521), vec3(_1887, _1888, _1889));
    float _3961 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1887, _1888, _1889));
    float _3972 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1879 * _1879;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1918 = (exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = 1.0 - _1879;
    float _1930 = (0.5 / (((_1894 * ((_1893 * _1919) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1919) + _1879) * _1893))) * _1893;
    float _3983 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    uint _1946 = _1724 + 9u;
    float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1765].w)) * _522) * 0.949999988079071044921875);
    float _1958 = _1957 * _1957;
    float _1959 = cbLight._m0[_1765].x + _598;
    float _1960 = cbLight._m0[_1765].y + _599;
    float _1961 = cbLight._m0[_1765].z + _600;
    float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
    float _1966 = _1965 * _1959;
    float _1967 = _1965 * _1960;
    float _1968 = _1965 * _1961;
    float _1969 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1765].xyz));
    float _3994 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1972 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _1973 = dot(vec3(_519, _520, _521), vec3(_1966, _1967, _1968));
    float _4005 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1966, _1967, _1968));
    float _4016 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1958 * _1958;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1995 = 1.0 - _1958;
    float _2005 = (0.5 / (((_1894 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _1995) + _1958) * _1972))) * _1972;
    float _4027 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2007 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    float _2017 = (((_1994 * cbLight._m0[_1946].x) * _2007) * _1747) + ((((cbLight._m0[_1865].x * _1716) * _1918) * _1932) * _1761);
    float _2018 = (((_1994 * cbLight._m0[_1946].y) * _2007) * _1747) + ((((cbLight._m0[_1865].y * _1717) * _1918) * _1932) * _1761);
    float _2019 = (((_1994 * cbLight._m0[_1946].z) * _2007) * _1747) + ((((cbLight._m0[_1865].z * _1718) * _1918) * _1932) * _1761);
    float _2081;
    float _2083;
    float _2085;
    if (_1802)
    {
        _2081 = _2017;
        _2083 = _2018;
        _2085 = _2019;
    }
    else
    {
        uint _2087 = _1724 + 2u;
        uint _2091 = _1724 + 10u;
        float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2087].w)) * _522) * 0.949999988079071044921875);
        float _2106 = _2105 * _2105;
        float _2107 = cbLight._m0[_2087].x + _598;
        float _2108 = cbLight._m0[_2087].y + _599;
        float _2109 = cbLight._m0[_2087].z + _600;
        float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
        float _2114 = _2113 * _2107;
        float _2115 = _2113 * _2108;
        float _2116 = _2113 * _2109;
        float _2117 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2087].xyz));
        float _4038 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2120 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2121 = dot(vec3(_519, _520, _521), vec3(_2114, _2115, _2116));
        float _4049 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2125 = dot(vec3(cbLight._m0[_2087].xyz), vec3(_2114, _2115, _2116));
        float _4060 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2129 = _2106 * _2106;
        float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
        float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2143 = 1.0 - _2106;
        float _2153 = (0.5 / (((_1894 * ((_2120 * _2143) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2143) + _2106) * _2120))) * _2120;
        float _4071 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2155 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
        float _2156 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
        _2081 = (((_2142 * cbLight._m0[_2091].x) * _2155) * _2156) + _2017;
        _2083 = (((_2142 * cbLight._m0[_2091].y) * _2155) * _2156) + _2018;
        _2085 = (((_2142 * cbLight._m0[_2091].z) * _2155) * _2156) + _2019;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1820)
    {
        _2191 = _2081;
        _2193 = _2083;
        _2195 = _2085;
    }
    else
    {
        uint _2202 = _1724 + 3u;
        uint _2206 = _1724 + 11u;
        float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _522) * 0.949999988079071044921875);
        float _2221 = _2220 * _2220;
        float _2222 = cbLight._m0[_2202].x + _598;
        float _2223 = cbLight._m0[_2202].y + _599;
        float _2224 = cbLight._m0[_2202].z + _600;
        float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
        float _2229 = _2228 * _2222;
        float _2230 = _2228 * _2223;
        float _2231 = _2228 * _2224;
        float _2232 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_2202].xyz));
        float _4087 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2235 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2236 = dot(vec3(_519, _520, _521), vec3(_2229, _2230, _2231));
        float _4098 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2239 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2240 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2229, _2230, _2231));
        float _4109 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2244 = _2221 * _2221;
        float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
        float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2258 = 1.0 - _2221;
        float _2268 = (0.5 / (((_1894 * ((_2235 * _2258) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_1894 * _2258) + _2221) * _2235))) * _2235;
        float _4120 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2270 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
        float _2271 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
        _2191 = (((_2257 * cbLight._m0[_2206].x) * _2270) * _2271) + _2081;
        _2193 = (((_2257 * cbLight._m0[_2206].y) * _2270) * _2271) + _2083;
        _2195 = (((_2257 * cbLight._m0[_2206].z) * _2270) * _2271) + _2085;
    }
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    float _2414;
    float _2416;
    if (_1722.y == 0u)
    {
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2346;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2346;
        float _2349 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2346;
        uvec4 _2361 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2362 = _2361.x;
        uint _2373 = uint((float(_2361.y) * floor(float(uint(cbSceneParam._m0[85u].y * _607) / _2362))) + floor(float(uint(cbSceneParam._m0[85u].x * _606) / _2362)));
        float _2383 = (log2(_2349 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2384 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        uint _2387 = uint(isnan(14.0) ? _2384 : (isnan(_2384) ? 14.0 : min(_2384, 14.0)));
        uvec4 _2392 = texelFetch(g_lightClusterGridBuffer, int(((_2387 << 2u) + (_2373 << 6u)) >> 2u));
        uint _2393 = _2392.x;
        uint _2394 = _2361.z;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((((1u << ((_2394 >> 4u) & 15u)) + 4294967295u) & _2393) == 0u) || ((_2394 & 240u) == 0u))
        {
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
        }
        else
        {
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            uint _2645 = 0u;
            uint _2654;
            bool _2655;
            for (;;)
            {
                _2654 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2645 << 2u)) >> 2u)).x;
                _2655 = _2654 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2655)
                {
                    frontier_phi_61_pred = _2639;
                    frontier_phi_61_pred_1 = _2644;
                    frontier_phi_61_pred_2 = _2643;
                    frontier_phi_61_pred_3 = _2642;
                    frontier_phi_61_pred_4 = _2641;
                    frontier_phi_61_pred_5 = _2640;
                }
                else
                {
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    uint _2769;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2642;
                    _2767 = _2643;
                    _2768 = _2644;
                    _2769 = _2654;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    for (;;)
                    {
                        uint _2773 = uint(findLSB(_2769)) + (_2645 << 5u);
                        uint _2770 = (_2769 + 4294967295u) & _2769;
                        uint _2775 = _2773 * 48u;
                        vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 3u)).x));
                        uint _2795 = (_2773 * 48u) + 4u;
                        vec4 _2808 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2795)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2795 + 3u)).x));
                        uint _2814 = (_2773 * 48u) + 8u;
                        vec3 _2825 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2814)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2814 + 2u)).x));
                        float _2829 = _2789.x - _2347;
                        float _2830 = _2789.y - _2348;
                        float _2831 = _2789.z - _2349;
                        float _2832 = dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831));
                        float _2835 = inversesqrt(_2832);
                        float _2836 = _2835 * _2829;
                        float _2837 = _2835 * _2830;
                        float _2838 = _2835 * _2831;
                        float _2839 = dot(vec3(_628, _631, _634), vec3(_2836, _2837, _2838));
                        float _2844 = 1.0 - (_2832 * _2789.w);
                        float _4146 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2846 = sqrt(_2832) * _2808.w;
                        float _2849 = 1.39999997615814208984375 / (_2846 + 1.39999997615814208984375);
                        float _2850 = _2849 * _2849;
                        float _2853 = ((1.0 - _2850) * _2839) + _2850;
                        float _2856 = _2846 * _2846;
                        float _2860 = ((isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))) * _2845) / ((_2856 * 0.699999988079071044921875) + 1.0);
                        float _2864 = (-0.0) - _2347;
                        float _2865 = (-0.0) - _2348;
                        float _2866 = (-0.0) - _2349;
                        float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                        float _2871 = _2870 * _2864;
                        float _2872 = _2870 * _2865;
                        float _2873 = _2870 * _2866;
                        float _2881 = exp2(log2(1.0 / ((_2856 * 3.5) + 5.0)) * 0.25);
                        float _2882 = 1.0 - _688;
                        float _2889 = sqrt(1.0 - ((1.0 - (_2882 * _2882)) * (1.0 - (_2881 * _2881))));
                        float _2890 = _2889 * _2889;
                        float _2891 = _2890 * _2890;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2894 = _2873 + _2838;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2902 = dot(vec3(_628, _631, _634), vec3(_2871, _2872, _2873));
                        float _4162 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                        float _2905 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2906 = dot(vec3(_628, _631, _634), vec3(_2898 * _2892, _2898 * _2893, _2898 * _2894));
                        float _4173 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2909 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                        float _2913 = ((_2909 * _2909) * (_2891 + (-1.0))) + 1.0;
                        float _2914 = _2849 * _2890;
                        float _2915 = _2914 * _2914;
                        float _2918 = ((1.0 - _2915) * _2839) + _2915;
                        float _4184 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2920 = 1.0 - _2890;
                        float _2930 = (0.5 / (((_2919 * ((_2905 * _2920) + _2890)) + 9.9999999392252902907785028219223e-09) + (((_2919 * _2920) + _2890) * _2905))) * _2919;
                        float _4195 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2941 = (((_2891 * 3.1415927410125732421875) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) / ((_2913 * _2913) * ((_2856 * 2.1991131305694580078125) + 3.141590118408203125))) * _2845;
                        _2698 = (_2860 * _2808.x) + _2766;
                        _2699 = (_2860 * _2808.y) + _2767;
                        _2700 = (_2860 * _2808.z) + _2768;
                        _2695 = (_2941 * _2825.x) + _2763;
                        _2696 = (_2941 * _2825.y) + _2764;
                        _2697 = (_2941 * _2825.z) + _2765;
                        if (_2770 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2699;
                            _2768 = _2700;
                            _2769 = _2770;
                        }
                    }
                    frontier_phi_61_pred = _2695;
                    frontier_phi_61_pred_1 = _2700;
                    frontier_phi_61_pred_2 = _2699;
                    frontier_phi_61_pred_3 = _2698;
                    frontier_phi_61_pred_4 = _2697;
                    frontier_phi_61_pred_5 = _2696;
                }
                _2495 = frontier_phi_61_pred;
                _2505 = frontier_phi_61_pred_1;
                _2503 = frontier_phi_61_pred_2;
                _2501 = frontier_phi_61_pred_3;
                _2499 = frontier_phi_61_pred_4;
                _2497 = frontier_phi_61_pred_5;
                uint _2646 = _2645 + 1u;
                if (_2646 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2639 = _2495;
                    _2640 = _2497;
                    _2641 = _2499;
                    _2642 = _2501;
                    _2643 = _2503;
                    _2644 = _2505;
                    _2645 = _2646;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
        }
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.z;
        uint _2511 = (_2509 >> 8u) & 15u;
        float _2607;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        if (((4294967295u << _2511) & _2393) == 0u)
        {
            _2607 = _2494;
            _2609 = _2496;
            _2611 = _2498;
            _2613 = _2500;
            _2615 = _2502;
            _2617 = _2504;
        }
        else
        {
            float _2632 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
            float _2633 = _2632 * _2347;
            float _2634 = _2632 * _2348;
            float _2635 = _2632 * _2349;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2511 < ((_2509 >> 12u) & 15u))
            {
                float _2608;
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2746 = _2494;
                float _2747 = _2496;
                float _2748 = _2498;
                float _2749 = _2500;
                float _2750 = _2502;
                float _2751 = _2504;
                uint _2752 = _2511;
                uint _2761;
                bool _2762;
                for (;;)
                {
                    _2761 = texelFetch(g_lightClassification, int((((_2387 << 5u) + (_2373 << 9u)) + (_2752 << 2u)) >> 2u)).x;
                    _2762 = _2761 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2762)
                    {
                        frontier_phi_67_pred = _2749;
                        frontier_phi_67_pred_1 = _2750;
                        frontier_phi_67_pred_2 = _2751;
                        frontier_phi_67_pred_3 = _2748;
                        frontier_phi_67_pred_4 = _2747;
                        frontier_phi_67_pred_5 = _2746;
                    }
                    else
                    {
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2951;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        float _2962 = _2749;
                        float _2963 = _2750;
                        float _2964 = _2751;
                        uint _2965 = _2761;
                        uint _2966;
                        vec4 _2991;
                        float _2992;
                        vec4 _3007;
                        vec3 _3019;
                        vec4 _3035;
                        vec4 _3050;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2976 = ((_2752 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2965));
                            _2966 = (_2965 + 4294967295u) & _2965;
                            uint _2978 = _2976 * 40u;
                            _2991 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 3u)).x));
                            _2992 = _2991.w;
                            uint _2994 = (_2976 * 40u) + 4u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2976 * 40u) + 8u;
                            _3019 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x));
                            uint _3022 = (_2976 * 40u) + 16u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3037 = (_2976 * 40u) + 20u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_2976 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2976 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_2349, _3084.z, fma(_2348, _3084.y, _3084.x * _2347)) + _3084.w;
                            _3097 = !((fma(_2349, _3065.z, fma(_2348, _3065.y, _3065.x * _2347)) + _3065.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2991.x - _2347;
                                float _3125 = _2991.y - _2348;
                                float _3126 = _2991.z - _2349;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2992 * _2992));
                                float _4206 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3142 = sqrt(_3127) * _3007.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_628, _631, _634))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_2349, _3035.z, fma(_2348, _3035.y, _3035.x * _2347)) + _3035.w) / _3096;
                                float _3156 = (fma(_2349, _3050.z, fma(_2348, _3050.y, _3050.x * _2347)) + _3050.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4222 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _688;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2633;
                                float _3186 = _3132 - _2634;
                                float _3187 = _3133 - _2635;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_628, _631, _634), vec3((-0.0) - _2633, (-0.0) - _2634, (-0.0) - _2635));
                                float _4233 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                                float _3199 = dot(vec3(_628, _631, _634), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4244 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_628, _631, _634), vec3(_3131, _3132, _3133))) + _3208;
                                float _4255 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4266 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3236 * _3019.x;
                                frontier_phi_73_pred_1 = _3236 * _3019.y;
                                frontier_phi_73_pred_2 = _3162 * _3007.z;
                                frontier_phi_73_pred_3 = _3162 * _3007.y;
                                frontier_phi_73_pred_4 = _3162 * _3007.x;
                                frontier_phi_73_pred_5 = _3236 * _3019.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3240 = frontier_phi_73_pred;
                            _3241 = frontier_phi_73_pred_1;
                            _3245 = frontier_phi_73_pred_2;
                            _3244 = frontier_phi_73_pred_3;
                            _3243 = frontier_phi_73_pred_4;
                            _3242 = frontier_phi_73_pred_5;
                            _2949 = _3243 + _2962;
                            _2950 = _3244 + _2963;
                            _2951 = _3245 + _2964;
                            _2946 = _3240 + _2959;
                            _2947 = _3241 + _2960;
                            _2948 = _3242 + _2961;
                            if (_2966 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2966;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2949;
                        frontier_phi_67_pred_1 = _2950;
                        frontier_phi_67_pred_2 = _2951;
                        frontier_phi_67_pred_3 = _2948;
                        frontier_phi_67_pred_4 = _2947;
                        frontier_phi_67_pred_5 = _2946;
                    }
                    _2614 = frontier_phi_67_pred;
                    _2616 = frontier_phi_67_pred_1;
                    _2618 = frontier_phi_67_pred_2;
                    _2612 = frontier_phi_67_pred_3;
                    _2610 = frontier_phi_67_pred_4;
                    _2608 = frontier_phi_67_pred_5;
                    uint _2753 = _2752 + 1u;
                    if (_2753 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2746 = _2608;
                        _2747 = _2610;
                        _2748 = _2612;
                        _2749 = _2614;
                        _2750 = _2616;
                        _2751 = _2618;
                        _2752 = _2753;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2616;
                frontier_phi_55_56_ladder_1 = _2618;
                frontier_phi_55_56_ladder_2 = _2614;
                frontier_phi_55_56_ladder_3 = _2612;
                frontier_phi_55_56_ladder_4 = _2610;
                frontier_phi_55_56_ladder_5 = _2608;
            }
            else
            {
                frontier_phi_55_56_ladder = _2502;
                frontier_phi_55_56_ladder_1 = _2504;
                frontier_phi_55_56_ladder_2 = _2500;
                frontier_phi_55_56_ladder_3 = _2498;
                frontier_phi_55_56_ladder_4 = _2496;
                frontier_phi_55_56_ladder_5 = _2494;
            }
            _2607 = frontier_phi_55_56_ladder_5;
            _2609 = frontier_phi_55_56_ladder_4;
            _2611 = frontier_phi_55_56_ladder_3;
            _2613 = frontier_phi_55_56_ladder_2;
            _2615 = frontier_phi_55_56_ladder;
            _2617 = frontier_phi_55_56_ladder_1;
        }
        float _2622 = isnan(1.0) ? _672 : (isnan(_672) ? 1.0 : min(_672, 1.0));
        _2406 = (_2622 * _2613) + _1858;
        _2408 = (_2622 * _2615) + _1860;
        _2410 = (_2622 * _2617) + _1862;
        _2412 = ((_2607 * 0.039999999105930328369140625) * _2622) + _2191;
        _2414 = ((_2609 * 0.039999999105930328369140625) * _2622) + _2193;
        _2416 = ((_2611 * 0.039999999105930328369140625) * _2622) + _2195;
    }
    else
    {
        _2406 = _1858;
        _2408 = _1860;
        _2410 = _1862;
        _2412 = _2191;
        _2414 = _2193;
        _2416 = _2195;
    }
    float _4282 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4293 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4304 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    uint _2436 = _228 + 6u;
    float _2444 = _606 / cbSceneParam._m0[86u].x;
    float _2445 = _607 / cbSceneParam._m0[86u].y;
    vec4 _2459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2461 = _2459.x;
    float _2462 = _2459.y;
    float _2463 = _2459.z;
    float _2464 = _2459.w;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _2519 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _2520 = _2519 / _540;
        float _2531 = _2520 * _591;
        float _2532 = _592 * _2520;
        float _2533 = (-0.0) - _2532;
        float _2535 = _2520 * _593;
        float _2537 = (cbSceneParam._m0[77u].w * _2533) / _2519;
        float _2538 = _2537 + cbSceneParam._m0[79u].w;
        float _2539 = cbSceneParam._m0[79u].w - _2532;
        float _2545 = sqrt(((_2531 * _2531) + (_2532 * _2532)) + (_2535 * _2535));
        float _2548 = (1.0 - (cbSceneParam._m0[77u].w / _2519)) * _2545;
        float _2553 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2555 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2708;
        if (abs((_2533 - _2537) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2708 = ((((_2538 > 0.0) ? exp2(_2553 * _2538) : (2.0 - exp2(_2555 * _2538))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2548;
        }
        else
        {
            float _2668 = 1.0 / cbSceneParam._m0[80u].x;
            float _2669 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : max(_2538, _2539));
            float _2670 = isnan(_2539) ? _2538 : (isnan(_2538) ? _2539 : min(_2538, _2539));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            float _2680 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : min(_2670, 0.0));
            _2708 = ((abs(_2545 / _2533) * cbSceneParam._m0[80u].y) * ((((_2679 - _2680) * 2.0) - ((exp2(_2553 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)))) - exp2(_2553 * (isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0))))) * _2668)) - ((exp2(_2555 * _2679) - exp2(_2555 * _2680)) * _2668))) + (_2548 * cbSceneParam._m0[80u].z);
        }
        vec4 _2710 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, 1.0), 0.0);
        float _2719 = exp2((_2708 * (-1.44269502162933349609375)) * (1.0 - _2710.w));
        float _2720 = log2(_2719);
        float _2736 = log2(_2464);
        _2557 = (exp2(_2736 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2720 * cbSceneParam._m0[78u].x)) * _2710.x) / cbSceneParam._m0[78u].x)) + _2461;
        _2559 = (exp2(_2736 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2720 * cbSceneParam._m0[78u].y)) * _2710.y) / cbSceneParam._m0[78u].y)) + _2462;
        _2561 = (exp2(_2736 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2720 * cbSceneParam._m0[78u].z)) * _2710.z) / cbSceneParam._m0[78u].z)) + _2463;
        _2563 = _2719 * _2464;
    }
    else
    {
        _2557 = _2461;
        _2559 = _2462;
        _2561 = _2463;
        _2563 = _2464;
    }
    float _2575 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2576 = _2575 == 3.0;
    float _2577 = log2(_2563);
    float _2584 = exp2(_2577 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2406 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _672))) + ((_2412 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1477)) * cbPerFrame._m0[3u].x));
    float _2585 = exp2(_2577 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2408 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _672))) + ((_2414 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1477)) * cbPerFrame._m0[3u].x));
    float _2586 = exp2(_2577 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2410 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _672))) + ((_2416 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1477)) * cbPerFrame._m0[3u].x));
    float _2595 = (_2575 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2595 * (_2576 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2557)));
    SV_Target.y = _2595 * (_2576 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2559)));
    SV_Target.z = _2595 * (_2576 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2561)));
    SV_Target.w = cbInstanceData._m0[_2436].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2436].w;
}


