#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1262;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3851 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3862 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3873 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3884 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _429 = (_422 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _430 = (_422 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _431 = (_422 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    float _435 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _429;
    float _438 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _430;
    float _441 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _431;
    float _448 = ((_429 - _435) * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) + _435;
    float _449 = ((_430 - _438) * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) + _438;
    float _450 = ((_431 - _441) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) + _441;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _507 = _505.x;
    float _508 = _505.y;
    float _509 = _505.z;
    float _518 = ((_488.z - _509) * _422) + _509;
    float _521 = ((((_488.x - _507) * _422) + _507) * 2.0) + (-1.0);
    float _522 = ((((_488.y - _508) * _422) + _508) * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3895 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _528 = sqrt(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))));
    float _533 = _521 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_463.x * 2.0) + (-1.0)));
    float _534 = _522 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_463.y * 2.0) + (-1.0)));
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _563 = _561.x;
    float _564 = 1.0 - _563;
    float _590 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_563 - _564) * cbMtdParam._m0[24u].w) + _564) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3906 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _599 = ((((cbMtdParam._m0[10u].x - _448) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _591) + _448;
    float _600 = ((((cbMtdParam._m0[10u].y - _449) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _591) + _449;
    float _601 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _450)) * _591) + _450;
    float _606 = (((_463.z - _518) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _518;
    float _610 = ((cbMtdParam._m0[23u].y - _606) * _591) + _606;
    vec4 _629 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _631 = _629.x;
    float _632 = _629.y;
    float _638 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_242, _243, _244, 0.0));
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _292) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _293) + cbTextureTilingScale._m0[18u].w));
    float _655 = _653.x;
    float _660 = fract(_653.w + cbPerFrame._m0[22u].x);
    float _662 = (1.0 - _660) * _655;
    float _667 = ((_660 + (-1.0)) + _655) * 9.0;
    float _669 = ((_655 + (-1.0)) + _660) * 9.0;
    float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _671 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _685 = (_662 * ((_653.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _670 : (isnan(_670) ? 3.0 : min(_670, 3.0))) * 3.1415927410125732421875);
    float _687 = (_662 * ((_653.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _671 : (isnan(_671) ? 3.0 : min(_671, 3.0))) * 3.1415927410125732421875);
    float _691 = inversesqrt(dot(vec3(_685, _687, 1.0), vec3(_685, _687, 1.0)));
    float _707 = (((((0.5 - _631) + ((_685 * 0.5) * _691)) * _638) + _631) * 2.0) + (-1.0);
    float _708 = (((((0.5 - _632) + ((_691 * 0.5) * _687)) * _638) + _632) * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3937 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _725 = ((((cbMtdParam._m0[22u].z * _533) - _533) + _707) * _591) + _533;
    float _726 = ((((cbMtdParam._m0[22u].z * _534) - _534) + _708) * _591) + _534;
    float _727 = (_591 * (sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _528)) + _528;
    float _729 = cbMtdParam._m0[22u].x + _547.w;
    float _732 = fma(_727, _242, fma(_726, _248 * TANGENT.x, (_234 * _226) * _725));
    float _735 = fma(_727, _243, fma(_726, _248 * TANGENT.y, (_234 * _227) * _725));
    float _738 = fma(_727, _244, fma(_726, _248 * TANGENT.z, (_234 * _228) * _725));
    float _742 = inversesqrt(dot(vec3(_732, _735, _738), vec3(_732, _735, _738)));
    float _743 = _742 * _732;
    float _744 = _742 * _735;
    float _745 = _742 * _738;
    float _3948 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _746 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3970 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3981 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3992 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _764 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _815 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _805);
    float _816 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _805);
    float _817 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _805);
    float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
    float _822 = _815 * _821;
    float _823 = _816 * _821;
    float _824 = _817 * _821;
    float _830 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _831 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _849 = fma(_745, cbSceneParam._m0[5u].z, fma(_744, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _743));
    float _852 = fma(_745, cbSceneParam._m0[6u].z, fma(_744, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _743));
    float _855 = fma(_745, cbSceneParam._m0[7u].z, fma(_744, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _743));
    uint _869 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _875 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_869].x;
    float _876 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_869].y;
    float _877 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_869].z;
    float _4003 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _830, cbSceneParam._m0[86u].y * _831));
    float _893 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * TEXCOORD_5.w) * _889.x;
    float _894 = dot(vec3(_743, _744, _745), vec3(_822, _823, _824));
    float _897 = _894 * 2.0;
    float _901 = (_897 * _743) - _822;
    float _902 = (_897 * _744) - _823;
    float _903 = (_897 * _745) - _824;
    float _907 = abs(dot(vec3(_822, _823, _824), vec3(_743, _744, _745)));
    float _4036 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _909 = sqrt(_746);
    float _921 = exp2((_909 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_909 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1261;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _991 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _995 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1019 = _953 + _743;
        float _1020 = _957 + _744;
        float _1021 = _961 + _745;
        float _1031 = fma(_1021, cbModelParam._m0[26u].z, fma(_1020, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019)) - _987;
        float _1032 = fma(_1021, cbModelParam._m0[27u].z, fma(_1020, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019)) - _991;
        float _1033 = fma(_1021, cbModelParam._m0[28u].z, fma(_1020, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019)) - _995;
        float _1037 = inversesqrt(dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033)));
        float _1050 = ((_1037 * _1031) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1051 = ((_1037 * _1032) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1037 * _1033) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1050, _1051, _1052), 0.0);
        float _1089 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1055.x + (-0.5));
        float _1091 = _1089 * (_1055.y + (-0.5));
        float _1092 = _1089 * (_1055.z + (-0.5));
        float _1099 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1062.x + (-0.5));
        float _1101 = _1099 * (_1062.y + (-0.5));
        float _1102 = _1099 * (_1062.z + (-0.5));
        float _1109 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1069.x + (-0.5));
        float _1111 = _1109 * (_1069.y + (-0.5));
        float _1112 = _1109 * (_1069.z + (-0.5));
        float _1119 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1076.x + (-0.5));
        float _1121 = _1119 * (_1076.y + (-0.5));
        float _1122 = _1119 * (_1076.z + (-0.5));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = _1090 * 0.5;
        float _1127 = _1100 * 0.5;
        float _1128 = _1110 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1143 = (dot(vec3(_743, _744, _745), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4062 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1153 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4073 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4084 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1155 + 1.0))) + _1160) * _1123;
        float _1170 = _1091 * 0.5;
        float _1171 = _1101 * 0.5;
        float _1172 = _1111 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_743, _744, _745), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _4095 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _4106 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _4117 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_1197 + 1.0))) + _1202) * _1124;
        float _1212 = _1092 * 0.5;
        float _1213 = _1102 * 0.5;
        float _1214 = _1112 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_743, _744, _745), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4150 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1239 + 1.0))) + _1244) * _1125;
        _1261 = _1092;
        _1263 = _1091;
        _1264 = _1090;
        _1265 = _1102;
        _1266 = _1101;
        _1267 = _1100;
        _1268 = _1112;
        _1269 = _1111;
        _1270 = _1110;
        _1271 = _1125;
        _1272 = _1124;
        _1273 = _1123;
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
    }
    else
    {
        _1261 = _1262;
        _1263 = _1262;
        _1264 = _1262;
        _1265 = _1262;
        _1266 = _1262;
        _1267 = _1262;
        _1268 = _1262;
        _1269 = _1262;
        _1270 = _1262;
        _1271 = _1262;
        _1272 = _1262;
        _1273 = _1262;
        _1274 = 0.0;
        _1275 = 0.0;
        _1276 = 0.0;
    }
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1301 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1305 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1309 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1332 = _953 + _743;
        float _1333 = _957 + _744;
        float _1334 = _961 + _745;
        float _1344 = fma(_1334, cbModelParam._m0[30u].z, fma(_1333, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1332)) - _1301;
        float _1345 = fma(_1334, cbModelParam._m0[31u].z, fma(_1333, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1332)) - _1305;
        float _1346 = fma(_1334, cbModelParam._m0[32u].z, fma(_1333, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1332)) - _1309;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1301 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1305 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[35u].z) + ((((((_1309 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1400 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1367.x + (-0.5));
        float _1402 = _1400 * (_1367.y + (-0.5));
        float _1403 = _1400 * (_1367.z + (-0.5));
        float _1410 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1374.x + (-0.5));
        float _1412 = _1410 * (_1374.y + (-0.5));
        float _1413 = _1410 * (_1374.z + (-0.5));
        float _1420 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1381.x + (-0.5));
        float _1422 = _1420 * (_1381.y + (-0.5));
        float _1423 = _1420 * (_1381.z + (-0.5));
        float _1430 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1388.x + (-0.5));
        float _1432 = _1430 * (_1388.y + (-0.5));
        float _1433 = _1430 * (_1388.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_743, _744, _745), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4191 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4202 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4213 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_1464 + 1.0))) + _1469) * _1434;
        float _1479 = _1402 * 0.5;
        float _1480 = _1412 * 0.5;
        float _1481 = _1422 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_743, _744, _745), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4224 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4235 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4246 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_1506 + 1.0))) + _1511) * _1435;
        float _1521 = _1403 * 0.5;
        float _1522 = _1413 * 0.5;
        float _1523 = _1423 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_743, _744, _745), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4279 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1548 + 1.0))) + _1553) * _1436;
        _1570 = _1403;
        _1571 = _1402;
        _1572 = _1401;
        _1573 = _1413;
        _1574 = _1412;
        _1575 = _1411;
        _1576 = _1423;
        _1577 = _1422;
        _1578 = _1421;
        _1579 = _1436;
        _1580 = _1435;
        _1581 = _1434;
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1262;
        _1571 = _1262;
        _1572 = _1262;
        _1573 = _1262;
        _1574 = _1262;
        _1575 = _1262;
        _1576 = _1262;
        _1577 = _1262;
        _1578 = _1262;
        _1579 = _1262;
        _1580 = _1262;
        _1581 = _1262;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1274)) + _1274;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1275)) + _1275;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1276)) + _1276;
    float _1617 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1594));
    float _1638 = _901 * 0.5;
    float _1639 = _902 * 0.5;
    float _1640 = _903 * 0.5;
    float _1641 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1644 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1647 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1681;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1654 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1261, _1265, _1268, _1271));
        float _1658 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1263, _1266, _1269, _1272));
        float _1662 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1669 = dot(vec4(cbModelParam._m0[39u]), vec4(_1638, _1639, _1640, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1692;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1683 = dot(vec4(cbModelParam._m0[40u]), vec4(_1638, _1639, _1640, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1696 = (_1692 * cbModelParam._m0[1u].x) + (_1681 * (1.0 - cbModelParam._m0[1u].x));
    float _1706 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _746);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1706 : min(cbModelParam._m0[25u].z, _1706));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_903, cbModelParam._m0[13u].z, fma(_902, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _901));
        float _1770 = fma(_903, cbModelParam._m0[14u].z, fma(_902, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _901));
        float _1773 = fma(_903, cbModelParam._m0[15u].z, fma(_902, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _901));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1801 = frontier_phi_14_12_ladder;
        }
        float _1971;
        if (_1770 > 0.0)
        {
            _1971 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1971 = frontier_phi_23_19_ladder;
        }
        float _2266;
        if (_1773 > 0.0)
        {
            _2266 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2266 = frontier_phi_35_30_ladder;
        }
        float _2268 = isnan(_1971) ? _1801 : (isnan(_1801) ? _1971 : min(_1801, _1971));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1767) + _1756;
        float _2274 = (_2269 * _1770) + _1760;
        float _2275 = (_2269 * _1773) + _1764;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1707);
            frontier_phi_13_35_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_13_35_ladder_2;
        _1791 = frontier_phi_13_35_ladder_1;
        _1793 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_901, _902, _903), _1707);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _746);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_903, cbModelParam._m0[21u].z, fma(_902, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _901));
        float _1866 = fma(_903, cbModelParam._m0[22u].z, fma(_902, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _901));
        float _1869 = fma(_903, cbModelParam._m0[23u].z, fma(_902, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _901));
        float _1976;
        if (_1863 > 0.0)
        {
            _1976 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1976 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1866 > 0.0)
        {
            _2293 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2620;
        if (_1869 > 0.0)
        {
            _2620 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2620 = frontier_phi_47_44_ladder;
        }
        float _2622 = isnan(_2293) ? _1976 : (isnan(_1976) ? _2293 : min(_1976, _2293));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1863) + _1852;
        float _2628 = (_2623 * _1866) + _1856;
        float _2629 = (_2623 * _1869) + _1860;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_22_47_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_22_47_ladder_2;
        _1890 = frontier_phi_22_47_ladder_1;
        _1892 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_901, _902, _903), _1798);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _921) * ((_909 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _909)) * _893;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1963 = _1950 / _1962;
    float _1964 = _1954 / _1962;
    float _1965 = _1958 / _1962;
    float _2112;
    float _2113;
    float _2114;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1992 = ((uint(_1965 > cbSceneParam._m0[59u].y) + uint(_1965 > cbSceneParam._m0[59u].x)) + uint(_1965 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1993 = _1992 + 43u;
        uint _2001 = _1992 + 44u;
        uint _2009 = _1992 + 45u;
        uint _2017 = _1992 + 46u;
        float _2028 = fma(_1962, cbSceneParam._m0[_1993].w, fma(_1958, cbSceneParam._m0[_1993].z, fma(_1954, cbSceneParam._m0[_1993].y, _1950 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1962, cbSceneParam._m0[_2001].w, fma(_1958, cbSceneParam._m0[_2001].z, fma(_1954, cbSceneParam._m0[_2001].y, _1950 * cbSceneParam._m0[_2001].x)));
        float _2040 = fma(_1962, cbSceneParam._m0[_2017].w, fma(_1958, cbSceneParam._m0[_2017].z, fma(_1954, cbSceneParam._m0[_2017].y, _1950 * cbSceneParam._m0[_2017].x)));
        float _2045 = cbSceneParam._m0[33u].z * _2040;
        float _2047 = cbSceneParam._m0[33u].w * _2040;
        float _2050 = fma(_1962, cbSceneParam._m0[_2009].w, fma(_1958, cbSceneParam._m0[_2009].z, fma(_1954, cbSceneParam._m0[_2009].y, _1950 * cbSceneParam._m0[_2009].x))) / _2040;
        float _2098 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
        float _4405 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2105 = (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2028) / _2040, (_2047 + _2032) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2028) / _2040, (_2032 - _2045) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2045) / _2040, (_2032 - _2047) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2047) / _2040, (_2045 + _2032) / _2040), _2050), 0.0)).x), vec4(0.25)));
        _2112 = 1.0 - (_2105 * cbSceneParam._m0[34u].x);
        _2113 = 1.0 - (_2105 * cbSceneParam._m0[34u].y);
        _2114 = 1.0 - (_2105 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2112 = 1.0;
        _2113 = 1.0;
        _2114 = 1.0;
    }
    float _2178;
    float _2180;
    float _2182;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2166 = fma(_1962, cbSceneParam._m0[63u].w, fma(_1958, cbSceneParam._m0[63u].z, fma(_1954, cbSceneParam._m0[63u].y, _1950 * cbSceneParam._m0[63u].x)));
        float _2167 = fma(_1962, cbSceneParam._m0[60u].w, fma(_1958, cbSceneParam._m0[60u].z, fma(_1954, cbSceneParam._m0[60u].y, _1950 * cbSceneParam._m0[60u].x))) / _2166;
        float _2168 = fma(_1962, cbSceneParam._m0[61u].w, fma(_1958, cbSceneParam._m0[61u].z, fma(_1954, cbSceneParam._m0[61u].y, _1950 * cbSceneParam._m0[61u].x))) / _2166;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2167 >= cbSceneParam._m0[64u].x) && (_2168 >= cbSceneParam._m0[64u].y)) && (_2167 <= cbSceneParam._m0[64u].z)) && (_2168 <= cbSceneParam._m0[64u].w))
        {
            float _2306 = fma(_1962, cbSceneParam._m0[62u].w, fma(_1958, cbSceneParam._m0[62u].z, fma(_1954, cbSceneParam._m0[62u].y, _1950 * cbSceneParam._m0[62u].x))) / _2166;
            float _2310 = isnan(cbSceneParam._m0[41u].w) ? _2306 : (isnan(_2306) ? cbSceneParam._m0[41u].w : max(_2306, cbSceneParam._m0[41u].w));
            float _2353 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
            float _4421 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
            float _2360 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2167, cbSceneParam._m0[33u].w + _2168), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2167, _2168 - cbSceneParam._m0[33u].z), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].z, _2168 - cbSceneParam._m0[33u].w), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2168), _2310), 0.0)).x), vec4(0.25)));
            float _2364 = 1.0 - (_2360 * cbSceneParam._m0[34u].x);
            float _2365 = 1.0 - (_2360 * cbSceneParam._m0[34u].y);
            float _2366 = 1.0 - (_2360 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
            frontier_phi_34_33_ladder_1 = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
            frontier_phi_34_33_ladder_2 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
        }
        else
        {
            frontier_phi_34_33_ladder = _2114;
            frontier_phi_34_33_ladder_1 = _2113;
            frontier_phi_34_33_ladder_2 = _2112;
        }
        _2178 = frontier_phi_34_33_ladder_2;
        _2180 = frontier_phi_34_33_ladder_1;
        _2182 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2178 = _2112;
        _2180 = _2113;
        _2182 = _2114;
    }
    uvec4 _2187 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2189 = _2187.x * 14u;
    uint _2190 = _2189 + 13u;
    float _2197 = _893 + (-1.0);
    float _2202 = (cbLight._m0[_2190].x * _2197) + 1.0;
    float _2203 = (cbLight._m0[_2190].y * _2197) + 1.0;
    float _2204 = (cbLight._m0[_2190].z * _2197) + 1.0;
    float _2205 = (cbLight._m0[_2190].w * _2197) + 1.0;
    uint _2206 = _2189 + 5u;
    float _2212 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2216 = _2189 + 4u;
    float _2225 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2229 = _2189 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_743, _744, _745));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_743, _744, _745));
    float _4457 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4468 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2206].x * _2212) * _2250) + (((cbLight._m0[_2216].x * _2178) * _2225) * _2248);
    float _2258 = ((_2212 * cbLight._m0[_2206].y) * _2250) + (((cbLight._m0[_2216].y * _2180) * _2225) * _2248);
    float _2259 = ((_2212 * cbLight._m0[_2206].z) * _2250) + (((cbLight._m0[_2216].z * _2182) * _2225) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2189 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2265)
    {
        _2367 = _2257;
        _2369 = _2258;
        _2371 = _2259;
    }
    else
    {
        uint _2375 = _2189 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2189 + 2u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4479 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2394 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2257;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2258;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2259;
    }
    bool _2374 = _2263.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2374)
    {
        _2429 = _2367;
        _2431 = _2369;
        _2433 = _2371;
    }
    else
    {
        uint _2591 = _2189 + 7u;
        float _2607 = (dot(vec3(cbLight._m0[_2189 + 3u].xyz), vec3(_743, _744, _745)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4495 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2610 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2429 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2367;
        _2431 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2369;
        _2433 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2371;
    }
    uint _2436 = _2189 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _746) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2189].x + _822;
    float _2452 = cbLight._m0[_2189].y + _823;
    float _2453 = cbLight._m0[_2189].z + _824;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2189].xyz));
    float _4511 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _4522 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _2465 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _2466 = dot(vec3(_743, _744, _745), vec3(_2458, _2459, _2460));
    float _4533 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2458, _2459, _2460));
    float _4544 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2490 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2465 * ((_2464 * _2490) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2490) + _2450) * _2464))) * _2464;
    float _4555 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2517 = _2189 + 9u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _746) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2229].x + _822;
    float _2531 = cbLight._m0[_2229].y + _823;
    float _2532 = cbLight._m0[_2229].z + _824;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2229].xyz));
    float _4566 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2544 = dot(vec3(_743, _744, _745), vec3(_2537, _2538, _2539));
    float _4577 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2537, _2538, _2539));
    float _4588 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2529 * _2529;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2566 = 1.0 - _2529;
    float _2576 = (0.5 / (((_2465 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2566) + _2529) * _2543))) * _2543;
    float _4599 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    float _2588 = (((_2565 * cbLight._m0[_2517].x) * _2578) * _2212) + ((((cbLight._m0[_2436].x * _2178) * _2489) * _2503) * _2225);
    float _2589 = (((_2565 * cbLight._m0[_2517].y) * _2578) * _2212) + ((((cbLight._m0[_2436].y * _2180) * _2489) * _2503) * _2225);
    float _2590 = (((_2565 * cbLight._m0[_2517].z) * _2578) * _2212) + ((((cbLight._m0[_2436].z * _2182) * _2489) * _2503) * _2225);
    float _2646;
    float _2648;
    float _2650;
    if (_2265)
    {
        _2646 = _2588;
        _2648 = _2589;
        _2650 = _2590;
    }
    else
    {
        uint _2652 = _2189 + 2u;
        uint _2656 = _2189 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _746) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _822;
        float _2673 = cbLight._m0[_2652].y + _823;
        float _2674 = cbLight._m0[_2652].z + _824;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2652].xyz));
        float _4610 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _2686 = dot(vec3(_743, _744, _745), vec3(_2679, _2680, _2681));
        float _4621 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4632 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2708 = 1.0 - _2671;
        float _2718 = (0.5 / (((_2465 * ((_2685 * _2708) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2708) + _2671) * _2685))) * _2685;
        float _4643 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2646 = (((_2707 * cbLight._m0[_2656].x) * _2720) * _2721) + _2588;
        _2648 = (((_2707 * cbLight._m0[_2656].y) * _2720) * _2721) + _2589;
        _2650 = (((_2707 * cbLight._m0[_2656].z) * _2720) * _2721) + _2590;
    }
    float _2752;
    float _2754;
    float _2756;
    if (_2374)
    {
        _2752 = _2646;
        _2754 = _2648;
        _2756 = _2650;
    }
    else
    {
        uint _2763 = _2189 + 3u;
        uint _2767 = _2189 + 11u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _746) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _822;
        float _2784 = cbLight._m0[_2763].y + _823;
        float _2785 = cbLight._m0[_2763].z + _824;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_743, _744, _745), vec3(cbLight._m0[_2763].xyz));
        float _4659 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2797 = dot(vec3(_743, _744, _745), vec3(_2790, _2791, _2792));
        float _4670 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4681 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2818 = (exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2819 = 1.0 - _2782;
        float _2829 = (0.5 / (((_2465 * ((_2796 * _2819) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2819) + _2782) * _2796))) * _2796;
        float _4692 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2752 = (((_2818 * cbLight._m0[_2767].x) * _2831) * _2832) + _2646;
        _2754 = (((_2818 * cbLight._m0[_2767].y) * _2831) * _2832) + _2648;
        _2756 = (((_2818 * cbLight._m0[_2767].z) * _2831) * _2832) + _2650;
    }
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_2187.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _831) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _830) / _2854)));
        float _2875 = (log2(_1965 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
        }
        else
        {
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            uint _3116 = 0u;
            uint _3125;
            bool _3126;
            for (;;)
            {
                _3125 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                _3126 = _3125 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3126)
                {
                    frontier_phi_66_pred = _3115;
                    frontier_phi_66_pred_1 = _3114;
                    frontier_phi_66_pred_2 = _3113;
                    frontier_phi_66_pred_3 = _3112;
                    frontier_phi_66_pred_4 = _3111;
                    frontier_phi_66_pred_5 = _3110;
                }
                else
                {
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    uint _3240;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3115;
                    _3240 = _3125;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    for (;;)
                    {
                        uint _3244 = uint(findLSB(_3240)) + (_3116 << 5u);
                        uint _3241 = (_3240 + 4294967295u) & _3240;
                        uint _3246 = _3244 * 48u;
                        vec4 _3260 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3246)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3246 + 3u)).x));
                        uint _3266 = (_3244 * 48u) + 4u;
                        vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 3u)).x));
                        uint _3285 = (_3244 * 48u) + 8u;
                        vec3 _3296 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x));
                        float _3300 = _3260.x - _1963;
                        float _3301 = _3260.y - _1964;
                        float _3302 = _3260.z - _1965;
                        float _3303 = dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302));
                        float _3306 = inversesqrt(_3303);
                        float _3307 = _3306 * _3300;
                        float _3308 = _3306 * _3301;
                        float _3309 = _3306 * _3302;
                        float _3310 = dot(vec3(_849, _852, _855), vec3(_3307, _3308, _3309));
                        float _3315 = 1.0 - (_3303 * _3260.w);
                        float _4718 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3316 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3317 = sqrt(_3303) * _3279.w;
                        float _3320 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3310) + _3321;
                        float _3327 = _3317 * _3317;
                        float _3331 = ((isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0))) * _3316) / ((_3327 * 0.699999988079071044921875) + 1.0);
                        float _3335 = (-0.0) - _1963;
                        float _3336 = (-0.0) - _1964;
                        float _3337 = (-0.0) - _1965;
                        float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                        float _3342 = _3341 * _3335;
                        float _3343 = _3341 * _3336;
                        float _3344 = _3341 * _3337;
                        float _3351 = exp2(log2(1.0 / ((_3327 * 3.5) + 5.0)) * 0.25);
                        float _3352 = 1.0 - _909;
                        float _3359 = sqrt(1.0 - ((1.0 - (_3352 * _3352)) * (1.0 - (_3351 * _3351))));
                        float _3360 = _3359 * _3359;
                        float _3361 = _3360 * _3360;
                        float _3362 = _3342 + _3307;
                        float _3363 = _3343 + _3308;
                        float _3364 = _3344 + _3309;
                        float _3368 = inversesqrt(dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364)));
                        float _3372 = dot(vec3(_849, _852, _855), vec3(_3342, _3343, _3344));
                        float _4734 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3375 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3376 = dot(vec3(_849, _852, _855), vec3(_3368 * _3362, _3368 * _3363, _3368 * _3364));
                        float _4745 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                        float _3379 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3383 = ((_3379 * _3379) * (_3361 + (-1.0))) + 1.0;
                        float _3384 = _3320 * _3360;
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3310) + _3385;
                        float _4756 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                        float _3389 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3390 = 1.0 - _3360;
                        float _3400 = (0.5 / (((_3389 * ((_3375 * _3390) + _3360)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3360) * _3375))) * _3389;
                        float _4767 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3410 = (((_3361 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3383 * _3383) * ((_3327 * 2.1991131305694580078125) + 3.141590118408203125))) * _3316;
                        _3169 = (_3331 * _3279.x) + _3237;
                        _3170 = (_3331 * _3279.y) + _3238;
                        _3171 = (_3331 * _3279.z) + _3239;
                        _3166 = (_3410 * _3296.x) + _3234;
                        _3167 = (_3410 * _3296.y) + _3235;
                        _3168 = (_3410 * _3296.z) + _3236;
                        if (_3241 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3171;
                            _3240 = _3241;
                        }
                    }
                    frontier_phi_66_pred = _3171;
                    frontier_phi_66_pred_1 = _3170;
                    frontier_phi_66_pred_2 = _3169;
                    frontier_phi_66_pred_3 = _3168;
                    frontier_phi_66_pred_4 = _3167;
                    frontier_phi_66_pred_5 = _3166;
                }
                _2976 = frontier_phi_66_pred;
                _2974 = frontier_phi_66_pred_1;
                _2972 = frontier_phi_66_pred_2;
                _2970 = frontier_phi_66_pred_3;
                _2968 = frontier_phi_66_pred_4;
                _2966 = frontier_phi_66_pred_5;
                uint _3117 = _3116 + 1u;
                if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3110 = _2966;
                    _3111 = _2968;
                    _3112 = _2970;
                    _3113 = _2972;
                    _3114 = _2974;
                    _3115 = _2976;
                    _3116 = _3117;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
        }
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.z;
        uint _2982 = (_2980 >> 8u) & 15u;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((4294967295u << _2982) & _2885) == 0u)
        {
            _3078 = _2965;
            _3080 = _2967;
            _3082 = _2969;
            _3084 = _2971;
            _3086 = _2973;
            _3088 = _2975;
        }
        else
        {
            float _3103 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
            float _3104 = _3103 * _1963;
            float _3105 = _3103 * _1964;
            float _3106 = _3103 * _1965;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2982 < ((_2980 >> 12u) & 15u))
            {
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3217 = _2965;
                float _3218 = _2967;
                float _3219 = _2969;
                float _3220 = _2971;
                float _3221 = _2973;
                float _3222 = _2975;
                uint _3223 = _2982;
                uint _3232;
                bool _3233;
                for (;;)
                {
                    _3232 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3223 << 2u)) >> 2u)).x;
                    _3233 = _3232 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3233)
                    {
                        frontier_phi_72_pred = _3222;
                        frontier_phi_72_pred_1 = _3221;
                        frontier_phi_72_pred_2 = _3220;
                        frontier_phi_72_pred_3 = _3219;
                        frontier_phi_72_pred_4 = _3218;
                        frontier_phi_72_pred_5 = _3217;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3428 = _3217;
                        float _3429 = _3218;
                        float _3430 = _3219;
                        float _3431 = _3220;
                        float _3432 = _3221;
                        float _3433 = _3222;
                        uint _3434 = _3232;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3445 = ((_3223 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3445 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3445 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3445 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_1965, _3552.z, fma(_1964, _3552.y, _3552.x * _1963)) + _3552.w;
                            _3565 = !((fma(_1965, _3533.z, fma(_1964, _3533.y, _3533.x * _1963)) + _3533.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3460.x - _1963;
                                float _3593 = _3460.y - _1964;
                                float _3594 = _3460.z - _1965;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3461 * _3461));
                                float _4778 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3610 = sqrt(_3595) * _3476.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_849, _852, _855))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_1965, _3503.z, fma(_1964, _3503.y, _3503.x * _1963)) + _3503.w) / _3564;
                                float _3624 = (fma(_1965, _3518.z, fma(_1964, _3518.y, _3518.x * _1963)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4794 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _909;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3104;
                                float _3654 = _3600 - _3105;
                                float _3655 = _3601 - _3106;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_849, _852, _855), vec3((-0.0) - _3104, (-0.0) - _3105, (-0.0) - _3106));
                                float _4805 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3667 = dot(vec3(_849, _852, _855), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4816 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_849, _852, _855), vec3(_3599, _3600, _3601))) + _3676;
                                float _4827 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4838 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3630 * _3476.y;
                                frontier_phi_78_pred_1 = _3630 * _3476.x;
                                frontier_phi_78_pred_2 = _3704 * _3488.z;
                                frontier_phi_78_pred_3 = _3704 * _3488.y;
                                frontier_phi_78_pred_4 = _3704 * _3488.x;
                                frontier_phi_78_pred_5 = _3630 * _3476.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3712 = frontier_phi_78_pred;
                            _3711 = frontier_phi_78_pred_1;
                            _3710 = frontier_phi_78_pred_2;
                            _3709 = frontier_phi_78_pred_3;
                            _3708 = frontier_phi_78_pred_4;
                            _3713 = frontier_phi_78_pred_5;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3420;
                        frontier_phi_72_pred_1 = _3419;
                        frontier_phi_72_pred_2 = _3418;
                        frontier_phi_72_pred_3 = _3417;
                        frontier_phi_72_pred_4 = _3416;
                        frontier_phi_72_pred_5 = _3415;
                    }
                    _3089 = frontier_phi_72_pred;
                    _3087 = frontier_phi_72_pred_1;
                    _3085 = frontier_phi_72_pred_2;
                    _3083 = frontier_phi_72_pred_3;
                    _3081 = frontier_phi_72_pred_4;
                    _3079 = frontier_phi_72_pred_5;
                    uint _3224 = _3223 + 1u;
                    if (_3224 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3217 = _3079;
                        _3218 = _3081;
                        _3219 = _3083;
                        _3220 = _3085;
                        _3221 = _3087;
                        _3222 = _3089;
                        _3223 = _3224;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3089;
                frontier_phi_60_61_ladder_1 = _3087;
                frontier_phi_60_61_ladder_2 = _3083;
                frontier_phi_60_61_ladder_3 = _3081;
                frontier_phi_60_61_ladder_4 = _3079;
                frontier_phi_60_61_ladder_5 = _3085;
            }
            else
            {
                frontier_phi_60_61_ladder = _2975;
                frontier_phi_60_61_ladder_1 = _2973;
                frontier_phi_60_61_ladder_2 = _2969;
                frontier_phi_60_61_ladder_3 = _2967;
                frontier_phi_60_61_ladder_4 = _2965;
                frontier_phi_60_61_ladder_5 = _2971;
            }
            _3078 = frontier_phi_60_61_ladder_4;
            _3080 = frontier_phi_60_61_ladder_3;
            _3082 = frontier_phi_60_61_ladder_2;
            _3084 = frontier_phi_60_61_ladder_5;
            _3086 = frontier_phi_60_61_ladder_1;
            _3088 = frontier_phi_60_61_ladder;
        }
        float _3093 = isnan(1.0) ? _893 : (isnan(_893) ? 1.0 : min(_893, 1.0));
        _2898 = (_3093 * _3084) + _2429;
        _2900 = (_3093 * _3086) + _2431;
        _2902 = (_3093 * _3088) + _2433;
        _2904 = ((_3078 * 0.039999999105930328369140625) * _3093) + _2752;
        _2906 = ((_3080 * 0.039999999105930328369140625) * _3093) + _2754;
        _2908 = ((_3082 * 0.039999999105930328369140625) * _3093) + _2756;
    }
    else
    {
        _2898 = _2429;
        _2900 = _2431;
        _2902 = _2433;
        _2904 = _2752;
        _2906 = _2754;
        _2908 = _2756;
    }
    float _4854 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4865 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4876 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    uint _2928 = _273 + 6u;
    float _2936 = _830 / cbSceneParam._m0[86u].x;
    float _2937 = _831 / cbSceneParam._m0[86u].y;
    vec4 _2951 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, (log2((isnan(cbSceneParam._m0[77u].w) ? _764 : (isnan(_764) ? cbSceneParam._m0[77u].w : min(_764, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2953 = _2951.x;
    float _2954 = _2951.y;
    float _2955 = _2951.z;
    float _2956 = _2951.w;
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    if (_764 > cbSceneParam._m0[78u].w)
    {
        float _2990 = isnan(_764) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _764 : min(cbSceneParam._m0[80u].w, _764));
        float _2991 = _2990 / _764;
        float _3002 = _2991 * _815;
        float _3003 = _816 * _2991;
        float _3004 = (-0.0) - _3003;
        float _3006 = _2991 * _817;
        float _3008 = (cbSceneParam._m0[77u].w * _3004) / _2990;
        float _3009 = _3008 + cbSceneParam._m0[79u].w;
        float _3010 = cbSceneParam._m0[79u].w - _3003;
        float _3016 = sqrt(((_3002 * _3002) + (_3003 * _3003)) + (_3006 * _3006));
        float _3019 = (1.0 - (cbSceneParam._m0[77u].w / _2990)) * _3016;
        float _3024 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3026 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3179;
        if (abs((_3004 - _3008) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3179 = ((((_3009 > 0.0) ? exp2(_3024 * _3009) : (2.0 - exp2(_3026 * _3009))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3019;
        }
        else
        {
            float _3139 = 1.0 / cbSceneParam._m0[80u].x;
            float _3140 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : max(_3009, _3010));
            float _3141 = isnan(_3010) ? _3009 : (isnan(_3009) ? _3010 : min(_3009, _3010));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            _3179 = ((abs(_3016 / _3004) * cbSceneParam._m0[80u].y) * ((((_3150 - _3151) * 2.0) - ((exp2(_3024 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0)))) - exp2(_3024 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))))) * _3139)) - ((exp2(_3026 * _3150) - exp2(_3026 * _3151)) * _3139))) + (_3019 * cbSceneParam._m0[80u].z);
        }
        vec4 _3181 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, 1.0), 0.0);
        float _3190 = exp2((_3179 * (-1.44269502162933349609375)) * (1.0 - _3181.w));
        float _3191 = log2(_3190);
        float _3207 = log2(_2956);
        _3028 = (exp2(_3207 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].x)) * _3181.x) / cbSceneParam._m0[78u].x)) + _2953;
        _3030 = (exp2(_3207 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].y)) * _3181.y) / cbSceneParam._m0[78u].y)) + _2954;
        _3032 = (exp2(_3207 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3191 * cbSceneParam._m0[78u].z)) * _3181.z) / cbSceneParam._m0[78u].z)) + _2955;
        _3034 = _3190 * _2956;
    }
    else
    {
        _3028 = _2953;
        _3030 = _2954;
        _3032 = _2955;
        _3034 = _2956;
    }
    float _3046 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3047 = _3046 == 3.0;
    float _3048 = log2(_3034);
    float _3055 = exp2(_3048 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0))) * (_2898 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _893))) + ((_2904 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1696)) * cbPerFrame._m0[3u].x));
    float _3056 = exp2(_3048 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2900 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _893))) + ((_2906 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1696)) * cbPerFrame._m0[3u].x));
    float _3057 = exp2(_3048 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2902 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _893))) + ((_2908 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1696)) * cbPerFrame._m0[3u].x));
    float _3066 = (_3046 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3066 * (_3047 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3028)));
    SV_Target.y = _3066 * (_3047 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3030)));
    SV_Target.z = _3066 * (_3047 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3032)));
    SV_Target.w = cbInstanceData._m0[_2928].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2928].w;
}


