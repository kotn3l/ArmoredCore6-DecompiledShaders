#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1026;
float _3672;
float _3673;
float _3674;
float _3675;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3684 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _407 = _405.x;
    float _408 = _405.y;
    float _409 = _405.z;
    float _418 = ((_388.z - _409) * _366) + _409;
    float _421 = ((((_388.x - _407) * _366) + _407) * 2.0) + (-1.0);
    float _423 = ((((_388.y - _408) * _366) + _408) * 2.0) + (-1.0);
    float _424 = dot(vec2(_421, _423), vec2(_421, _423));
    float _3695 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _449 = cbMtdParam._m0[22u].x + _442.w;
    float _452 = fma(_429, _217 * NORMAL.x, fma(_423, _224 * TANGENT.x, (_210 * _202) * _421));
    float _455 = fma(_429, _217 * NORMAL.y, fma(_423, _224 * TANGENT.y, (_210 * _203) * _421));
    float _458 = fma(_429, _217 * NORMAL.z, fma(_423, _224 * TANGENT.z, (_210 * _204) * _421));
    float _462 = inversesqrt(dot(vec3(_452, _455, _458), vec3(_452, _455, _458)));
    float _463 = _462 * _452;
    float _464 = _462 * _455;
    float _465 = _462 * _458;
    float _3706 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _466 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3728 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3739 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3750 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _484 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _536 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _526);
    float _537 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _526);
    float _538 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _526);
    float _542 = inversesqrt(dot(vec3(_536, _537, _538), vec3(_536, _537, _538)));
    float _543 = _536 * _542;
    float _544 = _537 * _542;
    float _545 = _538 * _542;
    vec4 _550 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _552 = _550.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _706 = sqrt(((_536 * _536) + (_537 * _537)) + (_538 * _538));
        float _712 = (cbMatDynParam._m0[5u].x * _706) + cbMatDynParam._m0[5u].y;
        float _3761 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _717 = (cbMatDynParam._m0[5u].z * _706) + cbMatDynParam._m0[5u].w;
        float _3772 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) - _713)) + _713) < ((_552 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _582 = fma(_465, cbSceneParam._m0[5u].z, fma(_464, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _463));
    float _585 = fma(_465, cbSceneParam._m0[6u].z, fma(_464, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _463));
    float _588 = fma(_465, cbSceneParam._m0[7u].z, fma(_464, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _463));
    uint _601 = _230 + 9u;
    uint _602 = _601 + uint(cbMatDynParam._m0[0u].w);
    float _608 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_602].x;
    float _609 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_602].y;
    float _610 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_602].z;
    float _3783 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _3805 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    vec4 _622 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _626 = ((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * TEXCOORD_5.w) * _622.x;
    float _627 = dot(vec3(_463, _464, _465), vec3(_543, _544, _545));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _463) - _543;
    float _635 = (_630 * _464) - _544;
    float _636 = (_630 * _465) - _545;
    float _640 = abs(dot(vec3(_543, _544, _545), vec3(_463, _464, _465)));
    float _3816 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_466);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _754 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _758 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _783 = _687 + _463;
        float _784 = _691 + _464;
        float _785 = _695 + _465;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _750;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _754;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _758;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_463, _464, _465), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3864 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_463, _464, _465), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3897 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_463, _464, _465), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3930 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1072 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1076 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1099 = _687 + _463;
        float _1100 = _691 + _464;
        float _1101 = _695 + _465;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_463, _464, _465), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3993 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_463, _464, _465), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4026 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_463, _464, _465), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4059 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = _1026;
        _1348 = _1026;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1038)) + _1038;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1039)) + _1039;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1040)) + _1040;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _634 * 0.5;
    float _1406 = _635 * 0.5;
    float _1407 = _636 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _466);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1537 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1540 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1568 = frontier_phi_17_15_ladder;
        }
        float _1739;
        if (_1537 > 0.0)
        {
            _1739 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1739 = frontier_phi_26_22_ladder;
        }
        float _2034;
        if (_1540 > 0.0)
        {
            _2034 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2034 = frontier_phi_38_33_ladder;
        }
        float _2036 = isnan(_1739) ? _1568 : (isnan(_1568) ? _1739 : min(_1568, _1739));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1534) + _1523;
        float _2042 = (_2037 * _1537) + _1527;
        float _2043 = (_2037 * _1540) + _1531;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_16_38_ladder = _2188.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2188.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2188.x * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_16_38_ladder_2;
        _1558 = frontier_phi_16_38_ladder_1;
        _1560 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1474);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _466);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1620 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1624 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1628 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1631 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1634 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1637 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1744;
        if (_1631 > 0.0)
        {
            _1744 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1744 = frontier_phi_28_24_ladder;
        }
        float _2061;
        if (_1634 > 0.0)
        {
            _2061 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2061 = frontier_phi_40_35_ladder;
        }
        float _2388;
        if (_1637 > 0.0)
        {
            _2388 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2388 = frontier_phi_50_47_ladder;
        }
        float _2390 = isnan(_2061) ? _1744 : (isnan(_1744) ? _2061 : min(_1744, _2061));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1631) + _1620;
        float _2396 = (_2391 * _1634) + _1624;
        float _2397 = (_2391 * _1637) + _1628;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2398;
        float _2401 = _2398 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2397 > _2401) || ((_2397 < _2399) || ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 < _2399) || (_2395 > _2401))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2397, cbModelParam._m0[17u].z, fma(_2396, cbModelParam._m0[17u].y, _2395 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2397, cbModelParam._m0[18u].z, fma(_2396, cbModelParam._m0[18u].y, _2395 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2397, cbModelParam._m0[19u].z, fma(_2396, cbModelParam._m0[19u].y, _2395 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_25_50_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1656 = frontier_phi_25_50_ladder_2;
        _1658 = frontier_phi_25_50_ladder_1;
        _1660 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1565);
        _1656 = _1640.x * cbModelParam._m0[1u].z;
        _1658 = _1640.y * cbModelParam._m0[1u].z;
        _1660 = _1640.z * cbModelParam._m0[1u].z;
    }
    float _1672 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1673 = _1672 * ((cbModelParam._m0[1u].w * (_1656 - _1556)) + _1556);
    float _1674 = _1672 * ((cbModelParam._m0[1u].w * (_1658 - _1558)) + _1558);
    float _1675 = _1672 * ((cbModelParam._m0[1u].w * (_1660 - _1560)) + _1560);
    float _1678 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, _1673 * cbSceneParam._m0[91u].x));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1722 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1726 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1730 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1731 = _1718 / _1730;
    float _1732 = _1722 / _1730;
    float _1733 = _1726 / _1730;
    float _1880;
    float _1881;
    float _1882;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1760 = ((uint(_1733 > cbSceneParam._m0[59u].y) + uint(_1733 > cbSceneParam._m0[59u].x)) + uint(_1733 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1761 = _1760 + 43u;
        uint _1769 = _1760 + 44u;
        uint _1777 = _1760 + 45u;
        uint _1785 = _1760 + 46u;
        float _1796 = fma(_1730, cbSceneParam._m0[_1761].w, fma(_1726, cbSceneParam._m0[_1761].z, fma(_1722, cbSceneParam._m0[_1761].y, _1718 * cbSceneParam._m0[_1761].x)));
        float _1800 = fma(_1730, cbSceneParam._m0[_1769].w, fma(_1726, cbSceneParam._m0[_1769].z, fma(_1722, cbSceneParam._m0[_1769].y, _1718 * cbSceneParam._m0[_1769].x)));
        float _1808 = fma(_1730, cbSceneParam._m0[_1785].w, fma(_1726, cbSceneParam._m0[_1785].z, fma(_1722, cbSceneParam._m0[_1785].y, _1718 * cbSceneParam._m0[_1785].x)));
        float _1813 = cbSceneParam._m0[33u].z * _1808;
        float _1815 = cbSceneParam._m0[33u].w * _1808;
        float _1818 = fma(_1730, cbSceneParam._m0[_1777].w, fma(_1726, cbSceneParam._m0[_1777].z, fma(_1722, cbSceneParam._m0[_1777].y, _1718 * cbSceneParam._m0[_1777].x))) / _1808;
        float _1866 = (cbSceneParam._m0[33u].x - sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733))) * cbSceneParam._m0[33u].y;
        float _4185 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1873 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1813 + _1796) / _1808, (_1815 + _1800) / _1808), _1818), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 + _1796) / _1808, (_1800 - _1813) / _1808), _1818), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1796 - _1813) / _1808, (_1800 - _1815) / _1808), _1818), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1796 - _1815) / _1808, (_1813 + _1800) / _1808), _1818), 0.0)).x), vec4(0.25)));
        _1880 = 1.0 - (_1873 * cbSceneParam._m0[34u].x);
        _1881 = 1.0 - (_1873 * cbSceneParam._m0[34u].y);
        _1882 = 1.0 - (_1873 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1880 = 1.0;
        _1881 = 1.0;
        _1882 = 1.0;
    }
    float _1946;
    float _1948;
    float _1950;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1934 = fma(_1730, cbSceneParam._m0[63u].w, fma(_1726, cbSceneParam._m0[63u].z, fma(_1722, cbSceneParam._m0[63u].y, _1718 * cbSceneParam._m0[63u].x)));
        float _1935 = fma(_1730, cbSceneParam._m0[60u].w, fma(_1726, cbSceneParam._m0[60u].z, fma(_1722, cbSceneParam._m0[60u].y, _1718 * cbSceneParam._m0[60u].x))) / _1934;
        float _1936 = fma(_1730, cbSceneParam._m0[61u].w, fma(_1726, cbSceneParam._m0[61u].z, fma(_1722, cbSceneParam._m0[61u].y, _1718 * cbSceneParam._m0[61u].x))) / _1934;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1935 >= cbSceneParam._m0[64u].x) && (_1936 >= cbSceneParam._m0[64u].y)) && (_1935 <= cbSceneParam._m0[64u].z)) && (_1936 <= cbSceneParam._m0[64u].w))
        {
            float _2074 = fma(_1730, cbSceneParam._m0[62u].w, fma(_1726, cbSceneParam._m0[62u].z, fma(_1722, cbSceneParam._m0[62u].y, _1718 * cbSceneParam._m0[62u].x))) / _1934;
            float _2078 = isnan(cbSceneParam._m0[41u].w) ? _2074 : (isnan(_2074) ? cbSceneParam._m0[41u].w : max(_2074, cbSceneParam._m0[41u].w));
            float _2121 = (cbSceneParam._m0[33u].x - sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733))) * cbSceneParam._m0[33u].y;
            float _4201 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
            float _2128 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1935, cbSceneParam._m0[33u].w + _1936), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1935, _1936 - cbSceneParam._m0[33u].z), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1935 - cbSceneParam._m0[33u].z, _1936 - cbSceneParam._m0[33u].w), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1935 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1936), _2078), 0.0)).x), vec4(0.25)));
            float _2132 = 1.0 - (_2128 * cbSceneParam._m0[34u].x);
            float _2133 = 1.0 - (_2128 * cbSceneParam._m0[34u].y);
            float _2134 = 1.0 - (_2128 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2134) ? _1882 : (isnan(_1882) ? _2134 : min(_1882, _2134));
            frontier_phi_37_36_ladder_1 = isnan(_2133) ? _1881 : (isnan(_1881) ? _2133 : min(_1881, _2133));
            frontier_phi_37_36_ladder_2 = isnan(_2132) ? _1880 : (isnan(_1880) ? _2132 : min(_1880, _2132));
        }
        else
        {
            frontier_phi_37_36_ladder = _1882;
            frontier_phi_37_36_ladder_1 = _1881;
            frontier_phi_37_36_ladder_2 = _1880;
        }
        _1946 = frontier_phi_37_36_ladder_2;
        _1948 = frontier_phi_37_36_ladder_1;
        _1950 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1946 = _1880;
        _1948 = _1881;
        _1950 = _1882;
    }
    uvec4 _1955 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1957 = _1955.x * 14u;
    uint _1958 = _1957 + 13u;
    float _1965 = _626 + (-1.0);
    float _1970 = (cbLight._m0[_1958].x * _1965) + 1.0;
    float _1971 = (cbLight._m0[_1958].y * _1965) + 1.0;
    float _1972 = (cbLight._m0[_1958].z * _1965) + 1.0;
    float _1973 = (cbLight._m0[_1958].w * _1965) + 1.0;
    uint _1974 = _1957 + 5u;
    float _1980 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1984 = _1957 + 4u;
    float _1993 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
    uint _1997 = _1957 | 1u;
    float _2008 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_463, _464, _465));
    float _2011 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_463, _464, _465));
    float _4237 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _4248 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2016 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2018 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * 0.3183098733425140380859375;
    float _2025 = ((cbLight._m0[_1974].x * _1980) * _2018) + (((cbLight._m0[_1984].x * _1946) * _1993) * _2016);
    float _2026 = ((_1980 * cbLight._m0[_1974].y) * _2018) + (((cbLight._m0[_1984].y * _1948) * _1993) * _2016);
    float _2027 = ((_1980 * cbLight._m0[_1974].z) * _2018) + (((cbLight._m0[_1984].z * _1950) * _1993) * _2016);
    uvec4 _2031 = floatBitsToUint(cbLight._m0[_1957 + 12u]);
    bool _2033 = _2031.x == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2033)
    {
        _2135 = _2025;
        _2137 = _2026;
        _2139 = _2027;
    }
    else
    {
        uint _2143 = _1957 + 6u;
        float _2159 = (dot(vec3(cbLight._m0[_1957 + 2u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4259 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2162 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2135 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _2025;
        _2137 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _2026;
        _2139 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _2027;
    }
    bool _2142 = _2031.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2142)
    {
        _2197 = _2135;
        _2199 = _2137;
        _2201 = _2139;
    }
    else
    {
        uint _2359 = _1957 + 7u;
        float _2375 = (dot(vec3(cbLight._m0[_1957 + 3u].xyz), vec3(_463, _464, _465)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4275 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2378 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2197 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2135;
        _2199 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2137;
        _2201 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2139;
    }
    uint _2204 = _1957 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _466) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_1957].x + _543;
    float _2220 = cbLight._m0[_1957].y + _544;
    float _2221 = cbLight._m0[_1957].z + _545;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1957].xyz));
    float _4291 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2233 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2234 = dot(vec3(_463, _464, _465), vec3(_2226, _2227, _2228));
    float _4313 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_2226, _2227, _2228));
    float _4324 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2257 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2258 = 1.0 - _2218;
    float _2269 = (0.5 / (((_2233 * ((_2232 * _2258) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2258) + _2218) * _2232))) * _2232;
    float _4335 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2271 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2285 = _1957 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _466) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_1997].x + _543;
    float _2299 = cbLight._m0[_1997].y + _544;
    float _2300 = cbLight._m0[_1997].z + _545;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_1997].xyz));
    float _4346 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2312 = dot(vec3(_463, _464, _465), vec3(_2305, _2306, _2307));
    float _4357 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2305, _2306, _2307));
    float _4368 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2334 = 1.0 - _2297;
    float _2344 = (0.5 / (((_2233 * ((_2311 * _2334) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2334) + _2297) * _2311))) * _2311;
    float _4379 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2356 = (((_2333 * cbLight._m0[_2285].x) * _2346) * _1980) + ((((cbLight._m0[_2204].x * _1946) * _2257) * _2271) * _1993);
    float _2357 = (((_2333 * cbLight._m0[_2285].y) * _2346) * _1980) + ((((cbLight._m0[_2204].y * _1948) * _2257) * _2271) * _1993);
    float _2358 = (((_2333 * cbLight._m0[_2285].z) * _2346) * _1980) + ((((cbLight._m0[_2204].z * _1950) * _2257) * _2271) * _1993);
    float _2414;
    float _2416;
    float _2418;
    if (_2033)
    {
        _2414 = _2356;
        _2416 = _2357;
        _2418 = _2358;
    }
    else
    {
        uint _2420 = _1957 + 2u;
        uint _2424 = _1957 + 10u;
        float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2420].w)) * _466) * 0.949999988079071044921875);
        float _2439 = _2438 * _2438;
        float _2440 = cbLight._m0[_2420].x + _543;
        float _2441 = cbLight._m0[_2420].y + _544;
        float _2442 = cbLight._m0[_2420].z + _545;
        float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
        float _2447 = _2446 * _2440;
        float _2448 = _2446 * _2441;
        float _2449 = _2446 * _2442;
        float _2450 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2420].xyz));
        float _4390 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2453 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2454 = dot(vec3(_463, _464, _465), vec3(_2447, _2448, _2449));
        float _4401 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2458 = dot(vec3(cbLight._m0[_2420].xyz), vec3(_2447, _2448, _2449));
        float _4412 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2462 = _2439 * _2439;
        float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
        float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2476 = 1.0 - _2439;
        float _2486 = (0.5 / (((_2233 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2476) + _2439) * _2453))) * _2453;
        float _4423 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
        float _2488 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
        float _2489 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
        _2414 = (((_2475 * cbLight._m0[_2424].x) * _2488) * _2489) + _2356;
        _2416 = (((_2475 * cbLight._m0[_2424].y) * _2488) * _2489) + _2357;
        _2418 = (((_2475 * cbLight._m0[_2424].z) * _2488) * _2489) + _2358;
    }
    float _2520;
    float _2522;
    float _2524;
    if (_2142)
    {
        _2520 = _2414;
        _2522 = _2416;
        _2524 = _2418;
    }
    else
    {
        uint _2531 = _1957 + 3u;
        uint _2535 = _1957 + 11u;
        float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _466) * 0.949999988079071044921875);
        float _2550 = _2549 * _2549;
        float _2551 = cbLight._m0[_2531].x + _543;
        float _2552 = cbLight._m0[_2531].y + _544;
        float _2553 = cbLight._m0[_2531].z + _545;
        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
        float _2558 = _2557 * _2551;
        float _2559 = _2557 * _2552;
        float _2560 = _2557 * _2553;
        float _2561 = dot(vec3(_463, _464, _465), vec3(cbLight._m0[_2531].xyz));
        float _4439 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2565 = dot(vec3(_463, _464, _465), vec3(_2558, _2559, _2560));
        float _4450 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2568 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _2569 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2558, _2559, _2560));
        float _4461 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2573 = _2550 * _2550;
        float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
        float _2586 = (exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2587 = 1.0 - _2550;
        float _2597 = (0.5 / (((_2233 * ((_2564 * _2587) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2587) + _2550) * _2564))) * _2564;
        float _4472 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2520 = (((_2586 * cbLight._m0[_2535].x) * _2599) * _2600) + _2414;
        _2522 = (((_2586 * cbLight._m0[_2535].y) * _2599) * _2600) + _2416;
        _2524 = (((_2586 * cbLight._m0[_2535].z) * _2599) * _2600) + _2418;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1955.y == 0u)
    {
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.x;
        uint _2633 = uint((float(_2621.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2622))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2622)));
        float _2643 = (log2(_1733 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2644 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        uint _2647 = uint(isnan(14.0) ? _2644 : (isnan(_2644) ? 14.0 : min(_2644, 14.0)));
        uvec4 _2652 = texelFetch(g_lightClusterGridBuffer, int(((_2647 << 2u) + (_2633 << 6u)) >> 2u));
        uint _2653 = _2652.x;
        uint _2654 = _2621.z;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        if (((((1u << ((_2654 >> 4u) & 15u)) + 4294967295u) & _2653) == 0u) || ((_2654 & 240u) == 0u))
        {
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
        }
        else
        {
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            uint _2892 = 0u;
            uint _2901;
            bool _2902;
            for (;;)
            {
                _2901 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_2892 << 2u)) >> 2u)).x;
                _2902 = _2901 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2902)
                {
                    frontier_phi_71_pred = _2891;
                    frontier_phi_71_pred_1 = _2890;
                    frontier_phi_71_pred_2 = _2889;
                    frontier_phi_71_pred_3 = _2888;
                    frontier_phi_71_pred_4 = _2887;
                    frontier_phi_71_pred_5 = _2886;
                }
                else
                {
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    uint _3037;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2901;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    for (;;)
                    {
                        uint _3041 = uint(findLSB(_3037)) + (_2892 << 5u);
                        uint _3038 = (_3037 + 4294967295u) & _3037;
                        uint _3043 = _3041 * 48u;
                        vec4 _3057 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3063 = (_3041 * 48u) + 4u;
                        vec4 _3076 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3082 = (_3041 * 48u) + 8u;
                        vec3 _3093 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x));
                        float _3097 = _3057.x - _1731;
                        float _3098 = _3057.y - _1732;
                        float _3099 = _3057.z - _1733;
                        float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                        float _3103 = inversesqrt(_3100);
                        float _3104 = _3103 * _3097;
                        float _3105 = _3103 * _3098;
                        float _3106 = _3103 * _3099;
                        float _3107 = dot(vec3(_582, _585, _588), vec3(_3104, _3105, _3106));
                        float _3112 = 1.0 - (_3100 * _3057.w);
                        float _4498 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3114 = sqrt(_3100) * _3076.w;
                        float _3117 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3107) + _3118;
                        float _3124 = _3114 * _3114;
                        float _3128 = ((isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0))) * _3113) / ((_3124 * 0.699999988079071044921875) + 1.0);
                        float _3132 = (-0.0) - _1731;
                        float _3133 = (-0.0) - _1732;
                        float _3134 = (-0.0) - _1733;
                        float _3138 = inversesqrt(dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134)));
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3148 = exp2(log2(1.0 / ((_3124 * 3.5) + 5.0)) * 0.25);
                        float _3149 = 1.0 - _642;
                        float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                        float _3157 = _3156 * _3156;
                        float _3158 = _3157 * _3157;
                        float _3159 = _3139 + _3104;
                        float _3160 = _3140 + _3105;
                        float _3161 = _3141 + _3106;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3169 = dot(vec3(_582, _585, _588), vec3(_3139, _3140, _3141));
                        float _4514 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3172 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3173 = dot(vec3(_582, _585, _588), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                        float _4525 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                        float _3181 = _3117 * _3157;
                        float _3182 = _3181 * _3181;
                        float _3185 = ((1.0 - _3182) * _3107) + _3182;
                        float _4536 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                        float _3186 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3187 = 1.0 - _3157;
                        float _3197 = (0.5 / (((_3186 * ((_3172 * _3187) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3186 * _3187) + _3157) * _3172))) * _3186;
                        float _4547 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3208 = (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3180 * _3180) * ((_3124 * 2.1991131305694580078125) + 3.141590118408203125))) * _3113;
                        _2961 = (_3128 * _3076.x) + _3034;
                        _2962 = (_3128 * _3076.y) + _3035;
                        _2963 = (_3128 * _3076.z) + _3036;
                        _2958 = (_3208 * _3093.x) + _3031;
                        _2959 = (_3208 * _3093.y) + _3032;
                        _2960 = (_3208 * _3093.z) + _3033;
                        if (_3038 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3031 = _2958;
                            _3032 = _2959;
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _3038;
                        }
                    }
                    frontier_phi_71_pred = _2963;
                    frontier_phi_71_pred_1 = _2962;
                    frontier_phi_71_pred_2 = _2961;
                    frontier_phi_71_pred_3 = _2960;
                    frontier_phi_71_pred_4 = _2959;
                    frontier_phi_71_pred_5 = _2958;
                }
                _2744 = frontier_phi_71_pred;
                _2742 = frontier_phi_71_pred_1;
                _2740 = frontier_phi_71_pred_2;
                _2738 = frontier_phi_71_pred_3;
                _2736 = frontier_phi_71_pred_4;
                _2734 = frontier_phi_71_pred_5;
                uint _2893 = _2892 + 1u;
                if (_2893 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2886 = _2734;
                    _2887 = _2736;
                    _2888 = _2738;
                    _2889 = _2740;
                    _2890 = _2742;
                    _2891 = _2744;
                    _2892 = _2893;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
        }
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.z;
        uint _2750 = (_2748 >> 8u) & 15u;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((4294967295u << _2750) & _2653) == 0u)
        {
            _2854 = _2733;
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
        }
        else
        {
            float _2879 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
            float _2880 = _2879 * _1731;
            float _2881 = _2879 * _1732;
            float _2882 = _2879 * _1733;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2750 < ((_2748 >> 12u) & 15u))
            {
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _3014 = _2733;
                float _3015 = _2735;
                float _3016 = _2737;
                float _3017 = _2739;
                float _3018 = _2741;
                float _3019 = _2743;
                uint _3020 = _2750;
                uint _3029;
                bool _3030;
                for (;;)
                {
                    _3029 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_3020 << 2u)) >> 2u)).x;
                    _3030 = _3029 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3030)
                    {
                        frontier_phi_82_pred = _3019;
                        frontier_phi_82_pred_1 = _3018;
                        frontier_phi_82_pred_2 = _3017;
                        frontier_phi_82_pred_3 = _3016;
                        frontier_phi_82_pred_4 = _3015;
                        frontier_phi_82_pred_5 = _3014;
                    }
                    else
                    {
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3235 = _3014;
                        float _3236 = _3015;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        float _3240 = _3019;
                        uint _3241 = _3029;
                        uint _3242;
                        vec4 _3267;
                        float _3268;
                        vec4 _3283;
                        vec3 _3295;
                        vec4 _3310;
                        vec4 _3326;
                        float _3372;
                        bool _3373;
                        for (;;)
                        {
                            uint _3252 = ((_3020 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3241));
                            _3242 = (_3241 + 4294967295u) & _3241;
                            uint _3254 = _3252 * 40u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            _3268 = _3267.w;
                            uint _3270 = (_3252 * 40u) + 4u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3252 * 40u) + 8u;
                            _3295 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x));
                            uint _3297 = (_3252 * 40u) + 16u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3313 = (_3252 * 40u) + 20u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3252 * 40u) + 24u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3347 = (_3252 * 40u) + 28u;
                            vec4 _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3372 = fma(_1733, _3360.z, fma(_1732, _3360.y, _3360.x * _1731)) + _3360.w;
                            _3373 = !((fma(_1733, _3341.z, fma(_1732, _3341.y, _3341.x * _1731)) + _3341.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3373)
                            {
                                float _3400 = _3267.x - _1731;
                                float _3401 = _3267.y - _1732;
                                float _3402 = _3267.z - _1733;
                                float _3403 = dot(vec3(_3400, _3401, _3402), vec3(_3400, _3401, _3402));
                                float _3406 = inversesqrt(_3403);
                                float _3407 = _3406 * _3400;
                                float _3408 = _3406 * _3401;
                                float _3409 = _3406 * _3402;
                                float _3413 = 1.0 - (_3403 / (_3268 * _3268));
                                float _4558 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3414 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3418 = sqrt(_3403) * _3283.w;
                                float _3420 = 1.39999997615814208984375 / (_3418 + 1.39999997615814208984375);
                                float _3421 = _3420 * _3420;
                                float _3424 = ((1.0 - _3421) * dot(vec3(_3407, _3408, _3409), vec3(_582, _585, _588))) + _3421;
                                float _3427 = _3418 * _3418;
                                float _3431 = (fma(_1733, _3310.z, fma(_1732, _3310.y, _3310.x * _1731)) + _3310.w) / _3372;
                                float _3432 = (fma(_1733, _3326.z, fma(_1732, _3326.y, _3326.x * _1731)) + _3326.w) / _3372;
                                float _3436 = 1.0 - dot(vec2(_3431, _3432), vec2(_3431, _3432));
                                float _4574 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                                float _3437 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3438 = _3437 * (((isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0))) * _3414) / ((_3427 * 0.699999988079071044921875) + 1.0));
                                float _3450 = exp2(log2(1.0 / ((_3427 * 3.5) + 5.0)) * 0.25);
                                float _3451 = 1.0 - _642;
                                float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                                float _3459 = _3458 * _3458;
                                float _3460 = _3459 * _3459;
                                float _3461 = _3407 - _2880;
                                float _3462 = _3408 - _2881;
                                float _3463 = _3409 - _2882;
                                float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                                float _3471 = dot(vec3(_582, _585, _588), vec3((-0.0) - _2880, (-0.0) - _2881, (-0.0) - _2882));
                                float _4585 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3475 = dot(vec3(_582, _585, _588), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                                float _4596 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                                float _3483 = _3420 * _3459;
                                float _3484 = _3483 * _3483;
                                float _3490 = ((1.0 - _3484) * dot(vec3(_582, _585, _588), vec3(_3407, _3408, _3409))) + _3484;
                                float _4607 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3492 = 1.0 - _3459;
                                float _3502 = (0.5 / (((_3491 * ((_3474 * _3492) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3491 * _3492) + _3459) * _3474))) * _3491;
                                float _4618 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3512 = (_3437 * _3414) * (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3482 * _3482) * ((_3427 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3438 * _3283.z;
                                frontier_phi_88_pred_1 = _3438 * _3283.y;
                                frontier_phi_88_pred_2 = _3438 * _3283.x;
                                frontier_phi_88_pred_3 = _3512 * _3295.z;
                                frontier_phi_88_pred_4 = _3512 * _3295.y;
                                frontier_phi_88_pred_5 = _3512 * _3295.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_88_pred;
                            _3520 = frontier_phi_88_pred_1;
                            _3519 = frontier_phi_88_pred_2;
                            _3518 = frontier_phi_88_pred_3;
                            _3517 = frontier_phi_88_pred_4;
                            _3516 = frontier_phi_88_pred_5;
                            _3225 = _3519 + _3238;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            _3224 = _3518 + _3237;
                            if (_3242 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3242;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3227;
                        frontier_phi_82_pred_1 = _3226;
                        frontier_phi_82_pred_2 = _3225;
                        frontier_phi_82_pred_3 = _3224;
                        frontier_phi_82_pred_4 = _3223;
                        frontier_phi_82_pred_5 = _3222;
                    }
                    _2865 = frontier_phi_82_pred;
                    _2863 = frontier_phi_82_pred_1;
                    _2861 = frontier_phi_82_pred_2;
                    _2859 = frontier_phi_82_pred_3;
                    _2857 = frontier_phi_82_pred_4;
                    _2855 = frontier_phi_82_pred_5;
                    uint _3021 = _3020 + 1u;
                    if (_3021 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3014 = _2855;
                        _3015 = _2857;
                        _3016 = _2859;
                        _3017 = _2861;
                        _3018 = _2863;
                        _3019 = _2865;
                        _3020 = _3021;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2861;
                frontier_phi_63_64_ladder_1 = _2865;
                frontier_phi_63_64_ladder_2 = _2863;
                frontier_phi_63_64_ladder_3 = _2859;
                frontier_phi_63_64_ladder_4 = _2857;
                frontier_phi_63_64_ladder_5 = _2855;
            }
            else
            {
                frontier_phi_63_64_ladder = _2739;
                frontier_phi_63_64_ladder_1 = _2743;
                frontier_phi_63_64_ladder_2 = _2741;
                frontier_phi_63_64_ladder_3 = _2737;
                frontier_phi_63_64_ladder_4 = _2735;
                frontier_phi_63_64_ladder_5 = _2733;
            }
            _2854 = frontier_phi_63_64_ladder_5;
            _2856 = frontier_phi_63_64_ladder_4;
            _2858 = frontier_phi_63_64_ladder_3;
            _2860 = frontier_phi_63_64_ladder;
            _2862 = frontier_phi_63_64_ladder_2;
            _2864 = frontier_phi_63_64_ladder_1;
        }
        float _2869 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2666 = (_2869 * _2860) + _2197;
        _2668 = (_2869 * _2862) + _2199;
        _2670 = (_2869 * _2864) + _2201;
        _2672 = ((_2854 * 0.039999999105930328369140625) * _2869) + _2520;
        _2674 = ((_2856 * 0.039999999105930328369140625) * _2869) + _2522;
        _2676 = ((_2858 * 0.039999999105930328369140625) * _2869) + _2524;
    }
    else
    {
        _2666 = _2197;
        _2668 = _2199;
        _2670 = _2201;
        _2672 = _2520;
        _2674 = _2522;
        _2676 = _2524;
    }
    float _4634 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4645 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _4656 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _2693 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2666 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _626))) + ((_2672 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2694 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2668 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _626))) + ((_2674 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2670 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _626))) + ((_2676 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1463)) * cbPerFrame._m0[3u].x);
    uint _2696 = _230 + 6u;
    float _2704 = _563 / cbSceneParam._m0[86u].x;
    float _2705 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2719 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, (log2((isnan(cbSceneParam._m0[77u].w) ? _484 : (isnan(_484) ? cbSceneParam._m0[77u].w : min(_484, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2721 = _2719.x;
    float _2722 = _2719.y;
    float _2723 = _2719.z;
    float _2724 = _2719.w;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_484 > cbSceneParam._m0[78u].w)
    {
        float _2758 = isnan(_484) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _484 : min(cbSceneParam._m0[80u].w, _484));
        float _2759 = _2758 / _484;
        float _2770 = _2759 * _536;
        float _2771 = _537 * _2759;
        float _2772 = (-0.0) - _2771;
        float _2774 = _2759 * _538;
        float _2776 = (cbSceneParam._m0[77u].w * _2772) / _2758;
        float _2777 = _2776 + cbSceneParam._m0[79u].w;
        float _2778 = cbSceneParam._m0[79u].w - _2771;
        float _2784 = sqrt(((_2770 * _2770) + (_2771 * _2771)) + (_2774 * _2774));
        float _2787 = (1.0 - (cbSceneParam._m0[77u].w / _2758)) * _2784;
        float _2792 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2794 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2971;
        if (abs((_2772 - _2776) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2971 = ((((_2777 > 0.0) ? exp2(_2792 * _2777) : (2.0 - exp2(_2794 * _2777))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2787;
        }
        else
        {
            float _2915 = 1.0 / cbSceneParam._m0[80u].x;
            float _2916 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : max(_2777, _2778));
            float _2917 = isnan(_2778) ? _2777 : (isnan(_2777) ? _2778 : min(_2777, _2778));
            float _2926 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : min(_2916, 0.0));
            float _2927 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : min(_2917, 0.0));
            _2971 = ((abs(_2784 / _2772) * cbSceneParam._m0[80u].y) * ((((_2926 - _2927) * 2.0) - ((exp2(_2792 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0)))) - exp2(_2792 * (isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0))))) * _2915)) - ((exp2(_2794 * _2926) - exp2(_2794 * _2927)) * _2915))) + (_2787 * cbSceneParam._m0[80u].z);
        }
        vec4 _2973 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, 1.0), 0.0);
        float _2982 = exp2((_2971 * (-1.44269502162933349609375)) * (1.0 - _2973.w));
        float _2983 = log2(_2982);
        float _2999 = log2(_2724);
        _2796 = (exp2(_2999 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].x)) * _2973.x) / cbSceneParam._m0[78u].x)) + _2721;
        _2798 = (exp2(_2999 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].y)) * _2973.y) / cbSceneParam._m0[78u].y)) + _2722;
        _2800 = (exp2(_2999 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2983 * cbSceneParam._m0[78u].z)) * _2973.z) / cbSceneParam._m0[78u].z)) + _2723;
        _2802 = _2982 * _2724;
    }
    else
    {
        _2796 = _2721;
        _2798 = _2722;
        _2800 = _2723;
        _2802 = _2724;
    }
    bool _3009;
    vec4 _2812;
    vec4 _2834;
    float _2836;
    float _2840;
    float _2841;
    float _2842;
    float _2843;
    bool _2853;
    for (;;)
    {
        _2812 = cbMatDynParam._m0[0u];
        float _2814 = roundEven(_2812.y);
        bool _2815 = _2814 == 3.0;
        float _2816 = log2(_2802);
        float _2823 = exp2(_2816 * cbSceneParam._m0[78u].x) * _2693;
        float _2824 = exp2(_2816 * cbSceneParam._m0[78u].y) * _2694;
        float _2825 = exp2(_2816 * cbSceneParam._m0[78u].z) * _2695;
        float _2832 = _552 + (-0.5);
        _2834 = cbMtdParam._m0[1u];
        _2836 = _2834.y * _2832;
        float _2839 = (_2814 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2840 = _2839 * (_2815 ? _2823 : (_2823 + (cbSceneParam._m0[72u].w * _2796)));
        _2841 = _2839 * (_2815 ? _2824 : (_2824 + (cbSceneParam._m0[72u].w * _2798)));
        _2842 = _2839 * (_2815 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2800)));
        _2843 = _2832 * 0.999000012874603271484375;
        _2853 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2853)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2843) < 0.5)
            {
                _3009 = true;
                break;
            }
        }
        uint _2950 = _601 + uint(_2812.w);
        if ((cbInstanceData._m0[_2950].w < 1.0) && ((cbInstanceData._m0[_2950].w + _2843) < 0.5))
        {
            _3009 = true;
            break;
        }
        if ((_2836 + 1.0) < _2834.x)
        {
            _3009 = true;
            break;
        }
        _3009 = false;
        break;
    }
    float _3213;
    if (_3009)
    {
        discard_state = true;
        _3213 = 0.0;
    }
    else
    {
        _3213 = cbInstanceData._m0[_2696].w;
    }
    SV_Target.x = _2840;
    SV_Target.y = _2841;
    SV_Target.z = _2842;
    SV_Target.w = _3213;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2696].w;
    discard_exit();
}


