#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1003;
float _3367;
float _3368;
float _3369;
float _3370;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _200 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _201 = _200 * _192;
    float _202 = _200 * _193;
    float _203 = _200 * _194;
    float _207 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = _207 * NORMAL.x;
    float _209 = _207 * NORMAL.y;
    float _210 = _207 * NORMAL.z;
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    uint _220 = uint(roundEven(NORMAL.w)) * 13u;
    uint _226 = _220 + 1u;
    uint _230 = _220 + 2u;
    float _239 = sqrt(((cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x) + (cbInstanceData._m0[_220].x * cbInstanceData._m0[_220].x)) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x));
    float _240 = _239 * TEXCOORD.z;
    float _241 = _239 * TEXCOORD.w;
    vec4 _260 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _266 = _260.x * cbMtdParam._m0[9u].x;
    float _267 = _260.y * cbMtdParam._m0[9u].y;
    float _268 = _260.z * cbMtdParam._m0[9u].z;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _290 = _286.z;
    float _295 = (_286.x * 2.0) + (-1.0);
    float _297 = (_286.y * 2.0) + (-1.0);
    float _298 = dot(vec2(_295, _297), vec2(_295, _297));
    float _3379 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _304 = sqrt(1.0 - (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))));
    float _307 = fma(_304, _208, fma(_297, _215, _295 * _201));
    float _310 = fma(_304, _209, fma(_297, _216, _295 * _202));
    float _313 = fma(_304, _210, fma(_297, _217, _295 * _203));
    float _317 = inversesqrt(dot(vec3(_307, _310, _313), vec3(_307, _310, _313)));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _240) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _241) + cbTextureTilingScale._m0[11u].w));
    float _355 = _353.x;
    float _356 = 1.0 - _355;
    float _365 = (cbMtdParam._m0[19u].x + dot(vec4(_317 * _307, _317 * _310, _317 * _313, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_355 - _356) * cbMtdParam._m0[24u].z) + _356) * cbMtdParam._m0[21u].z);
    float _3390 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _373 = (_366 * (cbMtdParam._m0[17u].x - _266)) + _266;
    float _374 = (_366 * (cbMtdParam._m0[17u].y - _267)) + _267;
    float _375 = (_366 * (cbMtdParam._m0[17u].z - _268)) + _268;
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _240) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _241) + cbTextureTilingScale._m0[15u].w));
    float _395 = (_388.x * 2.0) + (-1.0);
    float _396 = (_388.y * 2.0) + (-1.0);
    float _397 = dot(vec2(_395, _396), vec2(_395, _396));
    float _3401 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _405 = ((_388.z - _290) * _366) + _290;
    float _415 = ((sqrt(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) - _304) * _366) + _304;
    float _418 = (((_395 - _295) * _366) + _295) + (cbMtdParam._m0[21u].x * _295);
    float _419 = (((_396 - _297) * _366) + _297) + (cbMtdParam._m0[21u].x * _297);
    float _424 = cbMtdParam._m0[22u].x + _286.w;
    float _427 = fma(_415, _208, fma(_419, _215, _418 * _201));
    float _430 = fma(_415, _209, fma(_419, _216, _418 * _202));
    float _433 = fma(_415, _210, fma(_419, _217, _418 * _203));
    float _437 = inversesqrt(dot(vec3(_427, _430, _433), vec3(_427, _430, _433)));
    float _438 = _437 * _427;
    float _439 = _437 * _430;
    float _440 = _437 * _433;
    float _3412 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _441 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _3434 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3445 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3456 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _459 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _510 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _500);
    float _511 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _500);
    float _512 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _500);
    float _516 = inversesqrt(dot(vec3(_510, _511, _512), vec3(_510, _511, _512)));
    float _517 = _510 * _516;
    float _518 = _511 * _516;
    float _519 = _512 * _516;
    vec4 _524 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _526 = _524.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _683 = sqrt(((_510 * _510) + (_511 * _511)) + (_512 * _512));
        float _689 = (cbMatDynParam._m0[5u].x * _683) + cbMatDynParam._m0[5u].y;
        float _3467 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _690 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _694 = (cbMatDynParam._m0[5u].z * _683) + cbMatDynParam._m0[5u].w;
        float _3478 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) - _690)) + _690) < ((_526 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _559 = fma(_440, cbSceneParam._m0[5u].z, fma(_439, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _438));
    float _562 = fma(_440, cbSceneParam._m0[6u].z, fma(_439, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _438));
    float _565 = fma(_440, cbSceneParam._m0[7u].z, fma(_439, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _438));
    uint _578 = _220 + 9u;
    uint _579 = _578 + uint(cbMatDynParam._m0[0u].w);
    float _585 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0)))) * cbInstanceData._m0[_579].x;
    float _586 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_579].y;
    float _587 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_579].z;
    float _3489 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    vec4 _599 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _603 = ((isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * TEXCOORD_5.w) * _599.x;
    float _604 = dot(vec3(_438, _439, _440), vec3(_517, _518, _519));
    float _607 = _604 * 2.0;
    float _611 = (_607 * _438) - _517;
    float _612 = (_607 * _439) - _518;
    float _613 = (_607 * _440) - _519;
    float _617 = abs(dot(vec3(_517, _518, _519), vec3(_438, _439, _440)));
    float _3522 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _619 = sqrt(_441);
    float _632 = exp2((_619 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_619 * 3.0));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1002;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _727 = fma(_672, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _664));
        float _731 = fma(_672, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _664));
        float _735 = fma(_672, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _664));
        float _760 = _664 + _438;
        float _761 = _668 + _439;
        float _762 = _672 + _440;
        float _772 = fma(_762, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _760)) - _727;
        float _773 = fma(_762, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _760)) - _731;
        float _774 = fma(_762, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _760)) - _735;
        float _778 = inversesqrt(dot(vec3(_772, _773, _774), vec3(_772, _773, _774)));
        float _791 = ((_778 * _772) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_727 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _792 = ((_778 * _773) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_731 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _793 = ((_778 * _774) / cbModelParam._m0[34u].z) + ((((((_735 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _803 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_791, _792, _793), 0.0);
        float _830 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_796.x + (-0.5));
        float _832 = _830 * (_796.y + (-0.5));
        float _833 = _830 * (_796.z + (-0.5));
        float _840 = exp2((_803.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_803.x + (-0.5));
        float _842 = _840 * (_803.y + (-0.5));
        float _843 = _840 * (_803.z + (-0.5));
        float _850 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_810.x + (-0.5));
        float _852 = _850 * (_810.y + (-0.5));
        float _853 = _850 * (_810.z + (-0.5));
        float _860 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_817.x + (-0.5));
        float _862 = _860 * (_817.y + (-0.5));
        float _863 = _860 * (_817.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _884 = (dot(vec3(_438, _439, _440), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _894 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3570 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_896 + 1.0))) + _901) * _864;
        float _911 = _832 * 0.5;
        float _912 = _842 * 0.5;
        float _913 = _852 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_438, _439, _440), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3603 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_938 + 1.0))) + _943) * _865;
        float _953 = _833 * 0.5;
        float _954 = _843 * 0.5;
        float _955 = _853 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_438, _439, _440), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3636 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_980 + 1.0))) + _985) * _866;
        _1002 = _833;
        _1004 = _832;
        _1005 = _831;
        _1006 = _843;
        _1007 = _842;
        _1008 = _841;
        _1009 = _853;
        _1010 = _852;
        _1011 = _851;
        _1012 = _866;
        _1013 = _865;
        _1014 = _864;
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _1003;
        _1004 = _1003;
        _1005 = _1003;
        _1006 = _1003;
        _1007 = _1003;
        _1008 = _1003;
        _1009 = _1003;
        _1010 = _1003;
        _1011 = _1003;
        _1012 = _1003;
        _1013 = _1003;
        _1014 = _1003;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_672, cbModelParam._m0[30u].z, fma(_668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _664));
        float _1049 = fma(_672, cbModelParam._m0[31u].z, fma(_668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _664));
        float _1053 = fma(_672, cbModelParam._m0[32u].z, fma(_668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _664));
        float _1076 = _664 + _438;
        float _1077 = _668 + _439;
        float _1078 = _672 + _440;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_438, _439, _440), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3699 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_438, _439, _440), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3732 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_438, _439, _440), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3765 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1003;
        _1315 = _1003;
        _1316 = _1003;
        _1317 = _1003;
        _1318 = _1003;
        _1319 = _1003;
        _1320 = _1003;
        _1321 = _1003;
        _1322 = _1003;
        _1323 = _1003;
        _1324 = _1003;
        _1325 = _1003;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1015)) + _1015;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1016)) + _1016;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1017)) + _1017;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _611 * 0.5;
    float _1383 = _612 * 0.5;
    float _1384 = _613 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1002, _1006, _1009, _1012));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _441);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1532;
    float _1534;
    float _1536;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1499 = fma(_672, cbModelParam._m0[13u].z, fma(_668, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664)) + cbModelParam._m0[13u].w;
        float _1503 = fma(_672, cbModelParam._m0[14u].z, fma(_668, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664)) + cbModelParam._m0[14u].w;
        float _1507 = fma(_672, cbModelParam._m0[15u].z, fma(_668, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664)) + cbModelParam._m0[15u].w;
        float _1510 = fma(_613, cbModelParam._m0[13u].z, fma(_612, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611));
        float _1513 = fma(_613, cbModelParam._m0[14u].z, fma(_612, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611));
        float _1516 = fma(_613, cbModelParam._m0[15u].z, fma(_612, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611));
        float _1544;
        if (_1510 > 0.0)
        {
            _1544 = abs((1.0 - _1499) / _1510);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1499 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1544 = frontier_phi_17_15_ladder;
        }
        float _1747;
        if (_1513 > 0.0)
        {
            _1747 = abs((1.0 - _1503) / _1513);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1503 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1747 = frontier_phi_26_22_ladder;
        }
        float _1990;
        if (_1516 > 0.0)
        {
            _1990 = abs((1.0 - _1507) / _1516);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1507 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1990 = frontier_phi_38_33_ladder;
        }
        float _1992 = isnan(_1747) ? _1544 : (isnan(_1544) ? _1747 : min(_1544, _1747));
        float _1993 = isnan(_1990) ? _1992 : (isnan(_1992) ? _1990 : min(_1992, _1990));
        float _1997 = (_1993 * _1510) + _1499;
        float _1998 = (_1993 * _1513) + _1503;
        float _1999 = (_1993 * _1516) + _1507;
        float _2000 = _1993 * 9.9999997473787516355514526367188e-05;
        float _2002 = (-1.0) - _2000;
        float _2004 = _2000 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1999 > _2004) || ((_1999 < _2002) || ((_1998 > _2004) || ((_1998 < _2002) || ((_1997 < _2002) || (_1997 > _2004))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1999, cbModelParam._m0[9u].z, fma(_1998, cbModelParam._m0[9u].y, _1997 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1999, cbModelParam._m0[10u].z, fma(_1998, cbModelParam._m0[10u].y, _1997 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1999, cbModelParam._m0[11u].z, fma(_1998, cbModelParam._m0[11u].y, _1997 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_16_38_ladder = _2123.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2123.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2123.x * cbModelParam._m0[1u].y;
        }
        _1532 = frontier_phi_16_38_ladder_2;
        _1534 = frontier_phi_16_38_ladder_1;
        _1536 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_611, _612, _613), _1451);
        _1532 = _1520.x * cbModelParam._m0[1u].y;
        _1534 = _1520.y * cbModelParam._m0[1u].y;
        _1536 = _1520.z * cbModelParam._m0[1u].y;
    }
    float _1540 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _441);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1540 : min(cbModelParam._m0[25u].w, _1540));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1595 = fma(_672, cbModelParam._m0[21u].z, fma(_668, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664)) + cbModelParam._m0[21u].w;
        float _1599 = fma(_672, cbModelParam._m0[22u].z, fma(_668, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664)) + cbModelParam._m0[22u].w;
        float _1603 = fma(_672, cbModelParam._m0[23u].z, fma(_668, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664)) + cbModelParam._m0[23u].w;
        float _1606 = fma(_613, cbModelParam._m0[21u].z, fma(_612, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611));
        float _1609 = fma(_613, cbModelParam._m0[22u].z, fma(_612, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611));
        float _1612 = fma(_613, cbModelParam._m0[23u].z, fma(_612, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611));
        float _1752;
        if (_1606 > 0.0)
        {
            _1752 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1752 = frontier_phi_28_24_ladder;
        }
        float _2017;
        if (_1609 > 0.0)
        {
            _2017 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2017 = frontier_phi_40_35_ladder;
        }
        float _2222;
        if (_1612 > 0.0)
        {
            _2222 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2222 = frontier_phi_49_46_ladder;
        }
        float _2224 = isnan(_2017) ? _1752 : (isnan(_1752) ? _2017 : min(_1752, _2017));
        float _2225 = isnan(_2222) ? _2224 : (isnan(_2224) ? _2222 : min(_2224, _2222));
        float _2229 = (_2225 * _1606) + _1595;
        float _2230 = (_2225 * _1609) + _1599;
        float _2231 = (_2225 * _1612) + _1603;
        float _2232 = _2225 * 9.9999997473787516355514526367188e-05;
        float _2233 = (-1.0) - _2232;
        float _2235 = _2232 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2231 > _2235) || ((_2231 < _2233) || ((_2230 > _2235) || ((_2230 < _2233) || ((_2229 < _2233) || (_2229 > _2235))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2430 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2231, cbModelParam._m0[17u].z, fma(_2230, cbModelParam._m0[17u].y, _2229 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2231, cbModelParam._m0[18u].z, fma(_2230, cbModelParam._m0[18u].y, _2229 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2231, cbModelParam._m0[19u].z, fma(_2230, cbModelParam._m0[19u].y, _2229 * cbModelParam._m0[19u].x))), _1541);
            frontier_phi_25_49_ladder = _2430.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2430.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2430.x * cbModelParam._m0[1u].z;
        }
        _1631 = frontier_phi_25_49_ladder_2;
        _1633 = frontier_phi_25_49_ladder_1;
        _1635 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_611, _612, _613), _1541);
        _1631 = _1615.x * cbModelParam._m0[1u].z;
        _1633 = _1615.y * cbModelParam._m0[1u].z;
        _1635 = _1615.z * cbModelParam._m0[1u].z;
    }
    float _1647 = ((((1.0 - _632) * ((_619 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_632 * _619)) * _603;
    float _1648 = _1647 * ((cbModelParam._m0[1u].w * (_1631 - _1532)) + _1532);
    float _1649 = _1647 * ((cbModelParam._m0[1u].w * (_1633 - _1534)) + _1534);
    float _1650 = _1647 * ((cbModelParam._m0[1u].w * (_1635 - _1536)) + _1536);
    float _1653 = fma(_1650, cbSceneParam._m0[89u].z, fma(_1649, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1650, cbSceneParam._m0[90u].z, fma(_1649, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1650, cbSceneParam._m0[91u].z, fma(_1649, cbSceneParam._m0[91u].y, _1648 * cbSceneParam._m0[91u].x));
    uvec4 _1669 = floatBitsToUint(cbInstanceData._m0[_220 + 5u]);
    uint _1671 = _1669.x * 14u;
    uint _1672 = _1671 + 13u;
    float _1679 = _603 + (-1.0);
    float _1684 = (cbLight._m0[_1672].x * _1679) + 1.0;
    float _1685 = (cbLight._m0[_1672].y * _1679) + 1.0;
    float _1686 = (cbLight._m0[_1672].z * _1679) + 1.0;
    float _1687 = (cbLight._m0[_1672].w * _1679) + 1.0;
    uint _1688 = _1671 + 5u;
    float _1694 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
    uint _1698 = _1671 + 4u;
    float _1705 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
    uint _1709 = _1671 | 1u;
    float _1720 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_438, _439, _440));
    float _1723 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_438, _439, _440));
    float _3901 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _3912 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1728 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1730 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1737 = ((cbLight._m0[_1688].x * _1694) * _1730) + ((cbLight._m0[_1698].x * _1705) * _1728);
    float _1738 = ((_1694 * cbLight._m0[_1688].y) * _1730) + ((_1705 * cbLight._m0[_1698].y) * _1728);
    float _1739 = ((_1694 * cbLight._m0[_1688].z) * _1730) + ((_1705 * cbLight._m0[_1698].z) * _1728);
    uvec4 _1744 = floatBitsToUint(cbLight._m0[_1671 + 12u]);
    bool _1746 = _1744.x == 0u;
    float _1757;
    float _1759;
    float _1761;
    if (_1746)
    {
        _1757 = _1737;
        _1759 = _1738;
        _1761 = _1739;
    }
    else
    {
        uint _1765 = _1671 + 6u;
        float _1781 = (dot(vec3(cbLight._m0[_1671 + 2u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _1782 = _1781 * _1781;
        float _3923 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1784 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
        _1757 = (((cbLight._m0[_1765].x * 0.3183098733425140380859375) * _1783) * _1784) + _1737;
        _1759 = (((cbLight._m0[_1765].y * 0.3183098733425140380859375) * _1783) * _1784) + _1738;
        _1761 = (((cbLight._m0[_1765].z * 0.3183098733425140380859375) * _1783) * _1784) + _1739;
    }
    bool _1764 = _1744.y == 0u;
    float _1802;
    float _1804;
    float _1806;
    if (_1764)
    {
        _1802 = _1757;
        _1804 = _1759;
        _1806 = _1761;
    }
    else
    {
        uint _1961 = _1671 + 7u;
        float _1977 = (dot(vec3(cbLight._m0[_1671 + 3u].xyz), vec3(_438, _439, _440)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _3939 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1980 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
        _1802 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1757;
        _1804 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1759;
        _1806 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1761;
    }
    uint _1809 = _1671 + 8u;
    float _1822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1671].w)) * _441) * 0.949999988079071044921875);
    float _1823 = _1822 * _1822;
    float _1824 = cbLight._m0[_1671].x + _517;
    float _1825 = cbLight._m0[_1671].y + _518;
    float _1826 = cbLight._m0[_1671].z + _519;
    float _1830 = inversesqrt(dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826)));
    float _1831 = _1830 * _1824;
    float _1832 = _1830 * _1825;
    float _1833 = _1830 * _1826;
    float _1834 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1671].xyz));
    float _3955 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _1838 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1839 = dot(vec3(_438, _439, _440), vec3(_1831, _1832, _1833));
    float _3977 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1671].xyz), vec3(_1831, _1832, _1833));
    float _3988 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1823 * _1823;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1862 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1863 = 1.0 - _1823;
    float _1874 = (0.5 / (((_1838 * ((_1837 * _1863) + _1823)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _1863) + _1823) * _1837))) * _1837;
    float _3999 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1876 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    uint _1887 = _1671 + 9u;
    float _1898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _441) * 0.949999988079071044921875);
    float _1899 = _1898 * _1898;
    float _1900 = cbLight._m0[_1709].x + _517;
    float _1901 = cbLight._m0[_1709].y + _518;
    float _1902 = cbLight._m0[_1709].z + _519;
    float _1906 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
    float _1907 = _1906 * _1900;
    float _1908 = _1906 * _1901;
    float _1909 = _1906 * _1902;
    float _1910 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_1709].xyz));
    float _4010 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1913 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1914 = dot(vec3(_438, _439, _440), vec3(_1907, _1908, _1909));
    float _4021 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1918 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1907, _1908, _1909));
    float _4032 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1922 = _1899 * _1899;
    float _1926 = ((_1917 * _1917) * (_1922 + (-1.0))) + 1.0;
    float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1936 = 1.0 - _1899;
    float _1946 = (0.5 / (((_1838 * ((_1913 * _1936) + _1899)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _1936) + _1899) * _1913))) * _1913;
    float _4043 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1922 / ((_1926 * _1926) * 3.141590118408203125));
    float _1958 = (((_1935 * cbLight._m0[_1887].x) * _1948) * _1694) + (((_1862 * cbLight._m0[_1809].x) * _1876) * _1705);
    float _1959 = (((_1935 * cbLight._m0[_1887].y) * _1948) * _1694) + (((_1862 * cbLight._m0[_1809].y) * _1876) * _1705);
    float _1960 = (((_1935 * cbLight._m0[_1887].z) * _1948) * _1694) + (((_1862 * cbLight._m0[_1809].z) * _1876) * _1705);
    float _2022;
    float _2024;
    float _2026;
    if (_1746)
    {
        _2022 = _1958;
        _2024 = _1959;
        _2026 = _1960;
    }
    else
    {
        uint _2028 = _1671 + 2u;
        uint _2032 = _1671 + 10u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _441) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _517;
        float _2049 = cbLight._m0[_2028].y + _518;
        float _2050 = cbLight._m0[_2028].z + _519;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2028].xyz));
        float _4054 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2062 = dot(vec3(_438, _439, _440), vec3(_2055, _2056, _2057));
        float _4065 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _4076 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2083 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2084 = 1.0 - _2047;
        float _2094 = (0.5 / (((_1838 * ((_2061 * _2084) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _2084) + _2047) * _2061))) * _2061;
        float _4087 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2096 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2097 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
        _2022 = (((_2083 * cbLight._m0[_2032].x) * _2096) * _2097) + _1958;
        _2024 = (((_2083 * cbLight._m0[_2032].y) * _2096) * _2097) + _1959;
        _2026 = (((_2083 * cbLight._m0[_2032].z) * _2096) * _2097) + _1960;
    }
    float _2132;
    float _2134;
    float _2136;
    if (_1764)
    {
        _2132 = _2022;
        _2134 = _2024;
        _2136 = _2026;
    }
    else
    {
        uint _2143 = _1671 + 3u;
        uint _2147 = _1671 + 11u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _441) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _517;
        float _2164 = cbLight._m0[_2143].y + _518;
        float _2165 = cbLight._m0[_2143].z + _519;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_438, _439, _440), vec3(cbLight._m0[_2143].xyz));
        float _4103 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2177 = dot(vec3(_438, _439, _440), vec3(_2170, _2171, _2172));
        float _4114 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4125 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2199 = 1.0 - _2162;
        float _2209 = (0.5 / (((_1838 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1838 * _2199) + _2162) * _2176))) * _2176;
        float _4136 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
        _2132 = (((_2198 * cbLight._m0[_2147].x) * _2211) * _2212) + _2022;
        _2134 = (((_2198 * cbLight._m0[_2147].y) * _2211) * _2212) + _2024;
        _2136 = (((_2198 * cbLight._m0[_2147].z) * _2211) * _2212) + _2026;
    }
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_1669.y == 0u)
    {
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2287;
        float _2289 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2287;
        float _2290 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2287;
        uvec4 _2302 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2303 = _2302.x;
        uint _2314 = uint((float(_2302.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _2303))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _2303)));
        float _2324 = (log2(_2290 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2325 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        uint _2328 = uint(isnan(14.0) ? _2325 : (isnan(_2325) ? 14.0 : min(_2325, 14.0)));
        uvec4 _2333 = texelFetch(g_lightClusterGridBuffer, int(((_2328 << 2u) + (_2314 << 6u)) >> 2u));
        uint _2334 = _2333.x;
        uint _2335 = _2302.z;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        if (((((1u << ((_2335 >> 4u) & 15u)) + 4294967295u) & _2334) == 0u) || ((_2335 & 240u) == 0u))
        {
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
        }
        else
        {
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            float _2592 = 0.0;
            float _2593 = 0.0;
            uint _2594 = 0u;
            uint _2603;
            bool _2604;
            for (;;)
            {
                _2603 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2594 << 2u)) >> 2u)).x;
                _2604 = _2603 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2604)
                {
                    frontier_phi_66_pred = _2588;
                    frontier_phi_66_pred_1 = _2593;
                    frontier_phi_66_pred_2 = _2592;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                else
                {
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    uint _2739;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2603;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    for (;;)
                    {
                        uint _2743 = uint(findLSB(_2739)) + (_2594 << 5u);
                        uint _2740 = (_2739 + 4294967295u) & _2739;
                        uint _2745 = _2743 * 48u;
                        vec4 _2759 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        uint _2765 = (_2743 * 48u) + 4u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2765)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2765 + 3u)).x));
                        uint _2784 = (_2743 * 48u) + 8u;
                        vec3 _2795 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x));
                        float _2799 = _2759.x - _2288;
                        float _2800 = _2759.y - _2289;
                        float _2801 = _2759.z - _2290;
                        float _2802 = dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801));
                        float _2805 = inversesqrt(_2802);
                        float _2806 = _2805 * _2799;
                        float _2807 = _2805 * _2800;
                        float _2808 = _2805 * _2801;
                        float _2809 = dot(vec3(_559, _562, _565), vec3(_2806, _2807, _2808));
                        float _2814 = 1.0 - (_2802 * _2759.w);
                        float _4162 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2815 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2816 = sqrt(_2802) * _2778.w;
                        float _2819 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                        float _2820 = _2819 * _2819;
                        float _2823 = ((1.0 - _2820) * _2809) + _2820;
                        float _2826 = _2816 * _2816;
                        float _2830 = ((isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0))) * _2815) / ((_2826 * 0.699999988079071044921875) + 1.0);
                        float _2834 = (-0.0) - _2288;
                        float _2835 = (-0.0) - _2289;
                        float _2836 = (-0.0) - _2290;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2841 = _2840 * _2834;
                        float _2842 = _2840 * _2835;
                        float _2843 = _2840 * _2836;
                        float _2851 = exp2(log2(1.0 / ((_2826 * 3.5) + 5.0)) * 0.25);
                        float _2852 = 1.0 - _619;
                        float _2859 = sqrt(1.0 - ((1.0 - (_2852 * _2852)) * (1.0 - (_2851 * _2851))));
                        float _2860 = _2859 * _2859;
                        float _2861 = _2860 * _2860;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2864 = _2843 + _2808;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2872 = dot(vec3(_559, _562, _565), vec3(_2841, _2842, _2843));
                        float _4178 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2876 = dot(vec3(_559, _562, _565), vec3(_2868 * _2862, _2868 * _2863, _2868 * _2864));
                        float _4189 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2883 = ((_2879 * _2879) * (_2861 + (-1.0))) + 1.0;
                        float _2884 = _2819 * _2860;
                        float _2885 = _2884 * _2884;
                        float _2888 = ((1.0 - _2885) * _2809) + _2885;
                        float _4200 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2889 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2890 = 1.0 - _2860;
                        float _2900 = (0.5 / (((_2889 * ((_2875 * _2890) + _2860)) + 9.9999999392252902907785028219223e-09) + (((_2889 * _2890) + _2860) * _2875))) * _2889;
                        float _4211 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2911 = (((_2861 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_2883 * _2883) * ((_2826 * 2.1991131305694580078125) + 3.141590118408203125))) * _2815;
                        _2663 = (_2830 * _2778.x) + _2736;
                        _2664 = (_2830 * _2778.y) + _2737;
                        _2665 = (_2830 * _2778.z) + _2738;
                        _2660 = (_2911 * _2795.x) + _2733;
                        _2661 = (_2911 * _2795.y) + _2734;
                        _2662 = (_2911 * _2795.z) + _2735;
                        if (_2740 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2740;
                        }
                    }
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2665;
                    frontier_phi_66_pred_2 = _2664;
                    frontier_phi_66_pred_3 = _2663;
                    frontier_phi_66_pred_4 = _2662;
                    frontier_phi_66_pred_5 = _2661;
                }
                _2436 = frontier_phi_66_pred;
                _2446 = frontier_phi_66_pred_1;
                _2444 = frontier_phi_66_pred_2;
                _2442 = frontier_phi_66_pred_3;
                _2440 = frontier_phi_66_pred_4;
                _2438 = frontier_phi_66_pred_5;
                uint _2595 = _2594 + 1u;
                if (_2595 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2588 = _2436;
                    _2589 = _2438;
                    _2590 = _2440;
                    _2591 = _2442;
                    _2592 = _2444;
                    _2593 = _2446;
                    _2594 = _2595;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
        }
        uvec4 _2449 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2450 = _2449.z;
        uint _2452 = (_2450 >> 8u) & 15u;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        if (((4294967295u << _2452) & _2334) == 0u)
        {
            _2556 = _2435;
            _2558 = _2437;
            _2560 = _2439;
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
        }
        else
        {
            float _2581 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
            float _2582 = _2581 * _2288;
            float _2583 = _2581 * _2289;
            float _2584 = _2581 * _2290;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2452 < ((_2450 >> 12u) & 15u))
            {
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2716 = _2435;
                float _2717 = _2437;
                float _2718 = _2439;
                float _2719 = _2441;
                float _2720 = _2443;
                float _2721 = _2445;
                uint _2722 = _2452;
                uint _2731;
                bool _2732;
                for (;;)
                {
                    _2731 = texelFetch(g_lightClassification, int((((_2328 << 5u) + (_2314 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                    _2732 = _2731 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2732)
                    {
                        frontier_phi_77_pred = _2721;
                        frontier_phi_77_pred_1 = _2720;
                        frontier_phi_77_pred_2 = _2719;
                        frontier_phi_77_pred_3 = _2718;
                        frontier_phi_77_pred_4 = _2717;
                        frontier_phi_77_pred_5 = _2716;
                    }
                    else
                    {
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2930;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        uint _2944 = _2731;
                        uint _2945;
                        vec4 _2970;
                        float _2971;
                        vec4 _2986;
                        vec3 _2998;
                        vec4 _3014;
                        vec4 _3030;
                        float _3076;
                        bool _3077;
                        for (;;)
                        {
                            uint _2955 = ((_2722 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2944));
                            _2945 = (_2944 + 4294967295u) & _2944;
                            uint _2957 = _2955 * 40u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2971 = _2970.w;
                            uint _2973 = (_2955 * 40u) + 4u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2955 * 40u) + 8u;
                            _2998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x));
                            uint _3001 = (_2955 * 40u) + 16u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3017 = (_2955 * 40u) + 20u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2955 * 40u) + 24u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            uint _3051 = (_2955 * 40u) + 28u;
                            vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            _3076 = fma(_2290, _3064.z, fma(_2289, _3064.y, _3064.x * _2288)) + _3064.w;
                            _3077 = !((fma(_2290, _3045.z, fma(_2289, _3045.y, _3045.x * _2288)) + _3045.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3077)
                            {
                                float _3104 = _2970.x - _2288;
                                float _3105 = _2970.y - _2289;
                                float _3106 = _2970.z - _2290;
                                float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                                float _3110 = inversesqrt(_3107);
                                float _3111 = _3110 * _3104;
                                float _3112 = _3110 * _3105;
                                float _3113 = _3110 * _3106;
                                float _3117 = 1.0 - (_3107 / (_2971 * _2971));
                                float _4222 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3122 = sqrt(_3107) * _2986.w;
                                float _3124 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                                float _3125 = _3124 * _3124;
                                float _3128 = ((1.0 - _3125) * dot(vec3(_3111, _3112, _3113), vec3(_559, _562, _565))) + _3125;
                                float _3131 = _3122 * _3122;
                                float _3135 = (fma(_2290, _3014.z, fma(_2289, _3014.y, _3014.x * _2288)) + _3014.w) / _3076;
                                float _3136 = (fma(_2290, _3030.z, fma(_2289, _3030.y, _3030.x * _2288)) + _3030.w) / _3076;
                                float _3140 = 1.0 - dot(vec2(_3135, _3136), vec2(_3135, _3136));
                                float _4238 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3141 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3142 = _3141 * (((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3118) / ((_3131 * 0.699999988079071044921875) + 1.0));
                                float _3154 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                                float _3155 = 1.0 - _619;
                                float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                                float _3163 = _3162 * _3162;
                                float _3164 = _3163 * _3163;
                                float _3165 = _3111 - _2582;
                                float _3166 = _3112 - _2583;
                                float _3167 = _3113 - _2584;
                                float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                                float _3175 = dot(vec3(_559, _562, _565), vec3((-0.0) - _2582, (-0.0) - _2583, (-0.0) - _2584));
                                float _4249 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3178 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3179 = dot(vec3(_559, _562, _565), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                                float _4260 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3182 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                                float _3187 = _3124 * _3163;
                                float _3188 = _3187 * _3187;
                                float _3194 = ((1.0 - _3188) * dot(vec3(_559, _562, _565), vec3(_3111, _3112, _3113))) + _3188;
                                float _4271 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3195 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3196 = 1.0 - _3163;
                                float _3206 = (0.5 / (((_3195 * ((_3178 * _3196) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3163) * _3178))) * _3195;
                                float _4282 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3216 = (_3141 * _3118) * (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_3186 * _3186) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3142 * _2986.y;
                                frontier_phi_83_pred_1 = _3142 * _2986.x;
                                frontier_phi_83_pred_2 = _3216 * _2998.z;
                                frontier_phi_83_pred_3 = _3216 * _2998.y;
                                frontier_phi_83_pred_4 = _3216 * _2998.x;
                                frontier_phi_83_pred_5 = _3142 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3224 = frontier_phi_83_pred;
                            _3223 = frontier_phi_83_pred_1;
                            _3222 = frontier_phi_83_pred_2;
                            _3221 = frontier_phi_83_pred_3;
                            _3220 = frontier_phi_83_pred_4;
                            _3225 = frontier_phi_83_pred_5;
                            _2928 = _3223 + _2941;
                            _2929 = _3224 + _2942;
                            _2930 = _3225 + _2943;
                            _2925 = _3220 + _2938;
                            _2926 = _3221 + _2939;
                            _2927 = _3222 + _2940;
                            if (_2945 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2945;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2930;
                        frontier_phi_77_pred_1 = _2929;
                        frontier_phi_77_pred_2 = _2928;
                        frontier_phi_77_pred_3 = _2927;
                        frontier_phi_77_pred_4 = _2926;
                        frontier_phi_77_pred_5 = _2925;
                    }
                    _2567 = frontier_phi_77_pred;
                    _2565 = frontier_phi_77_pred_1;
                    _2563 = frontier_phi_77_pred_2;
                    _2561 = frontier_phi_77_pred_3;
                    _2559 = frontier_phi_77_pred_4;
                    _2557 = frontier_phi_77_pred_5;
                    uint _2723 = _2722 + 1u;
                    if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2716 = _2557;
                        _2717 = _2559;
                        _2718 = _2561;
                        _2719 = _2563;
                        _2720 = _2565;
                        _2721 = _2567;
                        _2722 = _2723;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2561;
                frontier_phi_58_59_ladder_1 = _2567;
                frontier_phi_58_59_ladder_2 = _2565;
                frontier_phi_58_59_ladder_3 = _2563;
                frontier_phi_58_59_ladder_4 = _2559;
                frontier_phi_58_59_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_58_59_ladder = _2439;
                frontier_phi_58_59_ladder_1 = _2445;
                frontier_phi_58_59_ladder_2 = _2443;
                frontier_phi_58_59_ladder_3 = _2441;
                frontier_phi_58_59_ladder_4 = _2437;
                frontier_phi_58_59_ladder_5 = _2435;
            }
            _2556 = frontier_phi_58_59_ladder_5;
            _2558 = frontier_phi_58_59_ladder_4;
            _2560 = frontier_phi_58_59_ladder;
            _2562 = frontier_phi_58_59_ladder_3;
            _2564 = frontier_phi_58_59_ladder_2;
            _2566 = frontier_phi_58_59_ladder_1;
        }
        float _2571 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _2347 = (_2571 * _2562) + _1802;
        _2349 = (_2571 * _2564) + _1804;
        _2351 = (_2571 * _2566) + _1806;
        _2353 = ((_2556 * 0.039999999105930328369140625) * _2571) + _2132;
        _2355 = ((_2558 * 0.039999999105930328369140625) * _2571) + _2134;
        _2357 = ((_2560 * 0.039999999105930328369140625) * _2571) + _2136;
    }
    else
    {
        _2347 = _1802;
        _2349 = _1804;
        _2351 = _1806;
        _2353 = _2132;
        _2355 = _2134;
        _2357 = _2136;
    }
    float _4298 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4309 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _4320 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _2374 = ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2347 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _603))) + ((_2353 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2375 = ((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2349 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _603))) + ((_2355 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    float _2376 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2351 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _603))) + ((_2357 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1440)) * cbPerFrame._m0[3u].x);
    uint _2377 = _220 + 6u;
    float _2385 = _538 / cbSceneParam._m0[86u].x;
    float _2386 = _539 / cbSceneParam._m0[86u].y;
    vec4 _2400 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, (log2((isnan(cbSceneParam._m0[77u].w) ? _459 : (isnan(_459) ? cbSceneParam._m0[77u].w : min(_459, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2402 = _2400.x;
    float _2403 = _2400.y;
    float _2404 = _2400.z;
    float _2405 = _2400.w;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    if (_459 > cbSceneParam._m0[78u].w)
    {
        float _2460 = isnan(_459) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _459 : min(cbSceneParam._m0[80u].w, _459));
        float _2461 = _2460 / _459;
        float _2472 = _2461 * _510;
        float _2473 = _511 * _2461;
        float _2474 = (-0.0) - _2473;
        float _2476 = _2461 * _512;
        float _2478 = (cbSceneParam._m0[77u].w * _2474) / _2460;
        float _2479 = _2478 + cbSceneParam._m0[79u].w;
        float _2480 = cbSceneParam._m0[79u].w - _2473;
        float _2486 = sqrt(((_2472 * _2472) + (_2473 * _2473)) + (_2476 * _2476));
        float _2489 = (1.0 - (cbSceneParam._m0[77u].w / _2460)) * _2486;
        float _2494 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2496 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2673;
        if (abs((_2474 - _2478) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2673 = ((((_2479 > 0.0) ? exp2(_2494 * _2479) : (2.0 - exp2(_2496 * _2479))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2489;
        }
        else
        {
            float _2617 = 1.0 / cbSceneParam._m0[80u].x;
            float _2618 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : max(_2479, _2480));
            float _2619 = isnan(_2480) ? _2479 : (isnan(_2479) ? _2480 : min(_2479, _2480));
            float _2628 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : min(_2618, 0.0));
            float _2629 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : min(_2619, 0.0));
            _2673 = ((abs(_2486 / _2474) * cbSceneParam._m0[80u].y) * ((((_2628 - _2629) * 2.0) - ((exp2(_2494 * (isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0)))) - exp2(_2494 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))))) * _2617)) - ((exp2(_2496 * _2628) - exp2(_2496 * _2629)) * _2617))) + (_2489 * cbSceneParam._m0[80u].z);
        }
        vec4 _2675 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2385, _2386, 1.0), 0.0);
        float _2684 = exp2((_2673 * (-1.44269502162933349609375)) * (1.0 - _2675.w));
        float _2685 = log2(_2684);
        float _2701 = log2(_2405);
        _2498 = (exp2(_2701 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].x)) * _2675.x) / cbSceneParam._m0[78u].x)) + _2402;
        _2500 = (exp2(_2701 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].y)) * _2675.y) / cbSceneParam._m0[78u].y)) + _2403;
        _2502 = (exp2(_2701 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2685 * cbSceneParam._m0[78u].z)) * _2675.z) / cbSceneParam._m0[78u].z)) + _2404;
        _2504 = _2684 * _2405;
    }
    else
    {
        _2498 = _2402;
        _2500 = _2403;
        _2502 = _2404;
        _2504 = _2405;
    }
    bool _2711;
    vec4 _2514;
    vec4 _2536;
    float _2538;
    float _2542;
    float _2543;
    float _2544;
    float _2545;
    bool _2555;
    for (;;)
    {
        _2514 = cbMatDynParam._m0[0u];
        float _2516 = roundEven(_2514.y);
        bool _2517 = _2516 == 3.0;
        float _2518 = log2(_2504);
        float _2525 = exp2(_2518 * cbSceneParam._m0[78u].x) * _2374;
        float _2526 = exp2(_2518 * cbSceneParam._m0[78u].y) * _2375;
        float _2527 = exp2(_2518 * cbSceneParam._m0[78u].z) * _2376;
        float _2534 = _526 + (-0.5);
        _2536 = cbMtdParam._m0[1u];
        _2538 = _2536.y * _2534;
        float _2541 = (_2516 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2542 = _2541 * (_2517 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2498)));
        _2543 = _2541 * (_2517 ? _2526 : (_2526 + (cbSceneParam._m0[72u].w * _2500)));
        _2544 = _2541 * (_2517 ? _2527 : (_2527 + (cbSceneParam._m0[72u].w * _2502)));
        _2545 = _2534 * 0.999000012874603271484375;
        _2555 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2555)
        {
            if ((cbInstanceData._m0[_220 + 7u].x + _2545) < 0.5)
            {
                _2711 = true;
                break;
            }
        }
        uint _2652 = _578 + uint(_2514.w);
        if ((cbInstanceData._m0[_2652].w < 1.0) && ((cbInstanceData._m0[_2652].w + _2545) < 0.5))
        {
            _2711 = true;
            break;
        }
        if ((_2538 + 1.0) < _2536.x)
        {
            _2711 = true;
            break;
        }
        _2711 = false;
        break;
    }
    float _2916;
    if (_2711)
    {
        discard_state = true;
        _2916 = 0.0;
    }
    else
    {
        _2916 = cbInstanceData._m0[_2377].w;
    }
    SV_Target.x = _2542;
    SV_Target.y = _2543;
    SV_Target.z = _2544;
    SV_Target.w = _2916;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2377].w;
    discard_exit();
}


