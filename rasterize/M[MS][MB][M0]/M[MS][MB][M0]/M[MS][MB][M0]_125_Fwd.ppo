#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1138;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3442 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _475 = ((_445.z - _466) * _372) + _466;
    float _478 = ((((_445.x - _464) * _372) + _464) * 2.0) + (-1.0);
    float _479 = ((((_445.y - _465) * _372) + _465) * 2.0) + (-1.0);
    float _480 = dot(vec2(_478, _479), vec2(_478, _479));
    float _3453 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    vec4 _498 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _518 = _516.x;
    float _519 = 1.0 - _518;
    float _532 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_518 - _519) * cbMtdParam._m0[24u].z) + _519) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3464 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _533 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _540 = (_533 * ((_400.x * cbMtdParam._m0[18u].x) - _379)) + _379;
    float _541 = (_533 * ((_400.y * cbMtdParam._m0[18u].y) - _380)) + _380;
    float _542 = (_533 * ((_400.z * cbMtdParam._m0[18u].z) - _381)) + _381;
    float _547 = (((_420.z - _475) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _475;
    vec4 _560 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _567 = (_560.x * 2.0) + (-1.0);
    float _568 = (_560.y * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3475 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _577 = (_533 * (_560.z - _547)) + _547;
    float _582 = _478 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_420.x * 2.0) + (-1.0)));
    float _583 = _479 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_420.y * 2.0) + (-1.0)));
    float _595 = (((_567 - _582) + (cbMtdParam._m0[21u].x * _582)) * _533) + _582;
    float _596 = (((_568 - _583) + (cbMtdParam._m0[21u].x * _583)) * _533) + _583;
    float _597 = (_533 * (sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) - _485)) + _485;
    float _602 = cbMtdParam._m0[22u].x + _498.w;
    float _605 = fma(_597, _223 * NORMAL.x, fma(_596, _230 * TANGENT.x, (_216 * _208) * _595));
    float _608 = fma(_597, _223 * NORMAL.y, fma(_596, _230 * TANGENT.y, (_216 * _209) * _595));
    float _611 = fma(_597, _223 * NORMAL.z, fma(_596, _230 * TANGENT.z, (_216 * _210) * _595));
    float _615 = inversesqrt(dot(vec3(_605, _608, _611), vec3(_605, _608, _611)));
    float _616 = _615 * _605;
    float _617 = _615 * _608;
    float _618 = _615 * _611;
    float _3486 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _619 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3508 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3519 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3530 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _637 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _689 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _679);
    float _690 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _679);
    float _691 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _679);
    float _695 = inversesqrt(dot(vec3(_689, _690, _691), vec3(_689, _690, _691)));
    float _696 = _689 * _695;
    float _697 = _690 * _695;
    float _698 = _691 * _695;
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_618, cbSceneParam._m0[5u].z, fma(_617, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _616));
    float _726 = fma(_618, cbSceneParam._m0[6u].z, fma(_617, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _616));
    float _729 = fma(_618, cbSceneParam._m0[7u].z, fma(_617, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _616));
    uint _743 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3541 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _3552 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _767 = ((isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * TEXCOORD_5.w) * _763.x;
    float _768 = dot(vec3(_616, _617, _618), vec3(_696, _697, _698));
    float _771 = _768 * 2.0;
    float _775 = (_771 * _616) - _696;
    float _776 = (_771 * _617) - _697;
    float _777 = (_771 * _618) - _698;
    float _781 = abs(dot(vec3(_696, _697, _698), vec3(_616, _617, _618)));
    float _3574 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _783 = sqrt(_619);
    float _796 = exp2((_783 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_783 * 3.0));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1137;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _862 = fma(_836, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828));
        float _866 = fma(_836, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828));
        float _870 = fma(_836, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828));
        float _895 = _828 + _616;
        float _896 = _832 + _617;
        float _897 = _836 + _618;
        float _907 = fma(_897, cbModelParam._m0[26u].z, fma(_896, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _895)) - _862;
        float _908 = fma(_897, cbModelParam._m0[27u].z, fma(_896, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _895)) - _866;
        float _909 = fma(_897, cbModelParam._m0[28u].z, fma(_896, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _895)) - _870;
        float _913 = inversesqrt(dot(vec3(_907, _908, _909), vec3(_907, _908, _909)));
        float _926 = ((_913 * _907) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_862 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_913 * _908) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_866 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_913 * _909) / cbModelParam._m0[34u].z) + ((((((_870 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_926, _927, _928), 0.0);
        float _965 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_931.x + (-0.5));
        float _967 = _965 * (_931.y + (-0.5));
        float _968 = _965 * (_931.z + (-0.5));
        float _975 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_938.x + (-0.5));
        float _977 = _975 * (_938.y + (-0.5));
        float _978 = _975 * (_938.z + (-0.5));
        float _985 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_945.x + (-0.5));
        float _987 = _985 * (_945.y + (-0.5));
        float _988 = _985 * (_945.z + (-0.5));
        float _995 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_952.x + (-0.5));
        float _997 = _995 * (_952.y + (-0.5));
        float _998 = _995 * (_952.z + (-0.5));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = _966 * 0.5;
        float _1003 = _976 * 0.5;
        float _1004 = _986 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1019 = (dot(vec3(_616, _617, _618), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1029 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3622 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1031 + 1.0))) + _1036) * _999;
        float _1046 = _967 * 0.5;
        float _1047 = _977 * 0.5;
        float _1048 = _987 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(_616, _617, _618), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3633 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3644 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3655 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * (_1073 + 1.0))) + _1078) * _1000;
        float _1088 = _968 * 0.5;
        float _1089 = _978 * 0.5;
        float _1090 = _988 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_616, _617, _618), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3666 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3677 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3688 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * (_1115 + 1.0))) + _1120) * _1001;
        _1137 = _968;
        _1139 = _967;
        _1140 = _966;
        _1141 = _978;
        _1142 = _977;
        _1143 = _976;
        _1144 = _988;
        _1145 = _987;
        _1146 = _986;
        _1147 = _1001;
        _1148 = _1000;
        _1149 = _999;
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
    }
    else
    {
        _1137 = _1138;
        _1139 = _1138;
        _1140 = _1138;
        _1141 = _1138;
        _1142 = _1138;
        _1143 = _1138;
        _1144 = _1138;
        _1145 = _1138;
        _1146 = _1138;
        _1147 = _1138;
        _1148 = _1138;
        _1149 = _1138;
        _1150 = 0.0;
        _1151 = 0.0;
        _1152 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_836, cbModelParam._m0[30u].z, fma(_832, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _828));
        float _1181 = fma(_836, cbModelParam._m0[31u].z, fma(_832, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _828));
        float _1185 = fma(_836, cbModelParam._m0[32u].z, fma(_832, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _828));
        float _1208 = _828 + _616;
        float _1209 = _832 + _617;
        float _1210 = _836 + _618;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_616, _617, _618), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3751 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_616, _617, _618), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3784 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_616, _617, _618), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3817 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1138;
        _1447 = _1138;
        _1448 = _1138;
        _1449 = _1138;
        _1450 = _1138;
        _1451 = _1138;
        _1452 = _1138;
        _1453 = _1138;
        _1454 = _1138;
        _1455 = _1138;
        _1456 = _1138;
        _1457 = _1138;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1150)) + _1150;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1151)) + _1151;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1152)) + _1152;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _775 * 0.5;
    float _1515 = _776 * 0.5;
    float _1516 = _777 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1137, _1141, _1144, _1147));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _619);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1630 = fma(_836, cbModelParam._m0[13u].z, fma(_832, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _828)) + cbModelParam._m0[13u].w;
        float _1634 = fma(_836, cbModelParam._m0[14u].z, fma(_832, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _828)) + cbModelParam._m0[14u].w;
        float _1638 = fma(_836, cbModelParam._m0[15u].z, fma(_832, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _828)) + cbModelParam._m0[15u].w;
        float _1641 = fma(_777, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _775));
        float _1644 = fma(_777, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _775));
        float _1647 = fma(_777, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _775));
        float _1675;
        if (_1641 > 0.0)
        {
            _1675 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1675 = frontier_phi_14_12_ladder;
        }
        float _1875;
        if (_1644 > 0.0)
        {
            _1875 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1875 = frontier_phi_23_19_ladder;
        }
        float _2118;
        if (_1647 > 0.0)
        {
            _2118 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2118 = frontier_phi_35_30_ladder;
        }
        float _2120 = isnan(_1875) ? _1675 : (isnan(_1675) ? _1875 : min(_1675, _1875));
        float _2121 = isnan(_2118) ? _2120 : (isnan(_2120) ? _2118 : min(_2120, _2118));
        float _2125 = (_2121 * _1641) + _1630;
        float _2126 = (_2121 * _1644) + _1634;
        float _2127 = (_2121 * _1647) + _1638;
        float _2128 = _2121 * 9.9999997473787516355514526367188e-05;
        float _2130 = (-1.0) - _2128;
        float _2132 = _2128 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2127 > _2132) || ((_2127 < _2130) || ((_2126 > _2132) || ((_2126 < _2130) || ((_2125 < _2130) || (_2125 > _2132))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2251 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2127, cbModelParam._m0[9u].z, fma(_2126, cbModelParam._m0[9u].y, _2125 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2127, cbModelParam._m0[10u].z, fma(_2126, cbModelParam._m0[10u].y, _2125 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2127, cbModelParam._m0[11u].z, fma(_2126, cbModelParam._m0[11u].y, _2125 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_13_35_ladder = _2251.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2251.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2251.x * cbModelParam._m0[1u].y;
        }
        _1663 = frontier_phi_13_35_ladder_2;
        _1665 = frontier_phi_13_35_ladder_1;
        _1667 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_775, _776, _777), _1583);
        _1663 = _1651.x * cbModelParam._m0[1u].y;
        _1665 = _1651.y * cbModelParam._m0[1u].y;
        _1667 = _1651.z * cbModelParam._m0[1u].y;
    }
    float _1671 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _619);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1671 : min(cbModelParam._m0[25u].w, _1671));
    float _1761;
    float _1763;
    float _1765;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1725 = fma(_836, cbModelParam._m0[21u].z, fma(_832, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _828)) + cbModelParam._m0[21u].w;
        float _1729 = fma(_836, cbModelParam._m0[22u].z, fma(_832, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _828)) + cbModelParam._m0[22u].w;
        float _1733 = fma(_836, cbModelParam._m0[23u].z, fma(_832, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _828)) + cbModelParam._m0[23u].w;
        float _1736 = fma(_777, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _775));
        float _1739 = fma(_777, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _775));
        float _1742 = fma(_777, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _775));
        float _1880;
        if (_1736 > 0.0)
        {
            _1880 = abs((1.0 - _1725) / _1736);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1725 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1880 = frontier_phi_25_21_ladder;
        }
        float _2145;
        if (_1739 > 0.0)
        {
            _2145 = abs((1.0 - _1729) / _1739);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1729 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2145 = frontier_phi_37_32_ladder;
        }
        float _2350;
        if (_1742 > 0.0)
        {
            _2350 = abs((1.0 - _1733) / _1742);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1733 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2350 = frontier_phi_46_43_ladder;
        }
        float _2352 = isnan(_2145) ? _1880 : (isnan(_1880) ? _2145 : min(_1880, _2145));
        float _2353 = isnan(_2350) ? _2352 : (isnan(_2352) ? _2350 : min(_2352, _2350));
        float _2357 = (_2353 * _1736) + _1725;
        float _2358 = (_2353 * _1739) + _1729;
        float _2359 = (_2353 * _1742) + _1733;
        float _2360 = _2353 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2360;
        float _2363 = _2360 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2359 > _2363) || ((_2359 < _2361) || ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 < _2361) || (_2357 > _2363))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2359, cbModelParam._m0[17u].z, fma(_2358, cbModelParam._m0[17u].y, _2357 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2359, cbModelParam._m0[18u].z, fma(_2358, cbModelParam._m0[18u].y, _2357 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2359, cbModelParam._m0[19u].z, fma(_2358, cbModelParam._m0[19u].y, _2357 * cbModelParam._m0[19u].x))), _1672);
            frontier_phi_22_46_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1761 = frontier_phi_22_46_ladder_2;
        _1763 = frontier_phi_22_46_ladder_1;
        _1765 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1745 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_775, _776, _777), _1672);
        _1761 = _1745.x * cbModelParam._m0[1u].z;
        _1763 = _1745.y * cbModelParam._m0[1u].z;
        _1765 = _1745.z * cbModelParam._m0[1u].z;
    }
    float _1777 = ((((1.0 - _796) * ((_783 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_796 * _783)) * _767;
    float _1778 = _1777 * ((cbModelParam._m0[1u].w * (_1761 - _1663)) + _1663);
    float _1779 = _1777 * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1780 = _1777 * ((cbModelParam._m0[1u].w * (_1765 - _1667)) + _1667);
    float _1783 = fma(_1780, cbSceneParam._m0[89u].z, fma(_1779, cbSceneParam._m0[89u].y, _1778 * cbSceneParam._m0[89u].x));
    float _1786 = fma(_1780, cbSceneParam._m0[90u].z, fma(_1779, cbSceneParam._m0[90u].y, _1778 * cbSceneParam._m0[90u].x));
    float _1789 = fma(_1780, cbSceneParam._m0[91u].z, fma(_1779, cbSceneParam._m0[91u].y, _1778 * cbSceneParam._m0[91u].x));
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1809 = _767 + (-1.0);
    float _1814 = (cbLight._m0[_1802].x * _1809) + 1.0;
    float _1815 = (cbLight._m0[_1802].y * _1809) + 1.0;
    float _1816 = (cbLight._m0[_1802].z * _1809) + 1.0;
    float _1817 = (cbLight._m0[_1802].w * _1809) + 1.0;
    uint _1818 = _1801 + 5u;
    float _1824 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
    uint _1828 = _1801 + 4u;
    float _1834 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
    uint _1838 = _1801 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_616, _617, _618));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_616, _617, _618));
    float _3953 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _3964 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1818].x * _1824) * _1859) + ((cbLight._m0[_1828].x * _1834) * _1857);
    float _1867 = ((_1824 * cbLight._m0[_1818].y) * _1859) + ((_1834 * cbLight._m0[_1828].y) * _1857);
    float _1868 = ((_1824 * cbLight._m0[_1818].z) * _1859) + ((_1834 * cbLight._m0[_1828].z) * _1857);
    uvec4 _1872 = floatBitsToUint(cbLight._m0[_1801 + 12u]);
    bool _1874 = _1872.x == 0u;
    float _1885;
    float _1887;
    float _1889;
    if (_1874)
    {
        _1885 = _1866;
        _1887 = _1867;
        _1889 = _1868;
    }
    else
    {
        uint _1893 = _1801 + 6u;
        float _1909 = (dot(vec3(cbLight._m0[_1801 + 2u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _1910 = _1909 * _1909;
        float _3975 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1912 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _1885 = (((cbLight._m0[_1893].x * 0.3183098733425140380859375) * _1911) * _1912) + _1866;
        _1887 = (((cbLight._m0[_1893].y * 0.3183098733425140380859375) * _1911) * _1912) + _1867;
        _1889 = (((cbLight._m0[_1893].z * 0.3183098733425140380859375) * _1911) * _1912) + _1868;
    }
    bool _1892 = _1872.y == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1892)
    {
        _1930 = _1885;
        _1932 = _1887;
        _1934 = _1889;
    }
    else
    {
        uint _2089 = _1801 + 7u;
        float _2105 = (dot(vec3(cbLight._m0[_1801 + 3u].xyz), vec3(_616, _617, _618)) * 0.5) + 0.5;
        float _2106 = _2105 * _2105;
        float _3991 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2107 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2108 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _1930 = (((cbLight._m0[_2089].x * 0.3183098733425140380859375) * _2107) * _2108) + _1885;
        _1932 = (((cbLight._m0[_2089].y * 0.3183098733425140380859375) * _2107) * _2108) + _1887;
        _1934 = (((cbLight._m0[_2089].z * 0.3183098733425140380859375) * _2107) * _2108) + _1889;
    }
    uint _1937 = _1801 + 8u;
    float _1950 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _619) * 0.949999988079071044921875);
    float _1951 = _1950 * _1950;
    float _1952 = cbLight._m0[_1801].x + _696;
    float _1953 = cbLight._m0[_1801].y + _697;
    float _1954 = cbLight._m0[_1801].z + _698;
    float _1958 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
    float _1959 = _1958 * _1952;
    float _1960 = _1958 * _1953;
    float _1961 = _1958 * _1954;
    float _1962 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_1801].xyz));
    float _4007 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1965 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _1966 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _1967 = dot(vec3(_616, _617, _618), vec3(_1959, _1960, _1961));
    float _4029 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1959, _1960, _1961));
    float _4040 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1951 * _1951;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1991 = 1.0 - _1951;
    float _2002 = (0.5 / (((_1966 * ((_1965 * _1991) + _1951)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _1991) + _1951) * _1965))) * _1965;
    float _4051 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    uint _2015 = _1801 + 9u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _619) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1838].x + _696;
    float _2029 = cbLight._m0[_1838].y + _697;
    float _2030 = cbLight._m0[_1838].z + _698;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_1838].xyz));
    float _4062 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2042 = dot(vec3(_616, _617, _618), vec3(_2035, _2036, _2037));
    float _4073 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_2035, _2036, _2037));
    float _4084 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2027 * _2027;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2027;
    float _2074 = (0.5 / (((_1966 * ((_2041 * _2064) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2064) + _2027) * _2041))) * _2041;
    float _4095 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    float _2086 = (((_2063 * cbLight._m0[_2015].x) * _2076) * _1824) + (((_1990 * cbLight._m0[_1937].x) * _2004) * _1834);
    float _2087 = (((_2063 * cbLight._m0[_2015].y) * _2076) * _1824) + (((_1990 * cbLight._m0[_1937].y) * _2004) * _1834);
    float _2088 = (((_2063 * cbLight._m0[_2015].z) * _2076) * _1824) + (((_1990 * cbLight._m0[_1937].z) * _2004) * _1834);
    float _2150;
    float _2152;
    float _2154;
    if (_1874)
    {
        _2150 = _2086;
        _2152 = _2087;
        _2154 = _2088;
    }
    else
    {
        uint _2156 = _1801 + 2u;
        uint _2160 = _1801 + 10u;
        float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _619) * 0.949999988079071044921875);
        float _2175 = _2174 * _2174;
        float _2176 = cbLight._m0[_2156].x + _696;
        float _2177 = cbLight._m0[_2156].y + _697;
        float _2178 = cbLight._m0[_2156].z + _698;
        float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
        float _2183 = _2182 * _2176;
        float _2184 = _2182 * _2177;
        float _2185 = _2182 * _2178;
        float _2186 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2156].xyz));
        float _4106 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2189 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2190 = dot(vec3(_616, _617, _618), vec3(_2183, _2184, _2185));
        float _4117 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2194 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2183, _2184, _2185));
        float _4128 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2198 = _2175 * _2175;
        float _2202 = ((_2193 * _2193) * (_2198 + (-1.0))) + 1.0;
        float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2212 = 1.0 - _2175;
        float _2222 = (0.5 / (((_1966 * ((_2189 * _2212) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2212) + _2175) * _2189))) * _2189;
        float _4139 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2224 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2198 / ((_2202 * _2202) * 3.141590118408203125));
        float _2225 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
        _2150 = (((_2211 * cbLight._m0[_2160].x) * _2224) * _2225) + _2086;
        _2152 = (((_2211 * cbLight._m0[_2160].y) * _2224) * _2225) + _2087;
        _2154 = (((_2211 * cbLight._m0[_2160].z) * _2224) * _2225) + _2088;
    }
    float _2260;
    float _2262;
    float _2264;
    if (_1892)
    {
        _2260 = _2150;
        _2262 = _2152;
        _2264 = _2154;
    }
    else
    {
        uint _2271 = _1801 + 3u;
        uint _2275 = _1801 + 11u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _619) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _696;
        float _2292 = cbLight._m0[_2271].y + _697;
        float _2293 = cbLight._m0[_2271].z + _698;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_616, _617, _618), vec3(cbLight._m0[_2271].xyz));
        float _4155 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2305 = dot(vec3(_616, _617, _618), vec3(_2298, _2299, _2300));
        float _4166 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4177 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2326 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2327 = 1.0 - _2290;
        float _2337 = (0.5 / (((_1966 * ((_2304 * _2327) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_1966 * _2327) + _2290) * _2304))) * _2304;
        float _4188 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2339 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2340 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
        _2260 = (((_2326 * cbLight._m0[_2275].x) * _2339) * _2340) + _2150;
        _2262 = (((_2326 * cbLight._m0[_2275].y) * _2339) * _2340) + _2152;
        _2264 = (((_2326 * cbLight._m0[_2275].z) * _2339) * _2340) + _2154;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1799.y == 0u)
    {
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2416 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2415;
        float _2417 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2415;
        float _2418 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2415;
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.x;
        uint _2442 = uint((float(_2430.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2431))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2431)));
        float _2452 = (log2(_2418 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2453 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        uint _2456 = uint(isnan(14.0) ? _2453 : (isnan(_2453) ? 14.0 : min(_2453, 14.0)));
        uvec4 _2461 = texelFetch(g_lightClusterGridBuffer, int(((_2456 << 2u) + (_2442 << 6u)) >> 2u));
        uint _2462 = _2461.x;
        uint _2463 = _2430.z;
        float _2563;
        float _2565;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        if (((((1u << ((_2463 >> 4u) & 15u)) + 4294967295u) & _2462) == 0u) || ((_2463 & 240u) == 0u))
        {
            _2563 = 0.0;
            _2565 = 0.0;
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
        }
        else
        {
            float _2564;
            float _2566;
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            uint _2714 = 0u;
            uint _2723;
            bool _2724;
            for (;;)
            {
                _2723 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                _2724 = _2723 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2724)
                {
                    frontier_phi_61_pred = _2708;
                    frontier_phi_61_pred_1 = _2713;
                    frontier_phi_61_pred_2 = _2712;
                    frontier_phi_61_pred_3 = _2711;
                    frontier_phi_61_pred_4 = _2710;
                    frontier_phi_61_pred_5 = _2709;
                }
                else
                {
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    uint _2838;
                    _2832 = _2708;
                    _2833 = _2709;
                    _2834 = _2710;
                    _2835 = _2711;
                    _2836 = _2712;
                    _2837 = _2713;
                    _2838 = _2723;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    for (;;)
                    {
                        uint _2842 = uint(findLSB(_2838)) + (_2714 << 5u);
                        uint _2839 = (_2838 + 4294967295u) & _2838;
                        uint _2844 = _2842 * 48u;
                        vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2844)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2844 + 3u)).x));
                        uint _2864 = (_2842 * 48u) + 4u;
                        vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2864)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2864 + 3u)).x));
                        uint _2883 = (_2842 * 48u) + 8u;
                        vec3 _2894 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2883)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2883 + 2u)).x));
                        float _2898 = _2858.x - _2416;
                        float _2899 = _2858.y - _2417;
                        float _2900 = _2858.z - _2418;
                        float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                        float _2904 = inversesqrt(_2901);
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2908 = dot(vec3(_723, _726, _729), vec3(_2905, _2906, _2907));
                        float _2913 = 1.0 - (_2901 * _2858.w);
                        float _4214 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2915 = sqrt(_2901) * _2877.w;
                        float _2918 = 1.39999997615814208984375 / (_2915 + 1.39999997615814208984375);
                        float _2919 = _2918 * _2918;
                        float _2922 = ((1.0 - _2919) * _2908) + _2919;
                        float _2925 = _2915 * _2915;
                        float _2929 = ((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2914) / ((_2925 * 0.699999988079071044921875) + 1.0);
                        float _2933 = (-0.0) - _2416;
                        float _2934 = (-0.0) - _2417;
                        float _2935 = (-0.0) - _2418;
                        float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2950 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                        float _2951 = 1.0 - _783;
                        float _2958 = sqrt(1.0 - ((1.0 - (_2951 * _2951)) * (1.0 - (_2950 * _2950))));
                        float _2959 = _2958 * _2958;
                        float _2960 = _2959 * _2959;
                        float _2961 = _2940 + _2905;
                        float _2962 = _2941 + _2906;
                        float _2963 = _2942 + _2907;
                        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
                        float _2971 = dot(vec3(_723, _726, _729), vec3(_2940, _2941, _2942));
                        float _4230 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2974 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2975 = dot(vec3(_723, _726, _729), vec3(_2967 * _2961, _2967 * _2962, _2967 * _2963));
                        float _4241 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2982 = ((_2978 * _2978) * (_2960 + (-1.0))) + 1.0;
                        float _2983 = _2918 * _2959;
                        float _2984 = _2983 * _2983;
                        float _2987 = ((1.0 - _2984) * _2908) + _2984;
                        float _4252 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2988 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2989 = 1.0 - _2959;
                        float _2999 = (0.5 / (((_2988 * ((_2974 * _2989) + _2959)) + 9.9999999392252902907785028219223e-09) + (((_2988 * _2989) + _2959) * _2974))) * _2988;
                        float _4263 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3010 = (((_2960 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2982 * _2982) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125))) * _2914;
                        _2767 = (_2929 * _2877.x) + _2835;
                        _2768 = (_2929 * _2877.y) + _2836;
                        _2769 = (_2929 * _2877.z) + _2837;
                        _2764 = (_3010 * _2894.x) + _2832;
                        _2765 = (_3010 * _2894.y) + _2833;
                        _2766 = (_3010 * _2894.z) + _2834;
                        if (_2839 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2839;
                        }
                    }
                    frontier_phi_61_pred = _2764;
                    frontier_phi_61_pred_1 = _2769;
                    frontier_phi_61_pred_2 = _2768;
                    frontier_phi_61_pred_3 = _2767;
                    frontier_phi_61_pred_4 = _2766;
                    frontier_phi_61_pred_5 = _2765;
                }
                _2564 = frontier_phi_61_pred;
                _2574 = frontier_phi_61_pred_1;
                _2572 = frontier_phi_61_pred_2;
                _2570 = frontier_phi_61_pred_3;
                _2568 = frontier_phi_61_pred_4;
                _2566 = frontier_phi_61_pred_5;
                uint _2715 = _2714 + 1u;
                if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2708 = _2564;
                    _2709 = _2566;
                    _2710 = _2568;
                    _2711 = _2570;
                    _2712 = _2572;
                    _2713 = _2574;
                    _2714 = _2715;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2563 = _2564;
            _2565 = _2566;
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
        }
        uvec4 _2577 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2578 = _2577.z;
        uint _2580 = (_2578 >> 8u) & 15u;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((4294967295u << _2580) & _2462) == 0u)
        {
            _2676 = _2563;
            _2678 = _2565;
            _2680 = _2567;
            _2682 = _2569;
            _2684 = _2571;
            _2686 = _2573;
        }
        else
        {
            float _2701 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
            float _2702 = _2701 * _2416;
            float _2703 = _2701 * _2417;
            float _2704 = _2701 * _2418;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2580 < ((_2578 >> 12u) & 15u))
            {
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2815 = _2563;
                float _2816 = _2565;
                float _2817 = _2567;
                float _2818 = _2569;
                float _2819 = _2571;
                float _2820 = _2573;
                uint _2821 = _2580;
                uint _2830;
                bool _2831;
                for (;;)
                {
                    _2830 = texelFetch(g_lightClassification, int((((_2456 << 5u) + (_2442 << 9u)) + (_2821 << 2u)) >> 2u)).x;
                    _2831 = _2830 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2831)
                    {
                        frontier_phi_67_pred = _2818;
                        frontier_phi_67_pred_1 = _2819;
                        frontier_phi_67_pred_2 = _2820;
                        frontier_phi_67_pred_3 = _2817;
                        frontier_phi_67_pred_4 = _2816;
                        frontier_phi_67_pred_5 = _2815;
                    }
                    else
                    {
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3028 = _2815;
                        float _3029 = _2816;
                        float _3030 = _2817;
                        float _3031 = _2818;
                        float _3032 = _2819;
                        float _3033 = _2820;
                        uint _3034 = _2830;
                        uint _3035;
                        vec4 _3060;
                        float _3061;
                        vec4 _3076;
                        vec3 _3088;
                        vec4 _3103;
                        vec4 _3118;
                        float _3164;
                        bool _3165;
                        for (;;)
                        {
                            uint _3045 = ((_2821 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3034));
                            _3035 = (_3034 + 4294967295u) & _3034;
                            uint _3047 = _3045 * 40u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            _3061 = _3060.w;
                            uint _3063 = (_3045 * 40u) + 4u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3078 = (_3045 * 40u) + 8u;
                            _3088 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x));
                            uint _3090 = (_3045 * 40u) + 16u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3045 * 40u) + 20u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3045 * 40u) + 24u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3139 = (_3045 * 40u) + 28u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            _3164 = fma(_2418, _3152.z, fma(_2417, _3152.y, _3152.x * _2416)) + _3152.w;
                            _3165 = !((fma(_2418, _3133.z, fma(_2417, _3133.y, _3133.x * _2416)) + _3133.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3165)
                            {
                                float _3192 = _3060.x - _2416;
                                float _3193 = _3060.y - _2417;
                                float _3194 = _3060.z - _2418;
                                float _3195 = dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194));
                                float _3198 = inversesqrt(_3195);
                                float _3199 = _3198 * _3192;
                                float _3200 = _3198 * _3193;
                                float _3201 = _3198 * _3194;
                                float _3205 = 1.0 - (_3195 / (_3061 * _3061));
                                float _4274 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3206 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3210 = sqrt(_3195) * _3076.w;
                                float _3212 = 1.39999997615814208984375 / (_3210 + 1.39999997615814208984375);
                                float _3213 = _3212 * _3212;
                                float _3216 = ((1.0 - _3213) * dot(vec3(_3199, _3200, _3201), vec3(_723, _726, _729))) + _3213;
                                float _3219 = _3210 * _3210;
                                float _3223 = (fma(_2418, _3103.z, fma(_2417, _3103.y, _3103.x * _2416)) + _3103.w) / _3164;
                                float _3224 = (fma(_2418, _3118.z, fma(_2417, _3118.y, _3118.x * _2416)) + _3118.w) / _3164;
                                float _3228 = 1.0 - dot(vec2(_3223, _3224), vec2(_3223, _3224));
                                float _4290 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                                float _3229 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3230 = _3229 * (((isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0))) * _3206) / ((_3219 * 0.699999988079071044921875) + 1.0));
                                float _3242 = exp2(log2(1.0 / ((_3219 * 3.5) + 5.0)) * 0.25);
                                float _3243 = 1.0 - _783;
                                float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                                float _3251 = _3250 * _3250;
                                float _3252 = _3251 * _3251;
                                float _3253 = _3199 - _2702;
                                float _3254 = _3200 - _2703;
                                float _3255 = _3201 - _2704;
                                float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                                float _3263 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704));
                                float _4301 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3267 = dot(vec3(_723, _726, _729), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                                float _4312 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                                float _3275 = _3212 * _3251;
                                float _3276 = _3275 * _3275;
                                float _3282 = ((1.0 - _3276) * dot(vec3(_723, _726, _729), vec3(_3199, _3200, _3201))) + _3276;
                                float _4323 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3284 = 1.0 - _3251;
                                float _3294 = (0.5 / (((_3283 * ((_3266 * _3284) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3251) * _3266))) * _3283;
                                float _4334 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3304 = (_3229 * _3206) * (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3274 * _3274) * ((_3219 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3304 * _3088.x;
                                frontier_phi_73_pred_1 = _3304 * _3088.y;
                                frontier_phi_73_pred_2 = _3230 * _3076.z;
                                frontier_phi_73_pred_3 = _3230 * _3076.y;
                                frontier_phi_73_pred_4 = _3230 * _3076.x;
                                frontier_phi_73_pred_5 = _3304 * _3088.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_73_pred;
                            _3309 = frontier_phi_73_pred_1;
                            _3313 = frontier_phi_73_pred_2;
                            _3312 = frontier_phi_73_pred_3;
                            _3311 = frontier_phi_73_pred_4;
                            _3310 = frontier_phi_73_pred_5;
                            _3018 = _3311 + _3031;
                            _3019 = _3312 + _3032;
                            _3020 = _3313 + _3033;
                            _3015 = _3308 + _3028;
                            _3016 = _3309 + _3029;
                            _3017 = _3310 + _3030;
                            if (_3035 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3035;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3018;
                        frontier_phi_67_pred_1 = _3019;
                        frontier_phi_67_pred_2 = _3020;
                        frontier_phi_67_pred_3 = _3017;
                        frontier_phi_67_pred_4 = _3016;
                        frontier_phi_67_pred_5 = _3015;
                    }
                    _2683 = frontier_phi_67_pred;
                    _2685 = frontier_phi_67_pred_1;
                    _2687 = frontier_phi_67_pred_2;
                    _2681 = frontier_phi_67_pred_3;
                    _2679 = frontier_phi_67_pred_4;
                    _2677 = frontier_phi_67_pred_5;
                    uint _2822 = _2821 + 1u;
                    if (_2822 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2815 = _2677;
                        _2816 = _2679;
                        _2817 = _2681;
                        _2818 = _2683;
                        _2819 = _2685;
                        _2820 = _2687;
                        _2821 = _2822;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2685;
                frontier_phi_55_56_ladder_1 = _2687;
                frontier_phi_55_56_ladder_2 = _2683;
                frontier_phi_55_56_ladder_3 = _2681;
                frontier_phi_55_56_ladder_4 = _2679;
                frontier_phi_55_56_ladder_5 = _2677;
            }
            else
            {
                frontier_phi_55_56_ladder = _2571;
                frontier_phi_55_56_ladder_1 = _2573;
                frontier_phi_55_56_ladder_2 = _2569;
                frontier_phi_55_56_ladder_3 = _2567;
                frontier_phi_55_56_ladder_4 = _2565;
                frontier_phi_55_56_ladder_5 = _2563;
            }
            _2676 = frontier_phi_55_56_ladder_5;
            _2678 = frontier_phi_55_56_ladder_4;
            _2680 = frontier_phi_55_56_ladder_3;
            _2682 = frontier_phi_55_56_ladder_2;
            _2684 = frontier_phi_55_56_ladder;
            _2686 = frontier_phi_55_56_ladder_1;
        }
        float _2691 = isnan(1.0) ? _767 : (isnan(_767) ? 1.0 : min(_767, 1.0));
        _2475 = (_2691 * _2682) + _1930;
        _2477 = (_2691 * _2684) + _1932;
        _2479 = (_2691 * _2686) + _1934;
        _2481 = ((_2676 * 0.039999999105930328369140625) * _2691) + _2260;
        _2483 = ((_2678 * 0.039999999105930328369140625) * _2691) + _2262;
        _2485 = ((_2680 * 0.039999999105930328369140625) * _2691) + _2264;
    }
    else
    {
        _2475 = _1930;
        _2477 = _1932;
        _2479 = _1934;
        _2481 = _2260;
        _2483 = _2262;
        _2485 = _2264;
    }
    float _4350 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4361 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4372 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    uint _2505 = _236 + 6u;
    float _2513 = _704 / cbSceneParam._m0[86u].x;
    float _2514 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _637 : (isnan(_637) ? cbSceneParam._m0[77u].w : min(_637, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_637 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_637) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _637 : min(cbSceneParam._m0[80u].w, _637));
        float _2589 = _2588 / _637;
        float _2600 = _2589 * _689;
        float _2601 = _690 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2604 = _2589 * _691;
        float _2606 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2607 = _2606 + cbSceneParam._m0[79u].w;
        float _2608 = cbSceneParam._m0[79u].w - _2601;
        float _2614 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2604 * _2604));
        float _2617 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2614;
        float _2622 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2624 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2777;
        if (abs((_2602 - _2606) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2777 = ((((_2607 > 0.0) ? exp2(_2622 * _2607) : (2.0 - exp2(_2624 * _2607))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2617;
        }
        else
        {
            float _2737 = 1.0 / cbSceneParam._m0[80u].x;
            float _2738 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : max(_2607, _2608));
            float _2739 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : min(_2607, _2608));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            _2777 = ((abs(_2614 / _2602) * cbSceneParam._m0[80u].y) * ((((_2748 - _2749) * 2.0) - ((exp2(_2622 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)))) - exp2(_2622 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))))) * _2737)) - ((exp2(_2624 * _2748) - exp2(_2624 * _2749)) * _2737))) + (_2617 * cbSceneParam._m0[80u].z);
        }
        vec4 _2779 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2788 = exp2((_2777 * (-1.44269502162933349609375)) * (1.0 - _2779.w));
        float _2789 = log2(_2788);
        float _2805 = log2(_2533);
        _2626 = (exp2(_2805 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].x)) * _2779.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2628 = (exp2(_2805 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].y)) * _2779.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2630 = (exp2(_2805 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2789 * cbSceneParam._m0[78u].z)) * _2779.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2632 = _2788 * _2533;
    }
    else
    {
        _2626 = _2530;
        _2628 = _2531;
        _2630 = _2532;
        _2632 = _2533;
    }
    float _2644 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2645 = _2644 == 3.0;
    float _2646 = log2(_2632);
    float _2653 = exp2(_2646 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2475 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _767))) + ((_2481 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1572)) * cbPerFrame._m0[3u].x));
    float _2654 = exp2(_2646 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2477 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _767))) + ((_2483 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1572)) * cbPerFrame._m0[3u].x));
    float _2655 = exp2(_2646 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2479 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _767))) + ((_2485 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1572)) * cbPerFrame._m0[3u].x));
    float _2664 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2664 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.y = _2664 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.z = _2664 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.w = cbInstanceData._m0[_2505].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
}


