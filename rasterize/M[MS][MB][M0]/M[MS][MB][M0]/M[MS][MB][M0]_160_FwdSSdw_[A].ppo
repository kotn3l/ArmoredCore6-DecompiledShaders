#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1350;
float _3731;
float _3732;
float _3733;
float _3734;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3743 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _486 = _484.x;
    float _487 = _484.y;
    float _488 = _484.z;
    float _497 = ((_467.z - _488) * _392) + _488;
    float _500 = ((((_467.x - _486) * _392) + _486) * 2.0) + (-1.0);
    float _501 = ((((_467.y - _487) * _392) + _487) * 2.0) + (-1.0);
    float _502 = dot(vec2(_500, _501), vec2(_500, _501));
    float _3754 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))));
    float _510 = _500 + ((((_440.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _511 = _501 + ((((_440.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _514 = fma(_507, _245, fma(_511, _252, _510 * _238));
    float _517 = fma(_507, _246, fma(_511, _253, _510 * _239));
    float _520 = fma(_507, _247, fma(_511, _254, _510 * _240));
    float _524 = inversesqrt(dot(vec3(_514, _517, _520), vec3(_514, _517, _520)));
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _575 = ((_570 - _571) * cbMtdParam._m0[24u].z) + _571;
    float _577 = (cbMtdParam._m0[19u].x + dot(vec4(_524 * _514, _524 * _517, _524 * _520, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_575 * cbMtdParam._m0[21u].z);
    float _3765 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _580 = (-0.0) - cbMtdParam._m0[24u].y;
    float _582 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _582 : (isnan(_582) ? 1.0 : min(_582, 1.0));
    float _590 = _578 - ((_578 * TEXCOORD_8.x) * _583);
    float _591 = _578 - ((_578 * TEXCOORD_8.y) * _583);
    float _592 = _578 - ((_578 * TEXCOORD_8.z) * _583);
    float _599 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _603 = ((isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : min(_599, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _611 = (_603 - (((_575 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _603))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3796 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _612 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _616 = ((_590 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) * _612) + _399;
    float _617 = ((_591 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) * _612) + _400;
    float _618 = ((_592 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) * _612) + _401;
    vec4 _630 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _660 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_632 - _633) * cbMtdParam._m0[24u].w) + _633) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3807 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _669 = ((((cbMtdParam._m0[10u].x - _616) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _661) + _616;
    float _670 = ((((cbMtdParam._m0[10u].y - _617) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _661) + _617;
    float _671 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _618)) * _661) + _618;
    float _676 = (((_440.z - _497) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _497;
    vec4 _690 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _697 = (_690.x * 2.0) + (-1.0);
    float _698 = (_690.y * 2.0) + (-1.0);
    float _699 = dot(vec2(_697, _698), vec2(_697, _698));
    float _3818 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _708 = (((_690.z - _676) * _590) * _612) + _676;
    float _711 = ((cbMtdParam._m0[23u].y - _708) * _661) + _708;
    vec4 _730 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _736 = (_730.x * 2.0) + (-1.0);
    float _737 = (_730.y * 2.0) + (-1.0);
    float _738 = dot(vec2(_736, _737), vec2(_736, _737));
    float _3829 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _758 = (((cbMtdParam._m0[21u].x * _510) + ((_697 - _510) * _590)) * _612) + _510;
    float _759 = (((cbMtdParam._m0[21u].x * _511) + ((_698 - _511) * _591)) * _612) + _511;
    float _760 = (((sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) - _507) * _592) * _612) + _507;
    float _771 = (((_736 - _758) + (_758 * cbMtdParam._m0[22u].z)) * _661) + _758;
    float _772 = (((_737 - _759) + (_759 * cbMtdParam._m0[22u].z)) * _661) + _759;
    float _773 = ((sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) - _760) * _661) + _760;
    float _775 = cbMtdParam._m0[22u].x + _540.w;
    float _778 = fma(_773, _245, fma(_772, _252, _771 * _238));
    float _781 = fma(_773, _246, fma(_772, _253, _771 * _239));
    float _784 = fma(_773, _247, fma(_772, _254, _771 * _240));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3840 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _792 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3862 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3873 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3884 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    vec4 _875 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _877 = _875.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1031 = sqrt(((_861 * _861) + (_862 * _862)) + (_863 * _863));
        float _1037 = (cbMatDynParam._m0[5u].x * _1031) + cbMatDynParam._m0[5u].y;
        float _3895 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1042 = (cbMatDynParam._m0[5u].z * _1031) + cbMatDynParam._m0[5u].w;
        float _3906 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) - _1038)) + _1038) < ((_877 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _888 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _889 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _907 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _910 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _913 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _926 = _257 + 9u;
    uint _927 = _926 + uint(cbMatDynParam._m0[0u].w);
    float _933 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_927].x;
    float _934 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_927].y;
    float _935 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_927].z;
    float _3917 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    vec4 _947 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _888, cbSceneParam._m0[86u].y * _889));
    float _951 = ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * TEXCOORD_5.w) * _947.x;
    float _952 = dot(vec3(_789, _790, _791), vec3(_868, _869, _870));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _789) - _868;
    float _960 = (_955 * _790) - _869;
    float _961 = (_955 * _791) - _870;
    float _965 = abs(dot(vec3(_868, _869, _870), vec3(_789, _790, _791)));
    float _3950 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_792);
    float _980 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1349;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1074 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1078 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1082 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1107 = _1012 + _789;
        float _1108 = _1016 + _790;
        float _1109 = _1020 + _791;
        float _1119 = fma(_1109, cbModelParam._m0[26u].z, fma(_1108, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1107)) - _1074;
        float _1120 = fma(_1109, cbModelParam._m0[27u].z, fma(_1108, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1107)) - _1078;
        float _1121 = fma(_1109, cbModelParam._m0[28u].z, fma(_1108, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1107)) - _1082;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1074 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1078 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[34u].z) + ((((((_1082 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1177 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1143.x + (-0.5));
        float _1179 = _1177 * (_1143.y + (-0.5));
        float _1180 = _1177 * (_1143.z + (-0.5));
        float _1187 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1150.x + (-0.5));
        float _1189 = _1187 * (_1150.y + (-0.5));
        float _1190 = _1187 * (_1150.z + (-0.5));
        float _1197 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1157.x + (-0.5));
        float _1199 = _1197 * (_1157.y + (-0.5));
        float _1200 = _1197 * (_1157.z + (-0.5));
        float _1207 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1164.x + (-0.5));
        float _1209 = _1207 * (_1164.y + (-0.5));
        float _1210 = _1207 * (_1164.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1231 = (dot(vec3(_789, _790, _791), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1241 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3998 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1243 + 1.0))) + _1248) * _1211;
        float _1258 = _1179 * 0.5;
        float _1259 = _1189 * 0.5;
        float _1260 = _1199 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_789, _790, _791), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4031 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1285 + 1.0))) + _1290) * _1212;
        float _1300 = _1180 * 0.5;
        float _1301 = _1190 * 0.5;
        float _1302 = _1200 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_789, _790, _791), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _4064 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1327 + 1.0))) + _1332) * _1213;
        _1349 = _1180;
        _1351 = _1179;
        _1352 = _1178;
        _1353 = _1190;
        _1354 = _1189;
        _1355 = _1188;
        _1356 = _1200;
        _1357 = _1199;
        _1358 = _1198;
        _1359 = _1213;
        _1360 = _1212;
        _1361 = _1211;
        _1362 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1350;
        _1351 = _1350;
        _1352 = _1350;
        _1353 = _1350;
        _1354 = _1350;
        _1355 = _1350;
        _1356 = _1350;
        _1357 = _1350;
        _1358 = _1350;
        _1359 = _1350;
        _1360 = _1350;
        _1361 = _1350;
        _1362 = 0.0;
        _1363 = 0.0;
        _1364 = 0.0;
    }
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1392 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1396 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1400 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1423 = _1012 + _789;
        float _1424 = _1016 + _790;
        float _1425 = _1020 + _791;
        float _1435 = fma(_1425, cbModelParam._m0[30u].z, fma(_1424, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1423)) - _1392;
        float _1436 = fma(_1425, cbModelParam._m0[31u].z, fma(_1424, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1423)) - _1396;
        float _1437 = fma(_1425, cbModelParam._m0[32u].z, fma(_1424, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1423)) - _1400;
        float _1441 = inversesqrt(dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437)));
        float _1454 = ((_1441 * _1435) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1392 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1455 = ((_1441 * _1436) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1396 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1441 * _1437) / cbModelParam._m0[35u].z) + ((((((_1400 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1454, _1455, _1456), 0.0);
        float _1491 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1458.x + (-0.5));
        float _1493 = _1491 * (_1458.y + (-0.5));
        float _1494 = _1491 * (_1458.z + (-0.5));
        float _1501 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1465.x + (-0.5));
        float _1503 = _1501 * (_1465.y + (-0.5));
        float _1504 = _1501 * (_1465.z + (-0.5));
        float _1511 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1512 = _1511 * (_1472.x + (-0.5));
        float _1513 = _1511 * (_1472.y + (-0.5));
        float _1514 = _1511 * (_1472.z + (-0.5));
        float _1521 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1479.x + (-0.5));
        float _1523 = _1521 * (_1479.y + (-0.5));
        float _1524 = _1521 * (_1479.z + (-0.5));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = _1492 * 0.5;
        float _1529 = _1502 * 0.5;
        float _1530 = _1512 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_789, _790, _791), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4127 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1555 + 1.0))) + _1560) * _1525;
        float _1570 = _1493 * 0.5;
        float _1571 = _1503 * 0.5;
        float _1572 = _1513 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_789, _790, _791), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4160 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1597 + 1.0))) + _1602) * _1526;
        float _1612 = _1494 * 0.5;
        float _1613 = _1504 * 0.5;
        float _1614 = _1514 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_789, _790, _791), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4193 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1639 + 1.0))) + _1644) * _1527;
        _1661 = _1494;
        _1662 = _1493;
        _1663 = _1492;
        _1664 = _1504;
        _1665 = _1503;
        _1666 = _1502;
        _1667 = _1514;
        _1668 = _1513;
        _1669 = _1512;
        _1670 = _1527;
        _1671 = _1526;
        _1672 = _1525;
        _1673 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1350;
        _1662 = _1350;
        _1663 = _1350;
        _1664 = _1350;
        _1665 = _1350;
        _1666 = _1350;
        _1667 = _1350;
        _1668 = _1350;
        _1669 = _1350;
        _1670 = _1350;
        _1671 = _1350;
        _1672 = _1350;
        _1673 = 0.0;
        _1674 = 0.0;
        _1675 = 0.0;
    }
    float _1685 = (cbModelParam._m0[1u].x * (_1673 - _1362)) + _1362;
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1708 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1711 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1714 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1685));
    float _1729 = _959 * 0.5;
    float _1730 = _960 * 0.5;
    float _1731 = _961 * 0.5;
    float _1732 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1735 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1738 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1661, _1664, _1667, _1670));
    float _1772;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1745 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1349, _1353, _1356, _1359));
        float _1749 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1351, _1354, _1357, _1360));
        float _1753 = dot(vec4(_1729, _1730, _1731, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1760 = dot(vec4(cbModelParam._m0[39u]), vec4(_1729, _1730, _1731, 1.0));
        _1772 = dot(vec3(isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1760) ? 0.0 : (isnan(0.0) ? _1760 : max(0.0, _1760))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1772 = 1.0;
    }
    float _1783;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1774 = dot(vec4(cbModelParam._m0[40u]), vec4(_1729, _1730, _1731, 1.0));
        _1783 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1783 = 1.0;
    }
    float _1787 = (_1783 * cbModelParam._m0[1u].x) + (_1772 * (1.0 - cbModelParam._m0[1u].x));
    float _1797 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1797 : min(cbModelParam._m0[25u].z, _1797));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1845 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1849 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1853 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1856 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1859 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1862 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1890;
        if (_1856 > 0.0)
        {
            _1890 = abs((1.0 - _1845) / _1856);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1845 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1890 = frontier_phi_17_15_ladder;
        }
        float _2111;
        if (_1859 > 0.0)
        {
            _2111 = abs((1.0 - _1849) / _1859);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1849 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2111 = frontier_phi_26_22_ladder;
        }
        float _2357;
        if (_1862 > 0.0)
        {
            _2357 = abs((1.0 - _1853) / _1862);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1853 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2357 = frontier_phi_38_33_ladder;
        }
        float _2359 = isnan(_2111) ? _1890 : (isnan(_1890) ? _2111 : min(_1890, _2111));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1856) + _1845;
        float _2365 = (_2360 * _1859) + _1849;
        float _2366 = (_2360 * _1862) + _1853;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2367;
        float _2371 = _2367 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 > _2371) || ((_2365 < _2369) || ((_2364 < _2369) || (_2364 > _2371))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1798);
            frontier_phi_16_38_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1878 = frontier_phi_16_38_ladder_2;
        _1880 = frontier_phi_16_38_ladder_1;
        _1882 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1798);
        _1878 = _1866.x * cbModelParam._m0[1u].y;
        _1880 = _1866.y * cbModelParam._m0[1u].y;
        _1882 = _1866.z * cbModelParam._m0[1u].y;
    }
    float _1886 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1887 = isnan(_1886) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1886 : min(cbModelParam._m0[25u].w, _1886));
    float _1976;
    float _1978;
    float _1980;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1940 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1944 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1948 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1951 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1954 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1957 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2116;
        if (_1951 > 0.0)
        {
            _2116 = abs((1.0 - _1940) / _1951);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1940 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2116 = frontier_phi_28_24_ladder;
        }
        float _2384;
        if (_1954 > 0.0)
        {
            _2384 = abs((1.0 - _1944) / _1954);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1944 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2384 = frontier_phi_40_35_ladder;
        }
        float _2589;
        if (_1957 > 0.0)
        {
            _2589 = abs((1.0 - _1948) / _1957);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1948 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2589 = frontier_phi_49_46_ladder;
        }
        float _2591 = isnan(_2384) ? _2116 : (isnan(_2116) ? _2384 : min(_2116, _2384));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1951) + _1940;
        float _2597 = (_2592 * _1954) + _1944;
        float _2598 = (_2592 * _1957) + _1948;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1887);
            frontier_phi_25_49_ladder = _2797.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2797.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2797.x * cbModelParam._m0[1u].z;
        }
        _1976 = frontier_phi_25_49_ladder_2;
        _1978 = frontier_phi_25_49_ladder_1;
        _1980 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1887);
        _1976 = _1960.x * cbModelParam._m0[1u].z;
        _1978 = _1960.y * cbModelParam._m0[1u].z;
        _1980 = _1960.z * cbModelParam._m0[1u].z;
    }
    float _1992 = ((((1.0 - _980) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_980 * _967)) * _951;
    float _1993 = _1992 * ((cbModelParam._m0[1u].w * (_1976 - _1878)) + _1878);
    float _1994 = _1992 * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1995 = _1992 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1998 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2001 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2004 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, _1993 * cbSceneParam._m0[91u].x));
    vec4 _2012 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_888, _889));
    float _2014 = _2012.w;
    float _2026 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2014);
    float _2027 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2014);
    float _2028 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2014);
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _951 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2070 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2074 = _2034 | 1u;
    float _2085 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_789, _790, _791));
    float _2088 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_789, _790, _791));
    float _4329 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _4340 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2093 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2095 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2102 = ((cbLight._m0[_2051].x * _2057) * _2095) + (((cbLight._m0[_2061].x * _2026) * _2070) * _2093);
    float _2103 = ((_2057 * cbLight._m0[_2051].y) * _2095) + (((cbLight._m0[_2061].y * _2027) * _2070) * _2093);
    float _2104 = ((_2057 * cbLight._m0[_2051].z) * _2095) + (((cbLight._m0[_2061].z * _2028) * _2070) * _2093);
    uvec4 _2108 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2110 = _2108.x == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2110)
    {
        _2121 = _2102;
        _2123 = _2103;
        _2125 = _2104;
    }
    else
    {
        uint _2129 = _2034 + 6u;
        float _2145 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4351 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2148 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2121 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _2102;
        _2123 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _2103;
        _2125 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _2104;
    }
    bool _2128 = _2108.y == 0u;
    float _2166;
    float _2168;
    float _2170;
    if (_2128)
    {
        _2166 = _2121;
        _2168 = _2123;
        _2170 = _2125;
    }
    else
    {
        uint _2328 = _2034 + 7u;
        float _2344 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4367 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2347 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2166 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2121;
        _2168 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2123;
        _2170 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2125;
    }
    uint _2173 = _2034 + 8u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _792) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_2034].x + _868;
    float _2189 = cbLight._m0[_2034].y + _869;
    float _2190 = cbLight._m0[_2034].z + _870;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2034].xyz));
    float _4383 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2202 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2203 = dot(vec3(_789, _790, _791), vec3(_2195, _2196, _2197));
    float _4405 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2195, _2196, _2197));
    float _4416 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2187 * _2187;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2227 = 1.0 - _2187;
    float _2238 = (0.5 / (((_2202 * ((_2201 * _2227) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2227) + _2187) * _2201))) * _2201;
    float _4427 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    uint _2254 = _2034 + 9u;
    float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _792) * 0.949999988079071044921875);
    float _2266 = _2265 * _2265;
    float _2267 = cbLight._m0[_2074].x + _868;
    float _2268 = cbLight._m0[_2074].y + _869;
    float _2269 = cbLight._m0[_2074].z + _870;
    float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
    float _2274 = _2273 * _2267;
    float _2275 = _2273 * _2268;
    float _2276 = _2273 * _2269;
    float _2277 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2074].xyz));
    float _4438 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2281 = dot(vec3(_789, _790, _791), vec3(_2274, _2275, _2276));
    float _4449 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2284 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2285 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2274, _2275, _2276));
    float _4460 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2289 = _2266 * _2266;
    float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
    float _2302 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2303 = 1.0 - _2266;
    float _2313 = (0.5 / (((_2202 * ((_2280 * _2303) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2303) + _2266) * _2280))) * _2280;
    float _4471 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2315 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
    float _2325 = (((_2302 * cbLight._m0[_2254].x) * _2315) * _2057) + ((((cbLight._m0[_2173].x * _2026) * _2226) * _2240) * _2070);
    float _2326 = (((_2302 * cbLight._m0[_2254].y) * _2315) * _2057) + ((((cbLight._m0[_2173].y * _2027) * _2226) * _2240) * _2070);
    float _2327 = (((_2302 * cbLight._m0[_2254].z) * _2315) * _2057) + ((((cbLight._m0[_2173].z * _2028) * _2226) * _2240) * _2070);
    float _2389;
    float _2391;
    float _2393;
    if (_2110)
    {
        _2389 = _2325;
        _2391 = _2326;
        _2393 = _2327;
    }
    else
    {
        uint _2395 = _2034 + 2u;
        uint _2399 = _2034 + 10u;
        float _2413 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _792) * 0.949999988079071044921875);
        float _2414 = _2413 * _2413;
        float _2415 = cbLight._m0[_2395].x + _868;
        float _2416 = cbLight._m0[_2395].y + _869;
        float _2417 = cbLight._m0[_2395].z + _870;
        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
        float _2422 = _2421 * _2415;
        float _2423 = _2421 * _2416;
        float _2424 = _2421 * _2417;
        float _2425 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2395].xyz));
        float _4482 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2429 = dot(vec3(_789, _790, _791), vec3(_2422, _2423, _2424));
        float _4493 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2432 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2433 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2422, _2423, _2424));
        float _4504 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2437 = _2414 * _2414;
        float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
        float _2450 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2451 = 1.0 - _2414;
        float _2461 = (0.5 / (((_2202 * ((_2428 * _2451) + _2414)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2451) + _2414) * _2428))) * _2428;
        float _4515 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2389 = (((_2450 * cbLight._m0[_2399].x) * _2463) * _2464) + _2325;
        _2391 = (((_2450 * cbLight._m0[_2399].y) * _2463) * _2464) + _2326;
        _2393 = (((_2450 * cbLight._m0[_2399].z) * _2463) * _2464) + _2327;
    }
    float _2499;
    float _2501;
    float _2503;
    if (_2128)
    {
        _2499 = _2389;
        _2501 = _2391;
        _2503 = _2393;
    }
    else
    {
        uint _2510 = _2034 + 3u;
        uint _2514 = _2034 + 11u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _792) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _868;
        float _2531 = cbLight._m0[_2510].y + _869;
        float _2532 = cbLight._m0[_2510].z + _870;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2510].xyz));
        float _4531 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2544 = dot(vec3(_789, _790, _791), vec3(_2537, _2538, _2539));
        float _4542 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4553 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2566 = 1.0 - _2529;
        float _2576 = (0.5 / (((_2202 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2202 * _2566) + _2529) * _2543))) * _2543;
        float _4564 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2499 = (((_2565 * cbLight._m0[_2514].x) * _2578) * _2579) + _2389;
        _2501 = (((_2565 * cbLight._m0[_2514].y) * _2578) * _2579) + _2391;
        _2503 = (((_2565 * cbLight._m0[_2514].z) * _2578) * _2579) + _2393;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2032.y == 0u)
    {
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2654;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2654;
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2654;
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _889) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _888) / _2670)));
        float _2691 = (log2(_2657 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
        }
        else
        {
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            float _2957 = 0.0;
            float _2958 = 0.0;
            float _2959 = 0.0;
            uint _2960 = 0u;
            uint _2969;
            bool _2970;
            for (;;)
            {
                _2969 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_2960 << 2u)) >> 2u)).x;
                _2970 = _2969 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2970)
                {
                    frontier_phi_66_pred = _2954;
                    frontier_phi_66_pred_1 = _2959;
                    frontier_phi_66_pred_2 = _2958;
                    frontier_phi_66_pred_3 = _2957;
                    frontier_phi_66_pred_4 = _2956;
                    frontier_phi_66_pred_5 = _2955;
                }
                else
                {
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    uint _3105;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2957;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2969;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3109 = uint(findLSB(_3105)) + (_2960 << 5u);
                        uint _3106 = (_3105 + 4294967295u) & _3105;
                        uint _3111 = _3109 * 48u;
                        vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3111)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3111 + 3u)).x));
                        uint _3131 = (_3109 * 48u) + 4u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3131)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3131 + 3u)).x));
                        uint _3150 = (_3109 * 48u) + 8u;
                        vec3 _3161 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x));
                        float _3165 = _3125.x - _2655;
                        float _3166 = _3125.y - _2656;
                        float _3167 = _3125.z - _2657;
                        float _3168 = dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167));
                        float _3171 = inversesqrt(_3168);
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3175 = dot(vec3(_907, _910, _913), vec3(_3172, _3173, _3174));
                        float _3180 = 1.0 - (_3168 * _3125.w);
                        float _4590 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                        float _3181 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3182 = sqrt(_3168) * _3144.w;
                        float _3185 = 1.39999997615814208984375 / (_3182 + 1.39999997615814208984375);
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3175) + _3186;
                        float _3192 = _3182 * _3182;
                        float _3196 = ((isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0))) * _3181) / ((_3192 * 0.699999988079071044921875) + 1.0);
                        float _3200 = (-0.0) - _2655;
                        float _3201 = (-0.0) - _2656;
                        float _3202 = (-0.0) - _2657;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3207 = _3206 * _3200;
                        float _3208 = _3206 * _3201;
                        float _3209 = _3206 * _3202;
                        float _3217 = exp2(log2(1.0 / ((_3192 * 3.5) + 5.0)) * 0.25);
                        float _3218 = 1.0 - _967;
                        float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                        float _3226 = _3225 * _3225;
                        float _3227 = _3226 * _3226;
                        float _3228 = _3207 + _3172;
                        float _3229 = _3208 + _3173;
                        float _3230 = _3209 + _3174;
                        float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                        float _3238 = dot(vec3(_907, _910, _913), vec3(_3207, _3208, _3209));
                        float _4606 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3242 = dot(vec3(_907, _910, _913), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                        float _4617 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                        float _3250 = _3185 * _3226;
                        float _3251 = _3250 * _3250;
                        float _3254 = ((1.0 - _3251) * _3175) + _3251;
                        float _4628 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3256 = 1.0 - _3226;
                        float _3266 = (0.5 / (((_3255 * ((_3241 * _3256) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3255 * _3256) + _3226) * _3241))) * _3255;
                        float _4639 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3277 = (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3249 * _3249) * ((_3192 * 2.1991131305694580078125) + 3.141590118408203125))) * _3181;
                        _3029 = (_3196 * _3144.x) + _3102;
                        _3030 = (_3196 * _3144.y) + _3103;
                        _3031 = (_3196 * _3144.z) + _3104;
                        _3026 = (_3277 * _3161.x) + _3099;
                        _3027 = (_3277 * _3161.y) + _3100;
                        _3028 = (_3277 * _3161.z) + _3101;
                        if (_3106 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3029;
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3106;
                        }
                    }
                    frontier_phi_66_pred = _3026;
                    frontier_phi_66_pred_1 = _3031;
                    frontier_phi_66_pred_2 = _3030;
                    frontier_phi_66_pred_3 = _3029;
                    frontier_phi_66_pred_4 = _3028;
                    frontier_phi_66_pred_5 = _3027;
                }
                _2803 = frontier_phi_66_pred;
                _2813 = frontier_phi_66_pred_1;
                _2811 = frontier_phi_66_pred_2;
                _2809 = frontier_phi_66_pred_3;
                _2807 = frontier_phi_66_pred_4;
                _2805 = frontier_phi_66_pred_5;
                uint _2961 = _2960 + 1u;
                if (_2961 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2954 = _2803;
                    _2955 = _2805;
                    _2956 = _2807;
                    _2957 = _2809;
                    _2958 = _2811;
                    _2959 = _2813;
                    _2960 = _2961;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
        }
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.z;
        uint _2819 = (_2817 >> 8u) & 15u;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((4294967295u << _2819) & _2701) == 0u)
        {
            _2922 = _2802;
            _2924 = _2804;
            _2926 = _2806;
            _2928 = _2808;
            _2930 = _2810;
            _2932 = _2812;
        }
        else
        {
            float _2947 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
            float _2948 = _2947 * _2655;
            float _2949 = _2947 * _2656;
            float _2950 = _2947 * _2657;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2819 < ((_2817 >> 12u) & 15u))
            {
                float _2923;
                float _2925;
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _3082 = _2802;
                float _3083 = _2804;
                float _3084 = _2806;
                float _3085 = _2808;
                float _3086 = _2810;
                float _3087 = _2812;
                uint _3088 = _2819;
                uint _3097;
                bool _3098;
                for (;;)
                {
                    _3097 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3088 << 2u)) >> 2u)).x;
                    _3098 = _3097 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3098)
                    {
                        frontier_phi_77_pred = _3087;
                        frontier_phi_77_pred_1 = _3086;
                        frontier_phi_77_pred_2 = _3085;
                        frontier_phi_77_pred_3 = _3084;
                        frontier_phi_77_pred_4 = _3083;
                        frontier_phi_77_pred_5 = _3082;
                    }
                    else
                    {
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        float _3307 = _3085;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        uint _3310 = _3097;
                        uint _3311;
                        vec4 _3336;
                        float _3337;
                        vec4 _3352;
                        vec3 _3364;
                        vec4 _3379;
                        vec4 _3394;
                        float _3440;
                        bool _3441;
                        for (;;)
                        {
                            uint _3321 = ((_3088 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3310));
                            _3311 = (_3310 + 4294967295u) & _3310;
                            uint _3323 = _3321 * 40u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3337 = _3336.w;
                            uint _3339 = (_3321 * 40u) + 4u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3354 = (_3321 * 40u) + 8u;
                            _3364 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x));
                            uint _3366 = (_3321 * 40u) + 16u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3381 = (_3321 * 40u) + 20u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3321 * 40u) + 24u;
                            vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3415 = (_3321 * 40u) + 28u;
                            vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            _3440 = fma(_2657, _3428.z, fma(_2656, _3428.y, _3428.x * _2655)) + _3428.w;
                            _3441 = !((fma(_2657, _3409.z, fma(_2656, _3409.y, _3409.x * _2655)) + _3409.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3441)
                            {
                                float _3468 = _3336.x - _2655;
                                float _3469 = _3336.y - _2656;
                                float _3470 = _3336.z - _2657;
                                float _3471 = dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470));
                                float _3474 = inversesqrt(_3471);
                                float _3475 = _3474 * _3468;
                                float _3476 = _3474 * _3469;
                                float _3477 = _3474 * _3470;
                                float _3481 = 1.0 - (_3471 / (_3337 * _3337));
                                float _4650 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3486 = sqrt(_3471) * _3352.w;
                                float _3488 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                                float _3489 = _3488 * _3488;
                                float _3492 = ((1.0 - _3489) * dot(vec3(_3475, _3476, _3477), vec3(_907, _910, _913))) + _3489;
                                float _3495 = _3486 * _3486;
                                float _3499 = (fma(_2657, _3379.z, fma(_2656, _3379.y, _3379.x * _2655)) + _3379.w) / _3440;
                                float _3500 = (fma(_2657, _3394.z, fma(_2656, _3394.y, _3394.x * _2655)) + _3394.w) / _3440;
                                float _3504 = 1.0 - dot(vec2(_3499, _3500), vec2(_3499, _3500));
                                float _4666 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3506 = _3505 * (((isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0))) * _3482) / ((_3495 * 0.699999988079071044921875) + 1.0));
                                float _3518 = exp2(log2(1.0 / ((_3495 * 3.5) + 5.0)) * 0.25);
                                float _3519 = 1.0 - _967;
                                float _3526 = sqrt(1.0 - ((1.0 - (_3519 * _3519)) * (1.0 - (_3518 * _3518))));
                                float _3527 = _3526 * _3526;
                                float _3528 = _3527 * _3527;
                                float _3529 = _3475 - _2948;
                                float _3530 = _3476 - _2949;
                                float _3531 = _3477 - _2950;
                                float _3535 = inversesqrt(dot(vec3(_3529, _3530, _3531), vec3(_3529, _3530, _3531)));
                                float _3539 = dot(vec3(_907, _910, _913), vec3((-0.0) - _2948, (-0.0) - _2949, (-0.0) - _2950));
                                float _4677 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3542 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3543 = dot(vec3(_907, _910, _913), vec3(_3535 * _3529, _3535 * _3530, _3535 * _3531));
                                float _4688 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3550 = ((_3546 * _3546) * (_3528 + (-1.0))) + 1.0;
                                float _3551 = _3488 * _3527;
                                float _3552 = _3551 * _3551;
                                float _3558 = ((1.0 - _3552) * dot(vec3(_907, _910, _913), vec3(_3475, _3476, _3477))) + _3552;
                                float _4699 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3559 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3560 = 1.0 - _3527;
                                float _3570 = (0.5 / (((_3559 * ((_3542 * _3560) + _3527)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3527) * _3542))) * _3559;
                                float _4710 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3580 = (_3505 * _3482) * (((_3528 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3550 * _3550) * ((_3495 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3506 * _3352.y;
                                frontier_phi_83_pred_1 = _3506 * _3352.x;
                                frontier_phi_83_pred_2 = _3580 * _3364.z;
                                frontier_phi_83_pred_3 = _3580 * _3364.y;
                                frontier_phi_83_pred_4 = _3580 * _3364.x;
                                frontier_phi_83_pred_5 = _3506 * _3352.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3588 = frontier_phi_83_pred;
                            _3587 = frontier_phi_83_pred_1;
                            _3586 = frontier_phi_83_pred_2;
                            _3585 = frontier_phi_83_pred_3;
                            _3584 = frontier_phi_83_pred_4;
                            _3589 = frontier_phi_83_pred_5;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            _3293 = _3586 + _3306;
                            if (_3311 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3311;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3296;
                        frontier_phi_77_pred_1 = _3295;
                        frontier_phi_77_pred_2 = _3294;
                        frontier_phi_77_pred_3 = _3293;
                        frontier_phi_77_pred_4 = _3292;
                        frontier_phi_77_pred_5 = _3291;
                    }
                    _2933 = frontier_phi_77_pred;
                    _2931 = frontier_phi_77_pred_1;
                    _2929 = frontier_phi_77_pred_2;
                    _2927 = frontier_phi_77_pred_3;
                    _2925 = frontier_phi_77_pred_4;
                    _2923 = frontier_phi_77_pred_5;
                    uint _3089 = _3088 + 1u;
                    if (_3089 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3082 = _2923;
                        _3083 = _2925;
                        _3084 = _2927;
                        _3085 = _2929;
                        _3086 = _2931;
                        _3087 = _2933;
                        _3088 = _3089;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2927;
                frontier_phi_58_59_ladder_1 = _2933;
                frontier_phi_58_59_ladder_2 = _2931;
                frontier_phi_58_59_ladder_3 = _2929;
                frontier_phi_58_59_ladder_4 = _2925;
                frontier_phi_58_59_ladder_5 = _2923;
            }
            else
            {
                frontier_phi_58_59_ladder = _2806;
                frontier_phi_58_59_ladder_1 = _2812;
                frontier_phi_58_59_ladder_2 = _2810;
                frontier_phi_58_59_ladder_3 = _2808;
                frontier_phi_58_59_ladder_4 = _2804;
                frontier_phi_58_59_ladder_5 = _2802;
            }
            _2922 = frontier_phi_58_59_ladder_5;
            _2924 = frontier_phi_58_59_ladder_4;
            _2926 = frontier_phi_58_59_ladder;
            _2928 = frontier_phi_58_59_ladder_3;
            _2930 = frontier_phi_58_59_ladder_2;
            _2932 = frontier_phi_58_59_ladder_1;
        }
        float _2937 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2714 = (_2937 * _2928) + _2166;
        _2716 = (_2937 * _2930) + _2168;
        _2718 = (_2937 * _2932) + _2170;
        _2720 = ((_2922 * 0.039999999105930328369140625) * _2937) + _2499;
        _2722 = ((_2924 * 0.039999999105930328369140625) * _2937) + _2501;
        _2724 = ((_2926 * 0.039999999105930328369140625) * _2937) + _2503;
    }
    else
    {
        _2714 = _2166;
        _2716 = _2168;
        _2718 = _2170;
        _2720 = _2499;
        _2722 = _2501;
        _2724 = _2503;
    }
    float _4726 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4737 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4748 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2741 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2714 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _951))) + ((_2720 + ((isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _2742 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2716 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _951))) + ((_2722 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    float _2743 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2718 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _951))) + ((_2724 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1787)) * cbPerFrame._m0[3u].x);
    uint _2744 = _257 + 6u;
    float _2752 = _888 / cbSceneParam._m0[86u].x;
    float _2753 = _889 / cbSceneParam._m0[86u].y;
    vec4 _2767 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2769 = _2767.x;
    float _2770 = _2767.y;
    float _2771 = _2767.z;
    float _2772 = _2767.w;
    float _2864;
    float _2866;
    float _2868;
    float _2870;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2827 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2828 = _2827 / _810;
        float _2839 = _2828 * _861;
        float _2840 = _862 * _2828;
        float _2841 = (-0.0) - _2840;
        float _2842 = _2828 * _863;
        float _2844 = (cbSceneParam._m0[77u].w * _2841) / _2827;
        float _2845 = _2844 + cbSceneParam._m0[79u].w;
        float _2846 = cbSceneParam._m0[79u].w - _2840;
        float _2852 = sqrt(((_2839 * _2839) + (_2840 * _2840)) + (_2842 * _2842));
        float _2855 = (1.0 - (cbSceneParam._m0[77u].w / _2827)) * _2852;
        float _2860 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2862 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2841 - _2844) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2845 > 0.0) ? exp2(_2860 * _2845) : (2.0 - exp2(_2862 * _2845))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2855;
        }
        else
        {
            float _2983 = 1.0 / cbSceneParam._m0[80u].x;
            float _2984 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : max(_2845, _2846));
            float _2985 = isnan(_2846) ? _2845 : (isnan(_2845) ? _2846 : min(_2845, _2846));
            float _2994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : min(_2984, 0.0));
            float _2995 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : min(_2985, 0.0));
            _3039 = ((abs(_2852 / _2841) * cbSceneParam._m0[80u].y) * ((((_2994 - _2995) * 2.0) - ((exp2(_2860 * (isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0)))) - exp2(_2860 * (isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0))))) * _2983)) - ((exp2(_2862 * _2994) - exp2(_2862 * _2995)) * _2983))) + (_2855 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2772);
        _2864 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2769;
        _2866 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2770;
        _2868 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2771;
        _2870 = _3050 * _2772;
    }
    else
    {
        _2864 = _2769;
        _2866 = _2770;
        _2868 = _2771;
        _2870 = _2772;
    }
    bool _3077;
    vec4 _2880;
    vec4 _2902;
    float _2904;
    float _2908;
    float _2909;
    float _2910;
    float _2911;
    bool _2921;
    for (;;)
    {
        _2880 = cbMatDynParam._m0[0u];
        float _2882 = roundEven(_2880.y);
        bool _2883 = _2882 == 3.0;
        float _2884 = log2(_2870);
        float _2891 = exp2(_2884 * cbSceneParam._m0[78u].x) * _2741;
        float _2892 = exp2(_2884 * cbSceneParam._m0[78u].y) * _2742;
        float _2893 = exp2(_2884 * cbSceneParam._m0[78u].z) * _2743;
        float _2900 = _877 + (-0.5);
        _2902 = cbMtdParam._m0[1u];
        _2904 = _2902.y * _2900;
        float _2907 = (_2882 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2908 = _2907 * (_2883 ? _2891 : (_2891 + (cbSceneParam._m0[72u].w * _2864)));
        _2909 = _2907 * (_2883 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2866)));
        _2910 = _2907 * (_2883 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2868)));
        _2911 = _2900 * 0.999000012874603271484375;
        _2921 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2921)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2911) < 0.5)
            {
                _3077 = true;
                break;
            }
        }
        uint _3018 = _926 + uint(_2880.w);
        if ((cbInstanceData._m0[_3018].w < 1.0) && ((cbInstanceData._m0[_3018].w + _2911) < 0.5))
        {
            _3077 = true;
            break;
        }
        if ((_2904 + 1.0) < _2902.x)
        {
            _3077 = true;
            break;
        }
        _3077 = false;
        break;
    }
    float _3282;
    if (_3077)
    {
        discard_state = true;
        _3282 = 0.0;
    }
    else
    {
        _3282 = cbInstanceData._m0[_2744].w;
    }
    SV_Target.x = _2908;
    SV_Target.y = _2909;
    SV_Target.z = _2910;
    SV_Target.w = _3282;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2744].w;
    discard_exit();
}


