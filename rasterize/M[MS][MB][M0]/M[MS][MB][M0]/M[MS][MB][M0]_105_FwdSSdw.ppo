#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1238;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3568 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _435 = ((_405.z - _426) * _378) + _426;
    float _438 = ((((_405.x - _424) * _378) + _424) * 2.0) + (-1.0);
    float _440 = ((((_405.y - _425) * _378) + _425) * 2.0) + (-1.0);
    float _441 = dot(vec2(_438, _440), vec2(_438, _440));
    float _3579 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _446 = sqrt(1.0 - (isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))));
    vec4 _462 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _474 = (((_462.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _438;
    float _475 = (((_462.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _440;
    float _478 = fma(_446, _231, fma(_475, _238, _474 * _224));
    float _481 = fma(_446, _232, fma(_475, _239, _474 * _225));
    float _484 = fma(_446, _233, fma(_475, _240, _474 * _226));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _519 = _517.x;
    float _520 = 1.0 - _519;
    float _526 = (cbMtdParam._m0[19u].x + dot(vec4(_488 * _478, _488 * _481, _488 * _484, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_519 - _520) * cbMtdParam._m0[24u].z) + _520) * cbMtdParam._m0[21u].z);
    float _3590 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _527 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _529 = (-0.0) - cbMtdParam._m0[24u].y;
    float _531 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _532 = isnan(1.0) ? _531 : (isnan(_531) ? 1.0 : min(_531, 1.0));
    float _539 = _527 - ((_527 * TEXCOORD_8.x) * _532);
    float _540 = _527 - ((_527 * TEXCOORD_8.y) * _532);
    float _541 = _527 - ((_527 * TEXCOORD_8.z) * _532);
    float _548 = (_539 * (cbMtdParam._m0[17u].x - _385)) + _385;
    float _549 = (_540 * (cbMtdParam._m0[17u].y - _386)) + _386;
    float _550 = (_541 * (cbMtdParam._m0[17u].z - _387)) + _387;
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _593 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_564 - _565) * cbMtdParam._m0[24u].w) + _565) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3611 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _602 = ((((cbMtdParam._m0[10u].x - _548) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _594) + _548;
    float _603 = ((((cbMtdParam._m0[10u].y - _549) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _594) + _549;
    float _604 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _550)) * _594) + _550;
    float _608 = (cbMtdParam._m0[19u].w * (_462.z - _435)) + _435;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3622 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _639 = ((_622.z - _608) * _539) + _608;
    float _642 = ((cbMtdParam._m0[23u].y - _639) * _594) + _639;
    vec4 _661 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _667 = (_661.x * 2.0) + (-1.0);
    float _668 = (_661.y * 2.0) + (-1.0);
    float _669 = dot(vec2(_667, _668), vec2(_667, _668));
    float _3633 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _684 = ((sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) - _446) * _541) + _446;
    float _687 = (((_629 - _474) * _539) + _474) + (cbMtdParam._m0[21u].x * _474);
    float _688 = (((_630 - _475) * _540) + _475) + (cbMtdParam._m0[21u].x * _475);
    float _699 = (((_667 - _687) + (_687 * cbMtdParam._m0[22u].z)) * _594) + _687;
    float _700 = (((_668 - _688) + (_688 * cbMtdParam._m0[22u].z)) * _594) + _688;
    float _701 = (_594 * (sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) - _684)) + _684;
    float _703 = cbMtdParam._m0[22u].x + _462.w;
    float _706 = fma(_701, _231, fma(_700, _238, _699 * _224));
    float _709 = fma(_701, _232, fma(_700, _239, _699 * _225));
    float _712 = fma(_701, _233, fma(_700, _240, _699 * _226));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    float _717 = _716 * _706;
    float _718 = _716 * _709;
    float _719 = _716 * _712;
    float _3644 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _720 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3666 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3677 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3688 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _738 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _789 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _779);
    float _790 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _779);
    float _791 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _779);
    float _795 = inversesqrt(dot(vec3(_789, _790, _791), vec3(_789, _790, _791)));
    float _796 = _789 * _795;
    float _797 = _790 * _795;
    float _798 = _791 * _795;
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_719, cbSceneParam._m0[5u].z, fma(_718, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _717));
    float _826 = fma(_719, cbSceneParam._m0[6u].z, fma(_718, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _717));
    float _829 = fma(_719, cbSceneParam._m0[7u].z, fma(_718, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _717));
    uint _843 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3699 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _867 = ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * TEXCOORD_5.w) * _863.x;
    float _868 = dot(vec3(_717, _718, _719), vec3(_796, _797, _798));
    float _871 = _868 * 2.0;
    float _875 = (_871 * _717) - _796;
    float _876 = (_871 * _718) - _797;
    float _877 = (_871 * _719) - _798;
    float _881 = abs(dot(vec3(_796, _797, _798), vec3(_717, _718, _719)));
    float _3732 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _883 = sqrt(_720);
    float _896 = exp2((_883 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_883 * 3.0));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1237;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _962 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _966 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _970 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _995 = _928 + _717;
        float _996 = _932 + _718;
        float _997 = _936 + _719;
        float _1007 = fma(_997, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995)) - _962;
        float _1008 = fma(_997, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995)) - _966;
        float _1009 = fma(_997, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995)) - _970;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_962 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_966 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[34u].z) + ((((((_970 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1065 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1031.x + (-0.5));
        float _1067 = _1065 * (_1031.y + (-0.5));
        float _1068 = _1065 * (_1031.z + (-0.5));
        float _1075 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1038.x + (-0.5));
        float _1077 = _1075 * (_1038.y + (-0.5));
        float _1078 = _1075 * (_1038.z + (-0.5));
        float _1085 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1045.x + (-0.5));
        float _1087 = _1085 * (_1045.y + (-0.5));
        float _1088 = _1085 * (_1045.z + (-0.5));
        float _1095 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1052.x + (-0.5));
        float _1097 = _1095 * (_1052.y + (-0.5));
        float _1098 = _1095 * (_1052.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1119 = (dot(vec3(_717, _718, _719), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1129 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3780 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1131 + 1.0))) + _1136) * _1099;
        float _1146 = _1067 * 0.5;
        float _1147 = _1077 * 0.5;
        float _1148 = _1087 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_717, _718, _719), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3813 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1173 + 1.0))) + _1178) * _1100;
        float _1188 = _1068 * 0.5;
        float _1189 = _1078 * 0.5;
        float _1190 = _1088 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_717, _718, _719), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3846 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1215 + 1.0))) + _1220) * _1101;
        _1237 = _1068;
        _1239 = _1067;
        _1240 = _1066;
        _1241 = _1078;
        _1242 = _1077;
        _1243 = _1076;
        _1244 = _1088;
        _1245 = _1087;
        _1246 = _1086;
        _1247 = _1101;
        _1248 = _1100;
        _1249 = _1099;
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _1238;
        _1239 = _1238;
        _1240 = _1238;
        _1241 = _1238;
        _1242 = _1238;
        _1243 = _1238;
        _1244 = _1238;
        _1245 = _1238;
        _1246 = _1238;
        _1247 = _1238;
        _1248 = _1238;
        _1249 = _1238;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1281 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1285 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1308 = _928 + _717;
        float _1309 = _932 + _718;
        float _1310 = _936 + _719;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_717, _718, _719), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _3909 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_717, _718, _719), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _3942 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_717, _718, _719), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _3975 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1238;
        _1547 = _1238;
        _1548 = _1238;
        _1549 = _1238;
        _1550 = _1238;
        _1551 = _1238;
        _1552 = _1238;
        _1553 = _1238;
        _1554 = _1238;
        _1555 = _1238;
        _1556 = _1238;
        _1557 = _1238;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1250)) + _1250;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1251)) + _1251;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1252)) + _1252;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _875 * 0.5;
    float _1615 = _876 * 0.5;
    float _1616 = _877 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1237, _1241, _1244, _1247));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _720);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1731 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1735 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1739 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1742 = fma(_877, cbModelParam._m0[13u].z, fma(_876, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875));
        float _1745 = fma(_877, cbModelParam._m0[14u].z, fma(_876, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875));
        float _1748 = fma(_877, cbModelParam._m0[15u].z, fma(_876, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875));
        float _1776;
        if (_1742 > 0.0)
        {
            _1776 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1776 = frontier_phi_14_12_ladder;
        }
        float _1998;
        if (_1745 > 0.0)
        {
            _1998 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1998 = frontier_phi_23_19_ladder;
        }
        float _2244;
        if (_1748 > 0.0)
        {
            _2244 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2244 = frontier_phi_35_30_ladder;
        }
        float _2246 = isnan(_1998) ? _1776 : (isnan(_1776) ? _1998 : min(_1776, _1998));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1742) + _1731;
        float _2252 = (_2247 * _1745) + _1735;
        float _2253 = (_2247 * _1748) + _1739;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_13_35_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1764 = frontier_phi_13_35_ladder_2;
        _1766 = frontier_phi_13_35_ladder_1;
        _1768 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_875, _876, _877), _1683);
        _1764 = _1752.x * cbModelParam._m0[1u].y;
        _1766 = _1752.y * cbModelParam._m0[1u].y;
        _1768 = _1752.z * cbModelParam._m0[1u].y;
    }
    float _1772 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _720);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1772 : min(cbModelParam._m0[25u].w, _1772));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_877, cbModelParam._m0[21u].z, fma(_876, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875));
        float _1841 = fma(_877, cbModelParam._m0[22u].z, fma(_876, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875));
        float _1844 = fma(_877, cbModelParam._m0[23u].z, fma(_876, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875));
        float _2003;
        if (_1838 > 0.0)
        {
            _2003 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2003 = frontier_phi_25_21_ladder;
        }
        float _2271;
        if (_1841 > 0.0)
        {
            _2271 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2271 = frontier_phi_37_32_ladder;
        }
        float _2476;
        if (_1844 > 0.0)
        {
            _2476 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2476 = frontier_phi_46_43_ladder;
        }
        float _2478 = isnan(_2271) ? _2003 : (isnan(_2003) ? _2271 : min(_2003, _2271));
        float _2479 = isnan(_2476) ? _2478 : (isnan(_2478) ? _2476 : min(_2478, _2476));
        float _2483 = (_2479 * _1838) + _1827;
        float _2484 = (_2479 * _1841) + _1831;
        float _2485 = (_2479 * _1844) + _1835;
        float _2486 = _2479 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2486;
        float _2489 = _2486 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2485 > _2489) || ((_2485 < _2487) || ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 < _2487) || (_2483 > _2489))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2485, cbModelParam._m0[17u].z, fma(_2484, cbModelParam._m0[17u].y, _2483 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2485, cbModelParam._m0[18u].z, fma(_2484, cbModelParam._m0[18u].y, _2483 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2485, cbModelParam._m0[19u].z, fma(_2484, cbModelParam._m0[19u].y, _2483 * cbModelParam._m0[19u].x))), _1773);
            frontier_phi_22_46_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_22_46_ladder_2;
        _1865 = frontier_phi_22_46_ladder_1;
        _1867 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_875, _876, _877), _1773);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1879 = ((((1.0 - _896) * ((_883 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_896 * _883)) * _867;
    float _1880 = _1879 * ((cbModelParam._m0[1u].w * (_1863 - _1764)) + _1764);
    float _1881 = _1879 * ((cbModelParam._m0[1u].w * (_1865 - _1766)) + _1766);
    float _1882 = _1879 * ((cbModelParam._m0[1u].w * (_1867 - _1768)) + _1768);
    float _1885 = fma(_1882, cbSceneParam._m0[89u].z, fma(_1881, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1882, cbSceneParam._m0[90u].z, fma(_1881, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1882, cbSceneParam._m0[91u].z, fma(_1881, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    vec4 _1899 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_804, _805));
    float _1901 = _1899.w;
    float _1913 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1901);
    float _1914 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1901);
    float _1915 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1901);
    uvec4 _1919 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1921 = _1919.x * 14u;
    uint _1922 = _1921 + 13u;
    float _1929 = _867 + (-1.0);
    float _1934 = (cbLight._m0[_1922].x * _1929) + 1.0;
    float _1935 = (cbLight._m0[_1922].y * _1929) + 1.0;
    float _1936 = (cbLight._m0[_1922].z * _1929) + 1.0;
    float _1937 = (cbLight._m0[_1922].w * _1929) + 1.0;
    uint _1938 = _1921 + 5u;
    float _1944 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1948 = _1921 + 4u;
    float _1957 = isnan(1.0) ? _1934 : (isnan(_1934) ? 1.0 : min(_1934, 1.0));
    uint _1961 = _1921 | 1u;
    float _1972 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_717, _718, _719));
    float _1975 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_717, _718, _719));
    float _4111 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _4122 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1980 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1982 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _1989 = ((cbLight._m0[_1938].x * _1944) * _1982) + (((cbLight._m0[_1948].x * _1913) * _1957) * _1980);
    float _1990 = ((_1944 * cbLight._m0[_1938].y) * _1982) + (((cbLight._m0[_1948].y * _1914) * _1957) * _1980);
    float _1991 = ((_1944 * cbLight._m0[_1938].z) * _1982) + (((cbLight._m0[_1948].z * _1915) * _1957) * _1980);
    uvec4 _1995 = floatBitsToUint(cbLight._m0[_1921 + 12u]);
    bool _1997 = _1995.x == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1997)
    {
        _2008 = _1989;
        _2010 = _1990;
        _2012 = _1991;
    }
    else
    {
        uint _2016 = _1921 + 6u;
        float _2032 = (dot(vec3(cbLight._m0[_1921 + 2u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _4133 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2035 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2008 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1989;
        _2010 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1990;
        _2012 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1991;
    }
    bool _2015 = _1995.y == 0u;
    float _2053;
    float _2055;
    float _2057;
    if (_2015)
    {
        _2053 = _2008;
        _2055 = _2010;
        _2057 = _2012;
    }
    else
    {
        uint _2215 = _1921 + 7u;
        float _2231 = (dot(vec3(cbLight._m0[_1921 + 3u].xyz), vec3(_717, _718, _719)) * 0.5) + 0.5;
        float _2232 = _2231 * _2231;
        float _4149 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
        float _2233 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2234 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2053 = (((cbLight._m0[_2215].x * 0.3183098733425140380859375) * _2233) * _2234) + _2008;
        _2055 = (((cbLight._m0[_2215].y * 0.3183098733425140380859375) * _2233) * _2234) + _2010;
        _2057 = (((cbLight._m0[_2215].z * 0.3183098733425140380859375) * _2233) * _2234) + _2012;
    }
    uint _2060 = _1921 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _720) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1921].x + _796;
    float _2076 = cbLight._m0[_1921].y + _797;
    float _2077 = cbLight._m0[_1921].z + _798;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_1921].xyz));
    float _4165 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2089 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2090 = dot(vec3(_717, _718, _719), vec3(_2082, _2083, _2084));
    float _4187 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2082, _2083, _2084));
    float _4198 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2114 = 1.0 - _2074;
    float _2125 = (0.5 / (((_2089 * ((_2088 * _2114) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2114) + _2074) * _2088))) * _2088;
    float _4209 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2127 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2141 = _1921 + 9u;
    float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _720) * 0.949999988079071044921875);
    float _2153 = _2152 * _2152;
    float _2154 = cbLight._m0[_1961].x + _796;
    float _2155 = cbLight._m0[_1961].y + _797;
    float _2156 = cbLight._m0[_1961].z + _798;
    float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
    float _2161 = _2160 * _2154;
    float _2162 = _2160 * _2155;
    float _2163 = _2160 * _2156;
    float _2164 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_1961].xyz));
    float _4220 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2167 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2168 = dot(vec3(_717, _718, _719), vec3(_2161, _2162, _2163));
    float _4231 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2172 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2161, _2162, _2163));
    float _4242 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2176 = _2153 * _2153;
    float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
    float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2190 = 1.0 - _2153;
    float _2200 = (0.5 / (((_2089 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2190) + _2153) * _2167))) * _2167;
    float _4253 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
    float _2212 = (((_2189 * cbLight._m0[_2141].x) * _2202) * _1944) + ((((cbLight._m0[_2060].x * _1913) * _2113) * _2127) * _1957);
    float _2213 = (((_2189 * cbLight._m0[_2141].y) * _2202) * _1944) + ((((cbLight._m0[_2060].y * _1914) * _2113) * _2127) * _1957);
    float _2214 = (((_2189 * cbLight._m0[_2141].z) * _2202) * _1944) + ((((cbLight._m0[_2060].z * _1915) * _2113) * _2127) * _1957);
    float _2276;
    float _2278;
    float _2280;
    if (_1997)
    {
        _2276 = _2212;
        _2278 = _2213;
        _2280 = _2214;
    }
    else
    {
        uint _2282 = _1921 + 2u;
        uint _2286 = _1921 + 10u;
        float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _720) * 0.949999988079071044921875);
        float _2301 = _2300 * _2300;
        float _2302 = cbLight._m0[_2282].x + _796;
        float _2303 = cbLight._m0[_2282].y + _797;
        float _2304 = cbLight._m0[_2282].z + _798;
        float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
        float _2309 = _2308 * _2302;
        float _2310 = _2308 * _2303;
        float _2311 = _2308 * _2304;
        float _2312 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2282].xyz));
        float _4264 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2316 = dot(vec3(_717, _718, _719), vec3(_2309, _2310, _2311));
        float _4275 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2320 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2309, _2310, _2311));
        float _4286 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2324 = _2301 * _2301;
        float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
        float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2338 = 1.0 - _2301;
        float _2348 = (0.5 / (((_2089 * ((_2315 * _2338) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2338) + _2301) * _2315))) * _2315;
        float _4297 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
        _2276 = (((_2337 * cbLight._m0[_2286].x) * _2350) * _2351) + _2212;
        _2278 = (((_2337 * cbLight._m0[_2286].y) * _2350) * _2351) + _2213;
        _2280 = (((_2337 * cbLight._m0[_2286].z) * _2350) * _2351) + _2214;
    }
    float _2386;
    float _2388;
    float _2390;
    if (_2015)
    {
        _2386 = _2276;
        _2388 = _2278;
        _2390 = _2280;
    }
    else
    {
        uint _2397 = _1921 + 3u;
        uint _2401 = _1921 + 11u;
        float _2415 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2397].w)) * _720) * 0.949999988079071044921875);
        float _2416 = _2415 * _2415;
        float _2417 = cbLight._m0[_2397].x + _796;
        float _2418 = cbLight._m0[_2397].y + _797;
        float _2419 = cbLight._m0[_2397].z + _798;
        float _2423 = inversesqrt(dot(vec3(_2417, _2418, _2419), vec3(_2417, _2418, _2419)));
        float _2424 = _2423 * _2417;
        float _2425 = _2423 * _2418;
        float _2426 = _2423 * _2419;
        float _2427 = dot(vec3(_717, _718, _719), vec3(cbLight._m0[_2397].xyz));
        float _4313 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2430 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2431 = dot(vec3(_717, _718, _719), vec3(_2424, _2425, _2426));
        float _4324 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2435 = dot(vec3(cbLight._m0[_2397].xyz), vec3(_2424, _2425, _2426));
        float _4335 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2439 = _2416 * _2416;
        float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
        float _2452 = (exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2453 = 1.0 - _2416;
        float _2463 = (0.5 / (((_2089 * ((_2430 * _2453) + _2416)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2453) + _2416) * _2430))) * _2430;
        float _4346 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2465 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
        float _2466 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2386 = (((_2452 * cbLight._m0[_2401].x) * _2465) * _2466) + _2276;
        _2388 = (((_2452 * cbLight._m0[_2401].y) * _2465) * _2466) + _2278;
        _2390 = (((_2452 * cbLight._m0[_2401].z) * _2465) * _2466) + _2280;
    }
    float _2601;
    float _2603;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_1919.y == 0u)
    {
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2541;
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2541;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2541;
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.x;
        uint _2568 = uint((float(_2556.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2557))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2557)));
        float _2578 = (log2(_2544 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2579 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        uint _2582 = uint(isnan(14.0) ? _2579 : (isnan(_2579) ? 14.0 : min(_2579, 14.0)));
        uvec4 _2587 = texelFetch(g_lightClusterGridBuffer, int(((_2582 << 2u) + (_2568 << 6u)) >> 2u));
        uint _2588 = _2587.x;
        uint _2589 = _2556.z;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((((1u << ((_2589 >> 4u) & 15u)) + 4294967295u) & _2588) == 0u) || ((_2589 & 240u) == 0u))
        {
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
        }
        else
        {
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            uint _2839 = 0u;
            uint _2848;
            bool _2849;
            for (;;)
            {
                _2848 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                _2849 = _2848 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2849)
                {
                    frontier_phi_61_pred = _2833;
                    frontier_phi_61_pred_1 = _2838;
                    frontier_phi_61_pred_2 = _2837;
                    frontier_phi_61_pred_3 = _2836;
                    frontier_phi_61_pred_4 = _2835;
                    frontier_phi_61_pred_5 = _2834;
                }
                else
                {
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    float _2962;
                    uint _2963;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2838;
                    _2963 = _2848;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    for (;;)
                    {
                        uint _2967 = uint(findLSB(_2963)) + (_2839 << 5u);
                        uint _2964 = (_2963 + 4294967295u) & _2963;
                        uint _2969 = _2967 * 48u;
                        vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2989 = (_2967 * 48u) + 4u;
                        vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 3u)).x));
                        uint _3008 = (_2967 * 48u) + 8u;
                        vec3 _3019 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3008)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3008 + 2u)).x));
                        float _3023 = _2983.x - _2542;
                        float _3024 = _2983.y - _2543;
                        float _3025 = _2983.z - _2544;
                        float _3026 = dot(vec3(_3023, _3024, _3025), vec3(_3023, _3024, _3025));
                        float _3029 = inversesqrt(_3026);
                        float _3030 = _3029 * _3023;
                        float _3031 = _3029 * _3024;
                        float _3032 = _3029 * _3025;
                        float _3033 = dot(vec3(_823, _826, _829), vec3(_3030, _3031, _3032));
                        float _3038 = 1.0 - (_3026 * _2983.w);
                        float _4372 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3039 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3040 = sqrt(_3026) * _3002.w;
                        float _3043 = 1.39999997615814208984375 / (_3040 + 1.39999997615814208984375);
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _3033) + _3044;
                        float _3050 = _3040 * _3040;
                        float _3054 = ((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3039) / ((_3050 * 0.699999988079071044921875) + 1.0);
                        float _3058 = (-0.0) - _2542;
                        float _3059 = (-0.0) - _2543;
                        float _3060 = (-0.0) - _2544;
                        float _3064 = inversesqrt(dot(vec3(_3058, _3059, _3060), vec3(_3058, _3059, _3060)));
                        float _3065 = _3064 * _3058;
                        float _3066 = _3064 * _3059;
                        float _3067 = _3064 * _3060;
                        float _3075 = exp2(log2(1.0 / ((_3050 * 3.5) + 5.0)) * 0.25);
                        float _3076 = 1.0 - _883;
                        float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                        float _3084 = _3083 * _3083;
                        float _3085 = _3084 * _3084;
                        float _3086 = _3065 + _3030;
                        float _3087 = _3066 + _3031;
                        float _3088 = _3067 + _3032;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3096 = dot(vec3(_823, _826, _829), vec3(_3065, _3066, _3067));
                        float _4388 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3100 = dot(vec3(_823, _826, _829), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                        float _4399 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                        float _3103 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                        float _3108 = _3043 * _3084;
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3033) + _3109;
                        float _4410 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                        float _3113 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3114 = 1.0 - _3084;
                        float _3124 = (0.5 / (((_3113 * ((_3099 * _3114) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3113 * _3114) + _3084) * _3099))) * _3113;
                        float _4421 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3135 = (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3107 * _3107) * ((_3050 * 2.1991131305694580078125) + 3.141590118408203125))) * _3039;
                        _2892 = (_3054 * _3002.x) + _2960;
                        _2893 = (_3054 * _3002.y) + _2961;
                        _2894 = (_3054 * _3002.z) + _2962;
                        _2889 = (_3135 * _3019.x) + _2957;
                        _2890 = (_3135 * _3019.y) + _2958;
                        _2891 = (_3135 * _3019.z) + _2959;
                        if (_2964 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2894;
                            _2963 = _2964;
                        }
                    }
                    frontier_phi_61_pred = _2889;
                    frontier_phi_61_pred_1 = _2894;
                    frontier_phi_61_pred_2 = _2893;
                    frontier_phi_61_pred_3 = _2892;
                    frontier_phi_61_pred_4 = _2891;
                    frontier_phi_61_pred_5 = _2890;
                }
                _2690 = frontier_phi_61_pred;
                _2700 = frontier_phi_61_pred_1;
                _2698 = frontier_phi_61_pred_2;
                _2696 = frontier_phi_61_pred_3;
                _2694 = frontier_phi_61_pred_4;
                _2692 = frontier_phi_61_pred_5;
                uint _2840 = _2839 + 1u;
                if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2833 = _2690;
                    _2834 = _2692;
                    _2835 = _2694;
                    _2836 = _2696;
                    _2837 = _2698;
                    _2838 = _2700;
                    _2839 = _2840;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
        }
        uvec4 _2703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2704 = _2703.z;
        uint _2706 = (_2704 >> 8u) & 15u;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((4294967295u << _2706) & _2588) == 0u)
        {
            _2801 = _2689;
            _2803 = _2691;
            _2805 = _2693;
            _2807 = _2695;
            _2809 = _2697;
            _2811 = _2699;
        }
        else
        {
            float _2826 = inversesqrt(dot(vec3(_2542, _2543, _2544), vec3(_2542, _2543, _2544)));
            float _2827 = _2826 * _2542;
            float _2828 = _2826 * _2543;
            float _2829 = _2826 * _2544;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2706 < ((_2704 >> 12u) & 15u))
            {
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2940 = _2689;
                float _2941 = _2691;
                float _2942 = _2693;
                float _2943 = _2695;
                float _2944 = _2697;
                float _2945 = _2699;
                uint _2946 = _2706;
                uint _2955;
                bool _2956;
                for (;;)
                {
                    _2955 = texelFetch(g_lightClassification, int((((_2582 << 5u) + (_2568 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                    _2956 = _2955 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2956)
                    {
                        frontier_phi_67_pred = _2943;
                        frontier_phi_67_pred_1 = _2944;
                        frontier_phi_67_pred_2 = _2945;
                        frontier_phi_67_pred_3 = _2942;
                        frontier_phi_67_pred_4 = _2941;
                        frontier_phi_67_pred_5 = _2940;
                    }
                    else
                    {
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        float _3157 = _2944;
                        float _3158 = _2945;
                        uint _3159 = _2955;
                        uint _3160;
                        vec4 _3185;
                        float _3186;
                        vec4 _3201;
                        vec3 _3213;
                        vec4 _3228;
                        vec4 _3244;
                        float _3290;
                        bool _3291;
                        for (;;)
                        {
                            uint _3170 = ((_2946 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3159));
                            _3160 = (_3159 + 4294967295u) & _3159;
                            uint _3172 = _3170 * 40u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3186 = _3185.w;
                            uint _3188 = (_3170 * 40u) + 4u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3170 * 40u) + 8u;
                            _3213 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x));
                            uint _3215 = (_3170 * 40u) + 16u;
                            _3228 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3215)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3215 + 3u)).x));
                            uint _3231 = (_3170 * 40u) + 20u;
                            _3244 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 3u)).x));
                            uint _3246 = (_3170 * 40u) + 24u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3265 = (_3170 * 40u) + 28u;
                            vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            _3290 = fma(_2544, _3278.z, fma(_2543, _3278.y, _3278.x * _2542)) + _3278.w;
                            _3291 = !((fma(_2544, _3259.z, fma(_2543, _3259.y, _3259.x * _2542)) + _3259.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3291)
                            {
                                float _3318 = _3185.x - _2542;
                                float _3319 = _3185.y - _2543;
                                float _3320 = _3185.z - _2544;
                                float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                                float _3324 = inversesqrt(_3321);
                                float _3325 = _3324 * _3318;
                                float _3326 = _3324 * _3319;
                                float _3327 = _3324 * _3320;
                                float _3331 = 1.0 - (_3321 / (_3186 * _3186));
                                float _4432 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3336 = sqrt(_3321) * _3201.w;
                                float _3338 = 1.39999997615814208984375 / (_3336 + 1.39999997615814208984375);
                                float _3339 = _3338 * _3338;
                                float _3342 = ((1.0 - _3339) * dot(vec3(_3325, _3326, _3327), vec3(_823, _826, _829))) + _3339;
                                float _3345 = _3336 * _3336;
                                float _3349 = (fma(_2544, _3228.z, fma(_2543, _3228.y, _3228.x * _2542)) + _3228.w) / _3290;
                                float _3350 = (fma(_2544, _3244.z, fma(_2543, _3244.y, _3244.x * _2542)) + _3244.w) / _3290;
                                float _3354 = 1.0 - dot(vec2(_3349, _3350), vec2(_3349, _3350));
                                float _4448 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3355 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3356 = _3355 * (((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3332) / ((_3345 * 0.699999988079071044921875) + 1.0));
                                float _3368 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                                float _3369 = 1.0 - _883;
                                float _3376 = sqrt(1.0 - ((1.0 - (_3369 * _3369)) * (1.0 - (_3368 * _3368))));
                                float _3377 = _3376 * _3376;
                                float _3378 = _3377 * _3377;
                                float _3379 = _3325 - _2827;
                                float _3380 = _3326 - _2828;
                                float _3381 = _3327 - _2829;
                                float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                                float _3389 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2827, (-0.0) - _2828, (-0.0) - _2829));
                                float _4459 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3392 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3393 = dot(vec3(_823, _826, _829), vec3(_3385 * _3379, _3385 * _3380, _3385 * _3381));
                                float _4470 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3396 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3400 = ((_3396 * _3396) * (_3378 + (-1.0))) + 1.0;
                                float _3401 = _3338 * _3377;
                                float _3402 = _3401 * _3401;
                                float _3408 = ((1.0 - _3402) * dot(vec3(_823, _826, _829), vec3(_3325, _3326, _3327))) + _3402;
                                float _4481 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3409 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3410 = 1.0 - _3377;
                                float _3420 = (0.5 / (((_3409 * ((_3392 * _3410) + _3377)) + 9.9999999392252902907785028219223e-09) + (((_3409 * _3410) + _3377) * _3392))) * _3409;
                                float _4492 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3430 = (_3355 * _3332) * (((_3378 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3400 * _3400) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3430 * _3213.x;
                                frontier_phi_73_pred_1 = _3430 * _3213.y;
                                frontier_phi_73_pred_2 = _3356 * _3201.z;
                                frontier_phi_73_pred_3 = _3356 * _3201.y;
                                frontier_phi_73_pred_4 = _3356 * _3201.x;
                                frontier_phi_73_pred_5 = _3430 * _3213.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3434 = frontier_phi_73_pred;
                            _3435 = frontier_phi_73_pred_1;
                            _3439 = frontier_phi_73_pred_2;
                            _3438 = frontier_phi_73_pred_3;
                            _3437 = frontier_phi_73_pred_4;
                            _3436 = frontier_phi_73_pred_5;
                            _3143 = _3437 + _3156;
                            _3144 = _3438 + _3157;
                            _3145 = _3439 + _3158;
                            _3140 = _3434 + _3153;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            if (_3160 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3160;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3143;
                        frontier_phi_67_pred_1 = _3144;
                        frontier_phi_67_pred_2 = _3145;
                        frontier_phi_67_pred_3 = _3142;
                        frontier_phi_67_pred_4 = _3141;
                        frontier_phi_67_pred_5 = _3140;
                    }
                    _2808 = frontier_phi_67_pred;
                    _2810 = frontier_phi_67_pred_1;
                    _2812 = frontier_phi_67_pred_2;
                    _2806 = frontier_phi_67_pred_3;
                    _2804 = frontier_phi_67_pred_4;
                    _2802 = frontier_phi_67_pred_5;
                    uint _2947 = _2946 + 1u;
                    if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2940 = _2802;
                        _2941 = _2804;
                        _2942 = _2806;
                        _2943 = _2808;
                        _2944 = _2810;
                        _2945 = _2812;
                        _2946 = _2947;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2810;
                frontier_phi_55_56_ladder_1 = _2812;
                frontier_phi_55_56_ladder_2 = _2808;
                frontier_phi_55_56_ladder_3 = _2806;
                frontier_phi_55_56_ladder_4 = _2804;
                frontier_phi_55_56_ladder_5 = _2802;
            }
            else
            {
                frontier_phi_55_56_ladder = _2697;
                frontier_phi_55_56_ladder_1 = _2699;
                frontier_phi_55_56_ladder_2 = _2695;
                frontier_phi_55_56_ladder_3 = _2693;
                frontier_phi_55_56_ladder_4 = _2691;
                frontier_phi_55_56_ladder_5 = _2689;
            }
            _2801 = frontier_phi_55_56_ladder_5;
            _2803 = frontier_phi_55_56_ladder_4;
            _2805 = frontier_phi_55_56_ladder_3;
            _2807 = frontier_phi_55_56_ladder_2;
            _2809 = frontier_phi_55_56_ladder;
            _2811 = frontier_phi_55_56_ladder_1;
        }
        float _2816 = isnan(1.0) ? _867 : (isnan(_867) ? 1.0 : min(_867, 1.0));
        _2601 = (_2816 * _2807) + _2053;
        _2603 = (_2816 * _2809) + _2055;
        _2605 = (_2816 * _2811) + _2057;
        _2607 = ((_2801 * 0.039999999105930328369140625) * _2816) + _2386;
        _2609 = ((_2803 * 0.039999999105930328369140625) * _2816) + _2388;
        _2611 = ((_2805 * 0.039999999105930328369140625) * _2816) + _2390;
    }
    else
    {
        _2601 = _2053;
        _2603 = _2055;
        _2605 = _2057;
        _2607 = _2386;
        _2609 = _2388;
        _2611 = _2390;
    }
    float _4508 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4519 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4530 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    uint _2631 = _243 + 6u;
    float _2639 = _804 / cbSceneParam._m0[86u].x;
    float _2640 = _805 / cbSceneParam._m0[86u].y;
    vec4 _2654 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, (log2((isnan(cbSceneParam._m0[77u].w) ? _738 : (isnan(_738) ? cbSceneParam._m0[77u].w : min(_738, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2656 = _2654.x;
    float _2657 = _2654.y;
    float _2658 = _2654.z;
    float _2659 = _2654.w;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_738 > cbSceneParam._m0[78u].w)
    {
        float _2714 = isnan(_738) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _738 : min(cbSceneParam._m0[80u].w, _738));
        float _2715 = _2714 / _738;
        float _2726 = _2715 * _789;
        float _2727 = _790 * _2715;
        float _2728 = (-0.0) - _2727;
        float _2729 = _2715 * _791;
        float _2731 = (cbSceneParam._m0[77u].w * _2728) / _2714;
        float _2732 = _2731 + cbSceneParam._m0[79u].w;
        float _2733 = cbSceneParam._m0[79u].w - _2727;
        float _2739 = sqrt(((_2726 * _2726) + (_2727 * _2727)) + (_2729 * _2729));
        float _2742 = (1.0 - (cbSceneParam._m0[77u].w / _2714)) * _2739;
        float _2747 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2749 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2902;
        if (abs((_2728 - _2731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2902 = ((((_2732 > 0.0) ? exp2(_2747 * _2732) : (2.0 - exp2(_2749 * _2732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2742;
        }
        else
        {
            float _2862 = 1.0 / cbSceneParam._m0[80u].x;
            float _2863 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : max(_2732, _2733));
            float _2864 = isnan(_2733) ? _2732 : (isnan(_2732) ? _2733 : min(_2732, _2733));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            _2902 = ((abs(_2739 / _2728) * cbSceneParam._m0[80u].y) * ((((_2873 - _2874) * 2.0) - ((exp2(_2747 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0)))) - exp2(_2747 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))))) * _2862)) - ((exp2(_2749 * _2873) - exp2(_2749 * _2874)) * _2862))) + (_2742 * cbSceneParam._m0[80u].z);
        }
        vec4 _2904 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2639, _2640, 1.0), 0.0);
        float _2913 = exp2((_2902 * (-1.44269502162933349609375)) * (1.0 - _2904.w));
        float _2914 = log2(_2913);
        float _2930 = log2(_2659);
        _2751 = (exp2(_2930 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].x)) * _2904.x) / cbSceneParam._m0[78u].x)) + _2656;
        _2753 = (exp2(_2930 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].y)) * _2904.y) / cbSceneParam._m0[78u].y)) + _2657;
        _2755 = (exp2(_2930 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2914 * cbSceneParam._m0[78u].z)) * _2904.z) / cbSceneParam._m0[78u].z)) + _2658;
        _2757 = _2913 * _2659;
    }
    else
    {
        _2751 = _2656;
        _2753 = _2657;
        _2755 = _2658;
        _2757 = _2659;
    }
    float _2769 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2770 = _2769 == 3.0;
    float _2771 = log2(_2757);
    float _2778 = exp2(_2771 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2601 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _867))) + ((_2607 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1672)) * cbPerFrame._m0[3u].x));
    float _2779 = exp2(_2771 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2603 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _867))) + ((_2609 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1672)) * cbPerFrame._m0[3u].x));
    float _2780 = exp2(_2771 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2605 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _867))) + ((_2611 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1672)) * cbPerFrame._m0[3u].x));
    float _2789 = (_2769 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2789 * (_2770 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.y = _2789 * (_2770 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.z = _2789 * (_2770 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.w = cbInstanceData._m0[_2631].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2631].w;
}


