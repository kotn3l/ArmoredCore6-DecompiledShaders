#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1097;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3402 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _433 = _431.x;
    float _434 = _431.y;
    float _435 = _431.z;
    float _444 = ((_414.z - _435) * _366) + _435;
    float _447 = ((((_414.x - _433) * _366) + _433) * 2.0) + (-1.0);
    float _449 = ((((_414.y - _434) * _366) + _434) * 2.0) + (-1.0);
    float _450 = dot(vec2(_447, _449), vec2(_447, _449));
    float _3413 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _455 = sqrt(1.0 - (isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0))));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _488 = _486.x;
    float _489 = 1.0 - _488;
    float _502 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_488 - _489) * cbMtdParam._m0[24u].z) + _489) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3424 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _510 = (_503 * ((_394.x * cbMtdParam._m0[18u].x) - _373)) + _373;
    float _511 = (_503 * ((_394.y * cbMtdParam._m0[18u].y) - _374)) + _374;
    float _512 = (_503 * ((_394.z * cbMtdParam._m0[18u].z) - _375)) + _375;
    vec4 _525 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _532 = (_525.x * 2.0) + (-1.0);
    float _533 = (_525.y * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3435 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _542 = (_503 * (_525.z - _444)) + _444;
    float _554 = (((_532 - _447) + (cbMtdParam._m0[21u].x * _447)) * _503) + _447;
    float _555 = (((_533 - _449) + (cbMtdParam._m0[21u].x * _449)) * _503) + _449;
    float _556 = (_503 * (sqrt(1.0 - (isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0)))) - _455)) + _455;
    float _561 = cbMtdParam._m0[22u].x + _468.w;
    float _564 = fma(_556, _217 * NORMAL.x, fma(_555, _224 * TANGENT.x, (_210 * _202) * _554));
    float _567 = fma(_556, _217 * NORMAL.y, fma(_555, _224 * TANGENT.y, (_210 * _203) * _554));
    float _570 = fma(_556, _217 * NORMAL.z, fma(_555, _224 * TANGENT.z, (_210 * _204) * _554));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3446 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _578 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3468 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _3479 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _3490 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _638 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _648 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _638);
    float _649 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _638);
    float _650 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _638);
    float _654 = inversesqrt(dot(vec3(_648, _649, _650), vec3(_648, _649, _650)));
    float _655 = _648 * _654;
    float _656 = _649 * _654;
    float _657 = _650 * _654;
    float _663 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _664 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _682 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _685 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _688 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _702 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3501 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _3512 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _3523 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    vec4 _722 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _663, cbSceneParam._m0[86u].y * _664));
    float _726 = ((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) * TEXCOORD_5.w) * _722.x;
    float _727 = dot(vec3(_575, _576, _577), vec3(_655, _656, _657));
    float _730 = _727 * 2.0;
    float _734 = (_730 * _575) - _655;
    float _735 = (_730 * _576) - _656;
    float _736 = (_730 * _577) - _657;
    float _740 = abs(dot(vec3(_655, _656, _657), vec3(_575, _576, _577)));
    float _3534 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _742 = sqrt(_578);
    float _755 = exp2((_742 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_742 * 3.0));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1096;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _821 = fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787));
        float _825 = fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787));
        float _829 = fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787));
        float _854 = _787 + _575;
        float _855 = _791 + _576;
        float _856 = _795 + _577;
        float _866 = fma(_856, cbModelParam._m0[26u].z, fma(_855, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _854)) - _821;
        float _867 = fma(_856, cbModelParam._m0[27u].z, fma(_855, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _854)) - _825;
        float _868 = fma(_856, cbModelParam._m0[28u].z, fma(_855, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _854)) - _829;
        float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
        float _885 = ((_872 * _866) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_821 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _886 = ((_872 * _867) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_825 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _887 = ((_872 * _868) / cbModelParam._m0[34u].z) + ((((((_829 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_885, _886, _887), 0.0);
        float _924 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_890.x + (-0.5));
        float _926 = _924 * (_890.y + (-0.5));
        float _927 = _924 * (_890.z + (-0.5));
        float _934 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_897.x + (-0.5));
        float _936 = _934 * (_897.y + (-0.5));
        float _937 = _934 * (_897.z + (-0.5));
        float _944 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_904.x + (-0.5));
        float _946 = _944 * (_904.y + (-0.5));
        float _947 = _944 * (_904.z + (-0.5));
        float _954 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_911.x + (-0.5));
        float _956 = _954 * (_911.y + (-0.5));
        float _957 = _954 * (_911.z + (-0.5));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = _925 * 0.5;
        float _962 = _935 * 0.5;
        float _963 = _945 * 0.5;
        float _964 = dot(vec3(_961, _962, _963), vec3(_961, _962, _963));
        float _969 = (_964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_964);
        float _978 = (dot(vec3(_575, _576, _577), vec3(_969 * _961, _969 * _962, _969 * _963)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _988 = sqrt(((_962 * _962) + (_961 * _961)) + (_963 * _963)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3582 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_990 + 1.0))) + _995) * _958;
        float _1005 = _926 * 0.5;
        float _1006 = _936 * 0.5;
        float _1007 = _946 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1021 = (dot(vec3(_575, _576, _577), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1030 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_959 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3615 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1032 + 1.0))) + _1037) * _959;
        float _1047 = _927 * 0.5;
        float _1048 = _937 * 0.5;
        float _1049 = _947 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_575, _576, _577), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3648 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1074 + 1.0))) + _1079) * _960;
        _1096 = _927;
        _1098 = _926;
        _1099 = _925;
        _1100 = _937;
        _1101 = _936;
        _1102 = _935;
        _1103 = _947;
        _1104 = _946;
        _1105 = _945;
        _1106 = _960;
        _1107 = _959;
        _1108 = _958;
        _1109 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
    }
    else
    {
        _1096 = _1097;
        _1098 = _1097;
        _1099 = _1097;
        _1100 = _1097;
        _1101 = _1097;
        _1102 = _1097;
        _1103 = _1097;
        _1104 = _1097;
        _1105 = _1097;
        _1106 = _1097;
        _1107 = _1097;
        _1108 = _1097;
        _1109 = 0.0;
        _1110 = 0.0;
        _1111 = 0.0;
    }
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1136 = fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787));
        float _1140 = fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787));
        float _1144 = fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787));
        float _1167 = _787 + _575;
        float _1168 = _791 + _576;
        float _1169 = _795 + _577;
        float _1179 = fma(_1169, cbModelParam._m0[30u].z, fma(_1168, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1167)) - _1136;
        float _1180 = fma(_1169, cbModelParam._m0[31u].z, fma(_1168, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1167)) - _1140;
        float _1181 = fma(_1169, cbModelParam._m0[32u].z, fma(_1168, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1167)) - _1144;
        float _1185 = inversesqrt(dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181)));
        float _1198 = ((_1185 * _1179) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1136 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1185 * _1180) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1140 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1185 * _1181) / cbModelParam._m0[35u].z) + ((((((_1144 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1209 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1198, _1199, _1200), 0.0);
        float _1235 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1202.x + (-0.5));
        float _1237 = _1235 * (_1202.y + (-0.5));
        float _1238 = _1235 * (_1202.z + (-0.5));
        float _1245 = exp2((_1209.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1209.x + (-0.5));
        float _1247 = _1245 * (_1209.y + (-0.5));
        float _1248 = _1245 * (_1209.z + (-0.5));
        float _1255 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1216.x + (-0.5));
        float _1257 = _1255 * (_1216.y + (-0.5));
        float _1258 = _1255 * (_1216.z + (-0.5));
        float _1265 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1223.x + (-0.5));
        float _1267 = _1265 * (_1223.y + (-0.5));
        float _1268 = _1265 * (_1223.z + (-0.5));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = _1236 * 0.5;
        float _1273 = _1246 * 0.5;
        float _1274 = _1256 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_575, _576, _577), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3711 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1299 + 1.0))) + _1304) * _1269;
        float _1314 = _1237 * 0.5;
        float _1315 = _1247 * 0.5;
        float _1316 = _1257 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_575, _576, _577), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3722 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3733 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3744 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1341 + 1.0))) + _1346) * _1270;
        float _1356 = _1238 * 0.5;
        float _1357 = _1248 * 0.5;
        float _1358 = _1258 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_575, _576, _577), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3777 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1383 + 1.0))) + _1388) * _1271;
        _1405 = _1238;
        _1406 = _1237;
        _1407 = _1236;
        _1408 = _1248;
        _1409 = _1247;
        _1410 = _1246;
        _1411 = _1258;
        _1412 = _1257;
        _1413 = _1256;
        _1414 = _1271;
        _1415 = _1270;
        _1416 = _1269;
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1097;
        _1406 = _1097;
        _1407 = _1097;
        _1408 = _1097;
        _1409 = _1097;
        _1410 = _1097;
        _1411 = _1097;
        _1412 = _1097;
        _1413 = _1097;
        _1414 = _1097;
        _1415 = _1097;
        _1416 = _1097;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1109)) + _1109;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1110)) + _1110;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1111)) + _1111;
    float _1452 = fma(_1431, cbSceneParam._m0[89u].z, fma(_1430, cbSceneParam._m0[89u].y, _1429 * cbSceneParam._m0[89u].x));
    float _1455 = fma(_1431, cbSceneParam._m0[90u].z, fma(_1430, cbSceneParam._m0[90u].y, _1429 * cbSceneParam._m0[90u].x));
    float _1458 = fma(_1431, cbSceneParam._m0[91u].z, fma(_1430, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1429));
    float _1473 = _734 * 0.5;
    float _1474 = _735 * 0.5;
    float _1475 = _736 * 0.5;
    float _1476 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1479 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1482 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1516;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1489 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1096, _1100, _1103, _1106));
        float _1493 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1497 = dot(vec4(_1473, _1474, _1475, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1504 = dot(vec4(cbModelParam._m0[39u]), vec4(_1473, _1474, _1475, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1504) ? 0.0 : (isnan(0.0) ? _1504 : max(0.0, _1504))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1527;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1518 = dot(vec4(cbModelParam._m0[40u]), vec4(_1473, _1474, _1475, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1518) ? 0.0 : (isnan(0.0) ? _1518 : max(0.0, _1518))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1531 = (_1527 * cbModelParam._m0[1u].x) + (_1516 * (1.0 - cbModelParam._m0[1u].x));
    float _1541 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1541 : min(cbModelParam._m0[25u].z, _1541));
    float _1622;
    float _1624;
    float _1626;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1589 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1593 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1597 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1600 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1603 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1606 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1634;
        if (_1600 > 0.0)
        {
            _1634 = abs((1.0 - _1589) / _1600);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1589 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1634 = frontier_phi_14_12_ladder;
        }
        float _1834;
        if (_1603 > 0.0)
        {
            _1834 = abs((1.0 - _1593) / _1603);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1593 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1834 = frontier_phi_23_19_ladder;
        }
        float _2077;
        if (_1606 > 0.0)
        {
            _2077 = abs((1.0 - _1597) / _1606);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1597 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2077 = frontier_phi_35_30_ladder;
        }
        float _2079 = isnan(_1834) ? _1634 : (isnan(_1634) ? _1834 : min(_1634, _1834));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1600) + _1589;
        float _2085 = (_2080 * _1603) + _1593;
        float _2086 = (_2080 * _1606) + _1597;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2210 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1542);
            frontier_phi_13_35_ladder = _2210.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2210.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2210.x * cbModelParam._m0[1u].y;
        }
        _1622 = frontier_phi_13_35_ladder_2;
        _1624 = frontier_phi_13_35_ladder_1;
        _1626 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1542);
        _1622 = _1610.x * cbModelParam._m0[1u].y;
        _1624 = _1610.y * cbModelParam._m0[1u].y;
        _1626 = _1610.z * cbModelParam._m0[1u].y;
    }
    float _1630 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1630 : min(cbModelParam._m0[25u].w, _1630));
    float _1720;
    float _1722;
    float _1724;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1684 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1688 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1692 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1695 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1698 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1701 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _1839;
        if (_1695 > 0.0)
        {
            _1839 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1839 = frontier_phi_25_21_ladder;
        }
        float _2104;
        if (_1698 > 0.0)
        {
            _2104 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2104 = frontier_phi_37_32_ladder;
        }
        float _2309;
        if (_1701 > 0.0)
        {
            _2309 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2309 = frontier_phi_46_43_ladder;
        }
        float _2311 = isnan(_2104) ? _1839 : (isnan(_1839) ? _2104 : min(_1839, _2104));
        float _2312 = isnan(_2309) ? _2311 : (isnan(_2311) ? _2309 : min(_2311, _2309));
        float _2316 = (_2312 * _1695) + _1684;
        float _2317 = (_2312 * _1698) + _1688;
        float _2318 = (_2312 * _1701) + _1692;
        float _2319 = _2312 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2319;
        float _2322 = _2319 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2318 > _2322) || ((_2318 < _2320) || ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 < _2320) || (_2316 > _2322))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2318, cbModelParam._m0[17u].z, fma(_2317, cbModelParam._m0[17u].y, _2316 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2318, cbModelParam._m0[18u].z, fma(_2317, cbModelParam._m0[18u].y, _2316 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2318, cbModelParam._m0[19u].z, fma(_2317, cbModelParam._m0[19u].y, _2316 * cbModelParam._m0[19u].x))), _1631);
            frontier_phi_22_46_ladder = _2517.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2517.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2517.x * cbModelParam._m0[1u].z;
        }
        _1720 = frontier_phi_22_46_ladder_2;
        _1722 = frontier_phi_22_46_ladder_1;
        _1724 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1704 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1631);
        _1720 = _1704.x * cbModelParam._m0[1u].z;
        _1722 = _1704.y * cbModelParam._m0[1u].z;
        _1724 = _1704.z * cbModelParam._m0[1u].z;
    }
    float _1736 = ((((1.0 - _755) * ((_742 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_755 * _742)) * _726;
    float _1737 = _1736 * ((cbModelParam._m0[1u].w * (_1720 - _1622)) + _1622);
    float _1738 = _1736 * ((cbModelParam._m0[1u].w * (_1722 - _1624)) + _1624);
    float _1739 = _1736 * ((cbModelParam._m0[1u].w * (_1724 - _1626)) + _1626);
    float _1742 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, _1737 * cbSceneParam._m0[91u].x));
    uvec4 _1758 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1760 = _1758.x * 14u;
    uint _1761 = _1760 + 13u;
    float _1768 = _726 + (-1.0);
    float _1773 = (cbLight._m0[_1761].x * _1768) + 1.0;
    float _1774 = (cbLight._m0[_1761].y * _1768) + 1.0;
    float _1775 = (cbLight._m0[_1761].z * _1768) + 1.0;
    float _1776 = (cbLight._m0[_1761].w * _1768) + 1.0;
    uint _1777 = _1760 + 5u;
    float _1783 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
    uint _1787 = _1760 + 4u;
    float _1793 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
    uint _1797 = _1760 | 1u;
    float _1808 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_575, _576, _577));
    float _1811 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_575, _576, _577));
    float _3913 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _3924 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1816 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * 0.3183098733425140380859375;
    float _1818 = (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.3183098733425140380859375;
    float _1825 = ((cbLight._m0[_1777].x * _1783) * _1818) + ((cbLight._m0[_1787].x * _1793) * _1816);
    float _1826 = ((_1783 * cbLight._m0[_1777].y) * _1818) + ((_1793 * cbLight._m0[_1787].y) * _1816);
    float _1827 = ((_1783 * cbLight._m0[_1777].z) * _1818) + ((_1793 * cbLight._m0[_1787].z) * _1816);
    uvec4 _1831 = floatBitsToUint(cbLight._m0[_1760 + 12u]);
    bool _1833 = _1831.x == 0u;
    float _1844;
    float _1846;
    float _1848;
    if (_1833)
    {
        _1844 = _1825;
        _1846 = _1826;
        _1848 = _1827;
    }
    else
    {
        uint _1852 = _1760 + 6u;
        float _1868 = (dot(vec3(cbLight._m0[_1760 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _1869 = _1868 * _1868;
        float _3935 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1871 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _1844 = (((cbLight._m0[_1852].x * 0.3183098733425140380859375) * _1870) * _1871) + _1825;
        _1846 = (((cbLight._m0[_1852].y * 0.3183098733425140380859375) * _1870) * _1871) + _1826;
        _1848 = (((cbLight._m0[_1852].z * 0.3183098733425140380859375) * _1870) * _1871) + _1827;
    }
    bool _1851 = _1831.y == 0u;
    float _1889;
    float _1891;
    float _1893;
    if (_1851)
    {
        _1889 = _1844;
        _1891 = _1846;
        _1893 = _1848;
    }
    else
    {
        uint _2048 = _1760 + 7u;
        float _2064 = (dot(vec3(cbLight._m0[_1760 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2065 = _2064 * _2064;
        float _3951 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        float _2066 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2067 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _1889 = (((cbLight._m0[_2048].x * 0.3183098733425140380859375) * _2066) * _2067) + _1844;
        _1891 = (((cbLight._m0[_2048].y * 0.3183098733425140380859375) * _2066) * _2067) + _1846;
        _1893 = (((cbLight._m0[_2048].z * 0.3183098733425140380859375) * _2066) * _2067) + _1848;
    }
    uint _1896 = _1760 + 8u;
    float _1909 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _578) * 0.949999988079071044921875);
    float _1910 = _1909 * _1909;
    float _1911 = cbLight._m0[_1760].x + _655;
    float _1912 = cbLight._m0[_1760].y + _656;
    float _1913 = cbLight._m0[_1760].z + _657;
    float _1917 = inversesqrt(dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913)));
    float _1918 = _1917 * _1911;
    float _1919 = _1917 * _1912;
    float _1920 = _1917 * _1913;
    float _1921 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1760].xyz));
    float _3967 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _1925 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1926 = dot(vec3(_575, _576, _577), vec3(_1918, _1919, _1920));
    float _3989 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _1930 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1918, _1919, _1920));
    float _4000 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1934 = _1910 * _1910;
    float _1938 = ((_1929 * _1929) * (_1934 + (-1.0))) + 1.0;
    float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1950 = 1.0 - _1910;
    float _1961 = (0.5 / (((_1925 * ((_1924 * _1950) + _1910)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _1950) + _1910) * _1924))) * _1924;
    float _4011 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1963 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1934 / ((_1938 * _1938) * 3.141590118408203125));
    uint _1974 = _1760 + 9u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1797].w)) * _578) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1797].x + _655;
    float _1988 = cbLight._m0[_1797].y + _656;
    float _1989 = cbLight._m0[_1797].z + _657;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1797].xyz));
    float _4022 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _2001 = dot(vec3(_575, _576, _577), vec3(_1994, _1995, _1996));
    float _4033 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1994, _1995, _1996));
    float _4044 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1986 * _1986;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2022 = (exp2(log2(1.0 - (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2023 = 1.0 - _1986;
    float _2033 = (0.5 / (((_1925 * ((_2000 * _2023) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _2023) + _1986) * _2000))) * _2000;
    float _4055 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    float _2045 = (((_2022 * cbLight._m0[_1974].x) * _2035) * _1783) + (((_1949 * cbLight._m0[_1896].x) * _1963) * _1793);
    float _2046 = (((_2022 * cbLight._m0[_1974].y) * _2035) * _1783) + (((_1949 * cbLight._m0[_1896].y) * _1963) * _1793);
    float _2047 = (((_2022 * cbLight._m0[_1974].z) * _2035) * _1783) + (((_1949 * cbLight._m0[_1896].z) * _1963) * _1793);
    float _2109;
    float _2111;
    float _2113;
    if (_1833)
    {
        _2109 = _2045;
        _2111 = _2046;
        _2113 = _2047;
    }
    else
    {
        uint _2115 = _1760 + 2u;
        uint _2119 = _1760 + 10u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _578) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _655;
        float _2136 = cbLight._m0[_2115].y + _656;
        float _2137 = cbLight._m0[_2115].z + _657;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2115].xyz));
        float _4066 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2149 = dot(vec3(_575, _576, _577), vec3(_2142, _2143, _2144));
        float _4077 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4088 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2171 = 1.0 - _2134;
        float _2181 = (0.5 / (((_1925 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _2171) + _2134) * _2148))) * _2148;
        float _4099 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1775 : (isnan(_1775) ? 1.0 : min(_1775, 1.0));
        _2109 = (((_2170 * cbLight._m0[_2119].x) * _2183) * _2184) + _2045;
        _2111 = (((_2170 * cbLight._m0[_2119].y) * _2183) * _2184) + _2046;
        _2113 = (((_2170 * cbLight._m0[_2119].z) * _2183) * _2184) + _2047;
    }
    float _2219;
    float _2221;
    float _2223;
    if (_1851)
    {
        _2219 = _2109;
        _2221 = _2111;
        _2223 = _2113;
    }
    else
    {
        uint _2230 = _1760 + 3u;
        uint _2234 = _1760 + 11u;
        float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _578) * 0.949999988079071044921875);
        float _2249 = _2248 * _2248;
        float _2250 = cbLight._m0[_2230].x + _655;
        float _2251 = cbLight._m0[_2230].y + _656;
        float _2252 = cbLight._m0[_2230].z + _657;
        float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
        float _2257 = _2256 * _2250;
        float _2258 = _2256 * _2251;
        float _2259 = _2256 * _2252;
        float _2260 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2230].xyz));
        float _4115 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2263 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2264 = dot(vec3(_575, _576, _577), vec3(_2257, _2258, _2259));
        float _4126 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2267 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2268 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2257, _2258, _2259));
        float _4137 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2272 = _2249 * _2249;
        float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
        float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2286 = 1.0 - _2249;
        float _2296 = (0.5 / (((_1925 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_1925 * _2286) + _2249) * _2263))) * _2263;
        float _4148 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2298 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
        float _2299 = isnan(1.0) ? _1776 : (isnan(_1776) ? 1.0 : min(_1776, 1.0));
        _2219 = (((_2285 * cbLight._m0[_2234].x) * _2298) * _2299) + _2109;
        _2221 = (((_2285 * cbLight._m0[_2234].y) * _2298) * _2299) + _2111;
        _2223 = (((_2285 * cbLight._m0[_2234].z) * _2298) * _2299) + _2113;
    }
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_1758.y == 0u)
    {
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2374;
        float _2376 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2374;
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2374;
        uvec4 _2389 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2390 = _2389.x;
        uint _2401 = uint((float(_2389.y) * floor(float(uint(cbSceneParam._m0[85u].y * _664) / _2390))) + floor(float(uint(cbSceneParam._m0[85u].x * _663) / _2390)));
        float _2411 = (log2(_2377 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2412 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        uint _2415 = uint(isnan(14.0) ? _2412 : (isnan(_2412) ? 14.0 : min(_2412, 14.0)));
        uvec4 _2420 = texelFetch(g_lightClusterGridBuffer, int(((_2415 << 2u) + (_2401 << 6u)) >> 2u));
        uint _2421 = _2420.x;
        uint _2422 = _2389.z;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        if (((((1u << ((_2422 >> 4u) & 15u)) + 4294967295u) & _2421) == 0u) || ((_2422 & 240u) == 0u))
        {
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
        }
        else
        {
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            uint _2673 = 0u;
            uint _2682;
            bool _2683;
            for (;;)
            {
                _2682 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2673 << 2u)) >> 2u)).x;
                _2683 = _2682 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2683)
                {
                    frontier_phi_61_pred = _2667;
                    frontier_phi_61_pred_1 = _2672;
                    frontier_phi_61_pred_2 = _2671;
                    frontier_phi_61_pred_3 = _2670;
                    frontier_phi_61_pred_4 = _2669;
                    frontier_phi_61_pred_5 = _2668;
                }
                else
                {
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    uint _2797;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2671;
                    _2796 = _2672;
                    _2797 = _2682;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    for (;;)
                    {
                        uint _2801 = uint(findLSB(_2797)) + (_2673 << 5u);
                        uint _2798 = (_2797 + 4294967295u) & _2797;
                        uint _2803 = _2801 * 48u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 3u)).x));
                        uint _2823 = (_2801 * 48u) + 4u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2842 = (_2801 * 48u) + 8u;
                        vec3 _2853 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x));
                        float _2857 = _2817.x - _2375;
                        float _2858 = _2817.y - _2376;
                        float _2859 = _2817.z - _2377;
                        float _2860 = dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859));
                        float _2863 = inversesqrt(_2860);
                        float _2864 = _2863 * _2857;
                        float _2865 = _2863 * _2858;
                        float _2866 = _2863 * _2859;
                        float _2867 = dot(vec3(_682, _685, _688), vec3(_2864, _2865, _2866));
                        float _2872 = 1.0 - (_2860 * _2817.w);
                        float _4174 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2873 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2874 = sqrt(_2860) * _2836.w;
                        float _2877 = 1.39999997615814208984375 / (_2874 + 1.39999997615814208984375);
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2867) + _2878;
                        float _2884 = _2874 * _2874;
                        float _2888 = ((isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))) * _2873) / ((_2884 * 0.699999988079071044921875) + 1.0);
                        float _2892 = (-0.0) - _2375;
                        float _2893 = (-0.0) - _2376;
                        float _2894 = (-0.0) - _2377;
                        float _2898 = inversesqrt(dot(vec3(_2892, _2893, _2894), vec3(_2892, _2893, _2894)));
                        float _2899 = _2898 * _2892;
                        float _2900 = _2898 * _2893;
                        float _2901 = _2898 * _2894;
                        float _2909 = exp2(log2(1.0 / ((_2884 * 3.5) + 5.0)) * 0.25);
                        float _2910 = 1.0 - _742;
                        float _2917 = sqrt(1.0 - ((1.0 - (_2910 * _2910)) * (1.0 - (_2909 * _2909))));
                        float _2918 = _2917 * _2917;
                        float _2919 = _2918 * _2918;
                        float _2920 = _2899 + _2864;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                        float _2930 = dot(vec3(_682, _685, _688), vec3(_2899, _2900, _2901));
                        float _4190 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2933 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2934 = dot(vec3(_682, _685, _688), vec3(_2926 * _2920, _2926 * _2921, _2926 * _2922));
                        float _4201 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2941 = ((_2937 * _2937) * (_2919 + (-1.0))) + 1.0;
                        float _2942 = _2877 * _2918;
                        float _2943 = _2942 * _2942;
                        float _2946 = ((1.0 - _2943) * _2867) + _2943;
                        float _4212 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2948 = 1.0 - _2918;
                        float _2958 = (0.5 / (((_2947 * ((_2933 * _2948) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2947 * _2948) + _2918) * _2933))) * _2947;
                        float _4223 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2969 = (((_2919 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_2941 * _2941) * ((_2884 * 2.1991131305694580078125) + 3.141590118408203125))) * _2873;
                        _2726 = (_2888 * _2836.x) + _2794;
                        _2727 = (_2888 * _2836.y) + _2795;
                        _2728 = (_2888 * _2836.z) + _2796;
                        _2723 = (_2969 * _2853.x) + _2791;
                        _2724 = (_2969 * _2853.y) + _2792;
                        _2725 = (_2969 * _2853.z) + _2793;
                        if (_2798 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2727;
                            _2796 = _2728;
                            _2797 = _2798;
                        }
                    }
                    frontier_phi_61_pred = _2723;
                    frontier_phi_61_pred_1 = _2728;
                    frontier_phi_61_pred_2 = _2727;
                    frontier_phi_61_pred_3 = _2726;
                    frontier_phi_61_pred_4 = _2725;
                    frontier_phi_61_pred_5 = _2724;
                }
                _2523 = frontier_phi_61_pred;
                _2533 = frontier_phi_61_pred_1;
                _2531 = frontier_phi_61_pred_2;
                _2529 = frontier_phi_61_pred_3;
                _2527 = frontier_phi_61_pred_4;
                _2525 = frontier_phi_61_pred_5;
                uint _2674 = _2673 + 1u;
                if (_2674 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2667 = _2523;
                    _2668 = _2525;
                    _2669 = _2527;
                    _2670 = _2529;
                    _2671 = _2531;
                    _2672 = _2533;
                    _2673 = _2674;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
        }
        uvec4 _2536 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2537 = _2536.z;
        uint _2539 = (_2537 >> 8u) & 15u;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((4294967295u << _2539) & _2421) == 0u)
        {
            _2635 = _2522;
            _2637 = _2524;
            _2639 = _2526;
            _2641 = _2528;
            _2643 = _2530;
            _2645 = _2532;
        }
        else
        {
            float _2660 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
            float _2661 = _2660 * _2375;
            float _2662 = _2660 * _2376;
            float _2663 = _2660 * _2377;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2539 < ((_2537 >> 12u) & 15u))
            {
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2774 = _2522;
                float _2775 = _2524;
                float _2776 = _2526;
                float _2777 = _2528;
                float _2778 = _2530;
                float _2779 = _2532;
                uint _2780 = _2539;
                uint _2789;
                bool _2790;
                for (;;)
                {
                    _2789 = texelFetch(g_lightClassification, int((((_2415 << 5u) + (_2401 << 9u)) + (_2780 << 2u)) >> 2u)).x;
                    _2790 = _2789 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2790)
                    {
                        frontier_phi_67_pred = _2777;
                        frontier_phi_67_pred_1 = _2778;
                        frontier_phi_67_pred_2 = _2779;
                        frontier_phi_67_pred_3 = _2776;
                        frontier_phi_67_pred_4 = _2775;
                        frontier_phi_67_pred_5 = _2774;
                    }
                    else
                    {
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _3273;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        float _2991 = _2778;
                        float _2992 = _2779;
                        uint _2993 = _2789;
                        uint _2994;
                        vec4 _3019;
                        float _3020;
                        vec4 _3035;
                        vec3 _3047;
                        vec4 _3062;
                        vec4 _3078;
                        float _3124;
                        bool _3125;
                        for (;;)
                        {
                            uint _3004 = ((_2780 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2993));
                            _2994 = (_2993 + 4294967295u) & _2993;
                            uint _3006 = _3004 * 40u;
                            _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3020 = _3019.w;
                            uint _3022 = (_3004 * 40u) + 4u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            uint _3037 = (_3004 * 40u) + 8u;
                            _3047 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x));
                            uint _3049 = (_3004 * 40u) + 16u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3065 = (_3004 * 40u) + 20u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3080 = (_3004 * 40u) + 24u;
                            vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3099 = (_3004 * 40u) + 28u;
                            vec4 _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            _3124 = fma(_2377, _3112.z, fma(_2376, _3112.y, _3112.x * _2375)) + _3112.w;
                            _3125 = !((fma(_2377, _3093.z, fma(_2376, _3093.y, _3093.x * _2375)) + _3093.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3125)
                            {
                                float _3152 = _3019.x - _2375;
                                float _3153 = _3019.y - _2376;
                                float _3154 = _3019.z - _2377;
                                float _3155 = dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154));
                                float _3158 = inversesqrt(_3155);
                                float _3159 = _3158 * _3152;
                                float _3160 = _3158 * _3153;
                                float _3161 = _3158 * _3154;
                                float _3165 = 1.0 - (_3155 / (_3020 * _3020));
                                float _4234 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3170 = sqrt(_3155) * _3035.w;
                                float _3172 = 1.39999997615814208984375 / (_3170 + 1.39999997615814208984375);
                                float _3173 = _3172 * _3172;
                                float _3176 = ((1.0 - _3173) * dot(vec3(_3159, _3160, _3161), vec3(_682, _685, _688))) + _3173;
                                float _3179 = _3170 * _3170;
                                float _3183 = (fma(_2377, _3062.z, fma(_2376, _3062.y, _3062.x * _2375)) + _3062.w) / _3124;
                                float _3184 = (fma(_2377, _3078.z, fma(_2376, _3078.y, _3078.x * _2375)) + _3078.w) / _3124;
                                float _3188 = 1.0 - dot(vec2(_3183, _3184), vec2(_3183, _3184));
                                float _4250 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3190 = _3189 * (((isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0))) * _3166) / ((_3179 * 0.699999988079071044921875) + 1.0));
                                float _3202 = exp2(log2(1.0 / ((_3179 * 3.5) + 5.0)) * 0.25);
                                float _3203 = 1.0 - _742;
                                float _3210 = sqrt(1.0 - ((1.0 - (_3203 * _3203)) * (1.0 - (_3202 * _3202))));
                                float _3211 = _3210 * _3210;
                                float _3212 = _3211 * _3211;
                                float _3213 = _3159 - _2661;
                                float _3214 = _3160 - _2662;
                                float _3215 = _3161 - _2663;
                                float _3219 = inversesqrt(dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215)));
                                float _3223 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2661, (-0.0) - _2662, (-0.0) - _2663));
                                float _4261 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3227 = dot(vec3(_682, _685, _688), vec3(_3219 * _3213, _3219 * _3214, _3219 * _3215));
                                float _4272 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3234 = ((_3230 * _3230) * (_3212 + (-1.0))) + 1.0;
                                float _3235 = _3172 * _3211;
                                float _3236 = _3235 * _3235;
                                float _3242 = ((1.0 - _3236) * dot(vec3(_682, _685, _688), vec3(_3159, _3160, _3161))) + _3236;
                                float _4283 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3244 = 1.0 - _3211;
                                float _3254 = (0.5 / (((_3243 * ((_3226 * _3244) + _3211)) + 9.9999999392252902907785028219223e-09) + (((_3243 * _3244) + _3211) * _3226))) * _3243;
                                float _4294 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3264 = (_3189 * _3166) * (((_3212 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3234 * _3234) * ((_3179 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3264 * _3047.x;
                                frontier_phi_73_pred_1 = _3264 * _3047.y;
                                frontier_phi_73_pred_2 = _3190 * _3035.z;
                                frontier_phi_73_pred_3 = _3190 * _3035.y;
                                frontier_phi_73_pred_4 = _3190 * _3035.x;
                                frontier_phi_73_pred_5 = _3264 * _3047.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3268 = frontier_phi_73_pred;
                            _3269 = frontier_phi_73_pred_1;
                            _3273 = frontier_phi_73_pred_2;
                            _3272 = frontier_phi_73_pred_3;
                            _3271 = frontier_phi_73_pred_4;
                            _3270 = frontier_phi_73_pred_5;
                            _2977 = _3271 + _2990;
                            _2978 = _3272 + _2991;
                            _2979 = _3273 + _2992;
                            _2974 = _3268 + _2987;
                            _2975 = _3269 + _2988;
                            _2976 = _3270 + _2989;
                            if (_2994 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2978;
                                _2992 = _2979;
                                _2993 = _2994;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2977;
                        frontier_phi_67_pred_1 = _2978;
                        frontier_phi_67_pred_2 = _2979;
                        frontier_phi_67_pred_3 = _2976;
                        frontier_phi_67_pred_4 = _2975;
                        frontier_phi_67_pred_5 = _2974;
                    }
                    _2642 = frontier_phi_67_pred;
                    _2644 = frontier_phi_67_pred_1;
                    _2646 = frontier_phi_67_pred_2;
                    _2640 = frontier_phi_67_pred_3;
                    _2638 = frontier_phi_67_pred_4;
                    _2636 = frontier_phi_67_pred_5;
                    uint _2781 = _2780 + 1u;
                    if (_2781 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2774 = _2636;
                        _2775 = _2638;
                        _2776 = _2640;
                        _2777 = _2642;
                        _2778 = _2644;
                        _2779 = _2646;
                        _2780 = _2781;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2644;
                frontier_phi_55_56_ladder_1 = _2646;
                frontier_phi_55_56_ladder_2 = _2642;
                frontier_phi_55_56_ladder_3 = _2640;
                frontier_phi_55_56_ladder_4 = _2638;
                frontier_phi_55_56_ladder_5 = _2636;
            }
            else
            {
                frontier_phi_55_56_ladder = _2530;
                frontier_phi_55_56_ladder_1 = _2532;
                frontier_phi_55_56_ladder_2 = _2528;
                frontier_phi_55_56_ladder_3 = _2526;
                frontier_phi_55_56_ladder_4 = _2524;
                frontier_phi_55_56_ladder_5 = _2522;
            }
            _2635 = frontier_phi_55_56_ladder_5;
            _2637 = frontier_phi_55_56_ladder_4;
            _2639 = frontier_phi_55_56_ladder_3;
            _2641 = frontier_phi_55_56_ladder_2;
            _2643 = frontier_phi_55_56_ladder;
            _2645 = frontier_phi_55_56_ladder_1;
        }
        float _2650 = isnan(1.0) ? _726 : (isnan(_726) ? 1.0 : min(_726, 1.0));
        _2434 = (_2650 * _2641) + _1889;
        _2436 = (_2650 * _2643) + _1891;
        _2438 = (_2650 * _2645) + _1893;
        _2440 = ((_2635 * 0.039999999105930328369140625) * _2650) + _2219;
        _2442 = ((_2637 * 0.039999999105930328369140625) * _2650) + _2221;
        _2444 = ((_2639 * 0.039999999105930328369140625) * _2650) + _2223;
    }
    else
    {
        _2434 = _1889;
        _2436 = _1891;
        _2438 = _1893;
        _2440 = _2219;
        _2442 = _2221;
        _2444 = _2223;
    }
    float _4310 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4321 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4332 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    uint _2464 = _230 + 6u;
    float _2472 = _663 / cbSceneParam._m0[86u].x;
    float _2473 = _664 / cbSceneParam._m0[86u].y;
    vec4 _2487 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2472, _2473, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2489 = _2487.x;
    float _2490 = _2487.y;
    float _2491 = _2487.z;
    float _2492 = _2487.w;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2547 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2548 = _2547 / _596;
        float _2559 = _2548 * _648;
        float _2560 = _649 * _2548;
        float _2561 = (-0.0) - _2560;
        float _2563 = _2548 * _650;
        float _2565 = (cbSceneParam._m0[77u].w * _2561) / _2547;
        float _2566 = _2565 + cbSceneParam._m0[79u].w;
        float _2567 = cbSceneParam._m0[79u].w - _2560;
        float _2573 = sqrt(((_2559 * _2559) + (_2560 * _2560)) + (_2563 * _2563));
        float _2576 = (1.0 - (cbSceneParam._m0[77u].w / _2547)) * _2573;
        float _2581 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2583 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2736;
        if (abs((_2561 - _2565) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2736 = ((((_2566 > 0.0) ? exp2(_2581 * _2566) : (2.0 - exp2(_2583 * _2566))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2576;
        }
        else
        {
            float _2696 = 1.0 / cbSceneParam._m0[80u].x;
            float _2697 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : max(_2566, _2567));
            float _2698 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : min(_2566, _2567));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            float _2708 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : min(_2698, 0.0));
            _2736 = ((abs(_2573 / _2561) * cbSceneParam._m0[80u].y) * ((((_2707 - _2708) * 2.0) - ((exp2(_2581 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)))) - exp2(_2581 * (isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))))) * _2696)) - ((exp2(_2583 * _2707) - exp2(_2583 * _2708)) * _2696))) + (_2576 * cbSceneParam._m0[80u].z);
        }
        vec4 _2738 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2472, _2473, 1.0), 0.0);
        float _2747 = exp2((_2736 * (-1.44269502162933349609375)) * (1.0 - _2738.w));
        float _2748 = log2(_2747);
        float _2764 = log2(_2492);
        _2585 = (exp2(_2764 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].x)) * _2738.x) / cbSceneParam._m0[78u].x)) + _2489;
        _2587 = (exp2(_2764 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].y)) * _2738.y) / cbSceneParam._m0[78u].y)) + _2490;
        _2589 = (exp2(_2764 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2748 * cbSceneParam._m0[78u].z)) * _2738.z) / cbSceneParam._m0[78u].z)) + _2491;
        _2591 = _2747 * _2492;
    }
    else
    {
        _2585 = _2489;
        _2587 = _2490;
        _2589 = _2491;
        _2591 = _2492;
    }
    float _2603 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2604 = _2603 == 3.0;
    float _2605 = log2(_2591);
    float _2612 = exp2(_2605 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2434 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _726))) + ((_2440 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2613 = exp2(_2605 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2436 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _726))) + ((_2442 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2614 = exp2(_2605 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2438 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _726))) + ((_2444 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1531)) * cbPerFrame._m0[3u].x));
    float _2623 = (_2603 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2623 * (_2604 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.y = _2623 * (_2604 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.z = _2623 * (_2604 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.w = cbInstanceData._m0[_2464].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2464].w;
}


