#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _250) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _251) + cbTextureTilingScale._m0[14u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _352 = (_343.y * 2.0) + (-1.0);
    float _353 = dot(vec2(_351, _352), vec2(_351, _352));
    float _3635 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _359 = sqrt(1.0 - (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))));
    float _364 = _351 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_317.x * 2.0) + (-1.0)));
    float _365 = _352 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_317.y * 2.0) + (-1.0)));
    float _368 = fma(_359, _218, fma(_365, _225, _364 * _211));
    float _371 = fma(_359, _219, fma(_365, _226, _364 * _212));
    float _374 = fma(_359, _220, fma(_365, _227, _364 * _213));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _424 = ((_416 - _417) * cbMtdParam._m0[24u].z) + _417;
    float _426 = (cbMtdParam._m0[19u].x + dot(vec4(_378 * _368, _378 * _371, _378 * _374, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_424 * cbMtdParam._m0[21u].z);
    float _3646 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _442 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_424 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3657 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _447 = ((_427 * ((_297.x * cbMtdParam._m0[18u].x) - _276)) * _443) + _276;
    float _448 = ((_427 * ((_297.y * cbMtdParam._m0[18u].y) - _277)) * _443) + _277;
    float _449 = ((_427 * ((_297.z * cbMtdParam._m0[18u].z) - _278)) * _443) + _278;
    float _454 = (((_317.z - _347) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _347;
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _474 = (_467.x * 2.0) + (-1.0);
    float _475 = (_467.y * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3668 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _485 = (((_467.z - _454) * _427) * _443) + _454;
    float _500 = (((cbMtdParam._m0[21u].x * _364) + ((_474 - _364) * _427)) * _443) + _364;
    float _501 = (((cbMtdParam._m0[21u].x * _365) + ((_475 - _365) * _427)) * _443) + _365;
    float _502 = (((sqrt(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) - _359) * _427) * _443) + _359;
    float _507 = cbMtdParam._m0[22u].x + _343.w;
    float _510 = fma(_502, _218, fma(_501, _225, _500 * _211));
    float _513 = fma(_502, _219, fma(_501, _226, _500 * _212));
    float _516 = fma(_502, _220, fma(_501, _227, _500 * _213));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3679 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _524 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _3690 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3701 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3712 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3723 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _583 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _593 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _583);
    float _594 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _583);
    float _595 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _583);
    float _599 = inversesqrt(dot(vec3(_593, _594, _595), vec3(_593, _594, _595)));
    float _600 = _593 * _599;
    float _601 = _594 * _599;
    float _602 = _595 * _599;
    float _608 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _609 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _630 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _633 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _636 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _650 = (_230 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _656 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) * cbInstanceData._m0[_650].x;
    float _657 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_650].y;
    float _658 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_650].z;
    float _3734 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _659 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _3745 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _660 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _3756 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _661 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    vec4 _670 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _608, cbSceneParam._m0[86u].y * _609));
    float _674 = ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * TEXCOORD_5.w) * _670.x;
    float _675 = dot(vec3(_521, _522, _523), vec3(_600, _601, _602));
    float _678 = _675 * 2.0;
    float _682 = (_678 * _521) - _600;
    float _683 = (_678 * _522) - _601;
    float _684 = (_678 * _523) - _602;
    float _688 = abs(dot(vec3(_600, _601, _602), vec3(_521, _522, _523)));
    float _3767 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _690 = sqrt(_524);
    float _703 = exp2((_690 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_690 * 3.0));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _769 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _773 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _777 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _802 = _735 + _521;
        float _803 = _739 + _522;
        float _804 = _743 + _523;
        float _814 = fma(_804, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802)) - _769;
        float _815 = fma(_804, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802)) - _773;
        float _816 = fma(_804, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802)) - _777;
        float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
        float _833 = ((_820 * _814) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_769 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_820 * _815) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_773 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_820 * _816) / cbModelParam._m0[34u].z) + ((((((_777 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(_521, _522, _523), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3815 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(_521, _522, _523), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3848 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_521, _522, _523), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3881 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1084 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1088 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1092 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1115 = _735 + _521;
        float _1116 = _739 + _522;
        float _1117 = _743 + _523;
        float _1127 = fma(_1117, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115)) - _1084;
        float _1128 = fma(_1117, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115)) - _1088;
        float _1129 = fma(_1117, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115)) - _1092;
        float _1133 = inversesqrt(dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129)));
        float _1146 = ((_1133 * _1127) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1084 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1133 * _1128) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1088 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1133 * _1129) / cbModelParam._m0[35u].z) + ((((((_1092 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1146, _1147, _1148), 0.0);
        float _1183 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1150.x + (-0.5));
        float _1185 = _1183 * (_1150.y + (-0.5));
        float _1186 = _1183 * (_1150.z + (-0.5));
        float _1193 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1157.x + (-0.5));
        float _1195 = _1193 * (_1157.y + (-0.5));
        float _1196 = _1193 * (_1157.z + (-0.5));
        float _1203 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1164.x + (-0.5));
        float _1205 = _1203 * (_1164.y + (-0.5));
        float _1206 = _1203 * (_1164.z + (-0.5));
        float _1213 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1171.x + (-0.5));
        float _1215 = _1213 * (_1171.y + (-0.5));
        float _1216 = _1213 * (_1171.z + (-0.5));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = _1184 * 0.5;
        float _1221 = _1194 * 0.5;
        float _1222 = _1204 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_521, _522, _523), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3944 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1247 + 1.0))) + _1252) * _1217;
        float _1262 = _1185 * 0.5;
        float _1263 = _1195 * 0.5;
        float _1264 = _1205 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_521, _522, _523), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3977 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1289 + 1.0))) + _1294) * _1218;
        float _1304 = _1186 * 0.5;
        float _1305 = _1196 * 0.5;
        float _1306 = _1206 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_521, _522, _523), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4010 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1331 + 1.0))) + _1336) * _1219;
        _1353 = _1186;
        _1354 = _1185;
        _1355 = _1184;
        _1356 = _1196;
        _1357 = _1195;
        _1358 = _1194;
        _1359 = _1206;
        _1360 = _1205;
        _1361 = _1204;
        _1362 = _1219;
        _1363 = _1218;
        _1364 = _1217;
        _1365 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
    }
    else
    {
        _1353 = _1045;
        _1354 = _1045;
        _1355 = _1045;
        _1356 = _1045;
        _1357 = _1045;
        _1358 = _1045;
        _1359 = _1045;
        _1360 = _1045;
        _1361 = _1045;
        _1362 = _1045;
        _1363 = _1045;
        _1364 = _1045;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1377 = (cbModelParam._m0[1u].x * (_1365 - _1057)) + _1057;
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1058)) + _1058;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1059)) + _1059;
    float _1400 = fma(_1379, cbSceneParam._m0[89u].z, fma(_1378, cbSceneParam._m0[89u].y, _1377 * cbSceneParam._m0[89u].x));
    float _1403 = fma(_1379, cbSceneParam._m0[90u].z, fma(_1378, cbSceneParam._m0[90u].y, _1377 * cbSceneParam._m0[90u].x));
    float _1406 = fma(_1379, cbSceneParam._m0[91u].z, fma(_1378, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1377));
    float _1421 = _682 * 0.5;
    float _1422 = _683 * 0.5;
    float _1423 = _684 * 0.5;
    float _1424 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1427 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1430 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1353, _1356, _1359, _1362));
    float _1464;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1437 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1441 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1445 = dot(vec4(_1421, _1422, _1423, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1452 = dot(vec4(cbModelParam._m0[39u]), vec4(_1421, _1422, _1423, 1.0));
        _1464 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1464 = 1.0;
    }
    float _1475;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1466 = dot(vec4(cbModelParam._m0[40u]), vec4(_1421, _1422, _1423, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1466) ? 0.0 : (isnan(0.0) ? _1466 : max(0.0, _1466))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1479 = (_1475 * cbModelParam._m0[1u].x) + (_1464 * (1.0 - cbModelParam._m0[1u].x));
    float _1489 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1490 = isnan(_1489) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1489 : min(cbModelParam._m0[25u].z, _1489));
    float _1570;
    float _1572;
    float _1574;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1537 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1541 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1545 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1548 = fma(_684, cbModelParam._m0[13u].z, fma(_683, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682));
        float _1551 = fma(_684, cbModelParam._m0[14u].z, fma(_683, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682));
        float _1554 = fma(_684, cbModelParam._m0[15u].z, fma(_683, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682));
        float _1582;
        if (_1548 > 0.0)
        {
            _1582 = abs((1.0 - _1537) / _1548);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1537 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1582 = frontier_phi_14_12_ladder;
        }
        float _1752;
        if (_1551 > 0.0)
        {
            _1752 = abs((1.0 - _1541) / _1551);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1541 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1752 = frontier_phi_23_19_ladder;
        }
        float _2048;
        if (_1554 > 0.0)
        {
            _2048 = abs((1.0 - _1545) / _1554);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1545 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2048 = frontier_phi_35_30_ladder;
        }
        float _2050 = isnan(_1752) ? _1582 : (isnan(_1582) ? _1752 : min(_1582, _1752));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1548) + _1537;
        float _2056 = (_2051 * _1551) + _1541;
        float _2057 = (_2051 * _1554) + _1545;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2202 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1490);
            frontier_phi_13_35_ladder = _2202.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2202.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2202.x * cbModelParam._m0[1u].y;
        }
        _1570 = frontier_phi_13_35_ladder_2;
        _1572 = frontier_phi_13_35_ladder_1;
        _1574 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_682, _683, _684), _1490);
        _1570 = _1558.x * cbModelParam._m0[1u].y;
        _1572 = _1558.y * cbModelParam._m0[1u].y;
        _1574 = _1558.z * cbModelParam._m0[1u].y;
    }
    float _1578 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1579 = isnan(_1578) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1578 : min(cbModelParam._m0[25u].w, _1578));
    float _1668;
    float _1670;
    float _1672;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1632 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1636 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1640 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1643 = fma(_684, cbModelParam._m0[21u].z, fma(_683, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682));
        float _1646 = fma(_684, cbModelParam._m0[22u].z, fma(_683, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682));
        float _1649 = fma(_684, cbModelParam._m0[23u].z, fma(_683, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682));
        float _1757;
        if (_1643 > 0.0)
        {
            _1757 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1757 = frontier_phi_25_21_ladder;
        }
        float _2075;
        if (_1646 > 0.0)
        {
            _2075 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2075 = frontier_phi_37_32_ladder;
        }
        float _2402;
        if (_1649 > 0.0)
        {
            _2402 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2402 = frontier_phi_47_44_ladder;
        }
        float _2404 = isnan(_2075) ? _1757 : (isnan(_1757) ? _2075 : min(_1757, _2075));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1643) + _1632;
        float _2410 = (_2405 * _1646) + _1636;
        float _2411 = (_2405 * _1649) + _1640;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2411, cbModelParam._m0[17u].z, fma(_2410, cbModelParam._m0[17u].y, _2409 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2411, cbModelParam._m0[18u].z, fma(_2410, cbModelParam._m0[18u].y, _2409 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2411, cbModelParam._m0[19u].z, fma(_2410, cbModelParam._m0[19u].y, _2409 * cbModelParam._m0[19u].x))), _1579);
            frontier_phi_22_47_ladder = _2529.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2529.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2529.x * cbModelParam._m0[1u].z;
        }
        _1668 = frontier_phi_22_47_ladder_2;
        _1670 = frontier_phi_22_47_ladder_1;
        _1672 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_682, _683, _684), _1579);
        _1668 = _1652.x * cbModelParam._m0[1u].z;
        _1670 = _1652.y * cbModelParam._m0[1u].z;
        _1672 = _1652.z * cbModelParam._m0[1u].z;
    }
    float _1684 = ((((1.0 - _703) * ((_690 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_703 * _690)) * _674;
    float _1685 = _1684 * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1686 = _1684 * ((cbModelParam._m0[1u].w * (_1670 - _1572)) + _1572);
    float _1687 = _1684 * ((cbModelParam._m0[1u].w * (_1672 - _1574)) + _1574);
    float _1690 = fma(_1687, cbSceneParam._m0[89u].z, fma(_1686, cbSceneParam._m0[89u].y, _1685 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1687, cbSceneParam._m0[90u].z, fma(_1686, cbSceneParam._m0[90u].y, _1685 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1687, cbSceneParam._m0[91u].z, fma(_1686, cbSceneParam._m0[91u].y, _1685 * cbSceneParam._m0[91u].x));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1735 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1739 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1743 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1744 = _1731 / _1743;
    float _1745 = _1735 / _1743;
    float _1746 = _1739 / _1743;
    float _1893;
    float _1894;
    float _1895;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1773 = ((uint(_1746 > cbSceneParam._m0[59u].y) + uint(_1746 > cbSceneParam._m0[59u].x)) + uint(_1746 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1774 = _1773 + 43u;
        uint _1782 = _1773 + 44u;
        uint _1790 = _1773 + 45u;
        uint _1798 = _1773 + 46u;
        float _1809 = fma(_1743, cbSceneParam._m0[_1774].w, fma(_1739, cbSceneParam._m0[_1774].z, fma(_1735, cbSceneParam._m0[_1774].y, _1731 * cbSceneParam._m0[_1774].x)));
        float _1813 = fma(_1743, cbSceneParam._m0[_1782].w, fma(_1739, cbSceneParam._m0[_1782].z, fma(_1735, cbSceneParam._m0[_1782].y, _1731 * cbSceneParam._m0[_1782].x)));
        float _1821 = fma(_1743, cbSceneParam._m0[_1798].w, fma(_1739, cbSceneParam._m0[_1798].z, fma(_1735, cbSceneParam._m0[_1798].y, _1731 * cbSceneParam._m0[_1798].x)));
        float _1826 = cbSceneParam._m0[33u].z * _1821;
        float _1828 = cbSceneParam._m0[33u].w * _1821;
        float _1831 = fma(_1743, cbSceneParam._m0[_1790].w, fma(_1739, cbSceneParam._m0[_1790].z, fma(_1735, cbSceneParam._m0[_1790].y, _1731 * cbSceneParam._m0[_1790].x))) / _1821;
        float _1879 = (cbSceneParam._m0[33u].x - sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746))) * cbSceneParam._m0[33u].y;
        float _4136 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1886 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 + _1809) / _1821, (_1828 + _1813) / _1821), _1831), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 + _1809) / _1821, (_1813 - _1826) / _1821), _1831), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 - _1826) / _1821, (_1813 - _1828) / _1821), _1831), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1809 - _1828) / _1821, (_1826 + _1813) / _1821), _1831), 0.0)).x), vec4(0.25)));
        _1893 = 1.0 - (_1886 * cbSceneParam._m0[34u].x);
        _1894 = 1.0 - (_1886 * cbSceneParam._m0[34u].y);
        _1895 = 1.0 - (_1886 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1893 = 1.0;
        _1894 = 1.0;
        _1895 = 1.0;
    }
    float _1959;
    float _1961;
    float _1963;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1947 = fma(_1743, cbSceneParam._m0[63u].w, fma(_1739, cbSceneParam._m0[63u].z, fma(_1735, cbSceneParam._m0[63u].y, _1731 * cbSceneParam._m0[63u].x)));
        float _1948 = fma(_1743, cbSceneParam._m0[60u].w, fma(_1739, cbSceneParam._m0[60u].z, fma(_1735, cbSceneParam._m0[60u].y, _1731 * cbSceneParam._m0[60u].x))) / _1947;
        float _1949 = fma(_1743, cbSceneParam._m0[61u].w, fma(_1739, cbSceneParam._m0[61u].z, fma(_1735, cbSceneParam._m0[61u].y, _1731 * cbSceneParam._m0[61u].x))) / _1947;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1948 >= cbSceneParam._m0[64u].x) && (_1949 >= cbSceneParam._m0[64u].y)) && (_1948 <= cbSceneParam._m0[64u].z)) && (_1949 <= cbSceneParam._m0[64u].w))
        {
            float _2088 = fma(_1743, cbSceneParam._m0[62u].w, fma(_1739, cbSceneParam._m0[62u].z, fma(_1735, cbSceneParam._m0[62u].y, _1731 * cbSceneParam._m0[62u].x))) / _1947;
            float _2092 = isnan(cbSceneParam._m0[41u].w) ? _2088 : (isnan(_2088) ? cbSceneParam._m0[41u].w : max(_2088, cbSceneParam._m0[41u].w));
            float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746))) * cbSceneParam._m0[33u].y;
            float _4152 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
            float _2142 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1948, cbSceneParam._m0[33u].w + _1949), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1948, _1949 - cbSceneParam._m0[33u].z), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1948 - cbSceneParam._m0[33u].z, _1949 - cbSceneParam._m0[33u].w), _2092), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1948 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1949), _2092), 0.0)).x), vec4(0.25)));
            float _2146 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
            float _2147 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
            float _2148 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2148) ? _1895 : (isnan(_1895) ? _2148 : min(_1895, _2148));
            frontier_phi_34_33_ladder_1 = isnan(_2147) ? _1894 : (isnan(_1894) ? _2147 : min(_1894, _2147));
            frontier_phi_34_33_ladder_2 = isnan(_2146) ? _1893 : (isnan(_1893) ? _2146 : min(_1893, _2146));
        }
        else
        {
            frontier_phi_34_33_ladder = _1895;
            frontier_phi_34_33_ladder_1 = _1894;
            frontier_phi_34_33_ladder_2 = _1893;
        }
        _1959 = frontier_phi_34_33_ladder_2;
        _1961 = frontier_phi_34_33_ladder_1;
        _1963 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1959 = _1893;
        _1961 = _1894;
        _1963 = _1895;
    }
    uvec4 _1968 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1970 = _1968.x * 14u;
    uint _1971 = _1970 + 13u;
    float _1978 = _674 + (-1.0);
    float _1983 = (cbLight._m0[_1971].x * _1978) + 1.0;
    float _1984 = (cbLight._m0[_1971].y * _1978) + 1.0;
    float _1985 = (cbLight._m0[_1971].z * _1978) + 1.0;
    float _1986 = (cbLight._m0[_1971].w * _1978) + 1.0;
    uint _1987 = _1970 + 5u;
    float _1993 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _1997 = _1970 + 4u;
    float _2007 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
    uint _2011 = _1970 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_521, _522, _523));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_521, _522, _523));
    float _4188 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4199 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1987].x * _1993) * _2032) + (((cbLight._m0[_1997].x * _1959) * _2007) * _2030);
    float _2040 = ((_1993 * cbLight._m0[_1987].y) * _2032) + (((cbLight._m0[_1997].y * _1961) * _2007) * _2030);
    float _2041 = ((_1993 * cbLight._m0[_1987].z) * _2032) + (((cbLight._m0[_1997].z * _1963) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1970 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2047)
    {
        _2149 = _2039;
        _2151 = _2040;
        _2153 = _2041;
    }
    else
    {
        uint _2157 = _1970 + 6u;
        float _2173 = (dot(vec3(cbLight._m0[_1970 + 2u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4210 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2176 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2149 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _2039;
        _2151 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _2040;
        _2153 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _2041;
    }
    bool _2156 = _2045.y == 0u;
    float _2211;
    float _2213;
    float _2215;
    if (_2156)
    {
        _2211 = _2149;
        _2213 = _2151;
        _2215 = _2153;
    }
    else
    {
        uint _2373 = _1970 + 7u;
        float _2389 = (dot(vec3(cbLight._m0[_1970 + 3u].xyz), vec3(_521, _522, _523)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4226 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2392 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2211 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2149;
        _2213 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2151;
        _2215 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2153;
    }
    uint _2218 = _1970 + 8u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _524) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_1970].x + _600;
    float _2234 = cbLight._m0[_1970].y + _601;
    float _2235 = cbLight._m0[_1970].z + _602;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1970].xyz));
    float _4242 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _2247 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2248 = dot(vec3(_521, _522, _523), vec3(_2240, _2241, _2242));
    float _4264 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2240, _2241, _2242));
    float _4275 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2232 * _2232;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2232;
    float _2283 = (0.5 / (((_2247 * ((_2246 * _2272) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2272) + _2232) * _2246))) * _2246;
    float _4286 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    uint _2299 = _1970 + 9u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _524) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2011].x + _600;
    float _2313 = cbLight._m0[_2011].y + _601;
    float _2314 = cbLight._m0[_2011].z + _602;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2011].xyz));
    float _4297 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2326 = dot(vec3(_521, _522, _523), vec3(_2319, _2320, _2321));
    float _4308 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2319, _2320, _2321));
    float _4319 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2311 * _2311;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2348 = 1.0 - _2311;
    float _2358 = (0.5 / (((_2247 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2348) + _2311) * _2325))) * _2325;
    float _4330 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    float _2370 = (((_2347 * cbLight._m0[_2299].x) * _2360) * _1993) + ((((cbLight._m0[_2218].x * _1959) * _2271) * _2285) * _2007);
    float _2371 = (((_2347 * cbLight._m0[_2299].y) * _2360) * _1993) + ((((cbLight._m0[_2218].y * _1961) * _2271) * _2285) * _2007);
    float _2372 = (((_2347 * cbLight._m0[_2299].z) * _2360) * _1993) + ((((cbLight._m0[_2218].z * _1963) * _2271) * _2285) * _2007);
    float _2428;
    float _2430;
    float _2432;
    if (_2047)
    {
        _2428 = _2370;
        _2430 = _2371;
        _2432 = _2372;
    }
    else
    {
        uint _2434 = _1970 + 2u;
        uint _2438 = _1970 + 10u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _524) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _600;
        float _2455 = cbLight._m0[_2434].y + _601;
        float _2456 = cbLight._m0[_2434].z + _602;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2434].xyz));
        float _4341 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2468 = dot(vec3(_521, _522, _523), vec3(_2461, _2462, _2463));
        float _4352 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4363 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2490 = 1.0 - _2453;
        float _2500 = (0.5 / (((_2247 * ((_2467 * _2490) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2490) + _2453) * _2467))) * _2467;
        float _4374 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
        _2428 = (((_2489 * cbLight._m0[_2438].x) * _2502) * _2503) + _2370;
        _2430 = (((_2489 * cbLight._m0[_2438].y) * _2502) * _2503) + _2371;
        _2432 = (((_2489 * cbLight._m0[_2438].z) * _2502) * _2503) + _2372;
    }
    float _2534;
    float _2536;
    float _2538;
    if (_2156)
    {
        _2534 = _2428;
        _2536 = _2430;
        _2538 = _2432;
    }
    else
    {
        uint _2545 = _1970 + 3u;
        uint _2549 = _1970 + 11u;
        float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _524) * 0.949999988079071044921875);
        float _2564 = _2563 * _2563;
        float _2565 = cbLight._m0[_2545].x + _600;
        float _2566 = cbLight._m0[_2545].y + _601;
        float _2567 = cbLight._m0[_2545].z + _602;
        float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
        float _2572 = _2571 * _2565;
        float _2573 = _2571 * _2566;
        float _2574 = _2571 * _2567;
        float _2575 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_2545].xyz));
        float _4390 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2579 = dot(vec3(_521, _522, _523), vec3(_2572, _2573, _2574));
        float _4401 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2582 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2583 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2572, _2573, _2574));
        float _4412 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2587 = _2564 * _2564;
        float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
        float _2600 = (exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2601 = 1.0 - _2564;
        float _2611 = (0.5 / (((_2247 * ((_2578 * _2601) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2247 * _2601) + _2564) * _2578))) * _2578;
        float _4423 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2613 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
        float _2614 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2534 = (((_2600 * cbLight._m0[_2549].x) * _2613) * _2614) + _2428;
        _2536 = (((_2600 * cbLight._m0[_2549].y) * _2613) * _2614) + _2430;
        _2538 = (((_2600 * cbLight._m0[_2549].z) * _2613) * _2614) + _2432;
    }
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_1968.y == 0u)
    {
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.x;
        uint _2647 = uint((float(_2635.y) * floor(float(uint(cbSceneParam._m0[85u].y * _609) / _2636))) + floor(float(uint(cbSceneParam._m0[85u].x * _608) / _2636)));
        float _2657 = (log2(_1746 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2658 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        uint _2661 = uint(isnan(14.0) ? _2658 : (isnan(_2658) ? 14.0 : min(_2658, 14.0)));
        uvec4 _2666 = texelFetch(g_lightClusterGridBuffer, int(((_2661 << 2u) + (_2647 << 6u)) >> 2u));
        uint _2667 = _2666.x;
        uint _2668 = _2635.z;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((((1u << ((_2668 >> 4u) & 15u)) + 4294967295u) & _2667) == 0u) || ((_2668 & 240u) == 0u))
        {
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
        }
        else
        {
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            uint _2898 = 0u;
            uint _2907;
            bool _2908;
            for (;;)
            {
                _2907 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                _2908 = _2907 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2908)
                {
                    frontier_phi_66_pred = _2897;
                    frontier_phi_66_pred_1 = _2896;
                    frontier_phi_66_pred_2 = _2895;
                    frontier_phi_66_pred_3 = _2894;
                    frontier_phi_66_pred_4 = _2893;
                    frontier_phi_66_pred_5 = _2892;
                }
                else
                {
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    float _3021;
                    uint _3022;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2907;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    for (;;)
                    {
                        uint _3026 = uint(findLSB(_3022)) + (_2898 << 5u);
                        uint _3023 = (_3022 + 4294967295u) & _3022;
                        uint _3028 = _3026 * 48u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3028)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3028 + 3u)).x));
                        uint _3048 = (_3026 * 48u) + 4u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3067 = (_3026 * 48u) + 8u;
                        vec3 _3078 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x));
                        float _3082 = _3042.x - _1744;
                        float _3083 = _3042.y - _1745;
                        float _3084 = _3042.z - _1746;
                        float _3085 = dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084));
                        float _3088 = inversesqrt(_3085);
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3092 = dot(vec3(_630, _633, _636), vec3(_3089, _3090, _3091));
                        float _3097 = 1.0 - (_3085 * _3042.w);
                        float _4449 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3098 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3099 = sqrt(_3085) * _3061.w;
                        float _3102 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                        float _3103 = _3102 * _3102;
                        float _3106 = ((1.0 - _3103) * _3092) + _3103;
                        float _3109 = _3099 * _3099;
                        float _3113 = ((isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0))) * _3098) / ((_3109 * 0.699999988079071044921875) + 1.0);
                        float _3117 = (-0.0) - _1744;
                        float _3118 = (-0.0) - _1745;
                        float _3119 = (-0.0) - _1746;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3133 = exp2(log2(1.0 / ((_3109 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _690;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3124 + _3089;
                        float _3145 = _3125 + _3090;
                        float _3146 = _3126 + _3091;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_630, _633, _636), vec3(_3124, _3125, _3126));
                        float _4465 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3158 = dot(vec3(_630, _633, _636), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4476 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3102 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3092) + _3167;
                        float _4487 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4498 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3165 * _3165) * ((_3109 * 2.1991131305694580078125) + 3.141590118408203125))) * _3098;
                        _2951 = (_3113 * _3061.x) + _3019;
                        _2952 = (_3113 * _3061.y) + _3020;
                        _2953 = (_3113 * _3061.z) + _3021;
                        _2948 = (_3193 * _3078.x) + _3016;
                        _2949 = (_3193 * _3078.y) + _3017;
                        _2950 = (_3193 * _3078.z) + _3018;
                        if (_3023 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _3023;
                        }
                    }
                    frontier_phi_66_pred = _2953;
                    frontier_phi_66_pred_1 = _2952;
                    frontier_phi_66_pred_2 = _2951;
                    frontier_phi_66_pred_3 = _2950;
                    frontier_phi_66_pred_4 = _2949;
                    frontier_phi_66_pred_5 = _2948;
                }
                _2758 = frontier_phi_66_pred;
                _2756 = frontier_phi_66_pred_1;
                _2754 = frontier_phi_66_pred_2;
                _2752 = frontier_phi_66_pred_3;
                _2750 = frontier_phi_66_pred_4;
                _2748 = frontier_phi_66_pred_5;
                uint _2899 = _2898 + 1u;
                if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2892 = _2748;
                    _2893 = _2750;
                    _2894 = _2752;
                    _2895 = _2754;
                    _2896 = _2756;
                    _2897 = _2758;
                    _2898 = _2899;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
        }
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.z;
        uint _2764 = (_2762 >> 8u) & 15u;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((4294967295u << _2764) & _2667) == 0u)
        {
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
            _2866 = _2753;
            _2868 = _2755;
            _2870 = _2757;
        }
        else
        {
            float _2885 = inversesqrt(dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746)));
            float _2886 = _2885 * _1744;
            float _2887 = _2885 * _1745;
            float _2888 = _2885 * _1746;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2764 < ((_2762 >> 12u) & 15u))
            {
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2999 = _2747;
                float _3000 = _2749;
                float _3001 = _2751;
                float _3002 = _2753;
                float _3003 = _2755;
                float _3004 = _2757;
                uint _3005 = _2764;
                uint _3014;
                bool _3015;
                for (;;)
                {
                    _3014 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_3005 << 2u)) >> 2u)).x;
                    _3015 = _3014 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3015)
                    {
                        frontier_phi_72_pred = _3004;
                        frontier_phi_72_pred_1 = _3003;
                        frontier_phi_72_pred_2 = _3002;
                        frontier_phi_72_pred_3 = _3001;
                        frontier_phi_72_pred_4 = _3000;
                        frontier_phi_72_pred_5 = _2999;
                    }
                    else
                    {
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3211 = _2999;
                        float _3212 = _3000;
                        float _3213 = _3001;
                        float _3214 = _3002;
                        float _3215 = _3003;
                        float _3216 = _3004;
                        uint _3217 = _3014;
                        uint _3218;
                        vec4 _3243;
                        float _3244;
                        vec4 _3259;
                        vec3 _3271;
                        vec4 _3287;
                        vec4 _3302;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3228 = ((_3005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3217));
                            _3218 = (_3217 + 4294967295u) & _3217;
                            uint _3230 = _3228 * 40u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3244 = _3243.w;
                            uint _3246 = (_3228 * 40u) + 4u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3228 * 40u) + 8u;
                            _3271 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x));
                            uint _3274 = (_3228 * 40u) + 16u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3228 * 40u) + 20u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3228 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3228 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_1746, _3336.z, fma(_1745, _3336.y, _3336.x * _1744)) + _3336.w;
                            _3349 = !((fma(_1746, _3317.z, fma(_1745, _3317.y, _3317.x * _1744)) + _3317.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3243.x - _1744;
                                float _3377 = _3243.y - _1745;
                                float _3378 = _3243.z - _1746;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3244 * _3244));
                                float _4509 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3394 = sqrt(_3379) * _3259.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_630, _633, _636))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_1746, _3287.z, fma(_1745, _3287.y, _3287.x * _1744)) + _3287.w) / _3348;
                                float _3408 = (fma(_1746, _3302.z, fma(_1745, _3302.y, _3302.x * _1744)) + _3302.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4525 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _690;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2886;
                                float _3438 = _3384 - _2887;
                                float _3439 = _3385 - _2888;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_630, _633, _636), vec3((-0.0) - _2886, (-0.0) - _2887, (-0.0) - _2888));
                                float _4536 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3451 = dot(vec3(_630, _633, _636), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4547 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_630, _633, _636), vec3(_3383, _3384, _3385))) + _3460;
                                float _4558 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4569 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3414 * _3259.y;
                                frontier_phi_78_pred_1 = _3414 * _3259.x;
                                frontier_phi_78_pred_2 = _3488 * _3271.z;
                                frontier_phi_78_pred_3 = _3488 * _3271.y;
                                frontier_phi_78_pred_4 = _3488 * _3271.x;
                                frontier_phi_78_pred_5 = _3414 * _3259.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_78_pred;
                            _3495 = frontier_phi_78_pred_1;
                            _3494 = frontier_phi_78_pred_2;
                            _3493 = frontier_phi_78_pred_3;
                            _3492 = frontier_phi_78_pred_4;
                            _3497 = frontier_phi_78_pred_5;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3203 = _3497 + _3216;
                            _3198 = _3492 + _3211;
                            _3199 = _3493 + _3212;
                            _3200 = _3494 + _3213;
                            if (_3218 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3218;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3203;
                        frontier_phi_72_pred_1 = _3202;
                        frontier_phi_72_pred_2 = _3201;
                        frontier_phi_72_pred_3 = _3200;
                        frontier_phi_72_pred_4 = _3199;
                        frontier_phi_72_pred_5 = _3198;
                    }
                    _2871 = frontier_phi_72_pred;
                    _2869 = frontier_phi_72_pred_1;
                    _2867 = frontier_phi_72_pred_2;
                    _2865 = frontier_phi_72_pred_3;
                    _2863 = frontier_phi_72_pred_4;
                    _2861 = frontier_phi_72_pred_5;
                    uint _3006 = _3005 + 1u;
                    if (_3006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2999 = _2861;
                        _3000 = _2863;
                        _3001 = _2865;
                        _3002 = _2867;
                        _3003 = _2869;
                        _3004 = _2871;
                        _3005 = _3006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2871;
                frontier_phi_60_61_ladder_1 = _2869;
                frontier_phi_60_61_ladder_2 = _2865;
                frontier_phi_60_61_ladder_3 = _2863;
                frontier_phi_60_61_ladder_4 = _2861;
                frontier_phi_60_61_ladder_5 = _2867;
            }
            else
            {
                frontier_phi_60_61_ladder = _2757;
                frontier_phi_60_61_ladder_1 = _2755;
                frontier_phi_60_61_ladder_2 = _2751;
                frontier_phi_60_61_ladder_3 = _2749;
                frontier_phi_60_61_ladder_4 = _2747;
                frontier_phi_60_61_ladder_5 = _2753;
            }
            _2860 = frontier_phi_60_61_ladder_4;
            _2862 = frontier_phi_60_61_ladder_3;
            _2864 = frontier_phi_60_61_ladder_2;
            _2866 = frontier_phi_60_61_ladder_5;
            _2868 = frontier_phi_60_61_ladder_1;
            _2870 = frontier_phi_60_61_ladder;
        }
        float _2875 = isnan(1.0) ? _674 : (isnan(_674) ? 1.0 : min(_674, 1.0));
        _2680 = (_2875 * _2866) + _2211;
        _2682 = (_2875 * _2868) + _2213;
        _2684 = (_2875 * _2870) + _2215;
        _2686 = ((_2860 * 0.039999999105930328369140625) * _2875) + _2534;
        _2688 = ((_2862 * 0.039999999105930328369140625) * _2875) + _2536;
        _2690 = ((_2864 * 0.039999999105930328369140625) * _2875) + _2538;
    }
    else
    {
        _2680 = _2211;
        _2682 = _2213;
        _2684 = _2215;
        _2686 = _2534;
        _2688 = _2536;
        _2690 = _2538;
    }
    float _4585 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4596 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4607 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    uint _2710 = _230 + 6u;
    float _2718 = _608 / cbSceneParam._m0[86u].x;
    float _2719 = _609 / cbSceneParam._m0[86u].y;
    vec4 _2733 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2735 = _2733.x;
    float _2736 = _2733.y;
    float _2737 = _2733.z;
    float _2738 = _2733.w;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _2772 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _2773 = _2772 / _542;
        float _2784 = _2773 * _593;
        float _2785 = _594 * _2773;
        float _2786 = (-0.0) - _2785;
        float _2788 = _2773 * _595;
        float _2790 = (cbSceneParam._m0[77u].w * _2786) / _2772;
        float _2791 = _2790 + cbSceneParam._m0[79u].w;
        float _2792 = cbSceneParam._m0[79u].w - _2785;
        float _2798 = sqrt(((_2784 * _2784) + (_2785 * _2785)) + (_2788 * _2788));
        float _2801 = (1.0 - (cbSceneParam._m0[77u].w / _2772)) * _2798;
        float _2806 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2808 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2961;
        if (abs((_2786 - _2790) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2961 = ((((_2791 > 0.0) ? exp2(_2806 * _2791) : (2.0 - exp2(_2808 * _2791))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2801;
        }
        else
        {
            float _2921 = 1.0 / cbSceneParam._m0[80u].x;
            float _2922 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : max(_2791, _2792));
            float _2923 = isnan(_2792) ? _2791 : (isnan(_2791) ? _2792 : min(_2791, _2792));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            float _2933 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : min(_2923, 0.0));
            _2961 = ((abs(_2798 / _2786) * cbSceneParam._m0[80u].y) * ((((_2932 - _2933) * 2.0) - ((exp2(_2806 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0)))) - exp2(_2806 * (isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))))) * _2921)) - ((exp2(_2808 * _2932) - exp2(_2808 * _2933)) * _2921))) + (_2801 * cbSceneParam._m0[80u].z);
        }
        vec4 _2963 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, 1.0), 0.0);
        float _2972 = exp2((_2961 * (-1.44269502162933349609375)) * (1.0 - _2963.w));
        float _2973 = log2(_2972);
        float _2989 = log2(_2738);
        _2810 = (exp2(_2989 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].x)) * _2963.x) / cbSceneParam._m0[78u].x)) + _2735;
        _2812 = (exp2(_2989 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].y)) * _2963.y) / cbSceneParam._m0[78u].y)) + _2736;
        _2814 = (exp2(_2989 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2973 * cbSceneParam._m0[78u].z)) * _2963.z) / cbSceneParam._m0[78u].z)) + _2737;
        _2816 = _2972 * _2738;
    }
    else
    {
        _2810 = _2735;
        _2812 = _2736;
        _2814 = _2737;
        _2816 = _2738;
    }
    float _2828 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2829 = _2828 == 3.0;
    float _2830 = log2(_2816);
    float _2837 = exp2(_2830 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2680 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _674))) + ((_2686 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1479)) * cbPerFrame._m0[3u].x));
    float _2838 = exp2(_2830 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2682 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _674))) + ((_2688 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1479)) * cbPerFrame._m0[3u].x));
    float _2839 = exp2(_2830 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2684 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _674))) + ((_2690 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1479)) * cbPerFrame._m0[3u].x));
    float _2848 = (_2828 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2848 * (_2829 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.y = _2848 * (_2829 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.z = _2848 * (_2829 ? _2839 : (_2839 + (cbSceneParam._m0[72u].w * _2814)));
    SV_Target.w = cbInstanceData._m0[_2710].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2710].w;
}


