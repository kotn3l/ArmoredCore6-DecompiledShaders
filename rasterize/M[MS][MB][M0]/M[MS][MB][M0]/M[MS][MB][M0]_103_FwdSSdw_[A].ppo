#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1264;
float _3648;
float _3649;
float _3650;
float _3651;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _228 = _227 * _219;
    float _229 = _227 * _220;
    float _230 = _227 * _221;
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = _234 * NORMAL.x;
    float _236 = _234 * NORMAL.y;
    float _237 = _234 * NORMAL.z;
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = _241 * TANGENT.x;
    float _243 = _241 * TANGENT.y;
    float _244 = _241 * TANGENT.z;
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _354 = _352.x;
    float _364 = dot(vec4(_354, _352.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _381 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_354 - _364) * cbMtdParam._m0[24u].x) + _364) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3660 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _389 = (_382 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _390 = (_382 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _391 = (_382 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _382) + _430;
    float _442 = ((((_409.x - _428) * _382) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _382) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3671 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    float _453 = fma(_450, _235, fma(_444, _242, _442 * _228));
    float _456 = fma(_450, _236, fma(_444, _243, _442 * _229));
    float _459 = fma(_450, _237, fma(_444, _244, _442 * _230));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _509 = _507.x;
    float _510 = 1.0 - _509;
    float _516 = (cbMtdParam._m0[19u].x + dot(vec4(_463 * _453, _463 * _456, _463 * _459, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_509 - _510) * cbMtdParam._m0[24u].z) + _510) * cbMtdParam._m0[21u].z);
    float _3682 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _519 = (-0.0) - cbMtdParam._m0[24u].y;
    float _521 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _522 = isnan(1.0) ? _521 : (isnan(_521) ? 1.0 : min(_521, 1.0));
    float _529 = _517 - ((_517 * TEXCOORD_8.x) * _522);
    float _530 = _517 - ((_517 * TEXCOORD_8.y) * _522);
    float _531 = _517 - ((_517 * TEXCOORD_8.z) * _522);
    float _538 = (_529 * (cbMtdParam._m0[17u].x - _389)) + _389;
    float _539 = (_530 * (cbMtdParam._m0[17u].y - _390)) + _390;
    float _540 = (_531 * (cbMtdParam._m0[17u].z - _391)) + _391;
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _583 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_554 - _555) * cbMtdParam._m0[24u].w) + _555) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3703 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _592 = ((((cbMtdParam._m0[10u].x - _538) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _584) + _538;
    float _593 = ((((cbMtdParam._m0[10u].y - _539) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _584) + _539;
    float _594 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _540)) * _584) + _540;
    vec4 _608 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _615 = (_608.x * 2.0) + (-1.0);
    float _616 = (_608.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3714 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _625 = ((_608.z - _439) * _529) + _439;
    float _628 = ((cbMtdParam._m0[23u].y - _625) * _584) + _625;
    vec4 _647 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _653 = (_647.x * 2.0) + (-1.0);
    float _654 = (_647.y * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3725 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _670 = ((sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) - _450) * _531) + _450;
    float _673 = (((_615 - _442) * _529) + _442) + (cbMtdParam._m0[21u].x * _442);
    float _674 = (((_616 - _444) * _530) + _444) + (cbMtdParam._m0[21u].x * _444);
    float _685 = (((_653 - _673) + (_673 * cbMtdParam._m0[22u].z)) * _584) + _673;
    float _686 = (((_654 - _674) + (_674 * cbMtdParam._m0[22u].z)) * _584) + _674;
    float _687 = (_584 * (sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) - _670)) + _670;
    float _689 = cbMtdParam._m0[22u].x + _479.w;
    float _692 = fma(_687, _235, fma(_686, _242, _685 * _228));
    float _695 = fma(_687, _236, fma(_686, _243, _685 * _229));
    float _698 = fma(_687, _237, fma(_686, _244, _685 * _230));
    float _702 = inversesqrt(dot(vec3(_692, _695, _698), vec3(_692, _695, _698)));
    float _703 = _702 * _692;
    float _704 = _702 * _695;
    float _705 = _702 * _698;
    float _3736 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _706 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _3758 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3769 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3780 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_775 * _775) + (_776 * _776)) + (_777 * _777));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _3791 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _3802 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) - _952)) + _952) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_705, cbSceneParam._m0[5u].z, fma(_704, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _703));
    float _824 = fma(_705, cbSceneParam._m0[6u].z, fma(_704, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _703));
    float _827 = fma(_705, cbSceneParam._m0[7u].z, fma(_704, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _703));
    uint _840 = _247 + 9u;
    uint _841 = _840 + uint(cbMatDynParam._m0[0u].w);
    float _847 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_841].x;
    float _848 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_841].y;
    float _849 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_841].z;
    float _3813 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _850 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _865 = ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * TEXCOORD_5.w) * _861.x;
    float _866 = dot(vec3(_703, _704, _705), vec3(_782, _783, _784));
    float _869 = _866 * 2.0;
    float _873 = (_869 * _703) - _782;
    float _874 = (_869 * _704) - _783;
    float _875 = (_869 * _705) - _784;
    float _879 = abs(dot(vec3(_782, _783, _784), vec3(_703, _704, _705)));
    float _3846 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _881 = sqrt(_706);
    float _894 = exp2((_881 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_881 * 3.0));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1263;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _988 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _992 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _996 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1021 = _926 + _703;
        float _1022 = _930 + _704;
        float _1023 = _934 + _705;
        float _1033 = fma(_1023, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021)) - _988;
        float _1034 = fma(_1023, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021)) - _992;
        float _1035 = fma(_1023, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021)) - _996;
        float _1039 = inversesqrt(dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035)));
        float _1052 = ((_1039 * _1033) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_988 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1039 * _1034) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_992 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1039 * _1035) / cbModelParam._m0[34u].z) + ((((((_996 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        vec4 _1078 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1052, _1053, _1054), 0.0);
        float _1091 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1057.x + (-0.5));
        float _1093 = _1091 * (_1057.y + (-0.5));
        float _1094 = _1091 * (_1057.z + (-0.5));
        float _1101 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1064.x + (-0.5));
        float _1103 = _1101 * (_1064.y + (-0.5));
        float _1104 = _1101 * (_1064.z + (-0.5));
        float _1111 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1071.x + (-0.5));
        float _1113 = _1111 * (_1071.y + (-0.5));
        float _1114 = _1111 * (_1071.z + (-0.5));
        float _1121 = exp2((_1078.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1078.x + (-0.5));
        float _1123 = _1121 * (_1078.y + (-0.5));
        float _1124 = _1121 * (_1078.z + (-0.5));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = _1092 * 0.5;
        float _1129 = _1102 * 0.5;
        float _1130 = _1112 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1145 = (dot(vec3(_703, _704, _705), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1155 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3894 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1157 + 1.0))) + _1162) * _1125;
        float _1172 = _1093 * 0.5;
        float _1173 = _1103 * 0.5;
        float _1174 = _1113 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1188 = (dot(vec3(_703, _704, _705), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1197 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3927 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1199 + 1.0))) + _1204) * _1126;
        float _1214 = _1094 * 0.5;
        float _1215 = _1104 * 0.5;
        float _1216 = _1114 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_703, _704, _705), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3960 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1241 + 1.0))) + _1246) * _1127;
        _1263 = _1094;
        _1265 = _1093;
        _1266 = _1092;
        _1267 = _1104;
        _1268 = _1103;
        _1269 = _1102;
        _1270 = _1114;
        _1271 = _1113;
        _1272 = _1112;
        _1273 = _1127;
        _1274 = _1126;
        _1275 = _1125;
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
    }
    else
    {
        _1263 = _1264;
        _1265 = _1264;
        _1266 = _1264;
        _1267 = _1264;
        _1268 = _1264;
        _1269 = _1264;
        _1270 = _1264;
        _1271 = _1264;
        _1272 = _1264;
        _1273 = _1264;
        _1274 = _1264;
        _1275 = _1264;
        _1276 = 0.0;
        _1277 = 0.0;
        _1278 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1310 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1314 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1337 = _926 + _703;
        float _1338 = _930 + _704;
        float _1339 = _934 + _705;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_703, _704, _705), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _4023 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_703, _704, _705), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4056 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_703, _704, _705), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4089 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1264;
        _1576 = _1264;
        _1577 = _1264;
        _1578 = _1264;
        _1579 = _1264;
        _1580 = _1264;
        _1581 = _1264;
        _1582 = _1264;
        _1583 = _1264;
        _1584 = _1264;
        _1585 = _1264;
        _1586 = _1264;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1276)) + _1276;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1277)) + _1277;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1278)) + _1278;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _873 * 0.5;
    float _1644 = _874 * 0.5;
    float _1645 = _875 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1263, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _706);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1760 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1764 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1768 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1771 = fma(_875, cbModelParam._m0[13u].z, fma(_874, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _873));
        float _1774 = fma(_875, cbModelParam._m0[14u].z, fma(_874, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _873));
        float _1777 = fma(_875, cbModelParam._m0[15u].z, fma(_874, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _873));
        float _1805;
        if (_1771 > 0.0)
        {
            _1805 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1805 = frontier_phi_17_15_ladder;
        }
        float _2027;
        if (_1774 > 0.0)
        {
            _2027 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2027 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1777 > 0.0)
        {
            _2273 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_2027) ? _1805 : (isnan(_1805) ? _2027 : min(_1805, _2027));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1771) + _1760;
        float _2281 = (_2276 * _1774) + _1764;
        float _2282 = (_2276 * _1777) + _1768;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_16_38_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1793 = frontier_phi_16_38_ladder_2;
        _1795 = frontier_phi_16_38_ladder_1;
        _1797 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_873, _874, _875), _1712);
        _1793 = _1781.x * cbModelParam._m0[1u].y;
        _1795 = _1781.y * cbModelParam._m0[1u].y;
        _1797 = _1781.z * cbModelParam._m0[1u].y;
    }
    float _1801 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _706);
    float _1802 = isnan(_1801) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1801 : min(cbModelParam._m0[25u].w, _1801));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_875, cbModelParam._m0[21u].z, fma(_874, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _873));
        float _1870 = fma(_875, cbModelParam._m0[22u].z, fma(_874, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _873));
        float _1873 = fma(_875, cbModelParam._m0[23u].z, fma(_874, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _873));
        float _2032;
        if (_1867 > 0.0)
        {
            _2032 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2032 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1870 > 0.0)
        {
            _2300 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2505;
        if (_1873 > 0.0)
        {
            _2505 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2505 = frontier_phi_49_46_ladder;
        }
        float _2507 = isnan(_2300) ? _2032 : (isnan(_2032) ? _2300 : min(_2032, _2300));
        float _2508 = isnan(_2505) ? _2507 : (isnan(_2507) ? _2505 : min(_2507, _2505));
        float _2512 = (_2508 * _1867) + _1856;
        float _2513 = (_2508 * _1870) + _1860;
        float _2514 = (_2508 * _1873) + _1864;
        float _2515 = _2508 * 9.9999997473787516355514526367188e-05;
        float _2516 = (-1.0) - _2515;
        float _2518 = _2515 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2514 > _2518) || ((_2514 < _2516) || ((_2513 > _2518) || ((_2513 < _2516) || ((_2512 < _2516) || (_2512 > _2518))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2514, cbModelParam._m0[17u].z, fma(_2513, cbModelParam._m0[17u].y, _2512 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2514, cbModelParam._m0[18u].z, fma(_2513, cbModelParam._m0[18u].y, _2512 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2514, cbModelParam._m0[19u].z, fma(_2513, cbModelParam._m0[19u].y, _2512 * cbModelParam._m0[19u].x))), _1802);
            frontier_phi_25_49_ladder = _2713.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2713.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_25_49_ladder_2;
        _1894 = frontier_phi_25_49_ladder_1;
        _1896 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_873, _874, _875), _1802);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1908 = ((((1.0 - _894) * ((_881 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_894 * _881)) * _865;
    float _1909 = _1908 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1910 = _1908 * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1911 = _1908 * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    vec4 _1928 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_802, _803));
    float _1930 = _1928.w;
    float _1942 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1930);
    float _1943 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1930);
    float _1944 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1930);
    uvec4 _1948 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1950 = _1948.x * 14u;
    uint _1951 = _1950 + 13u;
    float _1958 = _865 + (-1.0);
    float _1963 = (cbLight._m0[_1951].x * _1958) + 1.0;
    float _1964 = (cbLight._m0[_1951].y * _1958) + 1.0;
    float _1965 = (cbLight._m0[_1951].z * _1958) + 1.0;
    float _1966 = (cbLight._m0[_1951].w * _1958) + 1.0;
    uint _1967 = _1950 + 5u;
    float _1973 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1977 = _1950 + 4u;
    float _1986 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1990 = _1950 | 1u;
    float _2001 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_703, _704, _705));
    float _2004 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_703, _704, _705));
    float _4225 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _4236 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2009 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2011 = (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * 0.3183098733425140380859375;
    float _2018 = ((cbLight._m0[_1967].x * _1973) * _2011) + (((cbLight._m0[_1977].x * _1942) * _1986) * _2009);
    float _2019 = ((_1973 * cbLight._m0[_1967].y) * _2011) + (((cbLight._m0[_1977].y * _1943) * _1986) * _2009);
    float _2020 = ((_1973 * cbLight._m0[_1967].z) * _2011) + (((cbLight._m0[_1977].z * _1944) * _1986) * _2009);
    uvec4 _2024 = floatBitsToUint(cbLight._m0[_1950 + 12u]);
    bool _2026 = _2024.x == 0u;
    float _2037;
    float _2039;
    float _2041;
    if (_2026)
    {
        _2037 = _2018;
        _2039 = _2019;
        _2041 = _2020;
    }
    else
    {
        uint _2045 = _1950 + 6u;
        float _2061 = (dot(vec3(cbLight._m0[_1950 + 2u].xyz), vec3(_703, _704, _705)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _4247 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2064 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2037 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _2018;
        _2039 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _2019;
        _2041 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _2020;
    }
    bool _2044 = _2024.y == 0u;
    float _2082;
    float _2084;
    float _2086;
    if (_2044)
    {
        _2082 = _2037;
        _2084 = _2039;
        _2086 = _2041;
    }
    else
    {
        uint _2244 = _1950 + 7u;
        float _2260 = (dot(vec3(cbLight._m0[_1950 + 3u].xyz), vec3(_703, _704, _705)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4263 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2263 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2082 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2037;
        _2084 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2039;
        _2086 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2041;
    }
    uint _2089 = _1950 + 8u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _706) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1950].x + _782;
    float _2105 = cbLight._m0[_1950].y + _783;
    float _2106 = cbLight._m0[_1950].z + _784;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_1950].xyz));
    float _4279 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _4290 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2118 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2119 = dot(vec3(_703, _704, _705), vec3(_2111, _2112, _2113));
    float _4301 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _2123 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2111, _2112, _2113));
    float _4312 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = _2103 * _2103;
    float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
    float _2142 = (exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2143 = 1.0 - _2103;
    float _2154 = (0.5 / (((_2118 * ((_2117 * _2143) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2143) + _2103) * _2117))) * _2117;
    float _4323 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2156 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
    uint _2170 = _1950 + 9u;
    float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1990].w)) * _706) * 0.949999988079071044921875);
    float _2182 = _2181 * _2181;
    float _2183 = cbLight._m0[_1990].x + _782;
    float _2184 = cbLight._m0[_1990].y + _783;
    float _2185 = cbLight._m0[_1990].z + _784;
    float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
    float _2190 = _2189 * _2183;
    float _2191 = _2189 * _2184;
    float _2192 = _2189 * _2185;
    float _2193 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_1990].xyz));
    float _4334 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2197 = dot(vec3(_703, _704, _705), vec3(_2190, _2191, _2192));
    float _4345 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2200 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _2201 = dot(vec3(cbLight._m0[_1990].xyz), vec3(_2190, _2191, _2192));
    float _4356 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2205 = _2182 * _2182;
    float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
    float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2219 = 1.0 - _2182;
    float _2229 = (0.5 / (((_2118 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2219) + _2182) * _2196))) * _2196;
    float _4367 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
    float _2241 = (((_2218 * cbLight._m0[_2170].x) * _2231) * _1973) + ((((cbLight._m0[_2089].x * _1942) * _2142) * _2156) * _1986);
    float _2242 = (((_2218 * cbLight._m0[_2170].y) * _2231) * _1973) + ((((cbLight._m0[_2089].y * _1943) * _2142) * _2156) * _1986);
    float _2243 = (((_2218 * cbLight._m0[_2170].z) * _2231) * _1973) + ((((cbLight._m0[_2089].z * _1944) * _2142) * _2156) * _1986);
    float _2305;
    float _2307;
    float _2309;
    if (_2026)
    {
        _2305 = _2241;
        _2307 = _2242;
        _2309 = _2243;
    }
    else
    {
        uint _2311 = _1950 + 2u;
        uint _2315 = _1950 + 10u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _706) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _782;
        float _2332 = cbLight._m0[_2311].y + _783;
        float _2333 = cbLight._m0[_2311].z + _784;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2311].xyz));
        float _4378 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2345 = dot(vec3(_703, _704, _705), vec3(_2338, _2339, _2340));
        float _4389 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4400 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2367 = 1.0 - _2330;
        float _2377 = (0.5 / (((_2118 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2367) + _2330) * _2344))) * _2344;
        float _4411 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2305 = (((_2366 * cbLight._m0[_2315].x) * _2379) * _2380) + _2241;
        _2307 = (((_2366 * cbLight._m0[_2315].y) * _2379) * _2380) + _2242;
        _2309 = (((_2366 * cbLight._m0[_2315].z) * _2379) * _2380) + _2243;
    }
    float _2415;
    float _2417;
    float _2419;
    if (_2044)
    {
        _2415 = _2305;
        _2417 = _2307;
        _2419 = _2309;
    }
    else
    {
        uint _2426 = _1950 + 3u;
        uint _2430 = _1950 + 11u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _706) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _782;
        float _2447 = cbLight._m0[_2426].y + _783;
        float _2448 = cbLight._m0[_2426].z + _784;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2426].xyz));
        float _4427 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2460 = dot(vec3(_703, _704, _705), vec3(_2453, _2454, _2455));
        float _4438 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4449 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2482 = 1.0 - _2445;
        float _2492 = (0.5 / (((_2118 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2118 * _2482) + _2445) * _2459))) * _2459;
        float _4460 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2415 = (((_2481 * cbLight._m0[_2430].x) * _2494) * _2495) + _2305;
        _2417 = (((_2481 * cbLight._m0[_2430].y) * _2494) * _2495) + _2307;
        _2419 = (((_2481 * cbLight._m0[_2430].z) * _2494) * _2495) + _2309;
    }
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_1948.y == 0u)
    {
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2570;
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2570;
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2570;
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.x;
        uint _2597 = uint((float(_2585.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2586))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2586)));
        float _2607 = (log2(_2573 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2608 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        uint _2611 = uint(isnan(14.0) ? _2608 : (isnan(_2608) ? 14.0 : min(_2608, 14.0)));
        uvec4 _2616 = texelFetch(g_lightClusterGridBuffer, int(((_2611 << 2u) + (_2597 << 6u)) >> 2u));
        uint _2617 = _2616.x;
        uint _2618 = _2585.z;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        if (((((1u << ((_2618 >> 4u) & 15u)) + 4294967295u) & _2617) == 0u) || ((_2618 & 240u) == 0u))
        {
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
        }
        else
        {
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2870 = 0.0;
            float _2871 = 0.0;
            float _2872 = 0.0;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            uint _2876 = 0u;
            uint _2885;
            bool _2886;
            for (;;)
            {
                _2885 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                _2886 = _2885 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2886)
                {
                    frontier_phi_66_pred = _2870;
                    frontier_phi_66_pred_1 = _2875;
                    frontier_phi_66_pred_2 = _2874;
                    frontier_phi_66_pred_3 = _2873;
                    frontier_phi_66_pred_4 = _2872;
                    frontier_phi_66_pred_5 = _2871;
                }
                else
                {
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    uint _3021;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2872;
                    _3018 = _2873;
                    _3019 = _2874;
                    _3020 = _2875;
                    _3021 = _2885;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    float _2946;
                    float _2947;
                    for (;;)
                    {
                        uint _3025 = uint(findLSB(_3021)) + (_2876 << 5u);
                        uint _3022 = (_3021 + 4294967295u) & _3021;
                        uint _3027 = _3025 * 48u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3047 = (_3025 * 48u) + 4u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3066 = (_3025 * 48u) + 8u;
                        vec3 _3077 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x));
                        float _3081 = _3041.x - _2571;
                        float _3082 = _3041.y - _2572;
                        float _3083 = _3041.z - _2573;
                        float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                        float _3087 = inversesqrt(_3084);
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3091 = dot(vec3(_821, _824, _827), vec3(_3088, _3089, _3090));
                        float _3096 = 1.0 - (_3084 * _3041.w);
                        float _4486 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3098 = sqrt(_3084) * _3060.w;
                        float _3101 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3091) + _3102;
                        float _3108 = _3098 * _3098;
                        float _3112 = ((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3097) / ((_3108 * 0.699999988079071044921875) + 1.0);
                        float _3116 = (-0.0) - _2571;
                        float _3117 = (-0.0) - _2572;
                        float _3118 = (-0.0) - _2573;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3133 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _881;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_821, _824, _827), vec3(_3123, _3124, _3125));
                        float _4502 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3158 = dot(vec3(_821, _824, _827), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4513 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3101 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3091) + _3167;
                        float _4524 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4535 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) / ((_3165 * _3165) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125))) * _3097;
                        _2945 = (_3112 * _3060.x) + _3018;
                        _2946 = (_3112 * _3060.y) + _3019;
                        _2947 = (_3112 * _3060.z) + _3020;
                        _2942 = (_3193 * _3077.x) + _3015;
                        _2943 = (_3193 * _3077.y) + _3016;
                        _2944 = (_3193 * _3077.z) + _3017;
                        if (_3022 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _2944;
                            _3018 = _2945;
                            _3019 = _2946;
                            _3020 = _2947;
                            _3021 = _3022;
                        }
                    }
                    frontier_phi_66_pred = _2942;
                    frontier_phi_66_pred_1 = _2947;
                    frontier_phi_66_pred_2 = _2946;
                    frontier_phi_66_pred_3 = _2945;
                    frontier_phi_66_pred_4 = _2944;
                    frontier_phi_66_pred_5 = _2943;
                }
                _2719 = frontier_phi_66_pred;
                _2729 = frontier_phi_66_pred_1;
                _2727 = frontier_phi_66_pred_2;
                _2725 = frontier_phi_66_pred_3;
                _2723 = frontier_phi_66_pred_4;
                _2721 = frontier_phi_66_pred_5;
                uint _2877 = _2876 + 1u;
                if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2870 = _2719;
                    _2871 = _2721;
                    _2872 = _2723;
                    _2873 = _2725;
                    _2874 = _2727;
                    _2875 = _2729;
                    _2876 = _2877;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
        }
        uvec4 _2732 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2733 = _2732.z;
        uint _2735 = (_2733 >> 8u) & 15u;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((4294967295u << _2735) & _2617) == 0u)
        {
            _2838 = _2718;
            _2840 = _2720;
            _2842 = _2722;
            _2844 = _2724;
            _2846 = _2726;
            _2848 = _2728;
        }
        else
        {
            float _2863 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
            float _2864 = _2863 * _2571;
            float _2865 = _2863 * _2572;
            float _2866 = _2863 * _2573;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2735 < ((_2733 >> 12u) & 15u))
            {
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2847;
                float _2849;
                float _2998 = _2718;
                float _2999 = _2720;
                float _3000 = _2722;
                float _3001 = _2724;
                float _3002 = _2726;
                float _3003 = _2728;
                uint _3004 = _2735;
                uint _3013;
                bool _3014;
                for (;;)
                {
                    _3013 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                    _3014 = _3013 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3014)
                    {
                        frontier_phi_77_pred = _3003;
                        frontier_phi_77_pred_1 = _3002;
                        frontier_phi_77_pred_2 = _3001;
                        frontier_phi_77_pred_3 = _3000;
                        frontier_phi_77_pred_4 = _2999;
                        frontier_phi_77_pred_5 = _2998;
                    }
                    else
                    {
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3220 = _2998;
                        float _3221 = _2999;
                        float _3222 = _3000;
                        float _3223 = _3001;
                        float _3224 = _3002;
                        float _3225 = _3003;
                        uint _3226 = _3013;
                        uint _3227;
                        vec4 _3252;
                        float _3253;
                        vec4 _3268;
                        vec3 _3280;
                        vec4 _3295;
                        vec4 _3311;
                        float _3357;
                        bool _3358;
                        for (;;)
                        {
                            uint _3237 = ((_3004 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3226));
                            _3227 = (_3226 + 4294967295u) & _3226;
                            uint _3239 = _3237 * 40u;
                            _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            _3253 = _3252.w;
                            uint _3255 = (_3237 * 40u) + 4u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3237 * 40u) + 8u;
                            _3280 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x));
                            uint _3282 = (_3237 * 40u) + 16u;
                            _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            uint _3298 = (_3237 * 40u) + 20u;
                            _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            uint _3313 = (_3237 * 40u) + 24u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3332 = (_3237 * 40u) + 28u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3357 = fma(_2573, _3345.z, fma(_2572, _3345.y, _3345.x * _2571)) + _3345.w;
                            _3358 = !((fma(_2573, _3326.z, fma(_2572, _3326.y, _3326.x * _2571)) + _3326.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3358)
                            {
                                float _3385 = _3252.x - _2571;
                                float _3386 = _3252.y - _2572;
                                float _3387 = _3252.z - _2573;
                                float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                                float _3391 = inversesqrt(_3388);
                                float _3392 = _3391 * _3385;
                                float _3393 = _3391 * _3386;
                                float _3394 = _3391 * _3387;
                                float _3398 = 1.0 - (_3388 / (_3253 * _3253));
                                float _4546 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3403 = sqrt(_3388) * _3268.w;
                                float _3405 = 1.39999997615814208984375 / (_3403 + 1.39999997615814208984375);
                                float _3406 = _3405 * _3405;
                                float _3409 = ((1.0 - _3406) * dot(vec3(_3392, _3393, _3394), vec3(_821, _824, _827))) + _3406;
                                float _3412 = _3403 * _3403;
                                float _3416 = (fma(_2573, _3295.z, fma(_2572, _3295.y, _3295.x * _2571)) + _3295.w) / _3357;
                                float _3417 = (fma(_2573, _3311.z, fma(_2572, _3311.y, _3311.x * _2571)) + _3311.w) / _3357;
                                float _3421 = 1.0 - dot(vec2(_3416, _3417), vec2(_3416, _3417));
                                float _4562 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3422 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3423 = _3422 * (((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3399) / ((_3412 * 0.699999988079071044921875) + 1.0));
                                float _3435 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                                float _3436 = 1.0 - _881;
                                float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                                float _3444 = _3443 * _3443;
                                float _3445 = _3444 * _3444;
                                float _3446 = _3392 - _2864;
                                float _3447 = _3393 - _2865;
                                float _3448 = _3394 - _2866;
                                float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                                float _3456 = dot(vec3(_821, _824, _827), vec3((-0.0) - _2864, (-0.0) - _2865, (-0.0) - _2866));
                                float _4573 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3460 = dot(vec3(_821, _824, _827), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                                float _4584 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3463 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                                float _3468 = _3405 * _3444;
                                float _3469 = _3468 * _3468;
                                float _3475 = ((1.0 - _3469) * dot(vec3(_821, _824, _827), vec3(_3392, _3393, _3394))) + _3469;
                                float _4595 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                                float _3477 = 1.0 - _3444;
                                float _3487 = (0.5 / (((_3476 * ((_3459 * _3477) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3476 * _3477) + _3444) * _3459))) * _3476;
                                float _4606 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3497 = (_3422 * _3399) * (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3467 * _3467) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3423 * _3268.y;
                                frontier_phi_83_pred_1 = _3423 * _3268.x;
                                frontier_phi_83_pred_2 = _3497 * _3280.z;
                                frontier_phi_83_pred_3 = _3497 * _3280.y;
                                frontier_phi_83_pred_4 = _3497 * _3280.x;
                                frontier_phi_83_pred_5 = _3423 * _3268.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3505 = frontier_phi_83_pred;
                            _3504 = frontier_phi_83_pred_1;
                            _3503 = frontier_phi_83_pred_2;
                            _3502 = frontier_phi_83_pred_3;
                            _3501 = frontier_phi_83_pred_4;
                            _3506 = frontier_phi_83_pred_5;
                            _3210 = _3504 + _3223;
                            _3211 = _3505 + _3224;
                            _3212 = _3506 + _3225;
                            _3207 = _3501 + _3220;
                            _3208 = _3502 + _3221;
                            _3209 = _3503 + _3222;
                            if (_3227 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3227;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3212;
                        frontier_phi_77_pred_1 = _3211;
                        frontier_phi_77_pred_2 = _3210;
                        frontier_phi_77_pred_3 = _3209;
                        frontier_phi_77_pred_4 = _3208;
                        frontier_phi_77_pred_5 = _3207;
                    }
                    _2849 = frontier_phi_77_pred;
                    _2847 = frontier_phi_77_pred_1;
                    _2845 = frontier_phi_77_pred_2;
                    _2843 = frontier_phi_77_pred_3;
                    _2841 = frontier_phi_77_pred_4;
                    _2839 = frontier_phi_77_pred_5;
                    uint _3005 = _3004 + 1u;
                    if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2998 = _2839;
                        _2999 = _2841;
                        _3000 = _2843;
                        _3001 = _2845;
                        _3002 = _2847;
                        _3003 = _2849;
                        _3004 = _3005;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2843;
                frontier_phi_58_59_ladder_1 = _2849;
                frontier_phi_58_59_ladder_2 = _2847;
                frontier_phi_58_59_ladder_3 = _2845;
                frontier_phi_58_59_ladder_4 = _2841;
                frontier_phi_58_59_ladder_5 = _2839;
            }
            else
            {
                frontier_phi_58_59_ladder = _2722;
                frontier_phi_58_59_ladder_1 = _2728;
                frontier_phi_58_59_ladder_2 = _2726;
                frontier_phi_58_59_ladder_3 = _2724;
                frontier_phi_58_59_ladder_4 = _2720;
                frontier_phi_58_59_ladder_5 = _2718;
            }
            _2838 = frontier_phi_58_59_ladder_5;
            _2840 = frontier_phi_58_59_ladder_4;
            _2842 = frontier_phi_58_59_ladder;
            _2844 = frontier_phi_58_59_ladder_3;
            _2846 = frontier_phi_58_59_ladder_2;
            _2848 = frontier_phi_58_59_ladder_1;
        }
        float _2853 = isnan(1.0) ? _865 : (isnan(_865) ? 1.0 : min(_865, 1.0));
        _2630 = (_2853 * _2844) + _2082;
        _2632 = (_2853 * _2846) + _2084;
        _2634 = (_2853 * _2848) + _2086;
        _2636 = ((_2838 * 0.039999999105930328369140625) * _2853) + _2415;
        _2638 = ((_2840 * 0.039999999105930328369140625) * _2853) + _2417;
        _2640 = ((_2842 * 0.039999999105930328369140625) * _2853) + _2419;
    }
    else
    {
        _2630 = _2082;
        _2632 = _2084;
        _2634 = _2086;
        _2636 = _2415;
        _2638 = _2417;
        _2640 = _2419;
    }
    float _4622 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4633 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4644 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _2657 = ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2630 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _865))) + ((_2636 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2658 = ((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2632 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _865))) + ((_2638 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    float _2659 = ((isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2634 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _865))) + ((_2640 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1701)) * cbPerFrame._m0[3u].x);
    uint _2660 = _247 + 6u;
    float _2668 = _802 / cbSceneParam._m0[86u].x;
    float _2669 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2683 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2685 = _2683.x;
    float _2686 = _2683.y;
    float _2687 = _2683.z;
    float _2688 = _2683.w;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _2743 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _2744 = _2743 / _724;
        float _2755 = _2744 * _775;
        float _2756 = _776 * _2744;
        float _2757 = (-0.0) - _2756;
        float _2758 = _2744 * _777;
        float _2760 = (cbSceneParam._m0[77u].w * _2757) / _2743;
        float _2761 = _2760 + cbSceneParam._m0[79u].w;
        float _2762 = cbSceneParam._m0[79u].w - _2756;
        float _2768 = sqrt(((_2755 * _2755) + (_2756 * _2756)) + (_2758 * _2758));
        float _2771 = (1.0 - (cbSceneParam._m0[77u].w / _2743)) * _2768;
        float _2776 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2778 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2955;
        if (abs((_2757 - _2760) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2955 = ((((_2761 > 0.0) ? exp2(_2776 * _2761) : (2.0 - exp2(_2778 * _2761))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2771;
        }
        else
        {
            float _2899 = 1.0 / cbSceneParam._m0[80u].x;
            float _2900 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : max(_2761, _2762));
            float _2901 = isnan(_2762) ? _2761 : (isnan(_2761) ? _2762 : min(_2761, _2762));
            float _2910 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : min(_2900, 0.0));
            float _2911 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : min(_2901, 0.0));
            _2955 = ((abs(_2768 / _2757) * cbSceneParam._m0[80u].y) * ((((_2910 - _2911) * 2.0) - ((exp2(_2776 * (isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0)))) - exp2(_2776 * (isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))))) * _2899)) - ((exp2(_2778 * _2910) - exp2(_2778 * _2911)) * _2899))) + (_2771 * cbSceneParam._m0[80u].z);
        }
        vec4 _2957 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, 1.0), 0.0);
        float _2966 = exp2((_2955 * (-1.44269502162933349609375)) * (1.0 - _2957.w));
        float _2967 = log2(_2966);
        float _2983 = log2(_2688);
        _2780 = (exp2(_2983 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].x)) * _2957.x) / cbSceneParam._m0[78u].x)) + _2685;
        _2782 = (exp2(_2983 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].y)) * _2957.y) / cbSceneParam._m0[78u].y)) + _2686;
        _2784 = (exp2(_2983 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].z)) * _2957.z) / cbSceneParam._m0[78u].z)) + _2687;
        _2786 = _2966 * _2688;
    }
    else
    {
        _2780 = _2685;
        _2782 = _2686;
        _2784 = _2687;
        _2786 = _2688;
    }
    bool _2993;
    vec4 _2796;
    vec4 _2818;
    float _2820;
    float _2824;
    float _2825;
    float _2826;
    float _2827;
    bool _2837;
    for (;;)
    {
        _2796 = cbMatDynParam._m0[0u];
        float _2798 = roundEven(_2796.y);
        bool _2799 = _2798 == 3.0;
        float _2800 = log2(_2786);
        float _2807 = exp2(_2800 * cbSceneParam._m0[78u].x) * _2657;
        float _2808 = exp2(_2800 * cbSceneParam._m0[78u].y) * _2658;
        float _2809 = exp2(_2800 * cbSceneParam._m0[78u].z) * _2659;
        float _2816 = _791 + (-0.5);
        _2818 = cbMtdParam._m0[1u];
        _2820 = _2818.y * _2816;
        float _2823 = (_2798 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2824 = _2823 * (_2799 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2780)));
        _2825 = _2823 * (_2799 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2782)));
        _2826 = _2823 * (_2799 ? _2809 : (_2809 + (cbSceneParam._m0[72u].w * _2784)));
        _2827 = _2816 * 0.999000012874603271484375;
        _2837 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2837)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2827) < 0.5)
            {
                _2993 = true;
                break;
            }
        }
        uint _2934 = _840 + uint(_2796.w);
        if ((cbInstanceData._m0[_2934].w < 1.0) && ((cbInstanceData._m0[_2934].w + _2827) < 0.5))
        {
            _2993 = true;
            break;
        }
        if ((_2820 + 1.0) < _2818.x)
        {
            _2993 = true;
            break;
        }
        _2993 = false;
        break;
    }
    float _3198;
    if (_2993)
    {
        discard_state = true;
        _3198 = 0.0;
    }
    else
    {
        _3198 = cbInstanceData._m0[_2660].w;
    }
    SV_Target.x = _2824;
    SV_Target.y = _2825;
    SV_Target.z = _2826;
    SV_Target.w = _3198;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2660].w;
    discard_exit();
}


