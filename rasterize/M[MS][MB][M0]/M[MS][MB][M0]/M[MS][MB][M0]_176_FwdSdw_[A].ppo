#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1336;
float _3980;
float _3981;
float _3982;
float _3983;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3992 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4003 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _4014 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _403 = _401.x;
    float _413 = dot(vec4(_403, _401.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _430 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_403 - _413) * cbMtdParam._m0[24u].x) + _413) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4025 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _438 = (_431 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _439 = (_431 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _440 = (_431 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _300) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _301) + cbTextureTilingScale._m0[3u].w));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _479 = _477.x;
    float _489 = dot(vec4(_479, _477.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _503 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_479 - _489) * cbMtdParam._m0[24u].x) + _489) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4036 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _511 = (_504 * ((_457.x * cbMtdParam._m0[13u].x) - _438)) + _438;
    float _512 = (_504 * ((_457.y * cbMtdParam._m0[13u].y) - _439)) + _439;
    float _513 = (_504 * ((_457.z * cbMtdParam._m0[13u].z) - _440)) + _440;
    float _517 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _511;
    float _520 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _512;
    float _523 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _513;
    float _530 = ((_511 - _517) * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) + _517;
    float _531 = ((_512 - _520) * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) + _520;
    float _532 = ((_513 - _523) * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) + _523;
    vec4 _544 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _567 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _584 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _586 = _584.x;
    float _587 = _584.y;
    float _588 = _584.z;
    float _595 = ((_567.x - _586) * _431) + _586;
    float _596 = ((_567.y - _587) * _431) + _587;
    float _597 = ((_567.z - _588) * _431) + _588;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _300) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _301) + cbTextureTilingScale._m0[2u].w));
    float _622 = ((_609.z - _597) * _504) + _597;
    float _625 = ((((_609.x - _595) * _504) + _595) * 2.0) + (-1.0);
    float _626 = ((((_609.y - _596) * _504) + _596) * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _4047 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _632 = sqrt(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))));
    float _637 = _625 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_544.x * 2.0) + (-1.0)));
    float _638 = _626 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_544.y * 2.0) + (-1.0)));
    vec4 _651 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _665 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _694 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_667 - _668) * cbMtdParam._m0[24u].w) + _668) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4058 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _703 = ((((cbMtdParam._m0[10u].x - _530) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _695) + _530;
    float _704 = ((((cbMtdParam._m0[10u].y - _531) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _695) + _531;
    float _705 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _532)) * _695) + _532;
    float _710 = (((_544.z - _622) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _622;
    float _714 = ((cbMtdParam._m0[23u].y - _710) * _695) + _710;
    vec4 _733 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _739 = (_733.x * 2.0) + (-1.0);
    float _740 = (_733.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _4069 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _757 = (_695 * (((cbMtdParam._m0[22u].z * _637) - _637) + _739)) + _637;
    float _758 = (_695 * (((cbMtdParam._m0[22u].z * _638) - _638) + _740)) + _638;
    float _759 = (_695 * (sqrt(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) - _632)) + _632;
    float _761 = cbMtdParam._m0[22u].x + _651.w;
    float _764 = fma(_759, _249 * NORMAL.x, fma(_758, _256 * TANGENT.x, (_242 * _234) * _757));
    float _767 = fma(_759, _249 * NORMAL.y, fma(_758, _256 * TANGENT.y, (_242 * _235) * _757));
    float _770 = fma(_759, _249 * NORMAL.z, fma(_758, _256 * TANGENT.z, (_242 * _236) * _757));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _4080 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _778 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4102 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4113 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4124 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _796 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1017 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1023 = (cbMatDynParam._m0[5u].x * _1017) + cbMatDynParam._m0[5u].y;
        float _4135 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1028 = (cbMatDynParam._m0[5u].z * _1017) + cbMatDynParam._m0[5u].w;
        float _4146 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) - _1024)) + _1024) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _896 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _899 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _912 = _281 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4157 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _4179 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _937 = ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * TEXCOORD_5.w) * _933.x;
    float _938 = dot(vec3(_775, _776, _777), vec3(_854, _855, _856));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _775) - _854;
    float _946 = (_941 * _776) - _855;
    float _947 = (_941 * _777) - _856;
    float _951 = abs(dot(vec3(_854, _855, _856), vec3(_775, _776, _777)));
    float _4190 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _953 = sqrt(_778);
    float _966 = exp2((_953 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_953 * 3.0));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1064 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1068 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1093 = _998 + _775;
        float _1094 = _1002 + _776;
        float _1095 = _1006 + _777;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_775, _776, _777), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4238 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_775, _776, _777), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4271 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_775, _776, _777), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4304 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1381 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1385 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1408 = _998 + _775;
        float _1409 = _1002 + _776;
        float _1410 = _1006 + _777;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_775, _776, _777), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4367 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_775, _776, _777), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4378 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4389 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4400 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_775, _776, _777), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4433 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = _1336;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1349)) + _1349;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _945 * 0.5;
    float _1715 = _946 * 0.5;
    float _1716 = _947 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1865;
    float _1867;
    float _1869;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1832 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1836 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1840 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1843 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1846 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1849 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1877;
        if (_1843 > 0.0)
        {
            _1877 = abs((1.0 - _1832) / _1843);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1832 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1877 = frontier_phi_17_15_ladder;
        }
        float _2048;
        if (_1846 > 0.0)
        {
            _2048 = abs((1.0 - _1836) / _1846);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1836 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2048 = frontier_phi_26_22_ladder;
        }
        float _2343;
        if (_1849 > 0.0)
        {
            _2343 = abs((1.0 - _1840) / _1849);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1840 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2343 = frontier_phi_38_33_ladder;
        }
        float _2345 = isnan(_2048) ? _1877 : (isnan(_1877) ? _2048 : min(_1877, _2048));
        float _2346 = isnan(_2343) ? _2345 : (isnan(_2345) ? _2343 : min(_2345, _2343));
        float _2350 = (_2346 * _1843) + _1832;
        float _2351 = (_2346 * _1846) + _1836;
        float _2352 = (_2346 * _1849) + _1840;
        float _2353 = _2346 * 9.9999997473787516355514526367188e-05;
        float _2355 = (-1.0) - _2353;
        float _2357 = _2353 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2352 > _2357) || ((_2352 < _2355) || ((_2351 > _2357) || ((_2351 < _2355) || ((_2350 < _2355) || (_2350 > _2357))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2497 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2352, cbModelParam._m0[9u].z, fma(_2351, cbModelParam._m0[9u].y, _2350 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2352, cbModelParam._m0[10u].z, fma(_2351, cbModelParam._m0[10u].y, _2350 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2352, cbModelParam._m0[11u].z, fma(_2351, cbModelParam._m0[11u].y, _2350 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2497.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2497.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2497.x * cbModelParam._m0[1u].y;
        }
        _1865 = frontier_phi_16_38_ladder_2;
        _1867 = frontier_phi_16_38_ladder_1;
        _1869 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1783);
        _1865 = _1853.x * cbModelParam._m0[1u].y;
        _1867 = _1853.y * cbModelParam._m0[1u].y;
        _1869 = _1853.z * cbModelParam._m0[1u].y;
    }
    float _1873 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1874 = isnan(_1873) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1873 : min(cbModelParam._m0[25u].w, _1873));
    float _1965;
    float _1967;
    float _1969;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1929 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1933 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1937 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1940 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1943 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1946 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2053;
        if (_1940 > 0.0)
        {
            _2053 = abs((1.0 - _1929) / _1940);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1929 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2053 = frontier_phi_28_24_ladder;
        }
        float _2370;
        if (_1943 > 0.0)
        {
            _2370 = abs((1.0 - _1933) / _1943);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1943 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1933 + 1.0) / _1943);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2370 = frontier_phi_40_35_ladder;
        }
        float _2697;
        if (_1946 > 0.0)
        {
            _2697 = abs((1.0 - _1937) / _1946);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1946 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1937 + 1.0) / _1946);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2697 = frontier_phi_50_47_ladder;
        }
        float _2699 = isnan(_2370) ? _2053 : (isnan(_2053) ? _2370 : min(_2053, _2370));
        float _2700 = isnan(_2697) ? _2699 : (isnan(_2699) ? _2697 : min(_2699, _2697));
        float _2704 = (_2700 * _1940) + _1929;
        float _2705 = (_2700 * _1943) + _1933;
        float _2706 = (_2700 * _1946) + _1937;
        float _2707 = _2700 * 9.9999997473787516355514526367188e-05;
        float _2708 = (-1.0) - _2707;
        float _2710 = _2707 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2706 > _2710) || ((_2706 < _2708) || ((_2705 > _2710) || ((_2705 < _2708) || ((_2704 < _2708) || (_2704 > _2710))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2706, cbModelParam._m0[17u].z, fma(_2705, cbModelParam._m0[17u].y, _2704 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2706, cbModelParam._m0[18u].z, fma(_2705, cbModelParam._m0[18u].y, _2704 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2706, cbModelParam._m0[19u].z, fma(_2705, cbModelParam._m0[19u].y, _2704 * cbModelParam._m0[19u].x))), _1874);
            frontier_phi_25_50_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1965 = frontier_phi_25_50_ladder_2;
        _1967 = frontier_phi_25_50_ladder_1;
        _1969 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1874);
        _1965 = _1949.x * cbModelParam._m0[1u].z;
        _1967 = _1949.y * cbModelParam._m0[1u].z;
        _1969 = _1949.z * cbModelParam._m0[1u].z;
    }
    float _1981 = ((((1.0 - _966) * ((_953 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_966 * _953)) * _937;
    float _1982 = _1981 * ((cbModelParam._m0[1u].w * (_1965 - _1865)) + _1865);
    float _1983 = _1981 * ((cbModelParam._m0[1u].w * (_1967 - _1867)) + _1867);
    float _1984 = _1981 * ((cbModelParam._m0[1u].w * (_1969 - _1869)) + _1869);
    float _1987 = fma(_1984, cbSceneParam._m0[89u].z, fma(_1983, cbSceneParam._m0[89u].y, _1982 * cbSceneParam._m0[89u].x));
    float _1990 = fma(_1984, cbSceneParam._m0[90u].z, fma(_1983, cbSceneParam._m0[90u].y, _1982 * cbSceneParam._m0[90u].x));
    float _1993 = fma(_1984, cbSceneParam._m0[91u].z, fma(_1983, cbSceneParam._m0[91u].y, _1982 * cbSceneParam._m0[91u].x));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2039 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2040 = _2027 / _2039;
    float _2041 = _2031 / _2039;
    float _2042 = _2035 / _2039;
    float _2189;
    float _2190;
    float _2191;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2069 = ((uint(_2042 > cbSceneParam._m0[59u].y) + uint(_2042 > cbSceneParam._m0[59u].x)) + uint(_2042 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2070 = _2069 + 43u;
        uint _2078 = _2069 + 44u;
        uint _2086 = _2069 + 45u;
        uint _2094 = _2069 + 46u;
        float _2105 = fma(_2039, cbSceneParam._m0[_2070].w, fma(_2035, cbSceneParam._m0[_2070].z, fma(_2031, cbSceneParam._m0[_2070].y, _2027 * cbSceneParam._m0[_2070].x)));
        float _2109 = fma(_2039, cbSceneParam._m0[_2078].w, fma(_2035, cbSceneParam._m0[_2078].z, fma(_2031, cbSceneParam._m0[_2078].y, _2027 * cbSceneParam._m0[_2078].x)));
        float _2117 = fma(_2039, cbSceneParam._m0[_2094].w, fma(_2035, cbSceneParam._m0[_2094].z, fma(_2031, cbSceneParam._m0[_2094].y, _2027 * cbSceneParam._m0[_2094].x)));
        float _2122 = cbSceneParam._m0[33u].z * _2117;
        float _2124 = cbSceneParam._m0[33u].w * _2117;
        float _2127 = fma(_2039, cbSceneParam._m0[_2086].w, fma(_2035, cbSceneParam._m0[_2086].z, fma(_2031, cbSceneParam._m0[_2086].y, _2027 * cbSceneParam._m0[_2086].x))) / _2117;
        float _2175 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
        float _4559 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2182 = (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2105) / _2117, (_2124 + _2109) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 + _2105) / _2117, (_2109 - _2122) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2122) / _2117, (_2109 - _2124) / _2117), _2127), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 - _2124) / _2117, (_2122 + _2109) / _2117), _2127), 0.0)).x), vec4(0.25)));
        _2189 = 1.0 - (_2182 * cbSceneParam._m0[34u].x);
        _2190 = 1.0 - (_2182 * cbSceneParam._m0[34u].y);
        _2191 = 1.0 - (_2182 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2189 = 1.0;
        _2190 = 1.0;
        _2191 = 1.0;
    }
    float _2255;
    float _2257;
    float _2259;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2243 = fma(_2039, cbSceneParam._m0[63u].w, fma(_2035, cbSceneParam._m0[63u].z, fma(_2031, cbSceneParam._m0[63u].y, _2027 * cbSceneParam._m0[63u].x)));
        float _2244 = fma(_2039, cbSceneParam._m0[60u].w, fma(_2035, cbSceneParam._m0[60u].z, fma(_2031, cbSceneParam._m0[60u].y, _2027 * cbSceneParam._m0[60u].x))) / _2243;
        float _2245 = fma(_2039, cbSceneParam._m0[61u].w, fma(_2035, cbSceneParam._m0[61u].z, fma(_2031, cbSceneParam._m0[61u].y, _2027 * cbSceneParam._m0[61u].x))) / _2243;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2244 >= cbSceneParam._m0[64u].x) && (_2245 >= cbSceneParam._m0[64u].y)) && (_2244 <= cbSceneParam._m0[64u].z)) && (_2245 <= cbSceneParam._m0[64u].w))
        {
            float _2383 = fma(_2039, cbSceneParam._m0[62u].w, fma(_2035, cbSceneParam._m0[62u].z, fma(_2031, cbSceneParam._m0[62u].y, _2027 * cbSceneParam._m0[62u].x))) / _2243;
            float _2387 = isnan(cbSceneParam._m0[41u].w) ? _2383 : (isnan(_2383) ? cbSceneParam._m0[41u].w : max(_2383, cbSceneParam._m0[41u].w));
            float _2430 = (cbSceneParam._m0[33u].x - sqrt(((_2041 * _2041) + (_2040 * _2040)) + (_2042 * _2042))) * cbSceneParam._m0[33u].y;
            float _4575 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
            float _2437 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2244, cbSceneParam._m0[33u].w + _2245), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2244, _2245 - cbSceneParam._m0[33u].z), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].z, _2245 - cbSceneParam._m0[33u].w), _2387), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2244 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2245), _2387), 0.0)).x), vec4(0.25)));
            float _2441 = 1.0 - (_2437 * cbSceneParam._m0[34u].x);
            float _2442 = 1.0 - (_2437 * cbSceneParam._m0[34u].y);
            float _2443 = 1.0 - (_2437 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2443) ? _2191 : (isnan(_2191) ? _2443 : min(_2191, _2443));
            frontier_phi_37_36_ladder_1 = isnan(_2442) ? _2190 : (isnan(_2190) ? _2442 : min(_2190, _2442));
            frontier_phi_37_36_ladder_2 = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
        }
        else
        {
            frontier_phi_37_36_ladder = _2191;
            frontier_phi_37_36_ladder_1 = _2190;
            frontier_phi_37_36_ladder_2 = _2189;
        }
        _2255 = frontier_phi_37_36_ladder_2;
        _2257 = frontier_phi_37_36_ladder_1;
        _2259 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2255 = _2189;
        _2257 = _2190;
        _2259 = _2191;
    }
    uvec4 _2264 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2266 = _2264.x * 14u;
    uint _2267 = _2266 + 13u;
    float _2274 = _937 + (-1.0);
    float _2279 = (cbLight._m0[_2267].x * _2274) + 1.0;
    float _2280 = (cbLight._m0[_2267].y * _2274) + 1.0;
    float _2281 = (cbLight._m0[_2267].z * _2274) + 1.0;
    float _2282 = (cbLight._m0[_2267].w * _2274) + 1.0;
    uint _2283 = _2266 + 5u;
    float _2289 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
    uint _2293 = _2266 + 4u;
    float _2302 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
    uint _2306 = _2266 | 1u;
    float _2317 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_775, _776, _777));
    float _2320 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_775, _776, _777));
    float _4611 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
    float _4622 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2325 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2327 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2334 = ((cbLight._m0[_2283].x * _2289) * _2327) + (((cbLight._m0[_2293].x * _2255) * _2302) * _2325);
    float _2335 = ((_2289 * cbLight._m0[_2283].y) * _2327) + (((cbLight._m0[_2293].y * _2257) * _2302) * _2325);
    float _2336 = ((_2289 * cbLight._m0[_2283].z) * _2327) + (((cbLight._m0[_2293].z * _2259) * _2302) * _2325);
    uvec4 _2340 = floatBitsToUint(cbLight._m0[_2266 + 12u]);
    bool _2342 = _2340.x == 0u;
    float _2444;
    float _2446;
    float _2448;
    if (_2342)
    {
        _2444 = _2334;
        _2446 = _2335;
        _2448 = _2336;
    }
    else
    {
        uint _2452 = _2266 + 6u;
        float _2468 = (dot(vec3(cbLight._m0[_2266 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2469 = _2468 * _2468;
        float _4633 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2470 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2471 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2444 = (((cbLight._m0[_2452].x * 0.3183098733425140380859375) * _2470) * _2471) + _2334;
        _2446 = (((cbLight._m0[_2452].y * 0.3183098733425140380859375) * _2470) * _2471) + _2335;
        _2448 = (((cbLight._m0[_2452].z * 0.3183098733425140380859375) * _2470) * _2471) + _2336;
    }
    bool _2451 = _2340.y == 0u;
    float _2506;
    float _2508;
    float _2510;
    if (_2451)
    {
        _2506 = _2444;
        _2508 = _2446;
        _2510 = _2448;
    }
    else
    {
        uint _2668 = _2266 + 7u;
        float _2684 = (dot(vec3(cbLight._m0[_2266 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2685 = _2684 * _2684;
        float _4649 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2686 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2687 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2506 = (((cbLight._m0[_2668].x * 0.3183098733425140380859375) * _2686) * _2687) + _2444;
        _2508 = (((cbLight._m0[_2668].y * 0.3183098733425140380859375) * _2686) * _2687) + _2446;
        _2510 = (((cbLight._m0[_2668].z * 0.3183098733425140380859375) * _2686) * _2687) + _2448;
    }
    uint _2513 = _2266 + 8u;
    float _2526 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _778) * 0.949999988079071044921875);
    float _2527 = _2526 * _2526;
    float _2528 = cbLight._m0[_2266].x + _854;
    float _2529 = cbLight._m0[_2266].y + _855;
    float _2530 = cbLight._m0[_2266].z + _856;
    float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
    float _2535 = _2534 * _2528;
    float _2536 = _2534 * _2529;
    float _2537 = _2534 * _2530;
    float _2538 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2266].xyz));
    float _4665 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2541 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _4676 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2542 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2543 = dot(vec3(_775, _776, _777), vec3(_2535, _2536, _2537));
    float _4687 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2547 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2535, _2536, _2537));
    float _4698 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2551 = _2527 * _2527;
    float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
    float _2566 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2567 = 1.0 - _2527;
    float _2578 = (0.5 / (((_2542 * ((_2541 * _2567) + _2527)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2567) + _2527) * _2541))) * _2541;
    float _4709 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
    uint _2594 = _2266 + 9u;
    float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2306].w)) * _778) * 0.949999988079071044921875);
    float _2606 = _2605 * _2605;
    float _2607 = cbLight._m0[_2306].x + _854;
    float _2608 = cbLight._m0[_2306].y + _855;
    float _2609 = cbLight._m0[_2306].z + _856;
    float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
    float _2614 = _2613 * _2607;
    float _2615 = _2613 * _2608;
    float _2616 = _2613 * _2609;
    float _2617 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2306].xyz));
    float _4720 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2621 = dot(vec3(_775, _776, _777), vec3(_2614, _2615, _2616));
    float _4731 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2306].xyz), vec3(_2614, _2615, _2616));
    float _4742 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2606 * _2606;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2643 = 1.0 - _2606;
    float _2653 = (0.5 / (((_2542 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2643) + _2606) * _2620))) * _2620;
    float _4753 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2655 = (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    float _2665 = (((_2642 * cbLight._m0[_2594].x) * _2655) * _2289) + ((((cbLight._m0[_2513].x * _2255) * _2566) * _2580) * _2302);
    float _2666 = (((_2642 * cbLight._m0[_2594].y) * _2655) * _2289) + ((((cbLight._m0[_2513].y * _2257) * _2566) * _2580) * _2302);
    float _2667 = (((_2642 * cbLight._m0[_2594].z) * _2655) * _2289) + ((((cbLight._m0[_2513].z * _2259) * _2566) * _2580) * _2302);
    float _2723;
    float _2725;
    float _2727;
    if (_2342)
    {
        _2723 = _2665;
        _2725 = _2666;
        _2727 = _2667;
    }
    else
    {
        uint _2729 = _2266 + 2u;
        uint _2733 = _2266 + 10u;
        float _2747 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2729].w)) * _778) * 0.949999988079071044921875);
        float _2748 = _2747 * _2747;
        float _2749 = cbLight._m0[_2729].x + _854;
        float _2750 = cbLight._m0[_2729].y + _855;
        float _2751 = cbLight._m0[_2729].z + _856;
        float _2755 = inversesqrt(dot(vec3(_2749, _2750, _2751), vec3(_2749, _2750, _2751)));
        float _2756 = _2755 * _2749;
        float _2757 = _2755 * _2750;
        float _2758 = _2755 * _2751;
        float _2759 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2729].xyz));
        float _4764 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2762 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2763 = dot(vec3(_775, _776, _777), vec3(_2756, _2757, _2758));
        float _4775 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2767 = dot(vec3(cbLight._m0[_2729].xyz), vec3(_2756, _2757, _2758));
        float _4786 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2771 = _2748 * _2748;
        float _2775 = ((_2766 * _2766) * (_2771 + (-1.0))) + 1.0;
        float _2784 = (exp2(log2(1.0 - (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2785 = 1.0 - _2748;
        float _2795 = (0.5 / (((_2542 * ((_2762 * _2785) + _2748)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2785) + _2748) * _2762))) * _2762;
        float _4797 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2797 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2771 / ((_2775 * _2775) * 3.141590118408203125));
        float _2798 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
        _2723 = (((_2784 * cbLight._m0[_2733].x) * _2797) * _2798) + _2665;
        _2725 = (((_2784 * cbLight._m0[_2733].y) * _2797) * _2798) + _2666;
        _2727 = (((_2784 * cbLight._m0[_2733].z) * _2797) * _2798) + _2667;
    }
    float _2829;
    float _2831;
    float _2833;
    if (_2451)
    {
        _2829 = _2723;
        _2831 = _2725;
        _2833 = _2727;
    }
    else
    {
        uint _2840 = _2266 + 3u;
        uint _2844 = _2266 + 11u;
        float _2858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2840].w)) * _778) * 0.949999988079071044921875);
        float _2859 = _2858 * _2858;
        float _2860 = cbLight._m0[_2840].x + _854;
        float _2861 = cbLight._m0[_2840].y + _855;
        float _2862 = cbLight._m0[_2840].z + _856;
        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
        float _2867 = _2866 * _2860;
        float _2868 = _2866 * _2861;
        float _2869 = _2866 * _2862;
        float _2870 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2840].xyz));
        float _4813 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
        float _2873 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2874 = dot(vec3(_775, _776, _777), vec3(_2867, _2868, _2869));
        float _4824 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2877 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2878 = dot(vec3(cbLight._m0[_2840].xyz), vec3(_2867, _2868, _2869));
        float _4835 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2882 = _2859 * _2859;
        float _2886 = ((_2877 * _2877) * (_2882 + (-1.0))) + 1.0;
        float _2895 = (exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2896 = 1.0 - _2859;
        float _2906 = (0.5 / (((_2542 * ((_2873 * _2896) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2542 * _2896) + _2859) * _2873))) * _2873;
        float _4846 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2908 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2882 / ((_2886 * _2886) * 3.141590118408203125));
        float _2909 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
        _2829 = (((_2895 * cbLight._m0[_2844].x) * _2908) * _2909) + _2723;
        _2831 = (((_2895 * cbLight._m0[_2844].y) * _2908) * _2909) + _2725;
        _2833 = (((_2895 * cbLight._m0[_2844].z) * _2908) * _2909) + _2727;
    }
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    if (_2264.y == 0u)
    {
        uvec4 _2930 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2931 = _2930.x;
        uint _2942 = uint((float(_2930.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2931))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2931)));
        float _2952 = (log2(_2042 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2953 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        uint _2956 = uint(isnan(14.0) ? _2953 : (isnan(_2953) ? 14.0 : min(_2953, 14.0)));
        uvec4 _2961 = texelFetch(g_lightClusterGridBuffer, int(((_2956 << 2u) + (_2942 << 6u)) >> 2u));
        uint _2962 = _2961.x;
        uint _2963 = _2930.z;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        if (((((1u << ((_2963 >> 4u) & 15u)) + 4294967295u) & _2962) == 0u) || ((_2963 & 240u) == 0u))
        {
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
        }
        else
        {
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            uint _3201 = 0u;
            uint _3210;
            bool _3211;
            for (;;)
            {
                _3210 = texelFetch(g_lightClassification, int((((_2956 << 5u) + (_2942 << 9u)) + (_3201 << 2u)) >> 2u)).x;
                _3211 = _3210 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3211)
                {
                    frontier_phi_71_pred = _3200;
                    frontier_phi_71_pred_1 = _3199;
                    frontier_phi_71_pred_2 = _3198;
                    frontier_phi_71_pred_3 = _3197;
                    frontier_phi_71_pred_4 = _3196;
                    frontier_phi_71_pred_5 = _3195;
                }
                else
                {
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    uint _3346;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3210;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    for (;;)
                    {
                        uint _3350 = uint(findLSB(_3346)) + (_3201 << 5u);
                        uint _3347 = (_3346 + 4294967295u) & _3346;
                        uint _3352 = _3350 * 48u;
                        vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 3u)).x));
                        uint _3372 = (_3350 * 48u) + 4u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3372)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3372 + 3u)).x));
                        uint _3391 = (_3350 * 48u) + 8u;
                        vec3 _3402 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x));
                        float _3406 = _3366.x - _2040;
                        float _3407 = _3366.y - _2041;
                        float _3408 = _3366.z - _2042;
                        float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                        float _3412 = inversesqrt(_3409);
                        float _3413 = _3412 * _3406;
                        float _3414 = _3412 * _3407;
                        float _3415 = _3412 * _3408;
                        float _3416 = dot(vec3(_893, _896, _899), vec3(_3413, _3414, _3415));
                        float _3421 = 1.0 - (_3409 * _3366.w);
                        float _4872 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3422 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3423 = sqrt(_3409) * _3385.w;
                        float _3426 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                        float _3427 = _3426 * _3426;
                        float _3430 = ((1.0 - _3427) * _3416) + _3427;
                        float _3433 = _3423 * _3423;
                        float _3437 = ((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3422) / ((_3433 * 0.699999988079071044921875) + 1.0);
                        float _3441 = (-0.0) - _2040;
                        float _3442 = (-0.0) - _2041;
                        float _3443 = (-0.0) - _2042;
                        float _3447 = inversesqrt(dot(vec3(_3441, _3442, _3443), vec3(_3441, _3442, _3443)));
                        float _3448 = _3447 * _3441;
                        float _3449 = _3447 * _3442;
                        float _3450 = _3447 * _3443;
                        float _3457 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                        float _3458 = 1.0 - _953;
                        float _3465 = sqrt(1.0 - ((1.0 - (_3458 * _3458)) * (1.0 - (_3457 * _3457))));
                        float _3466 = _3465 * _3465;
                        float _3467 = _3466 * _3466;
                        float _3468 = _3448 + _3413;
                        float _3469 = _3449 + _3414;
                        float _3470 = _3450 + _3415;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3478 = dot(vec3(_893, _896, _899), vec3(_3448, _3449, _3450));
                        float _4888 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                        float _3481 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3482 = dot(vec3(_893, _896, _899), vec3(_3474 * _3468, _3474 * _3469, _3474 * _3470));
                        float _4899 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3485 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3489 = ((_3485 * _3485) * (_3467 + (-1.0))) + 1.0;
                        float _3490 = _3426 * _3466;
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3416) + _3491;
                        float _4910 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3495 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3496 = 1.0 - _3466;
                        float _3506 = (0.5 / (((_3495 * ((_3481 * _3496) + _3466)) + 9.9999999392252902907785028219223e-09) + (((_3495 * _3496) + _3466) * _3481))) * _3495;
                        float _4921 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3517 = (((_3467 * 3.1415927410125732421875) * (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) / ((_3489 * _3489) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125))) * _3422;
                        _3270 = (_3437 * _3385.x) + _3343;
                        _3271 = (_3437 * _3385.y) + _3344;
                        _3272 = (_3437 * _3385.z) + _3345;
                        _3267 = (_3517 * _3402.x) + _3340;
                        _3268 = (_3517 * _3402.y) + _3341;
                        _3269 = (_3517 * _3402.z) + _3342;
                        if (_3347 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3347;
                        }
                    }
                    frontier_phi_71_pred = _3272;
                    frontier_phi_71_pred_1 = _3271;
                    frontier_phi_71_pred_2 = _3270;
                    frontier_phi_71_pred_3 = _3269;
                    frontier_phi_71_pred_4 = _3268;
                    frontier_phi_71_pred_5 = _3267;
                }
                _3053 = frontier_phi_71_pred;
                _3051 = frontier_phi_71_pred_1;
                _3049 = frontier_phi_71_pred_2;
                _3047 = frontier_phi_71_pred_3;
                _3045 = frontier_phi_71_pred_4;
                _3043 = frontier_phi_71_pred_5;
                uint _3202 = _3201 + 1u;
                if (_3202 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3195 = _3043;
                    _3196 = _3045;
                    _3197 = _3047;
                    _3198 = _3049;
                    _3199 = _3051;
                    _3200 = _3053;
                    _3201 = _3202;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
        }
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.z;
        uint _3059 = (_3057 >> 8u) & 15u;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((4294967295u << _3059) & _2962) == 0u)
        {
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
            _3173 = _3052;
        }
        else
        {
            float _3188 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
            float _3189 = _3188 * _2040;
            float _3190 = _3188 * _2041;
            float _3191 = _3188 * _2042;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3059 < ((_3057 >> 12u) & 15u))
            {
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3323 = _3042;
                float _3324 = _3044;
                float _3325 = _3046;
                float _3326 = _3048;
                float _3327 = _3050;
                float _3328 = _3052;
                uint _3329 = _3059;
                uint _3338;
                bool _3339;
                for (;;)
                {
                    _3338 = texelFetch(g_lightClassification, int((((_2956 << 5u) + (_2942 << 9u)) + (_3329 << 2u)) >> 2u)).x;
                    _3339 = _3338 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3339)
                    {
                        frontier_phi_82_pred = _3328;
                        frontier_phi_82_pred_1 = _3327;
                        frontier_phi_82_pred_2 = _3326;
                        frontier_phi_82_pred_3 = _3325;
                        frontier_phi_82_pred_4 = _3324;
                        frontier_phi_82_pred_5 = _3323;
                    }
                    else
                    {
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        float _3548 = _3327;
                        float _3549 = _3328;
                        uint _3550 = _3338;
                        uint _3551;
                        vec4 _3576;
                        float _3577;
                        vec4 _3592;
                        vec3 _3604;
                        vec4 _3619;
                        vec4 _3634;
                        float _3680;
                        bool _3681;
                        for (;;)
                        {
                            uint _3561 = ((_3329 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3550));
                            _3551 = (_3550 + 4294967295u) & _3550;
                            uint _3563 = _3561 * 40u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            _3577 = _3576.w;
                            uint _3579 = (_3561 * 40u) + 4u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3594 = (_3561 * 40u) + 8u;
                            _3604 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x));
                            uint _3606 = (_3561 * 40u) + 16u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3561 * 40u) + 20u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3561 * 40u) + 24u;
                            vec4 _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3655 = (_3561 * 40u) + 28u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3680 = fma(_2042, _3668.z, fma(_2041, _3668.y, _3668.x * _2040)) + _3668.w;
                            _3681 = !((fma(_2042, _3649.z, fma(_2041, _3649.y, _3649.x * _2040)) + _3649.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3681)
                            {
                                float _3708 = _3576.x - _2040;
                                float _3709 = _3576.y - _2041;
                                float _3710 = _3576.z - _2042;
                                float _3711 = dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710));
                                float _3714 = inversesqrt(_3711);
                                float _3715 = _3714 * _3708;
                                float _3716 = _3714 * _3709;
                                float _3717 = _3714 * _3710;
                                float _3721 = 1.0 - (_3711 / (_3577 * _3577));
                                float _4932 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3722 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3726 = sqrt(_3711) * _3592.w;
                                float _3728 = 1.39999997615814208984375 / (_3726 + 1.39999997615814208984375);
                                float _3729 = _3728 * _3728;
                                float _3732 = ((1.0 - _3729) * dot(vec3(_3715, _3716, _3717), vec3(_893, _896, _899))) + _3729;
                                float _3735 = _3726 * _3726;
                                float _3739 = (fma(_2042, _3619.z, fma(_2041, _3619.y, _3619.x * _2040)) + _3619.w) / _3680;
                                float _3740 = (fma(_2042, _3634.z, fma(_2041, _3634.y, _3634.x * _2040)) + _3634.w) / _3680;
                                float _3744 = 1.0 - dot(vec2(_3739, _3740), vec2(_3739, _3740));
                                float _4948 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3745 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3746 = _3745 * (((isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0))) * _3722) / ((_3735 * 0.699999988079071044921875) + 1.0));
                                float _3758 = exp2(log2(1.0 / ((_3735 * 3.5) + 5.0)) * 0.25);
                                float _3759 = 1.0 - _953;
                                float _3766 = sqrt(1.0 - ((1.0 - (_3759 * _3759)) * (1.0 - (_3758 * _3758))));
                                float _3767 = _3766 * _3766;
                                float _3768 = _3767 * _3767;
                                float _3769 = _3715 - _3189;
                                float _3770 = _3716 - _3190;
                                float _3771 = _3717 - _3191;
                                float _3775 = inversesqrt(dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771)));
                                float _3779 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3189, (-0.0) - _3190, (-0.0) - _3191));
                                float _4959 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3782 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3783 = dot(vec3(_893, _896, _899), vec3(_3775 * _3769, _3775 * _3770, _3775 * _3771));
                                float _4970 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                                float _3786 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3790 = ((_3786 * _3786) * (_3768 + (-1.0))) + 1.0;
                                float _3791 = _3728 * _3767;
                                float _3792 = _3791 * _3791;
                                float _3798 = ((1.0 - _3792) * dot(vec3(_893, _896, _899), vec3(_3715, _3716, _3717))) + _3792;
                                float _4981 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3800 = 1.0 - _3767;
                                float _3810 = (0.5 / (((_3799 * ((_3782 * _3800) + _3767)) + 9.9999999392252902907785028219223e-09) + (((_3799 * _3800) + _3767) * _3782))) * _3799;
                                float _4992 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3820 = (_3745 * _3722) * (((_3768 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3790 * _3790) * ((_3735 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3746 * _3592.z;
                                frontier_phi_88_pred_1 = _3746 * _3592.y;
                                frontier_phi_88_pred_2 = _3746 * _3592.x;
                                frontier_phi_88_pred_3 = _3820 * _3604.z;
                                frontier_phi_88_pred_4 = _3820 * _3604.y;
                                frontier_phi_88_pred_5 = _3820 * _3604.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3829 = frontier_phi_88_pred;
                            _3828 = frontier_phi_88_pred_1;
                            _3827 = frontier_phi_88_pred_2;
                            _3826 = frontier_phi_88_pred_3;
                            _3825 = frontier_phi_88_pred_4;
                            _3824 = frontier_phi_88_pred_5;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            _3536 = _3829 + _3549;
                            _3531 = _3824 + _3544;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            if (_3551 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3551;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3536;
                        frontier_phi_82_pred_1 = _3535;
                        frontier_phi_82_pred_2 = _3534;
                        frontier_phi_82_pred_3 = _3533;
                        frontier_phi_82_pred_4 = _3532;
                        frontier_phi_82_pred_5 = _3531;
                    }
                    _3174 = frontier_phi_82_pred;
                    _3172 = frontier_phi_82_pred_1;
                    _3170 = frontier_phi_82_pred_2;
                    _3168 = frontier_phi_82_pred_3;
                    _3166 = frontier_phi_82_pred_4;
                    _3164 = frontier_phi_82_pred_5;
                    uint _3330 = _3329 + 1u;
                    if (_3330 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3323 = _3164;
                        _3324 = _3166;
                        _3325 = _3168;
                        _3326 = _3170;
                        _3327 = _3172;
                        _3328 = _3174;
                        _3329 = _3330;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3170;
                frontier_phi_63_64_ladder_1 = _3174;
                frontier_phi_63_64_ladder_2 = _3172;
                frontier_phi_63_64_ladder_3 = _3168;
                frontier_phi_63_64_ladder_4 = _3166;
                frontier_phi_63_64_ladder_5 = _3164;
            }
            else
            {
                frontier_phi_63_64_ladder = _3048;
                frontier_phi_63_64_ladder_1 = _3052;
                frontier_phi_63_64_ladder_2 = _3050;
                frontier_phi_63_64_ladder_3 = _3046;
                frontier_phi_63_64_ladder_4 = _3044;
                frontier_phi_63_64_ladder_5 = _3042;
            }
            _3163 = frontier_phi_63_64_ladder_5;
            _3165 = frontier_phi_63_64_ladder_4;
            _3167 = frontier_phi_63_64_ladder_3;
            _3169 = frontier_phi_63_64_ladder;
            _3171 = frontier_phi_63_64_ladder_2;
            _3173 = frontier_phi_63_64_ladder_1;
        }
        float _3178 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2975 = (_3178 * _3169) + _2506;
        _2977 = (_3178 * _3171) + _2508;
        _2979 = (_3178 * _3173) + _2510;
        _2981 = ((_3163 * 0.039999999105930328369140625) * _3178) + _2829;
        _2983 = ((_3165 * 0.039999999105930328369140625) * _3178) + _2831;
        _2985 = ((_3167 * 0.039999999105930328369140625) * _3178) + _2833;
    }
    else
    {
        _2975 = _2506;
        _2977 = _2508;
        _2979 = _2510;
        _2981 = _2829;
        _2983 = _2831;
        _2985 = _2833;
    }
    float _5008 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _5019 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _5030 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _3002 = ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2975 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _937))) + ((_2981 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3003 = ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2977 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _937))) + ((_2983 + ((isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3004 = ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2979 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _937))) + ((_2985 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _3005 = _281 + 6u;
    float _3013 = _874 / cbSceneParam._m0[86u].x;
    float _3014 = _875 / cbSceneParam._m0[86u].y;
    vec4 _3028 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3013, _3014, (log2((isnan(cbSceneParam._m0[77u].w) ? _796 : (isnan(_796) ? cbSceneParam._m0[77u].w : min(_796, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3030 = _3028.x;
    float _3031 = _3028.y;
    float _3032 = _3028.z;
    float _3033 = _3028.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_796 > cbSceneParam._m0[78u].w)
    {
        float _3067 = isnan(_796) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _796 : min(cbSceneParam._m0[80u].w, _796));
        float _3068 = _3067 / _796;
        float _3079 = _3068 * _847;
        float _3080 = _848 * _3068;
        float _3081 = (-0.0) - _3080;
        float _3083 = _3068 * _849;
        float _3085 = (cbSceneParam._m0[77u].w * _3081) / _3067;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3080;
        float _3093 = sqrt(((_3079 * _3079) + (_3080 * _3080)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3067)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3280;
        if (abs((_3081 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3280 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3224 = 1.0 / cbSceneParam._m0[80u].x;
            float _3225 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3226 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            _3280 = ((abs(_3093 / _3081) * cbSceneParam._m0[80u].y) * ((((_3235 - _3236) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))))) * _3224)) - ((exp2(_3103 * _3235) - exp2(_3103 * _3236)) * _3224))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3282 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3013, _3014, 1.0), 0.0);
        float _3291 = exp2((_3280 * (-1.44269502162933349609375)) * (1.0 - _3282.w));
        float _3292 = log2(_3291);
        float _3308 = log2(_3033);
        _3105 = (exp2(_3308 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].x)) * _3282.x) / cbSceneParam._m0[78u].x)) + _3030;
        _3107 = (exp2(_3308 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].y)) * _3282.y) / cbSceneParam._m0[78u].y)) + _3031;
        _3109 = (exp2(_3308 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3292 * cbSceneParam._m0[78u].z)) * _3282.z) / cbSceneParam._m0[78u].z)) + _3032;
        _3111 = _3291 * _3033;
    }
    else
    {
        _3105 = _3030;
        _3107 = _3031;
        _3109 = _3032;
        _3111 = _3033;
    }
    bool _3318;
    vec4 _3121;
    vec4 _3143;
    float _3145;
    float _3149;
    float _3150;
    float _3151;
    float _3152;
    bool _3162;
    for (;;)
    {
        _3121 = cbMatDynParam._m0[0u];
        float _3123 = roundEven(_3121.y);
        bool _3124 = _3123 == 3.0;
        float _3125 = log2(_3111);
        float _3132 = exp2(_3125 * cbSceneParam._m0[78u].x) * _3002;
        float _3133 = exp2(_3125 * cbSceneParam._m0[78u].y) * _3003;
        float _3134 = exp2(_3125 * cbSceneParam._m0[78u].z) * _3004;
        float _3141 = _863 + (-0.5);
        _3143 = cbMtdParam._m0[1u];
        _3145 = _3143.y * _3141;
        float _3148 = (_3123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3149 = _3148 * (_3124 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3105)));
        _3150 = _3148 * (_3124 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3107)));
        _3151 = _3148 * (_3124 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3109)));
        _3152 = _3141 * 0.999000012874603271484375;
        _3162 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3162)
        {
            if ((cbInstanceData._m0[_281 + 7u].x + _3152) < 0.5)
            {
                _3318 = true;
                break;
            }
        }
        uint _3259 = _912 + uint(_3121.w);
        if ((cbInstanceData._m0[_3259].w < 1.0) && ((cbInstanceData._m0[_3259].w + _3152) < 0.5))
        {
            _3318 = true;
            break;
        }
        if ((_3145 + 1.0) < _3143.x)
        {
            _3318 = true;
            break;
        }
        _3318 = false;
        break;
    }
    float _3522;
    if (_3318)
    {
        discard_state = true;
        _3522 = 0.0;
    }
    else
    {
        _3522 = cbInstanceData._m0[_3005].w;
    }
    SV_Target.x = _3149;
    SV_Target.y = _3150;
    SV_Target.z = _3151;
    SV_Target.w = _3522;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3005].w;
    discard_exit();
}


