#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1240;
float _3881;
float _3882;
float _3883;
float _3884;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3893 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _474 = _472.x;
    float _475 = _472.y;
    float _476 = _472.z;
    float _485 = ((_455.z - _476) * _380) + _476;
    float _488 = ((((_455.x - _474) * _380) + _474) * 2.0) + (-1.0);
    float _489 = ((((_455.y - _475) * _380) + _475) * 2.0) + (-1.0);
    float _490 = dot(vec2(_488, _489), vec2(_488, _489));
    float _3904 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _495 = sqrt(1.0 - (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))));
    vec4 _515 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _527 = (_488 + ((((_428.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_515.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _528 = (_489 + ((((_428.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_515.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _531 = fma(_495, _232, fma(_528, _239, _527 * _225));
    float _534 = fma(_495, _233, fma(_528, _240, _527 * _226));
    float _537 = fma(_495, _234, fma(_528, _241, _527 * _227));
    float _541 = inversesqrt(dot(vec3(_531, _534, _537), vec3(_531, _534, _537)));
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _577 = ((_572 - _573) * cbMtdParam._m0[24u].z) + _573;
    float _579 = (cbMtdParam._m0[19u].x + dot(vec4(_541 * _531, _541 * _534, _541 * _537, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_577 * cbMtdParam._m0[21u].z);
    float _3915 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _595 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_577 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3926 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _596 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _600 = ((_580 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) * _596) + _387;
    float _601 = ((_580 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) * _596) + _388;
    float _602 = ((_580 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) * _596) + _389;
    float _607 = (((_428.z - _485) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _485;
    float _611 = ((_515.z - _607) * cbMtdParam._m0[19u].w) + _607;
    vec4 _624 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _631 = (_624.x * 2.0) + (-1.0);
    float _632 = (_624.y * 2.0) + (-1.0);
    float _633 = dot(vec2(_631, _632), vec2(_631, _632));
    float _3937 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _642 = (((_624.z - _611) * _580) * _596) + _611;
    float _657 = (((cbMtdParam._m0[21u].x * _527) + ((_631 - _527) * _580)) * _596) + _527;
    float _658 = (((cbMtdParam._m0[21u].x * _528) + ((_632 - _528) * _580)) * _596) + _528;
    float _659 = (((sqrt(1.0 - (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) - _495) * _580) * _596) + _495;
    float _664 = cbMtdParam._m0[22u].x + _515.w;
    float _667 = fma(_659, _232, fma(_658, _239, _657 * _225));
    float _670 = fma(_659, _233, fma(_658, _240, _657 * _226));
    float _673 = fma(_659, _234, fma(_658, _241, _657 * _227));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3948 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _681 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3970 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3981 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3992 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    vec4 _765 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _767 = _765.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _921 = sqrt(((_751 * _751) + (_752 * _752)) + (_753 * _753));
        float _927 = (cbMatDynParam._m0[5u].x * _921) + cbMatDynParam._m0[5u].y;
        float _4003 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _932 = (cbMatDynParam._m0[5u].z * _921) + cbMatDynParam._m0[5u].w;
        float _4014 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) - _928)) + _928) < ((_767 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _800 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _803 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _816 = _244 + 9u;
    uint _817 = _816 + uint(cbMatDynParam._m0[0u].w);
    float _823 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_817].x;
    float _824 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * cbInstanceData._m0[_817].y;
    float _825 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_817].z;
    float _4025 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _4047 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    vec4 _837 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _841 = ((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * TEXCOORD_5.w) * _837.x;
    float _842 = dot(vec3(_678, _679, _680), vec3(_758, _759, _760));
    float _845 = _842 * 2.0;
    float _849 = (_845 * _678) - _758;
    float _850 = (_845 * _679) - _759;
    float _851 = (_845 * _680) - _760;
    float _855 = abs(dot(vec3(_758, _759, _760), vec3(_678, _679, _680)));
    float _4058 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _857 = sqrt(_681);
    float _870 = exp2((_857 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_857 * 3.0));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1239;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _964 = fma(_910, cbModelParam._m0[26u].z, fma(_906, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902));
        float _968 = fma(_910, cbModelParam._m0[27u].z, fma(_906, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902));
        float _972 = fma(_910, cbModelParam._m0[28u].z, fma(_906, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902));
        float _997 = _902 + _678;
        float _998 = _906 + _679;
        float _999 = _910 + _680;
        float _1009 = fma(_999, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _997)) - _964;
        float _1010 = fma(_999, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _997)) - _968;
        float _1011 = fma(_999, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _997)) - _972;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_964 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_968 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[34u].z) + ((((((_972 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1067 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1033.x + (-0.5));
        float _1069 = _1067 * (_1033.y + (-0.5));
        float _1070 = _1067 * (_1033.z + (-0.5));
        float _1077 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1040.x + (-0.5));
        float _1079 = _1077 * (_1040.y + (-0.5));
        float _1080 = _1077 * (_1040.z + (-0.5));
        float _1087 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1047.x + (-0.5));
        float _1089 = _1087 * (_1047.y + (-0.5));
        float _1090 = _1087 * (_1047.z + (-0.5));
        float _1097 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1054.x + (-0.5));
        float _1099 = _1097 * (_1054.y + (-0.5));
        float _1100 = _1097 * (_1054.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1121 = (dot(vec3(_678, _679, _680), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1131 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _4106 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1133 + 1.0))) + _1138) * _1101;
        float _1148 = _1069 * 0.5;
        float _1149 = _1079 * 0.5;
        float _1150 = _1089 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_678, _679, _680), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4139 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1175 + 1.0))) + _1180) * _1102;
        float _1190 = _1070 * 0.5;
        float _1191 = _1080 * 0.5;
        float _1192 = _1090 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_678, _679, _680), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4172 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1217 + 1.0))) + _1222) * _1103;
        _1239 = _1070;
        _1241 = _1069;
        _1242 = _1068;
        _1243 = _1080;
        _1244 = _1079;
        _1245 = _1078;
        _1246 = _1090;
        _1247 = _1089;
        _1248 = _1088;
        _1249 = _1103;
        _1250 = _1102;
        _1251 = _1101;
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1253 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1254 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _1240;
        _1241 = _1240;
        _1242 = _1240;
        _1243 = _1240;
        _1244 = _1240;
        _1245 = _1240;
        _1246 = _1240;
        _1247 = _1240;
        _1248 = _1240;
        _1249 = _1240;
        _1250 = _1240;
        _1251 = _1240;
        _1252 = 0.0;
        _1253 = 0.0;
        _1254 = 0.0;
    }
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1282 = fma(_910, cbModelParam._m0[30u].z, fma(_906, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _902));
        float _1286 = fma(_910, cbModelParam._m0[31u].z, fma(_906, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _902));
        float _1290 = fma(_910, cbModelParam._m0[32u].z, fma(_906, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _902));
        float _1313 = _902 + _678;
        float _1314 = _906 + _679;
        float _1315 = _910 + _680;
        float _1325 = fma(_1315, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313)) - _1282;
        float _1326 = fma(_1315, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313)) - _1286;
        float _1327 = fma(_1315, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313)) - _1290;
        float _1331 = inversesqrt(dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327)));
        float _1344 = ((_1331 * _1325) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1282 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1345 = ((_1331 * _1326) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1286 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1346 = ((_1331 * _1327) / cbModelParam._m0[35u].z) + ((((((_1290 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1344, _1345, _1346), 0.0);
        float _1381 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1348.x + (-0.5));
        float _1383 = _1381 * (_1348.y + (-0.5));
        float _1384 = _1381 * (_1348.z + (-0.5));
        float _1391 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1355.x + (-0.5));
        float _1393 = _1391 * (_1355.y + (-0.5));
        float _1394 = _1391 * (_1355.z + (-0.5));
        float _1401 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1362.x + (-0.5));
        float _1403 = _1401 * (_1362.y + (-0.5));
        float _1404 = _1401 * (_1362.z + (-0.5));
        float _1411 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1369.x + (-0.5));
        float _1413 = _1411 * (_1369.y + (-0.5));
        float _1414 = _1411 * (_1369.z + (-0.5));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = _1382 * 0.5;
        float _1419 = _1392 * 0.5;
        float _1420 = _1402 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_678, _679, _680), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4235 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1445 + 1.0))) + _1450) * _1415;
        float _1460 = _1383 * 0.5;
        float _1461 = _1393 * 0.5;
        float _1462 = _1403 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_678, _679, _680), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1416 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4268 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1487 + 1.0))) + _1492) * _1416;
        float _1502 = _1384 * 0.5;
        float _1503 = _1394 * 0.5;
        float _1504 = _1404 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_678, _679, _680), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4301 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1529 + 1.0))) + _1534) * _1417;
        _1551 = _1384;
        _1552 = _1383;
        _1553 = _1382;
        _1554 = _1394;
        _1555 = _1393;
        _1556 = _1392;
        _1557 = _1404;
        _1558 = _1403;
        _1559 = _1402;
        _1560 = _1417;
        _1561 = _1416;
        _1562 = _1415;
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1564 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1240;
        _1552 = _1240;
        _1553 = _1240;
        _1554 = _1240;
        _1555 = _1240;
        _1556 = _1240;
        _1557 = _1240;
        _1558 = _1240;
        _1559 = _1240;
        _1560 = _1240;
        _1561 = _1240;
        _1562 = _1240;
        _1563 = 0.0;
        _1564 = 0.0;
        _1565 = 0.0;
    }
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1252)) + _1252;
    float _1576 = (cbModelParam._m0[1u].x * (_1564 - _1253)) + _1253;
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1254)) + _1254;
    float _1598 = fma(_1577, cbSceneParam._m0[89u].z, fma(_1576, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1601 = fma(_1577, cbSceneParam._m0[90u].z, fma(_1576, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1604 = fma(_1577, cbSceneParam._m0[91u].z, fma(_1576, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1575));
    float _1619 = _849 * 0.5;
    float _1620 = _850 * 0.5;
    float _1621 = _851 * 0.5;
    float _1622 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1625 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1552, _1555, _1558, _1561));
    float _1628 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1662;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1635 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1239, _1243, _1246, _1249));
        float _1639 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1241, _1244, _1247, _1250));
        float _1643 = dot(vec4(_1619, _1620, _1621, 1.0), vec4(_1242, _1245, _1248, _1251));
        float _1650 = dot(vec4(cbModelParam._m0[39u]), vec4(_1619, _1620, _1621, 1.0));
        _1662 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1650) ? 0.0 : (isnan(0.0) ? _1650 : max(0.0, _1650))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1662 = 1.0;
    }
    float _1673;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1664 = dot(vec4(cbModelParam._m0[40u]), vec4(_1619, _1620, _1621, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1677 = (_1673 * cbModelParam._m0[1u].x) + (_1662 * (1.0 - cbModelParam._m0[1u].x));
    float _1687 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1687 : min(cbModelParam._m0[25u].z, _1687));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1735 = fma(_910, cbModelParam._m0[13u].z, fma(_906, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902)) + cbModelParam._m0[13u].w;
        float _1739 = fma(_910, cbModelParam._m0[14u].z, fma(_906, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902)) + cbModelParam._m0[14u].w;
        float _1743 = fma(_910, cbModelParam._m0[15u].z, fma(_906, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902)) + cbModelParam._m0[15u].w;
        float _1746 = fma(_851, cbModelParam._m0[13u].z, fma(_850, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849));
        float _1749 = fma(_851, cbModelParam._m0[14u].z, fma(_850, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849));
        float _1752 = fma(_851, cbModelParam._m0[15u].z, fma(_850, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849));
        float _1780;
        if (_1746 > 0.0)
        {
            _1780 = abs((1.0 - _1735) / _1746);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1735 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1780 = frontier_phi_17_15_ladder;
        }
        float _1949;
        if (_1749 > 0.0)
        {
            _1949 = abs((1.0 - _1739) / _1749);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1739 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1949 = frontier_phi_26_22_ladder;
        }
        float _2244;
        if (_1752 > 0.0)
        {
            _2244 = abs((1.0 - _1743) / _1752);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1743 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2244 = frontier_phi_38_33_ladder;
        }
        float _2246 = isnan(_1949) ? _1780 : (isnan(_1780) ? _1949 : min(_1780, _1949));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1746) + _1735;
        float _2252 = (_2247 * _1749) + _1739;
        float _2253 = (_2247 * _1752) + _1743;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1688);
            frontier_phi_16_38_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1768 = frontier_phi_16_38_ladder_2;
        _1770 = frontier_phi_16_38_ladder_1;
        _1772 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_849, _850, _851), _1688);
        _1768 = _1756.x * cbModelParam._m0[1u].y;
        _1770 = _1756.y * cbModelParam._m0[1u].y;
        _1772 = _1756.z * cbModelParam._m0[1u].y;
    }
    float _1776 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1776 : min(cbModelParam._m0[25u].w, _1776));
    float _1866;
    float _1868;
    float _1870;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1830 = fma(_910, cbModelParam._m0[21u].z, fma(_906, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902)) + cbModelParam._m0[21u].w;
        float _1834 = fma(_910, cbModelParam._m0[22u].z, fma(_906, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902)) + cbModelParam._m0[22u].w;
        float _1838 = fma(_910, cbModelParam._m0[23u].z, fma(_906, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902)) + cbModelParam._m0[23u].w;
        float _1841 = fma(_851, cbModelParam._m0[21u].z, fma(_850, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849));
        float _1844 = fma(_851, cbModelParam._m0[22u].z, fma(_850, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849));
        float _1847 = fma(_851, cbModelParam._m0[23u].z, fma(_850, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849));
        float _1954;
        if (_1841 > 0.0)
        {
            _1954 = abs((1.0 - _1830) / _1841);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1830 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1954 = frontier_phi_28_24_ladder;
        }
        float _2271;
        if (_1844 > 0.0)
        {
            _2271 = abs((1.0 - _1834) / _1844);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1834 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2271 = frontier_phi_40_35_ladder;
        }
        float _2598;
        if (_1847 > 0.0)
        {
            _2598 = abs((1.0 - _1838) / _1847);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1838 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2598 = frontier_phi_50_47_ladder;
        }
        float _2600 = isnan(_2271) ? _1954 : (isnan(_1954) ? _2271 : min(_1954, _2271));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1841) + _1830;
        float _2606 = (_2601 * _1844) + _1834;
        float _2607 = (_2601 * _1847) + _1838;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1777);
            frontier_phi_25_50_ladder = _2725.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2725.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2725.x * cbModelParam._m0[1u].z;
        }
        _1866 = frontier_phi_25_50_ladder_2;
        _1868 = frontier_phi_25_50_ladder_1;
        _1870 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_849, _850, _851), _1777);
        _1866 = _1850.x * cbModelParam._m0[1u].z;
        _1868 = _1850.y * cbModelParam._m0[1u].z;
        _1870 = _1850.z * cbModelParam._m0[1u].z;
    }
    float _1882 = ((((1.0 - _870) * ((_857 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_870 * _857)) * _841;
    float _1883 = _1882 * ((cbModelParam._m0[1u].w * (_1866 - _1768)) + _1768);
    float _1884 = _1882 * ((cbModelParam._m0[1u].w * (_1868 - _1770)) + _1770);
    float _1885 = _1882 * ((cbModelParam._m0[1u].w * (_1870 - _1772)) + _1772);
    float _1888 = fma(_1885, cbSceneParam._m0[89u].z, fma(_1884, cbSceneParam._m0[89u].y, _1883 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1885, cbSceneParam._m0[90u].z, fma(_1884, cbSceneParam._m0[90u].y, _1883 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1885, cbSceneParam._m0[91u].z, fma(_1884, cbSceneParam._m0[91u].y, _1883 * cbSceneParam._m0[91u].x));
    float _1928 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1940 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1941 = _1928 / _1940;
    float _1942 = _1932 / _1940;
    float _1943 = _1936 / _1940;
    float _2090;
    float _2091;
    float _2092;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1970 = ((uint(_1943 > cbSceneParam._m0[59u].y) + uint(_1943 > cbSceneParam._m0[59u].x)) + uint(_1943 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1971 = _1970 + 43u;
        uint _1979 = _1970 + 44u;
        uint _1987 = _1970 + 45u;
        uint _1995 = _1970 + 46u;
        float _2006 = fma(_1940, cbSceneParam._m0[_1971].w, fma(_1936, cbSceneParam._m0[_1971].z, fma(_1932, cbSceneParam._m0[_1971].y, _1928 * cbSceneParam._m0[_1971].x)));
        float _2010 = fma(_1940, cbSceneParam._m0[_1979].w, fma(_1936, cbSceneParam._m0[_1979].z, fma(_1932, cbSceneParam._m0[_1979].y, _1928 * cbSceneParam._m0[_1979].x)));
        float _2018 = fma(_1940, cbSceneParam._m0[_1995].w, fma(_1936, cbSceneParam._m0[_1995].z, fma(_1932, cbSceneParam._m0[_1995].y, _1928 * cbSceneParam._m0[_1995].x)));
        float _2023 = cbSceneParam._m0[33u].z * _2018;
        float _2025 = cbSceneParam._m0[33u].w * _2018;
        float _2028 = fma(_1940, cbSceneParam._m0[_1987].w, fma(_1936, cbSceneParam._m0[_1987].z, fma(_1932, cbSceneParam._m0[_1987].y, _1928 * cbSceneParam._m0[_1987].x))) / _2018;
        float _2076 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
        float _4427 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2083 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 + _2006) / _2018, (_2025 + _2010) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2025 + _2006) / _2018, (_2010 - _2023) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2023) / _2018, (_2010 - _2025) / _2018), _2028), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2006 - _2025) / _2018, (_2023 + _2010) / _2018), _2028), 0.0)).x), vec4(0.25)));
        _2090 = 1.0 - (_2083 * cbSceneParam._m0[34u].x);
        _2091 = 1.0 - (_2083 * cbSceneParam._m0[34u].y);
        _2092 = 1.0 - (_2083 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2090 = 1.0;
        _2091 = 1.0;
        _2092 = 1.0;
    }
    float _2156;
    float _2158;
    float _2160;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2144 = fma(_1940, cbSceneParam._m0[63u].w, fma(_1936, cbSceneParam._m0[63u].z, fma(_1932, cbSceneParam._m0[63u].y, _1928 * cbSceneParam._m0[63u].x)));
        float _2145 = fma(_1940, cbSceneParam._m0[60u].w, fma(_1936, cbSceneParam._m0[60u].z, fma(_1932, cbSceneParam._m0[60u].y, _1928 * cbSceneParam._m0[60u].x))) / _2144;
        float _2146 = fma(_1940, cbSceneParam._m0[61u].w, fma(_1936, cbSceneParam._m0[61u].z, fma(_1932, cbSceneParam._m0[61u].y, _1928 * cbSceneParam._m0[61u].x))) / _2144;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2145 >= cbSceneParam._m0[64u].x) && (_2146 >= cbSceneParam._m0[64u].y)) && (_2145 <= cbSceneParam._m0[64u].z)) && (_2146 <= cbSceneParam._m0[64u].w))
        {
            float _2284 = fma(_1940, cbSceneParam._m0[62u].w, fma(_1936, cbSceneParam._m0[62u].z, fma(_1932, cbSceneParam._m0[62u].y, _1928 * cbSceneParam._m0[62u].x))) / _2144;
            float _2288 = isnan(cbSceneParam._m0[41u].w) ? _2284 : (isnan(_2284) ? cbSceneParam._m0[41u].w : max(_2284, cbSceneParam._m0[41u].w));
            float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_1942 * _1942) + (_1941 * _1941)) + (_1943 * _1943))) * cbSceneParam._m0[33u].y;
            float _4443 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
            float _2338 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2145, cbSceneParam._m0[33u].w + _2146), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2145, _2146 - cbSceneParam._m0[33u].z), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].z, _2146 - cbSceneParam._m0[33u].w), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2145 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2146), _2288), 0.0)).x), vec4(0.25)));
            float _2342 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
            float _2343 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
            float _2344 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2344) ? _2092 : (isnan(_2092) ? _2344 : min(_2092, _2344));
            frontier_phi_37_36_ladder_1 = isnan(_2343) ? _2091 : (isnan(_2091) ? _2343 : min(_2091, _2343));
            frontier_phi_37_36_ladder_2 = isnan(_2342) ? _2090 : (isnan(_2090) ? _2342 : min(_2090, _2342));
        }
        else
        {
            frontier_phi_37_36_ladder = _2092;
            frontier_phi_37_36_ladder_1 = _2091;
            frontier_phi_37_36_ladder_2 = _2090;
        }
        _2156 = frontier_phi_37_36_ladder_2;
        _2158 = frontier_phi_37_36_ladder_1;
        _2160 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2156 = _2090;
        _2158 = _2091;
        _2160 = _2092;
    }
    uvec4 _2165 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2167 = _2165.x * 14u;
    uint _2168 = _2167 + 13u;
    float _2175 = _841 + (-1.0);
    float _2180 = (cbLight._m0[_2168].x * _2175) + 1.0;
    float _2181 = (cbLight._m0[_2168].y * _2175) + 1.0;
    float _2182 = (cbLight._m0[_2168].z * _2175) + 1.0;
    float _2183 = (cbLight._m0[_2168].w * _2175) + 1.0;
    uint _2184 = _2167 + 5u;
    float _2190 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2194 = _2167 + 4u;
    float _2203 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2207 = _2167 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_678, _679, _680));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_678, _679, _680));
    float _4479 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4490 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2184].x * _2190) * _2228) + (((cbLight._m0[_2194].x * _2156) * _2203) * _2226);
    float _2236 = ((_2190 * cbLight._m0[_2184].y) * _2228) + (((cbLight._m0[_2194].y * _2158) * _2203) * _2226);
    float _2237 = ((_2190 * cbLight._m0[_2184].z) * _2228) + (((cbLight._m0[_2194].z * _2160) * _2203) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2167 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2243)
    {
        _2345 = _2235;
        _2347 = _2236;
        _2349 = _2237;
    }
    else
    {
        uint _2353 = _2167 + 6u;
        float _2369 = (dot(vec3(cbLight._m0[_2167 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4501 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2372 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2345 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2235;
        _2347 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2236;
        _2349 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2237;
    }
    bool _2352 = _2241.y == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2352)
    {
        _2407 = _2345;
        _2409 = _2347;
        _2411 = _2349;
    }
    else
    {
        uint _2569 = _2167 + 7u;
        float _2585 = (dot(vec3(cbLight._m0[_2167 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2586 = _2585 * _2585;
        float _4517 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2587 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2588 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2407 = (((cbLight._m0[_2569].x * 0.3183098733425140380859375) * _2587) * _2588) + _2345;
        _2409 = (((cbLight._m0[_2569].y * 0.3183098733425140380859375) * _2587) * _2588) + _2347;
        _2411 = (((cbLight._m0[_2569].z * 0.3183098733425140380859375) * _2587) * _2588) + _2349;
    }
    uint _2414 = _2167 + 8u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2167].w)) * _681) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2167].x + _758;
    float _2430 = cbLight._m0[_2167].y + _759;
    float _2431 = cbLight._m0[_2167].z + _760;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2167].xyz));
    float _4533 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _4544 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2443 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2444 = dot(vec3(_678, _679, _680), vec3(_2436, _2437, _2438));
    float _4555 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2167].xyz), vec3(_2436, _2437, _2438));
    float _4566 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2428 * _2428;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2467 = (exp2(log2(1.0 - (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2468 = 1.0 - _2428;
    float _2479 = (0.5 / (((_2443 * ((_2442 * _2468) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2468) + _2428) * _2442))) * _2442;
    float _4577 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    uint _2495 = _2167 + 9u;
    float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _681) * 0.949999988079071044921875);
    float _2507 = _2506 * _2506;
    float _2508 = cbLight._m0[_2207].x + _758;
    float _2509 = cbLight._m0[_2207].y + _759;
    float _2510 = cbLight._m0[_2207].z + _760;
    float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
    float _2515 = _2514 * _2508;
    float _2516 = _2514 * _2509;
    float _2517 = _2514 * _2510;
    float _2518 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2207].xyz));
    float _4588 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2522 = dot(vec3(_678, _679, _680), vec3(_2515, _2516, _2517));
    float _4599 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2525 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2526 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2515, _2516, _2517));
    float _4610 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = _2507 * _2507;
    float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
    float _2543 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2544 = 1.0 - _2507;
    float _2554 = (0.5 / (((_2443 * ((_2521 * _2544) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2544) + _2507) * _2521))) * _2521;
    float _4621 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2556 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
    float _2566 = (((_2543 * cbLight._m0[_2495].x) * _2556) * _2190) + ((((cbLight._m0[_2414].x * _2156) * _2467) * _2481) * _2203);
    float _2567 = (((_2543 * cbLight._m0[_2495].y) * _2556) * _2190) + ((((cbLight._m0[_2414].y * _2158) * _2467) * _2481) * _2203);
    float _2568 = (((_2543 * cbLight._m0[_2495].z) * _2556) * _2190) + ((((cbLight._m0[_2414].z * _2160) * _2467) * _2481) * _2203);
    float _2624;
    float _2626;
    float _2628;
    if (_2243)
    {
        _2624 = _2566;
        _2626 = _2567;
        _2628 = _2568;
    }
    else
    {
        uint _2630 = _2167 + 2u;
        uint _2634 = _2167 + 10u;
        float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2630].w)) * _681) * 0.949999988079071044921875);
        float _2649 = _2648 * _2648;
        float _2650 = cbLight._m0[_2630].x + _758;
        float _2651 = cbLight._m0[_2630].y + _759;
        float _2652 = cbLight._m0[_2630].z + _760;
        float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
        float _2657 = _2656 * _2650;
        float _2658 = _2656 * _2651;
        float _2659 = _2656 * _2652;
        float _2660 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2630].xyz));
        float _4632 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2663 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2664 = dot(vec3(_678, _679, _680), vec3(_2657, _2658, _2659));
        float _4643 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2668 = dot(vec3(cbLight._m0[_2630].xyz), vec3(_2657, _2658, _2659));
        float _4654 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2672 = _2649 * _2649;
        float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
        float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2686 = 1.0 - _2649;
        float _2696 = (0.5 / (((_2443 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2686) + _2649) * _2663))) * _2663;
        float _4665 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2698 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
        float _2699 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2624 = (((_2685 * cbLight._m0[_2634].x) * _2698) * _2699) + _2566;
        _2626 = (((_2685 * cbLight._m0[_2634].y) * _2698) * _2699) + _2567;
        _2628 = (((_2685 * cbLight._m0[_2634].z) * _2698) * _2699) + _2568;
    }
    float _2730;
    float _2732;
    float _2734;
    if (_2352)
    {
        _2730 = _2624;
        _2732 = _2626;
        _2734 = _2628;
    }
    else
    {
        uint _2741 = _2167 + 3u;
        uint _2745 = _2167 + 11u;
        float _2759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2741].w)) * _681) * 0.949999988079071044921875);
        float _2760 = _2759 * _2759;
        float _2761 = cbLight._m0[_2741].x + _758;
        float _2762 = cbLight._m0[_2741].y + _759;
        float _2763 = cbLight._m0[_2741].z + _760;
        float _2767 = inversesqrt(dot(vec3(_2761, _2762, _2763), vec3(_2761, _2762, _2763)));
        float _2768 = _2767 * _2761;
        float _2769 = _2767 * _2762;
        float _2770 = _2767 * _2763;
        float _2771 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2741].xyz));
        float _4681 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2774 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2775 = dot(vec3(_678, _679, _680), vec3(_2768, _2769, _2770));
        float _4692 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
        float _2778 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2779 = dot(vec3(cbLight._m0[_2741].xyz), vec3(_2768, _2769, _2770));
        float _4703 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2783 = _2760 * _2760;
        float _2787 = ((_2778 * _2778) * (_2783 + (-1.0))) + 1.0;
        float _2796 = (exp2(log2(1.0 - (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2797 = 1.0 - _2760;
        float _2807 = (0.5 / (((_2443 * ((_2774 * _2797) + _2760)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2797) + _2760) * _2774))) * _2774;
        float _4714 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2809 = (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0))) * (_2783 / ((_2787 * _2787) * 3.141590118408203125));
        float _2810 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2730 = (((_2796 * cbLight._m0[_2745].x) * _2809) * _2810) + _2624;
        _2732 = (((_2796 * cbLight._m0[_2745].y) * _2809) * _2810) + _2626;
        _2734 = (((_2796 * cbLight._m0[_2745].z) * _2809) * _2810) + _2628;
    }
    float _2876;
    float _2878;
    float _2880;
    float _2882;
    float _2884;
    float _2886;
    if (_2165.y == 0u)
    {
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.x;
        uint _2843 = uint((float(_2831.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2832))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2832)));
        float _2853 = (log2(_1943 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2854 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        uint _2857 = uint(isnan(14.0) ? _2854 : (isnan(_2854) ? 14.0 : min(_2854, 14.0)));
        uvec4 _2862 = texelFetch(g_lightClusterGridBuffer, int(((_2857 << 2u) + (_2843 << 6u)) >> 2u));
        uint _2863 = _2862.x;
        uint _2864 = _2831.z;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        if (((((1u << ((_2864 >> 4u) & 15u)) + 4294967295u) & _2863) == 0u) || ((_2864 & 240u) == 0u))
        {
            _2943 = 0.0;
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
        }
        else
        {
            float _2944;
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _3096 = 0.0;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            uint _3102 = 0u;
            uint _3111;
            bool _3112;
            for (;;)
            {
                _3111 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3102 << 2u)) >> 2u)).x;
                _3112 = _3111 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3112)
                {
                    frontier_phi_71_pred = _3101;
                    frontier_phi_71_pred_1 = _3100;
                    frontier_phi_71_pred_2 = _3099;
                    frontier_phi_71_pred_3 = _3098;
                    frontier_phi_71_pred_4 = _3097;
                    frontier_phi_71_pred_5 = _3096;
                }
                else
                {
                    float _3241;
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    uint _3247;
                    _3241 = _3096;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3111;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    for (;;)
                    {
                        uint _3251 = uint(findLSB(_3247)) + (_3102 << 5u);
                        uint _3248 = (_3247 + 4294967295u) & _3247;
                        uint _3253 = _3251 * 48u;
                        vec4 _3267 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 3u)).x));
                        uint _3273 = (_3251 * 48u) + 4u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3273)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3273 + 3u)).x));
                        uint _3292 = (_3251 * 48u) + 8u;
                        vec3 _3303 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x));
                        float _3307 = _3267.x - _1941;
                        float _3308 = _3267.y - _1942;
                        float _3309 = _3267.z - _1943;
                        float _3310 = dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309));
                        float _3313 = inversesqrt(_3310);
                        float _3314 = _3313 * _3307;
                        float _3315 = _3313 * _3308;
                        float _3316 = _3313 * _3309;
                        float _3317 = dot(vec3(_797, _800, _803), vec3(_3314, _3315, _3316));
                        float _3322 = 1.0 - (_3310 * _3267.w);
                        float _4740 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3323 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                        float _3324 = sqrt(_3310) * _3286.w;
                        float _3327 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                        float _3328 = _3327 * _3327;
                        float _3331 = ((1.0 - _3328) * _3317) + _3328;
                        float _3334 = _3324 * _3324;
                        float _3338 = ((isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0))) * _3323) / ((_3334 * 0.699999988079071044921875) + 1.0);
                        float _3342 = (-0.0) - _1941;
                        float _3343 = (-0.0) - _1942;
                        float _3344 = (-0.0) - _1943;
                        float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                        float _3349 = _3348 * _3342;
                        float _3350 = _3348 * _3343;
                        float _3351 = _3348 * _3344;
                        float _3358 = exp2(log2(1.0 / ((_3334 * 3.5) + 5.0)) * 0.25);
                        float _3359 = 1.0 - _857;
                        float _3366 = sqrt(1.0 - ((1.0 - (_3359 * _3359)) * (1.0 - (_3358 * _3358))));
                        float _3367 = _3366 * _3366;
                        float _3368 = _3367 * _3367;
                        float _3369 = _3349 + _3314;
                        float _3370 = _3350 + _3315;
                        float _3371 = _3351 + _3316;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3379 = dot(vec3(_797, _800, _803), vec3(_3349, _3350, _3351));
                        float _4756 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3382 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3383 = dot(vec3(_797, _800, _803), vec3(_3375 * _3369, _3375 * _3370, _3375 * _3371));
                        float _4767 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3386 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3390 = ((_3386 * _3386) * (_3368 + (-1.0))) + 1.0;
                        float _3391 = _3327 * _3367;
                        float _3392 = _3391 * _3391;
                        float _3395 = ((1.0 - _3392) * _3317) + _3392;
                        float _4778 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3396 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3397 = 1.0 - _3367;
                        float _3407 = (0.5 / (((_3396 * ((_3382 * _3397) + _3367)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3367) * _3382))) * _3396;
                        float _4789 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3418 = (((_3368 * 3.1415927410125732421875) * (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) / ((_3390 * _3390) * ((_3334 * 2.1991131305694580078125) + 3.141590118408203125))) * _3323;
                        _3171 = (_3338 * _3286.x) + _3244;
                        _3172 = (_3338 * _3286.y) + _3245;
                        _3173 = (_3338 * _3286.z) + _3246;
                        _3168 = (_3418 * _3303.x) + _3241;
                        _3169 = (_3418 * _3303.y) + _3242;
                        _3170 = (_3418 * _3303.z) + _3243;
                        if (_3248 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3241 = _3168;
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3248;
                        }
                    }
                    frontier_phi_71_pred = _3173;
                    frontier_phi_71_pred_1 = _3172;
                    frontier_phi_71_pred_2 = _3171;
                    frontier_phi_71_pred_3 = _3170;
                    frontier_phi_71_pred_4 = _3169;
                    frontier_phi_71_pred_5 = _3168;
                }
                _2954 = frontier_phi_71_pred;
                _2952 = frontier_phi_71_pred_1;
                _2950 = frontier_phi_71_pred_2;
                _2948 = frontier_phi_71_pred_3;
                _2946 = frontier_phi_71_pred_4;
                _2944 = frontier_phi_71_pred_5;
                uint _3103 = _3102 + 1u;
                if (_3103 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3096 = _2944;
                    _3097 = _2946;
                    _3098 = _2948;
                    _3099 = _2950;
                    _3100 = _2952;
                    _3101 = _2954;
                    _3102 = _3103;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2943 = _2944;
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
        }
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.z;
        uint _2960 = (_2958 >> 8u) & 15u;
        float _3064;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        if (((4294967295u << _2960) & _2863) == 0u)
        {
            _3064 = _2943;
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
        }
        else
        {
            float _3089 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
            float _3090 = _3089 * _1941;
            float _3091 = _3089 * _1942;
            float _3092 = _3089 * _1943;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2960 < ((_2958 >> 12u) & 15u))
            {
                float _3065;
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3224 = _2943;
                float _3225 = _2945;
                float _3226 = _2947;
                float _3227 = _2949;
                float _3228 = _2951;
                float _3229 = _2953;
                uint _3230 = _2960;
                uint _3239;
                bool _3240;
                for (;;)
                {
                    _3239 = texelFetch(g_lightClassification, int((((_2857 << 5u) + (_2843 << 9u)) + (_3230 << 2u)) >> 2u)).x;
                    _3240 = _3239 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3240)
                    {
                        frontier_phi_82_pred = _3229;
                        frontier_phi_82_pred_1 = _3228;
                        frontier_phi_82_pred_2 = _3227;
                        frontier_phi_82_pred_3 = _3226;
                        frontier_phi_82_pred_4 = _3225;
                        frontier_phi_82_pred_5 = _3224;
                    }
                    else
                    {
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3445 = _3224;
                        float _3446 = _3225;
                        float _3447 = _3226;
                        float _3448 = _3227;
                        float _3449 = _3228;
                        float _3450 = _3229;
                        uint _3451 = _3239;
                        uint _3452;
                        vec4 _3477;
                        float _3478;
                        vec4 _3493;
                        vec3 _3505;
                        vec4 _3520;
                        vec4 _3535;
                        float _3581;
                        bool _3582;
                        for (;;)
                        {
                            uint _3462 = ((_3230 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3451));
                            _3452 = (_3451 + 4294967295u) & _3451;
                            uint _3464 = _3462 * 40u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3478 = _3477.w;
                            uint _3480 = (_3462 * 40u) + 4u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3462 * 40u) + 8u;
                            _3505 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x));
                            uint _3507 = (_3462 * 40u) + 16u;
                            _3520 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 3u)).x));
                            uint _3522 = (_3462 * 40u) + 20u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3462 * 40u) + 24u;
                            vec4 _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3556 = (_3462 * 40u) + 28u;
                            vec4 _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            _3581 = fma(_1943, _3569.z, fma(_1942, _3569.y, _3569.x * _1941)) + _3569.w;
                            _3582 = !((fma(_1943, _3550.z, fma(_1942, _3550.y, _3550.x * _1941)) + _3550.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3582)
                            {
                                float _3609 = _3477.x - _1941;
                                float _3610 = _3477.y - _1942;
                                float _3611 = _3477.z - _1943;
                                float _3612 = dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611));
                                float _3615 = inversesqrt(_3612);
                                float _3616 = _3615 * _3609;
                                float _3617 = _3615 * _3610;
                                float _3618 = _3615 * _3611;
                                float _3622 = 1.0 - (_3612 / (_3478 * _3478));
                                float _4800 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3623 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3627 = sqrt(_3612) * _3493.w;
                                float _3629 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                                float _3630 = _3629 * _3629;
                                float _3633 = ((1.0 - _3630) * dot(vec3(_3616, _3617, _3618), vec3(_797, _800, _803))) + _3630;
                                float _3636 = _3627 * _3627;
                                float _3640 = (fma(_1943, _3520.z, fma(_1942, _3520.y, _3520.x * _1941)) + _3520.w) / _3581;
                                float _3641 = (fma(_1943, _3535.z, fma(_1942, _3535.y, _3535.x * _1941)) + _3535.w) / _3581;
                                float _3645 = 1.0 - dot(vec2(_3640, _3641), vec2(_3640, _3641));
                                float _4816 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3647 = _3646 * (((isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0))) * _3623) / ((_3636 * 0.699999988079071044921875) + 1.0));
                                float _3659 = exp2(log2(1.0 / ((_3636 * 3.5) + 5.0)) * 0.25);
                                float _3660 = 1.0 - _857;
                                float _3667 = sqrt(1.0 - ((1.0 - (_3660 * _3660)) * (1.0 - (_3659 * _3659))));
                                float _3668 = _3667 * _3667;
                                float _3669 = _3668 * _3668;
                                float _3670 = _3616 - _3090;
                                float _3671 = _3617 - _3091;
                                float _3672 = _3618 - _3092;
                                float _3676 = inversesqrt(dot(vec3(_3670, _3671, _3672), vec3(_3670, _3671, _3672)));
                                float _3680 = dot(vec3(_797, _800, _803), vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092));
                                float _4827 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                                float _3683 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3684 = dot(vec3(_797, _800, _803), vec3(_3676 * _3670, _3676 * _3671, _3676 * _3672));
                                float _4838 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3687 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3691 = ((_3687 * _3687) * (_3669 + (-1.0))) + 1.0;
                                float _3692 = _3629 * _3668;
                                float _3693 = _3692 * _3692;
                                float _3699 = ((1.0 - _3693) * dot(vec3(_797, _800, _803), vec3(_3616, _3617, _3618))) + _3693;
                                float _4849 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3700 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3701 = 1.0 - _3668;
                                float _3711 = (0.5 / (((_3700 * ((_3683 * _3701) + _3668)) + 9.9999999392252902907785028219223e-09) + (((_3700 * _3701) + _3668) * _3683))) * _3700;
                                float _4860 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3721 = (_3646 * _3623) * (((_3669 * 3.1415927410125732421875) * (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0)))) / ((_3691 * _3691) * ((_3636 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3647 * _3493.z;
                                frontier_phi_88_pred_1 = _3647 * _3493.y;
                                frontier_phi_88_pred_2 = _3647 * _3493.x;
                                frontier_phi_88_pred_3 = _3721 * _3505.z;
                                frontier_phi_88_pred_4 = _3721 * _3505.y;
                                frontier_phi_88_pred_5 = _3721 * _3505.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3730 = frontier_phi_88_pred;
                            _3729 = frontier_phi_88_pred_1;
                            _3728 = frontier_phi_88_pred_2;
                            _3727 = frontier_phi_88_pred_3;
                            _3726 = frontier_phi_88_pred_4;
                            _3725 = frontier_phi_88_pred_5;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            _3432 = _3725 + _3445;
                            _3433 = _3726 + _3446;
                            _3434 = _3727 + _3447;
                            if (_3452 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3445 = _3432;
                                _3446 = _3433;
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3452;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3437;
                        frontier_phi_82_pred_1 = _3436;
                        frontier_phi_82_pred_2 = _3435;
                        frontier_phi_82_pred_3 = _3434;
                        frontier_phi_82_pred_4 = _3433;
                        frontier_phi_82_pred_5 = _3432;
                    }
                    _3075 = frontier_phi_82_pred;
                    _3073 = frontier_phi_82_pred_1;
                    _3071 = frontier_phi_82_pred_2;
                    _3069 = frontier_phi_82_pred_3;
                    _3067 = frontier_phi_82_pred_4;
                    _3065 = frontier_phi_82_pred_5;
                    uint _3231 = _3230 + 1u;
                    if (_3231 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3224 = _3065;
                        _3225 = _3067;
                        _3226 = _3069;
                        _3227 = _3071;
                        _3228 = _3073;
                        _3229 = _3075;
                        _3230 = _3231;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3071;
                frontier_phi_63_64_ladder_1 = _3075;
                frontier_phi_63_64_ladder_2 = _3073;
                frontier_phi_63_64_ladder_3 = _3069;
                frontier_phi_63_64_ladder_4 = _3067;
                frontier_phi_63_64_ladder_5 = _3065;
            }
            else
            {
                frontier_phi_63_64_ladder = _2949;
                frontier_phi_63_64_ladder_1 = _2953;
                frontier_phi_63_64_ladder_2 = _2951;
                frontier_phi_63_64_ladder_3 = _2947;
                frontier_phi_63_64_ladder_4 = _2945;
                frontier_phi_63_64_ladder_5 = _2943;
            }
            _3064 = frontier_phi_63_64_ladder_5;
            _3066 = frontier_phi_63_64_ladder_4;
            _3068 = frontier_phi_63_64_ladder_3;
            _3070 = frontier_phi_63_64_ladder;
            _3072 = frontier_phi_63_64_ladder_2;
            _3074 = frontier_phi_63_64_ladder_1;
        }
        float _3079 = isnan(1.0) ? _841 : (isnan(_841) ? 1.0 : min(_841, 1.0));
        _2876 = (_3079 * _3070) + _2407;
        _2878 = (_3079 * _3072) + _2409;
        _2880 = (_3079 * _3074) + _2411;
        _2882 = ((_3064 * 0.039999999105930328369140625) * _3079) + _2730;
        _2884 = ((_3066 * 0.039999999105930328369140625) * _3079) + _2732;
        _2886 = ((_3068 * 0.039999999105930328369140625) * _3079) + _2734;
    }
    else
    {
        _2876 = _2407;
        _2878 = _2409;
        _2880 = _2411;
        _2882 = _2730;
        _2884 = _2732;
        _2886 = _2734;
    }
    float _4876 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4887 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4898 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _2903 = ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2876 + ((isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0))) * _841))) + ((_2882 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2904 = ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2878 + ((isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0))) * _841))) + ((_2884 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    float _2905 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2880 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _841))) + ((_2886 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1677)) * cbPerFrame._m0[3u].x);
    uint _2906 = _244 + 6u;
    float _2914 = _778 / cbSceneParam._m0[86u].x;
    float _2915 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2931 = _2929.x;
    float _2932 = _2929.y;
    float _2933 = _2929.z;
    float _2934 = _2929.w;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2968 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2969 = _2968 / _699;
        float _2980 = _2969 * _751;
        float _2981 = _752 * _2969;
        float _2982 = (-0.0) - _2981;
        float _2984 = _2969 * _753;
        float _2986 = (cbSceneParam._m0[77u].w * _2982) / _2968;
        float _2987 = _2986 + cbSceneParam._m0[79u].w;
        float _2988 = cbSceneParam._m0[79u].w - _2981;
        float _2994 = sqrt(((_2980 * _2980) + (_2981 * _2981)) + (_2984 * _2984));
        float _2997 = (1.0 - (cbSceneParam._m0[77u].w / _2968)) * _2994;
        float _3002 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3004 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3181;
        if (abs((_2982 - _2986) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3181 = ((((_2987 > 0.0) ? exp2(_3002 * _2987) : (2.0 - exp2(_3004 * _2987))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2997;
        }
        else
        {
            float _3125 = 1.0 / cbSceneParam._m0[80u].x;
            float _3126 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : max(_2987, _2988));
            float _3127 = isnan(_2988) ? _2987 : (isnan(_2987) ? _2988 : min(_2987, _2988));
            float _3136 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : min(_3126, 0.0));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            _3181 = ((abs(_2994 / _2982) * cbSceneParam._m0[80u].y) * ((((_3136 - _3137) * 2.0) - ((exp2(_3002 * (isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0)))) - exp2(_3002 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))))) * _3125)) - ((exp2(_3004 * _3136) - exp2(_3004 * _3137)) * _3125))) + (_2997 * cbSceneParam._m0[80u].z);
        }
        vec4 _3183 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2914, _2915, 1.0), 0.0);
        float _3192 = exp2((_3181 * (-1.44269502162933349609375)) * (1.0 - _3183.w));
        float _3193 = log2(_3192);
        float _3209 = log2(_2934);
        _3006 = (exp2(_3209 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].x)) * _3183.x) / cbSceneParam._m0[78u].x)) + _2931;
        _3008 = (exp2(_3209 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].y)) * _3183.y) / cbSceneParam._m0[78u].y)) + _2932;
        _3010 = (exp2(_3209 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3193 * cbSceneParam._m0[78u].z)) * _3183.z) / cbSceneParam._m0[78u].z)) + _2933;
        _3012 = _3192 * _2934;
    }
    else
    {
        _3006 = _2931;
        _3008 = _2932;
        _3010 = _2933;
        _3012 = _2934;
    }
    bool _3219;
    vec4 _3022;
    vec4 _3044;
    float _3046;
    float _3050;
    float _3051;
    float _3052;
    float _3053;
    bool _3063;
    for (;;)
    {
        _3022 = cbMatDynParam._m0[0u];
        float _3024 = roundEven(_3022.y);
        bool _3025 = _3024 == 3.0;
        float _3026 = log2(_3012);
        float _3033 = exp2(_3026 * cbSceneParam._m0[78u].x) * _2903;
        float _3034 = exp2(_3026 * cbSceneParam._m0[78u].y) * _2904;
        float _3035 = exp2(_3026 * cbSceneParam._m0[78u].z) * _2905;
        float _3042 = _767 + (-0.5);
        _3044 = cbMtdParam._m0[1u];
        _3046 = _3044.y * _3042;
        float _3049 = (_3024 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3050 = _3049 * (_3025 ? _3033 : (_3033 + (cbSceneParam._m0[72u].w * _3006)));
        _3051 = _3049 * (_3025 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3008)));
        _3052 = _3049 * (_3025 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3010)));
        _3053 = _3042 * 0.999000012874603271484375;
        _3063 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3063)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3053) < 0.5)
            {
                _3219 = true;
                break;
            }
        }
        uint _3160 = _816 + uint(_3022.w);
        if ((cbInstanceData._m0[_3160].w < 1.0) && ((cbInstanceData._m0[_3160].w + _3053) < 0.5))
        {
            _3219 = true;
            break;
        }
        if ((_3046 + 1.0) < _3044.x)
        {
            _3219 = true;
            break;
        }
        _3219 = false;
        break;
    }
    float _3423;
    if (_3219)
    {
        discard_state = true;
        _3423 = 0.0;
    }
    else
    {
        _3423 = cbInstanceData._m0[_2906].w;
    }
    SV_Target.x = _3050;
    SV_Target.y = _3051;
    SV_Target.z = _3052;
    SV_Target.w = _3423;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2906].w;
    discard_exit();
}


