#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1125;
float _3487;
float _3488;
float _3489;
float _3490;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _334 = (_325.x * 2.0) + (-1.0);
    float _336 = (_325.y * 2.0) + (-1.0);
    float _337 = dot(vec2(_334, _336), vec2(_334, _336));
    float _3499 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _343 = sqrt(1.0 - (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _362 = _360.x;
    float _363 = 1.0 - _362;
    float _372 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _375 = ((isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : min(_372, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _384 = (_375 - ((((((_362 - _363) * cbMtdParam._m0[24u].z) + _363) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _375))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3520 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _385 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _392 = (_385 * ((_305.x * cbMtdParam._m0[18u].x) - _284)) + _284;
    float _393 = (_385 * ((_305.y * cbMtdParam._m0[18u].y) - _285)) + _285;
    float _394 = (_385 * ((_305.z * cbMtdParam._m0[18u].z) - _286)) + _286;
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _409 = _407.x;
    float _410 = 1.0 - _409;
    float _439 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_409 - _410) * cbMtdParam._m0[24u].w) + _410) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3531 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _448 = ((((cbMtdParam._m0[10u].x - _392) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _440) + _392;
    float _449 = ((((cbMtdParam._m0[10u].y - _393) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _440) + _393;
    float _450 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _394)) * _440) + _394;
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _471 = (_464.x * 2.0) + (-1.0);
    float _472 = (_464.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_471, _472), vec2(_471, _472));
    float _3542 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _481 = (_385 * (_464.z - _329)) + _329;
    float _484 = ((cbMtdParam._m0[23u].y - _481) * _440) + _481;
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _512 = (_506.x * 2.0) + (-1.0);
    float _513 = (_506.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3553 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _531 = (((_471 - _334) + (cbMtdParam._m0[21u].x * _334)) * _385) + _334;
    float _532 = (((_472 - _336) + (cbMtdParam._m0[21u].x * _336)) * _385) + _336;
    float _533 = (_385 * (sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0)))) - _343)) + _343;
    float _544 = (((_512 - _531) + (_531 * cbMtdParam._m0[22u].z)) * _440) + _531;
    float _545 = (((_513 - _532) + (_532 * cbMtdParam._m0[22u].z)) * _440) + _532;
    float _546 = ((sqrt(1.0 - (isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0)))) - _533) * _440) + _533;
    float _548 = cbMtdParam._m0[22u].x + _325.w;
    float _551 = fma(_546, _226 * NORMAL.x, fma(_545, _233 * TANGENT.x, (_219 * _211) * _544));
    float _554 = fma(_546, _226 * NORMAL.y, fma(_545, _233 * TANGENT.y, (_219 * _212) * _544));
    float _557 = fma(_546, _226 * NORMAL.z, fma(_545, _233 * TANGENT.z, (_219 * _213) * _544));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _3564 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _565 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    float _3575 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3586 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3597 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3608 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _583 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _633 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _623);
    float _634 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _623);
    float _635 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _623);
    float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
    float _640 = _633 * _639;
    float _641 = _634 * _639;
    float _642 = _635 * _639;
    vec4 _647 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _649 = _647.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _806 = sqrt(((_633 * _633) + (_634 * _634)) + (_635 * _635));
        float _812 = (cbMatDynParam._m0[5u].x * _806) + cbMatDynParam._m0[5u].y;
        float _3619 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _817 = (cbMatDynParam._m0[5u].z * _806) + cbMatDynParam._m0[5u].w;
        float _3630 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) - _813)) + _813) < ((_649 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _661 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _662 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _682 = fma(_564, cbSceneParam._m0[5u].z, fma(_563, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _562));
    float _685 = fma(_564, cbSceneParam._m0[6u].z, fma(_563, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _562));
    float _688 = fma(_564, cbSceneParam._m0[7u].z, fma(_563, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _562));
    uint _701 = _239 + 9u;
    uint _702 = _701 + uint(cbMatDynParam._m0[0u].w);
    float _708 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_702].x;
    float _709 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_702].y;
    float _710 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_702].z;
    float _3641 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _3652 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _712 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _713 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    vec4 _722 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _661, cbSceneParam._m0[86u].y * _662));
    float _726 = ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * TEXCOORD_5.w) * _722.x;
    float _727 = dot(vec3(_562, _563, _564), vec3(_640, _641, _642));
    float _730 = _727 * 2.0;
    float _734 = (_730 * _562) - _640;
    float _735 = (_730 * _563) - _641;
    float _736 = (_730 * _564) - _642;
    float _740 = abs(dot(vec3(_640, _641, _642), vec3(_562, _563, _564)));
    float _3674 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _742 = sqrt(_565);
    float _755 = exp2((_742 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_742 * 3.0));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1124;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787));
        float _853 = fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787));
        float _857 = fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787));
        float _882 = _787 + _562;
        float _883 = _791 + _563;
        float _884 = _795 + _564;
        float _894 = fma(_884, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882)) - _849;
        float _895 = fma(_884, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882)) - _853;
        float _896 = fma(_884, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882)) - _857;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _952 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_918.x + (-0.5));
        float _954 = _952 * (_918.y + (-0.5));
        float _955 = _952 * (_918.z + (-0.5));
        float _962 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_925.x + (-0.5));
        float _964 = _962 * (_925.y + (-0.5));
        float _965 = _962 * (_925.z + (-0.5));
        float _972 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_932.x + (-0.5));
        float _974 = _972 * (_932.y + (-0.5));
        float _975 = _972 * (_932.z + (-0.5));
        float _982 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_939.x + (-0.5));
        float _984 = _982 * (_939.y + (-0.5));
        float _985 = _982 * (_939.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1006 = (dot(vec3(_562, _563, _564), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1016 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3722 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1018 + 1.0))) + _1023) * _986;
        float _1033 = _954 * 0.5;
        float _1034 = _964 * 0.5;
        float _1035 = _974 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_562, _563, _564), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3755 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1060 + 1.0))) + _1065) * _987;
        float _1075 = _955 * 0.5;
        float _1076 = _965 * 0.5;
        float _1077 = _975 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_562, _563, _564), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3766 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3777 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3788 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1102 + 1.0))) + _1107) * _988;
        _1124 = _955;
        _1126 = _954;
        _1127 = _953;
        _1128 = _965;
        _1129 = _964;
        _1130 = _963;
        _1131 = _975;
        _1132 = _974;
        _1133 = _973;
        _1134 = _988;
        _1135 = _987;
        _1136 = _986;
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
    }
    else
    {
        _1124 = _1125;
        _1126 = _1125;
        _1127 = _1125;
        _1128 = _1125;
        _1129 = _1125;
        _1130 = _1125;
        _1131 = _1125;
        _1132 = _1125;
        _1133 = _1125;
        _1134 = _1125;
        _1135 = _1125;
        _1136 = _1125;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787));
        float _1171 = fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787));
        float _1175 = fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787));
        float _1198 = _787 + _562;
        float _1199 = _791 + _563;
        float _1200 = _795 + _564;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_562, _563, _564), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3851 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_562, _563, _564), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3884 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_562, _563, _564), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3917 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1125;
        _1437 = _1125;
        _1438 = _1125;
        _1439 = _1125;
        _1440 = _1125;
        _1441 = _1125;
        _1442 = _1125;
        _1443 = _1125;
        _1444 = _1125;
        _1445 = _1125;
        _1446 = _1125;
        _1447 = _1125;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1137)) + _1137;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1138)) + _1138;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1139)) + _1139;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _734 * 0.5;
    float _1505 = _735 * 0.5;
    float _1506 = _736 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1124, _1128, _1131, _1134));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _565);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_736, cbModelParam._m0[13u].z, fma(_735, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734));
        float _1634 = fma(_736, cbModelParam._m0[14u].z, fma(_735, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734));
        float _1637 = fma(_736, cbModelParam._m0[15u].z, fma(_735, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1665 = frontier_phi_17_15_ladder;
        }
        float _1867;
        if (_1634 > 0.0)
        {
            _1867 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1867 = frontier_phi_26_22_ladder;
        }
        float _2110;
        if (_1637 > 0.0)
        {
            _2110 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2110 = frontier_phi_38_33_ladder;
        }
        float _2112 = isnan(_1867) ? _1665 : (isnan(_1665) ? _1867 : min(_1665, _1867));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1631) + _1620;
        float _2118 = (_2113 * _1634) + _1624;
        float _2119 = (_2113 * _1637) + _1628;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2120;
        float _2124 = _2120 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 > _2124) || ((_2118 < _2122) || ((_2117 < _2122) || (_2117 > _2124))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2119, cbModelParam._m0[9u].z, fma(_2118, cbModelParam._m0[9u].y, _2117 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2119, cbModelParam._m0[10u].z, fma(_2118, cbModelParam._m0[10u].y, _2117 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2119, cbModelParam._m0[11u].z, fma(_2118, cbModelParam._m0[11u].y, _2117 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_16_38_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_16_38_ladder_2;
        _1655 = frontier_phi_16_38_ladder_1;
        _1657 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_734, _735, _736), _1573);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _565);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1715 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1719 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1723 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1726 = fma(_736, cbModelParam._m0[21u].z, fma(_735, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734));
        float _1729 = fma(_736, cbModelParam._m0[22u].z, fma(_735, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734));
        float _1732 = fma(_736, cbModelParam._m0[23u].z, fma(_735, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734));
        float _1872;
        if (_1726 > 0.0)
        {
            _1872 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1872 = frontier_phi_28_24_ladder;
        }
        float _2137;
        if (_1729 > 0.0)
        {
            _2137 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2137 = frontier_phi_40_35_ladder;
        }
        float _2342;
        if (_1732 > 0.0)
        {
            _2342 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2342 = frontier_phi_49_46_ladder;
        }
        float _2344 = isnan(_2137) ? _1872 : (isnan(_1872) ? _2137 : min(_1872, _2137));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1726) + _1715;
        float _2350 = (_2345 * _1729) + _1719;
        float _2351 = (_2345 * _1732) + _1723;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2550 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_25_49_ladder = _2550.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2550.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2550.x * cbModelParam._m0[1u].z;
        }
        _1751 = frontier_phi_25_49_ladder_2;
        _1753 = frontier_phi_25_49_ladder_1;
        _1755 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_734, _735, _736), _1662);
        _1751 = _1735.x * cbModelParam._m0[1u].z;
        _1753 = _1735.y * cbModelParam._m0[1u].z;
        _1755 = _1735.z * cbModelParam._m0[1u].z;
    }
    float _1767 = ((((1.0 - _755) * ((_742 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_755 * _742)) * _726;
    float _1768 = _1767 * ((cbModelParam._m0[1u].w * (_1751 - _1653)) + _1653);
    float _1769 = _1767 * ((cbModelParam._m0[1u].w * (_1753 - _1655)) + _1655);
    float _1770 = _1767 * ((cbModelParam._m0[1u].w * (_1755 - _1657)) + _1657);
    float _1773 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1768 * cbSceneParam._m0[91u].x));
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1799 = _726 + (-1.0);
    float _1804 = (cbLight._m0[_1792].x * _1799) + 1.0;
    float _1805 = (cbLight._m0[_1792].y * _1799) + 1.0;
    float _1806 = (cbLight._m0[_1792].z * _1799) + 1.0;
    float _1807 = (cbLight._m0[_1792].w * _1799) + 1.0;
    uint _1808 = _1791 + 5u;
    float _1814 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1818 = _1791 + 4u;
    float _1825 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1829 = _1791 | 1u;
    float _1840 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_562, _563, _564));
    float _1843 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_562, _563, _564));
    float _4053 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _4064 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1848 = (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.3183098733425140380859375;
    float _1850 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _1857 = ((cbLight._m0[_1808].x * _1814) * _1850) + ((cbLight._m0[_1818].x * _1825) * _1848);
    float _1858 = ((_1814 * cbLight._m0[_1808].y) * _1850) + ((_1825 * cbLight._m0[_1818].y) * _1848);
    float _1859 = ((_1814 * cbLight._m0[_1808].z) * _1850) + ((_1825 * cbLight._m0[_1818].z) * _1848);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1791 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1857;
        _1879 = _1858;
        _1881 = _1859;
    }
    else
    {
        uint _1885 = _1791 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1791 + 2u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _4075 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1904 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1857;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2081 = _1791 + 7u;
        float _2097 = (dot(vec3(cbLight._m0[_1791 + 3u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _4091 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2100 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _1922 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _1877;
        _1924 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _1879;
        _1926 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _1881;
    }
    uint _1929 = _1791 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _565) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1791].x + _640;
    float _1945 = cbLight._m0[_1791].y + _641;
    float _1946 = cbLight._m0[_1791].z + _642;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1791].xyz));
    float _4107 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _1958 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _1959 = dot(vec3(_562, _563, _564), vec3(_1951, _1952, _1953));
    float _4129 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1951, _1952, _1953));
    float _4140 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1958 * ((_1957 * _1983) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1983) + _1943) * _1957))) * _1957;
    float _4151 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2007 = _1791 + 9u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _565) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1829].x + _640;
    float _2021 = cbLight._m0[_1829].y + _641;
    float _2022 = cbLight._m0[_1829].z + _642;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1829].xyz));
    float _4162 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2034 = dot(vec3(_562, _563, _564), vec3(_2027, _2028, _2029));
    float _4173 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2027, _2028, _2029));
    float _4184 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2019 * _2019;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2019;
    float _2066 = (0.5 / (((_1958 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2056) + _2019) * _2033))) * _2033;
    float _4195 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    float _2078 = (((_2055 * cbLight._m0[_2007].x) * _2068) * _1814) + (((_1982 * cbLight._m0[_1929].x) * _1996) * _1825);
    float _2079 = (((_2055 * cbLight._m0[_2007].y) * _2068) * _1814) + (((_1982 * cbLight._m0[_1929].y) * _1996) * _1825);
    float _2080 = (((_2055 * cbLight._m0[_2007].z) * _2068) * _1814) + (((_1982 * cbLight._m0[_1929].z) * _1996) * _1825);
    float _2142;
    float _2144;
    float _2146;
    if (_1866)
    {
        _2142 = _2078;
        _2144 = _2079;
        _2146 = _2080;
    }
    else
    {
        uint _2148 = _1791 + 2u;
        uint _2152 = _1791 + 10u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _565) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _640;
        float _2169 = cbLight._m0[_2148].y + _641;
        float _2170 = cbLight._m0[_2148].z + _642;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2148].xyz));
        float _4206 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2182 = dot(vec3(_562, _563, _564), vec3(_2175, _2176, _2177));
        float _4217 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4228 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2204 = 1.0 - _2167;
        float _2214 = (0.5 / (((_1958 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2204) + _2167) * _2181))) * _2181;
        float _4239 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2142 = (((_2203 * cbLight._m0[_2152].x) * _2216) * _2217) + _2078;
        _2144 = (((_2203 * cbLight._m0[_2152].y) * _2216) * _2217) + _2079;
        _2146 = (((_2203 * cbLight._m0[_2152].z) * _2216) * _2217) + _2080;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1884)
    {
        _2252 = _2142;
        _2254 = _2144;
        _2256 = _2146;
    }
    else
    {
        uint _2263 = _1791 + 3u;
        uint _2267 = _1791 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _565) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _640;
        float _2284 = cbLight._m0[_2263].y + _641;
        float _2285 = cbLight._m0[_2263].z + _642;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2263].xyz));
        float _4255 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2297 = dot(vec3(_562, _563, _564), vec3(_2290, _2291, _2292));
        float _4266 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4277 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2319 = 1.0 - _2282;
        float _2329 = (0.5 / (((_1958 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2319) + _2282) * _2296))) * _2296;
        float _4288 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2252 = (((_2318 * cbLight._m0[_2267].x) * _2331) * _2332) + _2142;
        _2254 = (((_2318 * cbLight._m0[_2267].y) * _2331) * _2332) + _2144;
        _2256 = (((_2318 * cbLight._m0[_2267].z) * _2331) * _2332) + _2146;
    }
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    float _2477;
    if (_1789.y == 0u)
    {
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2407;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2407;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2407;
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.x;
        uint _2434 = uint((float(_2422.y) * floor(float(uint(cbSceneParam._m0[85u].y * _662) / _2423))) + floor(float(uint(cbSceneParam._m0[85u].x * _661) / _2423)));
        float _2444 = (log2(_2410 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2445 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        uint _2448 = uint(isnan(14.0) ? _2445 : (isnan(_2445) ? 14.0 : min(_2445, 14.0)));
        uvec4 _2453 = texelFetch(g_lightClusterGridBuffer, int(((_2448 << 2u) + (_2434 << 6u)) >> 2u));
        uint _2454 = _2453.x;
        uint _2455 = _2422.z;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        float _2563;
        float _2565;
        if (((((1u << ((_2455 >> 4u) & 15u)) + 4294967295u) & _2454) == 0u) || ((_2455 & 240u) == 0u))
        {
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
            _2563 = 0.0;
            _2565 = 0.0;
        }
        else
        {
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2564;
            float _2566;
            float _2708 = 0.0;
            float _2709 = 0.0;
            float _2710 = 0.0;
            float _2711 = 0.0;
            float _2712 = 0.0;
            float _2713 = 0.0;
            uint _2714 = 0u;
            uint _2723;
            bool _2724;
            for (;;)
            {
                _2723 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2714 << 2u)) >> 2u)).x;
                _2724 = _2723 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2724)
                {
                    frontier_phi_66_pred = _2708;
                    frontier_phi_66_pred_1 = _2713;
                    frontier_phi_66_pred_2 = _2712;
                    frontier_phi_66_pred_3 = _2711;
                    frontier_phi_66_pred_4 = _2710;
                    frontier_phi_66_pred_5 = _2709;
                }
                else
                {
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    uint _2859;
                    _2853 = _2708;
                    _2854 = _2709;
                    _2855 = _2710;
                    _2856 = _2711;
                    _2857 = _2712;
                    _2858 = _2713;
                    _2859 = _2723;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    for (;;)
                    {
                        uint _2863 = uint(findLSB(_2859)) + (_2714 << 5u);
                        uint _2860 = (_2859 + 4294967295u) & _2859;
                        uint _2865 = _2863 * 48u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2885 = (_2863 * 48u) + 4u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2904 = (_2863 * 48u) + 8u;
                        vec3 _2915 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x));
                        float _2919 = _2879.x - _2408;
                        float _2920 = _2879.y - _2409;
                        float _2921 = _2879.z - _2410;
                        float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                        float _2925 = inversesqrt(_2922);
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2929 = dot(vec3(_682, _685, _688), vec3(_2926, _2927, _2928));
                        float _2934 = 1.0 - (_2922 * _2879.w);
                        float _4314 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _2936 = sqrt(_2922) * _2898.w;
                        float _2939 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2929) + _2940;
                        float _2946 = _2936 * _2936;
                        float _2950 = ((isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))) * _2935) / ((_2946 * 0.699999988079071044921875) + 1.0);
                        float _2954 = (-0.0) - _2408;
                        float _2955 = (-0.0) - _2409;
                        float _2956 = (-0.0) - _2410;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2971 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                        float _2972 = 1.0 - _742;
                        float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                        float _2980 = _2979 * _2979;
                        float _2981 = _2980 * _2980;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2992 = dot(vec3(_682, _685, _688), vec3(_2961, _2962, _2963));
                        float _4330 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _2996 = dot(vec3(_682, _685, _688), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                        float _4341 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                        float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                        float _3004 = _2939 * _2980;
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2929) + _3005;
                        float _4352 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                        float _3010 = 1.0 - _2980;
                        float _3020 = (0.5 / (((_3009 * ((_2995 * _3010) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3009 * _3010) + _2980) * _2995))) * _3009;
                        float _4363 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3031 = (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) / ((_3003 * _3003) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125))) * _2935;
                        _2783 = (_2950 * _2898.x) + _2856;
                        _2784 = (_2950 * _2898.y) + _2857;
                        _2785 = (_2950 * _2898.z) + _2858;
                        _2780 = (_3031 * _2915.x) + _2853;
                        _2781 = (_3031 * _2915.y) + _2854;
                        _2782 = (_3031 * _2915.z) + _2855;
                        if (_2860 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2853 = _2780;
                            _2854 = _2781;
                            _2855 = _2782;
                            _2856 = _2783;
                            _2857 = _2784;
                            _2858 = _2785;
                            _2859 = _2860;
                        }
                    }
                    frontier_phi_66_pred = _2780;
                    frontier_phi_66_pred_1 = _2785;
                    frontier_phi_66_pred_2 = _2784;
                    frontier_phi_66_pred_3 = _2783;
                    frontier_phi_66_pred_4 = _2782;
                    frontier_phi_66_pred_5 = _2781;
                }
                _2556 = frontier_phi_66_pred;
                _2566 = frontier_phi_66_pred_1;
                _2564 = frontier_phi_66_pred_2;
                _2562 = frontier_phi_66_pred_3;
                _2560 = frontier_phi_66_pred_4;
                _2558 = frontier_phi_66_pred_5;
                uint _2715 = _2714 + 1u;
                if (_2715 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2708 = _2556;
                    _2709 = _2558;
                    _2710 = _2560;
                    _2711 = _2562;
                    _2712 = _2564;
                    _2713 = _2566;
                    _2714 = _2715;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
            _2563 = _2564;
            _2565 = _2566;
        }
        uvec4 _2569 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2570 = _2569.z;
        uint _2572 = (_2570 >> 8u) & 15u;
        float _2676;
        float _2678;
        float _2680;
        float _2682;
        float _2684;
        float _2686;
        if (((4294967295u << _2572) & _2454) == 0u)
        {
            _2676 = _2555;
            _2678 = _2557;
            _2680 = _2559;
            _2682 = _2561;
            _2684 = _2563;
            _2686 = _2565;
        }
        else
        {
            float _2701 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
            float _2702 = _2701 * _2408;
            float _2703 = _2701 * _2409;
            float _2704 = _2701 * _2410;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2572 < ((_2570 >> 12u) & 15u))
            {
                float _2677;
                float _2679;
                float _2681;
                float _2683;
                float _2685;
                float _2687;
                float _2836 = _2555;
                float _2837 = _2557;
                float _2838 = _2559;
                float _2839 = _2561;
                float _2840 = _2563;
                float _2841 = _2565;
                uint _2842 = _2572;
                uint _2851;
                bool _2852;
                for (;;)
                {
                    _2851 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                    _2852 = _2851 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2852)
                    {
                        frontier_phi_77_pred = _2841;
                        frontier_phi_77_pred_1 = _2840;
                        frontier_phi_77_pred_2 = _2839;
                        frontier_phi_77_pred_3 = _2838;
                        frontier_phi_77_pred_4 = _2837;
                        frontier_phi_77_pred_5 = _2836;
                    }
                    else
                    {
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3058 = _2836;
                        float _3059 = _2837;
                        float _3060 = _2838;
                        float _3061 = _2839;
                        float _3062 = _2840;
                        float _3063 = _2841;
                        uint _3064 = _2851;
                        uint _3065;
                        vec4 _3090;
                        float _3091;
                        vec4 _3106;
                        vec3 _3118;
                        vec4 _3134;
                        vec4 _3150;
                        float _3196;
                        bool _3197;
                        for (;;)
                        {
                            uint _3075 = ((_2842 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3064));
                            _3065 = (_3064 + 4294967295u) & _3064;
                            uint _3077 = _3075 * 40u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            _3091 = _3090.w;
                            uint _3093 = (_3075 * 40u) + 4u;
                            _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            uint _3108 = (_3075 * 40u) + 8u;
                            _3118 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x));
                            uint _3121 = (_3075 * 40u) + 16u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3137 = (_3075 * 40u) + 20u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3152 = (_3075 * 40u) + 24u;
                            vec4 _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3171 = (_3075 * 40u) + 28u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            _3196 = fma(_2410, _3184.z, fma(_2409, _3184.y, _3184.x * _2408)) + _3184.w;
                            _3197 = !((fma(_2410, _3165.z, fma(_2409, _3165.y, _3165.x * _2408)) + _3165.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3197)
                            {
                                float _3224 = _3090.x - _2408;
                                float _3225 = _3090.y - _2409;
                                float _3226 = _3090.z - _2410;
                                float _3227 = dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226));
                                float _3230 = inversesqrt(_3227);
                                float _3231 = _3230 * _3224;
                                float _3232 = _3230 * _3225;
                                float _3233 = _3230 * _3226;
                                float _3237 = 1.0 - (_3227 / (_3091 * _3091));
                                float _4374 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3242 = sqrt(_3227) * _3106.w;
                                float _3244 = 1.39999997615814208984375 / (_3242 + 1.39999997615814208984375);
                                float _3245 = _3244 * _3244;
                                float _3248 = ((1.0 - _3245) * dot(vec3(_3231, _3232, _3233), vec3(_682, _685, _688))) + _3245;
                                float _3251 = _3242 * _3242;
                                float _3255 = (fma(_2410, _3134.z, fma(_2409, _3134.y, _3134.x * _2408)) + _3134.w) / _3196;
                                float _3256 = (fma(_2410, _3150.z, fma(_2409, _3150.y, _3150.x * _2408)) + _3150.w) / _3196;
                                float _3260 = 1.0 - dot(vec2(_3255, _3256), vec2(_3255, _3256));
                                float _4390 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3262 = _3261 * (((isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0))) * _3238) / ((_3251 * 0.699999988079071044921875) + 1.0));
                                float _3274 = exp2(log2(1.0 / ((_3251 * 3.5) + 5.0)) * 0.25);
                                float _3275 = 1.0 - _742;
                                float _3282 = sqrt(1.0 - ((1.0 - (_3275 * _3275)) * (1.0 - (_3274 * _3274))));
                                float _3283 = _3282 * _3282;
                                float _3284 = _3283 * _3283;
                                float _3285 = _3231 - _2702;
                                float _3286 = _3232 - _2703;
                                float _3287 = _3233 - _2704;
                                float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
                                float _3295 = dot(vec3(_682, _685, _688), vec3((-0.0) - _2702, (-0.0) - _2703, (-0.0) - _2704));
                                float _4401 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                                float _3299 = dot(vec3(_682, _685, _688), vec3(_3291 * _3285, _3291 * _3286, _3291 * _3287));
                                float _4412 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
                                float _3306 = ((_3302 * _3302) * (_3284 + (-1.0))) + 1.0;
                                float _3307 = _3244 * _3283;
                                float _3308 = _3307 * _3307;
                                float _3314 = ((1.0 - _3308) * dot(vec3(_682, _685, _688), vec3(_3231, _3232, _3233))) + _3308;
                                float _4423 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3315 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3316 = 1.0 - _3283;
                                float _3326 = (0.5 / (((_3315 * ((_3298 * _3316) + _3283)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3283) * _3298))) * _3315;
                                float _4434 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3336 = (_3261 * _3238) * (((_3284 * 3.1415927410125732421875) * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) / ((_3306 * _3306) * ((_3251 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3262 * _3106.y;
                                frontier_phi_83_pred_1 = _3262 * _3106.x;
                                frontier_phi_83_pred_2 = _3336 * _3118.z;
                                frontier_phi_83_pred_3 = _3336 * _3118.y;
                                frontier_phi_83_pred_4 = _3336 * _3118.x;
                                frontier_phi_83_pred_5 = _3262 * _3106.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3344 = frontier_phi_83_pred;
                            _3343 = frontier_phi_83_pred_1;
                            _3342 = frontier_phi_83_pred_2;
                            _3341 = frontier_phi_83_pred_3;
                            _3340 = frontier_phi_83_pred_4;
                            _3345 = frontier_phi_83_pred_5;
                            _3048 = _3343 + _3061;
                            _3049 = _3344 + _3062;
                            _3050 = _3345 + _3063;
                            _3045 = _3340 + _3058;
                            _3046 = _3341 + _3059;
                            _3047 = _3342 + _3060;
                            if (_3065 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3065;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3050;
                        frontier_phi_77_pred_1 = _3049;
                        frontier_phi_77_pred_2 = _3048;
                        frontier_phi_77_pred_3 = _3047;
                        frontier_phi_77_pred_4 = _3046;
                        frontier_phi_77_pred_5 = _3045;
                    }
                    _2687 = frontier_phi_77_pred;
                    _2685 = frontier_phi_77_pred_1;
                    _2683 = frontier_phi_77_pred_2;
                    _2681 = frontier_phi_77_pred_3;
                    _2679 = frontier_phi_77_pred_4;
                    _2677 = frontier_phi_77_pred_5;
                    uint _2843 = _2842 + 1u;
                    if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2836 = _2677;
                        _2837 = _2679;
                        _2838 = _2681;
                        _2839 = _2683;
                        _2840 = _2685;
                        _2841 = _2687;
                        _2842 = _2843;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2681;
                frontier_phi_58_59_ladder_1 = _2687;
                frontier_phi_58_59_ladder_2 = _2685;
                frontier_phi_58_59_ladder_3 = _2683;
                frontier_phi_58_59_ladder_4 = _2679;
                frontier_phi_58_59_ladder_5 = _2677;
            }
            else
            {
                frontier_phi_58_59_ladder = _2559;
                frontier_phi_58_59_ladder_1 = _2565;
                frontier_phi_58_59_ladder_2 = _2563;
                frontier_phi_58_59_ladder_3 = _2561;
                frontier_phi_58_59_ladder_4 = _2557;
                frontier_phi_58_59_ladder_5 = _2555;
            }
            _2676 = frontier_phi_58_59_ladder_5;
            _2678 = frontier_phi_58_59_ladder_4;
            _2680 = frontier_phi_58_59_ladder;
            _2682 = frontier_phi_58_59_ladder_3;
            _2684 = frontier_phi_58_59_ladder_2;
            _2686 = frontier_phi_58_59_ladder_1;
        }
        float _2691 = isnan(1.0) ? _726 : (isnan(_726) ? 1.0 : min(_726, 1.0));
        _2467 = (_2691 * _2682) + _1922;
        _2469 = (_2691 * _2684) + _1924;
        _2471 = (_2691 * _2686) + _1926;
        _2473 = ((_2676 * 0.039999999105930328369140625) * _2691) + _2252;
        _2475 = ((_2678 * 0.039999999105930328369140625) * _2691) + _2254;
        _2477 = ((_2680 * 0.039999999105930328369140625) * _2691) + _2256;
    }
    else
    {
        _2467 = _1922;
        _2469 = _1924;
        _2471 = _1926;
        _2473 = _2252;
        _2475 = _2254;
        _2477 = _2256;
    }
    float _4450 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4461 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4472 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _2494 = ((isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * (_2467 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _726))) + ((_2473 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    float _2495 = ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2469 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _726))) + ((_2475 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    float _2496 = ((isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2471 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _726))) + ((_2477 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1562)) * cbPerFrame._m0[3u].x);
    uint _2497 = _239 + 6u;
    float _2505 = _661 / cbSceneParam._m0[86u].x;
    float _2506 = _662 / cbSceneParam._m0[86u].y;
    vec4 _2520 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, (log2((isnan(cbSceneParam._m0[77u].w) ? _583 : (isnan(_583) ? cbSceneParam._m0[77u].w : min(_583, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2522 = _2520.x;
    float _2523 = _2520.y;
    float _2524 = _2520.z;
    float _2525 = _2520.w;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    if (_583 > cbSceneParam._m0[78u].w)
    {
        float _2580 = isnan(_583) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _583 : min(cbSceneParam._m0[80u].w, _583));
        float _2581 = _2580 / _583;
        float _2592 = _2581 * _633;
        float _2593 = _634 * _2581;
        float _2594 = (-0.0) - _2593;
        float _2596 = _2581 * _635;
        float _2598 = (cbSceneParam._m0[77u].w * _2594) / _2580;
        float _2599 = _2598 + cbSceneParam._m0[79u].w;
        float _2600 = cbSceneParam._m0[79u].w - _2593;
        float _2606 = sqrt(((_2592 * _2592) + (_2593 * _2593)) + (_2596 * _2596));
        float _2609 = (1.0 - (cbSceneParam._m0[77u].w / _2580)) * _2606;
        float _2614 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2616 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2793;
        if (abs((_2594 - _2598) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2793 = ((((_2599 > 0.0) ? exp2(_2614 * _2599) : (2.0 - exp2(_2616 * _2599))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2609;
        }
        else
        {
            float _2737 = 1.0 / cbSceneParam._m0[80u].x;
            float _2738 = isnan(_2600) ? _2599 : (isnan(_2599) ? _2600 : max(_2599, _2600));
            float _2739 = isnan(_2600) ? _2599 : (isnan(_2599) ? _2600 : min(_2599, _2600));
            float _2748 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : min(_2738, 0.0));
            float _2749 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : min(_2739, 0.0));
            _2793 = ((abs(_2606 / _2594) * cbSceneParam._m0[80u].y) * ((((_2748 - _2749) * 2.0) - ((exp2(_2614 * (isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0)))) - exp2(_2614 * (isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))))) * _2737)) - ((exp2(_2616 * _2748) - exp2(_2616 * _2749)) * _2737))) + (_2609 * cbSceneParam._m0[80u].z);
        }
        vec4 _2795 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2505, _2506, 1.0), 0.0);
        float _2804 = exp2((_2793 * (-1.44269502162933349609375)) * (1.0 - _2795.w));
        float _2805 = log2(_2804);
        float _2821 = log2(_2525);
        _2618 = (exp2(_2821 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].x)) * _2795.x) / cbSceneParam._m0[78u].x)) + _2522;
        _2620 = (exp2(_2821 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].y)) * _2795.y) / cbSceneParam._m0[78u].y)) + _2523;
        _2622 = (exp2(_2821 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].z)) * _2795.z) / cbSceneParam._m0[78u].z)) + _2524;
        _2624 = _2804 * _2525;
    }
    else
    {
        _2618 = _2522;
        _2620 = _2523;
        _2622 = _2524;
        _2624 = _2525;
    }
    bool _2831;
    vec4 _2634;
    vec4 _2656;
    float _2658;
    float _2662;
    float _2663;
    float _2664;
    float _2665;
    bool _2675;
    for (;;)
    {
        _2634 = cbMatDynParam._m0[0u];
        float _2636 = roundEven(_2634.y);
        bool _2637 = _2636 == 3.0;
        float _2638 = log2(_2624);
        float _2645 = exp2(_2638 * cbSceneParam._m0[78u].x) * _2494;
        float _2646 = exp2(_2638 * cbSceneParam._m0[78u].y) * _2495;
        float _2647 = exp2(_2638 * cbSceneParam._m0[78u].z) * _2496;
        float _2654 = _649 + (-0.5);
        _2656 = cbMtdParam._m0[1u];
        _2658 = _2656.y * _2654;
        float _2661 = (_2636 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2662 = _2661 * (_2637 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2618)));
        _2663 = _2661 * (_2637 ? _2646 : (_2646 + (cbSceneParam._m0[72u].w * _2620)));
        _2664 = _2661 * (_2637 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2622)));
        _2665 = _2654 * 0.999000012874603271484375;
        _2675 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2675)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2665) < 0.5)
            {
                _2831 = true;
                break;
            }
        }
        uint _2772 = _701 + uint(_2634.w);
        if ((cbInstanceData._m0[_2772].w < 1.0) && ((cbInstanceData._m0[_2772].w + _2665) < 0.5))
        {
            _2831 = true;
            break;
        }
        if ((_2658 + 1.0) < _2656.x)
        {
            _2831 = true;
            break;
        }
        _2831 = false;
        break;
    }
    float _3036;
    if (_2831)
    {
        discard_state = true;
        _3036 = 0.0;
    }
    else
    {
        _3036 = cbInstanceData._m0[_2497].w;
    }
    SV_Target.x = _2662;
    SV_Target.y = _2663;
    SV_Target.z = _2664;
    SV_Target.w = _3036;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2497].w;
    discard_exit();
}


