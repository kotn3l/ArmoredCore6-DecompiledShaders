#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1033;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3342 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3353 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3364 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) + _323;
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _376 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = _376.z;
    float _384 = (_376.x * 2.0) + (-1.0);
    float _385 = (_376.y * 2.0) + (-1.0);
    float _386 = dot(vec2(_384, _385), vec2(_384, _385));
    float _3375 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _391 = sqrt(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))));
    float _396 = _384 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_350.x * 2.0) + (-1.0)));
    float _397 = _385 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_350.y * 2.0) + (-1.0)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _269) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _270) + cbTextureTilingScale._m0[11u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _433 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_416 - _417) * cbMtdParam._m0[24u].z) + _417) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3386 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _441 = (_434 * (cbMtdParam._m0[17u].x - _330)) + _330;
    float _442 = (_434 * (cbMtdParam._m0[17u].y - _331)) + _331;
    float _443 = (_434 * (cbMtdParam._m0[17u].z - _332)) + _332;
    float _448 = (((_350.z - _380) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _380;
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _269) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _270) + cbTextureTilingScale._m0[15u].w));
    float _468 = (_461.x * 2.0) + (-1.0);
    float _469 = (_461.y * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3397 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _478 = (_434 * (_461.z - _448)) + _448;
    float _490 = (((_468 - _396) + (cbMtdParam._m0[21u].x * _396)) * _434) + _396;
    float _491 = (((_469 - _397) + (cbMtdParam._m0[21u].x * _397)) * _434) + _397;
    float _492 = (_434 * (sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) - _391)) + _391;
    float _494 = cbMtdParam._m0[22u].x + _376.w;
    float _497 = fma(_492, _216 * NORMAL.x, fma(_491, _223 * TANGENT.x, (_209 * _201) * _490));
    float _500 = fma(_492, _216 * NORMAL.y, fma(_491, _223 * TANGENT.y, (_209 * _202) * _490));
    float _503 = fma(_492, _216 * NORMAL.z, fma(_491, _223 * TANGENT.z, (_209 * _203) * _490));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _3408 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _511 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3430 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3441 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3452 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _529 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _580 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _570);
    float _581 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _570);
    float _582 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _570);
    float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
    float _587 = _580 * _586;
    float _588 = _581 * _586;
    float _589 = _582 * _586;
    float _595 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _596 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _617 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _620 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _623 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    uint _637 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _643 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_637].x;
    float _644 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_637].y;
    float _645 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_637].z;
    float _3463 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _646 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _647 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    vec4 _657 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _595, cbSceneParam._m0[86u].y * _596));
    float _661 = ((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * TEXCOORD_5.w) * _657.x;
    float _662 = dot(vec3(_508, _509, _510), vec3(_587, _588, _589));
    float _665 = _662 * 2.0;
    float _669 = (_665 * _508) - _587;
    float _670 = (_665 * _509) - _588;
    float _671 = (_665 * _510) - _589;
    float _675 = abs(dot(vec3(_587, _588, _589), vec3(_508, _509, _510)));
    float _3496 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = sqrt(_511);
    float _690 = exp2((_677 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_677 * 3.0));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _757 = fma(_730, cbModelParam._m0[26u].z, fma(_726, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _722));
        float _761 = fma(_730, cbModelParam._m0[27u].z, fma(_726, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _722));
        float _765 = fma(_730, cbModelParam._m0[28u].z, fma(_726, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _722));
        float _790 = _722 + _508;
        float _791 = _726 + _509;
        float _792 = _730 + _510;
        float _802 = fma(_792, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790)) - _757;
        float _803 = fma(_792, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790)) - _761;
        float _804 = fma(_792, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790)) - _765;
        float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
        float _821 = ((_808 * _802) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_757 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_808 * _803) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_761 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_808 * _804) / cbModelParam._m0[34u].z) + ((((((_765 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(_508, _509, _510), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3544 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_508, _509, _510), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3577 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_508, _509, _510), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3588 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3599 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3610 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1034 = _862;
        _1035 = _861;
        _1036 = _873;
        _1037 = _872;
        _1038 = _871;
        _1039 = _883;
        _1040 = _882;
        _1041 = _881;
        _1042 = _896;
        _1043 = _895;
        _1044 = _894;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _1033;
        _1034 = _1033;
        _1035 = _1033;
        _1036 = _1033;
        _1037 = _1033;
        _1038 = _1033;
        _1039 = _1033;
        _1040 = _1033;
        _1041 = _1033;
        _1042 = _1033;
        _1043 = _1033;
        _1044 = _1033;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_730, cbModelParam._m0[30u].z, fma(_726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _722));
        float _1076 = fma(_730, cbModelParam._m0[31u].z, fma(_726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _722));
        float _1080 = fma(_730, cbModelParam._m0[32u].z, fma(_726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _722));
        float _1103 = _722 + _508;
        float _1104 = _726 + _509;
        float _1105 = _730 + _510;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_508, _509, _510), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3673 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_508, _509, _510), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3706 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_508, _509, _510), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3739 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1033;
        _1342 = _1033;
        _1343 = _1033;
        _1344 = _1033;
        _1345 = _1033;
        _1346 = _1033;
        _1347 = _1033;
        _1348 = _1033;
        _1349 = _1033;
        _1350 = _1033;
        _1351 = _1033;
        _1352 = _1033;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1045)) + _1045;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1046)) + _1046;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1047)) + _1047;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _669 * 0.5;
    float _1410 = _670 * 0.5;
    float _1411 = _671 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1032, _1036, _1039, _1042));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _511);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1559;
    float _1561;
    float _1563;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1526 = fma(_730, cbModelParam._m0[13u].z, fma(_726, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722)) + cbModelParam._m0[13u].w;
        float _1530 = fma(_730, cbModelParam._m0[14u].z, fma(_726, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722)) + cbModelParam._m0[14u].w;
        float _1534 = fma(_730, cbModelParam._m0[15u].z, fma(_726, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722)) + cbModelParam._m0[15u].w;
        float _1537 = fma(_671, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669));
        float _1540 = fma(_671, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669));
        float _1543 = fma(_671, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669));
        float _1571;
        if (_1537 > 0.0)
        {
            _1571 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1571 = frontier_phi_14_12_ladder;
        }
        float _1775;
        if (_1540 > 0.0)
        {
            _1775 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1775 = frontier_phi_23_19_ladder;
        }
        float _2018;
        if (_1543 > 0.0)
        {
            _2018 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2018 = frontier_phi_35_30_ladder;
        }
        float _2020 = isnan(_1775) ? _1571 : (isnan(_1571) ? _1775 : min(_1571, _1775));
        float _2021 = isnan(_2018) ? _2020 : (isnan(_2020) ? _2018 : min(_2020, _2018));
        float _2025 = (_2021 * _1537) + _1526;
        float _2026 = (_2021 * _1540) + _1530;
        float _2027 = (_2021 * _1543) + _1534;
        float _2028 = _2021 * 9.9999997473787516355514526367188e-05;
        float _2030 = (-1.0) - _2028;
        float _2032 = _2028 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2027 > _2032) || ((_2027 < _2030) || ((_2026 > _2032) || ((_2026 < _2030) || ((_2025 < _2030) || (_2025 > _2032))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2151 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2027, cbModelParam._m0[9u].z, fma(_2026, cbModelParam._m0[9u].y, _2025 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2027, cbModelParam._m0[10u].z, fma(_2026, cbModelParam._m0[10u].y, _2025 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2027, cbModelParam._m0[11u].z, fma(_2026, cbModelParam._m0[11u].y, _2025 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_13_35_ladder = _2151.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2151.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2151.x * cbModelParam._m0[1u].y;
        }
        _1559 = frontier_phi_13_35_ladder_2;
        _1561 = frontier_phi_13_35_ladder_1;
        _1563 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1547 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_669, _670, _671), _1478);
        _1559 = _1547.x * cbModelParam._m0[1u].y;
        _1561 = _1547.y * cbModelParam._m0[1u].y;
        _1563 = _1547.z * cbModelParam._m0[1u].y;
    }
    float _1567 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _511);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1567 : min(cbModelParam._m0[25u].w, _1567));
    float _1659;
    float _1661;
    float _1663;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1623 = fma(_730, cbModelParam._m0[21u].z, fma(_726, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722)) + cbModelParam._m0[21u].w;
        float _1627 = fma(_730, cbModelParam._m0[22u].z, fma(_726, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722)) + cbModelParam._m0[22u].w;
        float _1631 = fma(_730, cbModelParam._m0[23u].z, fma(_726, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722)) + cbModelParam._m0[23u].w;
        float _1634 = fma(_671, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669));
        float _1637 = fma(_671, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669));
        float _1640 = fma(_671, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669));
        float _1780;
        if (_1634 > 0.0)
        {
            _1780 = abs((1.0 - _1623) / _1634);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1623 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1780 = frontier_phi_25_21_ladder;
        }
        float _2045;
        if (_1637 > 0.0)
        {
            _2045 = abs((1.0 - _1627) / _1637);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1627 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2045 = frontier_phi_37_32_ladder;
        }
        float _2250;
        if (_1640 > 0.0)
        {
            _2250 = abs((1.0 - _1631) / _1640);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1631 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2250 = frontier_phi_46_43_ladder;
        }
        float _2252 = isnan(_2045) ? _1780 : (isnan(_1780) ? _2045 : min(_1780, _2045));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1634) + _1623;
        float _2258 = (_2253 * _1637) + _1627;
        float _2259 = (_2253 * _1640) + _1631;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2261 = (-1.0) - _2260;
        float _2263 = _2260 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2259 > _2263) || ((_2259 < _2261) || ((_2258 > _2263) || ((_2258 < _2261) || ((_2257 < _2261) || (_2257 > _2263))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2259, cbModelParam._m0[17u].z, fma(_2258, cbModelParam._m0[17u].y, _2257 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2259, cbModelParam._m0[18u].z, fma(_2258, cbModelParam._m0[18u].y, _2257 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2259, cbModelParam._m0[19u].z, fma(_2258, cbModelParam._m0[19u].y, _2257 * cbModelParam._m0[19u].x))), _1568);
            frontier_phi_22_46_ladder = _2458.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2458.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2458.x * cbModelParam._m0[1u].z;
        }
        _1659 = frontier_phi_22_46_ladder_2;
        _1661 = frontier_phi_22_46_ladder_1;
        _1663 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_669, _670, _671), _1568);
        _1659 = _1643.x * cbModelParam._m0[1u].z;
        _1661 = _1643.y * cbModelParam._m0[1u].z;
        _1663 = _1643.z * cbModelParam._m0[1u].z;
    }
    float _1675 = ((((1.0 - _690) * ((_677 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_690 * _677)) * _661;
    float _1676 = _1675 * ((cbModelParam._m0[1u].w * (_1659 - _1559)) + _1559);
    float _1677 = _1675 * ((cbModelParam._m0[1u].w * (_1661 - _1561)) + _1561);
    float _1678 = _1675 * ((cbModelParam._m0[1u].w * (_1663 - _1563)) + _1563);
    float _1681 = fma(_1678, cbSceneParam._m0[89u].z, fma(_1677, cbSceneParam._m0[89u].y, _1676 * cbSceneParam._m0[89u].x));
    float _1684 = fma(_1678, cbSceneParam._m0[90u].z, fma(_1677, cbSceneParam._m0[90u].y, _1676 * cbSceneParam._m0[90u].x));
    float _1687 = fma(_1678, cbSceneParam._m0[91u].z, fma(_1677, cbSceneParam._m0[91u].y, _1676 * cbSceneParam._m0[91u].x));
    uvec4 _1697 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1699 = _1697.x * 14u;
    uint _1700 = _1699 + 13u;
    float _1707 = _661 + (-1.0);
    float _1712 = (cbLight._m0[_1700].x * _1707) + 1.0;
    float _1713 = (cbLight._m0[_1700].y * _1707) + 1.0;
    float _1714 = (cbLight._m0[_1700].z * _1707) + 1.0;
    float _1715 = (cbLight._m0[_1700].w * _1707) + 1.0;
    uint _1716 = _1699 + 5u;
    float _1722 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1726 = _1699 + 4u;
    float _1733 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1737 = _1699 | 1u;
    float _1748 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_508, _509, _510));
    float _1751 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_508, _509, _510));
    float _3875 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _3886 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1756 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.3183098733425140380859375;
    float _1758 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * 0.3183098733425140380859375;
    float _1765 = ((cbLight._m0[_1716].x * _1722) * _1758) + ((cbLight._m0[_1726].x * _1733) * _1756);
    float _1766 = ((_1722 * cbLight._m0[_1716].y) * _1758) + ((_1733 * cbLight._m0[_1726].y) * _1756);
    float _1767 = ((_1722 * cbLight._m0[_1716].z) * _1758) + ((_1733 * cbLight._m0[_1726].z) * _1756);
    uvec4 _1772 = floatBitsToUint(cbLight._m0[_1699 + 12u]);
    bool _1774 = _1772.x == 0u;
    float _1785;
    float _1787;
    float _1789;
    if (_1774)
    {
        _1785 = _1765;
        _1787 = _1766;
        _1789 = _1767;
    }
    else
    {
        uint _1793 = _1699 + 6u;
        float _1809 = (dot(vec3(cbLight._m0[_1699 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _1810 = _1809 * _1809;
        float _3897 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1812 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _1785 = (((cbLight._m0[_1793].x * 0.3183098733425140380859375) * _1811) * _1812) + _1765;
        _1787 = (((cbLight._m0[_1793].y * 0.3183098733425140380859375) * _1811) * _1812) + _1766;
        _1789 = (((cbLight._m0[_1793].z * 0.3183098733425140380859375) * _1811) * _1812) + _1767;
    }
    bool _1792 = _1772.y == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1792)
    {
        _1830 = _1785;
        _1832 = _1787;
        _1834 = _1789;
    }
    else
    {
        uint _1989 = _1699 + 7u;
        float _2005 = (dot(vec3(cbLight._m0[_1699 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2006 = _2005 * _2005;
        float _3913 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2007 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _2008 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _1830 = (((cbLight._m0[_1989].x * 0.3183098733425140380859375) * _2007) * _2008) + _1785;
        _1832 = (((cbLight._m0[_1989].y * 0.3183098733425140380859375) * _2007) * _2008) + _1787;
        _1834 = (((cbLight._m0[_1989].z * 0.3183098733425140380859375) * _2007) * _2008) + _1789;
    }
    uint _1837 = _1699 + 8u;
    float _1850 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1699].w)) * _511) * 0.949999988079071044921875);
    float _1851 = _1850 * _1850;
    float _1852 = cbLight._m0[_1699].x + _587;
    float _1853 = cbLight._m0[_1699].y + _588;
    float _1854 = cbLight._m0[_1699].z + _589;
    float _1858 = inversesqrt(dot(vec3(_1852, _1853, _1854), vec3(_1852, _1853, _1854)));
    float _1859 = _1858 * _1852;
    float _1860 = _1858 * _1853;
    float _1861 = _1858 * _1854;
    float _1862 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1699].xyz));
    float _3929 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _3940 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _1866 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _1867 = dot(vec3(_508, _509, _510), vec3(_1859, _1860, _1861));
    float _3951 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1870 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _1871 = dot(vec3(cbLight._m0[_1699].xyz), vec3(_1859, _1860, _1861));
    float _3962 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1875 = _1851 * _1851;
    float _1879 = ((_1870 * _1870) * (_1875 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1851;
    float _1902 = (0.5 / (((_1866 * ((_1865 * _1891) + _1851)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _1891) + _1851) * _1865))) * _1865;
    float _3973 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1904 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1875 / ((_1879 * _1879) * 3.141590118408203125));
    uint _1915 = _1699 + 9u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _511) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1737].x + _587;
    float _1929 = cbLight._m0[_1737].y + _588;
    float _1930 = cbLight._m0[_1737].z + _589;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1737].xyz));
    float _3984 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1942 = dot(vec3(_508, _509, _510), vec3(_1935, _1936, _1937));
    float _3995 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1935, _1936, _1937));
    float _4006 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1927 * _1927;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = 1.0 - _1927;
    float _1974 = (0.5 / (((_1866 * ((_1941 * _1964) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _1964) + _1927) * _1941))) * _1941;
    float _4017 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1976 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    float _1986 = (((_1963 * cbLight._m0[_1915].x) * _1976) * _1722) + (((_1890 * cbLight._m0[_1837].x) * _1904) * _1733);
    float _1987 = (((_1963 * cbLight._m0[_1915].y) * _1976) * _1722) + (((_1890 * cbLight._m0[_1837].y) * _1904) * _1733);
    float _1988 = (((_1963 * cbLight._m0[_1915].z) * _1976) * _1722) + (((_1890 * cbLight._m0[_1837].z) * _1904) * _1733);
    float _2050;
    float _2052;
    float _2054;
    if (_1774)
    {
        _2050 = _1986;
        _2052 = _1987;
        _2054 = _1988;
    }
    else
    {
        uint _2056 = _1699 + 2u;
        uint _2060 = _1699 + 10u;
        float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2056].w)) * _511) * 0.949999988079071044921875);
        float _2075 = _2074 * _2074;
        float _2076 = cbLight._m0[_2056].x + _587;
        float _2077 = cbLight._m0[_2056].y + _588;
        float _2078 = cbLight._m0[_2056].z + _589;
        float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
        float _2083 = _2082 * _2076;
        float _2084 = _2082 * _2077;
        float _2085 = _2082 * _2078;
        float _2086 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2056].xyz));
        float _4028 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2089 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _2090 = dot(vec3(_508, _509, _510), vec3(_2083, _2084, _2085));
        float _4039 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2093 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _2094 = dot(vec3(cbLight._m0[_2056].xyz), vec3(_2083, _2084, _2085));
        float _4050 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2098 = _2075 * _2075;
        float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
        float _2111 = (exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2112 = 1.0 - _2075;
        float _2122 = (0.5 / (((_1866 * ((_2089 * _2112) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _2112) + _2075) * _2089))) * _2089;
        float _4061 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2124 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
        float _2125 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
        _2050 = (((_2111 * cbLight._m0[_2060].x) * _2124) * _2125) + _1986;
        _2052 = (((_2111 * cbLight._m0[_2060].y) * _2124) * _2125) + _1987;
        _2054 = (((_2111 * cbLight._m0[_2060].z) * _2124) * _2125) + _1988;
    }
    float _2160;
    float _2162;
    float _2164;
    if (_1792)
    {
        _2160 = _2050;
        _2162 = _2052;
        _2164 = _2054;
    }
    else
    {
        uint _2171 = _1699 + 3u;
        uint _2175 = _1699 + 11u;
        float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2171].w)) * _511) * 0.949999988079071044921875);
        float _2190 = _2189 * _2189;
        float _2191 = cbLight._m0[_2171].x + _587;
        float _2192 = cbLight._m0[_2171].y + _588;
        float _2193 = cbLight._m0[_2171].z + _589;
        float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
        float _2198 = _2197 * _2191;
        float _2199 = _2197 * _2192;
        float _2200 = _2197 * _2193;
        float _2201 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2171].xyz));
        float _4077 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2204 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _2205 = dot(vec3(_508, _509, _510), vec3(_2198, _2199, _2200));
        float _4088 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2208 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _2209 = dot(vec3(cbLight._m0[_2171].xyz), vec3(_2198, _2199, _2200));
        float _4099 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2213 = _2190 * _2190;
        float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
        float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2227 = 1.0 - _2190;
        float _2237 = (0.5 / (((_1866 * ((_2204 * _2227) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_1866 * _2227) + _2190) * _2204))) * _2204;
        float _4110 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2239 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
        float _2240 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
        _2160 = (((_2226 * cbLight._m0[_2175].x) * _2239) * _2240) + _2050;
        _2162 = (((_2226 * cbLight._m0[_2175].y) * _2239) * _2240) + _2052;
        _2164 = (((_2226 * cbLight._m0[_2175].z) * _2239) * _2240) + _2054;
    }
    float _2375;
    float _2377;
    float _2379;
    float _2381;
    float _2383;
    float _2385;
    if (_1697.y == 0u)
    {
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2316 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2315;
        float _2317 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2315;
        float _2318 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2315;
        uvec4 _2330 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2331 = _2330.x;
        uint _2342 = uint((float(_2330.y) * floor(float(uint(cbSceneParam._m0[85u].y * _596) / _2331))) + floor(float(uint(cbSceneParam._m0[85u].x * _595) / _2331)));
        float _2352 = (log2(_2318 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2353 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        uint _2356 = uint(isnan(14.0) ? _2353 : (isnan(_2353) ? 14.0 : min(_2353, 14.0)));
        uvec4 _2361 = texelFetch(g_lightClusterGridBuffer, int(((_2356 << 2u) + (_2342 << 6u)) >> 2u));
        uint _2362 = _2361.x;
        uint _2363 = _2330.z;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((((1u << ((_2363 >> 4u) & 15u)) + 4294967295u) & _2362) == 0u) || ((_2363 & 240u) == 0u))
        {
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
        }
        else
        {
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            float _2613 = 0.0;
            uint _2614 = 0u;
            uint _2623;
            bool _2624;
            for (;;)
            {
                _2623 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                _2624 = _2623 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2624)
                {
                    frontier_phi_61_pred = _2608;
                    frontier_phi_61_pred_1 = _2613;
                    frontier_phi_61_pred_2 = _2612;
                    frontier_phi_61_pred_3 = _2611;
                    frontier_phi_61_pred_4 = _2610;
                    frontier_phi_61_pred_5 = _2609;
                }
                else
                {
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    uint _2738;
                    _2732 = _2608;
                    _2733 = _2609;
                    _2734 = _2610;
                    _2735 = _2611;
                    _2736 = _2612;
                    _2737 = _2613;
                    _2738 = _2623;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    for (;;)
                    {
                        uint _2742 = uint(findLSB(_2738)) + (_2614 << 5u);
                        uint _2739 = (_2738 + 4294967295u) & _2738;
                        uint _2744 = _2742 * 48u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2744)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2744 + 3u)).x));
                        uint _2764 = (_2742 * 48u) + 4u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2783 = (_2742 * 48u) + 8u;
                        vec3 _2794 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x));
                        float _2798 = _2758.x - _2316;
                        float _2799 = _2758.y - _2317;
                        float _2800 = _2758.z - _2318;
                        float _2801 = dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800));
                        float _2804 = inversesqrt(_2801);
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2808 = dot(vec3(_617, _620, _623), vec3(_2805, _2806, _2807));
                        float _2813 = 1.0 - (_2801 * _2758.w);
                        float _4136 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2815 = sqrt(_2801) * _2777.w;
                        float _2818 = 1.39999997615814208984375 / (_2815 + 1.39999997615814208984375);
                        float _2819 = _2818 * _2818;
                        float _2822 = ((1.0 - _2819) * _2808) + _2819;
                        float _2825 = _2815 * _2815;
                        float _2829 = ((isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))) * _2814) / ((_2825 * 0.699999988079071044921875) + 1.0);
                        float _2833 = (-0.0) - _2316;
                        float _2834 = (-0.0) - _2317;
                        float _2835 = (-0.0) - _2318;
                        float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
                        float _2840 = _2839 * _2833;
                        float _2841 = _2839 * _2834;
                        float _2842 = _2839 * _2835;
                        float _2850 = exp2(log2(1.0 / ((_2825 * 3.5) + 5.0)) * 0.25);
                        float _2851 = 1.0 - _677;
                        float _2858 = sqrt(1.0 - ((1.0 - (_2851 * _2851)) * (1.0 - (_2850 * _2850))));
                        float _2859 = _2858 * _2858;
                        float _2860 = _2859 * _2859;
                        float _2861 = _2840 + _2805;
                        float _2862 = _2841 + _2806;
                        float _2863 = _2842 + _2807;
                        float _2867 = inversesqrt(dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863)));
                        float _2871 = dot(vec3(_617, _620, _623), vec3(_2840, _2841, _2842));
                        float _4152 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
                        float _2874 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2875 = dot(vec3(_617, _620, _623), vec3(_2867 * _2861, _2867 * _2862, _2867 * _2863));
                        float _4163 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2878 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2882 = ((_2878 * _2878) * (_2860 + (-1.0))) + 1.0;
                        float _2883 = _2818 * _2859;
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2808) + _2884;
                        float _4174 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2888 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2889 = 1.0 - _2859;
                        float _2899 = (0.5 / (((_2888 * ((_2874 * _2889) + _2859)) + 9.9999999392252902907785028219223e-09) + (((_2888 * _2889) + _2859) * _2874))) * _2888;
                        float _4185 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2910 = (((_2860 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_2882 * _2882) * ((_2825 * 2.1991131305694580078125) + 3.141590118408203125))) * _2814;
                        _2667 = (_2829 * _2777.x) + _2735;
                        _2668 = (_2829 * _2777.y) + _2736;
                        _2669 = (_2829 * _2777.z) + _2737;
                        _2664 = (_2910 * _2794.x) + _2732;
                        _2665 = (_2910 * _2794.y) + _2733;
                        _2666 = (_2910 * _2794.z) + _2734;
                        if (_2739 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2669;
                            _2738 = _2739;
                        }
                    }
                    frontier_phi_61_pred = _2664;
                    frontier_phi_61_pred_1 = _2669;
                    frontier_phi_61_pred_2 = _2668;
                    frontier_phi_61_pred_3 = _2667;
                    frontier_phi_61_pred_4 = _2666;
                    frontier_phi_61_pred_5 = _2665;
                }
                _2464 = frontier_phi_61_pred;
                _2474 = frontier_phi_61_pred_1;
                _2472 = frontier_phi_61_pred_2;
                _2470 = frontier_phi_61_pred_3;
                _2468 = frontier_phi_61_pred_4;
                _2466 = frontier_phi_61_pred_5;
                uint _2615 = _2614 + 1u;
                if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2608 = _2464;
                    _2609 = _2466;
                    _2610 = _2468;
                    _2611 = _2470;
                    _2612 = _2472;
                    _2613 = _2474;
                    _2614 = _2615;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
        }
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.z;
        uint _2480 = (_2478 >> 8u) & 15u;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((4294967295u << _2480) & _2362) == 0u)
        {
            _2576 = _2463;
            _2578 = _2465;
            _2580 = _2467;
            _2582 = _2469;
            _2584 = _2471;
            _2586 = _2473;
        }
        else
        {
            float _2601 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
            float _2602 = _2601 * _2316;
            float _2603 = _2601 * _2317;
            float _2604 = _2601 * _2318;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2480 < ((_2478 >> 12u) & 15u))
            {
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2587;
                float _2715 = _2463;
                float _2716 = _2465;
                float _2717 = _2467;
                float _2718 = _2469;
                float _2719 = _2471;
                float _2720 = _2473;
                uint _2721 = _2480;
                uint _2730;
                bool _2731;
                for (;;)
                {
                    _2730 = texelFetch(g_lightClassification, int((((_2356 << 5u) + (_2342 << 9u)) + (_2721 << 2u)) >> 2u)).x;
                    _2731 = _2730 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2731)
                    {
                        frontier_phi_67_pred = _2718;
                        frontier_phi_67_pred_1 = _2719;
                        frontier_phi_67_pred_2 = _2720;
                        frontier_phi_67_pred_3 = _2717;
                        frontier_phi_67_pred_4 = _2716;
                        frontier_phi_67_pred_5 = _2715;
                    }
                    else
                    {
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _2919;
                        float _2920;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _3213;
                        float _2928 = _2715;
                        float _2929 = _2716;
                        float _2930 = _2717;
                        float _2931 = _2718;
                        float _2932 = _2719;
                        float _2933 = _2720;
                        uint _2934 = _2730;
                        uint _2935;
                        vec4 _2960;
                        float _2961;
                        vec4 _2976;
                        vec3 _2988;
                        vec4 _3003;
                        vec4 _3018;
                        float _3064;
                        bool _3065;
                        for (;;)
                        {
                            uint _2945 = ((_2721 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2934));
                            _2935 = (_2934 + 4294967295u) & _2934;
                            uint _2947 = _2945 * 40u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2961 = _2960.w;
                            uint _2963 = (_2945 * 40u) + 4u;
                            _2976 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2963)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2963 + 3u)).x));
                            uint _2978 = (_2945 * 40u) + 8u;
                            _2988 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2978)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2978 + 2u)).x));
                            uint _2990 = (_2945 * 40u) + 16u;
                            _3003 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2990)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2990 + 3u)).x));
                            uint _3005 = (_2945 * 40u) + 20u;
                            _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3020 = (_2945 * 40u) + 24u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3039 = (_2945 * 40u) + 28u;
                            vec4 _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            _3064 = fma(_2318, _3052.z, fma(_2317, _3052.y, _3052.x * _2316)) + _3052.w;
                            _3065 = !((fma(_2318, _3033.z, fma(_2317, _3033.y, _3033.x * _2316)) + _3033.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3065)
                            {
                                float _3092 = _2960.x - _2316;
                                float _3093 = _2960.y - _2317;
                                float _3094 = _2960.z - _2318;
                                float _3095 = dot(vec3(_3092, _3093, _3094), vec3(_3092, _3093, _3094));
                                float _3098 = inversesqrt(_3095);
                                float _3099 = _3098 * _3092;
                                float _3100 = _3098 * _3093;
                                float _3101 = _3098 * _3094;
                                float _3105 = 1.0 - (_3095 / (_2961 * _2961));
                                float _4196 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3110 = sqrt(_3095) * _2976.w;
                                float _3112 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                                float _3113 = _3112 * _3112;
                                float _3116 = ((1.0 - _3113) * dot(vec3(_3099, _3100, _3101), vec3(_617, _620, _623))) + _3113;
                                float _3119 = _3110 * _3110;
                                float _3123 = (fma(_2318, _3003.z, fma(_2317, _3003.y, _3003.x * _2316)) + _3003.w) / _3064;
                                float _3124 = (fma(_2318, _3018.z, fma(_2317, _3018.y, _3018.x * _2316)) + _3018.w) / _3064;
                                float _3128 = 1.0 - dot(vec2(_3123, _3124), vec2(_3123, _3124));
                                float _4212 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3130 = _3129 * (((isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0))) * _3106) / ((_3119 * 0.699999988079071044921875) + 1.0));
                                float _3142 = exp2(log2(1.0 / ((_3119 * 3.5) + 5.0)) * 0.25);
                                float _3143 = 1.0 - _677;
                                float _3150 = sqrt(1.0 - ((1.0 - (_3143 * _3143)) * (1.0 - (_3142 * _3142))));
                                float _3151 = _3150 * _3150;
                                float _3152 = _3151 * _3151;
                                float _3153 = _3099 - _2602;
                                float _3154 = _3100 - _2603;
                                float _3155 = _3101 - _2604;
                                float _3159 = inversesqrt(dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155)));
                                float _3163 = dot(vec3(_617, _620, _623), vec3((-0.0) - _2602, (-0.0) - _2603, (-0.0) - _2604));
                                float _4223 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3166 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3167 = dot(vec3(_617, _620, _623), vec3(_3159 * _3153, _3159 * _3154, _3159 * _3155));
                                float _4234 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3174 = ((_3170 * _3170) * (_3152 + (-1.0))) + 1.0;
                                float _3175 = _3112 * _3151;
                                float _3176 = _3175 * _3175;
                                float _3182 = ((1.0 - _3176) * dot(vec3(_617, _620, _623), vec3(_3099, _3100, _3101))) + _3176;
                                float _4245 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3184 = 1.0 - _3151;
                                float _3194 = (0.5 / (((_3183 * ((_3166 * _3184) + _3151)) + 9.9999999392252902907785028219223e-09) + (((_3183 * _3184) + _3151) * _3166))) * _3183;
                                float _4256 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                                float _3204 = (_3129 * _3106) * (((_3152 * 3.1415927410125732421875) * (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0)))) / ((_3174 * _3174) * ((_3119 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3204 * _2988.x;
                                frontier_phi_73_pred_1 = _3204 * _2988.y;
                                frontier_phi_73_pred_2 = _3130 * _2976.z;
                                frontier_phi_73_pred_3 = _3130 * _2976.y;
                                frontier_phi_73_pred_4 = _3130 * _2976.x;
                                frontier_phi_73_pred_5 = _3204 * _2988.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_73_pred;
                            _3209 = frontier_phi_73_pred_1;
                            _3213 = frontier_phi_73_pred_2;
                            _3212 = frontier_phi_73_pred_3;
                            _3211 = frontier_phi_73_pred_4;
                            _3210 = frontier_phi_73_pred_5;
                            _2918 = _3211 + _2931;
                            _2919 = _3212 + _2932;
                            _2920 = _3213 + _2933;
                            _2915 = _3208 + _2928;
                            _2916 = _3209 + _2929;
                            _2917 = _3210 + _2930;
                            if (_2935 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2935;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2918;
                        frontier_phi_67_pred_1 = _2919;
                        frontier_phi_67_pred_2 = _2920;
                        frontier_phi_67_pred_3 = _2917;
                        frontier_phi_67_pred_4 = _2916;
                        frontier_phi_67_pred_5 = _2915;
                    }
                    _2583 = frontier_phi_67_pred;
                    _2585 = frontier_phi_67_pred_1;
                    _2587 = frontier_phi_67_pred_2;
                    _2581 = frontier_phi_67_pred_3;
                    _2579 = frontier_phi_67_pred_4;
                    _2577 = frontier_phi_67_pred_5;
                    uint _2722 = _2721 + 1u;
                    if (_2722 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2715 = _2577;
                        _2716 = _2579;
                        _2717 = _2581;
                        _2718 = _2583;
                        _2719 = _2585;
                        _2720 = _2587;
                        _2721 = _2722;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2585;
                frontier_phi_55_56_ladder_1 = _2587;
                frontier_phi_55_56_ladder_2 = _2583;
                frontier_phi_55_56_ladder_3 = _2581;
                frontier_phi_55_56_ladder_4 = _2579;
                frontier_phi_55_56_ladder_5 = _2577;
            }
            else
            {
                frontier_phi_55_56_ladder = _2471;
                frontier_phi_55_56_ladder_1 = _2473;
                frontier_phi_55_56_ladder_2 = _2469;
                frontier_phi_55_56_ladder_3 = _2467;
                frontier_phi_55_56_ladder_4 = _2465;
                frontier_phi_55_56_ladder_5 = _2463;
            }
            _2576 = frontier_phi_55_56_ladder_5;
            _2578 = frontier_phi_55_56_ladder_4;
            _2580 = frontier_phi_55_56_ladder_3;
            _2582 = frontier_phi_55_56_ladder_2;
            _2584 = frontier_phi_55_56_ladder;
            _2586 = frontier_phi_55_56_ladder_1;
        }
        float _2591 = isnan(1.0) ? _661 : (isnan(_661) ? 1.0 : min(_661, 1.0));
        _2375 = (_2591 * _2582) + _1830;
        _2377 = (_2591 * _2584) + _1832;
        _2379 = (_2591 * _2586) + _1834;
        _2381 = ((_2576 * 0.039999999105930328369140625) * _2591) + _2160;
        _2383 = ((_2578 * 0.039999999105930328369140625) * _2591) + _2162;
        _2385 = ((_2580 * 0.039999999105930328369140625) * _2591) + _2164;
    }
    else
    {
        _2375 = _1830;
        _2377 = _1832;
        _2379 = _1834;
        _2381 = _2160;
        _2383 = _2162;
        _2385 = _2164;
    }
    float _4272 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4283 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4294 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    uint _2405 = _250 + 6u;
    float _2413 = _595 / cbSceneParam._m0[86u].x;
    float _2414 = _596 / cbSceneParam._m0[86u].y;
    vec4 _2428 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, (log2((isnan(cbSceneParam._m0[77u].w) ? _529 : (isnan(_529) ? cbSceneParam._m0[77u].w : min(_529, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2430 = _2428.x;
    float _2431 = _2428.y;
    float _2432 = _2428.z;
    float _2433 = _2428.w;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_529 > cbSceneParam._m0[78u].w)
    {
        float _2488 = isnan(_529) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _529 : min(cbSceneParam._m0[80u].w, _529));
        float _2489 = _2488 / _529;
        float _2500 = _2489 * _580;
        float _2501 = _581 * _2489;
        float _2502 = (-0.0) - _2501;
        float _2504 = _2489 * _582;
        float _2506 = (cbSceneParam._m0[77u].w * _2502) / _2488;
        float _2507 = _2506 + cbSceneParam._m0[79u].w;
        float _2508 = cbSceneParam._m0[79u].w - _2501;
        float _2514 = sqrt(((_2500 * _2500) + (_2501 * _2501)) + (_2504 * _2504));
        float _2517 = (1.0 - (cbSceneParam._m0[77u].w / _2488)) * _2514;
        float _2522 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2524 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2677;
        if (abs((_2502 - _2506) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2677 = ((((_2507 > 0.0) ? exp2(_2522 * _2507) : (2.0 - exp2(_2524 * _2507))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2517;
        }
        else
        {
            float _2637 = 1.0 / cbSceneParam._m0[80u].x;
            float _2638 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : max(_2507, _2508));
            float _2639 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : min(_2507, _2508));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            _2677 = ((abs(_2514 / _2502) * cbSceneParam._m0[80u].y) * ((((_2648 - _2649) * 2.0) - ((exp2(_2522 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0)))) - exp2(_2522 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0))))) * _2637)) - ((exp2(_2524 * _2648) - exp2(_2524 * _2649)) * _2637))) + (_2517 * cbSceneParam._m0[80u].z);
        }
        vec4 _2679 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, 1.0), 0.0);
        float _2688 = exp2((_2677 * (-1.44269502162933349609375)) * (1.0 - _2679.w));
        float _2689 = log2(_2688);
        float _2705 = log2(_2433);
        _2526 = (exp2(_2705 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].x)) * _2679.x) / cbSceneParam._m0[78u].x)) + _2430;
        _2528 = (exp2(_2705 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].y)) * _2679.y) / cbSceneParam._m0[78u].y)) + _2431;
        _2530 = (exp2(_2705 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].z)) * _2679.z) / cbSceneParam._m0[78u].z)) + _2432;
        _2532 = _2688 * _2433;
    }
    else
    {
        _2526 = _2430;
        _2528 = _2431;
        _2530 = _2432;
        _2532 = _2433;
    }
    float _2544 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2545 = _2544 == 3.0;
    float _2546 = log2(_2532);
    float _2553 = exp2(_2546 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2375 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _661))) + ((_2381 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1467)) * cbPerFrame._m0[3u].x));
    float _2554 = exp2(_2546 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2377 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _661))) + ((_2383 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1467)) * cbPerFrame._m0[3u].x));
    float _2555 = exp2(_2546 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2379 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _661))) + ((_2385 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1467)) * cbPerFrame._m0[3u].x));
    float _2564 = (_2544 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2564 * (_2545 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2526)));
    SV_Target.y = _2564 * (_2545 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.z = _2564 * (_2545 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.w = cbInstanceData._m0[_2405].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2405].w;
}


