#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1178;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3765 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _470 = _468.x;
    float _471 = _468.y;
    float _472 = _468.z;
    float _481 = ((_451.z - _472) * _376) + _472;
    float _484 = ((((_451.x - _470) * _376) + _470) * 2.0) + (-1.0);
    float _485 = ((((_451.y - _471) * _376) + _471) * 2.0) + (-1.0);
    float _486 = dot(vec2(_484, _485), vec2(_484, _485));
    float _3776 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _491 = sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))));
    float _494 = _484 + ((((_424.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _495 = _485 + ((((_424.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _498 = fma(_491, _228, fma(_495, _235, _494 * _221));
    float _501 = fma(_491, _229, fma(_495, _236, _494 * _222));
    float _504 = fma(_491, _230, fma(_495, _237, _494 * _223));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _554 = _552.x;
    float _555 = 1.0 - _554;
    float _559 = ((_554 - _555) * cbMtdParam._m0[24u].z) + _555;
    float _561 = (cbMtdParam._m0[19u].x + dot(vec4(_508 * _498, _508 * _501, _508 * _504, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_559 * cbMtdParam._m0[21u].z);
    float _3787 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _577 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_559 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3798 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _582 = ((_562 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) * _578) + _383;
    float _583 = ((_562 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) * _578) + _384;
    float _584 = ((_562 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) * _578) + _385;
    float _589 = (((_424.z - _481) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _481;
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _609 = (_602.x * 2.0) + (-1.0);
    float _610 = (_602.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3809 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _620 = (((_602.z - _589) * _562) * _578) + _589;
    float _635 = (((cbMtdParam._m0[21u].x * _494) + ((_609 - _494) * _562)) * _578) + _494;
    float _636 = (((cbMtdParam._m0[21u].x * _495) + ((_610 - _495) * _562)) * _578) + _495;
    float _637 = (((sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) - _491) * _562) * _578) + _491;
    float _642 = cbMtdParam._m0[22u].x + _524.w;
    float _645 = fma(_637, _228, fma(_636, _235, _635 * _221));
    float _648 = fma(_637, _229, fma(_636, _236, _635 * _222));
    float _651 = fma(_637, _230, fma(_636, _237, _635 * _223));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    float _656 = _655 * _645;
    float _657 = _655 * _648;
    float _658 = _655 * _651;
    float _3820 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _659 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _3831 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3842 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3853 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3864 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _729 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _719);
    float _730 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _719);
    float _731 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _719);
    float _735 = inversesqrt(dot(vec3(_729, _730, _731), vec3(_729, _730, _731)));
    float _736 = _729 * _735;
    float _737 = _730 * _735;
    float _738 = _731 * _735;
    float _744 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _745 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _763 = fma(_658, cbSceneParam._m0[5u].z, fma(_657, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _656));
    float _766 = fma(_658, cbSceneParam._m0[6u].z, fma(_657, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _656));
    float _769 = fma(_658, cbSceneParam._m0[7u].z, fma(_657, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _656));
    uint _783 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _789 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_783].x;
    float _790 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_783].y;
    float _791 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_783].z;
    float _3875 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _792 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _793 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _3897 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _794 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    vec4 _803 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _744, cbSceneParam._m0[86u].y * _745));
    float _807 = ((isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * TEXCOORD_5.w) * _803.x;
    float _808 = dot(vec3(_656, _657, _658), vec3(_736, _737, _738));
    float _811 = _808 * 2.0;
    float _815 = (_811 * _656) - _736;
    float _816 = (_811 * _657) - _737;
    float _817 = (_811 * _658) - _738;
    float _821 = abs(dot(vec3(_736, _737, _738), vec3(_656, _657, _658)));
    float _3908 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _823 = sqrt(_659);
    float _836 = exp2((_823 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_823 * 3.0));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1177;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _902 = fma(_876, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _868));
        float _906 = fma(_876, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _868));
        float _910 = fma(_876, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _868));
        float _935 = _868 + _656;
        float _936 = _872 + _657;
        float _937 = _876 + _658;
        float _947 = fma(_937, cbModelParam._m0[26u].z, fma(_936, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _935)) - _902;
        float _948 = fma(_937, cbModelParam._m0[27u].z, fma(_936, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _935)) - _906;
        float _949 = fma(_937, cbModelParam._m0[28u].z, fma(_936, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _935)) - _910;
        float _953 = inversesqrt(dot(vec3(_947, _948, _949), vec3(_947, _948, _949)));
        float _966 = ((_953 * _947) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_902 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_953 * _948) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_906 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _968 = ((_953 * _949) / cbModelParam._m0[34u].z) + ((((((_910 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_966, _967, _968), 0.0);
        float _1005 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_971.x + (-0.5));
        float _1007 = _1005 * (_971.y + (-0.5));
        float _1008 = _1005 * (_971.z + (-0.5));
        float _1015 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_978.x + (-0.5));
        float _1017 = _1015 * (_978.y + (-0.5));
        float _1018 = _1015 * (_978.z + (-0.5));
        float _1025 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_985.x + (-0.5));
        float _1027 = _1025 * (_985.y + (-0.5));
        float _1028 = _1025 * (_985.z + (-0.5));
        float _1035 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_992.x + (-0.5));
        float _1037 = _1035 * (_992.y + (-0.5));
        float _1038 = _1035 * (_992.z + (-0.5));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = _1006 * 0.5;
        float _1043 = _1016 * 0.5;
        float _1044 = _1026 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1059 = (dot(vec3(_656, _657, _658), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1069 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3956 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1071 + 1.0))) + _1076) * _1039;
        float _1086 = _1007 * 0.5;
        float _1087 = _1017 * 0.5;
        float _1088 = _1027 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_656, _657, _658), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3989 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1113 + 1.0))) + _1118) * _1040;
        float _1128 = _1008 * 0.5;
        float _1129 = _1018 * 0.5;
        float _1130 = _1028 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(_656, _657, _658), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _4022 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1155 + 1.0))) + _1160) * _1041;
        _1177 = _1008;
        _1179 = _1007;
        _1180 = _1006;
        _1181 = _1018;
        _1182 = _1017;
        _1183 = _1016;
        _1184 = _1028;
        _1185 = _1027;
        _1186 = _1026;
        _1187 = _1041;
        _1188 = _1040;
        _1189 = _1039;
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1191 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _1178;
        _1179 = _1178;
        _1180 = _1178;
        _1181 = _1178;
        _1182 = _1178;
        _1183 = _1178;
        _1184 = _1178;
        _1185 = _1178;
        _1186 = _1178;
        _1187 = _1178;
        _1188 = _1178;
        _1189 = _1178;
        _1190 = 0.0;
        _1191 = 0.0;
        _1192 = 0.0;
    }
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1217 = fma(_876, cbModelParam._m0[30u].z, fma(_872, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _868));
        float _1221 = fma(_876, cbModelParam._m0[31u].z, fma(_872, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _868));
        float _1225 = fma(_876, cbModelParam._m0[32u].z, fma(_872, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _868));
        float _1248 = _868 + _656;
        float _1249 = _872 + _657;
        float _1250 = _876 + _658;
        float _1260 = fma(_1250, cbModelParam._m0[30u].z, fma(_1249, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1248)) - _1217;
        float _1261 = fma(_1250, cbModelParam._m0[31u].z, fma(_1249, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1248)) - _1221;
        float _1262 = fma(_1250, cbModelParam._m0[32u].z, fma(_1249, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1248)) - _1225;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1217 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1221 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[35u].z) + ((((((_1225 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1316 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1283.x + (-0.5));
        float _1318 = _1316 * (_1283.y + (-0.5));
        float _1319 = _1316 * (_1283.z + (-0.5));
        float _1326 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1290.x + (-0.5));
        float _1328 = _1326 * (_1290.y + (-0.5));
        float _1329 = _1326 * (_1290.z + (-0.5));
        float _1336 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1297.x + (-0.5));
        float _1338 = _1336 * (_1297.y + (-0.5));
        float _1339 = _1336 * (_1297.z + (-0.5));
        float _1346 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1304.x + (-0.5));
        float _1348 = _1346 * (_1304.y + (-0.5));
        float _1349 = _1346 * (_1304.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_656, _657, _658), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4085 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1380 + 1.0))) + _1385) * _1350;
        float _1395 = _1318 * 0.5;
        float _1396 = _1328 * 0.5;
        float _1397 = _1338 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_656, _657, _658), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4118 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1422 + 1.0))) + _1427) * _1351;
        float _1437 = _1319 * 0.5;
        float _1438 = _1329 * 0.5;
        float _1439 = _1339 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_656, _657, _658), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4151 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1464 + 1.0))) + _1469) * _1352;
        _1486 = _1319;
        _1487 = _1318;
        _1488 = _1317;
        _1489 = _1329;
        _1490 = _1328;
        _1491 = _1327;
        _1492 = _1339;
        _1493 = _1338;
        _1494 = _1337;
        _1495 = _1352;
        _1496 = _1351;
        _1497 = _1350;
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1178;
        _1487 = _1178;
        _1488 = _1178;
        _1489 = _1178;
        _1490 = _1178;
        _1491 = _1178;
        _1492 = _1178;
        _1493 = _1178;
        _1494 = _1178;
        _1495 = _1178;
        _1496 = _1178;
        _1497 = _1178;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1190)) + _1190;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1191)) + _1191;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1192)) + _1192;
    float _1533 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1510));
    float _1554 = _815 * 0.5;
    float _1555 = _816 * 0.5;
    float _1556 = _817 * 0.5;
    float _1557 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1560 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1563 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1597;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1570 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1177, _1181, _1184, _1187));
        float _1574 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1179, _1182, _1185, _1188));
        float _1578 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1180, _1183, _1186, _1189));
        float _1585 = dot(vec4(cbModelParam._m0[39u]), vec4(_1554, _1555, _1556, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1608;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1599 = dot(vec4(cbModelParam._m0[40u]), vec4(_1554, _1555, _1556, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1612 = (_1608 * cbModelParam._m0[1u].x) + (_1597 * (1.0 - cbModelParam._m0[1u].x));
    float _1622 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _659);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1622 : min(cbModelParam._m0[25u].z, _1622));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1670 = fma(_876, cbModelParam._m0[13u].z, fma(_872, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _868)) + cbModelParam._m0[13u].w;
        float _1674 = fma(_876, cbModelParam._m0[14u].z, fma(_872, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _868)) + cbModelParam._m0[14u].w;
        float _1678 = fma(_876, cbModelParam._m0[15u].z, fma(_872, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _868)) + cbModelParam._m0[15u].w;
        float _1681 = fma(_817, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815));
        float _1684 = fma(_817, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815));
        float _1687 = fma(_817, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815));
        float _1715;
        if (_1681 > 0.0)
        {
            _1715 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1715 = frontier_phi_14_12_ladder;
        }
        float _1884;
        if (_1684 > 0.0)
        {
            _1884 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1884 = frontier_phi_23_19_ladder;
        }
        float _2179;
        if (_1687 > 0.0)
        {
            _2179 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2179 = frontier_phi_35_30_ladder;
        }
        float _2181 = isnan(_1884) ? _1715 : (isnan(_1715) ? _1884 : min(_1715, _1884));
        float _2182 = isnan(_2179) ? _2181 : (isnan(_2181) ? _2179 : min(_2181, _2179));
        float _2186 = (_2182 * _1681) + _1670;
        float _2187 = (_2182 * _1684) + _1674;
        float _2188 = (_2182 * _1687) + _1678;
        float _2189 = _2182 * 9.9999997473787516355514526367188e-05;
        float _2191 = (-1.0) - _2189;
        float _2193 = _2189 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2188 > _2193) || ((_2188 < _2191) || ((_2187 > _2193) || ((_2187 < _2191) || ((_2186 < _2191) || (_2186 > _2193))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2188, cbModelParam._m0[9u].z, fma(_2187, cbModelParam._m0[9u].y, _2186 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2188, cbModelParam._m0[10u].z, fma(_2187, cbModelParam._m0[10u].y, _2186 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2188, cbModelParam._m0[11u].z, fma(_2187, cbModelParam._m0[11u].y, _2186 * cbModelParam._m0[11u].x))), _1623);
            frontier_phi_13_35_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1703 = frontier_phi_13_35_ladder_2;
        _1705 = frontier_phi_13_35_ladder_1;
        _1707 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_815, _816, _817), _1623);
        _1703 = _1691.x * cbModelParam._m0[1u].y;
        _1705 = _1691.y * cbModelParam._m0[1u].y;
        _1707 = _1691.z * cbModelParam._m0[1u].y;
    }
    float _1711 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _659);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1711 : min(cbModelParam._m0[25u].w, _1711));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_876, cbModelParam._m0[21u].z, fma(_872, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _868)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_876, cbModelParam._m0[22u].z, fma(_872, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _868)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_876, cbModelParam._m0[23u].z, fma(_872, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _868)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_817, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815));
        float _1779 = fma(_817, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815));
        float _1782 = fma(_817, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815));
        float _1889;
        if (_1776 > 0.0)
        {
            _1889 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1889 = frontier_phi_25_21_ladder;
        }
        float _2206;
        if (_1779 > 0.0)
        {
            _2206 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2206 = frontier_phi_37_32_ladder;
        }
        float _2533;
        if (_1782 > 0.0)
        {
            _2533 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2533 = frontier_phi_47_44_ladder;
        }
        float _2535 = isnan(_2206) ? _1889 : (isnan(_1889) ? _2206 : min(_1889, _2206));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1776) + _1765;
        float _2541 = (_2536 * _1779) + _1769;
        float _2542 = (_2536 * _1782) + _1773;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1712);
            frontier_phi_22_47_ladder = _2660.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2660.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2660.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_22_47_ladder_2;
        _1803 = frontier_phi_22_47_ladder_1;
        _1805 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_815, _816, _817), _1712);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1817 = ((((1.0 - _836) * ((_823 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_836 * _823)) * _807;
    float _1818 = _1817 * ((cbModelParam._m0[1u].w * (_1801 - _1703)) + _1703);
    float _1819 = _1817 * ((cbModelParam._m0[1u].w * (_1803 - _1705)) + _1705);
    float _1820 = _1817 * ((cbModelParam._m0[1u].w * (_1805 - _1707)) + _1707);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1876 = _1863 / _1875;
    float _1877 = _1867 / _1875;
    float _1878 = _1871 / _1875;
    float _2025;
    float _2026;
    float _2027;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1905 = ((uint(_1878 > cbSceneParam._m0[59u].y) + uint(_1878 > cbSceneParam._m0[59u].x)) + uint(_1878 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1906 = _1905 + 43u;
        uint _1914 = _1905 + 44u;
        uint _1922 = _1905 + 45u;
        uint _1930 = _1905 + 46u;
        float _1941 = fma(_1875, cbSceneParam._m0[_1906].w, fma(_1871, cbSceneParam._m0[_1906].z, fma(_1867, cbSceneParam._m0[_1906].y, _1863 * cbSceneParam._m0[_1906].x)));
        float _1945 = fma(_1875, cbSceneParam._m0[_1914].w, fma(_1871, cbSceneParam._m0[_1914].z, fma(_1867, cbSceneParam._m0[_1914].y, _1863 * cbSceneParam._m0[_1914].x)));
        float _1953 = fma(_1875, cbSceneParam._m0[_1930].w, fma(_1871, cbSceneParam._m0[_1930].z, fma(_1867, cbSceneParam._m0[_1930].y, _1863 * cbSceneParam._m0[_1930].x)));
        float _1958 = cbSceneParam._m0[33u].z * _1953;
        float _1960 = cbSceneParam._m0[33u].w * _1953;
        float _1963 = fma(_1875, cbSceneParam._m0[_1922].w, fma(_1871, cbSceneParam._m0[_1922].z, fma(_1867, cbSceneParam._m0[_1922].y, _1863 * cbSceneParam._m0[_1922].x))) / _1953;
        float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
        float _4277 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2018 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1958 + _1941) / _1953, (_1960 + _1945) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1960 + _1941) / _1953, (_1945 - _1958) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1958) / _1953, (_1945 - _1960) / _1953), _1963), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 - _1960) / _1953, (_1958 + _1945) / _1953), _1963), 0.0)).x), vec4(0.25)));
        _2025 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
        _2026 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
        _2027 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2025 = 1.0;
        _2026 = 1.0;
        _2027 = 1.0;
    }
    float _2091;
    float _2093;
    float _2095;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2079 = fma(_1875, cbSceneParam._m0[63u].w, fma(_1871, cbSceneParam._m0[63u].z, fma(_1867, cbSceneParam._m0[63u].y, _1863 * cbSceneParam._m0[63u].x)));
        float _2080 = fma(_1875, cbSceneParam._m0[60u].w, fma(_1871, cbSceneParam._m0[60u].z, fma(_1867, cbSceneParam._m0[60u].y, _1863 * cbSceneParam._m0[60u].x))) / _2079;
        float _2081 = fma(_1875, cbSceneParam._m0[61u].w, fma(_1871, cbSceneParam._m0[61u].z, fma(_1867, cbSceneParam._m0[61u].y, _1863 * cbSceneParam._m0[61u].x))) / _2079;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2080 >= cbSceneParam._m0[64u].x) && (_2081 >= cbSceneParam._m0[64u].y)) && (_2080 <= cbSceneParam._m0[64u].z)) && (_2081 <= cbSceneParam._m0[64u].w))
        {
            float _2219 = fma(_1875, cbSceneParam._m0[62u].w, fma(_1871, cbSceneParam._m0[62u].z, fma(_1867, cbSceneParam._m0[62u].y, _1863 * cbSceneParam._m0[62u].x))) / _2079;
            float _2223 = isnan(cbSceneParam._m0[41u].w) ? _2219 : (isnan(_2219) ? cbSceneParam._m0[41u].w : max(_2219, cbSceneParam._m0[41u].w));
            float _2266 = (cbSceneParam._m0[33u].x - sqrt(((_1877 * _1877) + (_1876 * _1876)) + (_1878 * _1878))) * cbSceneParam._m0[33u].y;
            float _4293 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
            float _2273 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2080, cbSceneParam._m0[33u].w + _2081), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2080, _2081 - cbSceneParam._m0[33u].z), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].z, _2081 - cbSceneParam._m0[33u].w), _2223), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2080 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2081), _2223), 0.0)).x), vec4(0.25)));
            float _2277 = 1.0 - (_2273 * cbSceneParam._m0[34u].x);
            float _2278 = 1.0 - (_2273 * cbSceneParam._m0[34u].y);
            float _2279 = 1.0 - (_2273 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2279) ? _2027 : (isnan(_2027) ? _2279 : min(_2027, _2279));
            frontier_phi_34_33_ladder_1 = isnan(_2278) ? _2026 : (isnan(_2026) ? _2278 : min(_2026, _2278));
            frontier_phi_34_33_ladder_2 = isnan(_2277) ? _2025 : (isnan(_2025) ? _2277 : min(_2025, _2277));
        }
        else
        {
            frontier_phi_34_33_ladder = _2027;
            frontier_phi_34_33_ladder_1 = _2026;
            frontier_phi_34_33_ladder_2 = _2025;
        }
        _2091 = frontier_phi_34_33_ladder_2;
        _2093 = frontier_phi_34_33_ladder_1;
        _2095 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2091 = _2025;
        _2093 = _2026;
        _2095 = _2027;
    }
    uvec4 _2100 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2102 = _2100.x * 14u;
    uint _2103 = _2102 + 13u;
    float _2110 = _807 + (-1.0);
    float _2115 = (cbLight._m0[_2103].x * _2110) + 1.0;
    float _2116 = (cbLight._m0[_2103].y * _2110) + 1.0;
    float _2117 = (cbLight._m0[_2103].z * _2110) + 1.0;
    float _2118 = (cbLight._m0[_2103].w * _2110) + 1.0;
    uint _2119 = _2102 + 5u;
    float _2125 = isnan(1.0) ? _2116 : (isnan(_2116) ? 1.0 : min(_2116, 1.0));
    uint _2129 = _2102 + 4u;
    float _2138 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2142 = _2102 | 1u;
    float _2153 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_656, _657, _658));
    float _2156 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_656, _657, _658));
    float _4329 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _4340 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2161 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2163 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2170 = ((cbLight._m0[_2119].x * _2125) * _2163) + (((cbLight._m0[_2129].x * _2091) * _2138) * _2161);
    float _2171 = ((_2125 * cbLight._m0[_2119].y) * _2163) + (((cbLight._m0[_2129].y * _2093) * _2138) * _2161);
    float _2172 = ((_2125 * cbLight._m0[_2119].z) * _2163) + (((cbLight._m0[_2129].z * _2095) * _2138) * _2161);
    uvec4 _2176 = floatBitsToUint(cbLight._m0[_2102 + 12u]);
    bool _2178 = _2176.x == 0u;
    float _2280;
    float _2282;
    float _2284;
    if (_2178)
    {
        _2280 = _2170;
        _2282 = _2171;
        _2284 = _2172;
    }
    else
    {
        uint _2288 = _2102 + 6u;
        float _2304 = (dot(vec3(cbLight._m0[_2102 + 2u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2305 = _2304 * _2304;
        float _4351 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2306 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2307 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2280 = (((cbLight._m0[_2288].x * 0.3183098733425140380859375) * _2306) * _2307) + _2170;
        _2282 = (((cbLight._m0[_2288].y * 0.3183098733425140380859375) * _2306) * _2307) + _2171;
        _2284 = (((cbLight._m0[_2288].z * 0.3183098733425140380859375) * _2306) * _2307) + _2172;
    }
    bool _2287 = _2176.y == 0u;
    float _2342;
    float _2344;
    float _2346;
    if (_2287)
    {
        _2342 = _2280;
        _2344 = _2282;
        _2346 = _2284;
    }
    else
    {
        uint _2504 = _2102 + 7u;
        float _2520 = (dot(vec3(cbLight._m0[_2102 + 3u].xyz), vec3(_656, _657, _658)) * 0.5) + 0.5;
        float _2521 = _2520 * _2520;
        float _4367 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2522 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2523 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2342 = (((cbLight._m0[_2504].x * 0.3183098733425140380859375) * _2522) * _2523) + _2280;
        _2344 = (((cbLight._m0[_2504].y * 0.3183098733425140380859375) * _2522) * _2523) + _2282;
        _2346 = (((cbLight._m0[_2504].z * 0.3183098733425140380859375) * _2522) * _2523) + _2284;
    }
    uint _2349 = _2102 + 8u;
    float _2362 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _659) * 0.949999988079071044921875);
    float _2363 = _2362 * _2362;
    float _2364 = cbLight._m0[_2102].x + _736;
    float _2365 = cbLight._m0[_2102].y + _737;
    float _2366 = cbLight._m0[_2102].z + _738;
    float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
    float _2371 = _2370 * _2364;
    float _2372 = _2370 * _2365;
    float _2373 = _2370 * _2366;
    float _2374 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2102].xyz));
    float _4383 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2378 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2379 = dot(vec3(_656, _657, _658), vec3(_2371, _2372, _2373));
    float _4405 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2383 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2371, _2372, _2373));
    float _4416 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2387 = _2363 * _2363;
    float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
    float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2403 = 1.0 - _2363;
    float _2414 = (0.5 / (((_2378 * ((_2377 * _2403) + _2363)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2403) + _2363) * _2377))) * _2377;
    float _4427 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2416 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
    uint _2430 = _2102 + 9u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _659) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2142].x + _736;
    float _2444 = cbLight._m0[_2142].y + _737;
    float _2445 = cbLight._m0[_2142].z + _738;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2142].xyz));
    float _4438 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2457 = dot(vec3(_656, _657, _658), vec3(_2450, _2451, _2452));
    float _4449 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2461 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2450, _2451, _2452));
    float _4460 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2465 = _2442 * _2442;
    float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
    float _2478 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2479 = 1.0 - _2442;
    float _2489 = (0.5 / (((_2378 * ((_2456 * _2479) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2479) + _2442) * _2456))) * _2456;
    float _4471 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2491 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
    float _2501 = (((_2478 * cbLight._m0[_2430].x) * _2491) * _2125) + ((((cbLight._m0[_2349].x * _2091) * _2402) * _2416) * _2138);
    float _2502 = (((_2478 * cbLight._m0[_2430].y) * _2491) * _2125) + ((((cbLight._m0[_2349].y * _2093) * _2402) * _2416) * _2138);
    float _2503 = (((_2478 * cbLight._m0[_2430].z) * _2491) * _2125) + ((((cbLight._m0[_2349].z * _2095) * _2402) * _2416) * _2138);
    float _2559;
    float _2561;
    float _2563;
    if (_2178)
    {
        _2559 = _2501;
        _2561 = _2502;
        _2563 = _2503;
    }
    else
    {
        uint _2565 = _2102 + 2u;
        uint _2569 = _2102 + 10u;
        float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _659) * 0.949999988079071044921875);
        float _2584 = _2583 * _2583;
        float _2585 = cbLight._m0[_2565].x + _736;
        float _2586 = cbLight._m0[_2565].y + _737;
        float _2587 = cbLight._m0[_2565].z + _738;
        float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
        float _2592 = _2591 * _2585;
        float _2593 = _2591 * _2586;
        float _2594 = _2591 * _2587;
        float _2595 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2565].xyz));
        float _4482 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2599 = dot(vec3(_656, _657, _658), vec3(_2592, _2593, _2594));
        float _4493 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2603 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2592, _2593, _2594));
        float _4504 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2607 = _2584 * _2584;
        float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
        float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2621 = 1.0 - _2584;
        float _2631 = (0.5 / (((_2378 * ((_2598 * _2621) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2621) + _2584) * _2598))) * _2598;
        float _4515 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2117 : (isnan(_2117) ? 1.0 : min(_2117, 1.0));
        _2559 = (((_2620 * cbLight._m0[_2569].x) * _2633) * _2634) + _2501;
        _2561 = (((_2620 * cbLight._m0[_2569].y) * _2633) * _2634) + _2502;
        _2563 = (((_2620 * cbLight._m0[_2569].z) * _2633) * _2634) + _2503;
    }
    float _2665;
    float _2667;
    float _2669;
    if (_2287)
    {
        _2665 = _2559;
        _2667 = _2561;
        _2669 = _2563;
    }
    else
    {
        uint _2676 = _2102 + 3u;
        uint _2680 = _2102 + 11u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _659) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _736;
        float _2697 = cbLight._m0[_2676].y + _737;
        float _2698 = cbLight._m0[_2676].z + _738;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_656, _657, _658), vec3(cbLight._m0[_2676].xyz));
        float _4531 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2710 = dot(vec3(_656, _657, _658), vec3(_2703, _2704, _2705));
        float _4542 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4553 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2731 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2732 = 1.0 - _2695;
        float _2742 = (0.5 / (((_2378 * ((_2709 * _2732) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2378 * _2732) + _2695) * _2709))) * _2709;
        float _4564 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2744 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2745 = isnan(1.0) ? _2118 : (isnan(_2118) ? 1.0 : min(_2118, 1.0));
        _2665 = (((_2731 * cbLight._m0[_2680].x) * _2744) * _2745) + _2559;
        _2667 = (((_2731 * cbLight._m0[_2680].y) * _2744) * _2745) + _2561;
        _2669 = (((_2731 * cbLight._m0[_2680].z) * _2744) * _2745) + _2563;
    }
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_2100.y == 0u)
    {
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.x;
        uint _2778 = uint((float(_2766.y) * floor(float(uint(cbSceneParam._m0[85u].y * _745) / _2767))) + floor(float(uint(cbSceneParam._m0[85u].x * _744) / _2767)));
        float _2788 = (log2(_1878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2789 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        uint _2792 = uint(isnan(14.0) ? _2789 : (isnan(_2789) ? 14.0 : min(_2789, 14.0)));
        uvec4 _2797 = texelFetch(g_lightClusterGridBuffer, int(((_2792 << 2u) + (_2778 << 6u)) >> 2u));
        uint _2798 = _2797.x;
        uint _2799 = _2766.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2799 >> 4u) & 15u)) + 4294967295u) & _2798) == 0u) || ((_2799 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3039)
                {
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3027;
                    frontier_phi_66_pred_2 = _3026;
                    frontier_phi_66_pred_3 = _3025;
                    frontier_phi_66_pred_4 = _3024;
                    frontier_phi_66_pred_5 = _3023;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3038;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3029 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _1876;
                        float _3214 = _3173.y - _1877;
                        float _3215 = _3173.z - _1878;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_763, _766, _769), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4590 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _1876;
                        float _3249 = (-0.0) - _1877;
                        float _3250 = (-0.0) - _1878;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3264 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3265 = 1.0 - _823;
                        float _3272 = sqrt(1.0 - ((1.0 - (_3265 * _3265)) * (1.0 - (_3264 * _3264))));
                        float _3273 = _3272 * _3272;
                        float _3274 = _3273 * _3273;
                        float _3275 = _3255 + _3220;
                        float _3276 = _3256 + _3221;
                        float _3277 = _3257 + _3222;
                        float _3281 = inversesqrt(dot(vec3(_3275, _3276, _3277), vec3(_3275, _3276, _3277)));
                        float _3285 = dot(vec3(_763, _766, _769), vec3(_3255, _3256, _3257));
                        float _4606 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3289 = dot(vec3(_763, _766, _769), vec3(_3281 * _3275, _3281 * _3276, _3281 * _3277));
                        float _4617 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3296 = ((_3292 * _3292) * (_3274 + (-1.0))) + 1.0;
                        float _3297 = _3233 * _3273;
                        float _3298 = _3297 * _3297;
                        float _3301 = ((1.0 - _3298) * _3223) + _3298;
                        float _4628 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                        float _3302 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3303 = 1.0 - _3273;
                        float _3313 = (0.5 / (((_3302 * ((_3288 * _3303) + _3273)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3273) * _3288))) * _3302;
                        float _4639 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3324 = (((_3274 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3296 * _3296) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3082 = (_3244 * _3192.x) + _3150;
                        _3083 = (_3244 * _3192.y) + _3151;
                        _3084 = (_3244 * _3192.z) + _3152;
                        _3079 = (_3324 * _3209.x) + _3147;
                        _3080 = (_3324 * _3209.y) + _3148;
                        _3081 = (_3324 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_66_pred = _3084;
                    frontier_phi_66_pred_1 = _3083;
                    frontier_phi_66_pred_2 = _3082;
                    frontier_phi_66_pred_3 = _3081;
                    frontier_phi_66_pred_4 = _3080;
                    frontier_phi_66_pred_5 = _3079;
                }
                _2889 = frontier_phi_66_pred;
                _2887 = frontier_phi_66_pred_1;
                _2885 = frontier_phi_66_pred_2;
                _2883 = frontier_phi_66_pred_3;
                _2881 = frontier_phi_66_pred_4;
                _2879 = frontier_phi_66_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2879;
                    _3024 = _2881;
                    _3025 = _2883;
                    _3026 = _2885;
                    _3027 = _2887;
                    _3028 = _2889;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2895) & _2798) == 0u)
        {
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
            float _3017 = _3016 * _1876;
            float _3018 = _3016 * _1877;
            float _3019 = _3016 * _1878;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3130 = _2878;
                float _3131 = _2880;
                float _3132 = _2882;
                float _3133 = _2884;
                float _3134 = _2886;
                float _3135 = _2888;
                uint _3136 = _2895;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3146)
                    {
                        frontier_phi_72_pred = _3135;
                        frontier_phi_72_pred_1 = _3134;
                        frontier_phi_72_pred_2 = _3133;
                        frontier_phi_72_pred_3 = _3132;
                        frontier_phi_72_pred_4 = _3131;
                        frontier_phi_72_pred_5 = _3130;
                    }
                    else
                    {
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        float _3345 = _3133;
                        float _3346 = _3134;
                        float _3347 = _3135;
                        uint _3348 = _3145;
                        uint _3349;
                        vec4 _3374;
                        float _3375;
                        vec4 _3390;
                        vec3 _3402;
                        vec4 _3417;
                        vec4 _3432;
                        float _3478;
                        bool _3479;
                        for (;;)
                        {
                            uint _3359 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3348));
                            _3349 = (_3348 + 4294967295u) & _3348;
                            uint _3361 = _3359 * 40u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3375 = _3374.w;
                            uint _3377 = (_3359 * 40u) + 4u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3359 * 40u) + 8u;
                            _3402 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x));
                            uint _3404 = (_3359 * 40u) + 16u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3359 * 40u) + 20u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3359 * 40u) + 24u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3453 = (_3359 * 40u) + 28u;
                            vec4 _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            _3478 = fma(_1878, _3466.z, fma(_1877, _3466.y, _3466.x * _1876)) + _3466.w;
                            _3479 = !((fma(_1878, _3447.z, fma(_1877, _3447.y, _3447.x * _1876)) + _3447.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3479)
                            {
                                float _3506 = _3374.x - _1876;
                                float _3507 = _3374.y - _1877;
                                float _3508 = _3374.z - _1878;
                                float _3509 = dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508));
                                float _3512 = inversesqrt(_3509);
                                float _3513 = _3512 * _3506;
                                float _3514 = _3512 * _3507;
                                float _3515 = _3512 * _3508;
                                float _3519 = 1.0 - (_3509 / (_3375 * _3375));
                                float _4650 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3520 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3524 = sqrt(_3509) * _3390.w;
                                float _3526 = 1.39999997615814208984375 / (_3524 + 1.39999997615814208984375);
                                float _3527 = _3526 * _3526;
                                float _3530 = ((1.0 - _3527) * dot(vec3(_3513, _3514, _3515), vec3(_763, _766, _769))) + _3527;
                                float _3533 = _3524 * _3524;
                                float _3537 = (fma(_1878, _3417.z, fma(_1877, _3417.y, _3417.x * _1876)) + _3417.w) / _3478;
                                float _3538 = (fma(_1878, _3432.z, fma(_1877, _3432.y, _3432.x * _1876)) + _3432.w) / _3478;
                                float _3542 = 1.0 - dot(vec2(_3537, _3538), vec2(_3537, _3538));
                                float _4666 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3543 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3544 = _3543 * (((isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0))) * _3520) / ((_3533 * 0.699999988079071044921875) + 1.0));
                                float _3556 = exp2(log2(1.0 / ((_3533 * 3.5) + 5.0)) * 0.25);
                                float _3557 = 1.0 - _823;
                                float _3564 = sqrt(1.0 - ((1.0 - (_3557 * _3557)) * (1.0 - (_3556 * _3556))));
                                float _3565 = _3564 * _3564;
                                float _3566 = _3565 * _3565;
                                float _3567 = _3513 - _3017;
                                float _3568 = _3514 - _3018;
                                float _3569 = _3515 - _3019;
                                float _3573 = inversesqrt(dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569)));
                                float _3577 = dot(vec3(_763, _766, _769), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4677 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3581 = dot(vec3(_763, _766, _769), vec3(_3573 * _3567, _3573 * _3568, _3573 * _3569));
                                float _4688 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3588 = ((_3584 * _3584) * (_3566 + (-1.0))) + 1.0;
                                float _3589 = _3526 * _3565;
                                float _3590 = _3589 * _3589;
                                float _3596 = ((1.0 - _3590) * dot(vec3(_763, _766, _769), vec3(_3513, _3514, _3515))) + _3590;
                                float _4699 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3597 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3598 = 1.0 - _3565;
                                float _3608 = (0.5 / (((_3597 * ((_3580 * _3598) + _3565)) + 9.9999999392252902907785028219223e-09) + (((_3597 * _3598) + _3565) * _3580))) * _3597;
                                float _4710 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3618 = (_3543 * _3520) * (((_3566 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3588 * _3588) * ((_3533 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3544 * _3390.y;
                                frontier_phi_78_pred_1 = _3544 * _3390.x;
                                frontier_phi_78_pred_2 = _3618 * _3402.z;
                                frontier_phi_78_pred_3 = _3618 * _3402.y;
                                frontier_phi_78_pred_4 = _3618 * _3402.x;
                                frontier_phi_78_pred_5 = _3544 * _3390.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3626 = frontier_phi_78_pred;
                            _3625 = frontier_phi_78_pred_1;
                            _3624 = frontier_phi_78_pred_2;
                            _3623 = frontier_phi_78_pred_3;
                            _3622 = frontier_phi_78_pred_4;
                            _3627 = frontier_phi_78_pred_5;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            if (_3349 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3349;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3334;
                        frontier_phi_72_pred_1 = _3333;
                        frontier_phi_72_pred_2 = _3332;
                        frontier_phi_72_pred_3 = _3331;
                        frontier_phi_72_pred_4 = _3330;
                        frontier_phi_72_pred_5 = _3329;
                    }
                    _3002 = frontier_phi_72_pred;
                    _3000 = frontier_phi_72_pred_1;
                    _2998 = frontier_phi_72_pred_2;
                    _2996 = frontier_phi_72_pred_3;
                    _2994 = frontier_phi_72_pred_4;
                    _2992 = frontier_phi_72_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2992;
                        _3131 = _2994;
                        _3132 = _2996;
                        _3133 = _2998;
                        _3134 = _3000;
                        _3135 = _3002;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3002;
                frontier_phi_60_61_ladder_1 = _3000;
                frontier_phi_60_61_ladder_2 = _2996;
                frontier_phi_60_61_ladder_3 = _2994;
                frontier_phi_60_61_ladder_4 = _2992;
                frontier_phi_60_61_ladder_5 = _2998;
            }
            else
            {
                frontier_phi_60_61_ladder = _2888;
                frontier_phi_60_61_ladder_1 = _2886;
                frontier_phi_60_61_ladder_2 = _2882;
                frontier_phi_60_61_ladder_3 = _2880;
                frontier_phi_60_61_ladder_4 = _2878;
                frontier_phi_60_61_ladder_5 = _2884;
            }
            _2991 = frontier_phi_60_61_ladder_4;
            _2993 = frontier_phi_60_61_ladder_3;
            _2995 = frontier_phi_60_61_ladder_2;
            _2997 = frontier_phi_60_61_ladder_5;
            _2999 = frontier_phi_60_61_ladder_1;
            _3001 = frontier_phi_60_61_ladder;
        }
        float _3006 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
        _2811 = (_3006 * _2997) + _2342;
        _2813 = (_3006 * _2999) + _2344;
        _2815 = (_3006 * _3001) + _2346;
        _2817 = ((_2991 * 0.039999999105930328369140625) * _3006) + _2665;
        _2819 = ((_2993 * 0.039999999105930328369140625) * _3006) + _2667;
        _2821 = ((_2995 * 0.039999999105930328369140625) * _3006) + _2669;
    }
    else
    {
        _2811 = _2342;
        _2813 = _2344;
        _2815 = _2346;
        _2817 = _2665;
        _2819 = _2667;
        _2821 = _2669;
    }
    float _4726 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4737 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4748 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    uint _2841 = _240 + 6u;
    float _2849 = _744 / cbSceneParam._m0[86u].x;
    float _2850 = _745 / cbSceneParam._m0[86u].y;
    vec4 _2864 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2866 = _2864.x;
    float _2867 = _2864.y;
    float _2868 = _2864.z;
    float _2869 = _2864.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2904 = _2903 / _677;
        float _2915 = _2904 * _729;
        float _2916 = _730 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2919 = _2904 * _731;
        float _2921 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2916;
        float _2929 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2917 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3054 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3092 = ((abs(_2929 / _2917) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2939 * _3063) - exp2(_2939 * _3064)) * _3052))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2869);
        _2941 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2866;
        _2943 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2867;
        _2945 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2868;
        _2947 = _3103 * _2869;
    }
    else
    {
        _2941 = _2866;
        _2943 = _2867;
        _2945 = _2868;
        _2947 = _2869;
    }
    float _2959 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2960 = _2959 == 3.0;
    float _2961 = log2(_2947);
    float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2811 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _807))) + ((_2817 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1612)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2813 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _807))) + ((_2819 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1612)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2815 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _807))) + ((_2821 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1612)) * cbPerFrame._m0[3u].x));
    float _2979 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2979 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.y = _2979 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.z = _2979 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.w = cbInstanceData._m0[_2841].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2841].w;
}


