#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1281;
float _3925;
float _3926;
float _3927;
float _3928;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _365 = _363.x;
    float _375 = dot(vec4(_365, _363.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _392 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_365 - _375) * cbMtdParam._m0[24u].x) + _375) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3937 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _400 = (_393 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _401 = (_393 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _402 = (_393 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _419 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _441 = _439.x;
    float _451 = dot(vec4(_441, _439.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _465 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_441 - _451) * cbMtdParam._m0[24u].x) + _451) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3948 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _473 = (_466 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _474 = (_466 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _475 = (_466 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _510 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _538 = ((_510.x - _529) * _393) + _529;
    float _539 = ((_510.y - _530) * _393) + _530;
    float _540 = ((_510.z - _531) * _393) + _531;
    vec4 _552 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _565 = ((_552.z - _540) * _466) + _540;
    float _568 = ((((_552.x - _538) * _466) + _538) * 2.0) + (-1.0);
    float _569 = ((((_552.y - _539) * _466) + _539) * 2.0) + (-1.0);
    float _570 = dot(vec2(_568, _569), vec2(_568, _569));
    float _3959 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _575 = sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))));
    float _580 = _568 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_487.x * 2.0) + (-1.0)));
    float _581 = _569 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_487.y * 2.0) + (-1.0)));
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _608 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _610 = _608.x;
    float _611 = 1.0 - _610;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_610 - _611) * cbMtdParam._m0[24u].w) + _611) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3970 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _473) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _640) + _473;
    float _649 = ((((cbMtdParam._m0[10u].y - _474) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _640) + _474;
    float _650 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _475)) * _640) + _475;
    float _655 = (((_487.z - _565) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _565;
    float _659 = ((cbMtdParam._m0[23u].y - _655) * _640) + _655;
    vec4 _678 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _684 = (_678.x * 2.0) + (-1.0);
    float _685 = (_678.y * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _3981 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _702 = (_640 * (((cbMtdParam._m0[22u].z * _580) - _580) + _684)) + _580;
    float _703 = (_640 * (((cbMtdParam._m0[22u].z * _581) - _581) + _685)) + _581;
    float _704 = (_640 * (sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _575)) + _575;
    float _706 = cbMtdParam._m0[22u].x + _594.w;
    float _709 = fma(_704, _244 * NORMAL.x, fma(_703, _251 * TANGENT.x, (_237 * _229) * _702));
    float _712 = fma(_704, _244 * NORMAL.y, fma(_703, _251 * TANGENT.y, (_237 * _230) * _702));
    float _715 = fma(_704, _244 * NORMAL.z, fma(_703, _251 * TANGENT.z, (_237 * _231) * _702));
    float _719 = inversesqrt(dot(vec3(_709, _712, _715), vec3(_709, _712, _715)));
    float _720 = _719 * _709;
    float _721 = _719 * _712;
    float _722 = _719 * _715;
    float _3992 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _723 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4014 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4025 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4036 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _741 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _792 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _782);
    float _793 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _782);
    float _794 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _782);
    float _798 = inversesqrt(dot(vec3(_792, _793, _794), vec3(_792, _793, _794)));
    float _799 = _792 * _798;
    float _800 = _793 * _798;
    float _801 = _794 * _798;
    vec4 _806 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _808 = _806.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _962 = sqrt(((_792 * _792) + (_793 * _793)) + (_794 * _794));
        float _968 = (cbMatDynParam._m0[5u].x * _962) + cbMatDynParam._m0[5u].y;
        float _4047 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _973 = (cbMatDynParam._m0[5u].z * _962) + cbMatDynParam._m0[5u].w;
        float _4058 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) - _969)) + _969) < ((_808 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _819 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _820 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _838 = fma(_722, cbSceneParam._m0[5u].z, fma(_721, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _720));
    float _841 = fma(_722, cbSceneParam._m0[6u].z, fma(_721, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _720));
    float _844 = fma(_722, cbSceneParam._m0[7u].z, fma(_721, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _720));
    uint _857 = _257 + 9u;
    uint _858 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_858].z;
    float _4069 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _819, cbSceneParam._m0[86u].y * _820));
    float _882 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * TEXCOORD_5.w) * _878.x;
    float _883 = dot(vec3(_720, _721, _722), vec3(_799, _800, _801));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _720) - _799;
    float _891 = (_886 * _721) - _800;
    float _892 = (_886 * _722) - _801;
    float _896 = abs(dot(vec3(_799, _800, _801), vec3(_720, _721, _722)));
    float _4102 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_723);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1280;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1005 = fma(_951, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943));
        float _1009 = fma(_951, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943));
        float _1013 = fma(_951, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943));
        float _1038 = _943 + _720;
        float _1039 = _947 + _721;
        float _1040 = _951 + _722;
        float _1050 = fma(_1040, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038)) - _1005;
        float _1051 = fma(_1040, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038)) - _1009;
        float _1052 = fma(_1040, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038)) - _1013;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1005 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1009 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[34u].z) + ((((((_1013 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1108 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1074.x + (-0.5));
        float _1110 = _1108 * (_1074.y + (-0.5));
        float _1111 = _1108 * (_1074.z + (-0.5));
        float _1118 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1081.x + (-0.5));
        float _1120 = _1118 * (_1081.y + (-0.5));
        float _1121 = _1118 * (_1081.z + (-0.5));
        float _1128 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1088.x + (-0.5));
        float _1130 = _1128 * (_1088.y + (-0.5));
        float _1131 = _1128 * (_1088.z + (-0.5));
        float _1138 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1095.x + (-0.5));
        float _1140 = _1138 * (_1095.y + (-0.5));
        float _1141 = _1138 * (_1095.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1162 = (dot(vec3(_720, _721, _722), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _4128 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1172 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _4139 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _4150 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_1174 + 1.0))) + _1179) * _1142;
        float _1189 = _1110 * 0.5;
        float _1190 = _1120 * 0.5;
        float _1191 = _1130 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_720, _721, _722), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _4161 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4172 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4183 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1216 + 1.0))) + _1221) * _1143;
        float _1231 = _1111 * 0.5;
        float _1232 = _1121 * 0.5;
        float _1233 = _1131 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_720, _721, _722), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4194 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4205 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4216 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_1258 + 1.0))) + _1263) * _1144;
        _1280 = _1111;
        _1282 = _1110;
        _1283 = _1109;
        _1284 = _1121;
        _1285 = _1120;
        _1286 = _1119;
        _1287 = _1131;
        _1288 = _1130;
        _1289 = _1129;
        _1290 = _1144;
        _1291 = _1143;
        _1292 = _1142;
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _1281;
        _1282 = _1281;
        _1283 = _1281;
        _1284 = _1281;
        _1285 = _1281;
        _1286 = _1281;
        _1287 = _1281;
        _1288 = _1281;
        _1289 = _1281;
        _1290 = _1281;
        _1291 = _1281;
        _1292 = _1281;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_951, cbModelParam._m0[30u].z, fma(_947, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _943));
        float _1326 = fma(_951, cbModelParam._m0[31u].z, fma(_947, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _943));
        float _1330 = fma(_951, cbModelParam._m0[32u].z, fma(_947, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _943));
        float _1353 = _943 + _720;
        float _1354 = _947 + _721;
        float _1355 = _951 + _722;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_720, _721, _722), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4257 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4268 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4279 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_720, _721, _722), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4290 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4301 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4312 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_720, _721, _722), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4345 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1281;
        _1592 = _1281;
        _1593 = _1281;
        _1594 = _1281;
        _1595 = _1281;
        _1596 = _1281;
        _1597 = _1281;
        _1598 = _1281;
        _1599 = _1281;
        _1600 = _1281;
        _1601 = _1281;
        _1602 = _1281;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1293)) + _1293;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1294)) + _1294;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1295)) + _1295;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _890 * 0.5;
    float _1660 = _891 * 0.5;
    float _1661 = _892 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1280, _1284, _1287, _1290));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _723);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1777 = fma(_951, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _943)) + cbModelParam._m0[13u].w;
        float _1781 = fma(_951, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _943)) + cbModelParam._m0[14u].w;
        float _1785 = fma(_951, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _943)) + cbModelParam._m0[15u].w;
        float _1788 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1791 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1794 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1822;
        if (_1788 > 0.0)
        {
            _1822 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1822 = frontier_phi_17_15_ladder;
        }
        float _1993;
        if (_1791 > 0.0)
        {
            _1993 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1993 = frontier_phi_26_22_ladder;
        }
        float _2288;
        if (_1794 > 0.0)
        {
            _2288 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2288 = frontier_phi_38_33_ladder;
        }
        float _2290 = isnan(_1993) ? _1822 : (isnan(_1822) ? _1993 : min(_1822, _1993));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1788) + _1777;
        float _2296 = (_2291 * _1791) + _1781;
        float _2297 = (_2291 * _1794) + _1785;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_16_38_ladder = _2442.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2442.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2442.x * cbModelParam._m0[1u].y;
        }
        _1810 = frontier_phi_16_38_ladder_2;
        _1812 = frontier_phi_16_38_ladder_1;
        _1814 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1728);
        _1810 = _1798.x * cbModelParam._m0[1u].y;
        _1812 = _1798.y * cbModelParam._m0[1u].y;
        _1814 = _1798.z * cbModelParam._m0[1u].y;
    }
    float _1818 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _723);
    float _1819 = isnan(_1818) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1818 : min(cbModelParam._m0[25u].w, _1818));
    float _1910;
    float _1912;
    float _1914;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1874 = fma(_951, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _943)) + cbModelParam._m0[21u].w;
        float _1878 = fma(_951, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _943)) + cbModelParam._m0[22u].w;
        float _1882 = fma(_951, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _943)) + cbModelParam._m0[23u].w;
        float _1885 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1888 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1891 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _1998;
        if (_1885 > 0.0)
        {
            _1998 = abs((1.0 - _1874) / _1885);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1874 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1998 = frontier_phi_28_24_ladder;
        }
        float _2315;
        if (_1888 > 0.0)
        {
            _2315 = abs((1.0 - _1878) / _1888);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1878 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2315 = frontier_phi_40_35_ladder;
        }
        float _2642;
        if (_1891 > 0.0)
        {
            _2642 = abs((1.0 - _1882) / _1891);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1882 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2642 = frontier_phi_50_47_ladder;
        }
        float _2644 = isnan(_2315) ? _1998 : (isnan(_1998) ? _2315 : min(_1998, _2315));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _1885) + _1874;
        float _2650 = (_2645 * _1888) + _1878;
        float _2651 = (_2645 * _1891) + _1882;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2652;
        float _2655 = _2652 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2651 > _2655) || ((_2651 < _2653) || ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 < _2653) || (_2649 > _2655))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2769 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2651, cbModelParam._m0[17u].z, fma(_2650, cbModelParam._m0[17u].y, _2649 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2651, cbModelParam._m0[18u].z, fma(_2650, cbModelParam._m0[18u].y, _2649 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2651, cbModelParam._m0[19u].z, fma(_2650, cbModelParam._m0[19u].y, _2649 * cbModelParam._m0[19u].x))), _1819);
            frontier_phi_25_50_ladder = _2769.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2769.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2769.x * cbModelParam._m0[1u].z;
        }
        _1910 = frontier_phi_25_50_ladder_2;
        _1912 = frontier_phi_25_50_ladder_1;
        _1914 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1819);
        _1910 = _1894.x * cbModelParam._m0[1u].z;
        _1912 = _1894.y * cbModelParam._m0[1u].z;
        _1914 = _1894.z * cbModelParam._m0[1u].z;
    }
    float _1926 = ((((1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_911 * _898)) * _882;
    float _1927 = _1926 * ((cbModelParam._m0[1u].w * (_1910 - _1810)) + _1810);
    float _1928 = _1926 * ((cbModelParam._m0[1u].w * (_1912 - _1812)) + _1812);
    float _1929 = _1926 * ((cbModelParam._m0[1u].w * (_1914 - _1814)) + _1814);
    float _1932 = fma(_1929, cbSceneParam._m0[89u].z, fma(_1928, cbSceneParam._m0[89u].y, _1927 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1929, cbSceneParam._m0[90u].z, fma(_1928, cbSceneParam._m0[90u].y, _1927 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1929, cbSceneParam._m0[91u].z, fma(_1928, cbSceneParam._m0[91u].y, _1927 * cbSceneParam._m0[91u].x));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1985 = _1972 / _1984;
    float _1986 = _1976 / _1984;
    float _1987 = _1980 / _1984;
    float _2134;
    float _2135;
    float _2136;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2014 = ((uint(_1987 > cbSceneParam._m0[59u].y) + uint(_1987 > cbSceneParam._m0[59u].x)) + uint(_1987 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2015 = _2014 + 43u;
        uint _2023 = _2014 + 44u;
        uint _2031 = _2014 + 45u;
        uint _2039 = _2014 + 46u;
        float _2050 = fma(_1984, cbSceneParam._m0[_2015].w, fma(_1980, cbSceneParam._m0[_2015].z, fma(_1976, cbSceneParam._m0[_2015].y, _1972 * cbSceneParam._m0[_2015].x)));
        float _2054 = fma(_1984, cbSceneParam._m0[_2023].w, fma(_1980, cbSceneParam._m0[_2023].z, fma(_1976, cbSceneParam._m0[_2023].y, _1972 * cbSceneParam._m0[_2023].x)));
        float _2062 = fma(_1984, cbSceneParam._m0[_2039].w, fma(_1980, cbSceneParam._m0[_2039].z, fma(_1976, cbSceneParam._m0[_2039].y, _1972 * cbSceneParam._m0[_2039].x)));
        float _2067 = cbSceneParam._m0[33u].z * _2062;
        float _2069 = cbSceneParam._m0[33u].w * _2062;
        float _2072 = fma(_1984, cbSceneParam._m0[_2031].w, fma(_1980, cbSceneParam._m0[_2031].z, fma(_1976, cbSceneParam._m0[_2031].y, _1972 * cbSceneParam._m0[_2031].x))) / _2062;
        float _2120 = (cbSceneParam._m0[33u].x - sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987))) * cbSceneParam._m0[33u].y;
        float _4471 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2127 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 + _2050) / _2062, (_2069 + _2054) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2069 + _2050) / _2062, (_2054 - _2067) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 - _2067) / _2062, (_2054 - _2069) / _2062), _2072), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 - _2069) / _2062, (_2067 + _2054) / _2062), _2072), 0.0)).x), vec4(0.25)));
        _2134 = 1.0 - (_2127 * cbSceneParam._m0[34u].x);
        _2135 = 1.0 - (_2127 * cbSceneParam._m0[34u].y);
        _2136 = 1.0 - (_2127 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2134 = 1.0;
        _2135 = 1.0;
        _2136 = 1.0;
    }
    float _2200;
    float _2202;
    float _2204;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2188 = fma(_1984, cbSceneParam._m0[63u].w, fma(_1980, cbSceneParam._m0[63u].z, fma(_1976, cbSceneParam._m0[63u].y, _1972 * cbSceneParam._m0[63u].x)));
        float _2189 = fma(_1984, cbSceneParam._m0[60u].w, fma(_1980, cbSceneParam._m0[60u].z, fma(_1976, cbSceneParam._m0[60u].y, _1972 * cbSceneParam._m0[60u].x))) / _2188;
        float _2190 = fma(_1984, cbSceneParam._m0[61u].w, fma(_1980, cbSceneParam._m0[61u].z, fma(_1976, cbSceneParam._m0[61u].y, _1972 * cbSceneParam._m0[61u].x))) / _2188;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2189 >= cbSceneParam._m0[64u].x) && (_2190 >= cbSceneParam._m0[64u].y)) && (_2189 <= cbSceneParam._m0[64u].z)) && (_2190 <= cbSceneParam._m0[64u].w))
        {
            float _2328 = fma(_1984, cbSceneParam._m0[62u].w, fma(_1980, cbSceneParam._m0[62u].z, fma(_1976, cbSceneParam._m0[62u].y, _1972 * cbSceneParam._m0[62u].x))) / _2188;
            float _2332 = isnan(cbSceneParam._m0[41u].w) ? _2328 : (isnan(_2328) ? cbSceneParam._m0[41u].w : max(_2328, cbSceneParam._m0[41u].w));
            float _2375 = (cbSceneParam._m0[33u].x - sqrt(((_1986 * _1986) + (_1985 * _1985)) + (_1987 * _1987))) * cbSceneParam._m0[33u].y;
            float _4487 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
            float _2382 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2189, cbSceneParam._m0[33u].w + _2190), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2189, _2190 - cbSceneParam._m0[33u].z), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2189 - cbSceneParam._m0[33u].z, _2190 - cbSceneParam._m0[33u].w), _2332), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2189 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2190), _2332), 0.0)).x), vec4(0.25)));
            float _2386 = 1.0 - (_2382 * cbSceneParam._m0[34u].x);
            float _2387 = 1.0 - (_2382 * cbSceneParam._m0[34u].y);
            float _2388 = 1.0 - (_2382 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2388) ? _2136 : (isnan(_2136) ? _2388 : min(_2136, _2388));
            frontier_phi_37_36_ladder_1 = isnan(_2387) ? _2135 : (isnan(_2135) ? _2387 : min(_2135, _2387));
            frontier_phi_37_36_ladder_2 = isnan(_2386) ? _2134 : (isnan(_2134) ? _2386 : min(_2134, _2386));
        }
        else
        {
            frontier_phi_37_36_ladder = _2136;
            frontier_phi_37_36_ladder_1 = _2135;
            frontier_phi_37_36_ladder_2 = _2134;
        }
        _2200 = frontier_phi_37_36_ladder_2;
        _2202 = frontier_phi_37_36_ladder_1;
        _2204 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2200 = _2134;
        _2202 = _2135;
        _2204 = _2136;
    }
    uvec4 _2209 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2211 = _2209.x * 14u;
    uint _2212 = _2211 + 13u;
    float _2219 = _882 + (-1.0);
    float _2224 = (cbLight._m0[_2212].x * _2219) + 1.0;
    float _2225 = (cbLight._m0[_2212].y * _2219) + 1.0;
    float _2226 = (cbLight._m0[_2212].z * _2219) + 1.0;
    float _2227 = (cbLight._m0[_2212].w * _2219) + 1.0;
    uint _2228 = _2211 + 5u;
    float _2234 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2238 = _2211 + 4u;
    float _2247 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    uint _2251 = _2211 | 1u;
    float _2262 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_720, _721, _722));
    float _2265 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_720, _721, _722));
    float _4523 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _4534 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2270 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2272 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2279 = ((cbLight._m0[_2228].x * _2234) * _2272) + (((cbLight._m0[_2238].x * _2200) * _2247) * _2270);
    float _2280 = ((_2234 * cbLight._m0[_2228].y) * _2272) + (((cbLight._m0[_2238].y * _2202) * _2247) * _2270);
    float _2281 = ((_2234 * cbLight._m0[_2228].z) * _2272) + (((cbLight._m0[_2238].z * _2204) * _2247) * _2270);
    uvec4 _2285 = floatBitsToUint(cbLight._m0[_2211 + 12u]);
    bool _2287 = _2285.x == 0u;
    float _2389;
    float _2391;
    float _2393;
    if (_2287)
    {
        _2389 = _2279;
        _2391 = _2280;
        _2393 = _2281;
    }
    else
    {
        uint _2397 = _2211 + 6u;
        float _2413 = (dot(vec3(cbLight._m0[_2211 + 2u].xyz), vec3(_720, _721, _722)) * 0.5) + 0.5;
        float _2414 = _2413 * _2413;
        float _4545 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2415 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2416 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2389 = (((cbLight._m0[_2397].x * 0.3183098733425140380859375) * _2415) * _2416) + _2279;
        _2391 = (((cbLight._m0[_2397].y * 0.3183098733425140380859375) * _2415) * _2416) + _2280;
        _2393 = (((cbLight._m0[_2397].z * 0.3183098733425140380859375) * _2415) * _2416) + _2281;
    }
    bool _2396 = _2285.y == 0u;
    float _2451;
    float _2453;
    float _2455;
    if (_2396)
    {
        _2451 = _2389;
        _2453 = _2391;
        _2455 = _2393;
    }
    else
    {
        uint _2613 = _2211 + 7u;
        float _2629 = (dot(vec3(cbLight._m0[_2211 + 3u].xyz), vec3(_720, _721, _722)) * 0.5) + 0.5;
        float _2630 = _2629 * _2629;
        float _4561 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2631 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2632 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2451 = (((cbLight._m0[_2613].x * 0.3183098733425140380859375) * _2631) * _2632) + _2389;
        _2453 = (((cbLight._m0[_2613].y * 0.3183098733425140380859375) * _2631) * _2632) + _2391;
        _2455 = (((cbLight._m0[_2613].z * 0.3183098733425140380859375) * _2631) * _2632) + _2393;
    }
    uint _2458 = _2211 + 8u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2211].w)) * _723) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2211].x + _799;
    float _2474 = cbLight._m0[_2211].y + _800;
    float _2475 = cbLight._m0[_2211].z + _801;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_2211].xyz));
    float _4577 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2487 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2488 = dot(vec3(_720, _721, _722), vec3(_2480, _2481, _2482));
    float _4599 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2492 = dot(vec3(cbLight._m0[_2211].xyz), vec3(_2480, _2481, _2482));
    float _4610 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2496 = _2472 * _2472;
    float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
    float _2511 = (exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2512 = 1.0 - _2472;
    float _2523 = (0.5 / (((_2487 * ((_2486 * _2512) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2512) + _2472) * _2486))) * _2486;
    float _4621 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
    uint _2539 = _2211 + 9u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2251].w)) * _723) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2251].x + _799;
    float _2553 = cbLight._m0[_2251].y + _800;
    float _2554 = cbLight._m0[_2251].z + _801;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_2251].xyz));
    float _4632 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2566 = dot(vec3(_720, _721, _722), vec3(_2559, _2560, _2561));
    float _4643 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2251].xyz), vec3(_2559, _2560, _2561));
    float _4654 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2551 * _2551;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2587 = (exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2588 = 1.0 - _2551;
    float _2598 = (0.5 / (((_2487 * ((_2565 * _2588) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2588) + _2551) * _2565))) * _2565;
    float _4665 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    float _2610 = (((_2587 * cbLight._m0[_2539].x) * _2600) * _2234) + ((((cbLight._m0[_2458].x * _2200) * _2511) * _2525) * _2247);
    float _2611 = (((_2587 * cbLight._m0[_2539].y) * _2600) * _2234) + ((((cbLight._m0[_2458].y * _2202) * _2511) * _2525) * _2247);
    float _2612 = (((_2587 * cbLight._m0[_2539].z) * _2600) * _2234) + ((((cbLight._m0[_2458].z * _2204) * _2511) * _2525) * _2247);
    float _2668;
    float _2670;
    float _2672;
    if (_2287)
    {
        _2668 = _2610;
        _2670 = _2611;
        _2672 = _2612;
    }
    else
    {
        uint _2674 = _2211 + 2u;
        uint _2678 = _2211 + 10u;
        float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2674].w)) * _723) * 0.949999988079071044921875);
        float _2693 = _2692 * _2692;
        float _2694 = cbLight._m0[_2674].x + _799;
        float _2695 = cbLight._m0[_2674].y + _800;
        float _2696 = cbLight._m0[_2674].z + _801;
        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
        float _2701 = _2700 * _2694;
        float _2702 = _2700 * _2695;
        float _2703 = _2700 * _2696;
        float _2704 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_2674].xyz));
        float _4676 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2708 = dot(vec3(_720, _721, _722), vec3(_2701, _2702, _2703));
        float _4687 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2712 = dot(vec3(cbLight._m0[_2674].xyz), vec3(_2701, _2702, _2703));
        float _4698 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2716 = _2693 * _2693;
        float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
        float _2729 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2730 = 1.0 - _2693;
        float _2740 = (0.5 / (((_2487 * ((_2707 * _2730) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2730) + _2693) * _2707))) * _2707;
        float _4709 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2742 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
        float _2743 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
        _2668 = (((_2729 * cbLight._m0[_2678].x) * _2742) * _2743) + _2610;
        _2670 = (((_2729 * cbLight._m0[_2678].y) * _2742) * _2743) + _2611;
        _2672 = (((_2729 * cbLight._m0[_2678].z) * _2742) * _2743) + _2612;
    }
    float _2774;
    float _2776;
    float _2778;
    if (_2396)
    {
        _2774 = _2668;
        _2776 = _2670;
        _2778 = _2672;
    }
    else
    {
        uint _2785 = _2211 + 3u;
        uint _2789 = _2211 + 11u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _723) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _799;
        float _2806 = cbLight._m0[_2785].y + _800;
        float _2807 = cbLight._m0[_2785].z + _801;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_720, _721, _722), vec3(cbLight._m0[_2785].xyz));
        float _4725 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2819 = dot(vec3(_720, _721, _722), vec3(_2812, _2813, _2814));
        float _4736 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4747 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2840 = (exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2841 = 1.0 - _2804;
        float _2851 = (0.5 / (((_2487 * ((_2818 * _2841) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2487 * _2841) + _2804) * _2818))) * _2818;
        float _4758 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2774 = (((_2840 * cbLight._m0[_2789].x) * _2853) * _2854) + _2668;
        _2776 = (((_2840 * cbLight._m0[_2789].y) * _2853) * _2854) + _2670;
        _2778 = (((_2840 * cbLight._m0[_2789].z) * _2853) * _2854) + _2672;
    }
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    if (_2209.y == 0u)
    {
        uvec4 _2875 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2876 = _2875.x;
        uint _2887 = uint((float(_2875.y) * floor(float(uint(cbSceneParam._m0[85u].y * _820) / _2876))) + floor(float(uint(cbSceneParam._m0[85u].x * _819) / _2876)));
        float _2897 = (log2(_1987 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2898 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        uint _2901 = uint(isnan(14.0) ? _2898 : (isnan(_2898) ? 14.0 : min(_2898, 14.0)));
        uvec4 _2906 = texelFetch(g_lightClusterGridBuffer, int(((_2901 << 2u) + (_2887 << 6u)) >> 2u));
        uint _2907 = _2906.x;
        uint _2908 = _2875.z;
        float _2987;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        if (((((1u << ((_2908 >> 4u) & 15u)) + 4294967295u) & _2907) == 0u) || ((_2908 & 240u) == 0u))
        {
            _2987 = 0.0;
            _2989 = 0.0;
            _2991 = 0.0;
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
        }
        else
        {
            float _2988;
            float _2990;
            float _2992;
            float _2994;
            float _2996;
            float _2998;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            uint _3146 = 0u;
            uint _3155;
            bool _3156;
            for (;;)
            {
                _3155 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3146 << 2u)) >> 2u)).x;
                _3156 = _3155 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3156)
                {
                    frontier_phi_71_pred = _3145;
                    frontier_phi_71_pred_1 = _3144;
                    frontier_phi_71_pred_2 = _3143;
                    frontier_phi_71_pred_3 = _3142;
                    frontier_phi_71_pred_4 = _3141;
                    frontier_phi_71_pred_5 = _3140;
                }
                else
                {
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    uint _3291;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3155;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3295 = uint(findLSB(_3291)) + (_3146 << 5u);
                        uint _3292 = (_3291 + 4294967295u) & _3291;
                        uint _3297 = _3295 * 48u;
                        vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3317 = (_3295 * 48u) + 4u;
                        vec4 _3330 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3317)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3317 + 3u)).x));
                        uint _3336 = (_3295 * 48u) + 8u;
                        vec3 _3347 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3336)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3336 + 2u)).x));
                        float _3351 = _3311.x - _1985;
                        float _3352 = _3311.y - _1986;
                        float _3353 = _3311.z - _1987;
                        float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                        float _3357 = inversesqrt(_3354);
                        float _3358 = _3357 * _3351;
                        float _3359 = _3357 * _3352;
                        float _3360 = _3357 * _3353;
                        float _3361 = dot(vec3(_838, _841, _844), vec3(_3358, _3359, _3360));
                        float _3366 = 1.0 - (_3354 * _3311.w);
                        float _4784 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3367 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3368 = sqrt(_3354) * _3330.w;
                        float _3371 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                        float _3372 = _3371 * _3371;
                        float _3375 = ((1.0 - _3372) * _3361) + _3372;
                        float _3378 = _3368 * _3368;
                        float _3382 = ((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3367) / ((_3378 * 0.699999988079071044921875) + 1.0);
                        float _3386 = (-0.0) - _1985;
                        float _3387 = (-0.0) - _1986;
                        float _3388 = (-0.0) - _1987;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3393 = _3392 * _3386;
                        float _3394 = _3392 * _3387;
                        float _3395 = _3392 * _3388;
                        float _3402 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                        float _3403 = 1.0 - _898;
                        float _3410 = sqrt(1.0 - ((1.0 - (_3403 * _3403)) * (1.0 - (_3402 * _3402))));
                        float _3411 = _3410 * _3410;
                        float _3412 = _3411 * _3411;
                        float _3413 = _3393 + _3358;
                        float _3414 = _3394 + _3359;
                        float _3415 = _3395 + _3360;
                        float _3419 = inversesqrt(dot(vec3(_3413, _3414, _3415), vec3(_3413, _3414, _3415)));
                        float _3423 = dot(vec3(_838, _841, _844), vec3(_3393, _3394, _3395));
                        float _4800 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3427 = dot(vec3(_838, _841, _844), vec3(_3419 * _3413, _3419 * _3414, _3419 * _3415));
                        float _4811 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3430 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3434 = ((_3430 * _3430) * (_3412 + (-1.0))) + 1.0;
                        float _3435 = _3371 * _3411;
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3361) + _3436;
                        float _4822 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3441 = 1.0 - _3411;
                        float _3451 = (0.5 / (((_3440 * ((_3426 * _3441) + _3411)) + 9.9999999392252902907785028219223e-09) + (((_3440 * _3441) + _3411) * _3426))) * _3440;
                        float _4833 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3462 = (((_3412 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3434 * _3434) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125))) * _3367;
                        _3215 = (_3382 * _3330.x) + _3288;
                        _3216 = (_3382 * _3330.y) + _3289;
                        _3217 = (_3382 * _3330.z) + _3290;
                        _3212 = (_3462 * _3347.x) + _3285;
                        _3213 = (_3462 * _3347.y) + _3286;
                        _3214 = (_3462 * _3347.z) + _3287;
                        if (_3292 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3292;
                        }
                    }
                    frontier_phi_71_pred = _3217;
                    frontier_phi_71_pred_1 = _3216;
                    frontier_phi_71_pred_2 = _3215;
                    frontier_phi_71_pred_3 = _3214;
                    frontier_phi_71_pred_4 = _3213;
                    frontier_phi_71_pred_5 = _3212;
                }
                _2998 = frontier_phi_71_pred;
                _2996 = frontier_phi_71_pred_1;
                _2994 = frontier_phi_71_pred_2;
                _2992 = frontier_phi_71_pred_3;
                _2990 = frontier_phi_71_pred_4;
                _2988 = frontier_phi_71_pred_5;
                uint _3147 = _3146 + 1u;
                if (_3147 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3140 = _2988;
                    _3141 = _2990;
                    _3142 = _2992;
                    _3143 = _2994;
                    _3144 = _2996;
                    _3145 = _2998;
                    _3146 = _3147;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2987 = _2988;
            _2989 = _2990;
            _2991 = _2992;
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
        }
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.z;
        uint _3004 = (_3002 >> 8u) & 15u;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((4294967295u << _3004) & _2907) == 0u)
        {
            _3108 = _2987;
            _3110 = _2989;
            _3112 = _2991;
            _3114 = _2993;
            _3116 = _2995;
            _3118 = _2997;
        }
        else
        {
            float _3133 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
            float _3134 = _3133 * _1985;
            float _3135 = _3133 * _1986;
            float _3136 = _3133 * _1987;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3004 < ((_3002 >> 12u) & 15u))
            {
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3268 = _2987;
                float _3269 = _2989;
                float _3270 = _2991;
                float _3271 = _2993;
                float _3272 = _2995;
                float _3273 = _2997;
                uint _3274 = _3004;
                uint _3283;
                bool _3284;
                for (;;)
                {
                    _3283 = texelFetch(g_lightClassification, int((((_2901 << 5u) + (_2887 << 9u)) + (_3274 << 2u)) >> 2u)).x;
                    _3284 = _3283 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3284)
                    {
                        frontier_phi_82_pred = _3273;
                        frontier_phi_82_pred_1 = _3272;
                        frontier_phi_82_pred_2 = _3271;
                        frontier_phi_82_pred_3 = _3270;
                        frontier_phi_82_pred_4 = _3269;
                        frontier_phi_82_pred_5 = _3268;
                    }
                    else
                    {
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3489 = _3268;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        uint _3495 = _3283;
                        uint _3496;
                        vec4 _3521;
                        float _3522;
                        vec4 _3537;
                        vec3 _3549;
                        vec4 _3564;
                        vec4 _3579;
                        float _3625;
                        bool _3626;
                        for (;;)
                        {
                            uint _3506 = ((_3274 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3495));
                            _3496 = (_3495 + 4294967295u) & _3495;
                            uint _3508 = _3506 * 40u;
                            _3521 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 3u)).x));
                            _3522 = _3521.w;
                            uint _3524 = (_3506 * 40u) + 4u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3506 * 40u) + 8u;
                            _3549 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x));
                            uint _3551 = (_3506 * 40u) + 16u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            uint _3566 = (_3506 * 40u) + 20u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3506 * 40u) + 24u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3600 = (_3506 * 40u) + 28u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            _3625 = fma(_1987, _3613.z, fma(_1986, _3613.y, _3613.x * _1985)) + _3613.w;
                            _3626 = !((fma(_1987, _3594.z, fma(_1986, _3594.y, _3594.x * _1985)) + _3594.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3626)
                            {
                                float _3653 = _3521.x - _1985;
                                float _3654 = _3521.y - _1986;
                                float _3655 = _3521.z - _1987;
                                float _3656 = dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655));
                                float _3659 = inversesqrt(_3656);
                                float _3660 = _3659 * _3653;
                                float _3661 = _3659 * _3654;
                                float _3662 = _3659 * _3655;
                                float _3666 = 1.0 - (_3656 / (_3522 * _3522));
                                float _4844 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3667 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3671 = sqrt(_3656) * _3537.w;
                                float _3673 = 1.39999997615814208984375 / (_3671 + 1.39999997615814208984375);
                                float _3674 = _3673 * _3673;
                                float _3677 = ((1.0 - _3674) * dot(vec3(_3660, _3661, _3662), vec3(_838, _841, _844))) + _3674;
                                float _3680 = _3671 * _3671;
                                float _3684 = (fma(_1987, _3564.z, fma(_1986, _3564.y, _3564.x * _1985)) + _3564.w) / _3625;
                                float _3685 = (fma(_1987, _3579.z, fma(_1986, _3579.y, _3579.x * _1985)) + _3579.w) / _3625;
                                float _3689 = 1.0 - dot(vec2(_3684, _3685), vec2(_3684, _3685));
                                float _4860 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                                float _3690 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3691 = _3690 * (((isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0))) * _3667) / ((_3680 * 0.699999988079071044921875) + 1.0));
                                float _3703 = exp2(log2(1.0 / ((_3680 * 3.5) + 5.0)) * 0.25);
                                float _3704 = 1.0 - _898;
                                float _3711 = sqrt(1.0 - ((1.0 - (_3704 * _3704)) * (1.0 - (_3703 * _3703))));
                                float _3712 = _3711 * _3711;
                                float _3713 = _3712 * _3712;
                                float _3714 = _3660 - _3134;
                                float _3715 = _3661 - _3135;
                                float _3716 = _3662 - _3136;
                                float _3720 = inversesqrt(dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716)));
                                float _3724 = dot(vec3(_838, _841, _844), vec3((-0.0) - _3134, (-0.0) - _3135, (-0.0) - _3136));
                                float _4871 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3728 = dot(vec3(_838, _841, _844), vec3(_3720 * _3714, _3720 * _3715, _3720 * _3716));
                                float _4882 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3731 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3735 = ((_3731 * _3731) * (_3713 + (-1.0))) + 1.0;
                                float _3736 = _3673 * _3712;
                                float _3737 = _3736 * _3736;
                                float _3743 = ((1.0 - _3737) * dot(vec3(_838, _841, _844), vec3(_3660, _3661, _3662))) + _3737;
                                float _4893 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3744 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3745 = 1.0 - _3712;
                                float _3755 = (0.5 / (((_3744 * ((_3727 * _3745) + _3712)) + 9.9999999392252902907785028219223e-09) + (((_3744 * _3745) + _3712) * _3727))) * _3744;
                                float _4904 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3765 = (_3690 * _3667) * (((_3713 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3735 * _3735) * ((_3680 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3691 * _3537.z;
                                frontier_phi_88_pred_1 = _3691 * _3537.y;
                                frontier_phi_88_pred_2 = _3691 * _3537.x;
                                frontier_phi_88_pred_3 = _3765 * _3549.z;
                                frontier_phi_88_pred_4 = _3765 * _3549.y;
                                frontier_phi_88_pred_5 = _3765 * _3549.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3774 = frontier_phi_88_pred;
                            _3773 = frontier_phi_88_pred_1;
                            _3772 = frontier_phi_88_pred_2;
                            _3771 = frontier_phi_88_pred_3;
                            _3770 = frontier_phi_88_pred_4;
                            _3769 = frontier_phi_88_pred_5;
                            _3479 = _3772 + _3492;
                            _3480 = _3773 + _3493;
                            _3481 = _3774 + _3494;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            if (_3496 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3496;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3481;
                        frontier_phi_82_pred_1 = _3480;
                        frontier_phi_82_pred_2 = _3479;
                        frontier_phi_82_pred_3 = _3478;
                        frontier_phi_82_pred_4 = _3477;
                        frontier_phi_82_pred_5 = _3476;
                    }
                    _3119 = frontier_phi_82_pred;
                    _3117 = frontier_phi_82_pred_1;
                    _3115 = frontier_phi_82_pred_2;
                    _3113 = frontier_phi_82_pred_3;
                    _3111 = frontier_phi_82_pred_4;
                    _3109 = frontier_phi_82_pred_5;
                    uint _3275 = _3274 + 1u;
                    if (_3275 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3268 = _3109;
                        _3269 = _3111;
                        _3270 = _3113;
                        _3271 = _3115;
                        _3272 = _3117;
                        _3273 = _3119;
                        _3274 = _3275;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3115;
                frontier_phi_63_64_ladder_1 = _3119;
                frontier_phi_63_64_ladder_2 = _3117;
                frontier_phi_63_64_ladder_3 = _3113;
                frontier_phi_63_64_ladder_4 = _3111;
                frontier_phi_63_64_ladder_5 = _3109;
            }
            else
            {
                frontier_phi_63_64_ladder = _2993;
                frontier_phi_63_64_ladder_1 = _2997;
                frontier_phi_63_64_ladder_2 = _2995;
                frontier_phi_63_64_ladder_3 = _2991;
                frontier_phi_63_64_ladder_4 = _2989;
                frontier_phi_63_64_ladder_5 = _2987;
            }
            _3108 = frontier_phi_63_64_ladder_5;
            _3110 = frontier_phi_63_64_ladder_4;
            _3112 = frontier_phi_63_64_ladder_3;
            _3114 = frontier_phi_63_64_ladder;
            _3116 = frontier_phi_63_64_ladder_2;
            _3118 = frontier_phi_63_64_ladder_1;
        }
        float _3123 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2920 = (_3123 * _3114) + _2451;
        _2922 = (_3123 * _3116) + _2453;
        _2924 = (_3123 * _3118) + _2455;
        _2926 = ((_3108 * 0.039999999105930328369140625) * _3123) + _2774;
        _2928 = ((_3110 * 0.039999999105930328369140625) * _3123) + _2776;
        _2930 = ((_3112 * 0.039999999105930328369140625) * _3123) + _2778;
    }
    else
    {
        _2920 = _2451;
        _2922 = _2453;
        _2924 = _2455;
        _2926 = _2774;
        _2928 = _2776;
        _2930 = _2778;
    }
    float _4920 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4931 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4942 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2947 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2920 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _882))) + ((_2926 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2948 = ((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2922 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _882))) + ((_2928 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    float _2949 = ((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2924 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _882))) + ((_2930 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1717)) * cbPerFrame._m0[3u].x);
    uint _2950 = _257 + 6u;
    float _2958 = _819 / cbSceneParam._m0[86u].x;
    float _2959 = _820 / cbSceneParam._m0[86u].y;
    vec4 _2973 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, (log2((isnan(cbSceneParam._m0[77u].w) ? _741 : (isnan(_741) ? cbSceneParam._m0[77u].w : min(_741, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2975 = _2973.x;
    float _2976 = _2973.y;
    float _2977 = _2973.z;
    float _2978 = _2973.w;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_741 > cbSceneParam._m0[78u].w)
    {
        float _3012 = isnan(_741) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _741 : min(cbSceneParam._m0[80u].w, _741));
        float _3013 = _3012 / _741;
        float _3024 = _3013 * _792;
        float _3025 = _793 * _3013;
        float _3026 = (-0.0) - _3025;
        float _3028 = _3013 * _794;
        float _3030 = (cbSceneParam._m0[77u].w * _3026) / _3012;
        float _3031 = _3030 + cbSceneParam._m0[79u].w;
        float _3032 = cbSceneParam._m0[79u].w - _3025;
        float _3038 = sqrt(((_3024 * _3024) + (_3025 * _3025)) + (_3028 * _3028));
        float _3041 = (1.0 - (cbSceneParam._m0[77u].w / _3012)) * _3038;
        float _3046 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3048 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3026 - _3030) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3031 > 0.0) ? exp2(_3046 * _3031) : (2.0 - exp2(_3048 * _3031))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3041;
        }
        else
        {
            float _3169 = 1.0 / cbSceneParam._m0[80u].x;
            float _3170 = isnan(_3032) ? _3031 : (isnan(_3031) ? _3032 : max(_3031, _3032));
            float _3171 = isnan(_3032) ? _3031 : (isnan(_3031) ? _3032 : min(_3031, _3032));
            float _3180 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : min(_3170, 0.0));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            _3225 = ((abs(_3038 / _3026) * cbSceneParam._m0[80u].y) * ((((_3180 - _3181) * 2.0) - ((exp2(_3046 * (isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0)))) - exp2(_3046 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0))))) * _3169)) - ((exp2(_3048 * _3180) - exp2(_3048 * _3181)) * _3169))) + (_3041 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2958, _2959, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_2978);
        _3050 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2975;
        _3052 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _2976;
        _3054 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _2977;
        _3056 = _3236 * _2978;
    }
    else
    {
        _3050 = _2975;
        _3052 = _2976;
        _3054 = _2977;
        _3056 = _2978;
    }
    bool _3263;
    vec4 _3066;
    vec4 _3088;
    float _3090;
    float _3094;
    float _3095;
    float _3096;
    float _3097;
    bool _3107;
    for (;;)
    {
        _3066 = cbMatDynParam._m0[0u];
        float _3068 = roundEven(_3066.y);
        bool _3069 = _3068 == 3.0;
        float _3070 = log2(_3056);
        float _3077 = exp2(_3070 * cbSceneParam._m0[78u].x) * _2947;
        float _3078 = exp2(_3070 * cbSceneParam._m0[78u].y) * _2948;
        float _3079 = exp2(_3070 * cbSceneParam._m0[78u].z) * _2949;
        float _3086 = _808 + (-0.5);
        _3088 = cbMtdParam._m0[1u];
        _3090 = _3088.y * _3086;
        float _3093 = (_3068 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3094 = _3093 * (_3069 ? _3077 : (_3077 + (cbSceneParam._m0[72u].w * _3050)));
        _3095 = _3093 * (_3069 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3052)));
        _3096 = _3093 * (_3069 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3054)));
        _3097 = _3086 * 0.999000012874603271484375;
        _3107 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3107)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _3097) < 0.5)
            {
                _3263 = true;
                break;
            }
        }
        uint _3204 = _857 + uint(_3066.w);
        if ((cbInstanceData._m0[_3204].w < 1.0) && ((cbInstanceData._m0[_3204].w + _3097) < 0.5))
        {
            _3263 = true;
            break;
        }
        if ((_3090 + 1.0) < _3088.x)
        {
            _3263 = true;
            break;
        }
        _3263 = false;
        break;
    }
    float _3467;
    if (_3263)
    {
        discard_state = true;
        _3467 = 0.0;
    }
    else
    {
        _3467 = cbInstanceData._m0[_2950].w;
    }
    SV_Target.x = _3094;
    SV_Target.y = _3095;
    SV_Target.z = _3096;
    SV_Target.w = _3467;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2950].w;
    discard_exit();
}


