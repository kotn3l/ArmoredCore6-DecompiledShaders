#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1207;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3512 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3523 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3534 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _282) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _283) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _324 = _319.x * cbMtdParam._m0[9u].x;
    float _325 = _319.y * cbMtdParam._m0[9u].y;
    float _326 = _319.z * cbMtdParam._m0[9u].z;
    float _330 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _296.x) * _324;
    float _333 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _296.y) * _325;
    float _336 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _296.z) * _326;
    float _343 = ((_324 - _330) * (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0)))) + _330;
    float _344 = ((_325 - _333) * (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0)))) + _333;
    float _345 = ((_326 - _336) * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) + _336;
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _282) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _283) + cbTextureTilingScale._m0[14u].w));
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _414 = _410.z;
    float _418 = (_410.x * 2.0) + (-1.0);
    float _419 = (_410.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3545 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))));
    float _430 = _418 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_384.x * 2.0) + (-1.0)));
    float _431 = _419 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_384.y * 2.0) + (-1.0)));
    float _434 = fma(_425, _232, fma(_431, _239, _430 * _225));
    float _437 = fma(_425, _233, fma(_431, _240, _430 * _226));
    float _440 = fma(_425, _234, fma(_431, _241, _430 * _227));
    float _444 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _482 = _480.x;
    float _483 = 1.0 - _482;
    float _492 = (cbMtdParam._m0[19u].x + dot(vec4(_444 * _434, _444 * _437, _444 * _440, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_482 - _483) * cbMtdParam._m0[24u].z) + _483) * cbMtdParam._m0[21u].z);
    float _3556 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _495 = (-0.0) - cbMtdParam._m0[24u].y;
    float _497 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _498 = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
    float _505 = _493 - ((_493 * TEXCOORD_8.x) * _498);
    float _506 = _493 - ((_493 * TEXCOORD_8.y) * _498);
    float _507 = _493 - ((_493 * TEXCOORD_8.z) * _498);
    float _514 = (_505 * ((_364.x * cbMtdParam._m0[18u].x) - _343)) + _343;
    float _515 = (_506 * ((_364.y * cbMtdParam._m0[18u].y) - _344)) + _344;
    float _516 = (_507 * ((_364.z * cbMtdParam._m0[18u].z) - _345)) + _345;
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _559 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_530 - _531) * cbMtdParam._m0[24u].w) + _531) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3577 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _568 = ((((cbMtdParam._m0[10u].x - _514) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _560) + _514;
    float _569 = ((((cbMtdParam._m0[10u].y - _515) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _560) + _515;
    float _570 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _516)) * _560) + _516;
    float _575 = (((_384.z - _414) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _414;
    vec4 _589 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _596 = (_589.x * 2.0) + (-1.0);
    float _597 = (_589.y * 2.0) + (-1.0);
    float _598 = dot(vec2(_596, _597), vec2(_596, _597));
    float _3588 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _606 = ((_589.z - _575) * _505) + _575;
    float _609 = ((cbMtdParam._m0[23u].y - _606) * _560) + _606;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _634 = (_628.x * 2.0) + (-1.0);
    float _635 = (_628.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3599 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _651 = ((sqrt(1.0 - (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) - _425) * _507) + _425;
    float _654 = (((_596 - _430) * _505) + _430) + (cbMtdParam._m0[21u].x * _430);
    float _655 = (((_597 - _431) * _506) + _431) + (cbMtdParam._m0[21u].x * _431);
    float _666 = (((_634 - _654) + (_654 * cbMtdParam._m0[22u].z)) * _560) + _654;
    float _667 = (((_635 - _655) + (_655 * cbMtdParam._m0[22u].z)) * _560) + _655;
    float _668 = (_560 * (sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) - _651)) + _651;
    float _670 = cbMtdParam._m0[22u].x + _410.w;
    float _673 = fma(_668, _232, fma(_667, _239, _666 * _225));
    float _676 = fma(_668, _233, fma(_667, _240, _666 * _226));
    float _679 = fma(_668, _234, fma(_667, _241, _666 * _227));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3610 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _687 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3632 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3643 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3654 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _755 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _745);
    float _756 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _745);
    float _757 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _745);
    float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
    float _762 = _755 * _761;
    float _763 = _756 * _761;
    float _764 = _757 * _761;
    float _770 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _771 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _792 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _795 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _798 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _812 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _818 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_812].x;
    float _819 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_812].y;
    float _820 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_812].z;
    float _3665 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _822 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    vec4 _832 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _770, cbSceneParam._m0[86u].y * _771));
    float _836 = ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * TEXCOORD_5.w) * _832.x;
    float _837 = dot(vec3(_684, _685, _686), vec3(_762, _763, _764));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _684) - _762;
    float _845 = (_840 * _685) - _763;
    float _846 = (_840 * _686) - _764;
    float _850 = abs(dot(vec3(_762, _763, _764), vec3(_684, _685, _686)));
    float _3698 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_687);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _901 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1206;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _931 = fma(_905, cbModelParam._m0[26u].z, fma(_901, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897));
        float _935 = fma(_905, cbModelParam._m0[27u].z, fma(_901, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897));
        float _939 = fma(_905, cbModelParam._m0[28u].z, fma(_901, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897));
        float _964 = _897 + _684;
        float _965 = _901 + _685;
        float _966 = _905 + _686;
        float _976 = fma(_966, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964)) - _931;
        float _977 = fma(_966, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964)) - _935;
        float _978 = fma(_966, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964)) - _939;
        float _982 = inversesqrt(dot(vec3(_976, _977, _978), vec3(_976, _977, _978)));
        float _995 = ((_982 * _976) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_931 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_982 * _977) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_935 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_982 * _978) / cbModelParam._m0[34u].z) + ((((((_939 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_995, _996, _997), 0.0);
        float _1034 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1000.x + (-0.5));
        float _1036 = _1034 * (_1000.y + (-0.5));
        float _1037 = _1034 * (_1000.z + (-0.5));
        float _1044 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1007.x + (-0.5));
        float _1046 = _1044 * (_1007.y + (-0.5));
        float _1047 = _1044 * (_1007.z + (-0.5));
        float _1054 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1014.x + (-0.5));
        float _1056 = _1054 * (_1014.y + (-0.5));
        float _1057 = _1054 * (_1014.z + (-0.5));
        float _1064 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1021.x + (-0.5));
        float _1066 = _1064 * (_1021.y + (-0.5));
        float _1067 = _1064 * (_1021.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1088 = (dot(vec3(_684, _685, _686), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1098 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3746 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1100 + 1.0))) + _1105) * _1068;
        float _1115 = _1036 * 0.5;
        float _1116 = _1046 * 0.5;
        float _1117 = _1056 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_684, _685, _686), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3779 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1142 + 1.0))) + _1147) * _1069;
        float _1157 = _1037 * 0.5;
        float _1158 = _1047 * 0.5;
        float _1159 = _1057 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_684, _685, _686), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3812 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1184 + 1.0))) + _1189) * _1070;
        _1206 = _1037;
        _1208 = _1036;
        _1209 = _1035;
        _1210 = _1047;
        _1211 = _1046;
        _1212 = _1045;
        _1213 = _1057;
        _1214 = _1056;
        _1215 = _1055;
        _1216 = _1070;
        _1217 = _1069;
        _1218 = _1068;
        _1219 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1220 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1221 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
    }
    else
    {
        _1206 = _1207;
        _1208 = _1207;
        _1209 = _1207;
        _1210 = _1207;
        _1211 = _1207;
        _1212 = _1207;
        _1213 = _1207;
        _1214 = _1207;
        _1215 = _1207;
        _1216 = _1207;
        _1217 = _1207;
        _1218 = _1207;
        _1219 = 0.0;
        _1220 = 0.0;
        _1221 = 0.0;
    }
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1246 = fma(_905, cbModelParam._m0[30u].z, fma(_901, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _897));
        float _1250 = fma(_905, cbModelParam._m0[31u].z, fma(_901, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _897));
        float _1254 = fma(_905, cbModelParam._m0[32u].z, fma(_901, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _897));
        float _1277 = _897 + _684;
        float _1278 = _901 + _685;
        float _1279 = _905 + _686;
        float _1289 = fma(_1279, cbModelParam._m0[30u].z, fma(_1278, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277)) - _1246;
        float _1290 = fma(_1279, cbModelParam._m0[31u].z, fma(_1278, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277)) - _1250;
        float _1291 = fma(_1279, cbModelParam._m0[32u].z, fma(_1278, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277)) - _1254;
        float _1295 = inversesqrt(dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291)));
        float _1308 = ((_1295 * _1289) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1246 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1295 * _1290) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1250 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1295 * _1291) / cbModelParam._m0[35u].z) + ((((((_1254 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1345 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1312.x + (-0.5));
        float _1347 = _1345 * (_1312.y + (-0.5));
        float _1348 = _1345 * (_1312.z + (-0.5));
        float _1355 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1319.x + (-0.5));
        float _1357 = _1355 * (_1319.y + (-0.5));
        float _1358 = _1355 * (_1319.z + (-0.5));
        float _1365 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1326.x + (-0.5));
        float _1367 = _1365 * (_1326.y + (-0.5));
        float _1368 = _1365 * (_1326.z + (-0.5));
        float _1375 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1333.x + (-0.5));
        float _1377 = _1375 * (_1333.y + (-0.5));
        float _1378 = _1375 * (_1333.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_684, _685, _686), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3875 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1409 + 1.0))) + _1414) * _1379;
        float _1424 = _1347 * 0.5;
        float _1425 = _1357 * 0.5;
        float _1426 = _1367 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_684, _685, _686), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3908 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1451 + 1.0))) + _1456) * _1380;
        float _1466 = _1348 * 0.5;
        float _1467 = _1358 * 0.5;
        float _1468 = _1368 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_684, _685, _686), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _3941 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1493 + 1.0))) + _1498) * _1381;
        _1515 = _1348;
        _1516 = _1347;
        _1517 = _1346;
        _1518 = _1358;
        _1519 = _1357;
        _1520 = _1356;
        _1521 = _1368;
        _1522 = _1367;
        _1523 = _1366;
        _1524 = _1381;
        _1525 = _1380;
        _1526 = _1379;
        _1527 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
    }
    else
    {
        _1515 = _1207;
        _1516 = _1207;
        _1517 = _1207;
        _1518 = _1207;
        _1519 = _1207;
        _1520 = _1207;
        _1521 = _1207;
        _1522 = _1207;
        _1523 = _1207;
        _1524 = _1207;
        _1525 = _1207;
        _1526 = _1207;
        _1527 = 0.0;
        _1528 = 0.0;
        _1529 = 0.0;
    }
    float _1539 = (cbModelParam._m0[1u].x * (_1527 - _1219)) + _1219;
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1220)) + _1220;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1221)) + _1221;
    float _1562 = fma(_1541, cbSceneParam._m0[89u].z, fma(_1540, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1541, cbSceneParam._m0[90u].z, fma(_1540, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1541, cbSceneParam._m0[91u].z, fma(_1540, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1539));
    float _1583 = _844 * 0.5;
    float _1584 = _845 * 0.5;
    float _1585 = _846 * 0.5;
    float _1586 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1589 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1592 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1515, _1518, _1521, _1524));
    float _1626;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1599 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1206, _1210, _1213, _1216));
        float _1603 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1208, _1211, _1214, _1217));
        float _1607 = dot(vec4(_1583, _1584, _1585, 1.0), vec4(_1209, _1212, _1215, _1218));
        float _1614 = dot(vec4(cbModelParam._m0[39u]), vec4(_1583, _1584, _1585, 1.0));
        _1626 = dot(vec3(isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1614) ? 0.0 : (isnan(0.0) ? _1614 : max(0.0, _1614))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1626 = 1.0;
    }
    float _1637;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1628 = dot(vec4(cbModelParam._m0[40u]), vec4(_1583, _1584, _1585, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1641 = (_1637 * cbModelParam._m0[1u].x) + (_1626 * (1.0 - cbModelParam._m0[1u].x));
    float _1651 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1652 = isnan(_1651) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1651 : min(cbModelParam._m0[25u].z, _1651));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1699 = fma(_905, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897)) + cbModelParam._m0[13u].w;
        float _1703 = fma(_905, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897)) + cbModelParam._m0[14u].w;
        float _1707 = fma(_905, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897)) + cbModelParam._m0[15u].w;
        float _1710 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1713 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1716 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1744;
        if (_1710 > 0.0)
        {
            _1744 = abs((1.0 - _1699) / _1710);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1699 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1744 = frontier_phi_14_12_ladder;
        }
        float _1946;
        if (_1713 > 0.0)
        {
            _1946 = abs((1.0 - _1703) / _1713);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1703 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1946 = frontier_phi_23_19_ladder;
        }
        float _2189;
        if (_1716 > 0.0)
        {
            _2189 = abs((1.0 - _1707) / _1716);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1707 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2189 = frontier_phi_35_30_ladder;
        }
        float _2191 = isnan(_1946) ? _1744 : (isnan(_1744) ? _1946 : min(_1744, _1946));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1710) + _1699;
        float _2197 = (_2192 * _1713) + _1703;
        float _2198 = (_2192 * _1716) + _1707;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2199;
        float _2203 = _2199 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 > _2203) || ((_2197 < _2201) || ((_2196 < _2201) || (_2196 > _2203))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1652);
            frontier_phi_13_35_ladder = _2322.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2322.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2322.x * cbModelParam._m0[1u].y;
        }
        _1732 = frontier_phi_13_35_ladder_2;
        _1734 = frontier_phi_13_35_ladder_1;
        _1736 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1652);
        _1732 = _1720.x * cbModelParam._m0[1u].y;
        _1734 = _1720.y * cbModelParam._m0[1u].y;
        _1736 = _1720.z * cbModelParam._m0[1u].y;
    }
    float _1740 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1740 : min(cbModelParam._m0[25u].w, _1740));
    float _1830;
    float _1832;
    float _1834;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1794 = fma(_905, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897)) + cbModelParam._m0[21u].w;
        float _1798 = fma(_905, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897)) + cbModelParam._m0[22u].w;
        float _1802 = fma(_905, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897)) + cbModelParam._m0[23u].w;
        float _1805 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1808 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1811 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1951;
        if (_1805 > 0.0)
        {
            _1951 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1951 = frontier_phi_25_21_ladder;
        }
        float _2216;
        if (_1808 > 0.0)
        {
            _2216 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2216 = frontier_phi_37_32_ladder;
        }
        float _2421;
        if (_1811 > 0.0)
        {
            _2421 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2421 = frontier_phi_46_43_ladder;
        }
        float _2423 = isnan(_2216) ? _1951 : (isnan(_1951) ? _2216 : min(_1951, _2216));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1805) + _1794;
        float _2429 = (_2424 * _1808) + _1798;
        float _2430 = (_2424 * _1811) + _1802;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2430, cbModelParam._m0[17u].z, fma(_2429, cbModelParam._m0[17u].y, _2428 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2430, cbModelParam._m0[18u].z, fma(_2429, cbModelParam._m0[18u].y, _2428 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2430, cbModelParam._m0[19u].z, fma(_2429, cbModelParam._m0[19u].y, _2428 * cbModelParam._m0[19u].x))), _1741);
            frontier_phi_22_46_ladder = _2629.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2629.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2629.x * cbModelParam._m0[1u].z;
        }
        _1830 = frontier_phi_22_46_ladder_2;
        _1832 = frontier_phi_22_46_ladder_1;
        _1834 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1741);
        _1830 = _1814.x * cbModelParam._m0[1u].z;
        _1832 = _1814.y * cbModelParam._m0[1u].z;
        _1834 = _1814.z * cbModelParam._m0[1u].z;
    }
    float _1846 = ((((1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_865 * _852)) * _836;
    float _1847 = _1846 * ((cbModelParam._m0[1u].w * (_1830 - _1732)) + _1732);
    float _1848 = _1846 * ((cbModelParam._m0[1u].w * (_1832 - _1734)) + _1734);
    float _1849 = _1846 * ((cbModelParam._m0[1u].w * (_1834 - _1736)) + _1736);
    float _1852 = fma(_1849, cbSceneParam._m0[89u].z, fma(_1848, cbSceneParam._m0[89u].y, _1847 * cbSceneParam._m0[89u].x));
    float _1855 = fma(_1849, cbSceneParam._m0[90u].z, fma(_1848, cbSceneParam._m0[90u].y, _1847 * cbSceneParam._m0[90u].x));
    float _1858 = fma(_1849, cbSceneParam._m0[91u].z, fma(_1848, cbSceneParam._m0[91u].y, _1847 * cbSceneParam._m0[91u].x));
    uvec4 _1868 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _1870 = _1868.x * 14u;
    uint _1871 = _1870 + 13u;
    float _1878 = _836 + (-1.0);
    float _1883 = (cbLight._m0[_1871].x * _1878) + 1.0;
    float _1884 = (cbLight._m0[_1871].y * _1878) + 1.0;
    float _1885 = (cbLight._m0[_1871].z * _1878) + 1.0;
    float _1886 = (cbLight._m0[_1871].w * _1878) + 1.0;
    uint _1887 = _1870 + 5u;
    float _1893 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1897 = _1870 + 4u;
    float _1904 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1908 = _1870 | 1u;
    float _1919 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_684, _685, _686));
    float _1922 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_684, _685, _686));
    float _4077 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _4088 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1927 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * 0.3183098733425140380859375;
    float _1929 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1936 = ((cbLight._m0[_1887].x * _1893) * _1929) + ((cbLight._m0[_1897].x * _1904) * _1927);
    float _1937 = ((_1893 * cbLight._m0[_1887].y) * _1929) + ((_1904 * cbLight._m0[_1897].y) * _1927);
    float _1938 = ((_1893 * cbLight._m0[_1887].z) * _1929) + ((_1904 * cbLight._m0[_1897].z) * _1927);
    uvec4 _1943 = floatBitsToUint(cbLight._m0[_1870 + 12u]);
    bool _1945 = _1943.x == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1945)
    {
        _1956 = _1936;
        _1958 = _1937;
        _1960 = _1938;
    }
    else
    {
        uint _1964 = _1870 + 6u;
        float _1980 = (dot(vec3(cbLight._m0[_1870 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _1981 = _1980 * _1980;
        float _4099 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1982 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1983 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1956 = (((cbLight._m0[_1964].x * 0.3183098733425140380859375) * _1982) * _1983) + _1936;
        _1958 = (((cbLight._m0[_1964].y * 0.3183098733425140380859375) * _1982) * _1983) + _1937;
        _1960 = (((cbLight._m0[_1964].z * 0.3183098733425140380859375) * _1982) * _1983) + _1938;
    }
    bool _1963 = _1943.y == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1963)
    {
        _2001 = _1956;
        _2003 = _1958;
        _2005 = _1960;
    }
    else
    {
        uint _2160 = _1870 + 7u;
        float _2176 = (dot(vec3(cbLight._m0[_1870 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4115 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2179 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2001 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _1956;
        _2003 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _1958;
        _2005 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _1960;
    }
    uint _2008 = _1870 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _687) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1870].x + _762;
    float _2024 = cbLight._m0[_1870].y + _763;
    float _2025 = cbLight._m0[_1870].z + _764;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1870].xyz));
    float _4131 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2037 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2038 = dot(vec3(_684, _685, _686), vec3(_2030, _2031, _2032));
    float _4153 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2030, _2031, _2032));
    float _4164 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = 1.0 - _2022;
    float _2073 = (0.5 / (((_2037 * ((_2036 * _2062) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2062) + _2022) * _2036))) * _2036;
    float _4175 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2086 = _1870 + 9u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _687) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1908].x + _762;
    float _2100 = cbLight._m0[_1908].y + _763;
    float _2101 = cbLight._m0[_1908].z + _764;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1908].xyz));
    float _4186 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2113 = dot(vec3(_684, _685, _686), vec3(_2106, _2107, _2108));
    float _4197 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2106, _2107, _2108));
    float _4208 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2098 * _2098;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2134 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2135 = 1.0 - _2098;
    float _2145 = (0.5 / (((_2037 * ((_2112 * _2135) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2135) + _2098) * _2112))) * _2112;
    float _4219 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    float _2157 = (((_2134 * cbLight._m0[_2086].x) * _2147) * _1893) + (((_2061 * cbLight._m0[_2008].x) * _2075) * _1904);
    float _2158 = (((_2134 * cbLight._m0[_2086].y) * _2147) * _1893) + (((_2061 * cbLight._m0[_2008].y) * _2075) * _1904);
    float _2159 = (((_2134 * cbLight._m0[_2086].z) * _2147) * _1893) + (((_2061 * cbLight._m0[_2008].z) * _2075) * _1904);
    float _2221;
    float _2223;
    float _2225;
    if (_1945)
    {
        _2221 = _2157;
        _2223 = _2158;
        _2225 = _2159;
    }
    else
    {
        uint _2227 = _1870 + 2u;
        uint _2231 = _1870 + 10u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _687) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _762;
        float _2248 = cbLight._m0[_2227].y + _763;
        float _2249 = cbLight._m0[_2227].z + _764;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2227].xyz));
        float _4230 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2261 = dot(vec3(_684, _685, _686), vec3(_2254, _2255, _2256));
        float _4241 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4252 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_2037 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2283) + _2246) * _2260))) * _2260;
        float _4263 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2221 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2157;
        _2223 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2158;
        _2225 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2159;
    }
    float _2331;
    float _2333;
    float _2335;
    if (_1963)
    {
        _2331 = _2221;
        _2333 = _2223;
        _2335 = _2225;
    }
    else
    {
        uint _2342 = _1870 + 3u;
        uint _2346 = _1870 + 11u;
        float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _687) * 0.949999988079071044921875);
        float _2361 = _2360 * _2360;
        float _2362 = cbLight._m0[_2342].x + _762;
        float _2363 = cbLight._m0[_2342].y + _763;
        float _2364 = cbLight._m0[_2342].z + _764;
        float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
        float _2369 = _2368 * _2362;
        float _2370 = _2368 * _2363;
        float _2371 = _2368 * _2364;
        float _2372 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2342].xyz));
        float _4279 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2376 = dot(vec3(_684, _685, _686), vec3(_2369, _2370, _2371));
        float _4290 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2380 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2369, _2370, _2371));
        float _4301 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2384 = _2361 * _2361;
        float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
        float _2397 = (exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2398 = 1.0 - _2361;
        float _2408 = (0.5 / (((_2037 * ((_2375 * _2398) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2398) + _2361) * _2375))) * _2375;
        float _4312 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2410 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
        float _2411 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2331 = (((_2397 * cbLight._m0[_2346].x) * _2410) * _2411) + _2221;
        _2333 = (((_2397 * cbLight._m0[_2346].y) * _2410) * _2411) + _2223;
        _2335 = (((_2397 * cbLight._m0[_2346].z) * _2410) * _2411) + _2225;
    }
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    if (_1868.y == 0u)
    {
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2486;
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2486;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2486;
        uvec4 _2501 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2502 = _2501.x;
        uint _2513 = uint((float(_2501.y) * floor(float(uint(cbSceneParam._m0[85u].y * _771) / _2502))) + floor(float(uint(cbSceneParam._m0[85u].x * _770) / _2502)));
        float _2523 = (log2(_2489 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2524 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        uint _2527 = uint(isnan(14.0) ? _2524 : (isnan(_2524) ? 14.0 : min(_2524, 14.0)));
        uvec4 _2532 = texelFetch(g_lightClusterGridBuffer, int(((_2527 << 2u) + (_2513 << 6u)) >> 2u));
        uint _2533 = _2532.x;
        uint _2534 = _2501.z;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        if (((((1u << ((_2534 >> 4u) & 15u)) + 4294967295u) & _2533) == 0u) || ((_2534 & 240u) == 0u))
        {
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
        }
        else
        {
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            uint _2784 = 0u;
            uint _2793;
            bool _2794;
            for (;;)
            {
                _2793 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                _2794 = _2793 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2794)
                {
                    frontier_phi_61_pred = _2778;
                    frontier_phi_61_pred_1 = _2783;
                    frontier_phi_61_pred_2 = _2782;
                    frontier_phi_61_pred_3 = _2781;
                    frontier_phi_61_pred_4 = _2780;
                    frontier_phi_61_pred_5 = _2779;
                }
                else
                {
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    uint _2908;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2793;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    for (;;)
                    {
                        uint _2912 = uint(findLSB(_2908)) + (_2784 << 5u);
                        uint _2909 = (_2908 + 4294967295u) & _2908;
                        uint _2914 = _2912 * 48u;
                        vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2934 = (_2912 * 48u) + 4u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2934)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2934 + 3u)).x));
                        uint _2953 = (_2912 * 48u) + 8u;
                        vec3 _2964 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x));
                        float _2968 = _2928.x - _2487;
                        float _2969 = _2928.y - _2488;
                        float _2970 = _2928.z - _2489;
                        float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                        float _2974 = inversesqrt(_2971);
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2978 = dot(vec3(_792, _795, _798), vec3(_2975, _2976, _2977));
                        float _2983 = 1.0 - (_2971 * _2928.w);
                        float _4338 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2984 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _2985 = sqrt(_2971) * _2947.w;
                        float _2988 = 1.39999997615814208984375 / (_2985 + 1.39999997615814208984375);
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2978) + _2989;
                        float _2995 = _2985 * _2985;
                        float _2999 = ((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2984) / ((_2995 * 0.699999988079071044921875) + 1.0);
                        float _3003 = (-0.0) - _2487;
                        float _3004 = (-0.0) - _2488;
                        float _3005 = (-0.0) - _2489;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3020 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                        float _3021 = 1.0 - _852;
                        float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                        float _3029 = _3028 * _3028;
                        float _3030 = _3029 * _3029;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3033 = _3012 + _2977;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3041 = dot(vec3(_792, _795, _798), vec3(_3010, _3011, _3012));
                        float _4354 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3044 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3045 = dot(vec3(_792, _795, _798), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                        float _4365 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3048 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                        float _3053 = _2988 * _3029;
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _2978) + _3054;
                        float _4376 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3058 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3059 = 1.0 - _3029;
                        float _3069 = (0.5 / (((_3058 * ((_3044 * _3059) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3058 * _3059) + _3029) * _3044))) * _3058;
                        float _4387 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3080 = (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) / ((_3052 * _3052) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125))) * _2984;
                        _2837 = (_2999 * _2947.x) + _2905;
                        _2838 = (_2999 * _2947.y) + _2906;
                        _2839 = (_2999 * _2947.z) + _2907;
                        _2834 = (_3080 * _2964.x) + _2902;
                        _2835 = (_3080 * _2964.y) + _2903;
                        _2836 = (_3080 * _2964.z) + _2904;
                        if (_2909 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2909;
                        }
                    }
                    frontier_phi_61_pred = _2834;
                    frontier_phi_61_pred_1 = _2839;
                    frontier_phi_61_pred_2 = _2838;
                    frontier_phi_61_pred_3 = _2837;
                    frontier_phi_61_pred_4 = _2836;
                    frontier_phi_61_pred_5 = _2835;
                }
                _2635 = frontier_phi_61_pred;
                _2645 = frontier_phi_61_pred_1;
                _2643 = frontier_phi_61_pred_2;
                _2641 = frontier_phi_61_pred_3;
                _2639 = frontier_phi_61_pred_4;
                _2637 = frontier_phi_61_pred_5;
                uint _2785 = _2784 + 1u;
                if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2778 = _2635;
                    _2779 = _2637;
                    _2780 = _2639;
                    _2781 = _2641;
                    _2782 = _2643;
                    _2783 = _2645;
                    _2784 = _2785;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
        }
        uvec4 _2648 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2649 = _2648.z;
        uint _2651 = (_2649 >> 8u) & 15u;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        if (((4294967295u << _2651) & _2533) == 0u)
        {
            _2746 = _2634;
            _2748 = _2636;
            _2750 = _2638;
            _2752 = _2640;
            _2754 = _2642;
            _2756 = _2644;
        }
        else
        {
            float _2771 = inversesqrt(dot(vec3(_2487, _2488, _2489), vec3(_2487, _2488, _2489)));
            float _2772 = _2771 * _2487;
            float _2773 = _2771 * _2488;
            float _2774 = _2771 * _2489;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2651 < ((_2649 >> 12u) & 15u))
            {
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2885 = _2634;
                float _2886 = _2636;
                float _2887 = _2638;
                float _2888 = _2640;
                float _2889 = _2642;
                float _2890 = _2644;
                uint _2891 = _2651;
                uint _2900;
                bool _2901;
                for (;;)
                {
                    _2900 = texelFetch(g_lightClassification, int((((_2527 << 5u) + (_2513 << 9u)) + (_2891 << 2u)) >> 2u)).x;
                    _2901 = _2900 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2901)
                    {
                        frontier_phi_67_pred = _2888;
                        frontier_phi_67_pred_1 = _2889;
                        frontier_phi_67_pred_2 = _2890;
                        frontier_phi_67_pred_3 = _2887;
                        frontier_phi_67_pred_4 = _2886;
                        frontier_phi_67_pred_5 = _2885;
                    }
                    else
                    {
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        uint _3104 = _2900;
                        uint _3105;
                        vec4 _3130;
                        float _3131;
                        vec4 _3146;
                        vec3 _3158;
                        vec4 _3173;
                        vec4 _3188;
                        float _3234;
                        bool _3235;
                        for (;;)
                        {
                            uint _3115 = ((_2891 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3104));
                            _3105 = (_3104 + 4294967295u) & _3104;
                            uint _3117 = _3115 * 40u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            _3131 = _3130.w;
                            uint _3133 = (_3115 * 40u) + 4u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3115 * 40u) + 8u;
                            _3158 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x));
                            uint _3160 = (_3115 * 40u) + 16u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            uint _3175 = (_3115 * 40u) + 20u;
                            _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3190 = (_3115 * 40u) + 24u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            uint _3209 = (_3115 * 40u) + 28u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            _3234 = fma(_2489, _3222.z, fma(_2488, _3222.y, _3222.x * _2487)) + _3222.w;
                            _3235 = !((fma(_2489, _3203.z, fma(_2488, _3203.y, _3203.x * _2487)) + _3203.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3235)
                            {
                                float _3262 = _3130.x - _2487;
                                float _3263 = _3130.y - _2488;
                                float _3264 = _3130.z - _2489;
                                float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                                float _3268 = inversesqrt(_3265);
                                float _3269 = _3268 * _3262;
                                float _3270 = _3268 * _3263;
                                float _3271 = _3268 * _3264;
                                float _3275 = 1.0 - (_3265 / (_3131 * _3131));
                                float _4398 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3280 = sqrt(_3265) * _3146.w;
                                float _3282 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                                float _3283 = _3282 * _3282;
                                float _3286 = ((1.0 - _3283) * dot(vec3(_3269, _3270, _3271), vec3(_792, _795, _798))) + _3283;
                                float _3289 = _3280 * _3280;
                                float _3293 = (fma(_2489, _3173.z, fma(_2488, _3173.y, _3173.x * _2487)) + _3173.w) / _3234;
                                float _3294 = (fma(_2489, _3188.z, fma(_2488, _3188.y, _3188.x * _2487)) + _3188.w) / _3234;
                                float _3298 = 1.0 - dot(vec2(_3293, _3294), vec2(_3293, _3294));
                                float _4414 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3300 = _3299 * (((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3276) / ((_3289 * 0.699999988079071044921875) + 1.0));
                                float _3312 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                                float _3313 = 1.0 - _852;
                                float _3320 = sqrt(1.0 - ((1.0 - (_3313 * _3313)) * (1.0 - (_3312 * _3312))));
                                float _3321 = _3320 * _3320;
                                float _3322 = _3321 * _3321;
                                float _3323 = _3269 - _2772;
                                float _3324 = _3270 - _2773;
                                float _3325 = _3271 - _2774;
                                float _3329 = inversesqrt(dot(vec3(_3323, _3324, _3325), vec3(_3323, _3324, _3325)));
                                float _3333 = dot(vec3(_792, _795, _798), vec3((-0.0) - _2772, (-0.0) - _2773, (-0.0) - _2774));
                                float _4425 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3337 = dot(vec3(_792, _795, _798), vec3(_3329 * _3323, _3329 * _3324, _3329 * _3325));
                                float _4436 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3340 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3344 = ((_3340 * _3340) * (_3322 + (-1.0))) + 1.0;
                                float _3345 = _3282 * _3321;
                                float _3346 = _3345 * _3345;
                                float _3352 = ((1.0 - _3346) * dot(vec3(_792, _795, _798), vec3(_3269, _3270, _3271))) + _3346;
                                float _4447 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3354 = 1.0 - _3321;
                                float _3364 = (0.5 / (((_3353 * ((_3336 * _3354) + _3321)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3321) * _3336))) * _3353;
                                float _4458 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3374 = (_3299 * _3276) * (((_3322 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3344 * _3344) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3374 * _3158.x;
                                frontier_phi_73_pred_1 = _3374 * _3158.y;
                                frontier_phi_73_pred_2 = _3300 * _3146.z;
                                frontier_phi_73_pred_3 = _3300 * _3146.y;
                                frontier_phi_73_pred_4 = _3300 * _3146.x;
                                frontier_phi_73_pred_5 = _3374 * _3158.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_73_pred;
                            _3379 = frontier_phi_73_pred_1;
                            _3383 = frontier_phi_73_pred_2;
                            _3382 = frontier_phi_73_pred_3;
                            _3381 = frontier_phi_73_pred_4;
                            _3380 = frontier_phi_73_pred_5;
                            _3088 = _3381 + _3101;
                            _3089 = _3382 + _3102;
                            _3090 = _3383 + _3103;
                            _3085 = _3378 + _3098;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            if (_3105 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3105;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3088;
                        frontier_phi_67_pred_1 = _3089;
                        frontier_phi_67_pred_2 = _3090;
                        frontier_phi_67_pred_3 = _3087;
                        frontier_phi_67_pred_4 = _3086;
                        frontier_phi_67_pred_5 = _3085;
                    }
                    _2753 = frontier_phi_67_pred;
                    _2755 = frontier_phi_67_pred_1;
                    _2757 = frontier_phi_67_pred_2;
                    _2751 = frontier_phi_67_pred_3;
                    _2749 = frontier_phi_67_pred_4;
                    _2747 = frontier_phi_67_pred_5;
                    uint _2892 = _2891 + 1u;
                    if (_2892 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2885 = _2747;
                        _2886 = _2749;
                        _2887 = _2751;
                        _2888 = _2753;
                        _2889 = _2755;
                        _2890 = _2757;
                        _2891 = _2892;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2755;
                frontier_phi_55_56_ladder_1 = _2757;
                frontier_phi_55_56_ladder_2 = _2753;
                frontier_phi_55_56_ladder_3 = _2751;
                frontier_phi_55_56_ladder_4 = _2749;
                frontier_phi_55_56_ladder_5 = _2747;
            }
            else
            {
                frontier_phi_55_56_ladder = _2642;
                frontier_phi_55_56_ladder_1 = _2644;
                frontier_phi_55_56_ladder_2 = _2640;
                frontier_phi_55_56_ladder_3 = _2638;
                frontier_phi_55_56_ladder_4 = _2636;
                frontier_phi_55_56_ladder_5 = _2634;
            }
            _2746 = frontier_phi_55_56_ladder_5;
            _2748 = frontier_phi_55_56_ladder_4;
            _2750 = frontier_phi_55_56_ladder_3;
            _2752 = frontier_phi_55_56_ladder_2;
            _2754 = frontier_phi_55_56_ladder;
            _2756 = frontier_phi_55_56_ladder_1;
        }
        float _2761 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2546 = (_2761 * _2752) + _2001;
        _2548 = (_2761 * _2754) + _2003;
        _2550 = (_2761 * _2756) + _2005;
        _2552 = ((_2746 * 0.039999999105930328369140625) * _2761) + _2331;
        _2554 = ((_2748 * 0.039999999105930328369140625) * _2761) + _2333;
        _2556 = ((_2750 * 0.039999999105930328369140625) * _2761) + _2335;
    }
    else
    {
        _2546 = _2001;
        _2548 = _2003;
        _2550 = _2005;
        _2552 = _2331;
        _2554 = _2333;
        _2556 = _2335;
    }
    float _4474 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _4485 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4496 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    uint _2576 = _263 + 6u;
    float _2584 = _770 / cbSceneParam._m0[86u].x;
    float _2585 = _771 / cbSceneParam._m0[86u].y;
    vec4 _2599 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2601 = _2599.x;
    float _2602 = _2599.y;
    float _2603 = _2599.z;
    float _2604 = _2599.w;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2659 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2660 = _2659 / _705;
        float _2671 = _2660 * _755;
        float _2672 = _756 * _2660;
        float _2673 = (-0.0) - _2672;
        float _2674 = _2660 * _757;
        float _2676 = (cbSceneParam._m0[77u].w * _2673) / _2659;
        float _2677 = _2676 + cbSceneParam._m0[79u].w;
        float _2678 = cbSceneParam._m0[79u].w - _2672;
        float _2684 = sqrt(((_2671 * _2671) + (_2672 * _2672)) + (_2674 * _2674));
        float _2687 = (1.0 - (cbSceneParam._m0[77u].w / _2659)) * _2684;
        float _2692 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2694 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2847;
        if (abs((_2673 - _2676) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2847 = ((((_2677 > 0.0) ? exp2(_2692 * _2677) : (2.0 - exp2(_2694 * _2677))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2687;
        }
        else
        {
            float _2807 = 1.0 / cbSceneParam._m0[80u].x;
            float _2808 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : max(_2677, _2678));
            float _2809 = isnan(_2678) ? _2677 : (isnan(_2677) ? _2678 : min(_2677, _2678));
            float _2818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : min(_2808, 0.0));
            float _2819 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : min(_2809, 0.0));
            _2847 = ((abs(_2684 / _2673) * cbSceneParam._m0[80u].y) * ((((_2818 - _2819) * 2.0) - ((exp2(_2692 * (isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0)))) - exp2(_2692 * (isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0))))) * _2807)) - ((exp2(_2694 * _2818) - exp2(_2694 * _2819)) * _2807))) + (_2687 * cbSceneParam._m0[80u].z);
        }
        vec4 _2849 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2584, _2585, 1.0), 0.0);
        float _2858 = exp2((_2847 * (-1.44269502162933349609375)) * (1.0 - _2849.w));
        float _2859 = log2(_2858);
        float _2875 = log2(_2604);
        _2696 = (exp2(_2875 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].x)) * _2849.x) / cbSceneParam._m0[78u].x)) + _2601;
        _2698 = (exp2(_2875 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].y)) * _2849.y) / cbSceneParam._m0[78u].y)) + _2602;
        _2700 = (exp2(_2875 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2859 * cbSceneParam._m0[78u].z)) * _2849.z) / cbSceneParam._m0[78u].z)) + _2603;
        _2702 = _2858 * _2604;
    }
    else
    {
        _2696 = _2601;
        _2698 = _2602;
        _2700 = _2603;
        _2702 = _2604;
    }
    float _2714 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2715 = _2714 == 3.0;
    float _2716 = log2(_2702);
    float _2723 = exp2(_2716 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2546 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _836))) + ((_2552 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2724 = exp2(_2716 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2548 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _836))) + ((_2554 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2725 = exp2(_2716 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2550 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _836))) + ((_2556 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1641)) * cbPerFrame._m0[3u].x));
    float _2734 = (_2714 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2734 * (_2715 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.y = _2734 * (_2715 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.z = _2734 * (_2715 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.w = cbInstanceData._m0[_2576].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2576].w;
}


