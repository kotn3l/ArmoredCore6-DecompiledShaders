#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1203;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3509 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _427 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _446 = _444.x;
    float _447 = _444.y;
    float _448 = _444.z;
    float _457 = ((_427.z - _448) * _380) + _448;
    float _460 = ((((_427.x - _446) * _380) + _446) * 2.0) + (-1.0);
    float _461 = ((((_427.y - _447) * _380) + _447) * 2.0) + (-1.0);
    float _462 = dot(vec2(_460, _461), vec2(_460, _461));
    float _3520 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _467 = sqrt(1.0 - (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))));
    float _472 = _460 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_402.x * 2.0) + (-1.0)));
    float _473 = _461 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_402.y * 2.0) + (-1.0)));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _502 = _500.x;
    float _503 = 1.0 - _502;
    float _531 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_502 - _503) * cbMtdParam._m0[24u].w) + _503) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3531 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _532 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    float _540 = ((((cbMtdParam._m0[10u].x - _387) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _532) + _387;
    float _541 = ((((cbMtdParam._m0[10u].y - _388) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _532) + _388;
    float _542 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _389)) * _532) + _389;
    float _547 = (((_402.z - _457) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _457;
    float _551 = ((cbMtdParam._m0[23u].y - _547) * _532) + _547;
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _572 = _570.x;
    float _573 = _570.y;
    float _579 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_233, _234, _235, 0.0));
    vec4 _594 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _264) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _265) + cbTextureTilingScale._m0[18u].w));
    float _596 = _594.x;
    float _601 = fract(_594.w + cbPerFrame._m0[22u].x);
    float _603 = (1.0 - _601) * _596;
    float _608 = ((_601 + (-1.0)) + _596) * 9.0;
    float _610 = ((_596 + (-1.0)) + _601) * 9.0;
    float _611 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _612 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _626 = (_603 * ((_594.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _611 : (isnan(_611) ? 3.0 : min(_611, 3.0))) * 3.1415927410125732421875);
    float _628 = (_603 * ((_594.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _612 : (isnan(_612) ? 3.0 : min(_612, 3.0))) * 3.1415927410125732421875);
    float _632 = inversesqrt(dot(vec3(_626, _628, 1.0), vec3(_626, _628, 1.0)));
    float _648 = (((((0.5 - _572) + ((_626 * 0.5) * _632)) * _579) + _572) * 2.0) + (-1.0);
    float _649 = (((((0.5 - _573) + ((_632 * 0.5) * _628)) * _579) + _573) * 2.0) + (-1.0);
    float _650 = dot(vec2(_648, _649), vec2(_648, _649));
    float _3562 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _666 = ((((cbMtdParam._m0[22u].z * _472) - _472) + _648) * _532) + _472;
    float _667 = ((((cbMtdParam._m0[22u].z * _473) - _473) + _649) * _532) + _473;
    float _668 = (_532 * (sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) - _467)) + _467;
    float _670 = cbMtdParam._m0[22u].x + _486.w;
    float _673 = fma(_668, _233, fma(_667, _239 * TANGENT.x, (_225 * _217) * _666));
    float _676 = fma(_668, _234, fma(_667, _239 * TANGENT.y, (_225 * _218) * _666));
    float _679 = fma(_668, _235, fma(_667, _239 * TANGENT.z, (_225 * _219) * _666));
    float _683 = inversesqrt(dot(vec3(_673, _676, _679), vec3(_673, _676, _679)));
    float _684 = _683 * _673;
    float _685 = _683 * _676;
    float _686 = _683 * _679;
    float _3573 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _687 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3595 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3606 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3617 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _705 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _756 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _746);
    float _757 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _746);
    float _758 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _746);
    float _762 = inversesqrt(dot(vec3(_756, _757, _758), vec3(_756, _757, _758)));
    float _763 = _756 * _762;
    float _764 = _757 * _762;
    float _765 = _758 * _762;
    float _771 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _772 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _790 = fma(_686, cbSceneParam._m0[5u].z, fma(_685, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _684));
    float _793 = fma(_686, cbSceneParam._m0[6u].z, fma(_685, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _684));
    float _796 = fma(_686, cbSceneParam._m0[7u].z, fma(_685, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _684));
    uint _810 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _816 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_810].x;
    float _817 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_810].y;
    float _818 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_810].z;
    float _3628 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _819 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _3639 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _820 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _821 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    vec4 _830 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _771, cbSceneParam._m0[86u].y * _772));
    float _834 = ((isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * TEXCOORD_5.w) * _830.x;
    float _835 = dot(vec3(_684, _685, _686), vec3(_763, _764, _765));
    float _838 = _835 * 2.0;
    float _842 = (_838 * _684) - _763;
    float _843 = (_838 * _685) - _764;
    float _844 = (_838 * _686) - _765;
    float _848 = abs(dot(vec3(_763, _764, _765), vec3(_684, _685, _686)));
    float _3661 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _850 = sqrt(_687);
    float _862 = exp2((_850 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_850 * 3.0));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1202;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _928 = fma(_902, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894));
        float _932 = fma(_902, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894));
        float _936 = fma(_902, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894));
        float _960 = _894 + _684;
        float _961 = _898 + _685;
        float _962 = _902 + _686;
        float _972 = fma(_962, cbModelParam._m0[26u].z, fma(_961, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960)) - _928;
        float _973 = fma(_962, cbModelParam._m0[27u].z, fma(_961, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960)) - _932;
        float _974 = fma(_962, cbModelParam._m0[28u].z, fma(_961, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960)) - _936;
        float _978 = inversesqrt(dot(vec3(_972, _973, _974), vec3(_972, _973, _974)));
        float _991 = ((_978 * _972) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_928 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _992 = ((_978 * _973) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_932 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_978 * _974) / cbModelParam._m0[34u].z) + ((((((_936 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_991, _992, _993), 0.0);
        float _1030 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_996.x + (-0.5));
        float _1032 = _1030 * (_996.y + (-0.5));
        float _1033 = _1030 * (_996.z + (-0.5));
        float _1040 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1003.x + (-0.5));
        float _1042 = _1040 * (_1003.y + (-0.5));
        float _1043 = _1040 * (_1003.z + (-0.5));
        float _1050 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1010.x + (-0.5));
        float _1052 = _1050 * (_1010.y + (-0.5));
        float _1053 = _1050 * (_1010.z + (-0.5));
        float _1060 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1017.x + (-0.5));
        float _1062 = _1060 * (_1017.y + (-0.5));
        float _1063 = _1060 * (_1017.z + (-0.5));
        float _1064 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = _1031 * 0.5;
        float _1068 = _1041 * 0.5;
        float _1069 = _1051 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1084 = (dot(vec3(_684, _685, _686), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1094 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1064 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3709 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1096 + 1.0))) + _1101) * _1064;
        float _1111 = _1032 * 0.5;
        float _1112 = _1042 * 0.5;
        float _1113 = _1052 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_684, _685, _686), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3742 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1138 + 1.0))) + _1143) * _1065;
        float _1153 = _1033 * 0.5;
        float _1154 = _1043 * 0.5;
        float _1155 = _1053 * 0.5;
        float _1156 = dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155));
        float _1161 = (_1156 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1156);
        float _1169 = (dot(vec3(_684, _685, _686), vec3(_1161 * _1153, _1161 * _1154, _1161 * _1155)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1178 = sqrt(((_1154 * _1154) + (_1153 * _1153)) + (_1155 * _1155)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3775 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1180 + 1.0))) + _1185) * _1066;
        _1202 = _1033;
        _1204 = _1032;
        _1205 = _1031;
        _1206 = _1043;
        _1207 = _1042;
        _1208 = _1041;
        _1209 = _1053;
        _1210 = _1052;
        _1211 = _1051;
        _1212 = _1066;
        _1213 = _1065;
        _1214 = _1064;
        _1215 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
    }
    else
    {
        _1202 = _1203;
        _1204 = _1203;
        _1205 = _1203;
        _1206 = _1203;
        _1207 = _1203;
        _1208 = _1203;
        _1209 = _1203;
        _1210 = _1203;
        _1211 = _1203;
        _1212 = _1203;
        _1213 = _1203;
        _1214 = _1203;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1242 = fma(_902, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894));
        float _1246 = fma(_902, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894));
        float _1250 = fma(_902, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894));
        float _1273 = _894 + _684;
        float _1274 = _898 + _685;
        float _1275 = _902 + _686;
        float _1285 = fma(_1275, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273)) - _1242;
        float _1286 = fma(_1275, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273)) - _1246;
        float _1287 = fma(_1275, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273)) - _1250;
        float _1291 = inversesqrt(dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287)));
        float _1304 = ((_1291 * _1285) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1242 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1291 * _1286) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1246 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1291 * _1287) / cbModelParam._m0[35u].z) + ((((((_1250 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        float _1341 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1308.x + (-0.5));
        float _1343 = _1341 * (_1308.y + (-0.5));
        float _1344 = _1341 * (_1308.z + (-0.5));
        float _1351 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1315.x + (-0.5));
        float _1353 = _1351 * (_1315.y + (-0.5));
        float _1354 = _1351 * (_1315.z + (-0.5));
        float _1361 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1322.x + (-0.5));
        float _1363 = _1361 * (_1322.y + (-0.5));
        float _1364 = _1361 * (_1322.z + (-0.5));
        float _1371 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1329.x + (-0.5));
        float _1373 = _1371 * (_1329.y + (-0.5));
        float _1374 = _1371 * (_1329.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_684, _685, _686), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3838 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1405 + 1.0))) + _1410) * _1375;
        float _1420 = _1343 * 0.5;
        float _1421 = _1353 * 0.5;
        float _1422 = _1363 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_684, _685, _686), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3871 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1447 + 1.0))) + _1452) * _1376;
        float _1462 = _1344 * 0.5;
        float _1463 = _1354 * 0.5;
        float _1464 = _1364 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_684, _685, _686), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3904 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1489 + 1.0))) + _1494) * _1377;
        _1511 = _1344;
        _1512 = _1343;
        _1513 = _1342;
        _1514 = _1354;
        _1515 = _1353;
        _1516 = _1352;
        _1517 = _1364;
        _1518 = _1363;
        _1519 = _1362;
        _1520 = _1377;
        _1521 = _1376;
        _1522 = _1375;
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1203;
        _1512 = _1203;
        _1513 = _1203;
        _1514 = _1203;
        _1515 = _1203;
        _1516 = _1203;
        _1517 = _1203;
        _1518 = _1203;
        _1519 = _1203;
        _1520 = _1203;
        _1521 = _1203;
        _1522 = _1203;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1215)) + _1215;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1216)) + _1216;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1217)) + _1217;
    float _1558 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1535));
    float _1579 = _842 * 0.5;
    float _1580 = _843 * 0.5;
    float _1581 = _844 * 0.5;
    float _1582 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1585 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1588 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1622;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1595 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1202, _1206, _1209, _1212));
        float _1599 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1204, _1207, _1210, _1213));
        float _1603 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1610 = dot(vec4(cbModelParam._m0[39u]), vec4(_1579, _1580, _1581, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1633;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1624 = dot(vec4(cbModelParam._m0[40u]), vec4(_1579, _1580, _1581, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1637 = (_1633 * cbModelParam._m0[1u].x) + (_1622 * (1.0 - cbModelParam._m0[1u].x));
    float _1647 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _687);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1647 : min(cbModelParam._m0[25u].z, _1647));
    float _1730;
    float _1732;
    float _1734;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1697 = fma(_902, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894)) + cbModelParam._m0[13u].w;
        float _1701 = fma(_902, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894)) + cbModelParam._m0[14u].w;
        float _1705 = fma(_902, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894)) + cbModelParam._m0[15u].w;
        float _1708 = fma(_844, cbModelParam._m0[13u].z, fma(_843, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842));
        float _1711 = fma(_844, cbModelParam._m0[14u].z, fma(_843, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842));
        float _1714 = fma(_844, cbModelParam._m0[15u].z, fma(_843, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842));
        float _1742;
        if (_1708 > 0.0)
        {
            _1742 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1742 = frontier_phi_14_12_ladder;
        }
        float _1943;
        if (_1711 > 0.0)
        {
            _1943 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1943 = frontier_phi_23_19_ladder;
        }
        float _2186;
        if (_1714 > 0.0)
        {
            _2186 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2186 = frontier_phi_35_30_ladder;
        }
        float _2188 = isnan(_1943) ? _1742 : (isnan(_1742) ? _1943 : min(_1742, _1943));
        float _2189 = isnan(_2186) ? _2188 : (isnan(_2188) ? _2186 : min(_2188, _2186));
        float _2193 = (_2189 * _1708) + _1697;
        float _2194 = (_2189 * _1711) + _1701;
        float _2195 = (_2189 * _1714) + _1705;
        float _2196 = _2189 * 9.9999997473787516355514526367188e-05;
        float _2198 = (-1.0) - _2196;
        float _2200 = _2196 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2195 > _2200) || ((_2195 < _2198) || ((_2194 > _2200) || ((_2194 < _2198) || ((_2193 < _2198) || (_2193 > _2200))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2195, cbModelParam._m0[9u].z, fma(_2194, cbModelParam._m0[9u].y, _2193 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2195, cbModelParam._m0[10u].z, fma(_2194, cbModelParam._m0[10u].y, _2193 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2195, cbModelParam._m0[11u].z, fma(_2194, cbModelParam._m0[11u].y, _2193 * cbModelParam._m0[11u].x))), _1648);
            frontier_phi_13_35_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1730 = frontier_phi_13_35_ladder_2;
        _1732 = frontier_phi_13_35_ladder_1;
        _1734 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_842, _843, _844), _1648);
        _1730 = _1718.x * cbModelParam._m0[1u].y;
        _1732 = _1718.y * cbModelParam._m0[1u].y;
        _1734 = _1718.z * cbModelParam._m0[1u].y;
    }
    float _1738 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _687);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1738 : min(cbModelParam._m0[25u].w, _1738));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1793 = fma(_902, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894)) + cbModelParam._m0[21u].w;
        float _1797 = fma(_902, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894)) + cbModelParam._m0[22u].w;
        float _1801 = fma(_902, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894)) + cbModelParam._m0[23u].w;
        float _1804 = fma(_844, cbModelParam._m0[21u].z, fma(_843, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842));
        float _1807 = fma(_844, cbModelParam._m0[22u].z, fma(_843, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842));
        float _1810 = fma(_844, cbModelParam._m0[23u].z, fma(_843, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842));
        float _1948;
        if (_1804 > 0.0)
        {
            _1948 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1948 = frontier_phi_25_21_ladder;
        }
        float _2213;
        if (_1807 > 0.0)
        {
            _2213 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2213 = frontier_phi_37_32_ladder;
        }
        float _2418;
        if (_1810 > 0.0)
        {
            _2418 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2418 = frontier_phi_46_43_ladder;
        }
        float _2420 = isnan(_2213) ? _1948 : (isnan(_1948) ? _2213 : min(_1948, _2213));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1804) + _1793;
        float _2426 = (_2421 * _1807) + _1797;
        float _2427 = (_2421 * _1810) + _1801;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2428;
        float _2431 = _2428 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2427 > _2431) || ((_2427 < _2429) || ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 < _2429) || (_2425 > _2431))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2427, cbModelParam._m0[17u].z, fma(_2426, cbModelParam._m0[17u].y, _2425 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2427, cbModelParam._m0[18u].z, fma(_2426, cbModelParam._m0[18u].y, _2425 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2427, cbModelParam._m0[19u].z, fma(_2426, cbModelParam._m0[19u].y, _2425 * cbModelParam._m0[19u].x))), _1739);
            frontier_phi_22_46_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1829 = frontier_phi_22_46_ladder_2;
        _1831 = frontier_phi_22_46_ladder_1;
        _1833 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_842, _843, _844), _1739);
        _1829 = _1813.x * cbModelParam._m0[1u].z;
        _1831 = _1813.y * cbModelParam._m0[1u].z;
        _1833 = _1813.z * cbModelParam._m0[1u].z;
    }
    float _1845 = ((((1.0 - _862) * ((_850 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_862 * _850)) * _834;
    float _1846 = _1845 * ((cbModelParam._m0[1u].w * (_1829 - _1730)) + _1730);
    float _1847 = _1845 * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1848 = _1845 * ((cbModelParam._m0[1u].w * (_1833 - _1734)) + _1734);
    float _1851 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, _1846 * cbSceneParam._m0[91u].x));
    uvec4 _1867 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1869 = _1867.x * 14u;
    uint _1870 = _1869 + 13u;
    float _1877 = _834 + (-1.0);
    float _1882 = (cbLight._m0[_1870].x * _1877) + 1.0;
    float _1883 = (cbLight._m0[_1870].y * _1877) + 1.0;
    float _1884 = (cbLight._m0[_1870].z * _1877) + 1.0;
    float _1885 = (cbLight._m0[_1870].w * _1877) + 1.0;
    uint _1886 = _1869 + 5u;
    float _1892 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1896 = _1869 + 4u;
    float _1902 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1906 = _1869 | 1u;
    float _1917 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_684, _685, _686));
    float _1920 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_684, _685, _686));
    float _4040 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _4051 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1925 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * 0.3183098733425140380859375;
    float _1927 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _1934 = ((cbLight._m0[_1886].x * _1892) * _1927) + ((cbLight._m0[_1896].x * _1902) * _1925);
    float _1935 = ((_1892 * cbLight._m0[_1886].y) * _1927) + ((_1902 * cbLight._m0[_1896].y) * _1925);
    float _1936 = ((_1892 * cbLight._m0[_1886].z) * _1927) + ((_1902 * cbLight._m0[_1896].z) * _1925);
    uvec4 _1940 = floatBitsToUint(cbLight._m0[_1869 + 12u]);
    bool _1942 = _1940.x == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1942)
    {
        _1953 = _1934;
        _1955 = _1935;
        _1957 = _1936;
    }
    else
    {
        uint _1961 = _1869 + 6u;
        float _1977 = (dot(vec3(cbLight._m0[_1869 + 2u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _4062 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1980 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _1953 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1934;
        _1955 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1935;
        _1957 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1936;
    }
    bool _1960 = _1940.y == 0u;
    float _1998;
    float _2000;
    float _2002;
    if (_1960)
    {
        _1998 = _1953;
        _2000 = _1955;
        _2002 = _1957;
    }
    else
    {
        uint _2157 = _1869 + 7u;
        float _2173 = (dot(vec3(cbLight._m0[_1869 + 3u].xyz), vec3(_684, _685, _686)) * 0.5) + 0.5;
        float _2174 = _2173 * _2173;
        float _4078 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2175 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _2176 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1998 = (((cbLight._m0[_2157].x * 0.3183098733425140380859375) * _2175) * _2176) + _1953;
        _2000 = (((cbLight._m0[_2157].y * 0.3183098733425140380859375) * _2175) * _2176) + _1955;
        _2002 = (((cbLight._m0[_2157].z * 0.3183098733425140380859375) * _2175) * _2176) + _1957;
    }
    uint _2005 = _1869 + 8u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _687) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1869].x + _763;
    float _2021 = cbLight._m0[_1869].y + _764;
    float _2022 = cbLight._m0[_1869].z + _765;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1869].xyz));
    float _4094 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _2034 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2035 = dot(vec3(_684, _685, _686), vec3(_2027, _2028, _2029));
    float _4116 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2027, _2028, _2029));
    float _4127 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2019 * _2019;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2058 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2059 = 1.0 - _2019;
    float _2070 = (0.5 / (((_2034 * ((_2033 * _2059) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2059) + _2019) * _2033))) * _2033;
    float _4138 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2072 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    uint _2083 = _1869 + 9u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _687) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1906].x + _763;
    float _2097 = cbLight._m0[_1906].y + _764;
    float _2098 = cbLight._m0[_1906].z + _765;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_1906].xyz));
    float _4149 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2110 = dot(vec3(_684, _685, _686), vec3(_2103, _2104, _2105));
    float _4160 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2103, _2104, _2105));
    float _4171 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2095 * _2095;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2132 = 1.0 - _2095;
    float _2142 = (0.5 / (((_2034 * ((_2109 * _2132) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2132) + _2095) * _2109))) * _2109;
    float _4182 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2144 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    float _2154 = (((_2131 * cbLight._m0[_2083].x) * _2144) * _1892) + (((_2058 * cbLight._m0[_2005].x) * _2072) * _1902);
    float _2155 = (((_2131 * cbLight._m0[_2083].y) * _2144) * _1892) + (((_2058 * cbLight._m0[_2005].y) * _2072) * _1902);
    float _2156 = (((_2131 * cbLight._m0[_2083].z) * _2144) * _1892) + (((_2058 * cbLight._m0[_2005].z) * _2072) * _1902);
    float _2218;
    float _2220;
    float _2222;
    if (_1942)
    {
        _2218 = _2154;
        _2220 = _2155;
        _2222 = _2156;
    }
    else
    {
        uint _2224 = _1869 + 2u;
        uint _2228 = _1869 + 10u;
        float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _687) * 0.949999988079071044921875);
        float _2243 = _2242 * _2242;
        float _2244 = cbLight._m0[_2224].x + _763;
        float _2245 = cbLight._m0[_2224].y + _764;
        float _2246 = cbLight._m0[_2224].z + _765;
        float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
        float _2251 = _2250 * _2244;
        float _2252 = _2250 * _2245;
        float _2253 = _2250 * _2246;
        float _2254 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2224].xyz));
        float _4193 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2258 = dot(vec3(_684, _685, _686), vec3(_2251, _2252, _2253));
        float _4204 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2262 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2251, _2252, _2253));
        float _4215 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2266 = _2243 * _2243;
        float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
        float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2280 = 1.0 - _2243;
        float _2290 = (0.5 / (((_2034 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2280) + _2243) * _2257))) * _2257;
        float _4226 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2218 = (((_2279 * cbLight._m0[_2228].x) * _2292) * _2293) + _2154;
        _2220 = (((_2279 * cbLight._m0[_2228].y) * _2292) * _2293) + _2155;
        _2222 = (((_2279 * cbLight._m0[_2228].z) * _2292) * _2293) + _2156;
    }
    float _2328;
    float _2330;
    float _2332;
    if (_1960)
    {
        _2328 = _2218;
        _2330 = _2220;
        _2332 = _2222;
    }
    else
    {
        uint _2339 = _1869 + 3u;
        uint _2343 = _1869 + 11u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _687) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _763;
        float _2360 = cbLight._m0[_2339].y + _764;
        float _2361 = cbLight._m0[_2339].z + _765;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_684, _685, _686), vec3(cbLight._m0[_2339].xyz));
        float _4242 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2373 = dot(vec3(_684, _685, _686), vec3(_2366, _2367, _2368));
        float _4253 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4264 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2394 = (exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2395 = 1.0 - _2358;
        float _2405 = (0.5 / (((_2034 * ((_2372 * _2395) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2034 * _2395) + _2358) * _2372))) * _2372;
        float _4275 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2328 = (((_2394 * cbLight._m0[_2343].x) * _2407) * _2408) + _2218;
        _2330 = (((_2394 * cbLight._m0[_2343].y) * _2407) * _2408) + _2220;
        _2332 = (((_2394 * cbLight._m0[_2343].z) * _2407) * _2408) + _2222;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1867.y == 0u)
    {
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2483;
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2483;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2483;
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.x;
        uint _2510 = uint((float(_2498.y) * floor(float(uint(cbSceneParam._m0[85u].y * _772) / _2499))) + floor(float(uint(cbSceneParam._m0[85u].x * _771) / _2499)));
        float _2520 = (log2(_2486 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2521 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        uint _2524 = uint(isnan(14.0) ? _2521 : (isnan(_2521) ? 14.0 : min(_2521, 14.0)));
        uvec4 _2529 = texelFetch(g_lightClusterGridBuffer, int(((_2524 << 2u) + (_2510 << 6u)) >> 2u));
        uint _2530 = _2529.x;
        uint _2531 = _2498.z;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((((1u << ((_2531 >> 4u) & 15u)) + 4294967295u) & _2530) == 0u) || ((_2531 & 240u) == 0u))
        {
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
        }
        else
        {
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            uint _2782 = 0u;
            uint _2791;
            bool _2792;
            for (;;)
            {
                _2791 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                _2792 = _2791 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2792)
                {
                    frontier_phi_61_pred = _2776;
                    frontier_phi_61_pred_1 = _2781;
                    frontier_phi_61_pred_2 = _2780;
                    frontier_phi_61_pred_3 = _2779;
                    frontier_phi_61_pred_4 = _2778;
                    frontier_phi_61_pred_5 = _2777;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2791;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2782 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2484;
                        float _2967 = _2926.y - _2485;
                        float _2968 = _2926.z - _2486;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_790, _793, _796), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4301 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2484;
                        float _3002 = (-0.0) - _2485;
                        float _3003 = (-0.0) - _2486;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _850;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_790, _793, _796), vec3(_3008, _3009, _3010));
                        float _4317 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3043 = dot(vec3(_790, _793, _796), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4328 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4339 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4350 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3077 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2835 = (_2997 * _2945.x) + _2903;
                        _2836 = (_2997 * _2945.y) + _2904;
                        _2837 = (_2997 * _2945.z) + _2905;
                        _2832 = (_3077 * _2962.x) + _2900;
                        _2833 = (_3077 * _2962.y) + _2901;
                        _2834 = (_3077 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_61_pred = _2832;
                    frontier_phi_61_pred_1 = _2837;
                    frontier_phi_61_pred_2 = _2836;
                    frontier_phi_61_pred_3 = _2835;
                    frontier_phi_61_pred_4 = _2834;
                    frontier_phi_61_pred_5 = _2833;
                }
                _2632 = frontier_phi_61_pred;
                _2642 = frontier_phi_61_pred_1;
                _2640 = frontier_phi_61_pred_2;
                _2638 = frontier_phi_61_pred_3;
                _2636 = frontier_phi_61_pred_4;
                _2634 = frontier_phi_61_pred_5;
                uint _2783 = _2782 + 1u;
                if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2776 = _2632;
                    _2777 = _2634;
                    _2778 = _2636;
                    _2779 = _2638;
                    _2780 = _2640;
                    _2781 = _2642;
                    _2782 = _2783;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
        }
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.z;
        uint _2648 = (_2646 >> 8u) & 15u;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((4294967295u << _2648) & _2530) == 0u)
        {
            _2744 = _2631;
            _2746 = _2633;
            _2748 = _2635;
            _2750 = _2637;
            _2752 = _2639;
            _2754 = _2641;
        }
        else
        {
            float _2769 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
            float _2770 = _2769 * _2484;
            float _2771 = _2769 * _2485;
            float _2772 = _2769 * _2486;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2648 < ((_2646 >> 12u) & 15u))
            {
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2883 = _2631;
                float _2884 = _2633;
                float _2885 = _2635;
                float _2886 = _2637;
                float _2887 = _2639;
                float _2888 = _2641;
                uint _2889 = _2648;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2899)
                    {
                        frontier_phi_67_pred = _2886;
                        frontier_phi_67_pred_1 = _2887;
                        frontier_phi_67_pred_2 = _2888;
                        frontier_phi_67_pred_3 = _2885;
                        frontier_phi_67_pred_4 = _2884;
                        frontier_phi_67_pred_5 = _2883;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3095 = _2883;
                        float _3096 = _2884;
                        float _3097 = _2885;
                        float _3098 = _2886;
                        float _3099 = _2887;
                        float _3100 = _2888;
                        uint _3101 = _2898;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3185;
                        float _3231;
                        bool _3232;
                        for (;;)
                        {
                            uint _3112 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3172 = (_3112 * 40u) + 20u;
                            _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            uint _3187 = (_3112 * 40u) + 24u;
                            vec4 _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3206 = (_3112 * 40u) + 28u;
                            vec4 _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3231 = fma(_2486, _3219.z, fma(_2485, _3219.y, _3219.x * _2484)) + _3219.w;
                            _3232 = !((fma(_2486, _3200.z, fma(_2485, _3200.y, _3200.x * _2484)) + _3200.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3232)
                            {
                                float _3259 = _3127.x - _2484;
                                float _3260 = _3127.y - _2485;
                                float _3261 = _3127.z - _2486;
                                float _3262 = dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261));
                                float _3265 = inversesqrt(_3262);
                                float _3266 = _3265 * _3259;
                                float _3267 = _3265 * _3260;
                                float _3268 = _3265 * _3261;
                                float _3272 = 1.0 - (_3262 / (_3128 * _3128));
                                float _4361 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3277 = sqrt(_3262) * _3143.w;
                                float _3279 = 1.39999997615814208984375 / (_3277 + 1.39999997615814208984375);
                                float _3280 = _3279 * _3279;
                                float _3283 = ((1.0 - _3280) * dot(vec3(_3266, _3267, _3268), vec3(_790, _793, _796))) + _3280;
                                float _3286 = _3277 * _3277;
                                float _3290 = (fma(_2486, _3170.z, fma(_2485, _3170.y, _3170.x * _2484)) + _3170.w) / _3231;
                                float _3291 = (fma(_2486, _3185.z, fma(_2485, _3185.y, _3185.x * _2484)) + _3185.w) / _3231;
                                float _3295 = 1.0 - dot(vec2(_3290, _3291), vec2(_3290, _3291));
                                float _4377 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3296 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3297 = _3296 * (((isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0))) * _3273) / ((_3286 * 0.699999988079071044921875) + 1.0));
                                float _3309 = exp2(log2(1.0 / ((_3286 * 3.5) + 5.0)) * 0.25);
                                float _3310 = 1.0 - _850;
                                float _3317 = sqrt(1.0 - ((1.0 - (_3310 * _3310)) * (1.0 - (_3309 * _3309))));
                                float _3318 = _3317 * _3317;
                                float _3319 = _3318 * _3318;
                                float _3320 = _3266 - _2770;
                                float _3321 = _3267 - _2771;
                                float _3322 = _3268 - _2772;
                                float _3326 = inversesqrt(dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322)));
                                float _3330 = dot(vec3(_790, _793, _796), vec3((-0.0) - _2770, (-0.0) - _2771, (-0.0) - _2772));
                                float _4388 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3333 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3334 = dot(vec3(_790, _793, _796), vec3(_3326 * _3320, _3326 * _3321, _3326 * _3322));
                                float _4399 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3337 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3341 = ((_3337 * _3337) * (_3319 + (-1.0))) + 1.0;
                                float _3342 = _3279 * _3318;
                                float _3343 = _3342 * _3342;
                                float _3349 = ((1.0 - _3343) * dot(vec3(_790, _793, _796), vec3(_3266, _3267, _3268))) + _3343;
                                float _4410 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3350 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3351 = 1.0 - _3318;
                                float _3361 = (0.5 / (((_3350 * ((_3333 * _3351) + _3318)) + 9.9999999392252902907785028219223e-09) + (((_3350 * _3351) + _3318) * _3333))) * _3350;
                                float _4421 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3371 = (_3296 * _3273) * (((_3319 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3341 * _3341) * ((_3286 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3371 * _3155.x;
                                frontier_phi_73_pred_1 = _3371 * _3155.y;
                                frontier_phi_73_pred_2 = _3297 * _3143.z;
                                frontier_phi_73_pred_3 = _3297 * _3143.y;
                                frontier_phi_73_pred_4 = _3297 * _3143.x;
                                frontier_phi_73_pred_5 = _3371 * _3155.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3375 = frontier_phi_73_pred;
                            _3376 = frontier_phi_73_pred_1;
                            _3380 = frontier_phi_73_pred_2;
                            _3379 = frontier_phi_73_pred_3;
                            _3378 = frontier_phi_73_pred_4;
                            _3377 = frontier_phi_73_pred_5;
                            _3085 = _3378 + _3098;
                            _3086 = _3379 + _3099;
                            _3087 = _3380 + _3100;
                            _3082 = _3375 + _3095;
                            _3083 = _3376 + _3096;
                            _3084 = _3377 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3085;
                        frontier_phi_67_pred_1 = _3086;
                        frontier_phi_67_pred_2 = _3087;
                        frontier_phi_67_pred_3 = _3084;
                        frontier_phi_67_pred_4 = _3083;
                        frontier_phi_67_pred_5 = _3082;
                    }
                    _2751 = frontier_phi_67_pred;
                    _2753 = frontier_phi_67_pred_1;
                    _2755 = frontier_phi_67_pred_2;
                    _2749 = frontier_phi_67_pred_3;
                    _2747 = frontier_phi_67_pred_4;
                    _2745 = frontier_phi_67_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2745;
                        _2884 = _2747;
                        _2885 = _2749;
                        _2886 = _2751;
                        _2887 = _2753;
                        _2888 = _2755;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2753;
                frontier_phi_55_56_ladder_1 = _2755;
                frontier_phi_55_56_ladder_2 = _2751;
                frontier_phi_55_56_ladder_3 = _2749;
                frontier_phi_55_56_ladder_4 = _2747;
                frontier_phi_55_56_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_55_56_ladder = _2639;
                frontier_phi_55_56_ladder_1 = _2641;
                frontier_phi_55_56_ladder_2 = _2637;
                frontier_phi_55_56_ladder_3 = _2635;
                frontier_phi_55_56_ladder_4 = _2633;
                frontier_phi_55_56_ladder_5 = _2631;
            }
            _2744 = frontier_phi_55_56_ladder_5;
            _2746 = frontier_phi_55_56_ladder_4;
            _2748 = frontier_phi_55_56_ladder_3;
            _2750 = frontier_phi_55_56_ladder_2;
            _2752 = frontier_phi_55_56_ladder;
            _2754 = frontier_phi_55_56_ladder_1;
        }
        float _2759 = isnan(1.0) ? _834 : (isnan(_834) ? 1.0 : min(_834, 1.0));
        _2543 = (_2759 * _2750) + _1998;
        _2545 = (_2759 * _2752) + _2000;
        _2547 = (_2759 * _2754) + _2002;
        _2549 = ((_2744 * 0.039999999105930328369140625) * _2759) + _2328;
        _2551 = ((_2746 * 0.039999999105930328369140625) * _2759) + _2330;
        _2553 = ((_2748 * 0.039999999105930328369140625) * _2759) + _2332;
    }
    else
    {
        _2543 = _1998;
        _2545 = _2000;
        _2547 = _2002;
        _2549 = _2328;
        _2551 = _2330;
        _2553 = _2332;
    }
    float _4437 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _4448 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _4459 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    uint _2573 = _245 + 6u;
    float _2581 = _771 / cbSceneParam._m0[86u].x;
    float _2582 = _772 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _705 : (isnan(_705) ? cbSceneParam._m0[77u].w : min(_705, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_705 > cbSceneParam._m0[78u].w)
    {
        float _2656 = isnan(_705) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _705 : min(cbSceneParam._m0[80u].w, _705));
        float _2657 = _2656 / _705;
        float _2668 = _2657 * _756;
        float _2669 = _757 * _2657;
        float _2670 = (-0.0) - _2669;
        float _2672 = _2657 * _758;
        float _2674 = (cbSceneParam._m0[77u].w * _2670) / _2656;
        float _2675 = _2674 + cbSceneParam._m0[79u].w;
        float _2676 = cbSceneParam._m0[79u].w - _2669;
        float _2682 = sqrt(((_2668 * _2668) + (_2669 * _2669)) + (_2672 * _2672));
        float _2685 = (1.0 - (cbSceneParam._m0[77u].w / _2656)) * _2682;
        float _2690 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2692 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2845;
        if (abs((_2670 - _2674) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2845 = ((((_2675 > 0.0) ? exp2(_2690 * _2675) : (2.0 - exp2(_2692 * _2675))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2685;
        }
        else
        {
            float _2805 = 1.0 / cbSceneParam._m0[80u].x;
            float _2806 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : max(_2675, _2676));
            float _2807 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : min(_2675, _2676));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            _2845 = ((abs(_2682 / _2670) * cbSceneParam._m0[80u].y) * ((((_2816 - _2817) * 2.0) - ((exp2(_2690 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0)))) - exp2(_2690 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))))) * _2805)) - ((exp2(_2692 * _2816) - exp2(_2692 * _2817)) * _2805))) + (_2685 * cbSceneParam._m0[80u].z);
        }
        vec4 _2847 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2856 = exp2((_2845 * (-1.44269502162933349609375)) * (1.0 - _2847.w));
        float _2857 = log2(_2856);
        float _2873 = log2(_2601);
        _2694 = (exp2(_2873 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].x)) * _2847.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2696 = (exp2(_2873 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].y)) * _2847.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2698 = (exp2(_2873 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].z)) * _2847.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2700 = _2856 * _2601;
    }
    else
    {
        _2694 = _2598;
        _2696 = _2599;
        _2698 = _2600;
        _2700 = _2601;
    }
    float _2712 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2713 = _2712 == 3.0;
    float _2714 = log2(_2700);
    float _2721 = exp2(_2714 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2543 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _834))) + ((_2549 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2722 = exp2(_2714 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (_2545 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _834))) + ((_2551 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2723 = exp2(_2714 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2547 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _834))) + ((_2553 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1637)) * cbPerFrame._m0[3u].x));
    float _2732 = (_2712 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2732 * (_2713 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.y = _2732 * (_2713 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.z = _2732 * (_2713 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.w = cbInstanceData._m0[_2573].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2573].w;
}


